msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"link:https://hibernate.org/reactive/[Hibernate Reactive] is the only reactive Jakarta Persistence (formerly known as JPA) implementation and offers you the full\n"
"breadth of an Object Relational Mapper allowing you to access your database over reactive drivers.\n"
"It makes complex mappings possible, but it does not make simple and common mappings trivial.\n"
"Hibernate Reactive with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate Reactive is not a replacement for xref:hibernate-orm-panache.adoc[Hibernate ORM] or the future of Hibernate ORM.\n"
"It is a different stack tailored for reactive use cases where you need high-concurrency."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Furthermore, using RESTEasy Reactive, our default REST layer, does not require the use of Hibernate Reactive.\n"
"It is perfectly valid to use RESTEasy Reactive with Hibernate ORM,\n"
"and if you do not need high-concurrency, or are not accustomed to the reactive paradigm, it is recommended to use Hibernate ORM."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"You have noticed how much more compact and readable the code is?\n"
"Does this look interesting? Read on!"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"What was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your\n"
"columns as public fields:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the\n"
"`@Transient` annotation on it. If you need to write accessors, you can:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor,\n"
"and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n"
"Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheRepository`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"You should only use the `list` methods if your table contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements\n"
"at the end."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"You can also write your queries in plain\n"
"link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Named queries can only be defined inside your Jakarta Persistence entity classes (being the Panache entity class, or the repository parameterized type),\n"
"or on one of its super classes."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n"
"This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide:\n"
"link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to\n"
"instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query,\n"
"so the compiler must be configured to store parameter names inside the compiled class.\n"
"This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor\n"
"matching the values returned by the select clause:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"First of all, most of the methods of a Panache entity must be invoked within the scope of a reactive `Mutiny.Session`.\n"
"In some cases, the session is opened automatically on demand.\n"
"For example, if a Panache entity method is invoked in a Jakarta REST resource method in an application that includes the `quarkus-resteasy-reactive` extension.\n"
"For other cases, there are both a declarative and a programmatic way to ensure the session is opened.\n"
"You can annotate a CDI business method that returns `Uni` with the `@WithSession` annotation.\n"
"The method will be intercepted and the returned `Uni` will be triggered within a scope of a reactive session.\n"
"Alternatively, you can use the `Panache.withSession()` method to achieve the same effect."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Also make sure to wrap methods that modify the database or involve multiple queries (e.g. `entity.persist()`) within a transaction.\n"
"You can annotate a CDI business method that returns `Uni` with the `@WithTransaction` annotation.\n"
"The method will be intercepted and the returned `Uni` is triggered within a transaction boundary.\n"
"Alternatively, you can use the `Panache.withTransaction()` method for the same effect."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate Reactive batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.\n"
"This is usually a good thing as it is more efficient.\n"
"But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate Reactive send those changes to the database.\n"
"Remember, this is less efficient so don't abuse it.\n"
"And your transaction still has to be committed."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"The `@WithTransaction` annotation will also work for testing.\n"
"This means that changes done during the test will be propagated to the database.\n"
"If you want any changes made to be rolled back at the end of\n"
"the test you can use the `io.quarkus.test.TestReactiveTransaction` annotation.\n"
"This will run the test method in a transaction, but roll it back once the test method is complete to revert any database changes."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we\n"
"have you covered."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then\n"
"you just declare whatever ID you want as a public field:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"The `quarkus-test-vertx` dependency provides the `@io.quarkus.test.vertx.RunOnVertxContext` annotation and the `io.quarkus.test.vertx.UniAsserter` class which are intended precisely for this purpose.\n"
"The usage is described in the xref:hibernate-reactive.adoc#testing[Hibernate Reactive] guide."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Moreover, the `quarkus-test-hibernate-reactive-panache` dependency provides the `io.quarkus.test.hibernate.reactive.panache.TransactionalUniAsserter` that can be injected as a method parameter of a test method annotated with `@RunOnVertxContext`.\n"
"The `TransactionalUniAsserter` is a `io.quarkus.test.vertx.UniAsserterInterceptor` that wraps each assert method within a separate reactive transaction."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"When it comes to writing Hibernate Reactive entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really\n"
"relevant to your model."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields,\n"
"then generate getters and setters for those fields, even if they don't actually do anything more than read/write\n"
"the fields."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods\n"
"are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository\n"
"where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're\n"
"writing to set up an injection point before coming back to use it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our\n"
"model usage."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters\n"
"that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better\n"
"`Person.find(\"name\", \"stef\")`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"It attempts to identify archives with Panache entities (and consumers of Panache entities)\n"
"by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an\n"
"annotation processor that will automatically create this file in archives that depend on\n"
"Panache (even indirectly). If you have disabled annotation processors you may need to create\n"
"this file manually in some cases."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/hibernate-reactive-panache.adoc
msgid ""
"If you include the jpa-modelgen annotation processor this will exclude the Panache\n"
"annotation processor by default. If you do this you should either create the marker file\n"
"yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/hibernate-reactive-panache.adoc:6
#, no-wrap
msgid "Simplified Hibernate Reactive with Panache"
msgstr "PanacheでシンプルになったHibernate Reactive"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:27
#, no-wrap
msgid "First: an example"
msgstr "最初に:例"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:30
msgid "What we're doing in Panache allows you to write your Hibernate Reactive entities like this:"
msgstr "Panacheでは、HibernateのReactiveエンティティをこのように書けるようにしています:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:59
msgid "The `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "`list()` メソッドには、最初は驚くかもしれません。これはHQL（JP-QL）クエリのフラグメントを取り、残りをコンテキスト化するものです。そのため、非常に簡潔で、しかも読みやすいコードになります。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:63
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:69
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:71
#, fuzzy
msgid "The solution is located in the `hibernate-reactive-panache-quickstart` link:{quickstarts-tree-url}/hibernate-reactive-panache-quickstart[directory]."
msgstr "ソリューションは `hibernate-reactive-panache-quickstart` link:{quickstarts-tree-url}/hibernate-reactive-panache-quickstart[ディレクトリに] あります。"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:75
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr "プロジェクトがすでに他のアノテーションプロセッサーを使用するように設定されている場合、追加でPanacheアノテーションプロセッサーを追加する必要があります:"

#. type: Block title
#: upstream/_guides/hibernate-reactive-panache.adoc:77
#: upstream/_guides/hibernate-reactive-panache.adoc:121
#: upstream/_guides/hibernate-reactive-panache.adoc:908
#: upstream/_guides/hibernate-reactive-panache.adoc:1018
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_guides/hibernate-reactive-panache.adoc:97
#: upstream/_guides/hibernate-reactive-panache.adoc:137
#: upstream/_guides/hibernate-reactive-panache.adoc:918
#: upstream/_guides/hibernate-reactive-panache.adoc:1028
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:103
#, no-wrap
msgid "Setting up and configuring Hibernate Reactive with Panache"
msgstr "PanacheによるHibernate Reactiveのセットアップと設定"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:106
msgid "To get started:"
msgstr "始めるには:"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:108
msgid "add your settings in `{config-file}`"
msgstr "`{config-file}` で設定を追加します"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:109
msgid "annotate your entities with `@Entity`"
msgstr "エンティティに `@Entity` アノテーションを付けます"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:110
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "エンティティが `PanacheEntity` を拡張するようにする(リポジトリパターンを使用している場合はオプションです)"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:112
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "すべての設定は、 link:hibernate-orm.html#setting-up-and-configuring-hibernate-orm[Hibernateセットアップガイド]を確認してください。"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:114
msgid "In your `pom.xml`, add the following dependencies:"
msgstr "ビルドファイルに、以下の依存関係を追加します:"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:116
msgid "the Hibernate Reactive with Panache extension"
msgstr "Hibernate Reactive with Panache エクステンション"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:117
msgid "your reactive driver extension (`quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"
msgstr "お使いのリアクティブドライバのエクステンション ( `quarkus-reactive-pg-client` , `quarkus-reactive-mysql-client` , `quarkus-reactive-db2-client` , ... )"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:119
msgid "For instance:"
msgstr "例えば:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:147
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "次に、 `{config-file}` で関連する設定プロパティを追加します。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:160
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解決策1:アクティブレコードパターンを使用する"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:162
#: upstream/_guides/hibernate-reactive-panache.adoc:287
#, no-wrap
msgid "Defining your entity"
msgstr "エンティティの定義"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:204
#: upstream/_guides/hibernate-reactive-panache.adoc:370
#, no-wrap
msgid "Most useful operations"
msgstr "最も使うことの多い操作"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:207
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "エンティティーを記述したら、このように最も一般的な操作が実行できるようになります:"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:256
#, no-wrap
msgid "Adding entity methods"
msgstr "エンティティメソッドの追加"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:284
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解決策2:リポジトリパターンを使用する"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:290
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr "リポジトリパターンを使用する場合、エンティティを通常のJakarta Persistenceエンティティとして定義することができます。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:330
#, no-wrap
msgid "Defining your repository"
msgstr "リポジトリの定義"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:373
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "リポジトリを書くことで実行可能な最も一般的な操作は以下の通りです:"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:426
#, no-wrap
msgid "Advanced Query"
msgstr "高度なクエリー"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:428
#, no-wrap
msgid "Paging"
msgstr "ページング"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:464
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 型には、ページングや返されたストリームを処理するための他の多くのメソッドがあります。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:465
#, no-wrap
msgid "Using a range instead of pages"
msgstr "ページの代わりにレンジを使用"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:468
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` では、レンジベースのクエリーも使用できます。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:490
#, no-wrap
msgid "Sorting"
msgstr "ソート"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:493
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "クエリー文字列を受け付けるすべてのメソッドは、以下の簡略化されたクエリー形式も受け付けます:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:500
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "しかし、これらのメソッドには、オプションで `Sort` というパラメータが用意されており、これによってソートの抽象化が可能になります:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:513
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr "`Sort` クラスには、列を追加したり、ソート方向を指定したり、nullの優先順位を指定したりするメソッドが豊富に用意されています。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:514
#, no-wrap
msgid "Simplified queries"
msgstr "シンプルなクエリー"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:520
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "選択クエリーが `from` で始まらない場合は、以下の追加の形式をサポートしています:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:522
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by ...` は `from EntityName order by ...` に展開されます"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:523
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` （およびシングルパラメータ は `from EntityName where <singleColumnName> = ?` に展開されます"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:524
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` は `from EntityName where <query>` に展開されます"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:526
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "更新クエリーが `update` で始まらない場合は、以下の追加の形式をサポートしています:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:528
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr "`from EntityName ...` は `update from EntityName ...` に展開されます"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:529
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr "`set? <singleColumnName>` （およびシングルパラメータ） は `update from EntityName set <singleColumnName> = ?` に展開されます"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:530
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr "`set? <update-query>` は `update from EntityName set <update-query>` に展開されます"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:532
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "削除クエリーが `delete` で始まらない場合は、以下の追加の形式をサポートしています:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:534
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName …​` は `delete from EntityName ...` に展開されます"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:535
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` （およびシングルパラメータ）は `delete from EntityName where <singleColumnName> = ?` に展開されます"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:536
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`<query>` は `delete from EntityName where <query>` に展開されます"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:546
#, no-wrap
msgid "Named queries"
msgstr "名前付きクエリー"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:549
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "名前付きのクエリーは、その名前の前に「#」文字を付けることで、（簡易）HQLクエリーの代わりに参照することができます。また、名前付きのクエリーは、カウント、更新、削除のクエリーにも使用できます。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:588
#, no-wrap
msgid "Query parameters"
msgstr "クエリーパラメーター"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:591
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "以下のように、インデックス（1ベース）でクエリーパラメーターを渡すことができます:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:598
msgid "Or by name using a `Map`:"
msgstr "または、 `Map` を使った名前で:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:608
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "または、便利なクラス `Parameters` をそのまま使用するか、 `Map` を構築する:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:621
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "すべてのクエリー操作は、インデックス( `Object…​`)または名前付きパラメーター( `Map<String,Object>` または `Parameters`)でパラメータを渡すことができます。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:622
#, no-wrap
msgid "Query projection"
msgstr "クエリーの射影"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:625
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "クエリーの射影は、 `find()` のメソッドが返す `PanacheQuery` オブジェクトに対して `project(Class)` のメソッドで行うことができます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:627
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "これを使って、データベースから返されるフィールドを制限することができます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:653
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "ここではパブリックフィールドを使用していますが、必要に応じてプライベートフィールドやゲッター/セッターを使用することもできます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:654
msgid "This constructor will be used by Hibernate, and it must have a matching constructor with all the class attributes as parameters."
msgstr "このコンストラクタはHibernate によって使用されます。このコンストラクタはクラス内の唯一のコンストラクタであり、パラメータとしてクラスのすべての属性を持つ必要があります。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:664
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "DTO射影のオブジェクトから参照されるエンティティのフィールドがある場合、 `@ProjectedFieldName` アノテーションを使用してSELECT文のパスを提供することができます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:690
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "`ownerName` DTOコンストラクタのパラメータは `owner.name` HQLプロパティから読み込まれます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:717
msgid "Hibernate Reactive will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr "Hibernate Reactive は、このコンストラクタを使用します。クエリが select 節を持つ場合、複数のコンストラクタを持つことが可能です。"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:721
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr "HQL `select new` クエリと `.project(Class)` を同時に行うことはできません。どちらかの方法を選択する必要があります。"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:723
msgid "For example, this will fail:"
msgstr "例えば、このような場合、失敗します。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:729
#, no-wrap
msgid "Multiple Persistence Units"
msgstr "複数の永続性ユニット"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:732
msgid "Hibernate Reactive in Quarkus currently does not support multiple persistence units."
msgstr "QuarkusのHibernate Reactiveは現時点では複数の永続化ユニットをサポートしていません。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:734
#, no-wrap
msgid "Sessions and Transactions"
msgstr "セッションとトランザクション"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:745
#, fuzzy
msgid "Note that a Panache entity may not be used from a blocking thread. See also xref:getting-started-reactive.adoc[Getting Started With Reactive] guide that explains the basics of reactive principles in Quarkus."
msgstr "Panacheエンティティは、ブロッキングスレッドから使用することはできないことに注意してください。Quarkusのリアクティブ原則の基本を説明する「 xref:getting-started-reactive.adoc[Getting Started With Reactive] 」ガイドも参照してください。"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:752
#, fuzzy
msgid "You cannot use the `@Transactional` annotation with Hibernate Reactive for your transactions: you must use `@WithTransaction`, and your annotated method must return a `Uni` to be non-blocking."
msgstr "HibernateのReactiveでは、トランザクションに `@Transactional` アノテーションを使用できません。 `@WithTransaction` を使用する必要があり、アノテーションを付けたメソッドはノンブロッキングにするために `Uni` を返す必要があります。"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:760
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "ここでは `PersistenceException` が発生した場合に特定の動作を行えるようにするための flush メソッドの使用例を示します:"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:782
#, no-wrap
msgid "Lock management"
msgstr "ロック管理"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:785
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panacheは `findById(Object, LockModeType)` や `find().withLock(LockModeType)` を使用してエンティティ/リポジトリでデータベースロックを直接サポートします。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:787
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "以下の例はアクティブレコードパターンの場合ですが、リポジトリでも同じように使用できます。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:788
#, no-wrap
msgid "First: Locking using findById()."
msgstr "1つ目: findById()を使ってロックする。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:806
#, no-wrap
msgid "Second: Locking in a find()."
msgstr "2つ目：find()でロックする。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:826
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be called within a transaction."
msgstr "トランザクションが終了するとロックが解放されるため、ロッククエリーを呼び出すメソッドはトランザクション内で呼び出す必要があることに注意してください。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:827
#, no-wrap
msgid "Custom IDs"
msgstr "カスタムID"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:864
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:867
msgid "Testing reactive Panache entities in a `@QuarkusTest` is slightly more complicated than testing regular Panache entities due to the asynchronous nature of the APIs and the fact that all operations need to run on a Vert.x event loop."
msgstr "`@QuarkusTest` におけるリアクティブPanacheエンティティのテストは、APIの非同期性と、すべての操作がVert.xイベントループ上で実行される必要があるという事実のために、通常のPanacheエンティティのテストよりも若干複雑です。"

#. type: Block title
#: upstream/_guides/hibernate-reactive-panache.adoc:874
#, fuzzy, no-wrap
msgid "`TransactionalUniAsserter` Example"
msgstr "`TransactionalUniAsserter` 例"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:892
#, fuzzy
msgid "The first reactive transaction is used to persist the entity."
msgstr "最初のリアクティブ・トランザクションは、エンティティの永続化に使用される。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:893
#, fuzzy
msgid "The second reactive transaction is used to count the entities."
msgstr "つ目のリアクティブ・トランザクションは、エンティティのカウントに使用される。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:894
#, fuzzy
msgid "The third reactive transaction is used to delete all entities."
msgstr "第3のリアクティブ・トランザクションは、すべてのエンティティの削除に使用される。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:896
#, fuzzy
msgid "Of course, you can also define a custom `UniAsserterInterceptor` to wrap the injected `UniAsserter` and customize the behavior."
msgstr "もちろん、カスタム `UniAsserterInterceptor` を定義して、注入された `UniAsserter` をラップし、動作をカスタマイズすることもできる。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:897
#, no-wrap
msgid "Mocking"
msgstr "モック"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:899
#, no-wrap
msgid "Using the active record pattern"
msgstr "アクティブレコードパターンの使用"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:906
msgid "Add this dependency to your build file:"
msgstr "この依存関係をビルドファイルに追加してください:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:924
#: upstream/_guides/hibernate-reactive-panache.adoc:1034
msgid "Given this simple entity:"
msgstr "このシンプルなエンティティ:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:939
#: upstream/_guides/hibernate-reactive-panache.adoc:1061
msgid "You can write your mocking test like this:"
msgstr "モック化テストはこのように書くことができます:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1008
#: upstream/_guides/hibernate-reactive-panache.adoc:1133
msgid "Make sure the test method is run on the Vert.x event loop."
msgstr "テストメソッドがVert.xのイベントループで実行されるようにします。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1009
#, fuzzy
msgid "The injected `UniAsserter` argument is used to make assertions."
msgstr "注入された `UniAsserter` 引数は、アサーションを行うために使用される。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:1012
#, no-wrap
msgid "Using the repository pattern"
msgstr "リポジトリパターンの使用"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1049
msgid "And this repository:"
msgstr "そしてこのリポジトリ:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1134
#, fuzzy
msgid "The injected `UniAsserter` agrument is used to make assertions."
msgstr "注入された `UniAsserter` のアグリーメントは、アサーションを行うために使用されます。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:1135
#, no-wrap
msgid "How and why we simplify Hibernate Reactive mappings"
msgstr "HibernateのReactiveマッピングを単純化する方法と理由"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1157
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Panacheでは、これらの問題に対して、定見に基づいたアプローチをとりました:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1171
msgid "That's all there is to it: with Panache, Hibernate Reactive has never looked so trim and neat."
msgstr "以上、Panacheを使えば、Hibernate Reactiveがこれほどまでにすっきりするのかということでした。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:1172
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1175
msgid "Hibernate Reactive with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "Hibernate Reactive with Panacheは、コンパイル時のエンティティに対するバイトコード拡張に依存しています。"
