# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-12-22 15:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/hibernate-reactive-panache.adoc:6
#, fuzzy, no-wrap
msgid "Simplified Hibernate Reactive with Panache"
msgstr "Quarkus - PanacheによるシンプルなHibernate Reactive"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:15
#, fuzzy
msgid "link:http://hibernate.org/reactive/[Hibernate Reactive] is the only reactive JPA implementation and offers you the full breadth of an Object Relational Mapper allowing you to access your database over reactive drivers.  It makes complex mappings possible, but it does not make simple and common mappings trivial.  Hibernate Reactive with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr "link:http://hibernate.org/reactive/[Hibernate Reactive]は、唯一のリアクティブJPA実装であり、オブジェクトリレーショナルマッパーの全機能を提供し、リアクティブドライバを介してデータベースにアクセスすることができます。複雑なマッピングを可能にしますが、単純で一般的なマッピングを些細なものにするわけではありません。Panacheを使用したHibernate Reactiveは、Quarkusでエンティティを些細で楽しく書けるようにすることに重点を置いています。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:16
#, fuzzy, no-wrap
msgid "First: an example"
msgstr "最初に：一例"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:19
#, fuzzy
msgid "What we're doing in Panache is allow you to write your Hibernate Reactive entities like this:"
msgstr "Panacheでは、HibernateのReactiveエンティティをこのように書けるようにしています。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:27
#: upstream/_guides/hibernate-reactive-panache.adoc:133
#: upstream/_guides/hibernate-reactive-panache.adoc:215
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:31
#: upstream/_guides/hibernate-reactive-panache.adoc:219
#, no-wrap
msgid ""
"    public static Uni<Person> findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:35
#: upstream/_guides/hibernate-reactive-panache.adoc:223
#, no-wrap
msgid ""
"    public static Uni<List<Person>> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:40
#: upstream/_guides/hibernate-reactive-panache.adoc:228
#, no-wrap
msgid ""
"    public static Uni<Long> deleteStefs(){\n"
"        return delete(\"name\", \"Stef\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:44
#, fuzzy
msgid "You have noticed how much more compact and readable the code is? Does this look interesting? Read on!"
msgstr "コードがどれだけコンパクトで読みやすくなったか、お気づきでしょうか？これは面白いと思いませんか？読んでみてください。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:46
#, fuzzy
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "`list()` の方法は、最初は驚くかもしれません。HQL(JP-QL)のクエリの断片を取り出し、残りの部分を文脈化しています。これにより、非常に簡潔でありながら読みやすいコードになっています。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:49
#, fuzzy
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "上述したものは基本的に link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[アクティブレコードパターン]であり、単にエンティティパターンと呼ばれることもあります。Panacheを搭載したHibernateでは、 `PanacheRepository` を通じて、より古典的な link:https://martinfowler.com/eaaCatalog/repository.html[リポジトリパターン]を使用することもできます。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:50
#, fuzzy, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:54
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成していくことをお勧めします。ただし、完成した例にすぐにアクセスすることもできます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:56
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive]をダウンロードする。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:58
#, fuzzy
msgid "The solution is located in the `hibernate-reactive-panache-quickstart` {quickstarts-tree-url}/hibernate-reactive-panache-quickstart[directory]."
msgstr "ソリューションは `hibernate-reactive-panache-quickstart` {quickstarts-tree-url}/hibernate-reactive-panache-quickstart[ディレクトリ]にあります。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:60
#, fuzzy, no-wrap
msgid "Setting up and configuring Hibernate Reactive with Panache"
msgstr "PanacheによるHibernate Reactiveの設定と構成"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:63
#, fuzzy
msgid "To get started:"
msgstr "始めるには"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:65
#, fuzzy
msgid "add your settings in `{config-file}`"
msgstr "で設定を追加します。 `{config-file}`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:66
#, fuzzy
msgid "annotate your entities with `@Entity`"
msgstr "エンティティにアノテーションを `@Entity`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:67
#, fuzzy
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "エンティティが `PanacheEntity` を拡張するようにする（リポジトリパターンを使用している場合はオプション）。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:69
#, fuzzy
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "link:hibernate-orm#setting-up-and-configuring-hibernate-orm[すべての設定については、Hibernateセットアップガイド]に従ってください。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:71
#, fuzzy
msgid "In your `pom.xml`, add the following dependencies:"
msgstr "`pom.xml` で、以下の依存関係を追加します。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:73
#, fuzzy
msgid "the Hibernate Reactive with Panache extension"
msgstr "Panache拡張によるHibernate Reactive"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:74
#, fuzzy
msgid "your reactive driver extension (`quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"
msgstr "あなたのリアクティブ・ドライバの拡張子 ( `quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ... )"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:83
#, no-wrap
msgid ""
"<dependencies>\n"
"    <!-- Hibernate Reactive specific dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-hibernate-reactive-panache</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:90
#, no-wrap
msgid ""
"    <!-- JDBC driver dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:93
#, fuzzy
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "次に、 `{config-file}` で関連する構成プロパティを追加します。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:101
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = connor\n"
"quarkus.datasource.reactive.url = vertx-reactive:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:104
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation = drop-and-create\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:106
#, fuzzy, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解決策1：アクティブ・レコード・パターンを使う"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:108
#: upstream/_guides/hibernate-reactive-panache.adoc:233
#, fuzzy, no-wrap
msgid "Defining your entity"
msgstr "エンティティの定義"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:112
#, fuzzy
msgid "To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your columns as public fields:"
msgstr "Panacheのエンティティを定義するには、 `PanacheEntity` を拡張し、 `@Entity` でアノテーションし、カラムをパブリックフィールドとして追加するだけです。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:121
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:125
#, fuzzy
msgid "You can put all your JPA column annotations on the public fields. If you need a field to not be persisted, use the `@Transient` annotation on it. If you need to write accessors, you can:"
msgstr "JPAのカラムアノテーションをすべてパブリックフィールドにつけることができます。永続化されないフィールドが必要な場合は、 `@Transient` アノテーションを使用します。アクセサを書く必要があれば、それも可能です。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:138
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:144
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:149
#, fuzzy
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "また、当社のフィールドアクセスリライトのおかげで、ユーザーが `person.name` を読むときには、実際に `getName()` アクセサが呼び出され、フィールドの書き込みやセッターについても同様です。これにより、すべてのフィールドの呼び出しが、対応するゲッター/セッターの呼び出しに置き換えられるため、実行時に適切なカプセル化が可能になります。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:150
#: upstream/_guides/hibernate-reactive-panache.adoc:316
#, fuzzy, no-wrap
msgid "Most useful operations"
msgstr "最も便利な操作"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:153
#, fuzzy
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "エンティティを書き込んだ後、実行できる最も一般的な操作は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:161
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Stef\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:164
#, no-wrap
msgid ""
"// persist it\n"
"Uni<Void> persistOperation = person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:167
#: upstream/_guides/hibernate-reactive-panache.adoc:333
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:173
#, no-wrap
msgid ""
"// check if it's persistent\n"
"if(person.isPersistent()){\n"
"    // delete it\n"
"    Uni<Void> deleteOperation = person.delete();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:176
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"Uni<List<Person>> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:179
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"Uni<Person> personById = Person.findById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:182
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<Person>> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:185
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:188
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:191
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long> deleteAliveOperation = Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:194
#, no-wrap
msgid ""
"// delete all persons\n"
"Uni<Long> deleteAllOperation = Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:197
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleteByIdOperation = Person.deleteById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:200
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Integer> updateOperation = Person.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:202
#, fuzzy, no-wrap
msgid "Adding entity methods"
msgstr "エンティティメソッドの追加"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:207
#, fuzzy
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "エンティティに対するカスタムクエリを、エンティティ自体の中に追加できます。そうすることで、自分や同僚が簡単に見つけることができ、クエリは操作するオブジェクトと一緒に配置されます。エンティティクラスにスタティックメソッドとして追加するのがPanache Active Recordのやり方です。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:230
#, fuzzy, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解決策2：リポジトリパターンの使用"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:236
#, fuzzy
msgid "When using the repository pattern, you can define your entities as regular JPA entities."
msgstr "リポジトリパターンを使用する場合、エンティティを通常のJPAエンティティとして定義することができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:245
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
"    @Id @GeneratedValue private Long id;\n"
"    private String name;\n"
"    private LocalDate birth;\n"
"    private Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:271
#, no-wrap
msgid ""
"    public Long getId(){\n"
"        return id;\n"
"    }\n"
"    public void setId(Long id){\n"
"        this.id = id;\n"
"    }\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    public LocalDate getBirth() {\n"
"        return birth;\n"
"    }\n"
"    public void setBirth(LocalDate birth) {\n"
"        this.birth = birth;\n"
"    }\n"
"    public Status getStatus() {\n"
"        return status;\n"
"    }\n"
"    public void setStatus(Status status) {\n"
"        this.status = status;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:275
#, fuzzy
msgid "If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "エンティティにゲッター/セッターを定義するのが面倒な場合は、 `PanacheEntityBase` を拡張するようにすれば、Quarkusが生成してくれます。また、 `PanacheEntity` を拡張して、デフォルトのIDを利用することもできます。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:276
#, fuzzy, no-wrap
msgid "Defining your repository"
msgstr "リポジトリの定義"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:280
#, fuzzy
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheRepository`:"
msgstr "リポジトリを使用する場合、アクティブレコードパターンとまったく同じ便利なメソッドをリポジトリに注入し、implements `PanacheRepository` にすることで得られます。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:285
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:287
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:291
#, no-wrap
msgid ""
"   public Uni<Person> findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:295
#, no-wrap
msgid ""
"   public Uni<List<Person>> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:300
#, no-wrap
msgid ""
"   public Uni<Long> deleteStefs(){\n"
"       return delete(\"name\", \"Stef\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:304
#, fuzzy
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheEntityBase` で定義されているすべての操作は、あなたのリポジトリで利用できます。そのため、これを使用することは、注入する必要があることを除けば、active record パターンを使用することとまったく同じです。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:309
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:314
#, no-wrap
msgid ""
"@GET\n"
"public Uni<Long> count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:319
#, fuzzy
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "リポジトリを書き込んだ後、実行できる最も一般的な操作を以下に示します。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:327
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.setName(\"Stef\");\n"
"person.setBirth(LocalDate.of(1910, Month.FEBRUARY, 1));\n"
"person.setStatus(Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:330
#, no-wrap
msgid ""
"// persist it\n"
"Uni<Void> persistOperation = personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:339
#, no-wrap
msgid ""
"// check if it's persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    Uni<Void> deleteOperation = personRepository.delete(person);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:342
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"Uni<List<Person>> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:345
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"Uni<Person> personById = personRepository.findById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:348
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<Person>> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:351
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:354
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:357
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long> deleteLivingOperation = personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:360
#, no-wrap
msgid ""
"// delete all persons\n"
"Uni<Long> deleteAllOperation = personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:363
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleteByIdOperation = personRepository.deleteById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:366
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Integer> updateOperation = personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:371
#, fuzzy
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "このドキュメントの残りの部分では、Active Recordパターンのみに基づいた使い方を示していますが、Repositoryパターンでも実行可能であることを覚えておいてください。リポジトリパターンの例は、簡潔にするために省略しています。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:372
#, fuzzy, no-wrap
msgid "Advanced Query"
msgstr "アドバンスドクエリー"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:374
#, fuzzy, no-wrap
msgid "Paging"
msgstr "ページング"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:378
#, fuzzy
msgid "You should only use the `list` methods if your table contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "`list` メソッドは、テーブルに含まれるデータセットが十分に小さい場合にのみ使用してください。より大きなデータセットの場合は、同等の `find` メソッドを使用することができます。このメソッドは、ページングを行うことができる `PanacheQuery` を返します。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:383
#: upstream/_guides/hibernate-reactive-panache.adoc:419
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:386
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:389
#, no-wrap
msgid ""
"// get the first page\n"
"Uni<List<Person>> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:392
#, no-wrap
msgid ""
"// get the second page\n"
"Uni<List<Person>> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:395
#, no-wrap
msgid ""
"// get page 7\n"
"Uni<List<Person>> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:398
#, no-wrap
msgid ""
"// get the number of pages\n"
"Uni<Integer> numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:401
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"Uni<Long> count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:407
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"Uni<List<Person>> persons = Person.find(\"status\", Status.Alive)\n"
"        .page(Page.ofSize(25))\n"
"        .nextPage()\n"
"        .list();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:410
#, fuzzy
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` タイプには、ページングやリターンストリームを処理するための他の多くのメソッドがあります。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:411
#, fuzzy, no-wrap
msgid "Using a range instead of pages"
msgstr "ページではなく範囲を使用"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:414
#, fuzzy
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` では、範囲ベースのクエリも可能です。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:422
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:425
#, no-wrap
msgid ""
"// get the range\n"
"Uni<List<Person>> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:428
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"Uni<List<Person>> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:434
#, fuzzy
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "`page(Page)` `page(int, int)`範囲とページを混在させることはできません。範囲を使用した場合、現在のページを持っていることに依存するすべてのメソッドは `UnsupportedOperationException` をスローします。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:436
#, fuzzy, no-wrap
msgid "Sorting"
msgstr "ソート"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:439
#, fuzzy
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "クエリ文字列を受け付けるすべてのメソッドは、以下の簡略化されたクエリ形式も受け付けます。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:443
#, no-wrap
msgid "Uni<List<Person>> persons = Person.list(\"order by name,birth\");\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:446
#, fuzzy
msgid "But these methods also accept an optional `Sort` parameter, which allows your to abstract your sorting:"
msgstr "しかし、これらのメソッドには、オプションで `Sort` というパラメータが用意されており、これによってソートの抽象化が可能になります。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:450
#, no-wrap
msgid "Uni<List<Person>> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:453
#, no-wrap
msgid ""
"// and with more restrictions\n"
"Uni<List<Person>> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:456
#, fuzzy
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` クラスには、列を追加したり、ソート方向を指定したりするメソッドが豊富に用意されています。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:457
#, fuzzy, no-wrap
msgid "Simplified queries"
msgstr "シンプルなクエリ"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:461
#, fuzzy
msgid "Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements at the end."
msgstr "通常、HQLのクエリは、 `from EntityName [where …​] [order by …​]` 、最後にオプションの要素を持つという形になっています。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:463
#, fuzzy
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "セレクトクエリが `from` で始まらない場合は、以下の追加フォームをサポートしています。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:465
#, fuzzy
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by …​` に拡大する予定です。 `from EntityName order by …​`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:466
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr "`&amp;lt;singleColumnName&amp;gt;` （およびシングルパラメータ）に展開されます。 `from EntityName where &amp;lt;singleColumnName&amp;gt; = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:467
#, fuzzy
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`&amp;lt;query&amp;gt;` に展開します。 `from EntityName where &amp;lt;query&amp;gt;`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:469
#, fuzzy
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "更新クエリが `update` で始まらない場合は、以下の追加フォームをサポートしています。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:471
#, fuzzy
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr "`from EntityName …​` に拡大する予定です。 `update from EntityName …​`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:472
#, fuzzy
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr "`set? &amp;lt;singleColumnName&amp;gt;` （およびシングルパラメータ）に展開されます。 `update from EntityName set &amp;lt;singleColumnName&amp;gt; = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:473
#, fuzzy
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr "`set? &amp;lt;update-query&amp;gt;` に展開します。 `update from EntityName set &amp;lt;update-query&amp;gt;`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:475
#, fuzzy
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "削除クエリが `delete` で始まらない場合は、以下の追加フォームをサポートしています。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:477
#, fuzzy
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName …​` に拡大する予定です。 `delete from EntityName …​`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:478
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr "`&amp;lt;singleColumnName&amp;gt;` （およびシングルパラメータ）に展開されます。 `delete from EntityName where &amp;lt;singleColumnName&amp;gt; = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:479
#, fuzzy
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`&amp;lt;query&amp;gt;` に展開します。 `delete from EntityName where &amp;lt;query&amp;gt;`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:482
#, fuzzy
msgid "You can also write your queries in plain link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]:"
msgstr "また、クエリをプレーンな link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]で書くこともできます。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:487
#, no-wrap
msgid ""
"Order.find(\"select distinct o from Order o left join fetch o.lineItems\");\n"
"Order.update(\"update from Person set name = 'Mortal' where status = ?\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:489
#, fuzzy, no-wrap
msgid "Named queries"
msgstr "ネームドクエリー"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:492
#, fuzzy
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "名前付きのクエリは、その名前の前に「#」という文字を付けることで、（簡略化された）HQLクエリの代わりに参照することができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:506
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQueries({\n"
"    @NamedQuery(name = \"Person.getByName\", query = \"from Person where name = ?1\"),\n"
"    @NamedQuery(name = \"Person.countByStatus\", query = \"select count(*) from Person p where p.status = :status\"),\n"
"    @NamedQuery(name = \"Person.updateStatusById\", query = \"update Person p set p.status = :status where p.id = :id\"),\n"
"    @NamedQuery(name = \"Person.deleteById\", query = \"delete from Person p where p.id = ?1\")\n"
"})\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:510
#, no-wrap
msgid ""
"    public static Uni<Person> findByName(String name){\n"
"        return find(\"#Person.getByName\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:514
#, no-wrap
msgid ""
"    public static Uni<Long> countByStatus(Status status) {\n"
"        return count(\"#Person.countByStatus\", Parameters.with(\"status\", status).map());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:518
#, no-wrap
msgid ""
"    public static Uni<Long> updateStatusById(Status status, Long id) {\n"
"        return update(\"#Person.updateStatusById\", Parameters.with(\"status\", status).and(\"id\", id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:523
#, no-wrap
msgid ""
"    public static Uni<Long> deleteById(Long id) {\n"
"        return delete(\"#Person.deleteById\", id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:529
#, fuzzy
msgid "Named queries can only be defined inside your JPA entity classes (being the Panache entity class, or the repository parameterized type), or on one of its super classes."
msgstr "名前付き問い合わせは、JPAのエンティティクラス（Panacheのエンティティクラス、またはリポジトリのパラメータ付きタイプ）の内部、またはそのスーパークラスのいずれかでのみ定義できます。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:531
#, fuzzy, no-wrap
msgid "Query parameters"
msgstr "クエリのパラメータ"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:534
#, fuzzy
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "以下のように、インデックス（1ベース）でクエリパラメータを渡すことができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:538
#, no-wrap
msgid "Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:541
#, fuzzy
msgid "Or by name using a `Map`:"
msgstr "または、 `Map` を使った名前で。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:548
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"stef\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:551
#, fuzzy
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "または、コンビニエンスクラス `Parameters` をそのまま使用するか、 `Map` を構築する。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:557
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:561
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:564
#, fuzzy
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "すべてのクエリ操作は、インデックス( `Object…​`)または名前( `Map&amp;lt;String,Object&amp;gt;` または `Parameters`)でパラメータを渡すことができます。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:565
#, fuzzy, no-wrap
msgid "Query projection"
msgstr "クエリの投影"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:568
#, fuzzy
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "クエリの投影は、 `find()` のメソッドが返す `PanacheQuery` オブジェクトに対して `project(Class)` のメソッドで行うことができます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:570
#, fuzzy
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "これを使って、データベースから返されるフィールドを制限することができます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:574
#, fuzzy
msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]"
msgstr "Hibernateは *DTOプロジェクション*を使用して、プロジェクションクラスの属性を持つSELECT句を生成します。これは、 *動的インスタンス化*またはコンス *トラクタ式*とも呼ばれ、詳細はHibernateガイドの link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]を参照してください。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:577
#, fuzzy
msgid "The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class."
msgstr "プロジェクションクラスは、有効な Java Bean であり、すべての属性を含むコンストラクタを持つ必要があります。このコンストラクタは、エンティティクラスを使用する代わりに、プロジェクション DTO をインスタンス化するために使用されます。これはクラスの唯一のコンストラクタでなければなりません。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:581
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:585
#, no-wrap
msgid ""
"@RegisterForReflection // <1>\n"
"public class PersonName {\n"
"    public final String name; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:590
#, no-wrap
msgid ""
"    public PersonName(String name){ // <3>\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:593
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:596
#, fuzzy
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するようQuarkusに指示します。 `@RegisterForReflection` アノテーションの詳細については、 link:writing-native-applications-tips.html#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:597
#, fuzzy
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "ここではパブリックフィールドを使用していますが、必要に応じてプライベートフィールドやゲッター/セッターを使用することもできます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:598
#, fuzzy
msgid "This constructor will be used by Hibernate, and it must have a matching constructor with all the class attributes as parameters."
msgstr "このコンストラクタはHibernateによって使用され、すべてのクラス属性をパラメータとして持つマッチするコンストラクタを持つ必要があります。"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:605
#, fuzzy
msgid "The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query, so the compiler must be configured to store parameter names inside the compiled class.  This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml."
msgstr "`project(Class)` メソッドの実装では、コンストラクタのパラメータ名を使用してクエリの select 節を構築するため、コンパイルされたクラスの内部にパラメータ名を格納するようにコンパイラを設定する必要があります。Quarkus Mavenアーキタイプを使用している場合、これはデフォルトで有効になっています。使用していない場合は、pom.xmlに `&amp;lt;maven.compiler.parameters&amp;gt;true&amp;lt;/maven.compiler.parameters&amp;gt;` というプロパティを追加してください。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:608
#, fuzzy
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "DTO プロジェクション・オブジェクトに、参照されるエンティティのフィールドがある場合、 `@ProjectedFieldName` アノテーションを使用して、SELECT 文のパスを提供することができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:618
#, no-wrap
msgid ""
"@Entity\n"
"public class Dog extends PanacheEntity {\n"
"    public String name;\n"
"    public String race;\n"
"    @ManyToOne\n"
"    public Person owner;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:623
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class DogDto {\n"
"    public String name;\n"
"    public String ownerName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:629
#, no-wrap
msgid ""
"    public DogDto(String name, @ProjectedFieldName(\"owner.name\") String ownerName) {  // <1>\n"
"        this.name = name;\n"
"        this.ownerName = ownerName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:631
#, no-wrap
msgid "PanacheQuery<DogDto> query = Dog.findAll().project(DogDto.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:634
#, fuzzy
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "`ownerName` DTOコンストラクタのパラメータは、 `owner.name` HQLプロパティから読み込まれます。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:635
#, fuzzy, no-wrap
msgid "Multiple Persistence Units"
msgstr "マルチプルパーシスタンスユニット"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:638
#, fuzzy
msgid "Hibernate Reactive in Quarkus currently does not support multiple persistence units."
msgstr "QuarkusのHibernate Reactiveは現在、複数の永続化ユニットをサポートしていません。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:639
#, fuzzy, no-wrap
msgid "Transactions"
msgstr "トランザクション"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:645
#, fuzzy
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@ReactiveTransactional` will do that for you and make that method a transaction boundary. Alternatively, you can use `Panache.withTransaction()` for the same effect. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr "データベースを変更するメソッド(例: `entity.persist()`)は、必ずトランザクション内でラップしてください。CDI Beanのメソッドを `@ReactiveTransactional` とマークすることで、そのメソッドをトランザクションの境界にすることができます。あるいは、 `Panache.withTransaction()` を使用しても同様の効果が得られます。RESTエンドポイントコントローラのように、アプリケーションのエントリーポイントの境界で行うことをお勧めします。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:649
#, fuzzy
msgid "You cannot use `@Transactional` with Hibernate Reactive for your transactions: you must use `@ReactiveTransactional`, and your annotated method must return a `Uni` to be non-blocking. Otherwise it needs be called from a non-`VertxThread` thread and will become blocking."
msgstr "トランザクションにHibernate Reactiveで `@Transactional` を使用することはできません。 `@ReactiveTransactional` を使用する必要があり、アノテーションされたメソッドはノンブロッキングにするために `Uni` を返さなければなりません。そうしないと、 `VertxThread` 以外のスレッドから呼び出される必要があり、ブロッキングになります。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:655
#, fuzzy
msgid "JPA batches changes you make to your entities and sends changes (it's called flush) at the end of the transaction or before a query.  This is usually a good thing as it's more efficient.  But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when JPA send those changes to the database.  Remember, this is less efficient so don't abuse it.  And your transaction still has to be committed."
msgstr "JPAは、エンティティに加えた変更をバッチ処理し、トランザクションの最後やクエリの前に変更を送信します（これをフラッシュと呼びます）。これは通常、より効率的で良いことです。しかし、楽観的なロックの失敗をチェックしたり、すぐにオブジェクトの検証を行ったり、一般的にすぐにフィードバックを得たい場合は、 `entity.flush()` を呼び出して強制的にフラッシュ操作を行うか、あるいは `entity.persistAndFlush()` を使用して単一のメソッド呼び出しにすることができます。これにより、JPAが変更をデータベースに送信する際に発生する可能性のある `PersistenceException` をキャッチすることができます。ただし、これは効率が悪いので悪用しないでください。また、トランザクションは依然としてコミットされなければなりません。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:657
#, fuzzy
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "ここでは、 `PersistenceException` の場合に特定の動作を可能にする flush メソッドの使用例を示します。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:671
#, no-wrap
msgid ""
"@ReactiveTransactional\n"
"public Uni<Void> create(Person person){\n"
"    //Here I use the persistAndFlush() shorthand method on a Panache repository to persist to database then flush the changes.\n"
"    return person.persistAndFlush()\n"
"            .onFailure(PersistenceException.class)\n"
"            .recoverWithItem(() -> {\n"
"                LOG.error(\"Unable to create the parameter\", pe);\n"
"                //in case of error, I save it to disk\n"
"                diskPersister.save(person);\n"
"                return null;\n"
"            });\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:673
#, fuzzy, no-wrap
msgid "Lock management"
msgstr "ロック管理"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:676
#, fuzzy
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panacheは、 `findById(Object, LockModeType)` または `find().withLock(LockModeType)` を使用して、お客様のエンティティ/リポジトリでデータベースロックを直接サポートします。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:678
#, fuzzy
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "以下の例は、アクティブレコードパターンの場合ですが、リポジトリでも同じように使用できます。"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:679
#, fuzzy, no-wrap
msgid "First: Locking using findById()."
msgstr "最初にfindById()を使ってロックする。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:684
#: upstream/_guides/hibernate-reactive-panache.adoc:702
#, no-wrap
msgid "public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:695
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Person> findByIdForUpdate(Long id){\n"
"        return Panache.withTransaction(() -> {\n"
"            return Person.<Person>findById(id, LockModeType.PESSIMISTIC_WRITE)\n"
"                    .invoke(person -> {\n"
"                        //do something useful, the lock will be released when the transaction ends.\n"
"                    });\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:697
#, fuzzy, no-wrap
msgid "Second: Locking in a find()."
msgstr "2つ目：find()でロックする。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:712
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Person> findByNameForUpdate(String name){\n"
"        return Panache.withTransaction(() -> {\n"
"            return Person.<Person>find(\"name\", name).withLock(LockModeType.PESSIMISTIC_WRITE).firstResult()\n"
"                    .invoke(person -> {\n"
"                        //do something useful, the lock will be released when the transaction ends.\n"
"                    });\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:714
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:717
#, fuzzy
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be called within a transaction."
msgstr "ロックはトランザクション終了時に解放されるので、ロッククエリを呼び出すメソッドはトランザクション内で呼び出す必要があることに注意してください。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:718
#, fuzzy, no-wrap
msgid "Custom IDs"
msgstr "カスタムID"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:722
#, fuzzy
msgid "IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we have you covered."
msgstr "IDは微妙な問題で、誰もがフレームワークに任せることができるわけではありませんが、私たちがサポートします。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:725
#, fuzzy
msgid "You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then you just declare whatever ID you want as a public field:"
msgstr "`PanacheEntity` ではなく `PanacheEntityBase` を拡張することで、独自のID戦略を指定することができます。そうすれば、好きなIDをパブリック・フィールドとして宣言するだけです。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:730
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:739
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(\n"
"            name = \"personSequence\",\n"
"            sequenceName = \"person_id_seq\",\n"
"            allocationSize = 1,\n"
"            initialValue = 4)\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"personSequence\")\n"
"    public Integer id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:742
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:746
#, fuzzy
msgid "If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository` and specify your ID type as an extra type parameter:"
msgstr "リポジトリを使用している場合は、 `PanacheRepository` の代わりに `PanacheRepositoryBase` を拡張し、ID タイプを追加のタイプパラメータとして指定することになります。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:753
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:755
#, fuzzy, no-wrap
msgid "Mocking"
msgstr "モッキング"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:757
#, fuzzy, no-wrap
msgid "Using the active record pattern"
msgstr "アクティブ・レコード・パターンの使用"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:762
#, fuzzy
msgid "If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "アクティブ・レコード・パターンを使用している場合、Mockitoはスタティック・メソッドのモックをサポートしていないため、直接使用することはできませんが、 `quarkus-panache-mock` モジュールを使用することで、Mockitoを使用して、あなた自身のメソッドを含む、提供されたすべてのスタティック・メソッドをモックすることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:764
#, fuzzy
msgid "Add this dependency to your `pom.xml`:"
msgstr "この依存関係を `pom.xml` に追加してください。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:772
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:776
#: upstream/_guides/hibernate-reactive-panache.adoc:885
#, fuzzy
msgid "Given this simple entity:"
msgstr "このシンプルな実体があれば"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:781
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:783
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:788
#, no-wrap
msgid ""
"    public static Uni<List<Person>> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:791
#: upstream/_guides/hibernate-reactive-panache.adoc:912
#, fuzzy
msgid "You can write your mocking test like this:"
msgstr "モッキングテストはこのように書くことができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:796
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:800
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:803
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:807
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(Uni.createFrom().item(23l));\n"
"        Assertions.assertEquals(23, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:811
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(Uni.createFrom().item(42l));\n"
"        Assertions.assertEquals(42, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:815
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:818
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:824
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12l)).thenReturn(Uni.createFrom().item(p));\n"
"        Assertions.assertSame(p, Person.findById(12l).await().indefinitely());\n"
"        Assertions.assertNull(Person.findById(42l).await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:832
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12l)).thenThrow(new WebApplicationException());\n"
"        try {\n"
"            Person.findById(12l);\n"
"            Assertions.fail();\n"
"        } catch (WebApplicationException x) {\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:836
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Uni.createFrom().item(Collections.emptyList()));\n"
"        Assertions.assertTrue(Person.findOrdered().await().indefinitely().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:842
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:845
#, fuzzy
msgid "Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "`verify` と `do*` のメソッドは、必ず `Mockito` ではなく `PanacheMock` で呼び出すようにしてください。そうしないと、どのモックオブジェクトを渡せばいいのかわからなくなってしまいます。"

#. type: Title ====
#: upstream/_guides/hibernate-reactive-panache.adoc:846
#, fuzzy, no-wrap
msgid "Mocking `Mutiny.Session` and entity instance methods"
msgstr "`Mutiny.Session` とエンティティ・インスタンス・メソッドのモッキング"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:849
#, fuzzy
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate Reactive `Mutiny.Session` object:"
msgstr "`persist()` のようなエンティティインスタンスのメソッドをモックする必要がある場合は、Hibernate Reactive `Mutiny.Session` オブジェクトをモックすることで行うことができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:854
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheMockingTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:857
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Mutiny.Session session;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:864
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheSessionMocking() {\n"
"        Person p = new Person();\n"
"        // mocked via Mutiny.Session mocking\n"
"        p.persist().await().indefinitely();\n"
"        Assertions.assertNull(p.id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:868
#, no-wrap
msgid ""
"        Mockito.verify(session, Mockito.times(1)).persist(Mockito.any());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:870
#, fuzzy, no-wrap
msgid "Using the repository pattern"
msgstr "リポジトリパターンの使用"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:874
#, fuzzy
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "リポジトリパターンを使用している場合は、 `quarkus-junit5-mockito` モジュールを使用して、Mockito を直接使用することができます。これにより、ビーンのモッキングが非常に簡単になります。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:882
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:890
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:894
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:897
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:900
#, fuzzy
msgid "And this repository:"
msgstr "そしてこのリポジトリ。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:909
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
"    public Uni<List<Person>> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:919
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:924
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:928
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(mockablePersonRepository.count()).thenReturn(Uni.createFrom().item(23l));\n"
"        Assertions.assertEquals(23, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:932
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(mockablePersonRepository.count()).thenReturn(Uni.createFrom().item(42l));\n"
"        Assertions.assertEquals(42, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:936
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:939
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(mockablePersonRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:945
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(mockablePersonRepository.findById(12l)).thenReturn(Uni.createFrom().item(p));\n"
"        Assertions.assertSame(p, mockablePersonRepository.findById(12l).await().indefinitely());\n"
"        Assertions.assertNull(mockablePersonRepository.findById(42l).await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:953
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(mockablePersonRepository.findById(12l)).thenThrow(new WebApplicationException());\n"
"        try {\n"
"            mockablePersonRepository.findById(12l);\n"
"            Assertions.fail();\n"
"        } catch (WebApplicationException x) {\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:957
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(Uni.createFrom().item(Collections.emptyList()));\n"
"        Assertions.assertTrue(mockablePersonRepository.findOrdered().await().indefinitely().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:964
#, no-wrap
msgid ""
"        Mockito.verify(mockablePersonRepository).findOrdered();\n"
"        Mockito.verify(mockablePersonRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verify(mockablePersonRepository).persist(Mockito.<Person> any());\n"
"        Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:966
#, fuzzy, no-wrap
msgid "How and why we simplify Hibernate Reactive mappings"
msgstr "HibernateのReactiveマッピングを簡素化する方法と理由"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:970
#, fuzzy
msgid "When it comes to writing Hibernate Reactive entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "HibernateのReactiveエンティティを書くとなると、ユーザーが不本意ながら慣れてしまっている厄介なことがいくつもあります。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:973
#, fuzzy
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really relevant to your model."
msgstr "IDロジックの重複：ほとんどのエンティティにはIDが必要ですが、ほとんどの人はIDの設定方法を気にしません。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:976
#, fuzzy
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr "ダサいゲッターとセッター：Javaは言語でプロパティをサポートしていないので、フィールドを作成し、そのフィールドのためにゲッターとセッターを生成しなければなりません。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:982
#, fuzzy
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "従来のEEパターンでは、エンティティの定義（モデル）とそれに対する操作（DAOやリポジトリ）を分けることが推奨されていましたが、実際には、状態とその操作を不自然に分ける必要があります。さらに、エンティティごとに2つのクラスを必要とし、エンティティの操作を行う必要があるDAOやリポジトリをインジェクションする必要があります。これにより、編集フローが壊れ、インジェクションポイントを設定するために書いているコードから抜け出してから、それを使用するために戻ってこなければなりません。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:984
#, fuzzy
msgid "Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "Hibernateのクエリは非常に強力ですが、一般的な操作では冗長になりすぎるため、すべての部分が必要でない場合でもクエリを書く必要があります。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:986
#, fuzzy
msgid "Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our model usage."
msgstr "Hibernateは非常に汎用性が高いのですが、モデルの使用量の90％を占める些細な操作を行うことができません。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:988
#, fuzzy
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "パナシェでは、これらの問題を解決するために、意見のあるアプローチをとりました。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:991
#, fuzzy
msgid "Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "エンティティは `PanacheEntity` を拡張するようにしてください：自動生成されるIDフィールドがあります。カスタムのID戦略が必要な場合は、代わりに `PanacheEntityBase` を拡張して、IDを自分で処理することができます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:994
#, fuzzy
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "パブリックフィールドを使う。無駄なゲッターとセッターをなくす。フードの下では、不足しているすべてのゲッターとセッターを生成し、これらのフィールドへのすべてのアクセスをアクセサ・メソッドを使用するように書き換えます。この方法では、必要なときに _便利な_アクセサを書くことができ、エンティティ・ユーザーがフィールド・アクセスを使用していても、それが使用されます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:997
#, fuzzy
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "アクティブレコードパターンでは、すべてのエンティティロジックをエンティティクラスのスタティックメソッドに置き、DAOを作りません。エンティティスーパークラスには、非常に便利なスタティックメソッドがたくさん用意されていますし、エンティティクラスに独自のメソッドを追加することもできます。 `Person.` ユーザーは、 `Person` と入力するだけで、すべての操作を一か所で完了させることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1000
#, fuzzy
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better `Person.find(\"name\", \"stef\")`."
msgstr "`Person.find(\"order by name\")` や `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` 、さらには `Person.find(\"name\", \"stef\")` のように、必要のない部分を書かないようにしましょう。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1002
#, fuzzy
msgid "That's all there is to it: with Panache, Hibernate Reactive has never looked so trim and neat."
msgstr "以上、Panacheを使えば、Hibernate Reactiveがこれほどまでに整然としたものになるのか、ということです。"

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:1003
#, fuzzy, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトやジャーのエンティティの定義"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1006
#, fuzzy
msgid "Hibernate Reactive with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "Hibernate Reactive with Panacheは、コンパイル時にバイトコードを強化してエンティティを作成します。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1012
#, fuzzy
msgid "It attempts to identify archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "これは、マーカーファイル `META-INF/panache-archive.marker` の存在によって、Panache エンティティを持つアーカイブ（および Panache エンティティの消費者）を識別しようとするものです。Panacheには、Panacheに（間接的にでも）依存しているアーカイブでこのファイルを自動的に作成するアノテーションプロセッサが含まれています。アノテーションプロセッサを無効にしている場合、場合によってはこのファイルを手動で作成する必要があります。"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1016
#, fuzzy
msgid "If you include the jpa-modelgen annotation processor this will exclude the Panache annotation processor by default. If you do this you should either create the marker file yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr "jpa-modelgenアノテーションプロセッサをインクルードすると、デフォルトでPanacheアノテーションプロセッサが除外されます。この場合、マーカーファイルを自分で作成するか、以下のように `quarkus-panache-common` も追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1037
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"      <annotationProcessorPaths>\n"
"        <annotationProcessorPath>\n"
"          <groupId>org.hibernate</groupId>\n"
"          <artifactId>hibernate-jpamodelgen</artifactId>\n"
"          <version>${hibernate.version}</version>\n"
"        </annotationProcessorPath>\n"
"        <annotationProcessorPath>\n"
"          <groupId>io.quarkus</groupId>\n"
"          <artifactId>quarkus-panache-common</artifactId>\n"
"          <version>${quarkus.platform.version}</version>\n"
"        </annotationProcessorPath>\n"
"      </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""
