# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-10-23 00:28+0000\n"
"PO-Revision-Date: 2022-10-28 15:34+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security.adoc:6
#, no-wrap
msgid "Quarkus Security overview"
msgstr "Quarkus Securityの概要"

#. type: Plain text
#: upstream/_guides/security.adoc:12
msgid "Quarkus Security is a framework that provides the architecture, multiple authentication and authorization mechanisms, and other tools for you to build secure and production-quality Java applications."
msgstr "Quarkus Securityでは、開発者がQuarkusアプリケーションの商用品質のセキュリティーを構築するためのアーキテクチャ、複数の認証および認可メカニズム、その他のツールを提供しているフレームワークです。"

#. type: Title ==
#: upstream/_guides/security.adoc:13
#, no-wrap
msgid "Getting started with Quarkus Security"
msgstr "Quarkus セキュリティー入門"

#. type: Plain text
#: upstream/_guides/security.adoc:16
#, fuzzy
msgid "Before you start building security into your Quarkus applications, review the overview information to learn about the Quarkus Security architecture and the different authentication and authorization mechanisms that Quarkus supports."
msgstr "Quarkusアプリケーションにセキュリティを組み込む前に、概要情報を確認し、Quarkusのセキュリティアーキテクチャと、Quarkusがサポートするさまざまな認証および認可メカニズムについて学んでください。"

#. type: Plain text
#: upstream/_guides/security.adoc:20
#, fuzzy
msgid "To get started with security in Quarkus, we recommend that you first combine the Quarkus built-in xref:security-basic-auth-concept.adoc[Basic HTTP authentication] with the JPA identity provider to enable role-based access control (RBAC).  Complete the steps in the ref:security-getting-started.adoc[Secure a Quarkus application with Basic authentication] tutorial.  After you have successfully secured your Quarkus application with basic HTTP authentication, you can increase the security further by adding more advanced authentication mechanisms, for example, OpenID Connect (OIDC) authentication."
msgstr "Quarkusでセキュリティを始めるには、まず、Quarkusに組み込まれている link:security-basic-auth-concept.html[HTTP基本認証と] JPA IDプロバイダを組み合わせて、ロールベースアクセス制御（RBAC）を有効にすることをお勧めします。ref:security-getting-started.adoc[Secure a Quarkus application with Basic authentication]チュートリアルのステップを完了します。基本HTTP認証でQuarkusアプリケーションのセキュリティ確保に成功したら、OpenID Connect（OIDC）認証など、より高度な認証メカニズムを追加して、セキュリティをさらに向上させることができます。"

#. type: Title ==
#: upstream/_guides/security.adoc:21
#, no-wrap
msgid "Security architecture"
msgstr "セキュリティ・アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security.adoc:24
#, fuzzy
msgid "The `HttpAuthenticationMechanism` interface is the main entry mechanism for securing HTTP applications in Quarkus."
msgstr "`HttpAuthenticationMechanism` は、Quarkus HTTP Securityのメインエントリーです。"

#. type: Plain text
#: upstream/_guides/security.adoc:27
#, fuzzy
msgid "Quarkus Security uses `HttpAuthenticationMechanism` to extract the authentication credentials from the HTTP request and delegates them to `IdentityProvider` to convert the credentials to `SecurityIdentity`.  For example, the credentials can come from the `Authorization` header, client HTTPS certificates, or cookies."
msgstr "Quarkus Security Managerは、 `HttpAuthenticationMechanism` を使用してHTTPリクエストから認証資格情報を抽出し、 `IdentityProvider` に委任して、これらの認証情報の `SecurityIdentity` への変換を完了させます。"

#. type: Plain text
#: upstream/_guides/security.adoc:29
#, fuzzy
msgid "`IdentityProvider` verifies the authentication credentials and maps them to `SecurityIdentity`, which has the username, roles, original authentication credentials, and other attributes."
msgstr "`IdentityProvider` は認証資格情報を検証し、ユーザー名、ロール、元の認証資格情報、およびその他の属性を含む `SecurityIdentity` にマップします。"

#. type: Plain text
#: upstream/_guides/security.adoc:31
msgid "For every authenticated resource, you can inject a `SecurityIdentity` instance to get the authenticated identity information."
msgstr "認証済みリソースごとに、 `SecurityIdentity` インスタンスを注入して、認証済みの ID 情報を取得することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:34
#, fuzzy
msgid "In other contexts, it is possible to have other parallel representations of the same information or parts of it, for example, `SecurityContext` for JAX-RS or `JsonWebToken` for JSON Web Tokens (JWT)."
msgstr "他の文脈では、JAX-RSであれば `SecurityContext` 、JWTであれば `JsonWebToken` のように、同じ情報(またはその一部)を他の別の表現で表現している場合があります。"

#. type: Title ==
#: upstream/_guides/security.adoc:35
#, no-wrap
msgid "Authentication mechanisms"
msgstr "認証メカニズム"

#. type: Plain text
#: upstream/_guides/security.adoc:38
msgid "Quarkus supports multiple authentication mechanisms"
msgstr "Quarkusは複数の認証メカニズムをサポートしています。"

#. type: Title ===
#: upstream/_guides/security.adoc:39
#, no-wrap
msgid "Basic and Form HTTP authentication"
msgstr "HTTPのベーシック認証とフォーム認証"

#. type: Plain text
#: upstream/_guides/security.adoc:42
#, fuzzy
msgid "xref:security-basic-auth-concept.adoc[Basic HTTP Authentication] and xref:security-built-in-authentication.adoc#form-auth[Form HTTP authentication] are the core authentication mechanisms supported in Quarkus."
msgstr "HTTPのベーシック認証メカニズムとフォームベースの認証メカニズムは、Quarkusでサポートされている主要な認証メカニズムです。Quarkusでサポートされているコア認証メカニズムです。 詳細は、xref:security-basic-auth-concept.adoc[ベーシックHTTP認証] とxref:security-built-in-authentication.adoc#form-auth[フォームHTTP認証]を参照してください。"

#. type: Title ===
#: upstream/_guides/security.adoc:43
#, no-wrap
msgid "WebAuthn authentication"
msgstr "WebAuthn認証"

#. type: Plain text
#: upstream/_guides/security.adoc:48
#, fuzzy
msgid "https://webauthn.guide/[WebAuthn] is an authentication mechanism that replaces passwords.  When you write a service for registering new users, or logging them in, instead of asking for a password, you can use WebAuthn, which replaces the password.  For more information, see xref:security-webauthn.adoc[Secure a Quarkus application by using the WebAuthn authentication mechanism]."
msgstr "link:https://webauthn.guide/[WebAuthn] は、パスワードを置き換えるために設計された認証メカニズムです。つまり、新しいユーザーを登録したり、ログインしたりするサービスを書くたびに、パスワードを要求する代わりに、WebAuthn を使って、パスワードを置き換えるのです。"

#. type: Title ===
#: upstream/_guides/security.adoc:49
#, no-wrap
msgid "Mutual TLS (mTLS) authentication"
msgstr "Mutual TLS (mTLS) 認証"

#. type: Plain text
#: upstream/_guides/security.adoc:53
#, fuzzy
msgid "Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates.  For more information, see xref:security-built-in-authentication.adoc#mutual-tls[mutual TLS authentication]."
msgstr "Quarkusは相互TLS認証を提供しているので、X.509証明書に基づいてユーザーを認証できます。"

#. type: Title ===
#: upstream/_guides/security.adoc:54
#, no-wrap
msgid "OpenID Connect authentication"
msgstr "OpenID Connect 認証"

#. type: Plain text
#: upstream/_guides/security.adoc:57
#, fuzzy
msgid "OpenID Connect (OIDC) is an identity layer that works on top of the OAuth 2.0 protocol. OIDC enables client applications to verify the identity of a user based on the authentication performed by the OIDC provider and to retrieve basic information about that user."
msgstr "OpenID Connect (OIDC) は、OAuth 2.0 プロトコルの上で動作する アイデンティティレイヤです。OIDCは、クライアントアプリケーションが、OIDCプロバイダによって実行される認証に基づいてユーザーの身元を確認し、そのユーザーに関する基本情報を取得することを可能にします。"

#. type: Plain text
#: upstream/_guides/security.adoc:62
#, fuzzy
msgid "The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer Token and Authorization Code Flow authentication mechanisms.  The Bearer Token mechanism extracts the token from the HTTP Authorization header.  The Authorization Code Flow mechanism redirects the user to an OIDC provider to authenticate the identity of the user.  After the user is redirected back to Quarkus, the mechanism completes the authentication process by exchanging the provided code that was granted for the ID, access, and refresh tokens."
msgstr "`Bearer Token` メカニズムは、HTTP `Authorization` ヘッダーからトークンを抽出します。`Authorization Code Flow` メカニズムは、ユーザーをOIDCプロバイダーにリダイレクトして、このユーザーのIDを認証します。ユーザーがQuarkusにリダイレクトされた後、IDやAccessおよび更新されたトークンの認可コードに関する交換処理を経て、このメカニズムは認証プロセスを完了させます。"

#. type: Plain text
#: upstream/_guides/security.adoc:65
#, fuzzy
msgid "You can verify ID and access JWT tokens by using the refreshable JSON Web Key (JWK) set or you can introspect them remotely.  However, opaque (binary) tokens can only be introspected remotely."
msgstr "リフレッシュ可能なJSON Web Key（JWK）セットを使用することで、IDの検証やJSON Web Token（JWT）トークンにアクセスすることができます。ただし、JWTトークンと不透明（バイナリ）トークンの両方をリモートでイントロスペクトすることができます。"

#. type: delimited block =
#: upstream/_guides/security.adoc:69
#, fuzzy
msgid "Using the Quarkus OIDC extension, both Bearer Token and Authorization Code Flow mechanisms use <<smallrye-jwt, SmallRye JWT>> to represent JWT tokens as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "Quarkusの OIDCエクステンションを使用すると、Bearer Token と認可コードフローの両方のメカニズムで <<smallrye-jwt, SmallRye JWT>> を使用して、JWTトークンを Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken` として表現できます。"

#. type: Title ====
#: upstream/_guides/security.adoc:71
#, fuzzy, no-wrap
msgid "Additional Quarkus resources for OIDC authentication"
msgstr "OIDC認証のためのQuarkusの追加リソース"

#. type: Plain text
#: upstream/_guides/security.adoc:74
#, fuzzy
msgid "For more information about OIDC authentication and authorization methods you can use to secure your Quarkus applications, see the following detailed resources:"
msgstr "Quarkusアプリケーションのセキュリティに使用できるOIDC認証および認可方法の詳細については、次の詳細なリソースを参照してください。"

#. type: Table
#: upstream/_guides/security.adoc:77
#, no-wrap
msgid "OIDC topic"
msgstr "OIDCトピック"

#. type: Table
#: upstream/_guides/security.adoc:78
#, no-wrap
msgid "Quarkus information resource"
msgstr "Quarkusの情報リソース"

#. type: Table
#: upstream/_guides/security.adoc:78
#, fuzzy, no-wrap
msgid "Bearer Token authentication mechanis"
msgstr "認証メカニズム"

#. type: Table
#: upstream/_guides/security.adoc:79
#, fuzzy, no-wrap
msgid "xref:security-openid-connect.adoc[Using OpenID Connect (OIDC) to protect service applications using Bearer Token authorization]"
msgstr "`Bearer Token` 認証メカニズムの詳細については、xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] ガイドを参照してください。"

#. type: Table
#: upstream/_guides/security.adoc:79
#, fuzzy, no-wrap
msgid "Authorization Code Flow authentication mechanis"
msgstr "WebAuthn 認証メカニズム"

#. type: Table
#: upstream/_guides/security.adoc:80
#, fuzzy, no-wrap
msgid "xref:security-openid-connect-web-authentication.adoc[OpenID Connect (OIDC) authorization code flow mechanism]"
msgstr "`Authorization Code Flow` 認証メカニズムの詳細については、xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Application] ガイドを参照してください。"

#. type: Table
#: upstream/_guides/security.adoc:80
#, fuzzy, no-wrap
msgid "Multiple tenants that can support Bearer Token or Authorization Code Flow mechanism"
msgstr "Bearer TokenまたはAuthorization Code Flowメカニズムに対応可能な複数のテナント"

#. type: Table
#: upstream/_guides/security.adoc:81
#, fuzzy, no-wrap
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect (OIDC) multi-tenancy]"
msgstr "link:security-openid-connect-multitenancy.html[OpenID Connect（OIDC）のマルチテナンシーを利用する]"

#. type: Table
#: upstream/_guides/security.adoc:81
#, fuzzy, no-wrap
msgid "Using Keycloak to centralize authorization"
msgstr "Keycloakを使用した認証の一元化"

#. type: Table
#: upstream/_guides/security.adoc:82
#, fuzzy, no-wrap
msgid "xref:security-keycloak-authorization.adoc[Using OpenID Connect (OIDC) and Keycloak to centralize authorization]"
msgstr "link:security-keycloak-authorization.html[OpenID Connect (OIDC)とKeycloakを使った一元的な認証の実現]"

#. type: Table
#: upstream/_guides/security.adoc:82
#, fuzzy, no-wrap
msgid "Configuring Keycloak programmatically"
msgstr "プログラムでKeycloakを設定する"

#. type: Table
#: upstream/_guides/security.adoc:83
#, fuzzy, no-wrap
msgid "xref:security-keycloak-admin-client.adoc[Using the Keycloak admin client]"
msgstr "link:security-keycloak-admin-client.html[Keycloak管理者クライアントを使用する]"

#. type: delimited block =
#: upstream/_guides/security.adoc:89
#, fuzzy
msgid "If you need to enable the Quarkus OIDC extension at runtime, set `quarkus.oidc.tenant-enabled=false` at build time and then re-enable it at runtime by using a system property.  For more information about managing the individual tenant configurations in multitenant OIDC deployments, see the _Disabling tenant configurations_ section in the xref:security-openid-connect-multitenancy.adoc#disable-tenant[Using OpenID Connect (OIDC) multi-tenancy] guide."
msgstr "Quarkus OIDCエクステンションを実行時に有効にする必要がある場合は、ビルド時に `quarkus.oidc.tenant-enabled=false` を設定し、システムプロパティを使用して実行時に再度有効にします。 マルチテナントOIDC展開における個々のテナント設定の管理について詳しくは、xref:security-openid-connect-multitenancy.adoc#disable-tenant[テナント設定の無効化]を参照してください。"

#. type: Title ===
#: upstream/_guides/security.adoc:91
#, fuzzy, no-wrap
msgid "OpenID Connect client and filters"
msgstr "OpenID Connect クライアントとフィルター"

#. type: Plain text
#: upstream/_guides/security.adoc:94
#, fuzzy
msgid "The `quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers that support the following token grants:"
msgstr "`quarkus-oidc-client` エクステンションは、 `client-credentials`, `password` および `refresh_token` トークン付与をサポートする OpenID Connect および OAuth2 プロバイダからアクセストークンを取得および更新するための `OidcClient` を提供します。"

#. type: Plain text
#: upstream/_guides/security.adoc:95
msgid "`client-credentials`"
msgstr "`client-credentials`"

#. type: Plain text
#: upstream/_guides/security.adoc:96
msgid "`password`"
msgstr "`password`"

#. type: Plain text
#: upstream/_guides/security.adoc:97
msgid "`refresh_token`"
msgstr "`refresh_token`"

#. type: Plain text
#: upstream/_guides/security.adoc:101
#, fuzzy
msgid "The `quarkus-oidc-client-filter` extension requires the `quarkus-oidc-client` extension and provides JAX-RS `OidcClientRequestFilter`, which sets the access token acquired by `OidcClient` as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, but it is not related to the authentication requirements of this service endpoint.  For example, it can be a public endpoint, or it can be protected with mTLS."
msgstr "`quarkus-oidc-client-filter` エクステンションは `quarkus-oidc-client` エクステンションに依存し、`OidcClient` で取得したアクセストークンを HTTP `Authorization` ヘッダーの `Bearer` スキーム値として設定する JAX-RS `OidcClientRequestFilter` を提供します。このフィルターは、現在の Quarkus エンドポイントに注入されたMP RestClient 実装で登録することができますが、このサービスエンドポイントの認証要件には関係ありません。たとえば、パブリックエンドポイントにすることもできますし、MTLSで保護することもできます。重要な点は、この Quarkus エンドポイント自体を、Quarkus OpenID Connect アダプターで保護する必要がないことです。"

#. type: delimited block =
#: upstream/_guides/security.adoc:105
#, fuzzy
msgid "In this scenario, you do not need to protect your Quarkus endpoint by using the Quarkus OpenID Connect adapter."
msgstr "このシナリオでは、Quarkus OpenID Connectアダプターを使用して、Quarkusエンドポイントを保護する必要はありません。"

#. type: Plain text
#: upstream/_guides/security.adoc:110
#, fuzzy
msgid "The `quarkus-oidc-token-propagation` extension requires the `quarkus-oidc` extension and provides JAX-RS `TokenCredentialRequestFilter`, which sets the OpenID Connect Bearer or Authorization Code Flow access token as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, which in turn must be protected by using the Quarkus OpenID Connect adapter.  This filter can be used to propagate the access token to the downstream services."
msgstr "`quarkus-oidc-token-propagation` エクステンションは `quarkus-oidc` エクステンションに依存し、OpenID Connect Bearer または Authorization Code Flow アクセストークンを HTTP `Authorization` ヘッダーの `Bearer` スキーム値として設定する JAX-RS `TokenCredentialRequestFilter` を提供します。このフィルターは、現在の Quarkus エンドポイントに注入された MP RestClient 実装で登録することができ、Quarkus エンドポイント自体は Quarkus OpenID Connect アダプターで保護する必要があります。このフィルターは、アクセストークンをダウンストリームサービスに伝播させるために使用できます。"

#. type: Plain text
#: upstream/_guides/security.adoc:112
#, fuzzy
msgid "For more information, see the xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart] and xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference] guides."
msgstr "詳細は、xref:security-openid-connect-client.adoc[OpenID Connect and Token Propagation のクイックスタート] ガイドおよび xref:security-openid-connect-client-reference.adoc[OpenID Connect および OAuth2 クライアントのリファレンス] ガイドを参照してください。"

#. type: Title ===
#: upstream/_guides/security.adoc:114
#, no-wrap
msgid "SmallRye JWT authentication"
msgstr "SmallRye JWT 認証"

#. type: Plain text
#: upstream/_guides/security.adoc:117
#, fuzzy
msgid "The `quarkus-smallrye-jwt` extension provides a MicroProfile JSON Web Token (JWT) 1.2.1 implementation and multiple options to verify signed and encrypted `JWT` tokens and represents them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "`quarkus-smallrye-jwt` はMicroprofile JWT 1.1.1.1 の実装と、署名・暗号化された `JWT` トークンを検証し、 `org.eclipse.microprofile.jwt.JsonWebToken` として表現するための多くのオプションを提供します。"

#. type: Plain text
#: upstream/_guides/security.adoc:120
#, fuzzy
msgid "`quarkus-smallrye-jwt` is an alternative to the `quarkus-oidc` Bearer Token authentication mechanism, and verifies only `JWT` tokens by using either PEM keys or the refreshable `JWK` key set.  `quarkus-smallrye-jwt` also provides the JWT generation API, which you can use to easily create `signed`, `inner-signed`, and `encrypted` `JWT` tokens."
msgstr " `quarkus-smallrye-jwt` は ベアラトークンによる認証機構の代替で、PEMキーまたはリフレッシュ可能な キーセットを使用して トークンだけを検証します。 は JWT 生成 API も提供しており、これを使用して , ,  トークンを簡単に作成することが可能です。 `quarkus-oidc` `JWK` `JWT` `quarkus-smallrye-jwt` `signed` `inner-signed` `encrypted` `JWT` "

#. type: Plain text
#: upstream/_guides/security.adoc:122
#, fuzzy
msgid "For more information, see xref:security-jwt.adoc[Using SmallRye JWT role-based access control]."
msgstr "詳細は、xref:security-jwt.adoc[Using SmallRye JWT] ガイドを参照してください。"

#. type: Title ===
#: upstream/_guides/security.adoc:123
#, no-wrap
msgid "OAuth2 authentication"
msgstr "OAuth2 認証"

#. type: Plain text
#: upstream/_guides/security.adoc:127
#, fuzzy
msgid "`quarkus-elytron-security-oauth2` provides an alternative to the `quarkus-oidc` Bearer Token authentication mechanism. `quarkus-elytron-security-oauth2` is based on `Elytron` and is primarily intended for introspecting opaque tokens remotely.  For more information, see xref:security-oauth2.adoc[Using OAuth2]."
msgstr "`quarkus-elytron-security-oauth2` は `quarkus-oidc` Bearer Token 認証メカニズムの代替手段を提供します。これは `Elytron` をベースにしており、主に不透明なトークンをリモートで検証するためのものです。"

#. type: Title ===
#: upstream/_guides/security.adoc:129
#, fuzzy, no-wrap
msgid "Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms"
msgstr "OpenID Connect、SmallRye JWT、OAuth2 エクステンションのいずれかを選択する"

#. type: Plain text
#: upstream/_guides/security.adoc:132
#, fuzzy
msgid "Use the following information to help you to decide which authentication mechanism to use to secure your Quarkus applications:"
msgstr "Quarkus アプリケーションのセキュリティを確保するためにどの認証メカニズムを使用するかを決定する際に、次の情報を参考にしてください。"

#. type: Plain text
#: upstream/_guides/security.adoc:135
#, fuzzy
msgid "`quarkus-oidc` requires an OpenID Connect provider such as Keycloak, which can be used to verify the Bearer tokens or authenticate the end users with the Authorization Code flow.  In both cases, `quarkus-oidc` requires a connection to the specified OpenID Connect provider."
msgstr "`quarkus-oidc` エクステンションには、Keycloak のような OpenID Connect プロバイダーが必要で、これは Bearer Token の検証や Authorization Code Flow によるエンドユーザーの認証に使用することができます。どちらの場合も、`quarkus-oidc` は、この OpenID Connect プロバイダーへの接続を必要とします。"

#. type: Plain text
#: upstream/_guides/security.adoc:138
#, fuzzy
msgid "If the user authentication requires Authorization Code flow or you need to support multiple tenants, use `quarkus-oidc`.  `quarkus-oidc` can also request user information by using both Authorization Code Flow and Bearer access tokens."
msgstr "`quarkus-oidc` は、Authorization Code フローによるユーザー認証や、複数のテナントへの対応が必要な場合の唯一の選択肢です。また、Authorization Code FlowとBearerアクセストークンの両方を使ってUserInfoを要求することもできます。"

#. type: Plain text
#: upstream/_guides/security.adoc:140
#, fuzzy
msgid "If your Bearer tokens must be verified, use `quarkus-oidc`, `quarkus-smallrye-jwt`, or `quarkus-elytron-security-oauth2`."
msgstr "Bearer Token を検証する必要がある場合は、 `quarkus-oidc` 、 `quarkus-smallrye-jwt` 、 `quarkus-elytron-security-oauth2` を使用できます。"

#. type: Plain text
#: upstream/_guides/security.adoc:143
#, fuzzy
msgid "If your Bearer tokens are in a JWT format, you can use either of the three extensions. Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the JsonWebKey (JWK) set when the OpenID Connect provider rotates the keys.  Therefore, if remote token introspection must be avoided or is unsupported by the providers, use `quarkus-oidc` or `quarkus-smallrye-jwt` for verifying JWT tokens."
msgstr "JWT 形式の Bearer トークンを持っている場合は、これら 3 つのエクステンションをすべて使用することができます。`quarkus-oidc` と `quarkus-smallrye-jwt` の両方は、OpenID Connect プロバイダーがキーをローテーションする際の JsonWebKey (JWK) セットのリフレッシュをサポートします。したがって、リモートトークンのイントロスペクションを回避しなければならない場合や、プロバイダーがサポートしていない場合は、JWT トークンの検証に `quarkus-oidc` または `quarkus-smallrye-jwt` を使用する必要があります。"

#. type: Plain text
#: upstream/_guides/security.adoc:146
#, fuzzy
msgid "If you need to introspect the JWT tokens remotely, you can use either `quarkus-oidc` or `quarkus-elytron-security-oauth2` because they support the verification of the opaque or binary tokens by using remote introspection.  `quarkus-smallrye-jwt` does not support the remote introspection of both opaque or JWT tokens but instead relies on the locally available keys that are usually retrieved from the OpenID Connect provider."
msgstr "JWT トークンをリモートでイントロスペクトする必要がある場合は、 `quarkus-oidc` または `quarkus-elytron-security-oauth2` のいずれかを使用できます。これらはリモートイントロスペクションを使用して、不透明またはバイナリートークンの検証をサポートしています。 `quarkus-smallrye-jwt` は不透明または JWT トークンのリモートイントロスペクションをサポートしていませんが、通常は OpenID Connect プロバイダから取得されるローカルで利用できるキーに依存しています。"

#. type: Plain text
#: upstream/_guides/security.adoc:149
#, fuzzy
msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` support the injecting of JWT and opaque tokens into the endpoint code.  Injected JWT tokens provide more information about the user. All extensions can have the tokens injected as `Principal`."
msgstr "`quarkus-oidc` と `quarkus-smallrye-jwt` は、JWT トークンと不透明なトークンの両方をエンドポイントコードに注入することができます。注入された JWT トークンは、ユーザーに関するより豊富な情報を提供することができます。すべてのエクステンションは、 `Principal` として、トークンを注入することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:151
#, fuzzy
msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`. `quarkus-oidc` uses only the JWK-formatted keys that are part of a JWK set, whereas `quarkus-smallrye-jwt` supports PEM keys."
msgstr "`quarkus-smallrye-jwt` は `quarkus-oidc` よりも多くのキーフォーマットをサポートしています。後者は、JWKセットの一部であるJWKフォーマットの鍵のみを使用します。前者では、PEMキーも使用可能です。"

#. type: Plain text
#: upstream/_guides/security.adoc:154
#, fuzzy
msgid "`quarkus-smallrye-jwt` handles locally signed, inner-signed-and-encrypted, and encrypted tokens.  While `quarkus-oidc` and `quarkus-elytron-security-oauth2` can also verify such tokens but treats them as opaque tokens and verifies them through remote introspection."
msgstr "`quarkus-smallrye-jwt` は、署名されたトークンだけでなく、内部署名と暗号化されたトークン、または暗号化のみされたトークンをローカルに扱うことができます。実のところ、 `quarkus-oidc` と `quarkus-elytron-security-oauth2` もそのようなトークンを検証できますが、それらを不透明なトークンとして扱い、リモートイントロスペクションを介して検証することによってのみ可能です。"

#. type: Plain text
#: upstream/_guides/security.adoc:156
#, fuzzy
msgid "If you need a lightweight library for the remote introspection of opaque or JWT tokens, use `quarkus-elytron-security-oauth2`."
msgstr "`quarkus-elytron-security-oauth2` は、不透明なトークンやJWTトークンをリモートでイントロスペクションするための軽量なライブラリが必要な場合に最適な選択肢です。"

#. type: delimited block =
#: upstream/_guides/security.adoc:163
#, fuzzy
msgid "Your decision to choose whether to use opaque or JWT token format will be driven by architectural considerations.  Opaque tokens tend to be much shorter than JWT tokens but need most of the token-associated state to be maintained in the provider database.  Opaque tokens are effectively database pointers.  JWT tokens are significantly longer than the opaque tokens but the providers are effectively delegating storing most of the token-associated state to the client by storing it as the token claims and either signing or encrypting them."
msgstr "不透明なトークンとJWTトークンのどちらを使用するかは、多くの場合、アーキテクチャ上の考慮事項によって決定されることに注意してください。不透明なトークンは、通常、JWT トークンよりもはるかに短いですが、トークンに関連する状態のほとんどをプロバイダのデータベースで維持する必要があります。JWT トークンは、不透明なトークンよりもかなり長いですが、プロバイダは、トークンに関連する状態のほとんどを、トークン・クレームとして保存し、それらに署名や暗号を施すことで、事実上、クライアントに保存を委ねています。"

#. type: Plain text
#: upstream/_guides/security.adoc:166
#, fuzzy
msgid "The following table provides a summary of the options for each authentication mechanism:"
msgstr "次の表は、各認証メカニズムのオプションの概要を示しています。"

#. type: Table
#: upstream/_guides/security.adoc:168
#, no-wrap
msgid "quarkus-oidc"
msgstr "quarkus-oidc"

#. type: Table
#: upstream/_guides/security.adoc:168
#, no-wrap
msgid "quarkus-smallrye-jwt"
msgstr "quarkus-smallrye-jwt"

#. type: Table
#: upstream/_guides/security.adoc:170
#, no-wrap
msgid "quarkus-elytron-security-oauth2"
msgstr "quarkus-elytron-security-oauth2"

#. type: Table
#: upstream/_guides/security.adoc:171
#, fuzzy, no-wrap
msgid "Requires Bearer JWT verification"
msgstr "Bearer JWTの検証が必要"

#. type: Table
#: upstream/_guides/security.adoc:172
#, fuzzy, no-wrap
msgid "Local verification or introspection"
msgstr "ローカル検証またはイントロスペクション"

#. type: Table
#: upstream/_guides/security.adoc:173 upstream/_guides/security.adoc:212
#, no-wrap
msgid "Local verification"
msgstr "ローカル検証"

#. type: Table
#: upstream/_guides/security.adoc:174 upstream/_guides/security.adoc:176
#: upstream/_guides/security.adoc:178 upstream/_guides/security.adoc:211
#: upstream/_guides/security.adoc:213
#, no-wrap
msgid "Introspection"
msgstr "イントロスペクション"

#. type: Table
#: upstream/_guides/security.adoc:175
#, fuzzy, no-wrap
msgid "Requires Bearer opaque token verification"
msgstr "Bearer 不透明 トークンの検証が必要"

#. type: Table
#: upstream/_guides/security.adoc:177 upstream/_guides/security.adoc:182
#: upstream/_guides/security.adoc:189 upstream/_guides/security.adoc:192
#: upstream/_guides/security.adoc:193 upstream/_guides/security.adoc:196
#: upstream/_guides/security.adoc:197 upstream/_guides/security.adoc:200
#: upstream/_guides/security.adoc:201 upstream/_guides/security.adoc:203
#: upstream/_guides/security.adoc:205 upstream/_guides/security.adoc:207
#: upstream/_guides/security.adoc:209 upstream/_guides/security.adoc:215
#: upstream/_guides/security.adoc:217 upstream/_guides/security.adoc:219
#: upstream/_guides/security.adoc:221
#, no-wrap
msgid "No"
msgstr "No"

#. type: Table
#: upstream/_guides/security.adoc:179
#, fuzzy, no-wrap
msgid "Refreshing `JsonWebKey` set for verifying JWT tokens"
msgstr "JWT トークンを検証するための JsonWebKey セットの更新"

#. type: Table
#: upstream/_guides/security.adoc:180 upstream/_guides/security.adoc:181
#: upstream/_guides/security.adoc:184 upstream/_guides/security.adoc:185
#: upstream/_guides/security.adoc:186 upstream/_guides/security.adoc:188
#: upstream/_guides/security.adoc:191 upstream/_guides/security.adoc:195
#: upstream/_guides/security.adoc:199 upstream/_guides/security.adoc:204
#: upstream/_guides/security.adoc:220
#, no-wrap
msgid "Yes"
msgstr "Yes"

#. type: Table
#: upstream/_guides/security.adoc:183
#, fuzzy, no-wrap
msgid "Represent token as `Principal``"
msgstr "トークンをプリンシパルとして表現"

#. type: Table
#: upstream/_guides/security.adoc:187
#, fuzzy, no-wrap
msgid "Inject JWT as MP JSON Web Token (JWT)"
msgstr "JWT を MP JWT JsonWebToken として挿入"

#. type: Table
#: upstream/_guides/security.adoc:190
#, no-wrap
msgid "Authorization Code Flow"
msgstr "認可コードフロー"

#. type: Table
#: upstream/_guides/security.adoc:194
#, no-wrap
msgid "Multi-tenancy"
msgstr "マルチテナンシー"

#. type: Table
#: upstream/_guides/security.adoc:198
#, fuzzy, no-wrap
msgid "User info support"
msgstr "UserInfo のサポート"

#. type: Table
#: upstream/_guides/security.adoc:202
#, fuzzy, no-wrap
msgid "PEM key format support"
msgstr "Pem キー形式のサポート"

#. type: Table
#: upstream/_guides/security.adoc:206
#, no-wrap
msgid "SecretKey support"
msgstr "SecretKey のサポート"

#. type: Table
#: upstream/_guides/security.adoc:208
#, fuzzy, no-wrap
msgid "In JSON Web Key (JWK) format"
msgstr "JsonWebKey 形式"

#. type: Table
#: upstream/_guides/security.adoc:210
#, fuzzy, no-wrap
msgid "Inner-signed and encrypted or encrypted tokens"
msgstr "InnerSigned/Encrypted または Encrypted トークン"

#. type: Table
#: upstream/_guides/security.adoc:214
#, fuzzy, no-wrap
msgid "Custom token verification"
msgstr "カスタムトークンの検証"

#. type: Table
#: upstream/_guides/security.adoc:216
#, fuzzy, no-wrap
msgid "With injected JWT parser"
msgstr "インジェクションされたJWTParserで"

#. type: Table
#: upstream/_guides/security.adoc:218
#, fuzzy, no-wrap
msgid "Accept JWT as a cookie"
msgstr "JWT をクッキーとして受け入れ"

#. type: Title ==
#: upstream/_guides/security.adoc:224
#, fuzzy, no-wrap
msgid "Identity providers"
msgstr "アイデンティティ・プロバイダー"

#. type: Plain text
#: upstream/_guides/security.adoc:228
#, fuzzy
msgid "The JPA `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
msgstr "JPA `IdentityProvider` は、 `SecurityIdentity` インスタンスを作成します。このインスタンスは、ユーザー認証時に使用され、アクセス要求を検証および承認して、Quarkus アプリケーションをセキュアにします。"

#. type: Plain text
#: upstream/_guides/security.adoc:231
#, fuzzy
msgid "`IdentityProvider` converts the authentication credentials provided by `HttpAuthenticationMechanism` to a `SecurityIdentity` instance."
msgstr "`IdentityProvider` は、`HttpAuthenticationMechanism` が提供する認証資格情報を `SecurityIdentity` に変換します。"

#. type: Plain text
#: upstream/_guides/security.adoc:234
#, fuzzy
msgid "Some extensions, for example, `OIDC`, `OAuth2`, and `SmallRye JWT` have inline `IdentityProvider` implementations specific to the supported authentication flow.  For example, `quarkus-oidc` uses its own `IdentityProvider` to convert a token to a `SecurityIdentity` instance."
msgstr "`OIDC` , `OAuth2` , `SmallRye JWT` , `LDAP` などのエクステンションには、サポートされている認証フローに固有の `IdentityProvider` のインライン実装があります。例えば、 `quarkus-oidc` は独自の `IdentityProvider` を使用してトークンを `SecurityIdentity` に変換します。"

#. type: Plain text
#: upstream/_guides/security.adoc:236
#, fuzzy
msgid "If you use `Basic` or `Form` HTTP-based authentication then you must add an `IdentityProvider` instance that can convert a username and password to a `SecurityIdentity` instance."
msgstr "HTTPベースの `Basic` または `Form`  の認証を使用している場合は、ユーザー名とパスワードを `SecurityIdentity` に変換できる `IdentityProvider` を追加する必要があります。"

#. type: Plain text
#: upstream/_guides/security.adoc:238
#, fuzzy
msgid "For more information about `Basic` or `Form` HTTP-based authentication, see the following resources:"
msgstr "HTTPベースの `Basic` または `Form` 認証の詳細については、以下を参照してください:"

#. type: Plain text
#: upstream/_guides/security.adoc:239
#, fuzzy
msgid "xref:security-getting-started.adoc[Secure a Quarkus application with Basic authentication]"
msgstr "xref:security-getting-started.adoc[セキュリティ入門] ガイド"

#. type: Plain text
#: upstream/_guides/security.adoc:240
#, fuzzy
msgid "xref:security-jdbc.adoc[Using security with JDBC]"
msgstr "xref:security-jdbc.adoc[JDBC IdentityProvider]"

#. type: Plain text
#: upstream/_guides/security.adoc:241
#, fuzzy
msgid "xref:security-ldap.adoc[Using security with an LDAP realm]"
msgstr "xref:security-ldap.adoc[LDAP IdentityProvider]"

#. type: Title ==
#: upstream/_guides/security.adoc:242
#, no-wrap
msgid "Authorization"
msgstr "認可"

#. type: Plain text
#: upstream/_guides/security.adoc:246
#, fuzzy
msgid "Quarkus also supports role-based access control (RBAC).  For more information about RBAC and other authorization options in Quarkus, see xref:security-authorization.adoc[Security authorization]."
msgstr "Quarkusは、ロールベースのアクセス制御（RBAC）もサポートしています。QuarkusのRBACとその他の認証オプションの詳細については、「 link:security-authorization.html[セキュリティ認証] 」を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:247
#, fuzzy, no-wrap
msgid "Quarkus Security customization"
msgstr "Quarkusセキュリティのカスタマイズ"

#. type: Plain text
#: upstream/_guides/security.adoc:250
#, fuzzy
msgid "Quarkus Security is highly customizable. You can customize the following core security components of Quarkus:"
msgstr "Quarkusのセキュリティは高度にカスタマイズ可能です。Quarkusの次のコアセキュリティコンポーネントをカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security.adoc:251
#, fuzzy
msgid "`HttpAuthenticationMechanism`"
msgstr "認証メカニズム"

#. type: Plain text
#: upstream/_guides/security.adoc:252
#, fuzzy
msgid "`IdentityProvider`"
msgstr "アイデンティティ・プロバイダー"

#. type: Plain text
#: upstream/_guides/security.adoc:253
#, fuzzy
msgid "`SecurityidentityAugmentor`"
msgstr " `SecurityidentityAugmentor` "

#. type: Plain text
#: upstream/_guides/security.adoc:255
#, fuzzy
msgid "For more information about customizing Quarkus Security including reactive security, and how to register a security provider, see xref:security-customization.adoc[Security customization]."
msgstr "リアクティブセキュリティを含むQuarkus Securityのカスタマイズ、およびセキュリティプロバイダーの登録方法の詳細については、「 link:security-customization.html[セキュリティのカスタマイズ] 」を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:256
#, fuzzy, no-wrap
msgid "Combining authentication mechanisms"
msgstr "認証メカニズムの組み合わせ"

#. type: Plain text
#: upstream/_guides/security.adoc:260
#, fuzzy
msgid "If the user credentials are provided by different sources, you can combine authentication mechanisms.  For example, you can combine built-in `Basic` and `quarkus-oidc` `Bearer` authentication mechanisms."
msgstr "ユーザー認証情報が異なるソースから提供される場合、認証メカニズムを組み合わせることができます。たとえば、組み込みの `Basic` と `quarkus-oidc` `Bearer` 認証メカニズムを組み合わせることができます。"

#. type: delimited block =
#: upstream/_guides/security.adoc:264
#, fuzzy
msgid "You cannot combine the `quarkus-oidc` `Bearer` and `smallrye-jwt` authentication mechanisms because both mechanisms attempt to verify the token extracted from the HTTP `Authorization Bearer` scheme."
msgstr "異なるソースから認証証明書を取得する場合、複数の認証メカニズムを組み合わせることができます。例えば、組み込みの `Basic` と `Bearer` `quarkus-oidc` 認証機構を組み合わせることはできますが、`quarkus-oidc` `Bearer` と `smallrye-jwt` 認証機構を組み合わせることはできません。なぜなら、両方とも HTTP `Authorization Bearer` スキームから抽出されたトークンを検証しようとするからです。"

#. type: Title ===
#: upstream/_guides/security.adoc:266
#, fuzzy, no-wrap
msgid "Path-specific authentication mechanisms"
msgstr "パス固有認証メカニズム"

#. type: Plain text
#: upstream/_guides/security.adoc:269
#, fuzzy
msgid "The following configuration example demonstrates how you can enforce a single selectable authentication mechanism for a given request path:"
msgstr "特定の要求パスに対して単一の認証メカニズムのみが選択されるように強制できます。以下に例を示します:"

#. type: delimited block -
#: upstream/_guides/security.adoc:274
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic-or-bearer.paths=/service\n"
"quarkus.http.auth.permission.basic-or-bearer.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:278
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic.paths=/basic-only\n"
"quarkus.http.auth.permission.basic.policy=authenticated\n"
"quarkus.http.auth.permission.basic.auth-mechanism=basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:282
#, no-wrap
msgid ""
"quarkus.http.auth.permission.bearer.paths=/bearer-only\n"
"quarkus.http.auth.permission.bearer.policy=authenticated\n"
"quarkus.http.auth.permission.bearer.auth-mechanism=bearer\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security.adoc:285
#, fuzzy
msgid "Ensure that the value of the `auth-mechanism` property matches the authentication scheme supported by `HttpAuthenticationMechanism`, for example, `basic`, `bearer`, or `form`."
msgstr "`auth-mechanism` プロパティーの値は、`basic`、`bearer` または `form` などの HttpAuthenticationMechanism でサポートされている認証スキームと一致する必要があります。"

#. type: Title ==
#: upstream/_guides/security.adoc:286
#, fuzzy, no-wrap
msgid "Proactive authentication"
msgstr "プロアクティブ認証"

#. type: Plain text
#: upstream/_guides/security.adoc:290
#, fuzzy
msgid "By default, Quarkus does proactive authentication, which means that all incoming requests with credentials are authenticated regardless of whether the target page requires authentication.  For more information, see xref:security-built-in-authentication.adoc#proactive-authentication[Proactive authentication]."
msgstr "デフォルトでは、Quarkusはプロアクティブ認証と呼ばれる認証を行います。これは、受信したリクエストにクレデンシャルがある場合、そのリクエストは常に認証されます(ターゲットページが認証を必要としない場合でも)。"

#. type: Title ==
#: upstream/_guides/security.adoc:291
#, fuzzy, no-wrap
msgid "Secure connections with SSL/TLS"
msgstr "SSL による安全な接続"

#. type: Plain text
#: upstream/_guides/security.adoc:294
#, fuzzy, no-wrap
msgid " For more information about how Quarkus supports secure connections with SSL/TLS, see the xref:http-reference.adoc#ssl[HTTP reference] information.\n"
msgstr "QuarkusがSSL/TLSを使用した安全な接続をサポートする方法の詳細については、xref:http-reference.adoc#ssl[HTTP reference]の情報を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:295
#, fuzzy, no-wrap
msgid "Cross-origin resource sharing"
msgstr "クロスオリジンリソース共有"

#. type: Plain text
#: upstream/_guides/security.adoc:299
#, fuzzy
msgid "To make your Quarkus application accessible to another application running on a different domain, you need to configure cross-origin resource sharing (CORS).  For more information about the CORS filter that is provided by Quarkus, see the xref:http-reference.adoc#cors-filter[HTTP reference] information."
msgstr "Quarkus アプリケーションを異なるドメインで実行している別のアプリケーションにアクセスできるようにする場合は、CORS (Cross-Origin Resource Sharing) を設定する必要があります。詳細は、xref:http-reference.adoc#cors-filter[HTTP CORS documentation] を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:300
#, fuzzy, no-wrap
msgid "Cross-site Request Forgery (CSRF) prevention"
msgstr "クロスサイトリクエストフォージェリー対策"

#. type: Plain text
#: upstream/_guides/security.adoc:304
#, fuzzy
msgid "Quarkus Security provides a RESTEasy Reactive filter that can protect your applications against a https://owasp.org/www-community/attacks/csrf[Cross-Site Request Forgery] attack.  For more information, see xref:security-csrf-prevention.adoc[Cross-Site Request Forgery Prevention]."
msgstr "Quarkus Securityは、 link:https://owasp.org/www-community/attacks/csrf[クロスサイトフォージェリー] 攻撃から保護するために、RESTEasy Reactiveフィルタを提供しています。詳細については、xref:security-csrf-prevention.adoc[クロスサイトフォージェリー対策] ガイドをお読みください。"

#. type: Title ==
#: upstream/_guides/security.adoc:305
#, no-wrap
msgid "SameSite cookies"
msgstr "SameSite クッキー"

#. type: Plain text
#: upstream/_guides/security.adoc:309
#, fuzzy
msgid "You can add a https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies set by a Quarkus endpoint.  For more information, see xref:http-reference.adoc#same-site-cookie[SameSite cookies]."
msgstr "Quarkusのエンドポイントによって設定される任意のクッキーに https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookieプロパティを追加する方法については、xref:http-reference.adoc#same-site-cookie [SameSite cookie] を参照して下さい。"

#. type: Title ==
#: upstream/_guides/security.adoc:310
#, fuzzy, no-wrap
msgid "Secret engines"
msgstr "シークレットエンジン"

#. type: Plain text
#: upstream/_guides/security.adoc:312
#, fuzzy
msgid "Secrets engines are components that store, generate, or encrypt data."
msgstr "シークレットエンジンは、データを保存、生成、暗号化するコンポーネントである。"

#. type: Plain text
#: upstream/_guides/security.adoc:315
#, fuzzy
msgid "Quarkus provides comprehensive HashiCorp Vault support.  For more information, see the link:{vault-guide}[Quarkus and HashiCorp Vault] documentation."
msgstr "Quarkus は非常に包括的な HashiCorp Vault のサポートを提供します。詳細は、link:{vault-guide}[Quarkus and HashiCorp Vault] のドキュメントを参照して下さい。"

#. type: Title ==
#: upstream/_guides/security.adoc:316
#, no-wrap
msgid "Secure serialization"
msgstr "セキュア・シリアライゼーション"

#. type: Plain text
#: upstream/_guides/security.adoc:320
#, fuzzy
msgid "If your Quarkus Security architecture includes RESTEasy Reactive and Jackson, Quarkus can limit the fields that are included in JSON serialization based on the configured security.  For more information, see xref:resteasy-reactive.adoc#secure-serialization[Writing REST services with RESTEasy Reactive]."
msgstr "RESTEasy Reactive および Jackson とともにセキュリティーを使用する場合、Quarkus は、設定されたセキュリティーに基づいて、JSON シリアル化に含まれるフィールドを制限できます。詳細は、xref:resteasy-reactive.adoc#secure-serialization[RESTEasy Reactive documentation] を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:321
#, no-wrap
msgid "National Vulnerability Database"
msgstr "National Vulnerability Database"

#. type: Plain text
#: upstream/_guides/security.adoc:325
#, fuzzy
msgid "Most of the Quarkus tags are registered in the US link:https://nvd.nist.gov[National Vulnerability Database] (NVD) in Common Platform Enumeration (CPE) name format.  To view the registered Quarkus CPE names, use link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[this search query]."
msgstr "ほとんどのQuarkusタグは、Common Platform Enumeration (CPE)名の形式で link:https://nvd.nist.gov[National Vulnerability Database](NVD)に登録されています。登録されているすべてのQuarkusのCPE名は、 link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&amp;keyword=quarkus[この検索クエリ]を使用して見つけることができます。指定されたCPE名のエントリで表されるQuarkusタグが何らかのCVEの影響を受けている場合、そのCVEへのリンクを辿ることができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:327
#, fuzzy
msgid "If the NVE database flags a CVE against a Quarkus tag, a link that provides more details about the CVE is added to the given CPE name entry."
msgstr "NVEデータベースがQuarkusタグに対してCVEフラグを立てた場合、そのCVEに関する詳細情報を提供するリンクが所定のCPE名エントリに追加されます。"

#. type: Plain text
#: upstream/_guides/security.adoc:329
#, fuzzy
msgid "The NVD CPE team updates the list regularly, but if you encounter a false positive, report the details by creating an issue in the link:https://github.com/quarkusio/quarkus/issues/2611[quarkusio] repository."
msgstr "NVD CPEチームは定期的にリストを更新していますが、誤検出があった場合は、 link:https://github.com/quarkusio/quarkus/issues/2611[quarkusio] リポジトリにissueを作成して詳細を報告してください。"

#. type: Plain text
#: upstream/_guides/security.adoc:331
#, fuzzy
msgid "You can detect the vulnerabilities at the application build time with an NVD feed by using the Maven link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency check plugin]."
msgstr "Maven link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency checkプラグイン] を使用することにより、NVDフィードでアプリケーションビルド時に脆弱性を検出することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:334
#, fuzzy
msgid "To add the OWASP Dependency check plugin to your Quarkus Maven project, add the following XML configuration to the `pom.xml` file:"
msgstr "OWASP Dependency checkプラグインをQuarkus Mavenプロジェクトに追加するには、次のXML構成を `pom.xml` 。"

#. type: delimited block -
#: upstream/_guides/security.adoc:342
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.owasp</groupId>\n"
"    <artifactId>dependency-check-maven</artifactId>\n"
"    <version>${owasp-dependency-check-plugin.version}</version>\n"
"</plugin>\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security.adoc:347
#, fuzzy
msgid "Set the `owasp-dependency-check-plugin.version` value to `7.1.1` or later."
msgstr "`owasp-dependency-check-plugin.version` には `7.1.1` 以降をセットして下さい。"

#. type: Plain text
#: upstream/_guides/security.adoc:350
#, fuzzy
msgid "Next, configure the plugin as follows:"
msgstr "プラグインは以下のように設定できます:"

#. type: delimited block -
#: upstream/_guides/security.adoc:366
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.owasp</groupId>\n"
"    <artifactId>dependency-check-maven</artifactId>\n"
"    <version>${owasp-dependency-check-plugin.version}</version>\n"
"    <configuration>\n"
"        <!-- Fail only when detecting High Vulnerability issues -->\n"
"        <failBuildOnCVSS>7</failBuildOnCVSS>\n"
"        <suppressionFiles>\n"
"            <suppressionFile>${project.basedir}/dependency-cpe-suppression.xml</suppressionFile>\n"
"        </suppressionFiles>\n"
"    </configuration>\n"
"</plugin>\n"
"---- \n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:369
#, no-wrap
msgid ""
"To detect less severe issues, adjust the value of `failBuildOnCVSS` to suppress the false positives, as demonstrated in the following code sample:\n"
"[source,xml]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security.adoc:431
#, fuzzy, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<suppressions xmlns=\"https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.2.xsd\">\n"
"    <!--\n"
"        This is a CPE suppression file for the maven dependency check plugin.\n"
"        Each CPE that is found by error (false positive) needs to be suppressed for a specific jar using its' GAV.\n"
"        See https://jeremylong.github.io/DependencyCheck/general/suppression.html\n"
"     -->\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for netty-tcnative-classes to netty\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.netty:netty-tcnative-classes.*:.*$</gav>\n"
"        <cpe>cpe:/a:netty:netty</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Quarkus Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.quarkus:quarkus-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:smallrye-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:vertx-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for graal-sdk to GraalVM (the JVM distribution)\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^org\\.graalvm\\.sdk:g like this\n"
"    </suppress>\n"
"</suppressions>\n"
msgstr "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <suppressions xmlns=\"https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.2.xsd\"> <!-- maven dependency check plugin 用の CPE 抑制ファイルです。エラー(false positive)で見つかった各CPEは、そのGAVを使用して特定のjarに対して抑制する必要があります。 https://jeremylong.github.io/DependencyCheck/general/suppression.html -→ <suppress> <notes> <![CDATA[ Suppress the false positive CPE for netty-tcnative-classes to netty ]]> </notes> <gav regex=\"true\">^io.netty:netty-tcnative-classes. *:..* .$</gav> <cpe>cpe:/a:netty:netty</cpe> </suppress> <suppress> <notes> <![CDATA[ Suppress the false positive CPE for Quarkus Mutiny to mutiny:mutiny ]]> </notes> <gav regex=\"true\">^io.quarkus:quarkus-mutiny. *:.* $</gav> <cpe>cpe:/a:mutiny:mutiny</cpe> </suppress> <suppress> <notes> <![CDATA[ Smallrye Mutiny の CPE を mutiny:mutiny に誤検出しないようにする ]]> </notes> <gav regex=\"true\">^io.smallrye.reactive:mutiny. *:.* $</gav> <cpe>cpe:/a:mutiny:mutiny</cpe> </suppress> <suppress> <notes> <![CDATA[ Smallrye Mutinyの誤検出CPEをmutiny:mutinyに抑制する ]]> </notes> <gav regex=\"true\">^io.smallrye.reactive:smallrye-mutiny. *:.* $</gav> <cpe>cpe:/a:mutiny:mutiny</cpe> </suppress> <suppress> <notes> <![CDATA[ Smallrye Mutiny の CPE の誤検出を mutiny:mutiny に抑制する ]]> </notes> <gav regex=\"true\">^io.smallrye.reactive:vertx-mutiny.X *: :.* $</gav> <cpe>cpe:/a:mutiny:mutiny</cpe> </suppress> <suppress> <notes> <![CDATA[ Suppress the false positive CPE for graal-sdk to GraalVM (the JVM distribution) ]]> </notes> <gav regex=\"true\">^org.graalvm.sdk:g like this </suppress> </suppress> </suppressions> <!"

#. type: delimited block -
#: upstream/_guides/security.adoc:435
#, no-wrap
msgid ""
"Ensure that you review and update the suppression list regularly to ensure that the results are up to date.\n"
"You can optionally apply a time limit to individual suppressions by adding an expiry attribute, as outlined in the following example: \n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:438
#, no-wrap
msgid ""
"`<suppress until=\"2022-01-01Z\">...</suppress>`\n"
"You can adjust the expiry date if you need to.\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security.adoc:439
#, fuzzy, no-wrap
msgid "Quarkus Security testing"
msgstr "Quarkusのセキュリティテスト"

#. type: delimited block -
#: upstream/_guides/security.adoc:442
msgid "When testing Quarkus security, ensure that your `IdentityProvider` is already set with usernames, passwords, and roles in `application.properties`.  For more information about testing Quarkus Security, see xref:security-testing.adoc#configuring-user-information[Configuring user information]."
msgstr ""

#~ msgid "This document provides a brief overview of Quarkus Security and links to the individual guides."
#~ msgstr "このドキュメントでは、Quarkus Securityの簡単な概要と、各ガイドへのリンクについて説明しています。"

#~ msgid "Getting Started"
#~ msgstr "はじめに"

#~ msgid "Please see the xref:security-getting-started.adoc[Getting Started With Security] guide for a quick walkthrough through Quarkus Security where you can learn how to use xref:security-basic-auth-concept.adoc[Basic HTTP Authentication] mechanism and `JPA Identity Provider` to create `SecurityIdentity` and authorize a secure access to the endpoint with `Role Based Access Control`."
#~ msgstr "Quarkusセキュリティの簡単なウォークスルーについては、xref:security-getting-started.adoc[セキュリティ入門] ガイドを参照してください。ここでは、xref:security-basic-auth-concept.adoc[ベーシックHTTP認証] のメカニズムと `JPA Identity Provider` を使用して `SecurityIdentity` を作成し、`役割ベースのアクセス制御` でエンドポイントに安全なアクセスを許可する方法について説明します。"

#~ msgid "Architecture"
#~ msgstr "アーキテクチャ"

#~ msgid "For example, the credentials may be coming with the HTTP `Authorization` header, client HTTPS certificates or cookies."
#~ msgstr "例えば、資格情報は、HTTP `Authorization` ヘッダー、クライアントの HTTPS 証明書、またはクッキーを使用している場合があります。"

#~ msgid "Quarkus supports several sources to load authentication information from."
#~ msgstr "Quarkusは、認証情報をロードするためのいくつかのソースをサポートしています。"

#~ msgid "Please see xref:security-webauthn.adoc[our dedicated WebAuthn documentation] for more information."
#~ msgstr "詳細については、xref:security-webauthn.adoc[個別のWebAuthn ドキュメント] を参照してください。"

#~ msgid "Please see xref:security-built-in-authentication.adoc#mutual-tls[Mutual TLS Authentication] for more information."
#~ msgstr "詳しくは link:security-built-in-authentication#mutual-tls[相互TLS認証] をご覧ください。"

#~ msgid "The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer Token and Authorization Code Flow authentication mechanisms."
#~ msgstr "Quarkusの `quarkus-oidc` エクステンションは、`Bearer Token` および `Authorization Code Flow` 認証メカニズムをサポートする、リアクティブで相互運用可能なマルチテナント対応の OpenID Connect アダプターを提供します。"

#~ msgid "For information about the Bearer Token authentication mechanism, see xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications]."
#~ msgstr "Bearer Token認証メカニズムについては、xref:security-openid-connect.adoc[OpenID Connectを使用したサービスアプリケーションの保護]を参照してください。"

#~ msgid "For information about the Authorization Code Flow authentication mechanism, see xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Application]."
#~ msgstr "認証コードフロー認証の仕組みについては、xref:security-openid-connect-web-authentication.adoc[OpenID Connectを使用したWebアプリケーションの保護]を参照してください。"

#~ msgid "For information about multiple tenants that can support Bearer Token or Authorization Code Flow mechanisms, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
#~ msgstr "Bearer Token または認証コードフロー機構をサポートできるマルチテナントについては、xref:security-openid-connect-multitenancy.adoc[OpenID Connect マルチテナントの使用] を参照してください。"

#~ msgid "For information about using Keycloak to Centralize Authorization, see the xref:security-keycloak-authorization.adoc[Using Keycloak to Centralize Authorization] guide."
#~ msgstr "Keycloakを使用した認可の集中管理については、xref:security-keycloak-authorization.adoc[Keycloakを使用した認可の集中管理] ガイドをご覧ください。"

#~ msgid "For information about configuring Keycloak programmatically, see the xref:security-keycloak-admin-client.adoc[Keycloak Admin Client] guide."
#~ msgstr "プログラムによるKeycloakの設定については、xref:security-keycloak-admin-client.adoc[Keycloak 管理クライアント] ガイドを参照してください。"

#~ msgid "SmallRye JWT"
#~ msgstr "SmallRye JWT"

#~ msgid "It provides an alternative to `quarkus-oidc` Bearer Token Authentication Mechanism. It can currently verify only `JWT` tokens using the PEM keys or refreshable `JWK` key set."
#~ msgstr "それは `quarkus-oidc` Bearer Token 認証メカニズムに代わるものを提供します。現在、PEM 鍵または更新可能な `JWK` 鍵セットを使用して `JWT` トークンのみを検証することができます。"

#~ msgid "Additionally, it provides `JWT Generation API` for creating `signed`, `inner-signed` and/or `encrypted` `JWT` tokens with ease."
#~ msgstr "さらに、 `JWT Generation API` を提供して、 `signed` , `inner-signed` , および/または `encrypted` `JWT` トークンを簡単に作成することができます。"

#~ msgid "OAuth2"
#~ msgstr "OAuth2"

#~ msgid "See the xref:security-oauth2.adoc[Using OAuth2] guide for more information."
#~ msgstr "詳細は、xref:security-oauth2.adoc[Using OAuth2] ガイドを参照してください。"

#~ msgid "`quarkus-smallrye-jwt` does not support the remote introspection of the opaque tokens or even JWT tokens - it always relies on the locally available keys - possibly fetched from the OpenID Connect provider. So if you need to introspect the JWT tokens remotely then both `quarkus-oidc` and `quarkus-elytron-security-oauth2` will work. Both extensions also support the verification of the opaque/binary tokens by using the remote introspection."
#~ msgstr "`quarkus-smallrye-jwt` は 不透明なトークンや JWT トークンのリモートでのイントロスペクションをサポートしていません - OpenID Connect プロバイダから取得した、ローカルで使用できるキーに常に依存しています。もしリモートで JWT トークンをイントロスペクトする必要がある場合は、 `quarkus-oidc` と `quarkus-elytron-security-oauth2` の両方が機能します。どちらのエクステンションも、リモートイントロスペクションを使用した不透明/バイナリートークンの検証をサポートしています。"

#~ msgid "Below is a summary of the options."
#~ msgstr "以下、選択肢の概要をご紹介します。"

#~ msgid "xref:security-getting-started.adoc[JPA IdentityProvider]"
#~ msgstr "xref:security-getting-started.adoc[JPA IdentityProvider]"

#~ msgid "For a a Basic Authentication configuration walk-through using JPA, see:"
#~ msgstr "JPAを使用したBasic認証の設定のウォークスルーについては、こちらをご覧ください:"

#~ msgid "For testing, use the xref:security-testing.adoc#configuring-user-information[User Properties IdentityProvider] section with the `IdentityProvider` with already set usernames, passwords, and roles in `application.properties`."
#~ msgstr "テスト用途の場合は、 `application.properties` でユーザー名、パスワード、およびロールがすでに設定されている `IdentityProvider` で xref:security-testing.adoc#configuring-user-information[ユーザー情報の設定] セクションを使用します。"

#~ msgid "See xref:security-built-in-authentication.adoc#proactive-authentication[Proactive Authentication] for more information."
#~ msgstr "詳細については、 link:security-built-in-authentication#proactive-authentication[プロアクティブ認証]を参照してください。"

#~ msgid "See xref:security-authorization.adoc[Security Authorization] for more information about Role Based Access Control and other authorization options."
#~ msgstr "役割ベースのアクセス制御およびその他の認可オプションの詳細については、 link:security-authorization[セキュリティー認可]を参照してください。"

#~ msgid "Customization and other useful tips"
#~ msgstr "カスタマイズやその他の便利なヒント"

#~ msgid "Quarkus Security is highly customizable. One can register custom ``HttpAuthenticationMechanism``s, ``IdentityProvider``s and ``SecurityidentityAugmentor``s."
#~ msgstr "Quarkus Securityは、高度なカスタマイズが可能です。カスタム `HttpAuthenticationMechanism` 、 `IdentityProvider` 、 `SecurityidentityAugmentor` を登録することができます。"

#~ msgid "See xref:security-customization.adoc[Security Customization] for more information about customizing Quarkus Security and other useful tips about the reactive security, registering the security providers, etc."
#~ msgstr "Quarkus Securityのカスタマイズの詳細や、リアクティブセキュリティー、セキュリティープロバイダーの登録などに関する便利なヒントについては、xref:security-customization.adoc[Security Customization] を参照してください。"

#~ msgid "See the xref:http-reference.adoc#ssl[Supporting secure connections with SSL] guide for more information."
#~ msgstr "詳細は、xref:http-reference.adoc#ssl[Supporting secure connections with SSL] ガイドを参照してください。"

#~ msgid "Testing"
#~ msgstr "テスト"

#~ msgid "See xref:security-testing.adoc[Security Testing] for more information about testing Quarkus Security."
#~ msgstr "Quarkus Securityのテストの詳細については、 link:security-testing[セキュリティーのテスト]を参照してください。"

#~ msgid "Vault"
#~ msgstr "Vault"

#~ msgid "We will be asking the NVD CPE team to update the list as well as link Quarkus CPE name entries with the related CVEs on a regular basis.  If you work with the link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] which is using NVD feeds to detect the vulnerabilities at the application build time and see a false positive reported then please re-open link:https://github.com/quarkusio/quarkus/issues/2611[this issue] and provide the details."
#~ msgstr "リストの更新のほか、Quarkus CPE 名のエントリーを関連する CVE に定期的にリンクするよう NVD CPE チームに依頼します。NVD フィードを使用して、アプリケーションのビルド時に脆弱性を検出し、誤検知を確認する link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] を使用する場合は、link:https://github.com/quarkusio/quarkus/issues/2611[この課題] を再オープンし、詳細を提供してください。"

#~ msgid "You can add `OWASP Dependency Check Plugin` to your project's `pom.xml` like this:"
#~ msgstr "以下のように、プロジェクトの `pom.xml` に `OWASP Dependency Check Plugin` を追加できます:"

#~ msgid "You can change `failBuildOnCVSS` value to detect less severe issues as well.\n"
#~ msgstr "`failBuildOnCVSS` 値を変更することで、それほど深刻ではない問題も検出できます。\n"

#~ msgid ""
#~ "A suppression list may vary depending on whether you'd like to keep checking the false positives to avoid missing something or not.\n"
#~ "For example, it can look like this:\n"
#~ msgstr ""
#~ "抑制リストは、見逃さないように誤検知をチェックし続けるかどうかによって異なる場合があります。\n"
#~ "たとえば、次のようになります:\n"

#~ msgid "[source,xml]\n"
#~ msgstr "[source,xml]\n"

#~ msgid "Such a suppression list has to be carefully prepared and revisited from time to time. You should consider making individual suppressions time limited by adding an `until` attribute, for example: `<suppress until=\"2022-01-01Z\">...</suppress>`. It will let you doublecheck that only the same known false positives are reported when the suppression period expires, and after reviewing the report you can set a new expiry date.\n"
#~ msgstr "このような抑制リストは、慎重に準備し、時々再検討する必要があります。 `until` 属性を追加して、個別の抑制時間を制限することを検討する必要があります。たとえば、 `<suppress until=\"2022-01-01Z\">...</suppress>` です。 抑制期間が終了したときに同じ既知の誤検知のみが報告されていることを再確認できます。レポートを確認した後、新しい有効期限を設定できます。\n"

#~ msgid "See xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] for more information about multiple tenants which can support `Bearer` or `Authorization Code Flow` authentication mechanism and configured statically or dynamically."
#~ msgstr "`Bearer` または `Authorization Code Flow` 認証メカニズムをサポートし、静的または動的に設定できる複数のテナントの詳細については、xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] を参照してください。"

#~ msgid "If you need to configure Keycloak programmatically then consider using https://www.keycloak.org/docs/latest/server_development/#admin-rest-api[Keycloak Admin REST API] with the help of the `quarkus-keycloak-admin-client` or `quarkus-keycloak-admin-client-reactive` (if the application uses `quarkus-rest-client-reactive`) extension."
#~ msgstr "プログラムで Keycloak を設定する必要がある場合は、`quarkus-keycloak-admin-client` または `quarkus-keycloak-admin-client-reactive` (アプリケーションが `quarkus-rest-client-reactive` を使用する場合) エクステンションを使用して、 https://www.keycloak.org/docs/latest/server_development/#admin-rest-api[Keycloak Admin REST API] を使用することを検討してください。"

#~ msgid "LDAP"
#~ msgstr "LDAP"

#~ msgid "Please see the xref:security-ldap.adoc[Authenticate with LDAP] guide for more information about LDAP authentication mechanism."
#~ msgstr "LDAP 認証メカニズムの詳細については、xref:security-ldap.adoc[Authenticate with LDAP] ガイドを参照してください。"

#~ msgid "See xref:security-jpa.adoc[JPA IdentityProvider] and xref:security-jdbc.adoc[JDBC IdentityProvider] for more information.  You can also use xref:security-testing.adoc#configuring-user-information[User Properties IdentityProvider] for testing."
#~ msgstr "詳細は、xref:security-jpa.adoc[JPA IdentityProvider] および xref:security-jdbc.adoc[JDBC IdentityProvider] を参照してください。テストには、xref:security-testing.adoc#configuring-user-information[User Properties IdentityProvider] を使用することもできます。"

#~ msgid "Note link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] `6.5.3` or later should be used with Quarkus.\n"
#~ msgstr "link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] `6.5.3` 以降を Quarkus で使用する必要があることに留意してください。\n"
