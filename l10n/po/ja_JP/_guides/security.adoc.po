# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-03-30 14:05+0000\n"
"PO-Revision-Date: 2021-04-03 10:12+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security.adoc:6
#, no-wrap
msgid "Quarkus - Security Architecture and Guides"
msgstr "Quarkus - セキュリティーアーキテクチャとガイド"

#. type: Plain text
#: upstream/_guides/security.adoc:11
msgid "Quarkus Security provides the architecture, multiple authentication and authorization mechanisms, and other tools for the developers to build a production-quality security for their Quarkus applications."
msgstr "Quarkus Securityでは、開発者がQuarkusアプリケーションの商用品質のセキュリティーを構築するためのアーキテクチャ、複数の認証および認可メカニズム、その他のツールを提供しています。"

#. type: Plain text
#: upstream/_guides/security.adoc:13
msgid "This document provides a brief overview of Quarkus Security and links to the individual guides."
msgstr "このドキュメントでは、Quarkus Securityの簡単な概要と、各ガイドへのリンクについて説明しています。"

#. type: Title ==
#: upstream/_guides/security.adoc:14
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security.adoc:17
msgid "`HttpAuthenticationMechanism` is the main entry into Quarkus HTTP Security."
msgstr "`HttpAuthenticationMechanism`  は、Quarkus HTTP Securityのメインエントリーです。"

#. type: Plain text
#: upstream/_guides/security.adoc:20
msgid "Quarkus Security Manager uses `HttpAuthenticationMechanism` to extract the authentication credentials from the HTTP request and delegates to `IdentityProvider` to complete the conversion of these credentials to `SecurityIdentity`."
msgstr "Quarkus Security Managerは、 `HttpAuthenticationMechanism`  を使用してHTTPリクエストから認証資格情報を抽出し、 `IdentityProvider`  に委任して、これらの資格情報の `SecurityIdentity`  への変換を完了させます。"

#. type: Plain text
#: upstream/_guides/security.adoc:22
msgid "For example, the credentials may be coming with the HTTP `Authorization` header, client HTTPS certificates or cookies."
msgstr "例えば、資格情報は、HTTP `Authorization`  ヘッダー、クライアントの HTTPS 証明書、またはクッキーを使用している場合があります。"

#. type: Plain text
#: upstream/_guides/security.adoc:24
msgid "`IdentityProvider` verifies the authentication credentials and maps them to `SecurityIdentity` which contains the username, roles, the original authentication credentials, and other attributes."
msgstr "`IdentityProvider`  は認証資格情報を検証し、ユーザー名、ロール、元の認証資格情報、およびその他の属性を含む `SecurityIdentity`  にマップします。"

#. type: Plain text
#: upstream/_guides/security.adoc:26
msgid "For every authenticated resource, you can inject a `SecurityIdentity` instance to get the authenticated identity information."
msgstr "認証済みリソースごとに、 `SecurityIdentity`  インスタンスを注入して、認証済みの ID 情報を取得することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:29
msgid "In some other contexts you may have other parallel representations of the same information (or parts of it) such as `SecurityContext` for JAX-RS or `JsonWebToken` for JWT."
msgstr "他の文脈では、JAX-RSであれば `SecurityContext`  、JWTであれば `JsonWebToken`  のように、同じ情報(またはその一部)を他の別の表現で表現している場合があります。"

#. type: Title ==
#: upstream/_guides/security.adoc:30
#, no-wrap
msgid "Authentication mechanisms"
msgstr "認証メカニズム"

#. type: Plain text
#: upstream/_guides/security.adoc:33
msgid "Quarkus supports several sources to load authentication information from."
msgstr "Quarkusは、認証情報をロードするためのいくつかのソースをサポートしています。"

#. type: Title ===
#: upstream/_guides/security.adoc:34
#, no-wrap
msgid "Basic and Form Authentication Mechanisms"
msgstr "基本認証とフォーム認証の仕組み"

#. type: Plain text
#: upstream/_guides/security.adoc:38
msgid "Basic and Form HTTP-based authentication mechanisms are the core authentication mechanisms supported in Quarkus.  Please see link:security-built-in-authentication#basic-auth[Basic HTTP Authentication] and link:security-built-in-authentication#form-auth[Form HTTP Authentication] for more information."
msgstr "Basic HTTPベースの認証メカニズムとForm HTTPベースの認証メカニズムは、Quarkusでサポートされている主要な認証メカニズムです。詳細については、 link:security-built-in-authentication#basic-auth[基本HTTP認証]と link:security-built-in-authentication#form-auth[フォームHTTP認証]を参照してください。"

#. type: Title ===
#: upstream/_guides/security.adoc:39
#, no-wrap
msgid "Mutual TLS Authentication"
msgstr "相互TLS認証"

#. type: Plain text
#: upstream/_guides/security.adoc:42
msgid "Quarkus provides Mutual TLS authentication so that you can authenticate users based on their X.509 certificates."
msgstr "Quarkusは相互TLS認証を提供しているので、X.509証明書に基づいてユーザーを認証できます。"

#. type: Plain text
#: upstream/_guides/security.adoc:44
msgid "Please see link:security-built-in-authentication#mutual-tls[Mutual TLS Authentication] for more information."
msgstr "詳しくは link:security-built-in-authentication#mutual-tls[相互TLS認証] をご覧ください。"

#. type: Title ===
#: upstream/_guides/security.adoc:45
#, no-wrap
#| msgid "OpenId Connect"
msgid "OpenId Connect, JWT, OAuth2"
msgstr "OpenId Connect, JWT, OAuth2"

#. type: Title ====
#: upstream/_guides/security.adoc:47
#, no-wrap
msgid "OpenId Connect"
msgstr "OpenId Connect"

#. type: Plain text
#: upstream/_guides/security.adoc:50
msgid "`quarkus-oidc` extension provides a reactive, interoperable, multi-tenant enabled OpenId Connect adapter which supports `Bearer Token` and `Authorization Code Flow` authentication mechanisms."
msgstr "`quarkus-oidc`  エクステンションは、 `Bearer Token`  および `Authorization Code Flow`  認証メカニズムをサポートする、リアクティブで相互運用可能なマルチテナント対応の OpenId Connect アダプターを提供します。"

#. type: Plain text
#: upstream/_guides/security.adoc:53
msgid "`Bearer Token` mechanism extracts the token from HTTP `Authorization` header.  `Authorization Code Flow` mechanism uses OpenId Connect Authorization Code flow. It redirects the user to IDP to authenticate and completes the authentication process after the user has been redirected back to Quarkus by exchanging the provided code grant for ID, access and refresh tokens."
msgstr "`Bearer Token`  メカニズムは、HTTP `Authorization`  ヘッダーからトークンを抽出します。 `Authorization Code Flow`  メカニズムは、OpenId Connect Authorization Code Flowを使用します。ユーザーをIDPにリダイレクトして認証を行い、提供されたCode GrantをID、アクセストークン、リフレッシュトークンと交換することで、ユーザーがQuarkusにリダイレクトされた後に認証プロセスを完了させます。"

#. type: Plain text
#: upstream/_guides/security.adoc:55
msgid "ID and access `JWT` tokens are verified with the refreshable `JWK` key set but both JWT and opaque (binary) tokens can be introspected remotely."
msgstr "ID とアクセス `JWT` トークンは、リフレッシュ可能な `JWK` キーセットで検証されますが、JWT と不透明な (バイナリーの) トークンの両方をリモートで検証することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:57
msgid "See the link:security-openid-connect[Using OpenID Connect to Protect Service Applications] guide for more information about `Bearer Token` authentication mechanism."
msgstr "`Bearer Token` 認証メカニズムの詳細については、 link:security-openid-connect[Using OpenID Connect to Protect Service Applications]ガイドを参照してください。"

#. type: Plain text
#: upstream/_guides/security.adoc:59
msgid "See the link:security-openid-connect-web-authentication[Using OpenID Connect to Protect Web Application] guide for more information about `Authorization Code Flow` authentication mechanism."
msgstr "`Authorization Code Flow`  認証メカニズムの詳細については、 link:security-openid-connect-web-authentication[Using OpenID Connect to Protect Web Application]ガイドを参照してください。"

#. type: delimited block =
#: upstream/_guides/security.adoc:63
msgid "Both `quarkus-oidc` `Bearer` and `Authorization Code Flow` Authentication mechanisms use <<smallrye-jwt, SmallRye JWT>> to represent JWT tokens as Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "`quarkus-oidc` の`Bearer` と `Authorization Code Flow`  認証メカニズムはいずれも link:#smallrye-jwt[SmallRye JWT ]を使用して、JWT トークンを Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken` として表現しています。"

#. type: Plain text
#: upstream/_guides/security.adoc:66
msgid "See link:security-openid-connect-multitenancy[Using OpenID Connect Multi-Tenancy] for more information about multiple tenants which can support `Bearer` or `Authorization Code Flow` authentication mechanism and configured statically or dynamically."
msgstr "`Bearer`  または `Authorization Code Flow`  認証メカニズムをサポートし、静的または動的に設定できる複数のテナントの詳細については、 link:security-openid-connect-multitenancy[OpenID Connect マルチテナントの使用]を参照してください。"

#. type: delimited block =
#: upstream/_guides/security.adoc:71
msgid "If you would like to have Quarkus OIDC extension enabled at runtime then set `quarkus.oidc.tenant-enabled=false` at build time and re-enable it at runtime using a system property.  See also link:security-openid-connect-multitenancy#disable-tenant[Disabling Tenant Configurations] for more information about managing the individual tenant configurations in the multi-tenant OIDC deployments."
msgstr "実行時にQuarkus OIDCエクステンションを有効にしたい場合は、ビルド時に `quarkus.oidc.tenant-enabled=false` を設定し、システムプロパティーを使用して実行時に再度有効にします。マルチテナントOIDCデプロイメントでの個々のテナント設定の管理の詳細については、テナント link:security-openid-connect-multitenancy#disable-tenant[設定の無効化]も参照してください。"

#. type: Plain text
#: upstream/_guides/security.adoc:74
msgid "If you use Keycloak and Bearer tokens then also see the link:security-keycloak-authorization[Using Keycloak to Centralize Authorization] guide."
msgstr "Keycloak と Bearer トークンを使用する場合は、 link:security-keycloak-authorization[Using Keycloak to Centralize Authorization]ガイドも参照してください。"

#. type: delimited block =
#: upstream/_guides/security.adoc:78
msgid "If you need to configure Keycloak programmatically then consider using https://www.keycloak.org/docs/latest/server_development/#admin-rest-api[Keycloak Admin REST API] with the help of the `quarkus-keycloak-admin-client` extension."
msgstr "Keycloakをプログラムで設定する必要がある場合は、 `quarkus-keycloak-admin-client` エクステンションの助けを借りて、 link:https://www.keycloak.org/docs/latest/server_development/#admin-rest-api[Keycloak Admin REST API]の使用を検討してください。"

#. type: Title ====
#: upstream/_guides/security.adoc:80
#, no-wrap
msgid "OpenId Connect Client and Filters"
msgstr "OpenId Connect クライアントとフィルタ"

#. type: Plain text
#: upstream/_guides/security.adoc:83
#, fuzzy
msgid "`quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenId Connect and OAuth2 providers which support `client-credentials`, `password` and `refresh_token` token grants."
msgstr "`quarkus-oidc-client` エクステンションは、 `client-credentials` , `password` , `refresh_token` トークングラントをサポートする OpenId Connect および OAuth2 プロバイダからアクセストークンを取得したり、更新したりするための `OidcClient` を提供します。"

#. type: Plain text
#: upstream/_guides/security.adoc:85
#, fuzzy
msgid "`quarkus-oidc-client-filter` extension depends on the `quarkus-oidc-client` extension and provides JAX-RS `OidcClientRequestFilter` which sets the access token acquired by `OidcClient` as an HTTP `Authorization` header's `Bearer` scheme value. This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint but it is not related to the authentication requirements of this service endpoint. For example, it can be a public endpoint or it can be protected with MTLS - the important point is that this Quarkus endpoint does not have to be protected itself with the Quarkus OpenId Connect adapter."
msgstr "`quarkus-oidc-client-filter` 拡張は `quarkus-oidc-client` 拡張に依存し、 `OidcClient` で取得したアクセストークンを HTTP `Authorization` ヘッダーの `Bearer` スキーム値として設定する JAX-RS `OidcClientRequestFilter` を提供します。このフィルターは、現在のQuarkusエンドポイントに注入されたMP RestClient実装で登録することができますが、このサービスエンドポイントの認証要件には関係ありません。例えば、パブリックエンドポイントにすることもできますし、MTLSで保護することもできます - 重要な点は、このQuarkusエンドポイントは、Quarkus OpenId Connectアダプターでそれ自体を保護する必要がないということです。"

#. type: Plain text
#: upstream/_guides/security.adoc:87
#, fuzzy
msgid "`quarkus-oidc-token-propagation` extension depends on the `quarkus-oidc` extension and provides JAX-RS `TokenCredentialRequestFilter` which sets the OpenId Connect Bearer or Authorization Code Flow access token as an HTTP `Authorization` header's `Bearer` scheme value. This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint and the Quarkus endpoint must be protected itself with the Quarkus OpenId Connect adapter. This filter can be used to propagate the access token to the downstream services."
msgstr "`quarkus-oidc-token-propagation` 拡張は `quarkus-oidc` 拡張に依存し、OpenId Connect ベアラーまたは Authorization Code Flow アクセストークンを HTTP `Authorization` ヘッダーの `Bearer` スキーム値として設定する JAX-RS `TokenCredentialRequestFilter` を提供します。このフィルターは、現在のQuarkusエンドポイントに注入されたMP RestClient実装で登録することができ、QuarkusエンドポイントはQuarkus OpenId Connectアダプターでそれ自体を保護する必要があります。このフィルターは、アクセストークンを下流のサービスに伝播させるために使用できます。"

#. type: Plain text
#: upstream/_guides/security.adoc:89
#, fuzzy
msgid "See the link:security-openid-connect-client[Using OpenID Connect and OAuth2 Client] guide for more information."
msgstr "詳細については、「 link:security-openid-connect-client[OpenID Connect と OAuth2 クライアントの使用] 」ガイドを参照してください。"

#. type: Title ====
#: upstream/_guides/security.adoc:91
#, no-wrap
msgid "SmallRye JWT"
msgstr "SmallRye JWT"

#. type: Plain text
#: upstream/_guides/security.adoc:94
msgid "`quarkus-smallrye-jwt` provides Microprofile JWT 1.1.1 implementation and many more options to verify signed and encrypted `JWT` tokens and represent them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "`quarkus-smallrye-jwt` はMicroprofile JWT 1.1.1.1 の実装と、署名・暗号化された `JWT` トークンを検証し、 `org.eclipse.microprofile.jwt.JsonWebToken` として表現するための多くのオプションを提供します。"

#. type: Plain text
#: upstream/_guides/security.adoc:96
msgid "It provides an alternative to `quarkus-oidc` Bearer Token Authentication Mechanism. It can currently verify only `JWT` tokens using the PEM keys or refreshable `JWK` key set."
msgstr "それは `quarkus-oidc` ベアラートークン認証メカニズムに代わるものを提供します。現在、PEM 鍵または更新可能な `JWK` 鍵セットを使用して `JWT` トークンのみを検証することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:98
msgid "Additionally it provides `JWT Generation API` for creating `signed`, `inner-signed` and/or `encrypted` `JWT` tokens with ease."
msgstr "さらに、 `JWT Generation API` を提供して、 `signed` , `inner-signed` , および/または `encrypted` `JWT`トークンを簡単に作成することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:100
msgid "See the link:security-jwt[Using SmallRye JWT] guide for more information."
msgstr "詳細については、 link:security-jwt[Using SmallRye JWT]ガイドを参照してください。"

#. type: Title ====
#: upstream/_guides/security.adoc:101
#, no-wrap
msgid "OAuth2"
msgstr "OAuth2"

#. type: Plain text
#: upstream/_guides/security.adoc:104
msgid "`quarkus-elytron-security-oauth2` provides an alternative to `quarkus-oidc` Bearer Token Authentication Mechanism. It is based on `Elytron` and is primarily meant for introspecting the opaque tokens remotely."
msgstr "`quarkus-elytron-security-oauth2`  は `quarkus-oidc`  Bearer Token 認証メカニズムの代替手段を提供します。これは `Elytron` をベースにしており、主に不透明なトークンをリモートでイントロスペクトするためのものです。"

#. type: Plain text
#: upstream/_guides/security.adoc:106
msgid "See the link:security-oauth2[Using OAuth2] guide for more information."
msgstr "詳細については、 link:security-oauth2[OAuth2 の使用]ガイドを参照してください。"

#. type: Title ====
#: upstream/_guides/security.adoc:107
#, fuzzy, no-wrap
msgid "Choosing between OpenId Connect, SmallRye JWT and OAuth2 extensions"
msgstr "OpenId Connect、SmallRye JWT、OAuth2エクステンションの選択"

#. type: Plain text
#: upstream/_guides/security.adoc:110
#, fuzzy
msgid "`quarkus-oidc` extension requires an OpenId Connect provider such as Keycloak which can be used to verify the Bearer tokens or authenticate the end users with the Authorization Code flow. In both cases `quarkus-oidc` requires a connection to this OpenId Connect provider."
msgstr "`quarkus-oidc` 拡張機能には、Keycloak のような OpenId Connect プロバイダーが必要で、これは Bearer トークンの検証や Authorization Code フローによるエンドユーザーの認証に使用することができます。どちらの場合も、 `quarkus-oidc` は、この OpenId Connect プロバイダーへの接続を必要とします。"

#. type: Plain text
#: upstream/_guides/security.adoc:112
#, fuzzy
msgid "`quarkus-oidc` is the only option when the user authentication via Authorization Code flow or supporting multiple tenants is required. It can also request a UserInfo using both Authorization Code Flow and Bearer access tokens."
msgstr "`quarkus-oidc` は、Authorization Code フローによるユーザー認証や、複数のテナントへの対応が必要な場合の唯一の選択肢です。また、Authorization Code FlowとBearerアクセストークンの両方を使ってUserInfoを要求することもできます。"

#. type: Plain text
#: upstream/_guides/security.adoc:114
#, fuzzy
msgid "When the Bearer tokens have to be verified then `quarkus-oidc`, `quarkus-smallrye-jwt` and `quarkus-elytron-security-oauth2` can be used."
msgstr "ベアラートークンを検証する必要がある場合は、 `quarkus-oidc` 、 `quarkus-smallrye-jwt` 、 `quarkus-elytron-security-oauth2` を使用できます。"

#. type: Plain text
#: upstream/_guides/security.adoc:116
#, fuzzy
msgid "If you have Bearer tokens in a JWT format then all these 3 extensions can be used. Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the JsonWebKey (JWK) set when the OpenId Connect provider rotates the keys, therefore `quarkus-oidc` or `quarkus-smallrye-jwt` should be used for verifying JWT tokens if the remote token introspection has to be avoided or not supported by the providers."
msgstr "JWT形式のBearerトークンを持っている場合は、これら3つの拡張機能をすべて使用することができます。 `quarkus-oidc` と `quarkus-smallrye-jwt` は、OpenId Connect プロバイダーがキーをローテーションする際の JsonWebKey (JWK) セットのリフレッシュをサポートしています。したがって、リモートトークンのイントロスペクションを回避しなければならない場合や、プロバイダーがサポートしていない場合は、JWT トークンの検証に `quarkus-oidc` または `quarkus-smallrye-jwt` を使用する必要があります。"

#. type: Plain text
#: upstream/_guides/security.adoc:118
#, fuzzy
msgid "`quarkus-smallrye-jwt` does not support the remote introspection of the opaque tokens or even JWT tokens - it always relies on the locally available keys - possibly fetched from the OpenId Connect provider. So if you need to introspect the JWT tokens remotely then both `quarkus-oidc` and `quarkus-elytron-security-oauth2` will work. Both extensions also support the verification of the opaque/binary tokens via the remote introspection."
msgstr "`quarkus-smallrye-jwt` は、不透明なトークンや JWT トークンのリモートイントロスペクションをサポートしていません。これは常に、ローカルで利用可能なキー（おそらく OpenId Connect プロバイダーから取得されたもの）に依存します。したがって、JWTトークンをリモートでイントロスペクションする必要がある場合は、 `quarkus-oidc` と `quarkus-elytron-security-oauth2` の両方が機能します。どちらの拡張機能も、リモートイントロスペクションによる不透明/バイナリトークンの検証もサポートしています。"

#. type: Plain text
#: upstream/_guides/security.adoc:120
#, fuzzy
msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` can have both JWT and opaque tokens injected into the endpoint code - the injected JWT tokens may offer a richer information about the user. All extensions can have the tokens injected as `Principal`."
msgstr "`quarkus-oidc` と `quarkus-smallrye-jwt` は、JWT トークンと不透明なトークンの両方をエンドポイントコードに注入することができます。注入された JWT トークンは、ユーザーに関するより豊富な情報を提供することができます。すべての拡張機能は、 `Principal` のように、トークンを注入することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:122
#, fuzzy
msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`. The latter will only use the JWK-formatted keys which are part of a JWK set. The former - can also work with PEM keys."
msgstr "`quarkus-smallrye-jwt` は `quarkus-oidc` よりも多くのキーフォーマットをサポートしています。後者は、JWKセットの一部であるJWKフォーマットの鍵のみを使用する。前者では、PEMキーも使用可能です。"

#. type: Plain text
#: upstream/_guides/security.adoc:124
#, fuzzy
msgid "`quarkus-smallrye-jwt` can handle locally not only signed but also inner-signed-and-encrypted or only encrypted tokens. In fact `quarkus-oidc` and `quarkus-elytron-security-oauth2` can verify such tokens too but only by treating them as opaque tokens and verifying them via the remote introspection."
msgstr "`quarkus-smallrye-jwt` は、署名されたトークンだけでなく、内部署名と暗号化されたトークン、または暗号化されたトークンだけをローカルに扱うことができます。実際、 `quarkus-oidc` と `quarkus-elytron-security-oauth2` はそのようなトークンも検証できますが、それらを不透明なトークンとして扱い、リモートイントロスペクションを介して検証することによってのみ可能です。"

#. type: Plain text
#: upstream/_guides/security.adoc:126
#, fuzzy
msgid "`quarkus-elytron-security-oauth2` is the best choice if you need a light weight library for the remote introspection of either opaque or JWT tokens."
msgstr "`quarkus-elytron-security-oauth2` は、不透明なトークンやJWTトークンをリモートでイントロスペクションするための軽量なライブラリが必要な場合に最適な選択肢です。"

#. type: Plain text
#: upstream/_guides/security.adoc:128
#, fuzzy
msgid "Note that a choice of using the opaque versus JWT token format is often driven by the architectural considerations. Opaque tokens are usually much shorter than JWT tokens but they require maintaining most of the token associated state in the provider database - the opaque tokens are effectively the database pointers. JWT tokens are significantly longer than the opaque tokens - but the providers are effectively delegating storing most of the token associated state to the client by storing it as the token claims and either signing and/or encrypting them."
msgstr "不透明なトークンとJWTトークンのどちらを使用するかは、多くの場合、アーキテクチャ上の考慮事項によって決定されることに注意してください。不透明なトークンは、通常、JWT トークンよりもはるかに短いですが、トークンに関連する状態のほとんどをプロバイダのデータベースで維持する必要があります。JWT トークンは、不透明なトークンよりもかなり長いですが、プロバイダは、トークンに関連する状態のほとんどを、トークン・クレームとして保存し、それらに署名や暗号を施すことで、事実上、クライアントに保存を委ねています。"

#. type: Plain text
#: upstream/_guides/security.adoc:130
#, fuzzy
msgid "Below is a summary of the options."
msgstr "以下、選択肢の概要をご紹介します。"

#. type: Table
#: upstream/_guides/security.adoc:132
#, no-wrap
msgid "quarkus-oidc"
msgstr "quarkus-oidc"

#. type: Table
#: upstream/_guides/security.adoc:132
#, no-wrap
msgid "quarkus-smallrye-jwt"
msgstr "quarkus-smallrye-jwt"

#. type: Table
#: upstream/_guides/security.adoc:134
#, no-wrap
msgid "quarkus-elytron-security-oauth2"
msgstr "quarkus-elytron-security-oauth2"

#. type: Table
#: upstream/_guides/security.adoc:135
#, fuzzy, no-wrap
msgid "Bearer JWT verification is required"
msgstr "Bearer JWTの検証が必要です。"

#. type: Table
#: upstream/_guides/security.adoc:136
#, fuzzy, no-wrap
msgid "Local Verification or Introspection"
msgstr "現地検証または内観"

#. type: Table
#: upstream/_guides/security.adoc:137 upstream/_guides/security.adoc:173
#, no-wrap
msgid "Local Verification"
msgstr "ローカル検証"

#. type: Table
#: upstream/_guides/security.adoc:138 upstream/_guides/security.adoc:140
#: upstream/_guides/security.adoc:142 upstream/_guides/security.adoc:172
#: upstream/_guides/security.adoc:174
#, no-wrap
msgid "Introspection"
msgstr "イントロスペクション"

#. type: Table
#: upstream/_guides/security.adoc:139
#, fuzzy, no-wrap
msgid "Bearer Opaque Token verification is required"
msgstr "Bearer Opaque Tokenの検証が必要です。"

#. type: Table
#: upstream/_guides/security.adoc:141 upstream/_guides/security.adoc:146
#: upstream/_guides/security.adoc:154 upstream/_guides/security.adoc:157
#: upstream/_guides/security.adoc:158 upstream/_guides/security.adoc:161
#: upstream/_guides/security.adoc:162 upstream/_guides/security.adoc:165
#: upstream/_guides/security.adoc:166 upstream/_guides/security.adoc:168
#: upstream/_guides/security.adoc:170
#, fuzzy, no-wrap
msgid "No"
msgstr "いいえ"

#. type: Table
#: upstream/_guides/security.adoc:143
#, fuzzy, no-wrap
msgid "Refreshing JsonWebKey set for verifying JWT tokens"
msgstr "JWTトークンを検証するためのJsonWebKeyセットの更新"

#. type: Table
#: upstream/_guides/security.adoc:144 upstream/_guides/security.adoc:145
#: upstream/_guides/security.adoc:148 upstream/_guides/security.adoc:149
#: upstream/_guides/security.adoc:150 upstream/_guides/security.adoc:152
#: upstream/_guides/security.adoc:153 upstream/_guides/security.adoc:156
#: upstream/_guides/security.adoc:160 upstream/_guides/security.adoc:164
#: upstream/_guides/security.adoc:169
#, fuzzy, no-wrap
msgid "Yes"
msgstr "はい。"

#. type: Table
#: upstream/_guides/security.adoc:147
#, no-wrap
msgid "Represent token as Principal"
msgstr "トークンをプリンシパルとして表現"

#. type: Table
#: upstream/_guides/security.adoc:151
#, fuzzy, no-wrap
msgid "Inject JWT as MP JWT JsonWebToken"
msgstr "MP JWT JsonWebTokenとしてJWTをインジェクトする。"

#. type: Table
#: upstream/_guides/security.adoc:155
#, no-wrap
msgid "Authorization Code Flow"
msgstr "認可コードフロー"

#. type: Table
#: upstream/_guides/security.adoc:159
#, no-wrap
msgid "Multi-tenancy"
msgstr "マルチテナンシー"

#. type: Table
#: upstream/_guides/security.adoc:163
#, fuzzy, no-wrap
msgid "UserInfo support"
msgstr "UserInfoサポート"

#. type: Table
#: upstream/_guides/security.adoc:167
#, fuzzy, no-wrap
msgid "Pem Key format support"
msgstr "Pemキーフォーマットのサポート"

#. type: Table
#: upstream/_guides/security.adoc:171
#, fuzzy, no-wrap
msgid "InnerSigned/Encrypted or Encrypted tokens"
msgstr "InnerSigned/EncryptedまたはEncryptedトークン"

#. type: Title ===
#: upstream/_guides/security.adoc:176
#, no-wrap
msgid "LDAP"
msgstr "LDAP"

#. type: Plain text
#: upstream/_guides/security.adoc:179
msgid "Please see the link:security-ldap[Authenticate with LDAP] guide for more information about LDAP authentication mechanism."
msgstr "LDAP認証メカニズムの詳細については、 link:security-ldap[Authenticate with LDAP]ガイドを参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:181
#, no-wrap
msgid "Identity Providers"
msgstr "アイデンティティ・プロバイダー"

#. type: Plain text
#: upstream/_guides/security.adoc:184
msgid "`IdentityProvider` converts the authentication credentials provided by `HttpAuthenticationMechanism` to `SecurityIdentity`."
msgstr "`IdentityProvider`  は、 `HttpAuthenticationMechanism`  が提供する認証資格情報を `SecurityIdentity`  に変換します。"

#. type: Plain text
#: upstream/_guides/security.adoc:187
msgid "Some extensions such as `OIDC`, `OAuth2`, `SmallRye JWT`, `LDAP` have the inlined `IdentityProvider` implementations which are specific to the supported authentication flow.  For example, `quarkus-oidc` uses its own `IdentityProvider` to convert a token to `SecurityIdentity`."
msgstr "`OIDC` , `OAuth2` , `SmallRye JWT` , `LDAP`  などのエクステンションには、サポートされている認証フローに固有の `IdentityProvider` のインライン実装があります。例えば、 `quarkus-oidc` は独自の `IdentityProvider` を使用してトークンを `SecurityIdentity` に変換します。"

#. type: Plain text
#: upstream/_guides/security.adoc:189
msgid "If you use `Basic` or `Form` HTTP-based authentication then you have to add an `IdentityProvider` which can convert a user name and password to `SecurityIdentity`."
msgstr "`Basic` または `Form` HTTP ベースの認証を使用している場合は、ユーザー名とパスワードを `SecurityIdentity` に変換できる `IdentityProvider` を追加する必要があります。"

#. type: Plain text
#: upstream/_guides/security.adoc:192
msgid "See link:security-jpa[JPA IdentityProvider] and link:security-jdbc[JDBC IdentityProvider] for more information.  You can also use link:security-testing#configuring-user-information[User Properties IdentityProvider] for testing."
msgstr "詳細は、 link:security-jpa[JPA IdentityProvider]および link:security-jdbc[JDBC IdentityProvider]を参照してください。また、テストに link:security-testing#configuring-user-information[User Properties IdentityProvider を]使用することもできます。"

#. type: Title ==
#: upstream/_guides/security.adoc:193
#, no-wrap
msgid "Combining Authentication Mechanisms"
msgstr "認証メカニズムの組み合わせ"

#. type: Plain text
#: upstream/_guides/security.adoc:197
msgid "One can combine multiple authentication mechanisms if they get the authentication credentials from the different sources.  For example, combining built-in `Basic` and `quarkus-oidc` `Bearer` authentication mechanisms is allowed, but combining `quarkus-oidc` `Bearer` and `smallrye-jwt` authentication mechanisms is not allowed because both will attempt to verify the token extracted from the HTTP `Authorization Bearer` scheme."
msgstr "異なるソースから認証証明書を取得する場合、複数の認証メカニズムを組み合わせることができます。例えば、組み込みの `Basic`  と `Bearer`   `quarkus-oidc`  認証機構を組み合わせることはできますが、 `quarkus-oidc`   `Bearer`  と `smallrye-jwt`  認証機構を組み合わせることはできません。なぜなら、両方とも HTTP `Authorization Bearer`  スキームから抽出されたトークンを検証しようとするからです。"

#. type: Title ==
#: upstream/_guides/security.adoc:198
#, no-wrap
msgid "Proactive Authentication"
msgstr "プロアクティブ認証"

#. type: Plain text
#: upstream/_guides/security.adoc:202
msgid "By default, Quarkus does what we call proactive authentication. This means that if an incoming request has a credential then that request will always be authenticated (even if the target page does not require authentication)."
msgstr "デフォルトでは、Quarkusはプロアクティブ認証と呼ばれる認証を行います。これは、受信したリクエストにクレデンシャルがある場合、そのリクエストは常に認証されます(ターゲットページが認証を必要としない場合でも)。"

#. type: Plain text
#: upstream/_guides/security.adoc:204
msgid "See link:security-built-in-authentication#proactive-authentication[Proactive Authentication] for more information."
msgstr "詳細については、 link:security-built-in-authentication#proactive-authentication[プロアクティブ認証]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:205
#, no-wrap
msgid "Authorization"
msgstr "認可"

#. type: Plain text
#: upstream/_guides/security.adoc:208
msgid "See link:security-authorization[Security Authorization] for more information about Role Based Access Control and other authorization options."
msgstr "役割ベースのアクセス制御およびその他の認可オプションの詳細については、 link:security-authorization[セキュリティー認可]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:209
#, no-wrap
msgid "Customization and other useful tips"
msgstr "カスタマイズやその他の便利なヒント"

#. type: Plain text
#: upstream/_guides/security.adoc:212
msgid "Quarkus Security is highly customizable. One can register custom ``HttpAuthenticationMechanism``s, ``IdentityProvider``s and ``SecurityidentityAugmentor``s."
msgstr "Quarkus Securityは、高度なカスタマイズが可能です。カスタム `HttpAuthenticationMechanism` 、 `IdentityProvider` 、 `SecurityidentityAugmentor` を登録することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:214
msgid "See link:security-customization[Security Customization] for more information about customizing Quarkus Security and other useful tips about the reactive security, registering the security providers, etc."
msgstr "Quarkus Securityのカスタマイズの詳細や、リアクティブセキュリティー、セキュリティープロバイダーの登録などの便利なヒントについては、セキュリティーの link:security-customization[カスタマイズ]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:215
#, no-wrap
msgid "Secure connections with SSL"
msgstr "SSLによる安全な接続"

#. type: Plain text
#: upstream/_guides/security.adoc:218
msgid "See the link:http-reference#ssl[Supporting secure connections with SSL] guide for more information."
msgstr "詳細については、 link:http-reference#ssl[SSL による安全な接続のサポート]ガイドを参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:219
#, no-wrap
msgid "Cross-Origin Resource Sharing"
msgstr "クロスオリジンリソース共有"

#. type: Plain text
#: upstream/_guides/security.adoc:222
msgid "If you plan to make your Quarkus application accessible to another application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the link:http-reference#cors-filter[HTTP CORS documentation] for more information."
msgstr "Quarkusアプリケーションを別のドメインで実行している別のアプリケーションにアクセスできるようにする場合は、CORS(Cross-Origin Resource Sharing)を設定する必要があります。詳細については、 link:http-reference#cors-filter[HTTP CORSのドキュメント]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:223
#, no-wrap
msgid "SameSite cookies"
msgstr "SameSite クッキー"

#. type: Plain text
#: upstream/_guides/security.adoc:226
msgid "Please see link:vertx#same-site-cookie[SameSite cookies] for information about adding a https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies set by a Quarkus endpoint."
msgstr "Quarkusエンドポイントによって設定されたCookieに link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] Cookieプロパティーを追加する方法については、 link:vertx#same-site-cookie[SameSite Cookie] を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:227
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/security.adoc:230
msgid "See link:security-testing[Security Testing] for more information about testing Quarkus Security."
msgstr "Quarkus Securityのテストの詳細については、 link:security-testing[セキュリティーのテスト]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:231
#, no-wrap
msgid "Secret Engines"
msgstr "シークレットエンジン"

#. type: Title ===
#: upstream/_guides/security.adoc:232
#, no-wrap
msgid "Vault"
msgstr "Vault"

#. type: Plain text
#: upstream/_guides/security.adoc:234
msgid "Quarkus provides a very comprehensive HashiCorp Vault support, please see the link:vault[Quarkus and HashiCorp Vault] documentation for more information."
msgstr "Quarkusは非常に包括的な HashiCorp Vault のサポートを提供しています。詳しくは link:vault[Quarkus and HashiCorp Vault] のドキュメントを参照下さい。"

#. type: Title ==
#: upstream/_guides/security.adoc:235
#, no-wrap
msgid "National Vulnerability Database"
msgstr "National Vulnerability Database"

#. type: Plain text
#: upstream/_guides/security.adoc:240
msgid "Most of Quarkus tags have been registered in link:https://nvd.nist.gov[National Vulnerability Database] (NVD) using a Common Platform Enumeration (CPE) name format.  All registered Quarkus CPE names can be found using link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[this search query].  If a Quarkus tag represented by the given CPE name entry is affected by some CVE then you'll be able to follow a provided link to that CVE."
msgstr "ほとんどのQuarkusタグは、Common Platform Enumeration (CPE)名の形式で link:https://nvd.nist.gov[National Vulnerability Database](NVD)に登録されています。登録されているすべてのQuarkusのCPE名は、 link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&amp;keyword=quarkus[この検索クエリ]を使用して見つけることができます。指定されたCPE名のエントリで表されるQuarkusタグが何らかのCVEの影響を受けている場合、そのCVEへのリンクを辿ることができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:242
msgid "We will be asking the NVD CPE team to update the list as well as link Quarkus CPE name entries with the related CVEs on a regular basis.  If you work with a plugin like OWASP plugin which is using NVD feeds to detect the vulnerabilities at the application build time and you see a false positive reported then please re-open link:https://github.com/quarkusio/quarkus/issues/2611[this issue] and provide the details."
msgstr "NVD CPEチームには、リストの更新と、Quarkus CPE名のエントリと関連するCVEとのリンクを定期的に行うよう依頼しています。OWASPプラグインのように、アプリケーションのビルド時にNVDフィードを使用して脆弱性を検出するプラグインを使用していて、誤検出が報告された場合は、 link:https://github.com/quarkusio/quarkus/issues/2611[この課題]を再度オープンし、詳細をご連絡ください。"
