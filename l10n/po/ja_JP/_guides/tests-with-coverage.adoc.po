# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-08-04 13:18+0000\n"
"PO-Revision-Date: 2021-04-30 16:51+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/tests-with-coverage.adoc:7
#, no-wrap
msgid "Quarkus - Measuring the coverage of your tests"
msgstr "Quarkus - テストのカバレッジを測定"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:23
msgid "Learn how to measure the test coverage of your application. This guide covers:"
msgstr "アプリケーションのテストカバレッジを測定する方法をご紹介します。このガイドでは、以下の内容をカバーしています。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:25
msgid "Measuring the coverage of your Unit Tests"
msgstr "ユニットテストのカバレッジを測定する"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:26
msgid "Measuring the coverage of your Integration Tests"
msgstr "統合テストのカバレッジを測定する"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:27
msgid "Separating the execution of your Unit Tests and Integration Tests"
msgstr "ユニットテストと統合テストの実行を分離する"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:28
msgid "Consolidating the coverage for all your tests"
msgstr "すべてのテストのカバレッジを統合"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:30
msgid "Please note that code coverage is not supported in native mode."
msgstr "ネイティブモードではコードカバレッジはサポートされていませんのでご注意ください。"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:31
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:34
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:36
msgid "less than 15 minutes"
msgstr "15分未満"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:37
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:38
#, fuzzy
#| msgid "JDK 1.8+ installed with JAVA_HOME configured appropriately"
msgid "JDK 11+ installed with JAVA_HOME configured appropriately"
msgstr "JAVA_HOMEが適切に設定されたJDK 1.8+がインストールされていること"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:39
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:40
msgid "Having completed the link:getting-started-testing[Testing your application guide]"
msgstr "link:https://quarkus.io/guides/getting-started-testing[アプリケーションガイドのテスト] が完了済であること"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:41
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:45
msgid "The application built in this guide is just a JAX-RS endpoint (hello world) that relies on dependency injection to use a service.  The service will be tested with JUnit 5 and the endpoint will be annotated via a `@QuarkusTest` annotation."
msgstr "このガイドで構築されたアプリケーションは、サービスを使用するために依存性インジェクションに依存した JAX-RS エンドポイント (hello world) に過ぎません。サービスは JUnit 5 でテストされ、エンドポイントには `@QuarkusTest` のアノテーションが付けられます。"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:46
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:50
msgid "We recommend that you follow the instructions in the next sections and create the application step by step. However, you can go right to the completed example.  Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。しかし、完成した例にすぐに進むことができます。Git リポジトリをクローンします: `git clone {quickstarts-clone-url}` 、または {quickstarts-archive-url}[archive] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:52
msgid "The solution is located in the `tests-with-coverage-quickstart` {quickstarts-tree-url}/tests-with-coverage-quickstart[directory]."
msgstr "ソリューションは `tests-with-coverage-quickstart` {quickstarts-tree-url}/tests-with-coverage-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:53
#, no-wrap
msgid "Starting from a simple project and two tests"
msgstr "簡単なプロジェクトと2つのテストから始める"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:56
msgid "Let's start from an empty application created with the Quarkus Maven plugin:"
msgstr "Quarkus Mavenプラグインで作成した空のアプリケーションから始めてみましょう。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:63
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=tests-with-coverage-quickstart\n"
"cd tests-with-coverage-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:66
msgid "Now we'll be adding all the elements necessary to have an application that is properly covered with tests."
msgstr "ここで、アプリケーションをテストで適切にカバーするために必要な要素をすべて追加していきます。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:68
msgid "First, an application serving a hello endpoint:"
msgstr "まず、helloエンドポイントを提供するアプリケーション:"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:72
#: upstream/_guides/tests-with-coverage.adoc:110
#: upstream/_guides/tests-with-coverage.adoc:128
#, no-wrap
msgid "package org.acme.testcoverage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:79
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:82
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:84
#, no-wrap
msgid "    private final GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:89
#, no-wrap
msgid ""
"    @Inject\n"
"    public GreetingResource(GreetingService service) {\n"
"        this.service = service;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:96
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    public String greeting(@PathParam(\"name\") String name) {\n"
"        return service.greeting(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:103
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:106
msgid "This endpoint uses a greeting service:"
msgstr "このエンドポイントは、グリーティングサービスを利用しています。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:112
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:115
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:119
#, no-wrap
msgid ""
"    public String greeting(String name) {\n"
"        return \"hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:121
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:124
msgid "The project will also need a test:"
msgstr "プロジェクトにはテストも必要です。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:132
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Tag;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:134
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:137
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:140
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:149
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:161
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:163
#, no-wrap
msgid "Setting up Jacoco"
msgstr "Jacocoの設定"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:166
msgid "Now we need to add Jacoco to our project. To do this we need to add the following to the `pom.xml` dependencies section:"
msgstr "次に、Jacocoをプロジェクトに追加する必要があります。そのためには、 `pom.xml` dependenciesセクションに以下を追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:174
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-jacoco</artifactId>\n"
"  <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:178
msgid "This Quarkus extension takes care of everything that would usually be done via the Jacoco maven plugin, so no additional config is required."
msgstr "このQuarkusのエクステンションは、通常はJacoco mavenプラグインで行われることをすべて行いますので、追加の設定は必要ありません。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:181
msgid "Using both the extension and the plugin requires special configuration, if you add both you will get lots of errors about classes already being instrumented. The configuration needed is detailed below."
msgstr "エクステンションとプラグインの両方を使用するには、特別な設定が必要です。両方を追加すると、すでにインスツルメンテーションされているクラスに関する多くのエラーが発生します。必要な設定の詳細は以下のとおりです。"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:182
#, no-wrap
msgid "Running the tests with coverage"
msgstr "カバレッジ付きテストの実行"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:186
msgid "Run `mvn verify`, the tests will be run and the results will end up in `target/jacoco-reports`. This is all that is needed, the `quarkus-jacoco` extension allows Jacoco to just work out of the box."
msgstr "`mvn verify` を実行すると、テストが実行され、その結果が `target/jacoco-reports` に反映されます。必要なのはこれだけで、 `quarkus-jacoco` のエクステンションを使えば、Jacoco はすぐに動作します。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:188
msgid "There are some config options that affect this:"
msgstr "これにはいくつかの設定オプションがあります。"

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:191
#, no-wrap
msgid "Coverage for tests not using @QuarkusTest"
msgstr "QuarkusTestを使用していないテストのカバレッジ"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:195
msgid "The Quarkus automatic Jacoco config will only work for tests that are annotated with `@QuarkusTest`. If you want to check the coverage of other tests as well then you will need to fall back to the Jacoco maven plugin."
msgstr "Quarkusの自動Jacoco設定は、 `@QuarkusTest` でアノテーションされたテストに対してのみ機能します。他のテストのカバレッジもチェックしたい場合は、Jacoco mavenプラグインを利用する必要があります。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:197
msgid "In addition to including the `quarkus-jacoco` extension in your pom you will need the following config:"
msgstr "`quarkus-jacoco` エクステンションをpomに含めるのに加えて、以下のような設定が必要になります。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:231
#, no-wrap
msgid ""
"<project>\n"
"    <build>\n"
"        <plugins>\n"
"            ...\n"
"          <plugin>\n"
"            <groupId>org.jacoco</groupId>\n"
"            <artifactId>jacoco-maven-plugin</artifactId>\n"
"            <executions>\n"
"              <execution>\n"
"                <id>default-prepare-agent</id>\n"
"                <goals>\n"
"                  <goal>prepare-agent</goal>\n"
"                </goals>\n"
"                <configuration>\n"
"                  <exclClassLoaders>*QuarkusClassLoader</exclClassLoaders>  <1>\n"
"                </configuration>\n"
"              </execution>\n"
"              <execution>\n"
"                <id>default-prepare-agent-integration</id> <2>\n"
"                <goals>\n"
"                  <goal>prepare-agent-integration</goal>\n"
"                </goals>\n"
"                <configuration>\n"
"                  <exclClassLoaders>*QuarkusClassLoader</exclClassLoaders>\n"
"                </configuration>\n"
"              </execution>\n"
"            </executions>\n"
"          </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:233
msgid "This config tells it to ignore `@QuarkusTest` related classes, as they are loaded by `QuarkusClassLoader`"
msgstr "この設定では、 `@QuarkusTest` 関連のクラスを無視するようになっています。これらのクラスは `QuarkusClassLoader` で読み込まれる為です。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:234
msgid "This is only needed if you are using Failsafe to run integration tests"
msgstr "これは、Failsafeを使って統合テストを実行する場合にのみ必要です。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:237
msgid "This config will only work if at least one `@QuarkusTest` is being run. If you are not using `@QuarkusTest` then you can simply use the Jacoco plugin in the standard manner with no additional config."
msgstr "この設定は、少なくとも1つの `@QuarkusTest` が実行されている場合にのみ機能します。 `@QuarkusTest` を使用していない場合は、追加の設定をすることなく、通常の方法で Jacoco プラグインを使用することができます。"

#. type: Title ===
#: upstream/_guides/tests-with-coverage.adoc:238
#, fuzzy, no-wrap
#| msgid "Measuring the coverage of your Integration Tests"
msgid "Coverage for Integration Tests"
msgstr "統合テストのカバレッジを測定する"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:241
#, fuzzy
msgid "To get code coverage data from integration tests, Jacoco needs to be configured, and your `@QuarkusIntegrationTest` classes must be run using a jar package,"
msgstr "統合テストからコードカバレッジデータを取得するには、Jacocoの設定が必要で、 `@QuarkusIntegrationTest` のクラスがjarパッケージを使って実行されなければなりません。"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:244
#, fuzzy
msgid "In the `pom.xml`, you can add the following plugin configuration for Jacoco. This will append integration test data into the same destination file as unit tests, re-build the jacoco report after the integration tests are complete, and thus produce a comprehensive code-coverage report."
msgstr "`pom.xml` で、Jacocoのプラグイン設定を以下のように追加します。これにより、統合テストのデータをユニットテストと同じ保存先のファイルに追加し、統合テストが完了した後にjacocoレポートを再構築することで、包括的なコードカバレッジレポートを作成します。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:282
#, no-wrap
msgid ""
"<build>\n"
"    ...\n"
"    <plugins>\n"
"        ...\n"
"        <plugin>\n"
"            <groupId>org.jacoco</groupId>\n"
"            <artifactId>jacoco-maven-plugin</artifactId>\n"
"            <executions>\n"
"                <execution>\n"
"                    <id>default-prepare-agent-integration</id>\n"
"                    <goals>\n"
"                        <goal>prepare-agent-integration</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                        <destFile>${project.build.directory}/jacoco-quarkus.exec</destFile>\n"
"                        <append>true</append>\n"
"                        <exclClassLoaders>*QuarkusClassLoader</exclClassLoaders>\n"
"                    </configuration>\n"
"                </execution>\n"
"                <execution>\n"
"                    <id>report-it</id>\n"
"                    <phase>post-integration-test</phase>\n"
"                    <goals>\n"
"                        <goal>report</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                        <dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>\n"
"                        <outputDirectory>${project.build.directory}/jacoco-report</outputDirectory>\n"
"                    </configuration>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        ...\n"
"    </plugins>\n"
"    ...\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:285
#, fuzzy
msgid "In order to run the integration tests as a jar with the Jacoco agent, add the following to your `pom.xml`."
msgstr "統合テストをJacocoエージェントのjarとして実行するためには、 `pom.xml` に以下を追加します。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:314
#, no-wrap
msgid ""
"<build>\n"
"    ...\n"
"    <plugins>\n"
"        ...\n"
"        <plugin>\n"
"            <artifactId>maven-failsafe-plugin</artifactId>\n"
"            <version>${surefire-plugin.version}</version>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>integration-test</goal>\n"
"                        <goal>verify</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                        <systemPropertyVariables>\n"
"                            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                            <maven.home>${maven.home}</maven.home>\n"
"                            <quarkus.test.arg-line>${argLine}</quarkus.test.arg-line>\n"
"                        </systemPropertyVariables>\n"
"                    </configuration>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        ...\n"
"    </plugins>\n"
"    ...\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:318
msgid "Sharing the same value for `quarkus.test.arg-line` might break integration test runs that test different types of Quarkus artifacts. In such cases, the use of maven profiles is advised."
msgstr ""

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:319
#, fuzzy, no-wrap
msgid "Setting coverage thresholds for the Maven build"
msgstr "Mavenのビルドにカバレッジのしきい値を設定する"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:322
#, fuzzy
msgid "You can set thresholds for code coverage using the Jacoco Maven plugin. Note the element `<dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>`. You must set it matching your choice for `quarkus.jacoco.data-file`."
msgstr "コードカバレッジのしきい値は、Jacoco Mavenプラグインを使って設定することができます。 `&amp;lt;dataFile&amp;gt;${project.build.directory}/jacoco-quarkus.exec&amp;lt;/dataFile&amp;gt;` という要素に注目してください。 `quarkus.jacoco.data-file` の選択に合わせて設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/tests-with-coverage.adoc:367
#, no-wrap
msgid ""
"<build>\n"
"    ...\n"
"    <plugins>\n"
"        ...\n"
"        <plugin>\n"
"            <groupId>org.jacoco</groupId>\n"
"            <artifactId>jacoco-maven-plugin</artifactId>\n"
"            <version>${jacoco.version}</version>\n"
"            <executions>\n"
"                <execution>\n"
"                    <id>jacoco-check</id>\n"
"                    <goals>\n"
"                        <goal>check</goal>\n"
"                    </goals>\n"
"                    <phase>test</phase>\n"
"                    <configuration>\n"
"                        <dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>\n"
"                        <rules>\n"
"                            <rule>\n"
"                                <element>BUNDLE</element>\n"
"                                <limits>\n"
"                                    <limit>\n"
"                                        <counter>LINE</counter>\n"
"                                        <value>COVEREDRATIO</value>\n"
"                                        <minimum>0.8</minimum>\n"
"                                    </limit>\n"
"                                    <limit>\n"
"                                        <counter>BRANCH</counter>\n"
"                                        <value>COVEREDRATIO</value>\n"
"                                        <minimum>0.72</minimum>\n"
"                                    </limit>\n"
"                                </limits>\n"
"                            </rule>\n"
"                        </rules>\n"
"                    </configuration>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        ...\n"
"    </plugins>\n"
"    ...\n"
"</build>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/tests-with-coverage.adoc:369
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_guides/tests-with-coverage.adoc:372
msgid "You now have all the information you need to study the coverage of your tests! But remember, some code that is not covered is certainly not well tested. But some code that is covered is not necessarily *well* tested. Make sure to write good tests!"
msgstr "これで、テストのカバレッジを研究するために必要なすべての情報を手に入れることができました!しかし、カバーされていないコードは、確かに十分にテストされていないものがありますが、カバーされているコードの中には、必ずしも *十分に* テストされていないものもあることを覚えておいてください。良いテストを書くようにしましょう!"

#~ msgid "Because Quarkus uses class file transformation it is not possible to use online transformation with the Jacoco agent.  Instead we need to use offline transformation."
#~ msgstr "Quarkusはクラスファイル変換を使用しているため、Jacocoエージェントでオンライン変換を使用することはできません。代わりにオフライン変換を使用する必要があります。"

#~ msgid "It also requires a small change in the Surefire configuration. Note below that we specified `jacoco-agent.destfile` as a system property in the default case (unit tests) and for the integration tests."
#~ msgstr "また、Surefireの設定を少し変更する必要があります。デフォルトの場合(ユニットテスト)と統合テストでは、システムのプロパティーとして `jacoco-agent.destfile` を指定していることに注意してください。"

#, fuzzy
#~ msgid "But also a `@QuarkusTest`:"
#~ msgstr "しかし、また `@QuarkusTest` ."

#, fuzzy
#~ msgid "The first one will be our example of a Unit Test and the second one will be our example of Integration Test."
#~ msgstr "最初のものはユニットテストの例で、2番目のものはインテグレーションテストの例です。"

#, fuzzy
#~ msgid "Separating executions of Unit Tests and Integration Tests"
#~ msgstr "ユニットテストとインテグレーションテストの実行を分ける"

#, fuzzy
#~ msgid "You may want to consider that JUnits and QuarkusTests are two different kind of tests and that they deserve to be separated. This way you could run them separately, in different cases or some more often than the others.  In order to do so, we'll use a feature of JUnit 5 that allows us to tag some tests. Let's tag `GreetingResourceTest.java` and specify that it is an Integration Test:"
#~ msgstr "JUnitsとQuarkusTestsは2つの異なる種類のテストであり、分離するのがふさわしいと考えるかもしれません。そうすれば、別々のケースで別々に実行したり、他のケースよりも頻繁に実行したりすることができます。そのためには、JUnit 5 の機能を使ってテストにタグをつけることができます。 `GreetingResourceTest.java` にタグを付けて、統合テストであることを指定してみましょう。"

#, fuzzy
#~ msgid "We're now able to distinguish unit tests and integration tests. Now, let's bind them to different Maven lifecycle phases. Let's use surefire to bind unit tests to the *test* phase and the integration tests to the *integration-test* phase."
#~ msgstr "これで、ユニットテストと統合テストを区別できるようになりました。では、それらを異なる Maven ライフサイクルフェーズにバインドしてみましょう。ユニットテストを *テスト* フェーズに、統合テストを *統合* テストフェーズにバインドするためにsurefireを使用してみましょう。"

#, fuzzy
#~ msgid "This way, the `QuarkusTest` instances will be executed as part of the `integration-test` build phase while the other JUnit tests will still be ran during the `test` phase.  You can run all the tests with the command `./mvnw clean verify` (and you will notice that two tests are ran in different phases)."
#~ msgstr "このようにして、 `QuarkusTest` インスタンスは `integration-test` のビルドフェーズの一部として実行され、他の JUnit テストは `test` のフェーズで実行されます。 `./mvnw clean verify` コマンドですべてのテストを実行することができます (2 つのテストが異なるフェーズで実行されていることに気づくでしょう)。"

#~ msgid "Measuring the coverage of JUnit tests using JaCoCo"
#~ msgstr "JaCoCo を使って JUnit テストのカバレッジを測定する"

#, fuzzy
#~ msgid "It is now time to introduce JaCoCo to measure the coverage. The straightforward way to add JaCoCo to your build is to reference the plugin in your `pom.xml`."
#~ msgstr "いよいよカバレッジを計測するJaCoCoを導入する時が来ました。ビルドに JaCoCo を追加する簡単な方法は、 `pom.xml` ."

#, fuzzy
#~ msgid "If you run `./mvnw clean test` the coverage information will be collected during the execution of the unit tests in the file `jacoco.exec`."
#~ msgstr "`./mvnw clean test` を実行した場合、カバレッジ情報は、 `jacoco.exec` のファイル内のユニットテストの実行中に収集されます。"

#~ msgid "Measuring separately the coverage of each test type"
#~ msgstr "各テストタイプのカバレッジを個別に測定"

#, fuzzy
#~ msgid "It is not strictly necessary, but let's distinguish the coverage brought by each test type. To do so, we'll just output the coverage info in two different files, one in `jacoco-ut.exec` and one in `jacoco-it.exec`.  We also need to generate a separate report for each test execution. Let's adjust the Jacoco configuration for that:"
#~ msgstr "厳密には必要ではありませんが、テストタイプごとにカバレッジを区別してみましょう。そのためには、カバレッジ情報を `jacoco-ut.exec` と `jacoco-it.exec` の 2 つの異なるファイルに出力するだけです。また、テスト実行ごとに個別のレポートを生成する必要があります。そのために Jacoco の設定を調整してみましょう。"

#~ msgid "The coverage does not seem to correspond to the reality"
#~ msgstr "カバレッジが現実と一致していないように見える"

#, fuzzy
#~ msgid "You can now run the tests: `./mvnw clean verify` As explained earlier, it will run the unit tests first, then the integration tests. And finally, it will generate two separate reports. First a report of the coverage of the unit tests in `target/site/jacoco-ut` then a report of the coverage of the integration tests in `target/site/jacoco-it`."
#~ msgstr "これでテストを実行することができます。 `./mvnw clean verify` 先ほど説明したように、最初にユニットテストを実行し、次に統合テストを実行します。そして最後に、2つの別々のレポートを生成します。最初は `target/site/jacoco-ut` にあるユニットテストのカバレッジのレポートで、次に `target/site/jacoco-it` にある統合テストのカバレッジのレポートです。"

#, fuzzy
#~ msgid "Given the content of `GreetingResourceTest`, `GreetingResource` should have been covered. But when we open the report `target/site/jacoco-it/index.html`, the class `GreetingResource` is reported with 0% of coverage. But the fact that `GreetingService` is reported as covered shows that the test execution was actually recorded. How come?"
#~ msgstr "`GreetingResourceTest` の内容を考えると、 `GreetingResource` はカバーされているはずです。しかし、レポート `target/site/jacoco-it/index.html` を開くと、クラス `GreetingResource` は 0% のカバレッジで報告されています。しかし、 `GreetingService` がカバレッジされていると報告されているという事実は、実際にテストの実行が記録されていることを示しています。なぜでしょうか?"

#~ msgid "During the report generation, you may have noticed a warning:"
#~ msgstr "レポート生成中に警告が表示されることがあります。"

#, fuzzy
#~ msgid "It seems that Quarkus and JaCoCo step on each other's toes. What happens is that Quarkus transforms the JAX-RS resources (and also the Panache files).  You may have noticed that `GreetingResource` was not written in the simplest way like:"
#~ msgstr "QuarkusとJaCoCoがお互いに踏ん張っているようです。何が起こるかというと、QuarkusはJAX-RSのリソース(Panacheファイルも)を変換します。 `GreetingResource` のようなシンプルな書き方をしていなかったことにお気づきの方もいるかもしれません。"

#, fuzzy
#~ msgid "Above, the constructor is implicit and we use injection to have an instance of `GreetingService`. Note that, with this code relying on an implicit constructor, the coverage would have been reported properly by JaCoCo.  Instead, we introduced a constructor based injection:"
#~ msgstr "上記では、コンストラクタが暗黙的であり、インジェクションを使用して `GreetingService` のインスタンスを作成しています。このコードは暗黙のコンストラクタに依存しているので、カバレッジは JaCoCo によって適切に報告されていることに注意してください。その代わりに、コンストラクタベースのインジェクションを導入しました。"

#, fuzzy
#~ msgid "Some might say that this approach is preferable since the field can be *final* like this. Anyway, in some cases you might need an explicit constructor. And, in that case, the coverage is not reported properly by JaCoCo.  This is because Quarkus generates a constructor without any parameter and does some bytecode manipulations in order to add it to the class. That is what happened here, just before the execution of the integration tests:"
#~ msgstr "このようにフィールドを *最終的な* ものにすることができるので、この方法が望ましいという意見もあるかもしれません。いずれにしても、場合によっては明示的なコンストラクタが必要になるかもしれません。そして、その場合、JaCoCoではカバレッジが正しく報告されません。これは、Quarkusがパラメーターなしでコンストラクタを生成し、それをクラスに追加するためにバイトコード操作を行うからです。ここでは、統合テストの実行直前にそれが起こっています。"

#, fuzzy
#~ msgid "As a consequence, JaCoCo does not recognize the classes when it wants to create its report. But wait... there is a solution."
#~ msgstr "結果として、JaCoCoはレポートを作成したいときにクラスを認識しません。しかし、待ってください...解決策があります。"

#, fuzzy
#~ msgid "Instrumenting the classes instead"
#~ msgstr "代わりにクラスをインストルメントする"

#, fuzzy
#~ msgid "JaCoCo has two modes. The first one is based on an agent and instruments classes on-the-fly. Unfortunately, this is incompatible with the dynamic classfile transformations that Quarkus does. The second mode is called link:https://www.eclemma.org/jacoco/trunk/doc/offline.html[offline instrumentation]. Classes are pre-instrumented in advance via the *jacoco:instrument* Maven goal and during their usage (when the tests are ran), *jacocoagent.jar* must be added to the classpath.  Once the tests have been executed, it is recommended to restore the original classes using the *jacoco:restore-instrumented-classes* Maven goal."
#~ msgstr "JaCoCoには2つのモードがあります。最初のものはエージェントに基づいており、オンザフライでクラスを計測します。残念ながら、これはQuarkusが行う動的なクラスファイル変換とは互換性がありません。2つ目のモードは、 link:https://www.eclemma.org/jacoco/trunk/doc/offline.html[オフラインインストルメンテーション] と呼ばれています。クラスは *jacoco:* instrument Mavenゴールを介して事前にインストルメンテーションされ、その使用中(テストが実行されるとき)に、 *jacocoagent.jar* をクラスパスに追加しなければなりません。テストが実行されたら、jac *oco:restore-instrumented-classes* Mavenゴールを使って元のクラスを復元することをお勧めします。"

#, fuzzy
#~ msgid "Let's first add the dependency on *jacocoagent.jar*:"
#~ msgstr "まずは *jacocoagent.jar* に依存関係を追加してみましょう。"

#, fuzzy
#~ msgid "Then let's configure three jacoco plugin goals for unit tests:"
#~ msgstr "続いて、ユニットテスト用のjacocoプラグインのゴールを3つ設定してみましょう。"

#, fuzzy
#~ msgid "One to instrument the classes during the *process-classes* phase"
#~ msgstr "*プロセス・クラス・* フェーズの間にクラスを計測するためのもの"

#, fuzzy
#~ msgid "One to restore the original classes during the *prepare-package* phase (after the tests are ran)"
#~ msgstr "*準備* 段階で元のクラスを復元するためのもの (テストが実行された後)"

#, fuzzy
#~ msgid "One to generate the report during the *verify* phase (the report generation requires the original classes to have been restored)"
#~ msgstr "*検証* フェーズでレポートを生成するためのもの(レポートの生成には、元のクラスがリストアされている必要があります)。"

#, fuzzy
#~ msgid "and a similar setup for the integration tests too:"
#~ msgstr "と、統合テストのための同様の設定を行います。"

#, fuzzy
#~ msgid "Let's now check the generated report that can be found in `target/site/jacoco-it/index.html`. The report now shows that `GreetingResource` is actually properly covered! Yay!"
#~ msgstr "それでは、 `target/site/jacoco-it/index.html` にある生成されたレポートを確認してみましょう。これでレポートは、 `GreetingResource` が実際に適切にカバーされていることを示しています!イェーイ!"

#, fuzzy
#~ msgid "Bonus: Building a consolidated report for Unit Tests and Integration Tests"
#~ msgstr "ボーナス:ユニットテストと統合テストのための統合レポートの作成"

#, fuzzy
#~ msgid "So, finally, let's improve the setup even further and let's merge the two execution files (*jacoco-ut.exec* and *jacoco-it.exec*) into one consolidated report and generate a consolidated report that will show the coverage of all your tests combined."
#~ msgstr "そこで、最後に、セットアップをさらに改善して、2つの実行ファイル *(jacoco-ut.exec* と *jacoco-it.exec* ) を1つの統合レポートに統合して、すべてのテストのカバレッジを表示する統合レポートを作成しましょう。"

#, fuzzy
#~ msgid "You should end up with something like this (note the addition of the `merge-results` and `post-merge-report` executions):"
#~ msgstr "最終的には以下のようになるはずです( `merge-results` と `post-merge-report` の実行ファイルが追加されていることに注意してください)。"
