# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-30 14:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/hibernate-orm-panache.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus - Simplified Hibernate ORM with Panache"
msgstr "Quarkus - Panacheを使用した簡素化されたHibernate ORM"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:14
#, fuzzy
msgid "Hibernate ORM is the de facto JPA implementation and offers you the full breadth of an Object Relational Mapper.  It makes complex mappings possible, but it does not make simple and common mappings trivial.  Hibernate ORM with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr "Hibernate ORMは事実上のJPA実装であり、オブジェクトリレーショナルマッパーの全幅を提供します。複雑なマッピングを可能にしますが、単純で一般的なマッピングをつまらなくするものではありません。Hibernate ORM with Panacheは、エンティティーを些細なことではなく、Quarkusで書くのが楽しくなるようにすることに焦点を当てています。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:15
#, fuzzy, no-wrap
msgid "First: an example"
msgstr "最初に:一例"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:18
#, fuzzy
msgid "What we're doing in Panache is allow you to write your Hibernate ORM entities like this:"
msgstr "Panacheでやっていることは、Hibernate ORMエンティティーをこのように書けるようにすることです。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:26
#: upstream/_guides/hibernate-orm-panache.adoc:132
#: upstream/_guides/hibernate-orm-panache.adoc:235
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:30
#: upstream/_guides/hibernate-orm-panache.adoc:239
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:34
#: upstream/_guides/hibernate-orm-panache.adoc:243
#, no-wrap
msgid ""
"    public static List<Person> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:39
#: upstream/_guides/hibernate-orm-panache.adoc:248
#, no-wrap
msgid ""
"    public static void deleteStefs(){\n"
"        delete(\"name\", \"Stef\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:43
#, fuzzy
msgid "You have noticed how much more compact and readable the code is? Does this look interesting? Read on!"
msgstr "コードがどれだけコンパクトで読みやすくなっているかお気づきですか?面白いと思いませんか?読んでみてください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:45
#, fuzzy
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "`list()` メソッドは、最初は驚くかもしれません。これは HQL (JP-QL) クエリの断片を取り、残りの部分をコンテキスト化します。これにより、非常に簡潔でありながら読みやすいコードになっています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:48
#, fuzzy
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "上記で説明したものは、基本的には link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[アクティブレコードパターン] であり、エンティティーパターンと呼ばれることもあります。Hibernate with Panache は、 `PanacheRepository` を通じて、より古典的な link:https://martinfowler.com/eaaCatalog/repository.html[リポジトリパターンを] 使用することもできます。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:49
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:53
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:55
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:57
#, fuzzy
msgid "The solution is located in the `hibernate-orm-panache-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-quickstart[directory]."
msgstr "ソリューションは `hibernate-orm-panache-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:59
#, fuzzy, no-wrap
msgid "Setting up and configuring Hibernate ORM with Panache"
msgstr "Panacheを使ったHibernate ORMの設定と設定"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:62
#, fuzzy
msgid "To get started:"
msgstr "始めるには"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:64
#, fuzzy
msgid "add your settings in `{config-file}`"
msgstr "で設定を追加します。 `{config-file}`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:65
#, fuzzy
msgid "annotate your entities with `@Entity`"
msgstr "でエンティティーに注釈を付けます。 `@Entity`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:66
#, fuzzy
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "エンティティーを `PanacheEntity` を拡張するようにします (リポジトリパターンを使用している場合はオプション)。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:68
#, fuzzy
msgid "Follow the link:hibernate-orm#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "link:hibernate-orm#setting-up-and-configuring-hibernate-orm[すべての設定については、Hibernateセットアップガイドに] 従ってください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:70
#, fuzzy
msgid "In your `pom.xml`, add the following dependencies:"
msgstr "あなたの `pom.xml` で、以下の依存関係を追加します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:72
#, fuzzy
msgid "the Panache JPA extension"
msgstr "Panache JPA エクステンション"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:73
#, fuzzy
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr "お使いの JDBC ドライバーのエクステンション ( `quarkus-jdbc-postgresql` , `quarkus-jdbc-h2` , `quarkus-jdbc-mariadb` , ...)"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:82
#, no-wrap
msgid ""
"<dependencies>\n"
"    <!-- Hibernate ORM specific dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-hibernate-orm-panache</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:89
#, no-wrap
msgid ""
"    <!-- JDBC driver dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""
"    <!-- JDBC driver dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:92
#, fuzzy
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "次に、関連する設定プロパティーを `{config-file}` ."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:100
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = connor\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:103
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation = drop-and-create\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:105
#, fuzzy, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解決策1:アクティブレコードパターンを使用する"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:107
#: upstream/_guides/hibernate-orm-panache.adoc:253
#, fuzzy, no-wrap
msgid "Defining your entity"
msgstr "実体の定義"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:111
#, fuzzy
msgid "To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your columns as public fields:"
msgstr "Panache エンティティーを定義するには、 `PanacheEntity` を拡張して `@Entity` と注釈を付け、列をパブリック フィールドとして追加します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:120
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:124
#, fuzzy
msgid "You can put all your JPA column annotations on the public fields. If you need a field to not be persisted, use the `@Transient` annotation on it. If you need to write accessors, you can:"
msgstr "すべてのJPAカラムアノテーションをパブリックフィールドに置くことができます。フィールドを永続化しないようにしたい場合は、 `@Transient` アノテーションを使用してください。アクセサを書き込む必要がある場合は、そのようにすることができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:137
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:143
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:148
#, fuzzy
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "また、フィールドアクセスの書き換えのおかげで、ユーザーが `person.name` を読むときには、実際に `getName()` アクセサを呼び出すことになります。これにより、すべてのフィールドの呼び出しが対応するゲッター/セッターの呼び出しに置き換えられるため、実行時に適切なカプセル化が可能になります。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:149
#: upstream/_guides/hibernate-orm-panache.adoc:336
#, fuzzy, no-wrap
msgid "Most useful operations"
msgstr "最も便利な操作"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:152
#, fuzzy
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "エンティティーを記述したら、ここでは実行できる最も一般的な操作を紹介します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:160
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Stef\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:163
#, no-wrap
msgid ""
"// persist it\n"
"person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:166
#: upstream/_guides/hibernate-orm-panache.adoc:353
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:172
#, no-wrap
msgid ""
"// check if it's persistent\n"
"if(person.isPersistent()){\n"
"    // delete it\n"
"    person.delete();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:175
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:178
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = Person.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:182
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = Person.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:185
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:188
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:191
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:194
#, no-wrap
msgid ""
"// delete all living persons\n"
"Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:197
#, no-wrap
msgid ""
"// delete all persons\n"
"Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:200
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = Person.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:203
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Person.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:207
#: upstream/_guides/hibernate-orm-panache.adoc:394
#, fuzzy
msgid "All `list` methods have equivalent `stream` versions."
msgstr "`list` の方法は、すべて同等の `stream` のバージョンを持っています。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:216
#, no-wrap
msgid ""
"try (Stream<Person> persons = Person.streamAll()) {\n"
"    List<String> namesButEmmanuels = persons\n"
"        .map(p -> p.name.toLowerCase() )\n"
"        .filter( n -> ! \"emmanuel\".equals(n) )\n"
"        .collect(Collectors.toList());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:221
#, fuzzy
msgid "The `stream` methods require a transaction to work. + As they perform I/O operations, they should be closed via the `close()` method or via a try-with-resource to close the underlying `ResultSet`.  If not, you will see warnings from Agroal that will close the underlying `ResultSet` for you."
msgstr "`stream` メソッドは動作するためにトランザクションを必要とします。+ これらのメソッドは I/O 操作を実行するため、 `close()` メソッドを介してクローズするか、または try-with-resource を使用して、基礎となる `ResultSet` をクローズする必要があります。そうしないと、Agroal からの警告が表示され、あなたの代わりにその下にある `ResultSet` をクローズしてくれます。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:222
#, fuzzy, no-wrap
msgid "Adding entity methods"
msgstr "エンティティーメソッドの追加"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:227
#, fuzzy
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "エンティティー自体の内部にエンティティーにカスタムクエリを追加します。そうすれば、自分や同僚が簡単に見つけることができ、クエリは操作対象のオブジェクトと同じ場所に配置されます。エンティティークラスに静的メソッドとして追加する方法は、Panache Active Recordの方法です。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:250
#, fuzzy, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解決策2:リポジトリパターンを使用する"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:256
#, fuzzy
msgid "When using the repository pattern, you can define your entities as regular JPA entities."
msgstr "リポジトリパターンを使用する場合、エンティティーを通常のJPAエンティティーとして定義することができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:265
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
"    @Id @GeneratedValue private Long id;\n"
"    private String name;\n"
"    private LocalDate birth;\n"
"    private Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:291
#, no-wrap
msgid ""
"    public Long getId(){\n"
"        return id;\n"
"    }\n"
"    public void setId(Long id){\n"
"        this.id = id;\n"
"    }\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    public LocalDate getBirth() {\n"
"        return birth;\n"
"    }\n"
"    public void setBirth(LocalDate birth) {\n"
"        this.birth = birth;\n"
"    }\n"
"    public Status getStatus() {\n"
"        return status;\n"
"    }\n"
"    public void setStatus(Status status) {\n"
"        this.status = status;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:295
#, fuzzy
msgid "If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "エンティティーのゲッター/セッターをわざわざ定義したくない場合は、 `PanacheEntityBase` を拡張して作成することができます。 `PanacheEntity` を拡張して、それが提供するデフォルトのIDを利用することもできます。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:296
#, fuzzy, no-wrap
msgid "Defining your repository"
msgstr "リポジトリの定義"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:300
#, fuzzy
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheRepository`:"
msgstr "リポジトリを使用する際には、アクティブレコードパターンをリポジトリに注入して `PanacheRepository` を実装することで、アクティブレコードパターンと全く同じ便利なメソッドを得ることができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:305
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:307
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:311
#, no-wrap
msgid ""
"   public Person findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:315
#, no-wrap
msgid ""
"   public List<Person> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:320
#, no-wrap
msgid ""
"   public void deleteStefs(){\n"
"       delete(\"name\", \"Stef\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:324
#, fuzzy
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheEntityBase` で定義されている操作はすべてリポジトリ上で利用可能なので、これを使用することはアクティブレコードパターンを使用するのと全く同じですが、それを注入する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:329
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:334
#, no-wrap
msgid ""
"@GET\n"
"public long count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:339
#, fuzzy
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "リポジトリを書いたら、ここでは最も一般的な操作を紹介します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:347
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.setName(\"Stef\");\n"
"person.setBirth(LocalDate.of(1910, Month.FEBRUARY, 1));\n"
"person.setStatus(Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:350
#, no-wrap
msgid ""
"// persist it\n"
"personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:359
#, no-wrap
msgid ""
"// check if it's persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    personRepository.delete(person);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:362
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:365
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = personRepository.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:369
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = personRepository.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:372
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:375
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:378
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:381
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:384
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:387
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = personRepository.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:390
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:402
#, no-wrap
msgid ""
"Stream<Person> persons = personRepository.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:405
#, fuzzy
msgid "The `stream` methods require a transaction to work."
msgstr "`stream` メソッドが動作するにはトランザクションが必要です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:409
#, fuzzy
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "残りのドキュメントでは、アクティブレコードパターンに基づく使用法のみを示していますが、リポジトリパターンでも実行できることを覚えておいてください。リポジトリパターンの例は簡潔にするために省略しています。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:410
#, fuzzy, no-wrap
msgid "Advanced Query"
msgstr "高度なクエリ"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:412
#, fuzzy, no-wrap
msgid "Paging"
msgstr "ページング"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:416
#, fuzzy
msgid "You should only use `list` and `stream` methods if your table contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "`list` および `stream` メソッドを使用するのは、テーブルに含まれるデータセットが十分に小さい場合に限られます。大きなデータセットの場合は、 `find` メソッドを使用することができます。 `PanacheQuery` を返してページングを行うことができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:421
#: upstream/_guides/hibernate-orm-panache.adoc:457
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:424
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:427
#, no-wrap
msgid ""
"// get the first page\n"
"List<Person> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:430
#, no-wrap
msgid ""
"// get the second page\n"
"List<Person> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:433
#, no-wrap
msgid ""
"// get page 7\n"
"List<Person> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:436
#, no-wrap
msgid ""
"// get the number of pages\n"
"int numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:439
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"long count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:445
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"return Person.find(\"status\", Status.Alive)\n"
"    .page(Page.ofSize(25))\n"
"    .nextPage()\n"
"    .stream()\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:448
#, fuzzy
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 型には、ページングやリターンストリームを扱う方法が他にもたくさんあります。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:449
#, fuzzy, no-wrap
msgid "Using a range instead of pages"
msgstr "ページの代わりに範囲を使用する"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:452
#, fuzzy
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` では、範囲ベースのクエリも可能です。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:460
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:463
#, no-wrap
msgid ""
"// get the range\n"
"List<Person> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:466
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"List<Person> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:472
#, fuzzy
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "範囲とページを混在させることはできません。範囲を使用している場合、現在のページに依存するすべてのメソッドは `UnsupportedOperationException` をスローします。 `page(Page)` または `page(int, int)` を使用してページングに戻すことができます。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:474
#, fuzzy, no-wrap
msgid "Sorting"
msgstr "並び替え"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:477
#, fuzzy
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "クエリ文字列を受け入れるすべてのメソッドは、以下の簡略化されたクエリ形式も受け入れます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:481
#, no-wrap
msgid "List<Person> persons = Person.list(\"order by name,birth\");\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:484
#, fuzzy
msgid "But these methods also accept an optional `Sort` parameter, which allows your to abstract your sorting:"
msgstr "しかし、これらのメソッドはオプションの `Sort` パラメーターを受け取ることもできます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:488
#, no-wrap
msgid "List<Person> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:491
#, no-wrap
msgid ""
"// and with more restrictions\n"
"List<Person> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:494
#, fuzzy
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` クラスには、カラムを追加したり、ソートの方向を指定したりするためのメソッドがたくさんあります。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:495
#, fuzzy, no-wrap
msgid "Simplified queries"
msgstr "簡素化されたクエリ"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:499
#, fuzzy
msgid "Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements at the end."
msgstr "通常、HQL クエリは次のような形式です: `from EntityName [where …] [order by …]` , 最後にオプションの要素があります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:501
#, fuzzy
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "セレクトクエリが `from` で始まらない場合、以下の追加形式をサポートしています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:503
#, fuzzy
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by …` `from EntityName order by …`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:504
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` (および単一パラメーター) に展開されます。 `from EntityName where <singleColumnName> = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:505
#, fuzzy
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` は次のように展開します。 `from EntityName where <query>`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:507
#, fuzzy
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "更新クエリが `update` で始まらない場合は、以下の追加フォームをサポートしています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:509
#, fuzzy
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr "`from EntityName …` `update from EntityName …`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:510
#, fuzzy
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr "`set? <singleColumnName>` (および単一パラメーター) に展開されます。 `update from EntityName set <singleColumnName> = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:511
#, fuzzy
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr "`set? <update-query>` は次のように展開します。 `update from EntityName set <update-query>`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:514
#, fuzzy
msgid "You can also write your queries in plain link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]:"
msgstr "クエリをプレーンな link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL] で書くこともできます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:519
#, no-wrap
msgid ""
"Order.find(\"select distinct o from Order o left join fetch o.lineItems\");\n"
"Order.update(\"update from Person set name = 'Mortal' where status = ?\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:521
#, fuzzy, no-wrap
msgid "Named queries"
msgstr "名前付きクエリ"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:524
#, fuzzy
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character."
msgstr "(簡略化された) HQL クエリの代わりに名前付きクエリを参照するには、その名前の前に '#' 文字を付けます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:533
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQuery(name = \"Person.getByName\", query = \"from Person where name = :name\")\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:538
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"#Person.getByName\", name).firstResult();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:544
#, fuzzy
msgid "Named queries can only be defined inside your JPA entity classes (being the Panache entity class, or the repository parameterized type), or on one of its super classes."
msgstr "名前付きクエリは、JPAエンティティークラス(Panacheエンティティークラス、またはリポジトリのパラメーター化されたタイプ)の内部、またはそのスーパークラスのいずれかでのみ定義できます。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:546
#, fuzzy, no-wrap
msgid "Query parameters"
msgstr "クエリパラメーター"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:549
#, fuzzy
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "クエリパラメーターは、以下のようにインデックス(1ベース)で渡すことができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:553
#, no-wrap
msgid "Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:556
#, fuzzy
msgid "Or by name using a `Map`:"
msgstr "または、 `Map` ."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:563
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"stef\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:566
#, fuzzy
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "または、コンビニエンスクラス `Parameters` をそのまま使用するか、 `Map` ."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:572
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:576
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:579
#, fuzzy
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "すべての問い合わせ操作は、インデックス ( `Object…` )、または名前 ( `Map<String,Object>` または `Parameters` ) によるパラメーターの渡しを受け付けます。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:580
#, fuzzy, no-wrap
msgid "Query projection"
msgstr "クエリ投影"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:583
#, fuzzy
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "クエリの投影は、 `find()` メソッドが返す `PanacheQuery` オブジェクト上の `project(Class)` メソッドで行うことができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:585
#, fuzzy
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "これを使用して、データベースから返されるフィールドを制限することができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:589
#, fuzzy
msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]"
msgstr "Hibernateは *DTOプロジェクションを* 使用して、プロジェクションクラスから属性を持つSELECT句を生成します。これは *動的なインスタンス化* や *コンストラクタ式* とも呼ばれ、詳細はHibernateガイド link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[: hql select clause] を参照してください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:592
#, fuzzy
msgid "The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class."
msgstr "投影クラスは,有効なJava Beanである必要があり,そのすべての属性を含むコンストラクタを持っている必要があり,このコンストラクタは,実体クラスを使用する代わりに,投影DTOをインスタンス化するために使用されます。これは,クラスの唯一のコンストラクタでなければならない。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:596
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:600
#, no-wrap
msgid ""
"@RegisterForReflection // <1>\n"
"public class PersonName {\n"
"    public final String name; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:605
#, no-wrap
msgid ""
"    public PersonName(String name){ // <3>\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:608
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:611
#, fuzzy
msgid "If you plan to deploy your application as a native executable, you must register manually the projection class for reflection."
msgstr "アプリケーションをネイティブ実行ファイルとしてデプロイする場合は、反射用の投影クラスを手動で登録する必要があります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:612
#, fuzzy
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "ここではパブリックフィールドを使用していますが、プライベートフィールドやゲッター/セッターを使用しても構いません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:613
#, fuzzy
msgid "This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters."
msgstr "このコンストラクタはHibernateによって使用され、クラス内で唯一のコンストラクタであり、すべてのクラス属性をパラメーターとして持つ必要があります。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:619
#, fuzzy
msgid "The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query, so the compiler must be configured to store parameter names inside the compiled class.  This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml."
msgstr "`project(Class)` メソッドの実装では、コンストラクタのパラメーター名を使用してクエリの select 節を構築するため、コンパイラはパラメーター名をコンパイルされたクラスの内部に格納するように設定する必要があります。Quarkus Mavenアーキタイプを使用している場合、これはデフォルトで有効になっています。使用していない場合は、 `<maven.compiler.parameters>true</maven.compiler.parameters>` プロパティーを pom.xml に追加します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:622
#, fuzzy
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "DTO プロジェクション・オブジェクトに、参照されるエンティティのフィールドがある場合、 `@ProjectedFieldName` アノテーションを使用して、SELECT 文のパスを提供することができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:632
#, no-wrap
msgid ""
"@Entity\n"
"public class Dog extends PanacheEntity {\n"
"    public String name;\n"
"    public String race;\n"
"    @ManyToOne\n"
"    public Person owner;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:637
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class DogDto {\n"
"    public String name;\n"
"    public String ownerName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:643
#, no-wrap
msgid ""
"    public DogDto(String name, @ProjectedFieldName(\"owner.name\") String ownerName) {  // <1>\n"
"        this.name = name;\n"
"        this.ownerName = ownerName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:645
#, no-wrap
msgid "PanacheQuery<DogDto> query = Dog.findAll().project(DogDto.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:648
#, fuzzy
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "`ownerName` DTOコンストラクタのパラメータは、 `owner.name` HQLプロパティから読み込まれます。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:649
#, fuzzy, no-wrap
msgid "Multiple Persistence Units"
msgstr "複数の永続性ユニット"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:652
#, fuzzy
msgid "The support for multiple persistence units is described in detail in link:hibernate-orm#multiple-persistence-units[the Hibernate ORM guide]."
msgstr "複数の永続化ユニットのサポートについては、 link:hibernate-orm#multiple-persistence-units[Hibernate ORMガイド] で詳しく説明されています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:654
#, fuzzy
msgid "When using Panache, things are simple:"
msgstr "Panacheを使用する場合、物事はシンプルです。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:656
#, fuzzy
msgid "A given Panache entity can be attached to only a single persistence unit."
msgstr "与えられたPanacheエンティティーは、単一の永続化ユニットにのみアタッチすることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:657
#, fuzzy
msgid "Given that, Panache already provides the necessary plumbing to transparently find the appropriate `EntityManager` associated to a Panache entity."
msgstr "それを考えると、Panacheはすでに、Panacheエンティティーに関連付けられた適切な `EntityManager` を透過的に見つけるために必要な配管を提供しています。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:658
#, fuzzy, no-wrap
msgid "Transactions"
msgstr "取引"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:663
#, fuzzy
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr "データベースを変更するメソッド (例: `entity.persist()` ) をトランザクション内でラップするようにしてください。CDI Beanメソッド `@Transactional` をマークすることで、それを行い、そのメソッドをトランザクションの境界にします。REST エンドポイントコントローラのように、アプリケーションのエントリーポイントの境界でこれを行うことをお勧めします。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:669
#, fuzzy
msgid "JPA batches changes you make to your entities and sends changes (it's called flush) at the end of the transaction or before a query.  This is usually a good thing as it's more efficient.  But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when JPA send those changes to the database.  Remember, this is less efficient so don't abuse it.  And your transaction still has to be committed."
msgstr "JPAは、エンティティーに加えた変更をバッチ処理し、トランザクションの終了時やクエリの前に変更を送信します(フラッシュと呼ばれています)。これは通常、より効率的なので良いことです。しかし、楽観的なロックの失敗をチェックしたい場合、オブジェクトの検証をすぐに行いたい場合、または一般的にすぐにフィードバックを得たい場合は、 `entity.flush()` を呼び出して強制的にフラッシュ処理を行うか、 `entity.persistAndFlush()` を使用して単一のメソッド呼び出しにすることができます。これにより、JPAが変更をデータベースに送信する際に発生する可能性のある `PersistenceException` をキャッチすることができます。これは効率が悪いので乱用しないようにしてください。また、トランザクションはコミットされなければなりません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:671
#, fuzzy
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "`PersistenceException` の場合に特定のアクションを実行できるようにするための flush メソッドの使用例を示します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:685
#, no-wrap
msgid ""
"@Transactional\n"
"public void create(Parameter parameter){\n"
"    try {\n"
"        //Here I use the persistAndFlush() shorthand method on a Panache repository to persist to database then flush the changes.\n"
"        return parameterRepository.persistAndFlush(parameter);\n"
"    }\n"
"    catch(PersistenceException pe){\n"
"        LOG.error(\"Unable to create the parameter\", pe);\n"
"        //in case of error, I save it to disk\n"
"        diskPersister.save(parameter);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:687
#, fuzzy, no-wrap
msgid "Lock management"
msgstr "ロック管理"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:690
#, fuzzy
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panacheは、 `findById(Object, LockModeType)` または `find().withLock(LockModeType)` を使用して、エンティティー/リポジトリでのデータベースロックを直接サポートしています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:692
#, fuzzy
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "以下の例はアクティブレコードパターンの場合ですが、リポジトリでも同じことができます。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:693
#, fuzzy, no-wrap
msgid "First: Locking using findById()."
msgstr "最初に。findById()を使ったロック。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:698
#: upstream/_guides/hibernate-orm-panache.adoc:715
#, no-wrap
msgid "public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:706
#, no-wrap
msgid ""
"    @GET\n"
"    @Transactional\n"
"    public Person findByIdForUpdate(Long id){\n"
"        Person p = Person.findById(id, LockModeType.PESSIMISTIC_WRITE);\n"
"        //do something useful, the lock will be released when the transaction ends.\n"
"        return person;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:708
#: upstream/_guides/hibernate-orm-panache.adoc:725
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:710
#, fuzzy, no-wrap
msgid "Second: Locking in a find()."
msgstr "2つ目:find()にロックをかける。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:723
#, no-wrap
msgid ""
"    @GET\n"
"    @Transactional\n"
"    public Person findByNameForUpdate(String name){\n"
"        Person p = Person.find(\"name\", name).withLock(LockModeType.PESSIMISTIC_WRITE).findOne();\n"
"        //do something useful, the lock will be released when the transaction ends.\n"
"        return person;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:728
#, fuzzy
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be annotated with the `@Transactional` annotation."
msgstr "トランザクションの終了時にロックが解放されるので、ロッククエリを呼び出すメソッドには `@Transactional` アノテーションを付けなければならないことに注意してください。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:729
#, fuzzy, no-wrap
msgid "Custom IDs"
msgstr "カスタムID"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:733
#, fuzzy
msgid "IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we have you covered."
msgstr "IDはしばしば厄介な話題であり、誰もがフレームワークで処理させることに賛成しているわけではありませんが、再び私たちはあなたをカバーしています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:736
#, fuzzy
msgid "You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then you just declare whatever ID you want as a public field:"
msgstr "`PanacheEntity` の代わりに `PanacheEntityBase` を拡張することで、独自の ID 戦略を指定することができます。そして、好きなIDをパブリックフィールドとして宣言するだけです。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:741
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:750
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(\n"
"            name = \"personSequence\",\n"
"            sequenceName = \"person_id_seq\",\n"
"            allocationSize = 1,\n"
"            initialValue = 4)\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"personSequence\")\n"
"    public Integer id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:753
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:757
#, fuzzy
msgid "If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository` and specify your ID type as an extra type parameter:"
msgstr "リポジトリを使用しているのであれば、 `PanacheRepository` の代わりに `PanacheRepositoryBase` を拡張して、ID のタイプを追加のタイプパラメーターとして指定することになります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:764
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:766
#, fuzzy, no-wrap
msgid "Mocking"
msgstr "嘲笑"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:768
#, fuzzy, no-wrap
msgid "Using the active record pattern"
msgstr "アクティブレコードパターンの使用"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:773
#, fuzzy
msgid "If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "アクティブなレコードパターンを使用している場合、静的メソッドのモックをサポートしていないため、Mockitoを直接使用することはできません。しかし、 `quarkus-panache-mock` モジュールを使用することで、Mockitoを使用して、独自のメソッドを含むすべての静的メソッドをモックすることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:775
#, fuzzy
msgid "Add this dependency to your `pom.xml`:"
msgstr "この依存関係を `pom.xml` ."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:783
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:787
#: upstream/_guides/hibernate-orm-panache.adoc:894
#, fuzzy
msgid "Given this simple entity:"
msgstr "この単純な実体を考えると"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:792
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:794
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:799
#, no-wrap
msgid ""
"    public static List<Person> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:802
#: upstream/_guides/hibernate-orm-panache.adoc:921
#, fuzzy
msgid "You can write your mocking test like this:"
msgstr "モックテストはこのように書くことができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:807
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:811
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:814
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:818
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:822
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:826
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:829
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:835
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, Person.findById(12L));\n"
"        Assertions.assertNull(Person.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:839
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> Person.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:843
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(Person.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:846
#, no-wrap
msgid ""
"        // Mocking a void method\n"
"        Person.voidMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:855
#, no-wrap
msgid ""
"        // Make it throw\n"
"        PanacheMock.doThrow(new RuntimeException(\"Stef2\")).when(Person.class).voidMethod();\n"
"        try {\n"
"            Person.voidMethod();\n"
"            Assertions.fail();\n"
"        } catch (RuntimeException x) {\n"
"            Assertions.assertEquals(\"Stef2\", x.getMessage());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:859
#, no-wrap
msgid ""
"        // Back to doNothing\n"
"        PanacheMock.doNothing().when(Person.class).voidMethod();\n"
"        Person.voidMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:868
#, no-wrap
msgid ""
"        // Make it call the real method\n"
"        PanacheMock.doCallRealMethod().when(Person.class).voidMethod();\n"
"        try {\n"
"            Person.voidMethod();\n"
"            Assertions.fail();\n"
"        } catch (RuntimeException x) {\n"
"            Assertions.assertEquals(\"void\", x.getMessage());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:875
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeast(4)).voidMethod();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:878
#, fuzzy
msgid "Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "`verify` と `do*` のメソッドは、必ず `Mockito` ではなく `PanacheMock` で呼び出すようにしてください。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:879
#, fuzzy, no-wrap
msgid "Using the repository pattern"
msgstr "リポジトリパターンの使用"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:883
#, fuzzy
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "リポジトリパターンを使用している場合は、 `quarkus-junit5-mockito` モジュールを使用して直接 Mockito を使用することができますので、Beanのモッキングが非常に簡単になります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:891
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:899
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:903
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:906
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:909
#, fuzzy
msgid "And this repository:"
msgstr "そして、このリポジトリ。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:918
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
"    public List<Person> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:928
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:933
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:937
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:941
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:945
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(personRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:948
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(personRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:954
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(personRepository.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, personRepository.findById(12L));\n"
"        Assertions.assertNull(personRepository.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:958
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(personRepository.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> personRepository.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:961
#, no-wrap
msgid ""
"        Mockito.when(personRepository.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(personRepository.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:968
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.verify(personRepository).findOrdered();\n"
"        Mockito.verify(personRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verifyNoMoreInteractions(personRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:970
#, fuzzy, no-wrap
msgid "How and why we simplify Hibernate ORM mappings"
msgstr "Hibernate ORMマッピングを単純化する方法と理由"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:974
#, fuzzy
msgid "When it comes to writing Hibernate ORM entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "Hibernate ORM エンティティーを書くことになると、ユーザーが不本意ながらも対処することに慣れてしまった、いくつかの迷惑なことがあります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:977
#, fuzzy
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really relevant to your model."
msgstr "IDロジックの複製:ほとんどのエンティティーはIDを必要とし、ほとんどの人はそれがどのように設定されているかは気にしません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:980
#, fuzzy
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr "間抜けなゲッターとセッター: Javaには言語内のプロパティーのサポートがないので、フィールドを作成し、そのフィールドのゲッターとセッターを生成しなければなりません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:986
#, fuzzy
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "従来のEEパターンでは、エンティティー定義(モデル)を、エンティティーでできる操作(DAO、リポジトリ)から分離することを推奨していますが、オブジェクト指向アーキテクチャでは、ステートとメソッドが同じクラスにある通常のオブジェクトに対してそのようなことをすることはありませんが、実際にはステートとその操作の間に不自然な分離を必要とします。さらに、これはエンティティーごとに2つのクラスを必要とし、エンティティーの操作を行う必要があるDAOやリポジトリのインジェクションを必要とします。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:988
#, fuzzy
msgid "Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "Hibernateのクエリは非常に強力ですが、一般的な操作には冗長すぎるため、すべての部分が必要ない場合でもクエリを書く必要があります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:990
#, fuzzy
msgid "Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our model usage."
msgstr "Hibernateは非常に汎用性が高いのですが、モデルの使用量の9割を占めるような些細な操作をしてもつまらないものにはなりません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:992
#, fuzzy
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "パナシェでは、これらの問題に対して、意見を出し合いながら取り組んできました。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:995
#, fuzzy
msgid "Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "エンティティーを `PanacheEntity` を拡張するようにしてください。 には自動生成される ID フィールドがあります。カスタムの ID 戦略が必要な場合は、代わりに `PanacheEntityBase` を拡張して、自分で ID を処理することができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:998
#, fuzzy
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "パブリックフィールドを使う。間抜けなゲッターとセッターを取り除く。フードの下では、不足しているすべてのゲッターとセッターを生成し、これらのフィールドへのすべてのアクセスをアクセサメソッドを使用するように書き換えます。こうすることで、必要なときに _便利な_ アクセサを書くことができ、エンティティーのユーザーがまだフィールドアクセスを使用しているにもかかわらず、それが使用されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1001
#, fuzzy
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "アクティブレコードパターンでは、エンティティークラスの静的メソッドにすべてのエンティティーロジックを配置し、DAOを作成しないようにします。エンティティーのスーパークラスには、非常に便利な静的メソッドがたくさん付属しており、エンティティークラスに独自のメソッドを追加することができます。ユーザーは、 `Person.` と入力するだけで、エンティティー `Person` の使用を開始し、一箇所ですべての操作を完了させることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1004
#, fuzzy
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better `Person.find(\"name\", \"stef\")`."
msgstr "クエリの不要な部分を書かないでください: `Person.find(\"order by name\")` や `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` 、あるいはもっと良い `Person.find(\"name\", \"stef\")` を書いてください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1006
#, fuzzy
msgid "That's all there is to it: with Panache, Hibernate ORM has never looked so trim and neat."
msgstr "それだけです: Panacheを使えば、Hibernate ORMはこれまでにないほどすっきりとした外観になります。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1007
#, fuzzy, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1010
#, fuzzy
msgid "Hibernate ORM with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "Hibernate ORM with Panacheは、コンパイル時のバイトコードによるエンティティーの強化に依存しています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1016
#, fuzzy
msgid "It attempts to identity archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "このファイルは、マーカーファイルの存在によってアーカイブを Panache エンティティー (および Panache エンティティーの消費者) と識別しようとします `META-INF/panache-archive.marker` 。Panache にはアノテーション プロセッサーが含まれており、Panache に依存している (間接的であっても) アーカイヴでこのファイルを自動的に作成します。注釈プロセッサーを無効にしている場合は、場合によってはこのファイルを手動で作成する必要があるかもしれません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1020
#, fuzzy
msgid "If you include the jpa-modelgen annotation processor this will exclude the Panache annotation processor by default. If you do this you should either create the marker file yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr "jpa-modelgen注釈プロセッサーを含めると、デフォルトではPanache注釈プロセッサーは除外されます。この場合は、マーカーファイルを自分で作成するか、以下のように `quarkus-panache-common` を追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1041
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"      <annotationProcessorPaths>\n"
"        <annotationProcessorPath>\n"
"          <groupId>org.hibernate</groupId>\n"
"          <artifactId>hibernate-jpamodelgen</artifactId>\n"
"          <version>${hibernate.version}</version>\n"
"        </annotationProcessorPath>\n"
"        <annotationProcessorPath>\n"
"          <groupId>io.quarkus</groupId>\n"
"          <artifactId>quarkus-panache-common</artifactId>\n"
"          <version>${quarkus.platform.version}</version>\n"
"        </annotationProcessorPath>\n"
"      </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""
