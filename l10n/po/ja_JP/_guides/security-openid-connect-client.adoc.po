# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-06-29 15:32+0000\n"
"PO-Revision-Date: 2021-04-30 16:54+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-client.adoc:6
#, fuzzy, no-wrap
msgid "OpenID Connect Client and Token Propagation Quickstart"
msgstr "OpenID Connectクライアントとトークンの伝搬クイックスタート"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:12
#, fuzzy
msgid "This quickstart demonstrates how to use `OpenID Connect Client Reactive Filter` to acquire and propagate access tokens as `HTTP Authorization Bearer` access tokens, alongside `OpenID Token Propagation Reactive Filter` which propagates the incoming `HTTP Authorization Bearer` access tokens."
msgstr " `HTTP Authorization Bearer` このクイックスタートでは、 `HTTP Authorization Bearer` アクセストークンとしてアクセストークンを取得し伝搬させるために、 `OpenID Token Propagation Reactive Filter` と共に `OpenID Connect Client Reactive Filter` を使用する方法を紹介します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:14
#, fuzzy
msgid "Please check xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Reference Guide] for all the information related to `Oidc Client` and `Token Propagation` support in Quarkus."
msgstr "Quarkusでの `Oidc Client` および `Token Propagation` のサポートに関するすべての情報は、 link:security-openid-connect-client.html[OpenID Connect Client and Token Propagation Reference Guideを] 参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:16
#, fuzzy
msgid "Please also read xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to protect your applications using Bearer Token Authorization."
msgstr "link:security-openid-connect.html[Quarkus - OpenID Connectを使用したベアラートークン認証によるサービスアプリケーションの保護]"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:22
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:23
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:26
#, fuzzy
msgid "In this example, we will build an application which consists of two JAX-RS resources, `FrontendResource` and `ProtectedResource`. `FrontendResource` propagates access tokens to `ProtectedResource` and uses either `OpenID Connect Client Reactive Filter` to acquire a token first before propagating it or `OpenID Token Propagation Reactive Filter` to propagate the incoming, already existing access token."
msgstr "この例では、 `FrontendResource` と `ProtectedResource` の2つの JAX-RS リソースからなるアプリケーションを構築します。 `FrontendResource` は `ProtectedResource` にアクセストークンを伝播し、 `OpenID Connect Client Reactive Filter` は伝播前にまずトークンを取得し、 `OpenID Token Propagation Reactive Filter` は入ってきた、すでにあるアクセストークンを伝播するために使用されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:28
#, fuzzy
msgid "`FrontendResource` has 4 endpoints:"
msgstr " `FrontendResource` は4つの端点があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:30
#, fuzzy
msgid "`/frontend/user-name-with-oidc-client-token`"
msgstr " `/frontend/user-name-with-oidc-client` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:31
#, fuzzy
msgid "`/frontend/admin-name-with-oidc-client-token`"
msgstr " `/frontend/admin-name-with-oidc-client` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:32
#, fuzzy
msgid "`/frontend/user-name-with-propagated-token`"
msgstr " `/frontend/user-name-with-propagated-token` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:33
#, fuzzy
msgid "`/frontend/admin-name-with-propagated-token`"
msgstr " `/frontend/admin-name-with-propagated-token` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:35
#: upstream/_guides/security-openid-connect-client.adoc:269
#, fuzzy
msgid "`FrontendResource` will use REST Client with `OpenID Connect Client Reactive Filter` to acquire and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client` or `/frontend/admin-name-with-oidc-client` is called. And it will use REST Client with `OpenID Connect Token Propagation Reactive Filter` to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr " `FrontendResource` は、 または のいずれかが呼び出されたときに、REST Client with を使用してアクセストークンを取得し、 に伝搬させます。また、REST Client with を使用して、 または のいずれかが呼び出されたときに、現在受信しているアクセストークンを に伝搬させます。 `/frontend/user-name-with-oidc-client` `/frontend/admin-name-with-oidc-client` `OpenID Connect Client Reactive Filter` `ProtectedResource` `OpenID Connect Token Propagation Reactive Filter` `/frontend/user-name-with-propagated-token` `/frontend/admin-name-with-propagated-token` `ProtectedResource` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:37
#, fuzzy
msgid "`ProtecedResource` has 2 endpoints:"
msgstr " `ProtecedResource` は2つの端点があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:39
#, fuzzy
msgid "`/protected/user-name`"
msgstr " `/protected/user-name` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:40
#, fuzzy
msgid "`/protected/admin-name`"
msgstr " `/protected/admin-name` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:42
#, fuzzy
msgid "Both of these endpoints return the username extracted from the incoming access token which was propagated to `ProtectedResource` from `FrontendResource`. The only difference between these endpoints is that calling `/protected/user-name` is only allowed if the current access token has a `user` role and calling `/protected/admin-name` is only allowed if the current access token has an `admin` role."
msgstr "これらのエンドポイントは両方とも、 `FrontendResource` から `ProtectedResource` に伝搬された着信アクセストークンから抽出したユーザー名を返します。 これらのエンドポイントの唯一の違いは、 `/protected/user-name` の呼び出しは現在のアクセストークンが `user` の役割を持つ場合のみ、 `/protected/admin-name` の呼び出しは現在のアクセストークンが `admin` の役割を持つ場合のみ許可されることです。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:43
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:47
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:49
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:51
#, fuzzy
msgid "The solution is located in the `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-client-quickstart[directory]."
msgstr "解決策は、 `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-client-quickstart[directory] に配置されています。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:52
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:55
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:61
#, fuzzy
msgid "This command generates a Maven project, importing the `oidc`, `oidc-client-reactive-filter`, `oidc-client-reactive-filter` and `resteasy-reactive` extensions."
msgstr "このコマンドは、 `oidc` , `oidc-client-reactive-filter` , `oidc-client-reactive-filter` , `resteasy-reactive` の拡張機能をインポートして、Maven プロジェクトを生成します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:63
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add these extensions to your project by running the following command in your project base directory:"
msgstr "Quarkusプロジェクトをすでに設定している場合、プロジェクトのベースディレクトリで次のコマンドを実行することで、これらの拡張機能をプロジェクトに追加することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:68
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_guides/security-openid-connect-client.adoc:70
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:88
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-openid-connect-client.adoc:91
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:94
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc,oidc-client-reactive-filter,oidc-token-propagation-reactive,resteasy-reactive\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:96
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:99
#, fuzzy
msgid "Let's start by implementing `ProtectedResource`:"
msgstr "まずは、 `ProtectedResource` を実装してみましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:103
#: upstream/_guides/security-openid-connect-client.adoc:147
#: upstream/_guides/security-openid-connect-client.adoc:180
#: upstream/_guides/security-openid-connect-client.adoc:217
#: upstream/_guides/security-openid-connect-client.adoc:275
#, no-wrap
msgid "package org.acme.security.openid.connect.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:109
#, fuzzy, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:112
#, fuzzy, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:114
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:118
#, fuzzy, no-wrap
msgid ""
"@Path(\"/protected\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:121
#, fuzzy, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken principal;\n"
msgstr ""
"    @Inject\n"
"    Tokens tokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:129
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    public Uni<String> userName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:138
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    public Uni<String> adminName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:141
#, fuzzy
msgid "As you can see `ProtectedResource` returns a name from both `userName()` and `adminName()` methods. The name is extracted from the current `JsonWebToken`."
msgstr "ご覧の通り、 `ProtectedResource` は `userName()` と `adminName()` の両方のメソッドから名前を返します。この名前は，現在の `JsonWebToken` から抽出されたものです．"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:143
#, fuzzy
msgid "Next lets add REST Client with `OpenID Connect Client Reactive Filter` and another REST Client with `OpenID Connect Token Propagation Filter`, `FrontendResource` will use these two clients to call `ProtectedResource`:"
msgstr "次に、RESTクライアントを `OpenID Connect Client Reactive Filter` 、別のRESTクライアントを `OpenID Connect Token Propagation Filter` 、 `FrontendResource` はこの2つのクライアントを使用して、 `ProtectedResource` を呼び出すことにします。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:151
#: upstream/_guides/security-openid-connect-client.adoc:184
#, fuzzy, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:154
#: upstream/_guides/security-openid-connect-client.adoc:187
#, fuzzy, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:157
#, fuzzy, no-wrap
msgid ""
"import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:162
#, fuzzy, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceOidcClientFilter {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:167
#: upstream/_guides/security-openid-connect-client.adoc:200
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    Uni<String> getUserName();\n"
msgstr ""
"    @GET\n"
"    String getUserName();\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:173
#: upstream/_guides/security-openid-connect-client.adoc:206
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    Uni<String> getAdminName();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:176
#, fuzzy
msgid "where `ProtectedResourceOidcClientFilter` will depend on `OidcClientRequestReactiveFilter` to acquire and propagate the tokens and"
msgstr "ここで、 `ProtectedResourceOidcClientFilter` は、 `OidcClientRequestReactiveFilter` に依存して、トークンの取得と伝搬を行い"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:190
#, no-wrap
msgid ""
"import io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:195
#, fuzzy, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceTokenPropagationFilter {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:209
#, fuzzy
msgid "where `ProtectedResourceTokenPropagationFilter` will depend on `AccessTokenRequestReactiveFilter` to propagate the incoming, already existing tokens."
msgstr "ここで、 `ProtectedResourceTokenPropagationFilter` は `AccessTokenRequestReactiveFilter` に依存して、入ってきた、すでに存在するトークンを伝搬させます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:211
#, fuzzy
msgid "Note that both `ProtectedResourceOidcClientFilter` and `ProtectedResourceTokenPropagationFilter` interfaces are identical - the reason behind it is that combining `OidcClientRequestReactiveFilter` and `AccessTokenRequestReactiveFilter` on the same REST Client will cause side effects as both filters can interfere with other, for example, `OidcClientRequestReactiveFilter` may override the token propagated by `AccessTokenRequestReactiveFilter` or `AccessTokenRequestReactiveFilter` can fail if it is called when no token is available to propagate and `OidcClientRequestReactiveFilter` is expected to acquire a new token instead."
msgstr " `ProtectedResourceOidcClientFilter` `ProtectedResourceTokenPropagationFilter` `OidcClientRequestReactiveFilter` `AccessTokenRequestReactiveFilter` 例えば、 `OidcClientRequestReactiveFilter` が `AccessTokenRequestReactiveFilter` によって伝達されたトークンを上書きしたり、 `AccessTokenRequestReactiveFilter` が伝達可能なトークンがないときに呼び出されて失敗し、代わりに `OidcClientRequestReactiveFilter` が新しいトークンを取得することが期待されるからです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:213
#, fuzzy
msgid "Now let's complete creating the application with adding `FrontendResource`:"
msgstr "次に、 `FrontendResource` を追加して、アプリケーションの作成を完了します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:223
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.WebApplicationException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:225
#, fuzzy, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:227
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:233
#, no-wrap
msgid ""
"@Path(\"/frontend\")\n"
"public class FrontendResource {\n"
"    @Inject\n"
"    @RestClient\n"
"    ProtectedResourceOidcClientFilter protectedResourceOidcClientFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:237
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    ProtectedResourceTokenPropagationFilter protectedResourceTokenPropagationFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:244
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"user-name-with-oidc-client-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getUserNameWithOidcClientToken() {\n"
"        return protectedResourceOidcClientFilter.getUserName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:251
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"admin-name-with-oidc-client-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getAdminNameWithOidcClientToken() {\n"
"\t    return protectedResourceOidcClientFilter.getAdminName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:258
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"user-name-with-propagated-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getUserNameWithPropagatedToken() {\n"
"        return protectedResourceTokenPropagationFilter.getUserName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:266
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"admin-name-with-propagated-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getAdminNameWithPropagatedToken() {\n"
"        return protectedResourceTokenPropagationFilter.getAdminName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:271
#, fuzzy
msgid "Finally, lets add a JAX-RS `ExceptionMapper`:"
msgstr "最後に、JAX-RS（ `ExceptionMapper` ）を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:279
#, fuzzy, no-wrap
msgid ""
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.ext.ExceptionMapper;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:281
#, no-wrap
msgid "import org.jboss.resteasy.reactive.ClientWebApplicationException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:284
#, no-wrap
msgid ""
"@Provider\n"
"public class FrontendExceptionMapper implements ExceptionMapper<ClientWebApplicationException> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:289
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Response toResponse(ClientWebApplicationException t) {\n"
"\t\treturn Response.status(t.getResponse().getStatus()).build();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:291
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:294
#, fuzzy
msgid "This exception mapper is only added to verify during the tests that `ProtectedResource` returns `403` when the token has no expected role. Without this mapper `RESTEasy Reactive` will correctly convert the exceptions which will escape from REST Client calls to `500` to avoid leaking the information from the downstream resources such as `ProtectedResource` but in the tests it will not be possible to assert that `500` is in fact caused by an authorization exception as opposed to some internal error."
msgstr "この例外マッパーは、トークンが期待された役割を持たないときに `ProtectedResource` が `403` を返すことをテスト中に検証するためにのみ追加されます。このマッパーがなければ、 `RESTEasy Reactive` は REST Client の呼び出しから発生する例外を `500` に正しく変換し、 `ProtectedResource` のような下流のリソースからの情報漏えいを防ぎますが、テストでは `500` が実際には何らかの内部エラーではなく認証例外によって発生したと断定することはできないでしょう。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:295
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:298
#, fuzzy
msgid "We have prepared the code, and now let's configure the application:"
msgstr "コードの準備ができたので、次はアプリケーションの設定を行います。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:302
#, no-wrap
msgid "# Configure OIDC\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:306
#, fuzzy, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
"quarkus.oidc.credentials.secret=secret\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:309
#, no-wrap
msgid ""
"# Tell Dev Services for Keycloak to import the realm file\n"
"# This property is not effective when running the application in JVM or Native modes but only in dev and test modes.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:311
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:313
#, no-wrap
msgid "# Configure OIDC Client\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:320
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${quarkus.oidc.auth-server-url}\n"
"quarkus.oidc-client.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:322
#, no-wrap
msgid "# Configure REST Clients\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:326
#, no-wrap
msgid ""
"%prod.port=8080\n"
"%dev.port=8080\n"
"%test.port=8081\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:329
#, no-wrap
msgid ""
"org.acme.security.openid.connect.client.ProtectedResourceOidcClientFilter/mp-rest/url=http://localhost:${port}/protected\n"
"org.acme.security.openid.connect.client.ProtectedResourceTokenPropagationFilter/mp-rest/url=http://localhost:${port}/protected\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:332
#, fuzzy
msgid "This configuration references Keycloak which will be used by `ProtectedResource` to verify the incoming access tokens and by `OidcClient` to get the tokens for a user `alice` using a `password` grant. Both RESTClients point to `ProtectedResource`'s HTTP address."
msgstr "この設定は、 `ProtectedResource` が受信したアクセストークンを検証するために、また `OidcClient` が `password` のグラントを使用してユーザー `alice` のトークンを取得するために使用する Keycloak を参照しています。両方のRESTClientsは`ProtectedResource'のHTTPアドレスを指しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:334
#, fuzzy
msgid "Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` will launch a container for you when the application is run in dev or test modes. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information."
msgstr " `quarkus.oidc.auth-server-url` に `%prod.` プロファイルプレフィックスを追加すると、アプリケーションを dev または test モードで実行するときに、 `Dev Services for Keycloak` がコンテナを起動するようになります。詳細は、以下の「 link:#keycloak-dev-mode[Dev モードでアプリケーションを実行] する」のセクションを参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:335
#, fuzzy, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloakサーバーの起動と設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:338
#, fuzzy
msgid "Do not start the Keycloak server when you run the application in dev mode or test modes - `Dev Services for Keycloak` will launch a container. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information. Make sure to put the {quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath (`target/classes` directory) so that it gets imported automatically when running in dev mode - unless you have already built a {quickstarts-tree-url}/security-openid-connect-quickstart[complete solution] in which case this realm file will be added to the classpath during the build."
msgstr "devモードやtestモードでアプリケーションを実行するときは、Keycloakサーバーを起動しないでください - `Dev Services for Keycloak` 、コンテナが起動されます。詳細については、以下の「 link:#keycloak-dev-mode[開発モードで] アプリケーションを実行する」のセクションを参照してください。quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] をクラスパス ( `target/classes` ディレクトリ) に置き、開発モードで実行するときに自動的にインポートされるようにしてください。すでに {quickstarts-tree-url}/security-openid-connect-quickstart[complete solution] を構築した場合はこの realm ファイルが構築中にクラスパスに加えられることを確認しておいてください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:340
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:344
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:347
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、`keycloak.version` は `17.0.0` 以上に設定する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:349
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "http://localhost:8180[localhost:8180] で Keycloak サーバーにアクセスできるはずです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:351
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:353
#, fuzzy
msgid "Import the {quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file]をインポートして、新しいrealmを作成することができます。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムを] 作成する方法について、Keycloak のドキュメントを参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:355
#, fuzzy
msgid "This `quarkus` realm file will add a `frontend` client, and `alice` and `admin` users. `alice` has a `user` role, `admin` - both `user` and `admin` roles."
msgstr "この `quarkus` realm ファイルは `frontend` クライアント、 `alice` と `admin` ユーザーを追加します。 `alice` は `user` ロール、 `admin` - `user` と `admin` ロールの両方を持ちます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:357
#, no-wrap
msgid "Running the Application in Dev mode"
msgstr "開発モードでのアプリケーションの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:360
msgid "To run the application in a dev mode, use:"
msgstr "アプリケーションを開発モードで実行するには、次を使用します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:364
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] will launch a Keycloak container and import a `quarkus-realm.json`."
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] は、Keycloak コンテナーを起動し、`quarkus-realm.json` をインポートします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:366
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev[/q/dev] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
msgstr "http://localhost:8080/q/dev[/q/dev] で入手可能な xref:dev-ui.adoc[Dev UI] を開き、`OpenID Connect` `Dev UI` の `Provider: Keycloak` リンクをクリックします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:368
#, fuzzy
msgid "You will be asked to log in into a `Single Page Application` provided by `OpenID Connect Dev UI`:"
msgstr "`OpenID Connect Dev UI` が提供する `シングルページアプリケーション` にログインするように求められます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:370
msgid "Login as `alice` (password: `alice`) who has a `user` role"
msgstr "`user` のロールを持つ `alice` (パスワード: `alice`) としてログインします"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:371
#: upstream/_guides/security-openid-connect-client.adoc:374
#, fuzzy
msgid "accessing `/frontend/user-name-with-propagated-token` will return `200`"
msgstr "にアクセスすると、 `/frontend/user-name-with-propagated-token` が返されます。 `200` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:372
#, fuzzy
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `403`"
msgstr "にアクセスすると、 `/frontend/admin-name-with-propagated-token` が返されます。 `403` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:373
msgid "Logout and login as `admin` (password: `admin`) who has both `admin` and `user` roles"
msgstr "ログアウトし、`admin` と `user` ロールの両方を持つ `admin` (パスワード: `admin`) としててログインします"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:375
#, fuzzy
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `200`"
msgstr "にアクセスすると、 `/frontend/admin-name-with-propagated-token` が返されます。 `200` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:377
#, fuzzy
msgid "In this case you are testing that `FrontendResource` can propagate the access tokens acquired by `OpenID Connect Dev UI`."
msgstr "この場合、 `FrontendResource` が `OpenID Connect Dev UI` で取得したアクセストークンを伝搬できることをテストしていることになります。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:378
#, fuzzy, no-wrap
msgid "Running the Application in JVM mode"
msgstr "JVMモードでのアプリケーションの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:381
msgid "When you're done playing with the `dev` mode\" you can run it as a standard Java application."
msgstr "「`dev` モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:383
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:387
msgid "Then run it:"
msgstr "次に、以下を実行してください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:391
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr "java -jar target/quarkus-app/quarkus-run.jar\n"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:393
#, no-wrap
msgid "Running the Application in Native Mode"
msgstr "ネイティブモードでのアプリケーションの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:396
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:400
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:403
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:407
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:411
#, no-wrap
msgid "./target/security-openid-connect-quickstart-1.0.0-SNAPSHOT-runner\n"
msgstr "./target/security-openid-connect-quickstart-1.0.0-SNAPSHOT-runner\n"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:413
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:416
#, fuzzy
msgid "See <<keycloak-dev-mode, Running the Application in Dev mode>> section above about testing your application in dev mode."
msgstr "開発モードでアプリケーションをテストすることについては、上記の「 link:#keycloak-dev-mode[開発モードでアプリケーションを実行] する」のセクションを参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:418
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "`curl` を使用して、JVM またはネイティブモードで起動したアプリケーションをテストできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:420
#, fuzzy
msgid "Obtain an access token for `alice`:"
msgstr " `alice` のアクセストークンを取得する。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:429
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:432
#, fuzzy
msgid "Now use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "では、このトークンを使って `/frontend/user-name-with-propagated-token` と `/frontend/admin-name-with-propagated-token` を呼び出してみましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:438
#: upstream/_guides/security-openid-connect-client.adoc:470
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"  http://localhost:8080/frontend/user-name-with-propagated-token` \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:441
#, fuzzy
msgid "will return `200` status code and the name `alice` while"
msgstr "は `200` というステータスコードと `alice` という名前を返しますが"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:447
#: upstream/_guides/security-openid-connect-client.adoc:479
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"  http://localhost:8080/frontend/admin-name-with-propagated-token` \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:450
#, fuzzy
msgid "will return `403` - recall that `alice` only has a `user` role."
msgstr "は `403` を返します。 `alice` は `user` の役割しか持っていないことを思い出してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:452
#, fuzzy
msgid "Next obtain an access token for `admin`:"
msgstr "次に、 `admin` のアクセストークンを取得します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:461
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:464
#, fuzzy
msgid "and use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "で、このトークンを使って `/frontend/user-name-with-propagated-token` と `/frontend/admin-name-with-propagated-token` を呼び出します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:473
#, fuzzy
msgid "will return `200` status code and the name `admin`, and"
msgstr "は， `200` ステータスコードと名前 `admin` ，を返します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:482
#, fuzzy
msgid "will also return `200` status code and the name `admin`, as `admin` has both `user` and `admin` roles."
msgstr "はまた、 `200` ステータスコードと名前 `admin` を返します。これは `admin` が `user` と `admin` の両方の役割を持つためです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:485
msgid "Now lets check `FrontendResource` methods which do not propagate the existing tokens but use `OidcClient` to acquire and propagate the tokens. You have seen that `OidcClient` is configured to acquire the tokens for the `alice` user, so:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:490
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"  http://localhost:8080/frontend/user-name-with-oidc-client`\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:493
msgid "will return `200` status code and the name `alice`, but"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:498
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"  http://localhost:8080/frontend/admin-name-with-oidc-client`\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:501
msgid "will return `403` status code."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:502
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:505
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:506
#, fuzzy
msgid "xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications]"
msgstr "link:security-openid-connect.html[Quarkus - OpenID Connectを使用したベアラートークン認証によるサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:506
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"

#, fuzzy
#~ msgid "Using OpenID Connect (OIDC) and OAuth2 Client and Filters to manage access tokens"
#~ msgstr "OpenID Connect（OIDC）とOAuth2 Client and Filtersを使ったアクセストークンの管理"

#~ msgid "This guide explains how to use:"
#~ msgstr "このガイドでは以下の使い方を解説しています。"

#, fuzzy
#~ msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org[Keycloak]"
#~ msgstr "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter`, `quarkus-oidc-client-filter` エクステンションにより、OpenID Connect や link:https://www.keycloak.org[Keycloak]などの OAuth 2.0 準拠の認証サーバーからアクセストークンを取得し、リフレッシュすることができます。"

#, fuzzy
#~ msgid "`quarkus-oidc-token-propagation` and `quarkus-oidc-token-propagation-reactive` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
#~ msgstr "`quarkus-oidc-token-propagation` 現在の `Bearer` または `Authorization Code Flow` のアクセストークンを伝搬させるためのエクステンション"

#~ msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
#~ msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#~ msgid "OidcClient"
#~ msgstr "OidcClient"

#, fuzzy
#~ msgid "Add the following dependency:"
#~ msgstr "テストプロジェクトに以下の依存関係を追加します。"

#~ msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
#~ msgstr "`quarkus-oidc-client` エクステンションは、SmallRye Mutiny `Uni` および `Vert.xWebClient` を使用してトークンを取得および更新するために使用できるリアクティブな `io.quarkus.oidc.client.OidcClient` を提供します。"

#, fuzzy
#~ msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using the token grants such as `client_credentials` or `password` and refresh the tokens using a `refresh_token` grant."
#~ msgstr "`OidcClient` はビルド時に IDP トークンエンドポイントの URL で初期化され、このエンドポイントを使用して `client_credentials` や `password` などのトークングラントを使用してアクセストークンを取得し、 `refresh_token` グラントを使用してトークンを更新します。"

#, fuzzy
#~ msgid "Token Endpoint Configuration"
#~ msgstr "トークンエンドポイントの設定"

#~ msgid "By default the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
#~ msgstr "デフォルトでは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` のパスを追加することで、トークンのエンドポイントアドレスが検出されます。"

#, fuzzy
#~ msgid "For example, given this Keycloak URL:"
#~ msgstr "例えば、このKeycloakのURLが与えられた場合。"

#, fuzzy
#~ msgid "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#, fuzzy
#~ msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
#~ msgstr "`OidcClient` は、トークンのエンドポイントURLが `<a href=\"http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\" class=\"bare\">http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens</a>`."

#~ msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
#~ msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、トークンエンドポイントのアドレスを相対パスの値で設定することができます。例:"

#, fuzzy
#~ msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
#~ msgstr "ディスカバリーを行わずにトークンのエンドポイントURLを設定するよりコンパクトな方法は、 `quarkus.oidc-client.token-path` を絶対的なURLに設定することです。"

#, fuzzy
#~ msgid "quarkus.oidc-client.token-path=http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#, fuzzy
#~ msgid "Setting 'quarkus.oidc-client.auth-server-url' and 'quarkus.oidc-client.discovery-enabled' is not required in this case."
#~ msgstr "この場合、「quarkus.oidc-client.auth-server-url」と「quarkus.oidc-client.discovery-enabled」の設定は必要ありません。"

#, fuzzy
#~ msgid "Supported Token Grants"
#~ msgstr "支援されたトークンの助成金"

#, fuzzy
#~ msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
#~ msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#, fuzzy
#~ msgid "Client Credentials Grant"
#~ msgstr "クライアントクレデンシャルグラント"

#~ msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
#~ msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#~ msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
#~ msgstr "`client_credentials` グラントにより、`quarkus.oidc-client.grant-options.client.<param-name>=<value>` を介してトークンリクエストに追加のパラメータを設定できます。 `audience` パラメータを使用して目的のトークン受信者を設定する方法は次のとおりです。"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "# 'client' is a shortcut for `client_credentials`\n"
#~ "quarkus.oidc-client.grant.type=client\n"
#~ "quarkus.oidc-client.grant-options.client.audience=https://example.com/api\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=password\n"
#~ "quarkus.oidc-client.grant-options.password.username=alice\n"
#~ "quarkus.oidc-client.grant-options.password.password=alice\n"

#, fuzzy
#~ msgid "Password Grant"
#~ msgstr "パスワード付与"

#~ msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
#~ msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#, fuzzy
#~ msgid "It can be further customized using a `quarkus.oidc-client.grant-options.password` configuration prefix, similarly to how the client credentials grant can be customized."
#~ msgstr "クライアント認証情報付与のカスタマイズと同様に、 `quarkus.oidc-client.grant-options.password` 構成プレフィックスを使用してさらにカスタマイズすることができます。"

#, fuzzy
#~ msgid "Other Grants"
#~ msgstr "その他の助成金"

#, fuzzy
#~ msgid "`OidcClient` can also help with acquiring the tokens using the grants which require some extra input parameters which can not be captured in the configuration. These grants are `refresh token` (with the external refresh token), `token exchange` and `authorization code`."
#~ msgstr "`OidcClient` は、設定では取得できない追加の入力パラメータを必要とするグラントを使用して、トークンの取得を支援することもできます。これらのグラントは、 `refresh token` （外部リフレッシュトークンを使用）、 `token exchange` 、 `authorization code` です。"

#, fuzzy
#~ msgid "Using the `refresh_token` grant which uses an out of band refresh token to acquire a new set of tokens will be required if the existing refresh token has been posted to the current Quarkus endpoint for it to acquire the access token. In this case `OidcClient` needs to be configured as follows:"
#~ msgstr "帯域外のリフレッシュトークンを使用して新しいトークンを取得する `refresh_token` グラントを使用すると、既存のリフレッシュトークンが現在のQuarkusエンドポイントにポストされている場合、アクセストークンを取得する必要があります。この場合、 `OidcClient` を以下のように設定する必要があります。"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=refresh\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#, fuzzy
#~ msgid "and then you can use `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
#~ msgstr "で、提供されたリフレッシュ・トークンを使って `OidcClient.refreshTokens` メソッドでアクセストークンを取得します。"

#, fuzzy
#~ msgid "Using the `token exchange` grant may be required if you are building a complex microservices application and would like to avoid the same `Bearer` token be propagated to and used by more than one service. Please see <<token-propagation,Token Propagation in MicroProfile RestClient client filter>> for more details."
#~ msgstr "複雑なマイクロサービスアプリケーションを構築しており、同じ `Bearer` トークンが複数のサービスに伝搬されて使用されるのを避けたい場合は、 `token exchange` グラントの使用が必要になることがあります。詳細については、 link:#token-propagation[MicroProfile RestClient client filterのToken Propagation]を参照してください。"

#, fuzzy
#~ msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reasons you can not use the xref:security-openid-connect-web-authentication.adoc[Quarkus OpenID Connect extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
#~ msgstr "何らかの理由で link:security-openid-connect-web-authentication.html[Quarkus OpenID Connect extension]を使用してAuthorization Code Flowをサポートできない場合、 `OidcClient` を使用して `authorization code` の付与をサポートする必要があるかもしれません。Authorization Code Flowを実装する正当な理由がある場合は、 `OidcClient` を以下のように設定してください。"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=code\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#, fuzzy
#~ msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
#~ msgstr "そして、追加のプロパティのMapを受け付ける `OidcClient.accessTokens` メソッドを使用し、現在の `code` と `redirect_uri` のパラメータを渡して、認証コードとトークンを交換することができます。"

#, fuzzy
#~ msgid "Grant scopes"
#~ msgstr "グラントスコープ"

#, fuzzy
#~ msgid "You may need to request that a specific set of scopes is associated with an issued access token.  Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
#~ msgstr "発行されたアクセストークンに特定のスコープのセットが関連付けられていることを要求する必要がある場合があります。その場合は、専用の `quarkus.oidc-client.scopes` list プロパティなどを使用します。 `quarkus.oidc-client.scopes=email,phone`"

#~ msgid "Use OidcClient directly"
#~ msgstr "OidcClientの直接使用"

#~ msgid "One can use `OidcClient` directly as follows:"
#~ msgstr "以下のように `OidcClient` を直接使用することができます。"

#~ msgid ""
#~ "    @Inject\n"
#~ "    OidcClient client;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    OidcClient client;\n"

#~ msgid "    volatile Tokens currentTokens;\n"
#~ msgstr "    volatile Tokens currentTokens;\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"

#, fuzzy
#~ msgid "Inject Tokens"
#~ msgstr "トークンの注入"

#, fuzzy
#~ msgid "You can inject `Tokens` which uses `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
#~ msgstr "`OidcClient` を内部的に使用する `Tokens` を注入することができます。 `Tokens` はアクセストークンを取得し、必要に応じてリフレッシュするために使用することができます。"

#, fuzzy
#~ msgid "import io.quarkus.oidc.client.Tokens;\n"
#~ msgstr ""
#~ "import io.quarkus.oidc.client.OidcClient;\n"
#~ "import io.quarkus.oidc.client.Tokens;\n"

#, fuzzy
#~ msgid "    @Inject Tokens tokens;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    Tokens tokens;\n"

#, fuzzy
#~ msgid "Use OidcClients"
#~ msgstr "OidcClient"

#, fuzzy
#~ msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
#~ msgstr "`io.quarkus.oidc.client.OidcClients` は、 `OidcClient`のコンテナです。デフォルトの `OidcClient` と、以下のように設定できる名前付きクライアントが含まれています。"

#~ msgid "quarkus.oidc-client.client-enabled=false\n"
#~ msgstr "quarkus.oidc-client.client-enabled=false\n"

#~ msgid ""
#~ "quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
#~ msgstr ""
#~ "quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#~ msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
#~ msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#, fuzzy
#~ msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
#~ msgstr "また、 link:security-openid-connect-multitenancy.html[OIDCマルチテナンシー]を使用し、各OIDCテナントが独自の関連する `OidcClient` 、Vert.x `RoutingContext` `tenantId` 属性を使用することができます。"

#~ msgid "If you need you can also create new `OidcClient` programmatically like this:"
#~ msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#, fuzzy
#~ msgid "Inject named OidcClient and Tokens"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    OidcClient client;\n"

#, fuzzy
#~ msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
#~ msgstr "複数の `OidcClient`が設定されている場合、 `OidcClients` を使用する代わりに、追加の修飾子 `@NamedOidcClient` で `OidcClient` の注入対象を指定することができます。"

#, fuzzy
#~ msgid ""
#~ "    @Inject\n"
#~ "    @NamedOidcClient(\"jwt-secret\")\n"
#~ "    OidcClient client;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    OidcClient client;\n"

#, fuzzy
#~ msgid ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ "        // use client to get the token\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"

#, fuzzy
#~ msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
#~ msgstr "同じ修飾子を使って、 `Tokens` の注入に使われる `OidcClient` を指定することができます。"

#, fuzzy
#~ msgid ""
#~ "@Provider\n"
#~ "@Priority(Priorities.AUTHENTICATION)\n"
#~ "@RequestScoped\n"
#~ "public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
#~ msgstr ""
#~ "@Provider\n"
#~ "@Priority(Priorities.AUTHENTICATION)\n"
#~ "public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"

#, fuzzy
#~ msgid ""
#~ "    @Inject\n"
#~ "    @NamedOidcClient(\"jwt-secret\")\n"
#~ "    Tokens tokens;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    Tokens tokens;\n"

#~ msgid ""
#~ "    @Override\n"
#~ "    public void filter(ClientRequestContext requestContext) throws IOException {\n"
#~ "        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @Override\n"
#~ "    public void filter(ClientRequestContext requestContext) throws IOException {\n"
#~ "        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
#~ "    }\n"
#~ "}\n"

#, fuzzy
#~ msgid "Use OidcClient in RestClient Reactive ClientFilter"
#~ msgstr "RestClientのReactive ClientFilterでのOidcClientの使用"

#, fuzzy
#~ msgid "Add the following Maven Dependency:"
#~ msgstr "テストプロジェクトに以下の依存関係を追加します。"

#, fuzzy
#~ msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
#~ msgstr "また、 `io.quarkus:quarkus-oidc-client` をもたらします。"

#, fuzzy
#~ msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
#~ msgstr "`quarkus-oidc-client-reactive-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` を提供します。"

#, fuzzy
#~ msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<oidc-client-filter, Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
#~ msgstr "`OidcClientRequestFilter` と同様に動作します（ link:#oidc-client-filter[Use OidcClient in MicroProfile RestClient client filter] 参照）。アクセストークンを取得するために `OidcClient` を使用し、必要に応じてリフレッシュし、HTTP `Authorization` `Bearer` スキーム値として設定します。違いは、 link:rest-client-reactive.html[Reactive RestClient]で動作し、トークンを取得またはリフレッシュするときに、現在のIOスレッドをブロックしないノンブロッキングクライアントフィルタを実装することです。"

#, fuzzy
#~ msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread and it currently can only be registered with `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation:"
#~ msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#, fuzzy
#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
#~ "import io.smallrye.mutiny.Uni;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"

#, fuzzy
#~ msgid "`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property."
#~ msgstr "`OidcClientRequestReactiveFilter` は、デフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は、 `quarkus.oidc-client-reactive-filter.client-name` の設定プロパティで選択できます。"

#, fuzzy
#~ msgid "Use OidcClient in RestClient ClientFilter"
#~ msgstr "RestClientのClientFilterでOidcClientを使用する。"

#~ msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
#~ msgstr "`quarkus-oidc-client-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。このフィルターは、`OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#~ msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
#~ msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、`quarkus.oidc-client.early-tokens-acquisition=false` でトークンの取得を遅延させるべきです。"

#~ msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
#~ msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.client.filter.OidcClientFilter;\n"

#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@OidcClientFilter\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@OidcClientFilter\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    String getUserName();\n"
#~ "}\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    String getUserName();\n"
#~ "}\n"

#~ msgid "or"
#~ msgstr "或いは"

#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@RegisterProvider(OidcClientRequestFilter.class)\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@RegisterProvider(OidcClientRequestFilter.class)\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#~ msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
#~ msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#, fuzzy
#~ msgid "`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property."
#~ msgstr "`OidcClientRequestFilter` は、デフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は、 `quarkus.oidc-client-filter.client-name` の設定プロパティで選択できます。"

#, fuzzy
#~ msgid "Use Custom RestClient ClientFilter"
#~ msgstr "カスタムRestClient ClientFilterの使用"

#~ msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
#~ msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#~ msgid ""
#~ "@Provider\n"
#~ "@Priority(Priorities.AUTHENTICATION)\n"
#~ "public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
#~ msgstr ""
#~ "@Provider\n"
#~ "@Priority(Priorities.AUTHENTICATION)\n"
#~ "public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"

#~ msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
#~ msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#, fuzzy
#~ msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
#~ msgstr "`Tokens` という名前で注入することもできます。「 link:#named-oidc-clients[Inject named OidcClient and Tokens]」を参照してください。"

#~ msgid "Refreshing Access Tokens"
#~ msgstr "アクセストークンの更新"

#, fuzzy
#~ msgid "`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.  Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
#~ msgstr "`OidcClientRequestReactiveFilter` 、 `OidcClientRequestFilter` 、 `Tokens` プロデューサーは、リフレッシュトークンが利用可能な場合、現在の期限切れアクセストークンをリフレッシュします。さらに、 `quarkus.oidc-client.refresh-token-time-skew` プロパティは、HTTP 401 エラーの原因となる期限切れ間近のアクセストークンの送信を避けるために、アクセストークンのリフレッシュを先取りするために使用できます。例えば、このプロパティが `3S` に設定されていて、アクセストークンが3秒以内に期限切れになる場合、このトークンは自動的にリフレッシュされます。"

#~ msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
#~ msgstr "アクセストークンの更新が必要なのにリフレッシュトークンがない場合は、 `client_credentials` のように設定されたグラントを使って新しいトークンの取得を試みます。"

#, fuzzy
#~ msgid "Please note that some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
#~ msgstr "OpenID Connect Providersの中には、 `client_credentials` grantレスポンスでリフレッシュトークンを返さないものがあることに注意してください。たとえば、Keycloak 12以降、 `client_credentials` ではデフォルトでリフレッシュ・トークンが返されません。また、プロバイダによっては、リフレッシュ・トークンの使用回数が制限されている場合があります。"

#~ msgid "OidcClient Authentication"
#~ msgstr "Oidcクライアント認証"

#, fuzzy
#~ msgid "`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
#~ msgstr "`OidcClient` 、 `client_credentials` 、その他のグラントリクエストを成功させるためには、OpenID Connect Providerに対して認証を行う必要があります。すべての link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDCクライアント認証]オプションがサポートされています（例）。"

#~ msgid "`client_secret_basic`:"
#~ msgstr "`client_secret_basic` ."

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=mysecret\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=mysecret\n"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=mysecret\n"

#, fuzzy
#~ msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
#~ msgstr "または link:credentials-provider.html[CredentialsProvider]から取得したシークレットを使用しています。"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#~ msgid "`client_secret_post`:"
#~ msgstr "`client_secret_post`:"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post\n"

#, fuzzy
#~ msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
#~ msgstr "`client_secret_jwt` 、署名アルゴリズムは `HS256` です。"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
#~ msgstr ""
#~ "quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#, fuzzy
#~ msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
#~ msgstr "または link:credentials-provider.html[CredentialsProvider]から取得した秘密を用いて、署名アルゴリズムを `HS256` 。"

#, fuzzy
#~ msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
#~ msgstr "`private_key_jwt` PEMキーファイルで、署名アルゴリズムは `RS256` 。"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#, fuzzy
#~ msgid "`private_key_jwt` with the key store file, signature algorithm is `RS256`:"
#~ msgstr "`private_key_jwt` キーストアファイルで、署名アルゴリズムは `RS256` です。"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
#~ "quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
#~ "quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post\n"

#, fuzzy
#~ msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
#~ msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントの秘密がワイヤー上を通過することはありません。"

#, fuzzy
#~ msgid "Additional JWT Authentication options"
#~ msgstr "JWT認証の追加オプション"

#, fuzzy
#~ msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
#~ msgstr "`client_secret_jwt` または `private_key_jwt` のいずれかの認証方法を使用する場合、JWT 署名アルゴリズム、キー識別子、オーディエンス、サブジェクト、および発行者をカスタマイズすることができます（例）。"

#, fuzzy
#~ msgid "# private_key_jwt client authentication\n"
#~ msgstr "Oidcクライアント認証"

#, fuzzy
#~ msgid "Apple POST JWT"
#~ msgstr "Apple POST JWT"

#, fuzzy
#~ msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject properties."
#~ msgstr "Apple OpenID Connect Provider は `client_secret_post` 方式を採用しており、secret は `private_key_jwt` 認証方式で作成された JWT であるが、Apple アカウント固有の issuer および subject プロパティを持つ。"

#, fuzzy
#~ msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
#~ msgstr "`quarkus-oidc-client` は、非標準の `client_secret_post_jwt` 認証方法をサポートしており、以下のように設定することができます。"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=${apple.url}\n"
#~ "quarkus.oidc-client.client-id=${apple.client-id}\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post-jwt\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.credentials.jwt.key-file=ecPrivateKey.pem\n"
#~ "quarkus.oidc-client.credentials.jwt.signature-algorithm=ES256\n"
#~ "quarkus.oidc-client.credentials.jwt.subject=${apple.subject}\n"
#~ "quarkus.oidc-client.credentials.jwt.issuer=${apple.issuer}\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post\n"

#, fuzzy
#~ msgid "Mutual TLS"
#~ msgstr "相互のTLS"

#, fuzzy
#~ msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`mTLS`) authentication process."
#~ msgstr "OpenID Connectプロバイダによっては、 `Mutual TLS` ( `MTLS`) 認証プロセスの一環として、クライアントの認証を要求する場合があります。"

#, fuzzy
#~ msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
#~ msgstr "`quarkus-oidc-client` は、 `MTLS` をサポートするために以下のように構成することができます。"

#~ msgid "Testing"
#~ msgstr "テスト"

#, fuzzy
#~ msgid "Start by adding the following dependencies to your test project:"
#~ msgstr "テストプロジェクトに以下の依存関係を追加します。"

#~ msgid "Wiremock"
#~ msgstr "Wiremock"

#~ msgid "Add the following dependencies to your test project:"
#~ msgstr "テストプロジェクトに以下の依存関係を追加します。"

#~ msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
#~ msgstr "Wiremockベースの `QuarkusTestResourceLifecycleManager` を例えば以下のように書きます。"

#~ msgid "package io.quarkus.it.keycloak;\n"
#~ msgstr "package io.quarkus.it.keycloak;\n"

#~ msgid ""
#~ "    @Override\n"
#~ "    public Map<String, String> start() {\n"
#~ msgstr ""
#~ "    @Override\n"
#~ "    public Map<String, String> start() {\n"

#~ msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
#~ msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#~ msgid "Set `application.properties`, for example:"
#~ msgstr "`application.properties` を次のように設定します。"

#, fuzzy
#~ msgid ""
#~ "# Use 'keycloak.url' property set by the test KeycloakRealmResourceManager\n"
#~ "quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
#~ "quarkus.oidc-client.discovery-enabled=false\n"
#~ "quarkus.oidc-client.token-path=/tokens\n"
#~ "quarkus.oidc-client.client-id=quarkus-service-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=password\n"
#~ "quarkus.oidc-client.grant-options.password.username=alice\n"
#~ "quarkus.oidc-client.grant-options.password.password=alice\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=password\n"
#~ "quarkus.oidc-client.grant-options.password.username=alice\n"
#~ "quarkus.oidc-client.grant-options.password.password=alice\n"

#~ msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
#~ msgstr "そして最後にテストコードを書きます。上記の Wiremock ベースのリソースがある場合、最初のテスト起動では `access_token_1` アクセストークンが返却されますが、このアクセストークンは 4 秒で期限切れになります。 `awaitility` を使用して約 5 秒間待つと、次のテスト起動時に `access_token_2` アクセストークンが返され、期限切れの `access_token_1` アクセストークンがリフレッシュされたことが確認できます。"

#~ msgid "Keycloak"
#~ msgstr "Keycloak"

#, fuzzy
#~ msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-openid-connect#integration-testing-keycloak.adoc[OpenID Connect Bearer Token Integration testing] Keycloak section."
#~ msgstr "Keycloakを使用している場合は、 link:security-openid-connect.html#integration-testing-keycloak.adoc[OpenID Connect Bearer Token Integration testing] `Keycloak` のセクションで説明されているのと同じ方法を使用できます。"

#~ msgid "How to check the errors in the logs"
#~ msgstr "ログでエラーを確認する方法"

#, fuzzy
#~ msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
#~ msgstr "`io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` レベルのロギングを有効にして、トークンの取得とリフレッシュのエラーについての詳細を確認してください。"

#, fuzzy
#~ msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
#~ msgstr "OidcClientの初期化エラーの詳細を確認するには、 `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` レベルのロギングを有効にしてください。"

#~ msgid "Token Propagation"
#~ msgstr "トークンの伝播"

#, fuzzy
#~ msgid "The `quarkus-oidc-token-propagation` extension provides two JAX-RS `javax.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.  `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-openid-connect.adoc[Bearer] token present in the current active request or the token acquired from the xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow], as the HTTP `Authorization` header's `Bearer` scheme value.  The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
#~ msgstr "`quarkus-oidc-token-propagation` エクステンションは、認証情報の伝搬を簡略化する2つのJAX-RS `javax.ws.rs.client.ClientRequestFilter` クラスの実装を提供しています。 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` は、現在のアクティブなリクエストに存在する link:security-openid-connect.html[Bearer]トークン、または link:security-openid-connect-web-authentication.html[Authorization Code Flow]から取得したトークンを、HTTP `Authorization` ヘッダーの `Bearer` スキーム値として伝搬します。 `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` は、同じ機能を提供しますが、加えて JWT トークンをサポートします。"

#, fuzzy
#~ msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
#~ msgstr "現在のAuthorization Code Flowアクセストークンを伝搬させる必要がある場合は、即時のトークン伝搬がうまくいきます。"

#, fuzzy
#~ msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
#~ msgstr "しかし、エンド・ツー・エンドでベアラー・トークンを直接伝搬させることは、可能な限り避けるべきです。例えば、 `Client → Service A → Service B` 、 `Client` が `Service A` に送ったトークンを `Service B` が受け取るような場合です。このような場合、 `Service B` は、トークンが `Service A` から来たのか、それとも `Client` から直接来たのかを区別することができません。 `Service B` がトークンが `Service A` から来たものであることを確認するためには、新しい発行者と視聴者の主張を行うことができなければなりません。"

#, fuzzy
#~ msgid "Additionally, a complex application may need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or a completely different set of scopes to access `Service B`."
#~ msgstr "さらに、複雑なアプリケーションでは、トークンを伝播する前に、トークンを交換または更新する必要があるかもしれません。例えば、 `Service A` が `Service B` にアクセスしているときに、アクセス・コンテキストが異なる場合があります。この場合、 `Service A` は、 `Service B` にアクセスするためのスコープが狭くなったり、全く異なるスコープが付与されたりするかもしれません。"

#, fuzzy
#~ msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
#~ msgstr "以下のセクションでは、 `AccessTokenRequestFilter` と `JsonWebTokenRequestFilter` がどのように役立つかを紹介します。"

#, fuzzy
#~ msgid "RestClient AccessTokenRequestFilter"
#~ msgstr "アクセストークンの更新"

#~ msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
#~ msgstr "`AccessTokenRequestFilter` は、すべてのトークンをStringとして扱うため、JWTトークンと不透明なトークンの両方を扱うことができます。"

#~ msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
#~ msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@AccessToken\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@AccessToken\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"

#~ msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
#~ msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#, fuzzy
#~ msgid "Exchange Token Before Propagation"
#~ msgstr "伝播前のトークンの交換"

#, fuzzy
#~ msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
#~ msgstr "伝播する前に現在のアクセストークンを交換する必要があり、 link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak]や link:https://tools.ietf.org/html/rfc8693[Token Exchange]トークングラントをサポートする他のOpenID Connect Providerを使用している場合、 `AccessTokenRequestFilter` を以下のように設定できます。"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=exchange\n"
#~ "quarkus.oidc-client.grant-options.exchange.audience=quarkus-app-exchange\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=password\n"
#~ "quarkus.oidc-client.grant-options.password.username=alice\n"
#~ "quarkus.oidc-client.grant-options.password.password=alice\n"

#, fuzzy
#~ msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
#~ msgstr "注意 `AccessTokenRequestFilter` は、 `OidcClient` を使用して現在のトークンを交換し、 `quarkus.oidc-client.grant-options.exchange` を使用して OpenID Connect プロバイダが期待する追加の交換プロパティを設定することができます。"

#, fuzzy
#~ msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
#~ msgstr "`AccessTokenRequestFilter` は、デフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は、 `quarkus.oidc-token-propagation.client-name` の設定プロパティで選択できます。"

#, fuzzy
#~ msgid "RestClient JsonWebTokenRequestFilter"
#~ msgstr "RestClient JsonWebTokenRequestFilter"

#, fuzzy
#~ msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
#~ msgstr "`JsonWebTokenRequestFilter` を使用することは、ベアラ JWT トークンを扱う場合に推奨されます。これらのトークンは、 `issuer` や `audience` などのクレームを修正し、更新されたトークンを再度保護することができます（例えば、再署名）。これは、注入された `org.eclipse.microprofile.jwt.JsonWebToken` を想定しているため、不透明なトークンでは動作しません。また、OpenID ConnectプロバイダがToken Exchangeプロトコルをサポートしている場合は、代わりに `AccessTokenRequestFilter` を使用することをお勧めします。JWTトークンと不透明なベアラートークンの両方が、 `AccessTokenRequestFilter` で安全に交換できるからです。"

#, fuzzy
#~ msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
#~ msgstr "`JsonWebTokenRequestFilter` は、 `Service A` の実装が、注入された `org.eclipse.microprofile.jwt.JsonWebToken` を新しい `issuer` と `audience` の主張値で更新し、更新されたトークンを新しい署名で再度保護することを容易にします。唯一の難しいステップは、 `Service A` に署名鍵があることを確認することです。署名鍵は、安全なファイルシステムまたは Vault などのリモートの安全なストレージからプロビジョニングする必要があります。"

#~ msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
#~ msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.JsonWebToken;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.JsonWebToken;\n"

#, fuzzy
#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@JsonWebToken\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@AccessToken\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"

#, fuzzy
#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@RegisterProvider(JsonWebTokenRequestFilter.class)\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@RegisterProvider(AccessTokenRequestFilter.class)\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#, fuzzy
#~ msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
#~ msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#, fuzzy
#~ msgid "Update Token Before Propagation"
#~ msgstr "伝播前のトークンの更新"

#, fuzzy
#~ msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
#~ msgstr "注入されたトークンが、その `iss` （発行者）および/または `aud` （オーディエンス）の主張を更新し、新しい署名で再度安全性を確保する必要がある場合は、 `JsonWebTokenRequestFilter` を以下のように構成することができます。"

#~ msgid ""
#~ "quarkus.oidc-token-propagation.secure-json-web-token=true\n"
#~ "smallrye.jwt.sign.key.location=/privateKey.pem\n"
#~ "# Set a new issuer\n"
#~ "smallrye.jwt.new-token.issuer=http://frontend-resource\n"
#~ "# Set a new audience\n"
#~ "smallrye.jwt.new-token.audience=http://downstream-resource\n"
#~ "# Override the existing token issuer and audience claims if they are already set\n"
#~ "smallrye.jwt.new-token.override-matching-claims=true\n"
#~ msgstr ""
#~ "quarkus.oidc-token-propagation.secure-json-web-token=true\n"
#~ "smallrye.jwt.sign.key.location=/privateKey.pem\n"
#~ "# Set a new issuer\n"
#~ "smallrye.jwt.new-token.issuer=http://frontend-resource\n"
#~ "# Set a new audience\n"
#~ "smallrye.jwt.new-token.audience=http://downstream-resource\n"
#~ "# Override the existing token issuer and audience claims if they are already set\n"
#~ "smallrye.jwt.new-token.override-matching-claims=true\n"

#, fuzzy
#~ msgid "As already noted above, please use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider which supports a Token Exchange protocol."
#~ msgstr "すでに述べたように、Token ExchangeプロトコルをサポートするKeycloakまたはOpenID Connect Providerを使用している場合は、 `AccessTokenRequestFilter` を使用してください。"

#, fuzzy
#~ msgid "You can generate the tokens as described in xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
#~ msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#, fuzzy
#~ msgid "Token Propagation Reactive"
#~ msgstr "トークンの伝播"

#, fuzzy
#~ msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
#~ msgstr "`quarkus-oidc-token-propagation` 現在の `Bearer` または `Authorization Code Flow` のアクセストークンを伝搬させるためのエクステンション"

#, fuzzy
#~ msgid "The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning the tokens before the propagation.  However these features may be added in the future."
#~ msgstr "`quarkus-oidc-token-propagation-reactive` 拡張機能（非反応性の `quarkus-oidc-token-propagation` 拡張機能とは対照的に）は、現在のところ、伝播の前にトークンを交換したり辞めたりすることをサポートしていません。しかし、これらの機能は将来的に追加される可能性があります。"

#, fuzzy
#~ msgid "xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
#~ msgstr "link:security-openid-connect-web-authentication.html[Quarkus - OpenID Connectを使用した認証コードフローによるWebアプリケーションの保護]"

#~ msgid "In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
#~ msgstr "どちらの場合も、 `OidcClient` はトークンのエンドポイントURLを自動検出し、それを使ってトークンを取得します。"

#~ msgid "See also the previous section about delaying the token acquisition in some cases."
#~ msgstr "トークンの取得を遅らせる場合があることについては、前のセクションも参照してください。"

#~ msgid "`client_secret_jwt`:"
#~ msgstr "`client_secret_jwt`:"

#~ msgid "Token Propagation in MicroProfile RestClient client filter"
#~ msgstr "MicroProfile RestClient クライアントフィルターでのトークンの伝播"

#~ msgid "`quarkus-oidc-token-propagation` extension provide `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` and `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` JAX-RS ClientRequestFilters which propagates the current link:security-openid-connect[Bearer] or link:security-openid-connect-web-authentication[Authorization Code Flow] access token as an HTTP `Authorization` `Bearer` scheme value."
#~ msgstr "`quarkus-oidc-token-propagation` エクステンションは、 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` と `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` JAX-RS ClientRequestFilters を提供します。これは、現在のベアラーまたは認証コードフローのアクセストークンを HTTP `Authorization` `Bearer` スキーム値として伝播します。"

#~ msgid "This filter will be additionally enhanced in the future to support exchanging the access tokens before propagating them."
#~ msgstr "このフィルタは将来的に強化され、アクセストークンを伝播する前に再署名や交換をサポートするようになる予定です。"
