# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2023-04-26 14:56+0000\n"
"PO-Revision-Date: 2023-04-21 16:06+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-client.adoc:6
#, no-wrap
msgid "OpenID Connect Client and Token Propagation Quickstart"
msgstr "OpenID Connect Client と Token Propagation のクイックスタート"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:12
msgid "This quickstart demonstrates how to use `OpenID Connect Client Reactive Filter` to acquire and propagate access tokens as `HTTP Authorization Bearer` access tokens, alongside `OpenID Token Propagation Reactive Filter` which propagates the incoming `HTTP Authorization Bearer` access tokens."
msgstr "このクイックスタートでは、`OpenID Connect Client Reactive Filter` を使用して、アクセストークンを `HTTP Authorization Bearer` アクセストークンとして取得および伝播する方法と、受信した `HTTP Authorization Bearer` アクセストークンを伝播する `OpenID Token Propagation Reactive Filter` を使用する方法を示します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:14
msgid "Please check xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide] for all the information related to `Oidc Client` and `Token Propagation` support in Quarkus."
msgstr "Quarkus の `Oidc Client` および `Token Propagation` のサポートに関する詳細は、xref:security-openid-connect-client-reference.adoc[OpenID Connect Client と Token Propagation のリファレンスガイド] を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:16
msgid "Please also read xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer authentication] guide if you need to protect your applications using Bearer Token Authorization."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:22
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:23
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:26
msgid "In this example, we will build an application which consists of two Jakarta REST resources, `FrontendResource` and `ProtectedResource`. `FrontendResource` propagates access tokens to `ProtectedResource` and uses either `OpenID Connect Client Reactive Filter` to acquire a token first before propagating it or `OpenID Token Propagation Reactive Filter` to propagate the incoming, already existing access token."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:28
msgid "`FrontendResource` has 4 endpoints:"
msgstr "`FrontendResource` には 4 つのエンドポイントがあります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:30
msgid "`/frontend/user-name-with-oidc-client-token`"
msgstr "`/frontend/user-name-with-oidc-client-token`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:31
msgid "`/frontend/admin-name-with-oidc-client-token`"
msgstr "`/frontend/admin-name-with-oidc-client-token`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:32
msgid "`/frontend/user-name-with-propagated-token`"
msgstr "`/frontend/user-name-with-propagated-token`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:33
msgid "`/frontend/admin-name-with-propagated-token`"
msgstr "`/frontend/admin-name-with-propagated-token`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:35
#: upstream/_guides/security-openid-connect-client.adoc:268
msgid "`FrontendResource` will use REST Client with `OpenID Connect Client Reactive Filter` to acquire and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called. And it will use REST Client with `OpenID Connect Token Propagation Reactive Filter` to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr "`FrontendResource` は、`/frontend/user-name-with-oidc-client` または `/frontend/admin-name-with-oidc-client` が呼び出された場合、REST Client と `OpenID Connect Client Reactive Filter` を使用して、`ProtectedResource` へのアクセストークンを取得および伝播します。また、`/frontend/user-name-with-propagated-token` もしくは `/frontend/admin-name-with-propagated-token` が呼び出されると、REST Client と `OpenID Connect Token Propagation Reactive Filter` を使用して、`ProtectedResource` への現在の受信アクセストークンを伝播します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:37
msgid "`ProtecedResource` has 2 endpoints:"
msgstr "`ProtecedResource` には 2 つのエンドポイントがあります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:39
msgid "`/protected/user-name`"
msgstr "`/protected/user-name`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:40
msgid "`/protected/admin-name`"
msgstr "`/protected/admin-name`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:42
msgid "Both of these endpoints return the username extracted from the incoming access token which was propagated to `ProtectedResource` from `FrontendResource`. The only difference between these endpoints is that calling `/protected/user-name` is only allowed if the current access token has a `user` role and calling `/protected/admin-name` is only allowed if the current access token has an `admin` role."
msgstr "これらのエンドポイントはどちらも、`FrontendResource` から `ProtectedResource` に伝搬された受信アクセストークンから抽出したユーザー名を返します。これらのエンドポイントの唯一の違いは、`/protected/user-name` の呼び出しは、現在のアクセストークンが `user` ロールを持つ場合にのみ許可され、`/protected/admin-name` の呼び出しは、現在のアクセストークンが `admin` ロールを持つ場合のみ許可されることです。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:43
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:47
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:49
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする: `git clone {quickstarts-clone-url}` または {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:51
msgid "The solution is located in the `security-openid-connect-client-quickstart` {quickstarts-tree-url}/security-openid-connect-client-quickstart[directory]."
msgstr "ソリューションは `security-openid-connect-client-quickstart` {quickstarts-tree-url}/security-openid-connect-client-quickstart[ディレクトリー] にあります。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:52
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Maven プロジェクトの作成"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:55
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:61
msgid "This command generates a Maven project, importing the `oidc`, `oidc-client-reactive-filter`, `oidc-token-propagation-reactive-filter` and `resteasy-reactive` extensions."
msgstr "このコマンドは、`oidc`、`oidc-client-reactive-filter`、`oidc-token-propagation-reactive-filter` 、`resteasy-reactive` エクステンションをインポートして Maven プロジェクトを生成します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:63
msgid "If you already have your Quarkus project configured, you can add these extensions to your project by running the following command in your project base directory:"
msgstr "すでに Quarkus プロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトにこれらのエクステンションを追加できます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:68
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_guides/security-openid-connect-client.adoc:70
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:88
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-openid-connect-client.adoc:91
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:94
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc,oidc-client-reactive-filter,oidc-token-propagation-reactive,resteasy-reactive\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:96
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:99
msgid "Let's start by implementing `ProtectedResource`:"
msgstr "まずは `ProtectedResource` を実装することから始めましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:103
#: upstream/_guides/security-openid-connect-client.adoc:147
#: upstream/_guides/security-openid-connect-client.adoc:180
#: upstream/_guides/security-openid-connect-client.adoc:217
#: upstream/_guides/security-openid-connect-client.adoc:274
#, no-wrap
msgid "package org.acme.security.openid.connect.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:109
#, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:112
#, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:114
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:118
#, no-wrap
msgid ""
"@Path(\"/protected\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:121
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:129
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    public Uni<String> userName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:138
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    public Uni<String> adminName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:141
msgid "As you can see `ProtectedResource` returns a name from both `userName()` and `adminName()` methods. The name is extracted from the current `JsonWebToken`."
msgstr "ご覧のとおり、`ProtectedResource` は `userName()` と `adminName()` の両方のメソッドから名前を返します。この名前は、現在の `JsonWebToken` から抽出されたものです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:143
msgid "Next let's add a REST Client with `OidcClientRequestReactiveFilter` and another REST Client with `AccessTokenRequestReactiveFilter`. `FrontendResource` will use these two clients to call `ProtectedResource`:"
msgstr "次に、 `OidcClientRequestReactiveFilter` のRESTクライアントと、 `AccessTokenRequestReactiveFilter` のRESTクライアントを追加しましょう。 `FrontendResource` は、この2つのクライアントを使用して、 `ProtectedResource` を呼び出します："

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:151
#: upstream/_guides/security-openid-connect-client.adoc:184
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:154
#: upstream/_guides/security-openid-connect-client.adoc:187
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:157
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:162
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface RestClientWithOidcClientFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:167
#: upstream/_guides/security-openid-connect-client.adoc:200
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    Uni<String> getUserName();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:173
#: upstream/_guides/security-openid-connect-client.adoc:206
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    Uni<String> getAdminName();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:176
msgid "where `RestClientWithOidcClientFilter` will depend on `OidcClientRequestReactiveFilter` to acquire and propagate the tokens and"
msgstr "`RestClientWithOidcClientFilter` では、 `OidcClientRequestReactiveFilter` に依存して、トークンを獲得し、伝播させ、"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:190
#, no-wrap
msgid ""
"import io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:195
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface RestClientWithTokenPropagationFilter {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:209
msgid "where `RestClientWithTokenPropagationFilter` will depend on `AccessTokenRequestReactiveFilter` to propagate the incoming, already existing tokens."
msgstr "`RestClientWithTokenPropagationFilter` では `AccessTokenRequestReactiveFilter` に依存して、着信した、すでに存在するトークンを伝播させることになります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:211
msgid "Note that both `RestClientWithOidcClientFilter` and `RestClientWithTokenPropagationFilter` interfaces are identical - the reason behind it is that combining `OidcClientRequestReactiveFilter` and `AccessTokenRequestReactiveFilter` on the same REST Client will cause side effects as both filters can interfere with other, for example, `OidcClientRequestReactiveFilter` may override the token propagated by `AccessTokenRequestReactiveFilter` or `AccessTokenRequestReactiveFilter` can fail if it is called when no token is available to propagate and `OidcClientRequestReactiveFilter` is expected to acquire a new token instead."
msgstr "`RestClientWithOidcClientFilter` と `RestClientWithTokenPropagationFilter` の両方のインターフェースが同一であることに注意してください。その理由は、同じ REST Client で `OidcClientRequestReactiveFilter` と `AccessTokenRequestReactiveFilter` を組み合わせると、両方のフィルターが互いに干渉し合って副作用が発生するからです、 例えば、 `OidcClientRequestReactiveFilter` は `AccessTokenRequestReactiveFilter` によって伝播されたトークンを上書きするかもしれませんし、 `AccessTokenRequestReactiveFilter` は伝播できるトークンがないときに呼ばれると失敗するかもしれませんが、代わりに `OidcClientRequestReactiveFilter` には新しいトークンを取得することが期待されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:213
msgid "Now let's complete creating the application with adding `FrontendResource`:"
msgstr "それでは、`FrontendResource` を追加して、アプリケーションの作成を完了しましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:222
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:224
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:226
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:232
#, no-wrap
msgid ""
"@Path(\"/frontend\")\n"
"public class FrontendResource {\n"
"    @Inject\n"
"    @RestClient\n"
"    RestClientWithOidcClientFilter restClientWithOidcClientFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:236
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    RestClientWithTokenPropagationFilter restClientWithTokenPropagationFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:243
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"user-name-with-oidc-client-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getUserNameWithOidcClientToken() {\n"
"        return restClientWithOidcClientFilter.getUserName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:250
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"admin-name-with-oidc-client-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getAdminNameWithOidcClientToken() {\n"
"\t    return restClientWithOidcClientFilter.getAdminName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:257
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"user-name-with-propagated-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getUserNameWithPropagatedToken() {\n"
"        return restClientWithTokenPropagationFilter.getUserName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:265
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"admin-name-with-propagated-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getAdminNameWithPropagatedToken() {\n"
"        return restClientWithTokenPropagationFilter.getAdminName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:270
msgid "Finally, let's add a Jakarta REST `ExceptionMapper`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:278
#, no-wrap
msgid ""
"import jakarta.ws.rs.core.Response;\n"
"import jakarta.ws.rs.ext.ExceptionMapper;\n"
"import jakarta.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:280
#, no-wrap
msgid "import org.jboss.resteasy.reactive.ClientWebApplicationException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:283
#, no-wrap
msgid ""
"@Provider\n"
"public class FrontendExceptionMapper implements ExceptionMapper<ClientWebApplicationException> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:288
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Response toResponse(ClientWebApplicationException t) {\n"
"\t\treturn Response.status(t.getResponse().getStatus()).build();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:290
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:293
msgid "This exception mapper is only added to verify during the tests that `ProtectedResource` returns `403` when the token has no expected role. Without this mapper `RESTEasy Reactive` will correctly convert the exceptions which will escape from REST Client calls to `500` to avoid leaking the information from the downstream resources such as `ProtectedResource` but in the tests it will not be possible to assert that `500` is in fact caused by an authorization exception as opposed to some internal error."
msgstr "この例外マッパーは、トークンに期待されるロールがない場合に `ProtectedResource` が 403 を返すことをテスト中に検証するためにのみ追加されます。このマッパーがないと、`RESTEasy Reactive` は、REST クライアント呼び出しからエスケープされる例外を `500` に正しく変換して、`ProtectedResource` などのダウンストリームリソースからの情報漏えいを回避しますが、テストでは `500` が実際は内部エラーではなく、認可例外が原因であることをアサートすることはできません。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:294
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:297
msgid "We have prepared the code, and now let's configure the application:"
msgstr "コードの準備ができたので、次はアプリケーションを設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:301
#, no-wrap
msgid "# Configure OIDC\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:305
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
"quarkus.oidc.credentials.secret=secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:308
#, no-wrap
msgid ""
"# Tell Dev Services for Keycloak to import the realm file\n"
"# This property is not effective when running the application in JVM or Native modes but only in dev and test modes.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:310
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:312
#, no-wrap
msgid "# Configure OIDC Client\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:319
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${quarkus.oidc.auth-server-url}\n"
"quarkus.oidc-client.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:321
#, no-wrap
msgid "# Configure REST Clients\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:325
#, no-wrap
msgid ""
"%prod.port=8080\n"
"%dev.port=8080\n"
"%test.port=8081\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:328
#, no-wrap
msgid ""
"org.acme.security.openid.connect.client.RestClientWithOidcClientFilter/mp-rest/url=http://localhost:${port}/protected\n"
"org.acme.security.openid.connect.client.RestClientWithTokenPropagationFilter/mp-rest/url=http://localhost:${port}/protected\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:331
msgid "This configuration references Keycloak which will be used by `ProtectedResource` to verify the incoming access tokens and by `OidcClient` to get the tokens for a user `alice` using a `password` grant. Both RESTClients point to `ProtectedResource`'s HTTP address."
msgstr "この設定は Keycloak を参照します。この Keycloak は、受信アクセストークンを検証するために `ProtectedResource` によって使用され、`password` グラントを使用してユーザー `alice` のトークンを取得するために `OidcClient` によって使用されます。どちらの RESTClient も `ProtectedResource` の HTTP アドレスを指しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:333
msgid "Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` will launch a container for you when the application is run in dev or test modes. See xref:keycloak-dev-mode[Running the Application in Dev mode] section below for more information."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:334
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloak サーバーの起動と設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:337
msgid "Do not start the Keycloak server when you run the application in dev mode or test modes - `Dev Services for Keycloak` will launch a container. See xref:keycloak-dev-mode[Running the Application in Dev mode] section below for more information. Make sure to put the {quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath (`target/classes` directory) so that it gets imported automatically when running in dev mode - unless you have already built a {quickstarts-tree-url}/security-openid-connect-quickstart[complete solution] in which case this realm file will be added to the classpath during the build."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:339
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:343
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:346
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、`keycloak.version` は `17.0.0` 以上に設定する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:348
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "http://localhost:8180[localhost:8180] で Keycloak サーバーにアクセスできるはずです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:350
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:352
msgid "Import the {quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "新しいレルムを作成するには、 {quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[レルム設定ファイル] をインポートします。 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムを作成する] 方法について詳しくはKeycloakのドキュメントを参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:354
msgid "This `quarkus` realm file will add a `frontend` client, and `alice` and `admin` users. `alice` has a `user` role, `admin` - both `user` and `admin` roles."
msgstr "この `quarkus` レルムファイルでは、`frontend` クライアントと、`alice` および `admin` ユーザーが追加されます。`alice` は `user` ロールを持ち、`admin` は `user` と `admin` の両方のロールを持ちます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:356
#, no-wrap
msgid "Running the Application in Dev mode"
msgstr "開発モードでのアプリケーションの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:359
msgid "To run the application in a dev mode, use:"
msgstr "アプリケーションを開発モードで実行するには、次を使用します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:363
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] will launch a Keycloak container and import a `quarkus-realm.json`."
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] は、Keycloak コンテナーを起動し、`quarkus-realm.json` をインポートします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:365
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev-v1[/q/dev-v1] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:367
msgid "You will be asked to log in into a `Single Page Application` provided by `OpenID Connect Dev UI`:"
msgstr "`OpenID Connect Dev UI` が提供する `Single Page Application` へのログインを求められます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:369
msgid "Login as `alice` (password: `alice`) who has a `user` role"
msgstr "`user` のロールを持つ `alice` (パスワード: `alice`) としてログインします"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:370
#: upstream/_guides/security-openid-connect-client.adoc:373
msgid "accessing `/frontend/user-name-with-propagated-token` will return `200`"
msgstr "`/frontend/user-name-with-propagated-token` にアクセスすると `200` が返されます"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:371
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `403`"
msgstr "`/frontend/admin-name-with-propagated-token` にアクセスすると `403` が返されます"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:372
msgid "Logout and login as `admin` (password: `admin`) who has both `admin` and `user` roles"
msgstr "ログアウトし、`admin` と `user` ロールの両方を持つ `admin` (パスワード: `admin`) としててログインします"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:374
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `200`"
msgstr "`/frontend/admin-name-with-propagated-token` にアクセスすると `200` が返されます"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:376
msgid "In this case you are testing that `FrontendResource` can propagate the access tokens acquired by `OpenID Connect Dev UI`."
msgstr "この場合、`FrontendResource` が `OpenID Connect Dev UI` により取得されたアクセストークンを伝搬できるかどうかをテストしています。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:377
#, no-wrap
msgid "Running the Application in JVM mode"
msgstr "JVM モードでのアプリケーションの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:380
msgid "When you're done playing with the `dev` mode\" you can run it as a standard Java application."
msgstr "「`dev` モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:382
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:386
msgid "Then run it:"
msgstr "次に、以下を実行してください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:390
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:392
#, no-wrap
msgid "Running the Application in Native Mode"
msgstr "ネイティブモードでのアプリケーションの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:395
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:399
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:402
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:406
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:410
#, no-wrap
msgid "./target/security-openid-connect-quickstart-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:412
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:415
msgid "See xref:keycloak-dev-mode[Running the Application in Dev mode] section above about testing your application in dev mode."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:417
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "`curl` を使用して、JVM またはネイティブモードで起動したアプリケーションをテストできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:419
msgid "Obtain an access token for `alice`:"
msgstr "`alice` のアクセストークンを取得します:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:428
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:431
msgid "Now use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "このトークンを使用して、`/frontend/user-name-with-propagated-token` と `/frontend/admin-name-with-propagated-token` を呼び出します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:437
#: upstream/_guides/security-openid-connect-client.adoc:469
#, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/user-name-with-propagated-token \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:440
msgid "will return `200` status code and the name `alice` while"
msgstr "ステータスコード `200` と名前 `alice` を返します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:446
#: upstream/_guides/security-openid-connect-client.adoc:478
#, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/admin-name-with-propagated-token \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:449
msgid "will return `403` - recall that `alice` only has a `user` role."
msgstr "`403` を返します - `alice` には `user` ロールしかないことを思い出してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:451
msgid "Next obtain an access token for `admin`:"
msgstr "次に `admin` 用のアクセストークンを取得します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:460
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:463
msgid "and use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "このトークンを使用して、`/frontend/user-name-with-propagated-token` と `/frontend/admin-name-with-propagated-token` を呼び出します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:472
msgid "will return `200` status code and the name `admin`, and"
msgstr "ステータスコード `200` と名前 `alice` を返します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:481
msgid "will also return `200` status code and the name `admin`, as `admin` has both `user` and `admin` roles."
msgstr "`admin` には `user` ロールと `admin` ロールの両方があるため、`200` ステータスコードと名前 `admin` を返します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:484
msgid "Now let's check `FrontendResource` methods which do not propagate the existing tokens but use `OidcClient` to acquire and propagate the tokens. You have seen that `OidcClient` is configured to acquire the tokens for the `alice` user, so:"
msgstr "ここで、既存のトークンは伝播しないが、`OidcClient` を使用してトークンを取得および伝播する `FrontendResource` メソッドを見てみましょう。`OidcClient` は `alice` ユーザーのトークンを取得するように設定されています。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:489
#, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/user-name-with-oidc-client-token\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:492
msgid "will return `200` status code and the name `alice`, but"
msgstr "ステータスコード `200` と名前 `alice` を返します"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:497
#, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/admin-name-with-oidc-client-token\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:500
msgid "will return `403` status code."
msgstr "ステータスコード `403` を返します。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:501
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:504
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client と Token Propagation のリファレンスガイド]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:505
msgid "xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer authentication]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:505
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"

#~ msgid "Please also read xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to protect your applications using Bearer Token Authorization."
#~ msgstr "ベアラートークン認証を使用してアプリケーションを保護する必要がある場合は、xref:security-openid-connect.adoc[OpenID Connect を使用した、サービスアプリケーションの保護] ガイドもお読みください。"

#~ msgid "In this example, we will build an application which consists of two JAX-RS resources, `FrontendResource` and `ProtectedResource`. `FrontendResource` propagates access tokens to `ProtectedResource` and uses either `OpenID Connect Client Reactive Filter` to acquire a token first before propagating it or `OpenID Token Propagation Reactive Filter` to propagate the incoming, already existing access token."
#~ msgstr "この例では、`FrontendResource` と `ProtectedResource` という 2 つの JAX-RS リソースで構成されるアプリケーションを作成します。FrontendResource` は、`OpenID Connect Client Reactive Filter` を使用してアクセストークンを取得してからそれを伝播するか、`OpenID Token Propagation Reactive Filter` を使用して受信した既存のアクセストークンを伝播して、アクセストークンを `ProtectedResource` に伝播します。"

#~ msgid "Finally, let's add a JAX-RS `ExceptionMapper`:"
#~ msgstr "最後に、JAX-RS の `ExceptionMapper` を追加します。"

#~ msgid "Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` will launch a container for you when the application is run in dev or test modes. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information."
#~ msgstr "`quarkus.oidc.auth-server-url` に `%prod.` プロファイル接頭辞を追加すると、アプリケーションが開発モードまたはテストモードで実行されているときに、`Dev Services for Keycloak` がコンテナーを起動するようになります。詳細については、以下の <<keycloak-dev-mode, 開発モードでのアプリケーションの実行>> セクションを参照してください。"

#~ msgid "Do not start the Keycloak server when you run the application in dev mode or test modes - `Dev Services for Keycloak` will launch a container. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information. Make sure to put the {quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath (`target/classes` directory) so that it gets imported automatically when running in dev mode - unless you have already built a {quickstarts-tree-url}/security-openid-connect-quickstart[complete solution] in which case this realm file will be added to the classpath during the build."
#~ msgstr "アプリケーションを開発モードまたはテストモードで実行しているときは、Keycloak サーバーを起動しないでください。`Dev Services for Keycloak` はコンテナーを起動します。詳細については、以下の <<keycloak-dev-mode, 開発モードでのアプリケーションの実行>> セクションを参照してください。{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[レルム設定ファイル] をクラスパス (`target/classes` ディレクトリー) に配置して、開発モードで実行しているときに自動的にインポートされるようにします (すでに {quickstarts-tree-url}/security-openid-connect-quickstart[完全なソリューション] をビルドしている場合を除く (このレルムファイルはビルド時にクラスパスに追加されます))。"

#~ msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev[/q/dev] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
#~ msgstr "http://localhost:8080/q/dev[/q/dev] で入手可能な xref:dev-ui.adoc[Dev UI] を開き、`OpenID Connect` `Dev UI` の `Provider: Keycloak` リンクをクリックします。"

#~ msgid "See <<keycloak-dev-mode, Running the Application in Dev mode>> section above about testing your application in dev mode."
#~ msgstr "開発モードでのアプリケーションのテストについては、上記の <<keycloak-dev-mode, 開発モードでのアプリケーションの実行>> セクションを参照してください。"

#~ msgid "xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications]"
#~ msgstr "xref:security-openid-connect.adoc[OpenID Connect を使用した、サービスアプリケーションの保護]"

#~ msgid ""
#~ "import javax.inject.Inject;\n"
#~ "import javax.ws.rs.GET;\n"
#~ "import javax.ws.rs.Path;\n"
#~ "import javax.ws.rs.Produces;\n"
#~ "import javax.ws.rs.WebApplicationException;\n"
#~ msgstr ""
#~ "import javax.inject.Inject;\n"
#~ "import javax.ws.rs.GET;\n"
#~ "import javax.ws.rs.Path;\n"
#~ "import javax.ws.rs.Produces;\n"
#~ "import javax.ws.rs.WebApplicationException;\n"

#~ msgid "Using OpenID Connect (OIDC) and OAuth2 Client and Filters to manage access tokens"
#~ msgstr "OpenID Connect (OIDC)、OAuth2 クライアントおよびフィルターを使用したアクセストークンの管理"

#~ msgid "This guide explains how to use:"
#~ msgstr "このガイドでは、以下の使用方法について解説しています。"

#~ msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org[Keycloak]"
#~ msgstr "`quarkus-oidc-client`、`quarkus-oidc-client-reactive-filter`、および `quarkus-oidc-client-filter` エクステンションを使用して、OpenId Connect および https://www.keycloak.org[Keycloak] などの OAuth 2.0 準拠の認可サーバーからアクセストークンを取得し、更新する方法"

#~ msgid "`quarkus-oidc-token-propagation` and `quarkus-oidc-token-propagation-reactive` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
#~ msgstr "`quarkus-oidc-token-propagation`および`quarkus-oidc-token-propagation-reactive` エクステンションを使用して、現在の `Bearer` または `Authorization Code Flow` アクセストークンを伝播する方法"

#~ msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
#~ msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#~ msgid "OidcClient"
#~ msgstr "OidcClient"

#~ msgid "Add the following dependency:"
#~ msgstr "以下の依存関係を追加します。"

#~ msgid ""
#~ "<dependency>\n"
#~ "    <groupId>io.quarkus</groupId>\n"
#~ "    <artifactId>quarkus-oidc-client</artifactId>\n"
#~ "</dependency>\n"
#~ msgstr ""
#~ "<dependency>\n"
#~ "    <groupId>io.quarkus</groupId>\n"
#~ "    <artifactId>quarkus-oidc-client</artifactId>\n"
#~ "</dependency>\n"

#~ msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
#~ msgstr "`quarkus-oidc-client` エクステンションは、SmallRye Mutiny `Uni` および `Vert.xWebClient` を使用してトークンを取得および更新するために使用できるリアクティブな `io.quarkus.oidc.client.OidcClient` を提供します。"

#~ msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using the token grants such as `client_credentials` or `password` and refresh the tokens using a `refresh_token` grant."
#~ msgstr "`OidcClient` は自動検出または手動で構成することができる IDP トークンのエンドポイント URL でビルド時に初期化され、このエンドポイントを使用して `client_credentials` または `password` トークングラントを使用してアクセストークンを取得し、`refresh_token` グラントを使用してトークンを更新します。"

#~ msgid "Token Endpoint Configuration"
#~ msgstr "トークンエンドポイントの設定"

#~ msgid "By default the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
#~ msgstr "デフォルトでは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` のパスを追加することで、トークンのエンドポイントアドレスが検出されます。"

#~ msgid "For example, given this Keycloak URL:"
#~ msgstr "たとえば、次の KeycloakURL を指定した場合:"

#~ msgid "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
#~ msgstr "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"

#~ msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
#~ msgstr "OidcClient` は、トークンのエンドポイント URL が `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens` であることを検出します。"

#~ msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
#~ msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、トークンエンドポイントのアドレスを相対パスの値で設定することができます。例:"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
#~ "quarkus.oidc-client.discovery-enabled=false\n"
#~ "# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
#~ "quarkus.oidc-client.token-path=/protocol/openid-connect/tokens\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
#~ "quarkus.oidc-client.discovery-enabled=false\n"
#~ "# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
#~ "quarkus.oidc-client.token-path=/protocol/openid-connect/tokens\n"

#~ msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
#~ msgstr "検出せずにトークンエンドポイント URL を設定するよりコンパクトな方法は、`quarkus.oidc-client.token-path` を絶対 URL に設定することです。"

#~ msgid "quarkus.oidc-client.token-path=http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
#~ msgstr "quarkus.oidc-client.token-path=http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"

#~ msgid "Setting 'quarkus.oidc-client.auth-server-url' and 'quarkus.oidc-client.discovery-enabled' is not required in this case."
#~ msgstr "この場合、'quarkus.oidc-client.auth-server-url' および 'quarkus.oidc-client.discovery-enabled' の設定は必要ありません。"

#~ msgid "Supported Token Grants"
#~ msgstr "サポートされるトークングラント"

#~ msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
#~ msgstr "`OidcClient` がトークンを取得するために使用できる主なトークングラントは、`client_credentials` (デフォルト) と `password` グラントです。"

#~ msgid "Client Credentials Grant"
#~ msgstr "クライアントクレデンシャル・グラント"

#~ msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
#~ msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#~ msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
#~ msgstr "`client_credentials` グラントにより、`quarkus.oidc-client.grant-options.client.<param-name>=<value>` を介してトークンリクエストに追加のパラメーターを設定できます。`audience` パラメータを使用して目的のトークン受信者を設定する方法は次のとおりです。"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "# 'client' is a shortcut for `client_credentials`\n"
#~ "quarkus.oidc-client.grant.type=client\n"
#~ "quarkus.oidc-client.grant-options.client.audience=https://example.com/api\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "# 'client' is a shortcut for `client_credentials`\n"
#~ "quarkus.oidc-client.grant.type=client\n"
#~ "quarkus.oidc-client.grant-options.client.audience=https://example.com/api\n"

#~ msgid "Password Grant"
#~ msgstr "パスワード・グラント"

#~ msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
#~ msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#~ msgid "It can be further customized using a `quarkus.oidc-client.grant-options.password` configuration prefix, similarly to how the client credentials grant can be customized."
#~ msgstr "これは、クライアント認証情報のグラントをカスタマイズする方法と同様に、`quarkus.oidc-client.grant-options.password` 設定接頭辞を使用してさらにカスタマイズできます。"

#~ msgid "Other Grants"
#~ msgstr "その他の助成金"

#~ msgid "`OidcClient` can also help with acquiring the tokens using the grants which require some extra input parameters which can not be captured in the configuration. These grants are `refresh token` (with the external refresh token), `token exchange` and `authorization code`."
#~ msgstr "`OidcClient` は、設定でキャプチャーできない追加の入力パラメーターを必要とするグラントを使用して、トークンを取得する際にも役立ちます。これらのグラントは、`refresh token` (外部更新トークンを使用)、`token exchange`、および `authorization code` です。"

#~ msgid "Using the `refresh_token` grant which uses an out of band refresh token to acquire a new set of tokens will be required if the existing refresh token has been posted to the current Quarkus endpoint for it to acquire the access token. In this case `OidcClient` needs to be configured as follows:"
#~ msgstr "アクセストークンを取得するために、既存のリフレッシュトークンが現在の Quarkus エンドポイントにポストされた場合、新しいトークンセットを取得するために帯域外のリフレッシュトークンを使用する `refresh_token` グラントを使用する必要があります。この場合、`OidcClient` を次のように設定する必要があります。"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=refresh\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=refresh\n"

#~ msgid "and then you can use `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
#~ msgstr "続いて、提供されたリフレッシュトークンを使って `OidcClient.refreshTokens` メソッドを使用して、アクセストークンを取得することができます。"

#~ msgid "Using the `token exchange` grant may be required if you are building a complex microservices application and would like to avoid the same `Bearer` token be propagated to and used by more than one service. Please see <<token-propagation,Token Propagation in MicroProfile RestClient client filter>> for more details."
#~ msgstr "複雑なマイクロサービスアプリケーションを構築していて、同じ `Bearer` トークンが複数のサービスに伝搬して使用されることを避けたい場合は、`token exchange` グラントの使用が必要になる場合があります。詳細は、<<token-propagation,Token Propagation in MicroProfile RestClient client filter>> を参照してください。"

#~ msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reasons you can not use the xref:security-openid-connect-web-authentication.adoc[Quarkus OpenID Connect extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
#~ msgstr "何らかの理由で xref:security-openid-connect-web-authentication.adoc[Quarkus OpenID Connect extension] を使用して認可コードフローをサポートできない場合は、`OidcClient` を使用した `authorization code` グラントのサポートが必要な場合があります。認可コードフローを実装する正当な理由がある場合は、`OidcClient` を以下のように設定することができます。"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=code\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=code\n"

#~ msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
#~ msgstr "次に、追加のプロパティーのマップを受け入れる `OidcClient.accessTokens` メソッドを使用し、現在の `code` パラメーターと `redirect_uri` パラメーターを渡して、トークンの認証コードを交換できます。"

#~ msgid "Grant scopes"
#~ msgstr "スコープのグラント"

#~ msgid "You may need to request that a specific set of scopes is associated with an issued access token.  Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
#~ msgstr "スコープの特定のセットが発行されたアクセストークンに関連付けられるように要求する必要がある場合があります。専用の `quarkus.oidc-client.scopes` リストプロパティーを使用してください (例: `quarkus.oidc-client.scopes=email,phone`)。"

#~ msgid "Use OidcClient directly"
#~ msgstr "OidcClient を直接使用する"

#~ msgid "One can use `OidcClient` directly as follows:"
#~ msgstr "以下のように `OidcClient` を直接使用することができます。"

#~ msgid ""
#~ "import javax.inject.PostConstruct;\n"
#~ "import javax.inject.Inject;\n"
#~ "import javax.ws.rs.GET;\n"
#~ msgstr ""
#~ "import javax.inject.PostConstruct;\n"
#~ "import javax.inject.Inject;\n"
#~ "import javax.ws.rs.GET;\n"

#~ msgid ""
#~ "    @Inject\n"
#~ "    OidcClient client;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    OidcClient client;\n"

#~ msgid "    volatile Tokens currentTokens;\n"
#~ msgstr "    volatile Tokens currentTokens;\n"

#~ msgid ""
#~ "    @PostConstruct\n"
#~ "    public void init() {\n"
#~ "        currentTokens = client.getTokens().await().indefinitely();\n"
#~ "    }\n"
#~ msgstr ""
#~ "    @PostConstruct\n"
#~ "    public void init() {\n"
#~ "        currentTokens = client.getTokens().await().indefinitely();\n"
#~ "    }\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"

#~ msgid ""
#~ "        Tokens tokens = currentTokens;\n"
#~ "        if (tokens.isAccessTokenExpired()) {\n"
#~ "            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
#~ "            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
#~ "            currentTokens = tokens;\n"
#~ "        } \n"
#~ "        // Use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "        Tokens tokens = currentTokens;\n"
#~ "        if (tokens.isAccessTokenExpired()) {\n"
#~ "            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
#~ "            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
#~ "            currentTokens = tokens;\n"
#~ "        } \n"
#~ "        // Use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "Inject Tokens"
#~ msgstr "トークンを注入する"

#~ msgid "You can inject `Tokens` which uses `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
#~ msgstr "内部で `OidcClient` を使用する `Tokens` を注入することができます。`Tokens` を使用してアクセストークンを取得し、必要に応じて更新することができます。"

#~ msgid "import io.quarkus.oidc.client.Tokens;\n"
#~ msgstr "import io.quarkus.oidc.client.Tokens;\n"

#~ msgid "    @Inject Tokens tokens;\n"
#~ msgstr "    @Inject Tokens tokens;\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ "        //  Get the access token which may have been refreshed.\n"
#~ "        String accessToken = tokens.getAccessToken();\n"
#~ "        // Use the access token to configure MP RestClient Authorization header/etc\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ "        //  Get the access token which may have been refreshed.\n"
#~ "        String accessToken = tokens.getAccessToken();\n"
#~ "        // Use the access token to configure MP RestClient Authorization header/etc\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "Use OidcClients"
#~ msgstr "OidcClients を使用する"

#~ msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
#~ msgstr "`io.quarkus.oidc.client.OidcClients` は、``OidcClient``s のコンテナーです。デフォルトの `OidcClient` と名前付きクライアントを含み、以下のように設定することができます。"

#~ msgid "quarkus.oidc-client.client-enabled=false\n"
#~ msgstr "quarkus.oidc-client.client-enabled=false\n"

#~ msgid ""
#~ "quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
#~ msgstr ""
#~ "quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#~ msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
#~ msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#~ msgid ""
#~ "import io.quarkus.oidc.client.OidcClient;\n"
#~ "import io.quarkus.oidc.client.OidcClients;\n"
#~ msgstr ""
#~ "import io.quarkus.oidc.client.OidcClient;\n"
#~ "import io.quarkus.oidc.client.OidcClients;\n"

#~ msgid ""
#~ "@Path(\"/clients\")\n"
#~ "public class OidcClientResource {\n"
#~ msgstr ""
#~ "@Path(\"/clients\")\n"
#~ "public class OidcClientResource {\n"

#~ msgid ""
#~ "    @Inject\n"
#~ "    OidcClients clients;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    OidcClients clients;\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ "        OidcClient client = clients.getClient(\"jwt-secret\");\n"
#~ "        // use this client to get the token\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ "        OidcClient client = clients.getClient(\"jwt-secret\");\n"
#~ "        // use this client to get the token\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
#~ msgstr "xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] を使用し、各 OIDC テナントが独自の関連する `OidcClient` を持っている場合は、Vert.x `RoutingContext` `tenantId` 属性を使用することができます。以下に例を示します。"

#~ msgid ""
#~ "import io.quarkus.oidc.client.OidcClient;\n"
#~ "import io.quarkus.oidc.client.OidcClients;\n"
#~ "import io.vertx.ext.web.RoutingContext;\n"
#~ msgstr ""
#~ "import io.quarkus.oidc.client.OidcClient;\n"
#~ "import io.quarkus.oidc.client.OidcClients;\n"
#~ "import io.vertx.ext.web.RoutingContext;\n"

#~ msgid ""
#~ "    @Inject\n"
#~ "    OidcClients clients;\n"
#~ "    @Inject\n"
#~ "    RoutingContext context;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    OidcClients clients;\n"
#~ "    @Inject\n"
#~ "    RoutingContext context;\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ "        String tenantId = context.get(\"tenantId\");\n"
#~ "        // named OIDC tenant and client configurations use the same key:\n"
#~ "        OidcClient client = clients.getClient(tenantId);\n"
#~ "        // use this client to get the token\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ "        String tenantId = context.get(\"tenantId\");\n"
#~ "        // named OIDC tenant and client configurations use the same key:\n"
#~ "        OidcClient client = clients.getClient(tenantId);\n"
#~ "        // use this client to get the token\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "If you need you can also create new `OidcClient` programmatically like this:"
#~ msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#~ msgid ""
#~ "import io.quarkus.oidc.client.OidcClient;\n"
#~ "import io.quarkus.oidc.client.OidcClients;\n"
#~ "import io.quarkus.oidc.client.OidcClientConfig;\n"
#~ msgstr ""
#~ "import io.quarkus.oidc.client.OidcClient;\n"
#~ "import io.quarkus.oidc.client.OidcClients;\n"
#~ "import io.quarkus.oidc.client.OidcClientConfig;\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ "        OidcClientConfig cfg = new OidcClientConfig();\n"
#~ "        cfg.setId(\"myclient\");\n"
#~ "        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
#~ "        cfg.setClientId(\"quarkus\");\n"
#~ "        cfg.getCredentials().setSecret(\"secret\");\n"
#~ "        Uni<OidcClient> client = clients.newClient(cfg);\n"
#~ "        // use this client to get the token\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ "        OidcClientConfig cfg = new OidcClientConfig();\n"
#~ "        cfg.setId(\"myclient\");\n"
#~ "        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
#~ "        cfg.setClientId(\"quarkus\");\n"
#~ "        cfg.getCredentials().setSecret(\"secret\");\n"
#~ "        Uni<OidcClient> client = clients.newClient(cfg);\n"
#~ "        // use this client to get the token\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "Inject named OidcClient and Tokens"
#~ msgstr "名前付き OidcClient とトークンの挿入"

#~ msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
#~ msgstr "複数の設定済みの ``OidcClient``s の場合は、`OidcClients` で作業する代わりに、追加の修飾子 `@NamedOidcClient` で `OidcClient` 注入ターゲットを指定できます。"

#~ msgid ""
#~ "    @Inject\n"
#~ "    @NamedOidcClient(\"jwt-secret\")\n"
#~ "    OidcClient client;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    @NamedOidcClient(\"jwt-secret\")\n"
#~ "    OidcClient client;\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ "        // use client to get the token\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ "        // use client to get the token\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
#~ msgstr "同じ修飾子を使用して、`Tokens` インジェクションに使用される `OidcClient` を指定できます。"

#~ msgid ""
#~ "@Provider\n"
#~ "@Priority(Priorities.AUTHENTICATION)\n"
#~ "@RequestScoped\n"
#~ "public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
#~ msgstr ""
#~ "@Provider\n"
#~ "@Priority(Priorities.AUTHENTICATION)\n"
#~ "@RequestScoped\n"
#~ "public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"

#~ msgid ""
#~ "    @Inject\n"
#~ "    @NamedOidcClient(\"jwt-secret\")\n"
#~ "    Tokens tokens;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    @NamedOidcClient(\"jwt-secret\")\n"
#~ "    Tokens tokens;\n"

#~ msgid ""
#~ "    @Override\n"
#~ "    public void filter(ClientRequestContext requestContext) throws IOException {\n"
#~ "        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @Override\n"
#~ "    public void filter(ClientRequestContext requestContext) throws IOException {\n"
#~ "        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "Use OidcClient in RestClient Reactive ClientFilter"
#~ msgstr "RestClient Reactive ClientFilter での OidcClient の使用"

#~ msgid "Add the following Maven Dependency:"
#~ msgstr "以下の Maven 依存関係を追加します。"

#~ msgid ""
#~ "<dependency>\n"
#~ "    <groupId>io.quarkus</groupId>\n"
#~ "    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
#~ "</dependency>\n"
#~ msgstr ""
#~ "<dependency>\n"
#~ "    <groupId>io.quarkus</groupId>\n"
#~ "    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
#~ "</dependency>\n"

#~ msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
#~ msgstr "`io.quarkus:quarkus-oidc-client` も表示されることに注意してください。"

#~ msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
#~ msgstr "`quarkus-oidc-client-reactive-filter` エクステンションは、`io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` を提供します。"

#~ msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<oidc-client-filter, Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
#~ msgstr "これは `OidcClientRequestFilter` と同じように機能します (<<oidc-client-filter, Use OidcClient in MicroProfile RestClient client filter>> を参照) - `OidcClient` を使用してアクセストークンを取得し、必要に応じてリフレッシュして、HTTP `Authorization` `Bearer` スキームの値としてセットします。違いは、xref:rest-client-reactive.adoc[Reactive RestClient] で機能することと、トークンの取得や更新時に現在の IO スレッドをブロックしないノンブロッキングクライアントフィルターを実装している点です。"

#~ msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread and it currently can only be registered with `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation:"
#~ msgstr "`OidcClientRequestReactiveFilter` は、IO スレッドのブロックを回避するため、実行されるまで最初のトークンの取得を遅らせ、現在は `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションによってのみ登録することができます。"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
#~ "import io.smallrye.mutiny.Uni;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
#~ "import io.smallrye.mutiny.Uni;\n"

#~ msgid "`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property."
#~ msgstr "`OidcClientRequestReactiveFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-client-reactive-filter.client-name` 設定プロパティーで選択することができます。"

#~ msgid "Use OidcClient in RestClient ClientFilter"
#~ msgstr "RestClient ClientFilter での OidcClient の使用"

#~ msgid ""
#~ "<dependency>\n"
#~ "    <groupId>io.quarkus</groupId>\n"
#~ "    <artifactId>quarkus-oidc-client-filter</artifactId>\n"
#~ "</dependency>\n"
#~ msgstr ""
#~ "<dependency>\n"
#~ "    <groupId>io.quarkus</groupId>\n"
#~ "    <artifactId>quarkus-oidc-client-filter</artifactId>\n"
#~ "</dependency>\n"

#~ msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
#~ msgstr "`quarkus-oidc-client-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。このフィルターは、`OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#~ msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
#~ msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、`quarkus.oidc-client.early-tokens-acquisition=false` でトークンの取得を遅延させるべきです。"

#~ msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
#~ msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.client.filter.OidcClientFilter;\n"

#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@OidcClientFilter\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@OidcClientFilter\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    String getUserName();\n"
#~ "}\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    String getUserName();\n"
#~ "}\n"

#~ msgid "or"
#~ msgstr "または"

#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@RegisterProvider(OidcClientRequestFilter.class)\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@RegisterProvider(OidcClientRequestFilter.class)\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#~ msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
#~ msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#~ msgid "`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property."
#~ msgstr "`OidcClientRequestFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-client-filter.client-name` 設定プロパティーで選択することができます。"

#~ msgid "Use Custom RestClient ClientFilter"
#~ msgstr "カスタム RestClient ClientFilter の使用"

#~ msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
#~ msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#~ msgid ""
#~ "@Provider\n"
#~ "@Priority(Priorities.AUTHENTICATION)\n"
#~ "public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
#~ msgstr ""
#~ "@Provider\n"
#~ "@Priority(Priorities.AUTHENTICATION)\n"
#~ "public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"

#~ msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
#~ msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#~ msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
#~ msgstr "名前付きの `Tokens` を挿入することもできます。<<named-oidc-clients,Inject named OidcClient and Tokens>> を参照してください。"

#~ msgid "Refreshing Access Tokens"
#~ msgstr "アクセストークンの更新"

#~ msgid "`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.  Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
#~ msgstr "`OidcClientRequestReactiveFilter`、`OidcClientRequestFilter` および `Tokens` プロデューサーは、リフレッシュトークンが利用可能な場合、現在の期限切れアクセストークンをリフレッシュします。さらに、`quarkus.oidc-client.refresh-token-time-skew` プロパティーは、HTTP 401 エラーの原因となる可能性のある期限切れ間近のアクセストークンの送信を避けるために、アクセストークンのリフレッシュを先取りして行うことに使用できます。たとえば、このプロパティーが `3S` に設定されていて、アクセストークンが 3 秒以内に期限切れになる場合、このトークンは自動的にリフレッシュされます。"

#~ msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
#~ msgstr "アクセストークンの更新が必要なのにリフレッシュトークンがない場合は、 `client_credentials` のように設定されたグラントを使って新しいトークンの取得を試みます。"

#~ msgid "Please note that some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
#~ msgstr "一部の OpenID Connect プロバイダーは、`client_credentials` グラントレスポンスでリフレッシュトークンを返さない点にご注意ください。たとえば、Keycloak 12 以降、`client_credentials` のリフレッシュトークンはデフォルトでは返されません。また、プロバイダーは、リフレッシュトークンを使用できる回数を制限する場合もあります。"

#~ msgid "OidcClient Authentication"
#~ msgstr "OidcClient 認証"

#~ msgid "`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
#~ msgstr "`OidcClient` は、`client_credentials` および他のグラントリクエストが成功するために OpenID Connect プロバイダーに対して認証する必要があります。https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] オプションはすべてサポートされています。以下に例を示します。"

#~ msgid "`client_secret_basic`:"
#~ msgstr "`client_secret_basic` ."

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=mysecret\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=mysecret\n"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"

#~ msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
#~ msgstr "または、xref:credentials-provider.adoc[CredentialsProvider]: から取得したシークレットを使用します。"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"

#~ msgid ""
#~ "# This is a key which will be used to retrieve a secret from the map of credentails returned from CredentialsProvider\n"
#~ "quarkus.oidc-client.credentials.client-secret.provider.key=mysecret-key\n"
#~ "# Set it only if more than one CredentialsProvider can be registered\n"
#~ "quarkus.oidc-client.credentials.client-secret.provider.name=oidc-credentials-provider\n"
#~ msgstr ""
#~ "# This is a key which will be used to retrieve a secret from the map of credentails returned from CredentialsProvider\n"
#~ "quarkus.oidc-client.credentials.client-secret.provider.key=mysecret-key\n"
#~ "# Set it only if more than one CredentialsProvider can be registered\n"
#~ "quarkus.oidc-client.credentials.client-secret.provider.name=oidc-credentials-provider\n"

#~ msgid "`client_secret_post`:"
#~ msgstr "`client_secret_post`:"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post\n"

#~ msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
#~ msgstr "`client_secret_jwt`、署名アルゴリズムは `HS256` です。"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#~ msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
#~ msgstr "または、xref:credentials-provider.adoc[CredentialsProvider] から取得したシークレットを使用すると、署名アルゴリズムは `HS256` になります。"

#~ msgid ""
#~ "# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
#~ "quarkus.oidc-client.credentials.jwt.secret-provider.key=mysecret-key\n"
#~ "# Set it only if more than one CredentialsProvider can be registered\n"
#~ "quarkus.oidc-client.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
#~ msgstr ""
#~ "# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
#~ "quarkus.oidc-client.credentials.jwt.secret-provider.key=mysecret-key\n"
#~ "# Set it only if more than one CredentialsProvider can be registered\n"
#~ "quarkus.oidc-client.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"

#~ msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
#~ msgstr "PEM キーファイルを使用した`private_key_jwt`、署名アルゴリズムは `RS256` です。"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"

#~ msgid "`private_key_jwt` with the key store file, signature algorithm is `RS256`:"
#~ msgstr "キーストアファイルを使用した`private_key_jwt`、署名アルゴリズムは `RS256` です。"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
#~ "quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
#~ "quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
#~ "quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
#~ "quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"

#~ msgid ""
#~ "# Private key alias inside the keystore\n"
#~ "quarkus.oidc-client.credentials.jwt.key-id=mykeyAlias\n"
#~ msgstr ""
#~ "# Private key alias inside the keystore\n"
#~ "quarkus.oidc-client.credentials.jwt.key-id=mykeyAlias\n"

#~ msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
#~ msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントシークレットが漏れることはありません。"

#~ msgid "Additional JWT Authentication options"
#~ msgstr "追加の JWT 認証オプション"

#~ msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
#~ msgstr "`client_secret_jwt` または `private_key_jwt` のいずれかの認証方法を使用する場合は、JWT 署名アルゴリズム、鍵識別子、オーディエンス、サブジェクト、および発行者をカスタマイズすることができます。以下に例を示します。"

#~ msgid "# private_key_jwt client authentication\n"
#~ msgstr "# private_key_jwt client authentication\n"

#~ msgid ""
#~ "# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
#~ "# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
#~ "# using 'quarkus.oidc-client.credentials.jwt.token-key-id' is not necessary.\n"
#~ "quarkus.oidc-client.credentials.jwt.token-key-id=mykey\n"
#~ msgstr ""
#~ "# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
#~ "# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
#~ "# using 'quarkus.oidc-client.credentials.jwt.token-key-id' is not necessary.\n"
#~ "quarkus.oidc-client.credentials.jwt.token-key-id=mykey\n"

#~ msgid ""
#~ "# Use RS512 signature algorithm instead of the default RS256\n"
#~ "quarkus.oidc-client.credentials.jwt.signature-algorithm=RS512\n"
#~ msgstr ""
#~ "# Use RS512 signature algorithm instead of the default RS256\n"
#~ "quarkus.oidc-client.credentials.jwt.signature-algorithm=RS512\n"

#~ msgid ""
#~ "# The token endpoint URL is the default audience value, use the base address URL instead:\n"
#~ "quarkus.oidc-client.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
#~ msgstr ""
#~ "# The token endpoint URL is the default audience value, use the base address URL instead:\n"
#~ "quarkus.oidc-client.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"

#~ msgid ""
#~ "# custom subject instead of the client id :\n"
#~ "quarkus.oidc-client.credentials.jwt.subject=custom-subject\n"
#~ msgstr ""
#~ "# custom subject instead of the client id :\n"
#~ "quarkus.oidc-client.credentials.jwt.subject=custom-subject\n"

#~ msgid ""
#~ "# custom issuer instead of the client id :\n"
#~ "quarkus.oidc-client.credentials.jwt.issuer=custom-issuer\n"
#~ msgstr ""
#~ "# custom issuer instead of the client id :\n"
#~ "quarkus.oidc-client.credentials.jwt.issuer=custom-issuer\n"

#~ msgid "Apple POST JWT"
#~ msgstr "Apple POST JWT"

#~ msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject properties."
#~ msgstr "Apple OpenID Connect プロバイダーは `client_secret_post` メソッドを使用します。ここで、secret は `private_key_jwt` 認証メソッドで生成された JWT ですが、Apple アカウント固有の発行者とサブジェクトプロパティーを使用します。"

#~ msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
#~ msgstr "`quarkus-oidc-client` は、以下のように設定できる標準外の `client_secret_post_jwt` 認証方法をサポートしています。"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=${apple.url}\n"
#~ "quarkus.oidc-client.client-id=${apple.client-id}\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post-jwt\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=${apple.url}\n"
#~ "quarkus.oidc-client.client-id=${apple.client-id}\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post-jwt\n"

#~ msgid ""
#~ "quarkus.oidc-client.credentials.jwt.key-file=ecPrivateKey.pem\n"
#~ "quarkus.oidc-client.credentials.jwt.signature-algorithm=ES256\n"
#~ "quarkus.oidc-client.credentials.jwt.subject=${apple.subject}\n"
#~ "quarkus.oidc-client.credentials.jwt.issuer=${apple.issuer}\n"
#~ msgstr ""
#~ "quarkus.oidc-client.credentials.jwt.key-file=ecPrivateKey.pem\n"
#~ "quarkus.oidc-client.credentials.jwt.signature-algorithm=ES256\n"
#~ "quarkus.oidc-client.credentials.jwt.subject=${apple.subject}\n"
#~ "quarkus.oidc-client.credentials.jwt.issuer=${apple.issuer}\n"

#~ msgid "Mutual TLS"
#~ msgstr "相互 TLS"

#~ msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`mTLS`) authentication process."
#~ msgstr "OpenID Connect プロバイダーによっては、クライアントが `Mutual TLS` (`mTLS`) 認証プロセスの一部として認証されることを要求する場合があります。"

#~ msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
#~ msgstr "`quarkus-oidc-client` は、`mTLS` をサポートするように次のように設定できます。"

#~ msgid "quarkus.oidc.tls.verification=certificate-validation\n"
#~ msgstr "quarkus.oidc.tls.verification=certificate-validation\n"

#~ msgid ""
#~ "# Keystore configuration\n"
#~ "quarkus.oidc.client.tls.key-store-file=client-keystore.jks\n"
#~ "quarkus.oidc.client.tls.key-store-password=${key-store-password}\n"
#~ msgstr ""
#~ "# Keystore configuration\n"
#~ "quarkus.oidc.client.tls.key-store-file=client-keystore.jks\n"
#~ "quarkus.oidc.client.tls.key-store-password=${key-store-password}\n"

#~ msgid ""
#~ "# Add more keystore properties if needed:\n"
#~ "#quarkus.oidc.client.tls.key-store-alias=keyAlias\n"
#~ "#quarkus.oidc.client.tls.key-store-alias-password=keyAliasPassword\n"
#~ msgstr ""
#~ "# Add more keystore properties if needed:\n"
#~ "#quarkus.oidc.client.tls.key-store-alias=keyAlias\n"
#~ "#quarkus.oidc.client.tls.key-store-alias-password=keyAliasPassword\n"

#~ msgid ""
#~ "# Truststore configuration\n"
#~ "quarkus.oidc.client.tls.trust-store-file=client-truststore.jks\n"
#~ "quarkus.oidc.client.tls.trust-store-password=${trust-store-password}\n"
#~ "# Add more truststore properties if needed:\n"
#~ "#quarkus.oidc.client.tls.trust-store-alias=certAlias\n"
#~ msgstr ""
#~ "# Truststore configuration\n"
#~ "quarkus.oidc.client.tls.trust-store-file=client-truststore.jks\n"
#~ "quarkus.oidc.client.tls.trust-store-password=${trust-store-password}\n"
#~ "# Add more truststore properties if needed:\n"
#~ "#quarkus.oidc.client.tls.trust-store-alias=certAlias\n"

#~ msgid "Testing"
#~ msgstr "テスト"

#~ msgid "Start by adding the following dependencies to your test project:"
#~ msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#~ msgid "Wiremock"
#~ msgstr "Wiremock"

#~ msgid "Add the following dependencies to your test project:"
#~ msgstr "テストプロジェクトに以下の依存関係を追加します。"

#~ msgid ""
#~ "<dependency>\n"
#~ "    <groupId>com.github.tomakehurst</groupId>\n"
#~ "    <artifactId>wiremock-jre8</artifactId>\n"
#~ "    <scope>test</scope>\n"
#~ "</dependency>\n"
#~ msgstr ""
#~ "<dependency>\n"
#~ "    <groupId>com.github.tomakehurst</groupId>\n"
#~ "    <artifactId>wiremock-jre8</artifactId>\n"
#~ "    <scope>test</scope>\n"
#~ "</dependency>\n"

#~ msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
#~ msgstr "Wiremockベースの `QuarkusTestResourceLifecycleManager` を例えば以下のように書きます。"

#~ msgid "package io.quarkus.it.keycloak;\n"
#~ msgstr "package io.quarkus.it.keycloak;\n"

#~ msgid ""
#~ "import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
#~ "import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n"
#~ msgstr ""
#~ "import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
#~ "import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n"

#~ msgid ""
#~ "import java.util.HashMap;\n"
#~ "import java.util.Map;\n"
#~ msgstr ""
#~ "import java.util.HashMap;\n"
#~ "import java.util.Map;\n"

#~ msgid ""
#~ "import com.github.tomakehurst.wiremock.WireMockServer;\n"
#~ "import com.github.tomakehurst.wiremock.client.WireMock;\n"
#~ "import com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy;\n"
#~ msgstr ""
#~ "import com.github.tomakehurst.wiremock.WireMockServer;\n"
#~ "import com.github.tomakehurst.wiremock.client.WireMock;\n"
#~ "import com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy;\n"

#~ msgid "import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
#~ msgstr "import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"

#~ msgid ""
#~ "public class KeycloakRealmResourceManager implements QuarkusTestResourceLifecycleManager {\n"
#~ "    private WireMockServer server;\n"
#~ msgstr ""
#~ "public class KeycloakRealmResourceManager implements QuarkusTestResourceLifecycleManager {\n"
#~ "    private WireMockServer server;\n"

#~ msgid ""
#~ "    @Override\n"
#~ "    public Map<String, String> start() {\n"
#~ msgstr ""
#~ "    @Override\n"
#~ "    public Map<String, String> start() {\n"

#~ msgid ""
#~ "        server = new WireMockServer(wireMockConfig().dynamicPort().useChunkedTransferEncoding(ChunkedEncodingPolicy.NEVER));\n"
#~ "        server.start();\n"
#~ msgstr ""
#~ "        server = new WireMockServer(wireMockConfig().dynamicPort().useChunkedTransferEncoding(ChunkedEncodingPolicy.NEVER));\n"
#~ "        server.start();\n"

#~ msgid ""
#~ "        server.stubFor(WireMock.post(\"/tokens\")\n"
#~ "                .withRequestBody(matching(\"grant_type=password&username=alice&password=alice\"))\n"
#~ "                .willReturn(WireMock\n"
#~ "                        .aResponse()\n"
#~ "                        .withHeader(\"Content-Type\", \"application/json\")\n"
#~ "                        .withBody(\n"
#~ "                                \"{\\\"access_token\\\":\\\"access_token_1\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
#~ "        server.stubFor(WireMock.post(\"/tokens\")\n"
#~ "                .withRequestBody(matching(\"grant_type=refresh_token&refresh_token=refresh_token_1\"))\n"
#~ "                .willReturn(WireMock\n"
#~ "                        .aResponse()\n"
#~ "                        .withHeader(\"Content-Type\", \"application/json\")\n"
#~ "                        .withBody(\n"
#~ "                                \"{\\\"access_token\\\":\\\"access_token_2\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
#~ msgstr ""
#~ "        server.stubFor(WireMock.post(\"/tokens\")\n"
#~ "                .withRequestBody(matching(\"grant_type=password&username=alice&password=alice\"))\n"
#~ "                .willReturn(WireMock\n"
#~ "                        .aResponse()\n"
#~ "                        .withHeader(\"Content-Type\", \"application/json\")\n"
#~ "                        .withBody(\n"
#~ "                                \"{\\\"access_token\\\":\\\"access_token_1\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
#~ "        server.stubFor(WireMock.post(\"/tokens\")\n"
#~ "                .withRequestBody(matching(\"grant_type=refresh_token&refresh_token=refresh_token_1\"))\n"
#~ "                .willReturn(WireMock\n"
#~ "                        .aResponse()\n"
#~ "                        .withHeader(\"Content-Type\", \"application/json\")\n"
#~ "                        .withBody(\n"
#~ "                                \"{\\\"access_token\\\":\\\"access_token_2\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"

#~ msgid ""
#~ "        Map<String, String> conf = new HashMap<>();\n"
#~ "        conf.put(\"keycloak.url\", server.baseUrl());\n"
#~ "        return conf;\n"
#~ "    }\n"
#~ msgstr ""
#~ "        Map<String, String> conf = new HashMap<>();\n"
#~ "        conf.put(\"keycloak.url\", server.baseUrl());\n"
#~ "        return conf;\n"
#~ "    }\n"

#~ msgid ""
#~ "    @Override\n"
#~ "    public synchronized void stop() {\n"
#~ "        if (server != null) {\n"
#~ "            server.stop();\n"
#~ "            server = null;\n"
#~ "        }\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @Override\n"
#~ "    public synchronized void stop() {\n"
#~ "        if (server != null) {\n"
#~ "            server.stop();\n"
#~ "            server = null;\n"
#~ "        }\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
#~ msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#~ msgid "Set `application.properties`, for example:"
#~ msgstr "`application.properties` を次のように設定します。"

#~ msgid ""
#~ "# Use 'keycloak.url' property set by the test KeycloakRealmResourceManager\n"
#~ "quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
#~ "quarkus.oidc-client.discovery-enabled=false\n"
#~ "quarkus.oidc-client.token-path=/tokens\n"
#~ "quarkus.oidc-client.client-id=quarkus-service-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=password\n"
#~ "quarkus.oidc-client.grant-options.password.username=alice\n"
#~ "quarkus.oidc-client.grant-options.password.password=alice\n"
#~ msgstr ""
#~ "# Use 'keycloak.url' property set by the test KeycloakRealmResourceManager\n"
#~ "quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
#~ "quarkus.oidc-client.discovery-enabled=false\n"
#~ "quarkus.oidc-client.token-path=/tokens\n"
#~ "quarkus.oidc-client.client-id=quarkus-service-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=password\n"
#~ "quarkus.oidc-client.grant-options.password.username=alice\n"
#~ "quarkus.oidc-client.grant-options.password.password=alice\n"

#~ msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
#~ msgstr "そして最後にテストコードを書きます。上記の Wiremock ベースのリソースがある場合、最初のテスト起動では `access_token_1` アクセストークンが返却されますが、このアクセストークンは 4 秒で期限切れになります。 `awaitility` を使用して約 5 秒間待つと、次のテスト起動時に `access_token_2` アクセストークンが返され、期限切れの `access_token_1` アクセストークンがリフレッシュされたことが確認できます。"

#~ msgid "Keycloak"
#~ msgstr "Keycloak"

#~ msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-openid-connect#integration-testing-keycloak.adoc[OpenID Connect Bearer Token Integration testing] Keycloak section."
#~ msgstr "Keycloak を使用する場合は、xref:security-openid-connect#integration-testing-keycloak.adoc[OpenID Connect Bearer Token Integration testing] の Keycloak セクションで説明されているのと同じアプローチを使用できます。"

#~ msgid "How to check the errors in the logs"
#~ msgstr "ログでエラーを確認する方法"

#~ msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
#~ msgstr "トークンの取得および更新エラーの詳細を確認するには、`io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` レベルのロギングを有効にしてください。"

#~ msgid ""
#~ "quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".level=TRACE\n"
#~ "quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".min-level=TRACE\n"
#~ msgstr ""
#~ "quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".level=TRACE\n"
#~ "quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".min-level=TRACE\n"

#~ msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
#~ msgstr "OidcClient 初期化エラーの詳細を確認するには、`io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` レベルのログを有効にしてください。"

#~ msgid ""
#~ "quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".level=TRACE\n"
#~ "quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".min-level=TRACE\n"
#~ msgstr ""
#~ "quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".level=TRACE\n"
#~ "quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".min-level=TRACE\n"

#~ msgid "Token Propagation"
#~ msgstr "トークンの伝播"

#~ msgid "The `quarkus-oidc-token-propagation` extension provides two JAX-RS `javax.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.  `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-openid-connect.adoc[Bearer] token present in the current active request or the token acquired from the xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow], as the HTTP `Authorization` header's `Bearer` scheme value.  The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
#~ msgstr "`quarkus-oidc-token-propagation` エクステンションは、認証情報の伝搬を簡素化する 2 つの JAX-RS `javax.ws.rs.client.ClientRequestFilter` クラスの実装を提供します。`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` は、現在のアクティブなリクエストに存在する xref:security-openid-connect.adoc[Bearer] トークン、または HTTP `Authorization` ヘッダーの `Bearer` スキーム値として xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow] から取得したトークンを伝播させます。`io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` は同じ機能を提供しますが、これに加えて JWT トークンのサポートも提供します。"

#~ msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
#~ msgstr "現在の認可コードフローアクセストークンを伝播する必要がある場合は、即時トークン伝播はうまく機能します - コードフローアクセストークン (ID トークンとは対照的に) は、現在認証されているユーザーに代わってリモートサービスにアクセスするように、現在の Quarkus エンドポイントに伝搬されることが意図されています。"

#~ msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
#~ msgstr "ただし、可能であれば、エンドツーエンドのベアラートークンの直接伝播は避ける必要があります。たとえば、`Client -> Service A -> Service B` で、`Service B` は `Client` から `Service A` に送信されたトークンを受け取ります。このような場合、`Service B` は、トークンが `Service A` からのものか、直接 `Client` からのものかを区別できません。トークンが `Service A` からのものであることを `Service B` が確認するには、新しい発行者とオーディエンスのクレームをアサートできる必要があります。"

#~ msgid "Additionally, a complex application may need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or a completely different set of scopes to access `Service B`."
#~ msgstr "さらに、複雑なアプリケーションでは、トークンを伝搬する前に交換または更新する必要がある場合があります。たとえば、`Service A` が `Service B` にアクセスするとき、アクセスコンテキストが異なるかもしれません。この場合、`Service A` には `Service B` にアクセスするための狭いスコープまたは完全に異なるスコープのセットがグラントされることがあります。"

#~ msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
#~ msgstr "次のセクションでは、`AccessTokenRequestFilter` および `JsonWebTokenRequestFilter` がどのように役立つかを示します。"

#~ msgid "RestClient AccessTokenRequestFilter"
#~ msgstr "RestClient AccessTokenRequestFilter"

#~ msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
#~ msgstr "`AccessTokenRequestFilter` は、すべてのトークンをStringとして扱うため、JWTトークンと不透明なトークンの両方を扱うことができます。"

#~ msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
#~ msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@AccessToken\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@AccessToken\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"

#~ msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
#~ msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#~ msgid "Exchange Token Before Propagation"
#~ msgstr "伝搬前のトークンの交換"

#~ msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
#~ msgstr "もし、現在のアクセストークンを伝搬する前に交換する必要があり、かつ link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] または他の link:https://tools.ietf.org/html/rfc8693[Token Exchange] トークングラントをサポートする OpenID Connect プロバイダーで作業する場合は、`AccessTokenRequestFilter` を以下のように設定することが可能です。"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=exchange\n"
#~ "quarkus.oidc-client.grant-options.exchange.audience=quarkus-app-exchange\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=exchange\n"
#~ "quarkus.oidc-client.grant-options.exchange.audience=quarkus-app-exchange\n"

#~ msgid "quarkus.oidc-token-propagation.exchange-token=true\n"
#~ msgstr "quarkus.oidc-token-propagation.exchange-token=true\n"

#~ msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
#~ msgstr "`AccessTokenRequestFilter` は `OidcClient` を使用して現在のトークンを交換し、`quarkus.oidc-client.grant-options.exchange` を使用して OpenID Connect プロバイダーが期待する追加の交換プロパティーを設定できる点に留意してください。"

#~ msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
#~ msgstr "`AccessTokenRequestFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は、`quarkus.oidc-token-propagation.client-name` 設定プロパティーで選択することができます。"

#~ msgid "RestClient JsonWebTokenRequestFilter"
#~ msgstr "RestClient JsonWebTokenRequestFilter"

#~ msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
#~ msgstr "`JsonWebTokenRequestFilter` の使用は、ベアラー JWT トークンで作業する場合に推奨されます。これらのトークンは `issuer` や `audience` などのクレームを変更し、更新されたトークンを再度保護 (再署名など) することができます。注入された `org.eclipse.microprofile.jwt.JsonWebToken` を想定しているため、不透明なトークンでは機能しません。また、OpenID Connect プロバイダーが Token Exchange プロトコルをサポートしている場合は、代わりに `AccessTokenRequestFilter` を使用することが推奨されます。JWT と不透明なベアラートークンの両方を `AccessTokenRequestFilter` と安全に交換することができるからです。"

#~ msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
#~ msgstr "`JsonWebTokenRequestFilter` は、`Service A` の実装が、注入された `org.eclipse.microprofile.jwt.JsonWebToken` を新しい `issuer` と `audience` のクレーム値で更新し、更新されたトークンを新しい署名で再度保護することを容易にします。唯一の難しいステップは、`Service A` に署名鍵を持たせることです。署名鍵は、安全なファイルシステムまたは Vault などのリモートの安全なストレージからプロビジョニングする必要があります。"

#~ msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
#~ msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.JsonWebToken;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.JsonWebToken;\n"

#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@JsonWebToken\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@JsonWebToken\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"

#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@RegisterProvider(JsonWebTokenRequestFilter.class)\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@RegisterProvider(JsonWebTokenRequestFilter.class)\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#~ msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
#~ msgstr "または、`quarkus.oidc-token-propagation.register-filter` プロパティーおよび `quarkus.oidc-token-propagation.json-web-token` プロパティーの両方が `true` に設定されている場合、`JsonWebTokenRequestFilter` は、すべての MP Rest または JAX-RS クライアントで自動的に登録することができます。"

#~ msgid "Update Token Before Propagation"
#~ msgstr "伝搬前のトークンの更新"

#~ msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
#~ msgstr "注入されたトークンの `iss` (発行者) や `aud` (オーディエンス) のクレームを更新して、新しい署名で保護する必要がある場合は、`JsonWebTokenRequestFilter` を以下のように設定できます。"

#~ msgid ""
#~ "quarkus.oidc-token-propagation.secure-json-web-token=true\n"
#~ "smallrye.jwt.sign.key.location=/privateKey.pem\n"
#~ "# Set a new issuer\n"
#~ "smallrye.jwt.new-token.issuer=http://frontend-resource\n"
#~ "# Set a new audience\n"
#~ "smallrye.jwt.new-token.audience=http://downstream-resource\n"
#~ "# Override the existing token issuer and audience claims if they are already set\n"
#~ "smallrye.jwt.new-token.override-matching-claims=true\n"
#~ msgstr ""
#~ "quarkus.oidc-token-propagation.secure-json-web-token=true\n"
#~ "smallrye.jwt.sign.key.location=/privateKey.pem\n"
#~ "# Set a new issuer\n"
#~ "smallrye.jwt.new-token.issuer=http://frontend-resource\n"
#~ "# Set a new audience\n"
#~ "smallrye.jwt.new-token.audience=http://downstream-resource\n"
#~ "# Override the existing token issuer and audience claims if they are already set\n"
#~ "smallrye.jwt.new-token.override-matching-claims=true\n"

#~ msgid "As already noted above, please use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider which supports a Token Exchange protocol."
#~ msgstr "前述のように、Token Exchange プロトコルをサポートする Keycloak または OpenID Connect プロバイダーを使用する場合は、`AccessTokenRequestFilter` を使用してください。"

#~ msgid "You can generate the tokens as described in xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
#~ msgstr "xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] のセクションで説明したように、トークンを生成することができます。REST テストエンドポイントを準備します。登録されたトークン伝搬フィルターで注入された MP REST クライアントを使用するテストフロントエンドエンドポイントは、ダウンストリームエンドポイントで呼び出すことができます。たとえば、`main` Quarkus リポジトリーの `integration-tests/oidc-token-propagation` を参照してください。"

#~ msgid "Token Propagation Reactive"
#~ msgstr "トークン伝播リアクティブ"

#~ msgid ""
#~ "<dependency>\n"
#~ "    <groupId>io.quarkus</groupId>\n"
#~ "    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
#~ "</dependency>\n"
#~ msgstr ""
#~ "<dependency>\n"
#~ "    <groupId>io.quarkus</groupId>\n"
#~ "    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
#~ "</dependency>\n"

#~ msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
#~ msgstr "`quarkus-oidc-token-propagation-reactive` エクステンションは、`io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` を提供します。これは、現在の `Bearer` または `Authorization Code Flow` アクセストークンを伝播するために使用することができます。"

#~ msgid "The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning the tokens before the propagation.  However these features may be added in the future."
#~ msgstr "(リアクティブではない `quarkus-oidc-token-propagation` エクステンションとは対照的に) `quarkus-oidc-token-propagation-reactive` エクステンションは現在、伝播前のトークンの交換または再署名をサポートしていません。ただし、これらの機能は将来追加される可能性があります。"

#~ msgid "xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
#~ msgstr "xref:security-openid-connect-web-authentication.adoc[Quarkus - OpenID Connect を使用した、認可コードフローによる Web アプリケーションの保護]"

#~ msgid "In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
#~ msgstr "どちらの場合も、 `OidcClient` はトークンのエンドポイントURLを自動検出し、それを使ってトークンを取得します。"

#~ msgid "See also the previous section about delaying the token acquisition in some cases."
#~ msgstr "トークンの取得を遅らせる場合があることについては、前のセクションも参照してください。"

#~ msgid "`client_secret_jwt`:"
#~ msgstr "`client_secret_jwt`:"

#~ msgid "Token Propagation in MicroProfile RestClient client filter"
#~ msgstr "MicroProfile RestClient クライアントフィルターでのトークンの伝播"
