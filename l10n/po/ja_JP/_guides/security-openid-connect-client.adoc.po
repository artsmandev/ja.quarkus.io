# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-03-30 14:04+0000\n"
"PO-Revision-Date: 2021-03-24 22:20+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-client.adoc:6
#, no-wrap
msgid "Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens"
msgstr "Quarkus - OpenID ConnectとOAuth2クライアントとフィルタを使用したアクセストークンの管理"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:12
msgid "This guide explains how to use:"
msgstr "このガイドでは以下の使い方を解説しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:14
#, fuzzy
msgid "`quarkus-oidc-client` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenId Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]"
msgstr "`quarkus-oidc-client` および `quarkus-oidc-client-filter` エクステンションを使用して、OpenId Connect および link:https://www.keycloak.org/about.html[Keycloak] などの OAuth 2.0 準拠の認証サーバーからアクセストークンを取得し、更新することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:15
#, fuzzy
msgid "`quarkus-oidc-token-propagation` extension to propagate the current bearer or authorization code flow access tokens"
msgstr "`quarkus-oidc-token-propagation` 現在のベアラまたは認可コードのフローアクセストークンを伝播するためのエクステンション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:17
#, fuzzy
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:18
#, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:21
#, fuzzy
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` `io.quarkus.oidc.client.OidcClient` エクステンションは、Smallrye Mutiny と と . `Uni` `Vert.x WebClient`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:23
#, fuzzy
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using `client_credentials` or `password` token grants and refresh the tokens using `refresh_token` grant."
msgstr "`OidcClient` はビルド時に IDP トークンのエンドポイント URL で初期化され、自動検出または手動で構成することができ、このエンドポイントを使用して `client_credentials` または `password` トークングラントを使用してアクセストークンを取得し、 `refresh_token` グラントを使用してトークンを更新します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:25
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:31
#, fuzzy, no-wrap
#| msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret ```"
msgid ""
"quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:34
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:43
#, fuzzy, no-wrap
#| msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret quarkus.oidc-client.grant.type=password quarkus.oidc-client.grant-options.password.username=alice quarkus.oidc-client.grant-options.password.password=alice ``` In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
msgid ""
"quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret quarkus.oidc-client.grant.type=password quarkus.oidc-client.grant-options.password.username=alice quarkus.oidc-client.grant-options.password.password=alice ``` In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:45
msgid "In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:46
#, no-wrap
msgid "Use OidcClient directly"
msgstr "OidcClientの直接使用"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:49
#, fuzzy
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:55
#, fuzzy, no-wrap
#| msgid "``` import javax.inject.PostConstruct; import javax.inject.Inject; import javax.ws.rs.GET;"
msgid ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
msgstr "``` import javax.inject.PostConstruct; import javax.inject.Inject; import javax.ws.rs.GET;"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:58
#, fuzzy, no-wrap
#| msgid "import io.quarkus.oidc.client.OidcClient; import io.quarkus.oidc.client.Tokens;"
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"
msgstr "import io.quarkus.oidc.client.OidcClient; import io.quarkus.oidc.client.Tokens;"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:61
#, fuzzy, no-wrap
#| msgid "@Path(\"/service\")  public class OidcClientResource {"
msgid ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"
msgstr "@Path(\"/service\")  public class OidcClientResource {"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:64
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClient client;\n"
msgstr ""
"    @Inject\n"
"    OidcClient client;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:66
#, no-wrap
msgid "    volatile Tokens currentTokens;\n"
msgstr "    volatile Tokens currentTokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:71
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""
"    @PostConstruct\n"
"    public init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:74
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
msgstr ""
"    @GET\n"
"    public String getResponse() {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:83
#, fuzzy, no-wrap
#| msgid ""
#| "        Tokens tokens = currentTokens;\n"
#| "        if (tokens.isAccessTokenExpired()) {\n"
#| "            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
#| "            currentTokens = tokens;\n"
#| "        } \n"
#| "        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
#| "    }\n"
#| "}\n"
#| "```\n"
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
"```\n"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:85
#, fuzzy, no-wrap
msgid "Use OidcClient in MicroProfile RestClient client filter"
msgstr "MicroProfile RestClientクライアントフィルタでOidcClientを使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:88
#, fuzzy
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは `OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定する `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:90
#, fuzzy
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、トークンの取得を `quarkus.oidc-client.early-tokens-acquisition=false` ."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:92
#, fuzzy
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:97
#, fuzzy, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
msgstr "``"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:102
#, fuzzy, no-wrap
msgid ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr "@RegisterRestClient @OidcClientFilter @Path(\"/\") public interface ProtectedResourceService {."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:106
#: upstream/_guides/security-openid-connect-client.adoc:124
#: upstream/_guides/security-openid-connect-client.adoc:455
#: upstream/_guides/security-openid-connect-client.adoc:472
#: upstream/_guides/security-openid-connect-client.adoc:501
#: upstream/_guides/security-openid-connect-client.adoc:518
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    String getUserName();\n"
"}\n"
msgstr ""
"@GET\n"
"    String getUserName()を使用しています。\n"
"}"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:109
#: upstream/_guides/security-openid-connect-client.adoc:457
#: upstream/_guides/security-openid-connect-client.adoc:503
#, fuzzy
msgid "or"
msgstr "或いは"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:115
#, fuzzy, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"
msgstr "``"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:120
#, fuzzy, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr "@RegisterRestClient @RegisterProvider(OidcClientRequestFilter.class) @Path(\"/\") public interface ProtectedResourceService {."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:127
#, fuzzy
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:128
#, no-wrap
msgid "Use injected Tokens"
msgstr "注入されたトークンを使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:131
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:138
#, fuzzy, no-wrap
#| msgid "``` @Provider @Priority(Priorities.AUTHENTICATION)  @RequestScoped public class OidcClientRequestCustomFilter implements ClientRequestFilter {"
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"@RequestScoped\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr "``` @Provider @Priority(Priorities.AUTHENTICATION)  @RequestScoped public class OidcClientRequestCustomFilter implements ClientRequestFilter {"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:141
#, no-wrap
msgid ""
"    @Inject\n"
"    Tokens tokens;\n"
msgstr ""
"    @Inject\n"
"    Tokens tokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:147
#, fuzzy, no-wrap
#| msgid ""
#| "    @Override\n"
#| "    public void filter(ClientRequestContext requestContext) throws IOException {\n"
#| "        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
#| "    }\n"
#| "}\n"
#| "```\n"
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
"```\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:150
#, fuzzy
#| msgid "The `Tokens` producer will acquire and refresh the tokens and the custom filter will decide how and when to use the token."
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得して更新し、カスタムフィルターがいつどのようにトークンを使用するかを決定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:152
#, fuzzy
msgid "See also the previous section about delaying the token acquisition in some cases."
msgstr "トークンの取得を遅らせる場合があることについては、前の項も参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:153
#, no-wrap
msgid "Refreshing Access Tokens"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:157
msgid "Both `OidcClientRequestFilter` and `Tokens` producer will refresh the current expired access token if the refresh token is available.  Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:159
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:161
msgid "Please note that some OpenId Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:162
#, no-wrap
msgid "OidcClients"
msgstr "OidcClients"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:165
#, fuzzy
msgid "`io.quarkus.oidc.client.OidcClients` is a container of `OidcClient`s - it includes a default `OidcClient` (which can also be injected directly as described above) and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` は、 `OidcClient`s - it includes a default `OidcClient` (上記のように直接注入することも可能です)と名前付きクライアントのコンテナーで、このように設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:169
#, fuzzy, no-wrap
msgid "quarkus.oidc-client.client-enabled=false\n"
msgstr "``"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:173
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.jwt-secret.auth-server-url=${keycloak.url}/realms/quarkus2/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr "quarkus.oidc-client.jwt-secret.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.jwt-secret.client-id=quarkus-app quarkus.oidc-client.jpjwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:176
#, fuzzy
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:182
#: upstream/_guides/security-openid-connect-client.adoc:209
#: upstream/_guides/security-openid-connect-client.adoc:240
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:185
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:188
#: upstream/_guides/security-openid-connect-client.adoc:216
#: upstream/_guides/security-openid-connect-client.adoc:249
#, no-wrap
msgid ""
"@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:191
#: upstream/_guides/security-openid-connect-client.adoc:252
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:198
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:203
#, fuzzy
msgid "If you also use link:security-openid-connect-multitenancy[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "link:security-openid-connect-multitenancy[OIDC マルチテナンシーを] 使用し、各 OIDC テナントが独自の関連する `OidcClient` を持っている場合は、例えば Vert.x `RoutingContext` `tenantId` 属性を使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:213
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:221
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:230
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:234
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:244
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:246
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:264
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
"        cfg.setClientId(\"quarkus\");\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(config);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:267
#, no-wrap
msgid "OidcClient Authentication"
msgstr "Oidcクライアント認証"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:271
msgid "`OidcClient` has to authenticate to the OpenId Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` は、 `client_credentials` やその他のグラントリクエストを成功させるために OpenId Connect Provider に認証する必要があります。 link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC クライアント認証] オプションはすべてサポートされています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:273
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:279
#, fuzzy, no-wrap
#| msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=mysecret ```"
msgid ""
"quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=mysecret ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:282
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:289
#, fuzzy, no-wrap
#| msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.client-secret.value=mysecret quarkus.oidc-client.credentials.client-secret.method=post ```"
msgid ""
"quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.client-secret.value=mysecret quarkus.oidc-client.credentials.client-secret.method=post ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:292
msgid "`client_secret_jwt`:"
msgstr "`client_secret_jwt`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:298
#, fuzzy, no-wrap
#| msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"
msgid ""
"quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:301
#, fuzzy
msgid "`private_key_jwt` with the PEM key file:"
msgstr "`private_key_jwt` with the PEM key file:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:307
#, fuzzy, no-wrap
#| msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem ```"
msgid ""
"quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:310
#, fuzzy
msgid "`private_key_jwt` with the key store file:"
msgstr "`private_key_jwt` with the key store file:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:319
#, fuzzy, no-wrap
#| msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks quarkus.oidc-client.credentials.jwt.key-store-password=mypassword quarkus.oidc-client.credentials.jwt.key-password=mykeypassword quarkus.oidc-client.credentials.jwt.key-id=mykey ```"
msgid ""
"quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
"quarkus.oidc-client.credentials.jwt.key-id=mykey\n"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks quarkus.oidc-client.credentials.jwt.key-store-password=mypassword quarkus.oidc-client.credentials.jwt.key-password=mykeypassword quarkus.oidc-client.credentials.jwt.key-id=mykey ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:322
#, fuzzy
msgid "Using `private_key_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`private_key_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントの秘密が漏れることはありません。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:324
#: upstream/_guides/security-openid-connect-client.adoc:540
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:327
msgid "Add the following dependencies to your test project:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:350
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>org.awaitility</groupId>\n"
"    <artifactId>awaitility</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:353
msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:356
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:359
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:362
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:366
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
"import com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:368
#, no-wrap
msgid "import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:370
#, no-wrap
msgid "public class KeycloakRealmResourceManager implements QuarkusTestResourceLifecycleManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:372
#, no-wrap
msgid "    private WireMockServer server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:375
#, fuzzy, no-wrap
#| msgid ""
#| "    @GET\n"
#| "    public String getResponse() {\n"
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
msgstr ""
"    @GET\n"
"    public String getResponse() {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:378
#, no-wrap
msgid ""
"        server = new WireMockServer(wireMockConfig().dynamicPort().useChunkedTransferEncoding(ChunkedEncodingPolicy.NEVER));\n"
"        server.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:393
#, no-wrap
msgid ""
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=password&username=alice&password=alice\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_1\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=refresh_token&refresh_token=refresh_token_1\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_2\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:400
#, no-wrap
msgid ""
"        Map<String, String> conf = new HashMap<>();\n"
"        conf.put(\"quarkus.oidc-client.auth-server-url\", server.baseUrl());\n"
"        conf.put(\"keycloak-url\", server.baseUrl());\n"
"        return conf;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:409
#, no-wrap
msgid ""
"    @Override\n"
"    public synchronized void stop() {\n"
"        if (server != null) {\n"
"            server.stop();\n"
"            server = null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:412
msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:414
msgid "Set `application.properties`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:425
#, fuzzy, no-wrap
#| msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret quarkus.oidc-client.grant.type=password quarkus.oidc-client.grant-options.password.username=alice quarkus.oidc-client.grant-options.password.password=alice ``` In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
msgid ""
"quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"quarkus.oidc-client.token-path=/tokens\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret quarkus.oidc-client.grant.type=password quarkus.oidc-client.grant-options.password.username=alice quarkus.oidc-client.grant-options.password.password=alice ``` In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:428
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:430
#, fuzzy, no-wrap
msgid "Token Propagation in MicroProfile RestClient client filter"
msgstr "MicroProfile RestClient クライアントフィルタでのトークンの伝播"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:433
#, fuzzy
msgid "`quarkus-oidc-token-propagation` extension provide `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` and `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` JAX-RS ClientRequestFilters which propagates the current link:security-openid-connect[Bearer] or link:security-openid-connect-web-authentication[Authorization Code Flow] access token as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-token-propagation` エクステンションは、 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` JAX-RS ClientRequestFilter を提供します。これは、現在のベアラまたは認証コードフローのアクセストークンを HTTP `Authorization` `Bearer` スキーム値として伝播します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:434
#, no-wrap
msgid "AccessTokenRequestFilter"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:437
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:439
msgid "When you need to propagate the current Authorization Code Flow access token then `AccessTokenRequestFilter` will be the best option as such tokens do not need to be exchanged or otherwise re-enhanced. Authorization Code Flow access tokens may be also be opaque/binary tokens."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:441
#, fuzzy
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`AccessTokenRequestFilter` を選択的に登録することができます。 `io.quarkus.oidc.token.propagation.AccessToken` 、 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、例えば、 を選択的に登録することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:446
#, fuzzy, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"
msgstr "``"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:451
#: upstream/_guides/security-openid-connect-client.adoc:497
#, fuzzy, no-wrap
msgid ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr "@RegisterRestClient @AccessToken @Path(\"/\") public interface ProtectedResourceService {."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:463
#, fuzzy, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"
msgstr "``"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:468
#, fuzzy, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr "@RegisterRestClient @RegisterProvider(AccessTokenRequestFilter.class) @Path(\"/\") public interface ProtectedResourceService {."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:475
#, fuzzy
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:477
#: upstream/_guides/security-openid-connect-client.adoc:538
#, fuzzy
msgid "This filter will be additionally enhanced in the future to support exchanging the access tokens before propagating them."
msgstr "このフィルタは将来的に強化され、アクセストークンを伝播する前に再署名や交換をサポートするようになる予定です。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:478
#, no-wrap
msgid "JsonWebTokenRequestFilter"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:481
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:483
msgid "Direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:485
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implemementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:487
#, fuzzy
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`AccessTokenRequestFilter` を選択的に登録することができます。 `io.quarkus.oidc.token.propagation.AccessToken` 、 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、例えば、 を選択的に登録することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:492
#, fuzzy, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"
msgstr "``"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:509
#, fuzzy, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"
msgstr "``"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:514
#, fuzzy, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(JsonWebTokenTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr "@RegisterRestClient @RegisterProvider(AccessTokenRequestFilter.class) @Path(\"/\") public interface ProtectedResourceService {."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:521
#, fuzzy
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if both `quarkus.oidc-token-propagation.register-filter` and ``quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:523
msgid "If this filter has to update the inject token and secure it with a new signature again then you can configure it like this:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:534
#, no-wrap
msgid ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:544
msgid "You can generate the tokens as described in link:security-openid-connect#integration-testing[OpenId Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:545
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:548
#, fuzzy
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkusのセキュリティー]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:549
#, fuzzy
msgid "link:security-openid-connect[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr "link:security-openid-connect[Quarkus - OpenID Connectを使用したベアラートークン認証を使用したサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:549
#, fuzzy
msgid "link:security-openid-connect-web-authentication[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr "link:security-openid-connect-web-authentication[Quarkus - OpenID Connectを使用して、認証コードフローを使用してWebアプリケーションを保護する]"
