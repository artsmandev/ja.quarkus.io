# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-04-28 16:09+0000\n"
"PO-Revision-Date: 2021-04-30 16:54+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-client.adoc:6
#, no-wrap
msgid "Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens"
msgstr "Quarkus - OpenID ConnectとOAuth2クライアントとフィルタを使用したアクセストークンの管理"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:12
msgid "This guide explains how to use:"
msgstr "このガイドでは以下の使い方を解説しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:14
msgid "`quarkus-oidc-client` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenId Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]"
msgstr "`quarkus-oidc-client` および `quarkus-oidc-client-filter` エクステンションを使用して、OpenId Connect および link:https://www.keycloak.org/about.html[Keycloak] などの OAuth 2.0 準拠の認可サーバーからアクセストークンを取得し、更新することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:15
msgid "`quarkus-oidc-token-propagation` extension to propagate the current bearer or authorization code flow access tokens"
msgstr "`quarkus-oidc-token-propagation` 現在のベアラーまたは認可コードフローアクセストークンを伝播するためのエクステンション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:17
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:18
#, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:21
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` エクステンションは、SmallRye Mutiny `Uni` および `Vert.xWebClient` を使用してトークンを取得および更新するために使用できるリアクティブな `io.quarkus.oidc.client.OidcClient` を提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:23
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using `client_credentials` or `password` token grants and refresh the tokens using `refresh_token` grant."
msgstr "`OidcClient` は自動検出または手動で構成することができる IDP トークンのエンドポイント URL でビルド時に初期化され、このエンドポイントを使用して `client_credentials` または `password` トークングラントを使用してアクセストークンを取得し、 `refresh_token` グラントを使用してトークンを更新します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:25
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:31
#, no-wrap
#| msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret ```"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:34
msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
msgstr "`client_credentials` グラントにより、`quarkus.oidc-client.grant-options.client.<param-name>=<value>` を介してトークンリクエストに追加のパラメータを設定できます。 `audience` パラメータを使用して目的のトークン受信者を設定する方法は次のとおりです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:38
#, no-wrap
msgid "quarkus.oidc-client.grant-options.client.audience=https://example.com/api\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:41
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:50
#, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.secret=secret\n"
#| "quarkus.oidc-client.grant.type=password\n"
#| "quarkus.oidc-client.grant-options.password.username=alice\n"
#| "quarkus.oidc-client.grant-options.password.password=alice\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:52
msgid "In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
msgstr "どちらの場合も、 `OidcClient` はトークンのエンドポイントURLを自動検出し、それを使ってトークンを取得します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:53
#, no-wrap
msgid "Use OidcClient directly"
msgstr "OidcClientの直接使用"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:56
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:62
#, no-wrap
msgid ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
msgstr ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:65
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"
msgstr ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:68
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"
msgstr ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:71
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClient client;\n"
msgstr ""
"    @Inject\n"
"    OidcClient client;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:73
#, no-wrap
msgid "    volatile Tokens currentTokens;\n"
msgstr "    volatile Tokens currentTokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:78
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""
"    @PostConstruct\n"
"    public init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:81
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
msgstr ""
"    @GET\n"
"    public String getResponse() {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:91
#, no-wrap
#| msgid ""
#| "        Tokens tokens = currentTokens;\n"
#| "        if (tokens.isAccessTokenExpired()) {\n"
#| "            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
#| "            currentTokens = tokens;\n"
#| "        } \n"
#| "        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
#| "    }\n"
#| "}\n"
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:93
#, no-wrap
msgid "Use OidcClient in MicroProfile RestClient client filter"
msgstr "MicroProfile RestClientクライアントフィルタでOidcClientを使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:96
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。このフィルターは、`OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:98
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、`quarkus.oidc-client.early-tokens-acquisition=false` でトークンの取得を遅延させるべきです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:100
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:105
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:110
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:114
#: upstream/_guides/security-openid-connect-client.adoc:132
#: upstream/_guides/security-openid-connect-client.adoc:477
#: upstream/_guides/security-openid-connect-client.adoc:494
#: upstream/_guides/security-openid-connect-client.adoc:523
#: upstream/_guides/security-openid-connect-client.adoc:540
#, no-wrap
msgid ""
"    @GET\n"
"    String getUserName();\n"
"}\n"
msgstr ""
"    @GET\n"
"    String getUserName();\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:117
#: upstream/_guides/security-openid-connect-client.adoc:479
#: upstream/_guides/security-openid-connect-client.adoc:525
msgid "or"
msgstr "或いは"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:123
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:128
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:135
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:136
#, no-wrap
msgid "Use injected Tokens"
msgstr "注入されたトークンを使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:139
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:145
#, no-wrap
#| msgid ""
#| "@Provider\n"
#| "@Priority(Priorities.AUTHENTICATION)\n"
#| "@RequestScoped\n"
#| "public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:148
#, no-wrap
msgid ""
"    @Inject\n"
"    Tokens tokens;\n"
msgstr ""
"    @Inject\n"
"    Tokens tokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:154
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:157
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:159
msgid "See also the previous section about delaying the token acquisition in some cases."
msgstr "トークンの取得を遅らせる場合があることについては、前のセクションも参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:160
#, no-wrap
msgid "Refreshing Access Tokens"
msgstr "アクセストークンの更新"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:164
msgid "Both `OidcClientRequestFilter` and `Tokens` producer will refresh the current expired access token if the refresh token is available.  Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr "`OidcClientRequestFilter` と `Tokens` の両プロデューサーは、リフレッシュトークンが利用可能な場合、現在の期限切れアクセストークンをリフレッシュします。さらに、 `quarkus.oidc-client.refresh-token-time-skew` プロパティは、HTTP 401 エラーの原因となる期限切れ間近のアクセストークンの送信を避けるために、アクセストークンのリフレッシュを先取りして行うことができます。例えば、このプロパティが `3S` に設定されていて、アクセストークンが3秒以内に期限切れになる場合、このトークンは自動的にリフレッシュされます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:166
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr "アクセストークンの更新が必要なのにリフレッシュトークンがない場合は、 `client_credentials` のように設定されたグラントを使って新しいトークンの取得を試みます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:168
msgid "Please note that some OpenId Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
msgstr "OpenId Connect Providers の中には、 `client_credentials` グラントレスポンスでリフレッシュトークンを返さないものがありますのでご注意ください。例えば、Keycloak 12以降、 `client_credentials` ではデフォルトでリフレッシュ・トークンが返されません。また、プロバイダによっては、リフレッシュ・トークンの使用回数が制限されている場合があります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:169
#, no-wrap
msgid "OidcClients"
msgstr "OidcClients"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:172
msgid "`io.quarkus.oidc.client.OidcClients` is a container of `OidcClient`s - it includes a default `OidcClient` (which can also be injected directly as described above) and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` は、 `OidcClient` のコンテナです。デフォルトの `OidcClient` (上記のように直接注入することも可能です) と名前付きクライアントを含み、このように設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:176
#, no-wrap
msgid "quarkus.oidc-client.client-enabled=false\n"
msgstr "quarkus.oidc-client.client-enabled=false\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:180
#, no-wrap
#| msgid ""
#| "quarkus.oidc-client.jwt-secret.auth-server-url=${keycloak.url}/realms/quarkus2/\n"
#| "quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
#| "quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgid ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:183
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:189
#: upstream/_guides/security-openid-connect-client.adoc:216
#: upstream/_guides/security-openid-connect-client.adoc:247
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:192
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:195
#: upstream/_guides/security-openid-connect-client.adoc:223
#: upstream/_guides/security-openid-connect-client.adoc:256
#, no-wrap
msgid ""
"@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:198
#: upstream/_guides/security-openid-connect-client.adoc:259
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:205
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:210
msgid "If you also use link:security-openid-connect-multitenancy[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "link:security-openid-connect-multitenancy[OIDC マルチテナンシーを] 使用し、各 OIDC テナントが独自の関連する `OidcClient` を持っている場合は、 Vert.x `RoutingContext` `tenantId` 属性を例えば次のように使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:220
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:228
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:237
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:241
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:251
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:253
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:271
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
"        cfg.setClientId(\"quarkus\");\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(config);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:274
#, no-wrap
msgid "OidcClient Authentication"
msgstr "Oidcクライアント認証"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:278
msgid "`OidcClient` has to authenticate to the OpenId Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` は、 `client_credentials` やその他のグラントリクエストを成功させるために OpenId Connect Provider に認証する必要があります。 link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC クライアント認証] オプションはすべてサポートされています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:280
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:286
#, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.secret=mysecret\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:289
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:296
#, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#| "quarkus.oidc-client.credentials.client-secret.method=post\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:299
msgid "`client_secret_jwt`:"
msgstr "`client_secret_jwt`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:305
#, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:308
msgid "`private_key_jwt` with the PEM key file:"
msgstr "`private_key_jwt` PEMキーファイル有:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:314
#, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:317
msgid "`private_key_jwt` with the key store file:"
msgstr "`private_key_jwt` PEMキーストアファイル有:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:326
#, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
#| "quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
#| "quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
#| "quarkus.oidc-client.credentials.jwt.key-id=mykey\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
"quarkus.oidc-client.credentials.jwt.key-id=mykey\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
"quarkus.oidc-client.credentials.jwt.key-id=mykey\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:329
msgid "Using `private_key_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`private_key_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントシークレットが漏れることはありません。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:331
#: upstream/_guides/security-openid-connect-client.adoc:562
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:334
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:357
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>org.awaitility</groupId>\n"
"    <artifactId>awaitility</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:360
msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "Wiremockベースの `QuarkusTestResourceLifecycleManager` を例えば以下のように書きます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:363
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:366
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:369
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:373
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
"import com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:375
#, no-wrap
msgid "import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:377
#, no-wrap
msgid "public class KeycloakRealmResourceManager implements QuarkusTestResourceLifecycleManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:379
#, no-wrap
msgid "    private WireMockServer server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:382
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
msgstr ""
"    @Override\n"
"    public Map<String, String> start() {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:385
#, no-wrap
msgid ""
"        server = new WireMockServer(wireMockConfig().dynamicPort().useChunkedTransferEncoding(ChunkedEncodingPolicy.NEVER));\n"
"        server.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:400
#, no-wrap
msgid ""
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=password&username=alice&password=alice\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_1\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=refresh_token&refresh_token=refresh_token_1\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_2\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:407
#, no-wrap
msgid ""
"        Map<String, String> conf = new HashMap<>();\n"
"        conf.put(\"quarkus.oidc-client.auth-server-url\", server.baseUrl());\n"
"        conf.put(\"keycloak-url\", server.baseUrl());\n"
"        return conf;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:416
#, no-wrap
msgid ""
"    @Override\n"
"    public synchronized void stop() {\n"
"        if (server != null) {\n"
"            server.stop();\n"
"            server = null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:419
msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:421
msgid "Set `application.properties`, for example:"
msgstr "`application.properties` を次のように設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:433
#, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
#| "quarkus.oidc-client.discovery-enabled=false\n"
#| "quarkus.oidc-client.token-path=/tokens\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.secret=secret\n"
#| "quarkus.oidc-client.grant.type=password\n"
#| "quarkus.oidc-client.grant-options.password.username=alice\n"
#| "quarkus.oidc-client.grant-options.password.password=alice\n"
msgid ""
"# Use 'keycloak.url' property set by the test KeycloakRealmResourceManager\n"
"quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"quarkus.oidc-client.token-path=/tokens\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""
"# Use 'keycloak.url' property set by the test KeycloakRealmResourceManager\n"
"quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"quarkus.oidc-client.token-path=/tokens\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:436
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr "そして最後にテストコードを書きます。上記の Wiremock ベースのリソースがある場合、最初のテスト起動では `access_token_1` アクセストークンが返却されますが、このアクセストークンは 4 秒で期限切れになります。 `awaitility` を使用して約 5 秒間待つと、次のテスト起動時に `access_token_2` アクセストークンが返され、期限切れの `access_token_1` アクセストークンがリフレッシュされたことが確認できます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:437
#, no-wrap
msgid "Token endpoint configuration"
msgstr "トークンエンドポイントの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:440
msgid "By default the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` のパスを追加することで、トークンのエンドポイントアドレスが検出されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:442
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、トークンエンドポイントのアドレスを相対パスの値で設定することができます。例:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:449
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
"quarkus.oidc-client.token-path=/protocol/openid-connect/tokens\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:452
#, no-wrap
msgid "Token Propagation in MicroProfile RestClient client filter"
msgstr "MicroProfile RestClient クライアントフィルターでのトークンの伝播"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:455
msgid "`quarkus-oidc-token-propagation` extension provide `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` and `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` JAX-RS ClientRequestFilters which propagates the current link:security-openid-connect[Bearer] or link:security-openid-connect-web-authentication[Authorization Code Flow] access token as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-token-propagation` エクステンションは、 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` と `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` JAX-RS ClientRequestFilters を提供します。これは、現在のベアラーまたは認証コードフローのアクセストークンを HTTP `Authorization` `Bearer` スキーム値として伝播します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:456
#, no-wrap
msgid "AccessTokenRequestFilter"
msgstr "AccessTokenRequestFilter"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:459
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` は、すべてのトークンをStringとして扱うため、JWTトークンと不透明なトークンの両方を扱うことができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:461
msgid "When you need to propagate the current Authorization Code Flow access token then `AccessTokenRequestFilter` will be the best option as such tokens do not need to be exchanged or otherwise re-enhanced. Authorization Code Flow access tokens may be also be opaque/binary tokens."
msgstr "現在の認証コードフローアクセストークンを伝搬させる必要がある場合、そのようなトークンは交換やその他の再強化を必要としないため、 `AccessTokenRequestFilter` が最適な選択肢となります。認証コードフローのアクセストークンは、不透明／バイナリトークンである場合もあります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:463
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:468
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:473
#: upstream/_guides/security-openid-connect-client.adoc:519
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:485
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:490
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:497
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:499
#: upstream/_guides/security-openid-connect-client.adoc:560
msgid "This filter will be additionally enhanced in the future to support exchanging the access tokens before propagating them."
msgstr "このフィルタは将来的に強化され、アクセストークンを伝播する前に再署名や交換をサポートするようになる予定です。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:500
#, no-wrap
msgid "JsonWebTokenRequestFilter"
msgstr "JsonWebTokenRequestFilter"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:503
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens."
msgstr "`JsonWebTokenRequestFilter` を使用することは、ベアラ JWT トークンを扱う場合に推奨されます。これらのトークンは、 `issuer` や `audience` などのクレームを修正し、更新されたトークンを再度保護することができます（例えば、再署名）。これは、注入された `org.eclipse.microprofile.jwt.JsonWebToken` を想定しているため、不透明なトークンでは動作しません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:505
msgid "Direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr "ベアラートークンのエンドツーエンドの直接伝播は、可能であれば避けるべきです。例えば、 `Client → Service A → Service B` 、 `Client` が `Service A` に送ったトークンを `Service B` が受け取るような場合です。このような場合、 `Service B` は、トークンが `Service A` から来たのか、それとも `Client` から直接来たのかを区別することができません。 `Service B` がトークンが `Service A` から来たものであることを確認するためには、新しいissuerとaudienceクレームの検証を行うことができなければなりません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:507
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implemementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr "`JsonWebTokenRequestFilter` は、 `Service A` の実装が、注入された `org.eclipse.microprofile.jwt.JsonWebToken` を新しい `issuer` と `audience` のクレーム値で更新し、更新されたトークンを新しい署名で再度保護することを容易にします。唯一の難しいステップは、 `Service A` に署名鍵を持たせることです。署名鍵は、安全なファイルシステムまたは Vault などのリモートの安全なストレージからプロビジョニングする必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:509
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:514
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:531
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:536
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(JsonWebTokenTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(JsonWebTokenTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:543
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if both `quarkus.oidc-token-propagation.register-filter` and ``quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter` と `quarkus.oidc-token-propagation.json-web-token` の両方のプロパティが `true` に設定されている場合、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:545
msgid "If this filter has to update the inject token and secure it with a new signature again then you can configure it like this:"
msgstr "このフィルターが、インジェクトトークンを更新し、再び新しい署名で保護する必要がある場合は、次のように設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:556
#, no-wrap
msgid ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"
msgstr ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:566
msgid "You can generate the tokens as described in link:security-openid-connect#integration-testing[OpenId Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "link:security-openid-connect#integration-testing[OpenId Connect Bearer Token Integration testing]のセクションで説明したように、トークンを生成することができます。RESTテストエンドポイントを準備します。注入されたMP RESTクライアントを使用するテストフロントエンドエンドポイントは、登録されたトークン伝搬フィルターを使用して、ダウンストリームエンドポイントで呼び出すことができます。例えば、 `main` Quarkusリポジトリの `integration-tests/oidc-token-propagation` を参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:567
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:570
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkus Security]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:571
msgid "link:security-openid-connect[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr "link:security-openid-connect[Quarkus - OpenID Connectを使用したベアラートークン認可を使用したサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:571
msgid "link:security-openid-connect-web-authentication[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr "link:security-openid-connect-web-authentication[Quarkus - OpenID Connectの認証コードフローを使用してWebアプリケーションを保護]"
