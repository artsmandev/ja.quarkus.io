# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-02-11 02:12+0000\n"
"PO-Revision-Date: 2021-03-24 22:20+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-client.adoc:6
#, no-wrap
msgid "Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens"
msgstr "Quarkus - OpenID ConnectとOAuth2クライアントとフィルタを使用したアクセストークンの管理"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:12
msgid "This guide explains how to use:"
msgstr "このガイドでは以下の使い方を解説しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:13
#, fuzzy
msgid "`quarkus-oidc-client` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenId Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]"
msgstr "`quarkus-oidc-client` および `quarkus-oidc-client-filter` エクステンションを使用して、OpenId Connect および link:https://www.keycloak.org/about.html[Keycloak] などの OAuth 2.0 準拠の認証サーバーからアクセストークンを取得し、更新することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:14
#, fuzzy
msgid "`quarkus-oidc-token-propagation` extension to propagate the current bearer or authorization code flow access tokens"
msgstr "`quarkus-oidc-token-propagation` 現在のベアラまたは認可コードのフローアクセストークンを伝播するためのエクステンション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:16
#, fuzzy
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:17
#, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:20
#, fuzzy
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using Smallrye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` `io.quarkus.oidc.client.OidcClient` エクステンションは、Smallrye Mutiny と と . `Uni` `Vert.x WebClient`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:22
#, fuzzy
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using `client_credentials` or `password` token grants and refresh the tokens using `refresh_token` grant."
msgstr "`OidcClient` はビルド時に IDP トークンのエンドポイント URL で初期化され、自動検出または手動で構成することができ、このエンドポイントを使用して `client_credentials` または `password` トークングラントを使用してアクセストークンを取得し、 `refresh_token` グラントを使用してトークンを更新します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:24
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:30
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret ```"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:32
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:42
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret quarkus.oidc-client.grant.type=password quarkus.oidc-client.grant-options.password.username=alice quarkus.oidc-client.grant-options.password.password=alice ``` In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret quarkus.oidc-client.grant.type=password quarkus.oidc-client.grant-options.password.username=alice quarkus.oidc-client.grant-options.password.password=alice ``` In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:43
#, no-wrap
msgid "Use OidcClient directly"
msgstr "OidcClientの直接使用"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:46
#, fuzzy
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:51
msgid "``` import javax.inject.PostConstruct; import javax.inject.Inject; import javax.ws.rs.GET;"
msgstr "``` import javax.inject.PostConstruct; import javax.inject.Inject; import javax.ws.rs.GET;"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:54
msgid "import io.quarkus.oidc.client.OidcClient; import io.quarkus.oidc.client.Tokens;"
msgstr "import io.quarkus.oidc.client.OidcClient; import io.quarkus.oidc.client.Tokens;"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:57
msgid "@Path(\"/service\")  public class OidcClientResource {"
msgstr "@Path(\"/service\")  public class OidcClientResource {"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:60
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClient client;\n"
msgstr ""
"    @Inject\n"
"    OidcClient client;\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:62
#, no-wrap
msgid "    volatile Tokens currentTokens;\n"
msgstr "    volatile Tokens currentTokens;\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:67
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""
"    @PostConstruct\n"
"    public init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:70
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
msgstr ""
"    @GET\n"
"    public String getResponse() {\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:80
#, no-wrap
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
"```\n"
msgstr ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
"```\n"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:81
#, fuzzy, no-wrap
msgid "Use OidcClient in MicroProfile RestClient client filter"
msgstr "MicroProfile RestClientクライアントフィルタでOidcClientを使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:84
#, fuzzy
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは `OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定する `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:86
#, fuzzy
msgid "By default this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、トークンの取得を `quarkus.oidc-client.early-tokens-acquisition=false` ."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:88
#, fuzzy
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:92
#, fuzzy
msgid "``` import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; import io.quarkus.oidc.client.filter.OidcClientFilter;"
msgstr "``"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:97
#, fuzzy
msgid "@RegisterRestClient @OidcClientFilter @Path(\"/\")  public interface ProtectedResourceService {"
msgstr "@RegisterRestClient @OidcClientFilter @Path(\"/\") public interface ProtectedResourceService {."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:102
#: upstream/_guides/security-openid-connect-client.adoc:119
#: upstream/_guides/security-openid-connect-client.adoc:321
#: upstream/_guides/security-openid-connect-client.adoc:338
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    String getUserName();\n"
"}\n"
"```\n"
msgstr ""
"@GET\n"
"    String getUserName()を使用しています。\n"
"}"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:104
#: upstream/_guides/security-openid-connect-client.adoc:323
#, fuzzy
msgid "or"
msgstr "或いは"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:109
#, fuzzy
msgid "``` import org.eclipse.microprofile.rest.client.annotation.RegisterProvider; import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; import io.quarkus.oidc.client.filter.OidcClientRequestFilter;"
msgstr "``"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:114
#, fuzzy
msgid "@RegisterRestClient @RegisterProvider(OidcClientRequestFilter.class)  @Path(\"/\")  public interface ProtectedResourceService {"
msgstr "@RegisterRestClient @RegisterProvider(OidcClientRequestFilter.class) @Path(\"/\") public interface ProtectedResourceService {."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:121
#, fuzzy
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:122
#, no-wrap
msgid "Use injected Tokens"
msgstr "注入されたトークンを使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:125
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:131
msgid "``` @Provider @Priority(Priorities.AUTHENTICATION)  @RequestScoped public class OidcClientRequestCustomFilter implements ClientRequestFilter {"
msgstr "``` @Provider @Priority(Priorities.AUTHENTICATION)  @RequestScoped public class OidcClientRequestCustomFilter implements ClientRequestFilter {"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:134
#, no-wrap
msgid ""
"    @Inject\n"
"    Tokens tokens;\n"
msgstr ""
"    @Inject\n"
"    Tokens tokens;\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:141
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
"```\n"
msgstr ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
"```\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:143
msgid "The `Tokens` producer will acquire and refresh the tokens and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得して更新し、カスタムフィルターがいつどのようにトークンを使用するかを決定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:145
#, fuzzy
msgid "See also the previous section about delaying the token acquisition in some cases."
msgstr "トークンの取得を遅らせる場合があることについては、前の項も参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:146
#, no-wrap
msgid "OidcClients"
msgstr "OidcClients"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:149
#, fuzzy
msgid "`io.quarkus.oidc.client.OidcClients` is a container of `OidcClient`s - it includes a default `OidcClient` (which can also be injected directly as described above) and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` は、 `OidcClient`s - it includes a default `OidcClient` (上記のように直接注入することも可能です)と名前付きクライアントのコンテナーで、このように設定することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:152
#, fuzzy
msgid "``` quarkus.oidc-client.client-enabled=false"
msgstr "``"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:157
#, fuzzy
msgid "quarkus.oidc-client.jwt-secret.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.jwt-secret.client-id=quarkus-app quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"
msgstr "quarkus.oidc-client.jwt-secret.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.jwt-secret.client-id=quarkus-app quarkus.oidc-client.jpjwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:159
#, fuzzy
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:165
#: upstream/_guides/security-openid-connect-client.adoc:192
#: upstream/_guides/security-openid-connect-client.adoc:223
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:168
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:171
#: upstream/_guides/security-openid-connect-client.adoc:199
#: upstream/_guides/security-openid-connect-client.adoc:232
#, no-wrap
msgid ""
"@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:174
#: upstream/_guides/security-openid-connect-client.adoc:235
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:181
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:186
#, fuzzy
msgid "If you also use link:security-openid-connect-multitenancy[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "link:security-openid-connect-multitenancy[OIDC マルチテナンシーを] 使用し、各 OIDC テナントが独自の関連する `OidcClient` を持っている場合は、例えば Vert.x `RoutingContext` `tenantId` 属性を使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:196
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:204
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:213
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:217
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:227
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:229
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:247
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
"        cfg.setClientId(\"quarkus\"));\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(config);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:250
#, no-wrap
msgid "OidcClient Authentication"
msgstr "Oidcクライアント認証"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:254
msgid "`OidcClient` has to authenticate to the OpenId Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` は、 `client_credentials` やその他のグラントリクエストを成功させるために OpenId Connect Provider に認証する必要があります。 link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC クライアント認証] オプションはすべてサポートされています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:256
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:262
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=mysecret ```"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=mysecret ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:264
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:271
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.client-secret.value=mysecret quarkus.oidc-client.credentials.client-secret.method=post ```"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.client-secret.value=mysecret quarkus.oidc-client.credentials.client-secret.method=post ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:273
msgid "`client_secret_jwt`:"
msgstr "`client_secret_jwt`:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:279
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:281
#, fuzzy
msgid "`private_key_jwt` with the PEM key file:"
msgstr "`private_key_jwt` with the PEM key file:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:287
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem ```"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:289
#, fuzzy
msgid "`private_key_jwt` with the key store file:"
msgstr "`private_key_jwt` with the key store file:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:298
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks quarkus.oidc-client.credentials.jwt.key-store-password=mypassword quarkus.oidc-client.credentials.jwt.key-password=mykeypassword quarkus.oidc-client.credentials.jwt.key-id=mykey ```"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks quarkus.oidc-client.credentials.jwt.key-store-password=mypassword quarkus.oidc-client.credentials.jwt.key-password=mykeypassword quarkus.oidc-client.credentials.jwt.key-id=mykey ```"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:300
#, fuzzy
msgid "Using `private_key_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`private_key_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントの秘密が漏れることはありません。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:302
#, fuzzy, no-wrap
msgid "Token Propagation in MicroProfile RestClient client filter"
msgstr "MicroProfile RestClient クライアントフィルタでのトークンの伝播"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:305
#, fuzzy
msgid "`quarkus-oidc-token-propagation` extension provides `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` JAX-RS ClientRequestFilter which propagates the current link:security-openid-connect[Bearer] or link:security-openid-connect-web-authentication[Authorization Code Flow] access token as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-token-propagation` エクステンションは、 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` JAX-RS ClientRequestFilter を提供します。これは、現在のベアラまたは認証コードフローのアクセストークンを HTTP `Authorization` `Bearer` スキーム値として伝播します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:307
#, fuzzy
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`AccessTokenRequestFilter` を選択的に登録することができます。 `io.quarkus.oidc.token.propagation.AccessToken` 、 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、例えば、 を選択的に登録することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:311
#, fuzzy
msgid "``` import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; import io.quarkus.oidc.token.propagation.TokenCredential;"
msgstr "``"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:316
#, fuzzy
msgid "@RegisterRestClient @AccessToken @Path(\"/\")  public interface ProtectedResourceService {"
msgstr "@RegisterRestClient @AccessToken @Path(\"/\") public interface ProtectedResourceService {."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:328
#, fuzzy
msgid "``` import org.eclipse.microprofile.rest.client.annotation.RegisterProvider; import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;"
msgstr "``"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:333
#, fuzzy
msgid "@RegisterRestClient @RegisterProvider(AccessTokenRequestFilter.class)  @Path(\"/\")  public interface ProtectedResourceService {"
msgstr "@RegisterRestClient @RegisterProvider(AccessTokenRequestFilter.class) @Path(\"/\") public interface ProtectedResourceService {."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:340
#, fuzzy
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter=true` property is set."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:342
#, fuzzy
msgid "This filter will be enhanced in the future to support re-signing and/or exchanging the access tokens before propagating them."
msgstr "このフィルタは将来的に強化され、アクセストークンを伝播する前に再署名や交換をサポートするようになる予定です。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:343
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:346
#, fuzzy
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkusのセキュリティー]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:347
#, fuzzy
msgid "link:security-openid-connect[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr "link:security-openid-connect[Quarkus - OpenID Connectを使用したベアラートークン認証を使用したサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:347
#, fuzzy
msgid "link:security-openid-connect-web-authentication[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr "link:security-openid-connect-web-authentication[Quarkus - OpenID Connectを使用して、認証コードフローを使用してWebアプリケーションを保護する]"
