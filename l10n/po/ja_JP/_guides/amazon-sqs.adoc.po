# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-08-31 13:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/amazon-sqs.adoc:6
#, fuzzy, no-wrap
msgid "Amazon SQS Client"
msgstr "Quarkus - Amazon SQSクライアント"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:16
#, fuzzy
msgid "Amazon Simple Queue Service (SQS) is a fully managed message queuing service.  Using SQS, you can send, store, and receive messages between software components at any volume, without losing messages or requiring other services to be available.  SQS offers two types of message queues. Standard queues offer maximum throughput, best-effort ordering and at-least-once delivery.  SQS FIFO queues are designed to guarantee that messages are processes exactly once, on the exact order that they were sent."
msgstr "Amazon Simple Queue Service(SQS)は、完全に管理されたメッセージキューイングサービスです。SQSを使用することで、メッセージを失ったり、他のサービスの利用を必要としたりすることなく、任意のボリュームのソフトウェアコンポーネント間でメッセージの送受信を行うことができます。SQS は、2 種類のメッセージキューを提供しています。標準キューは、最大のスループット、ベストエフォートオーダー、およびアット・リーストワンス・デリバリーを提供します。SQS FIFO キューは、メッセージが送信された順番通りに、正確に一度だけ処理されることを保証するように設計されています。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:18
#, fuzzy
msgid "You can find more information about SQS at https://aws.amazon.com/sqs/[the Amazon SQS website]."
msgstr "link:https://aws.amazon.com/sqs/[アマゾンのSQSのサイト] では、SQSについての情報が掲載されています。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:21
#, fuzzy
msgid "The SQS extension is based on https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html[AWS Java SDK 2.x].  It's a major rewrite of the 1.x code base that offers two programming models (Blocking & Async)."
msgstr "SQS拡張は link:https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html[AWS Java SDK 2.x] をベースにしており、1.xのコードベースを大幅に書き換え、2つのプログラミングモデル(Blocking & Async)を提供しています。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:25
msgid "The Quarkus extension supports two programming models:"
msgstr "Quarkusエクステンションは、2つのプログラミングモデルをサポートしています:"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:27
#, fuzzy
msgid "Blocking access using URL Connection HTTP client (by default) or the Apache HTTP Client"
msgstr "URL Connection HTTP クライアント (デフォルト) または Apache HTTP クライアントを使ってアクセスをブロックする"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:28
msgid "https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async.html[Asynchronous programming] based on JDK's `CompletableFuture` objects and the Netty HTTP client."
msgstr "JDK の `CompletableFuture` オブジェクトと Netty HTTP クライアントをベースにした link:https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async.html[非同期プログラミング]"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:30
#, fuzzy
msgid "In this guide, we see how you can get your REST services to use SQS locally and on AWS."
msgstr "このガイドでは、RESTサービスを利用してローカルでSQSを利用する方法とAWS上でSQSを利用する方法を見ていきます。"

#. type: Title ==
#: upstream/_guides/amazon-sqs.adoc:31
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:34
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:36
#, fuzzy
#| msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:37
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:38
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:39
#, fuzzy
msgid "An AWS Account to access the SQS service"
msgstr "SQSサービスにアクセスするためのAWSアカウント"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:40
#, fuzzy
msgid "Docker for your system to run SQS locally for testing purposes"
msgstr "テスト目的でローカルでSQSを実行するためのシステム用Docker"

#. type: Title ===
#: upstream/_guides/amazon-sqs.adoc:41
#, fuzzy, no-wrap
msgid "Set up SQS locally"
msgstr "SQSをローカルに設定する"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:44
#, fuzzy
msgid "The easiest way to start working with SQS is to run a local instance as a container."
msgstr "SQS で作業を開始する最も簡単な方法は、ローカルインスタンスをコンテナーとして実行することです。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:48
#, no-wrap
msgid "docker run --rm --name local-sqs -p 8010:4576 -e SERVICES=sqs -e START_WEB=0 -d localstack/localstack:0.11.1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:50
#, fuzzy
msgid "This starts a SQS instance that is accessible on port `8010`."
msgstr "これは、ポート `8010` でアクセス可能な SQS インスタンスを起動します。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:52
#, fuzzy
msgid "Create an AWS profile for your local instance using AWS CLI:"
msgstr "AWS CLIを使ってローカルインスタンスのAWSプロファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:59
#, no-wrap
msgid ""
"$ aws configure --profile localstack\n"
"AWS Access Key ID [None]: test-key\n"
"AWS Secret Access Key [None]: test-secret\n"
"Default region name [None]: us-east-1\n"
"Default output format [None]:\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/amazon-sqs.adoc:61
#, fuzzy, no-wrap
msgid "Create a SQS queue"
msgstr "SQS キューの作成"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:64
#, fuzzy
msgid "Create a SQS queue using AWS CLI and store in `QUEUE_URL` environment variable."
msgstr "AWS CLIでSQSキューを作成し、 `QUEUE_URL` 環境変数に格納します。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:68
#, no-wrap
msgid "QUEUE_URL=`aws sqs create-queue --queue-name=ColliderQueue --profile localstack --endpoint-url=http://localhost:8010`\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:71
#, fuzzy
msgid "Or, if you want to use your SQS queue on your AWS account create a queue using your default profile"
msgstr "あるいは、AWS アカウントで SQS キューを使用したい場合は、デフォルトのプロファイルを使用してキューを作成します。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:74
#, no-wrap
msgid "QUEUE_URL=`aws sqs create-queue --queue-name=ColliderQueue`\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-sqs.adoc:76
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:79
#, fuzzy
msgid "The application built here allows shooting an elementary particles (quarks) into a `ColliderQueue` queue of the AWS SQS.  Additionally, we create a resource that allows receiving those quarks from the `ColliderQueue` queue in the order they were sent."
msgstr "ここで構築したアプリケーションでは、AWS SQS の `ColliderQueue` キューに素粒子(クォーク)を発射することができる。さらに、 `ColliderQueue` キューから送られてきたクォークを、送られてきた順に受信できるリソースを作成しています。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:82
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:84
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:86
#, fuzzy
msgid "The solution is located in the `amazon-sqs-quickstart` {quickstarts-tree-url}/amazon-sqs-quickstart[directory]."
msgstr "ソリューションは `amazon-sqs-quickstart` {quickstarts-tree-url}/amazon-sqs-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/amazon-sqs.adoc:87
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:90
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:100
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amazon-sqs-quickstart \\\n"
"    -DclassName=\"org.acme.sqs.QuarksCannonSyncResource\" \\\n"
"    -Dpath=\"/sync-cannon\" \\\n"
"    -Dextensions=\"resteasy,resteasy-jackson,amazon-sqs,resteasy-mutiny\"\n"
"cd amazon-sqs-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:104
#, fuzzy
msgid "This command generates a Maven structure importing the RESTEasy/JAX-RS, Mutiny and Amazon SQS Client extensions.  After this, the `amazon-sqs` extension has been added to your `pom.xml` as well as the Mutiny support for RESTEasy."
msgstr "このコマンドは、RESTEasy/JAX-RS、Mutiny、Amazon SQS Client エクステンションをインポートする Maven 構造体を生成します。 `pom.xml` この後、RESTEasyのMutinyサポートと同様に、 `amazon-sqs` エクステンションが追加されています。"

#. type: Title ==
#: upstream/_guides/amazon-sqs.adoc:105
#, fuzzy, no-wrap
msgid "Creating JSON REST service"
msgstr "JSON RESTサービスの作成"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:108
#, fuzzy
msgid "In this example, we will create an application that sends quarks via the queue. The example application will demonstrate the two programming models supported by the extension."
msgstr "この例では、キューを介してクォークを送信するアプリケーションを作成します。このアプリケーションの例では、エクステンションでサポートされている2つのプログラミングモデルを示します。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:110
#, fuzzy
msgid "First, let's create the `Quark` bean as follows:"
msgstr "まず、以下のように `Quark` Bean を作成してみましょう。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:114
#, no-wrap
msgid "package org.acme.sqs.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:117
#, no-wrap
msgid ""
"import io.quarkus.runtime.annotations.RegisterForReflection;\n"
"import java.util.Objects;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:120
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Quark {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:123
#, no-wrap
msgid ""
"    private String flavor;\n"
"    private String spin;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:126
#, no-wrap
msgid ""
"    public Quark() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:130
#, no-wrap
msgid ""
"    public String getFlavor() {\n"
"        return flavor;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:134
#, no-wrap
msgid ""
"    public void setFlavor(String flavor) {\n"
"        this.flavor = flavor;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:138
#, no-wrap
msgid ""
"    public String getSpin() {\n"
"        return spin;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:142
#, no-wrap
msgid ""
"    public void setSpin(String spin) {\n"
"        this.spin = spin;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:148
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean equals(Object obj) {\n"
"        if (!(obj instanceof Quark)) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:150
#, no-wrap
msgid "        Quark other = (Quark) obj;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:153
#, no-wrap
msgid ""
"        return Objects.equals(other.flavor, this.flavor);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:159
#, no-wrap
msgid ""
"    @Override\n"
"    public int hashCode() {\n"
"        return Objects.hash(this.flavor);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:161
#, fuzzy
msgid "Then, create a `org.acme.sqs.QuarksCannonSyncResource` that will provide an API to shoot quarks into the SQS queue using the synchronous client."
msgstr "次に、同期クライアントを使用して SQS キューにクォークを撃つための API を提供する `org.acme.sqs.QuarksCannonSyncResource` を作成します。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:163
#, fuzzy
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するようQuarkusに指示します。 `@RegisterForReflection` アノテーションの詳細については、 link:writing-native-applications-tips.html#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:168 upstream/_guides/amazon-sqs.adoc:217
#: upstream/_guides/amazon-sqs.adoc:347 upstream/_guides/amazon-sqs.adoc:398
#, no-wrap
msgid "package org.acme.sqs;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:183
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import com.fasterxml.jackson.databind.ObjectWriter;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
"import org.acme.sqs.model.Quark;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.jboss.logging.Logger;\n"
"import software.amazon.awssdk.services.sqs.SqsClient;\n"
"import software.amazon.awssdk.services.sqs.model.SendMessageResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:187
#, no-wrap
msgid ""
"@Path(\"/sync/cannon\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public class QuarksCannonSyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:189
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(QuarksCannonSyncResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:192 upstream/_guides/amazon-sqs.adoc:241
#, no-wrap
msgid ""
"    @Inject\n"
"    SqsClient sqs;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:195 upstream/_guides/amazon-sqs.adoc:244
#: upstream/_guides/amazon-sqs.adoc:376 upstream/_guides/amazon-sqs.adoc:427
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"queue.url\")\n"
"    String queueUrl;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:197 upstream/_guides/amazon-sqs.adoc:378
#, no-wrap
msgid "    static ObjectWriter QUARK_WRITER = new ObjectMapper().writerFor(Quark.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:208
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/shoot\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    public Response sendMessage(Quark quark) throws Exception {\n"
"        String message = QUARK_WRITER.writeValueAsString(quark);\n"
"        SendMessageResponse response = sqs.sendMessage(m -> m.queueUrl(queueUrl).messageBody(message));\n"
"        LOGGER.infov(\"Fired Quark[{0}, {1}}]\", quark.getFlavor(), quark.getSpin());\n"
"        return Response.ok().entity(response.messageId()).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:211
#, fuzzy
msgid "Because of the fact messages sent to the queue must be a `String`, we're using Jackson's `ObjectWriter` in order to serialize our `Quark` objects into a `String`."
msgstr "キューに送信されるメッセージは `String` でなければならないという事実のため、 `Quark` オブジェクトを `String` にシリアライズするために、Jackson の `ObjectWriter` を使用しています。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:213
#, fuzzy
msgid "Now, create the `org.acme.QuarksShieldSyncResource` REST resources that provides an endpoint to read the messages from the `ColliderQueue` queue."
msgstr "さて、 `ColliderQueue` キューからのメッセージを読むためのエンドポイントを提供する `org.acme.QuarksShieldSyncResource` REST リソースを作成します。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:233
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import com.fasterxml.jackson.databind.ObjectReader;\n"
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.acme.sqs.model.Quark;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.jboss.logging.Logger;\n"
"import software.amazon.awssdk.services.sqs.SqsClient;\n"
"import software.amazon.awssdk.services.sqs.model.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:236
#, no-wrap
msgid ""
"@Path(\"/sync/shield\")\n"
"public class QuarksShieldSyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:238
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(QuarksShieldSyncResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:246 upstream/_guides/amazon-sqs.adoc:429
#, no-wrap
msgid "    static ObjectReader QUARK_READER = new ObjectMapper().readerFor(Quark.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:250
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Quark> receive() {\n"
"        List<Message> messages = sqs.receiveMessage(m -> m.maxNumberOfMessages(10).queueUrl(queueUrl)).messages();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:256
#, no-wrap
msgid ""
"        return messages.stream()\n"
"            .map(Message::body)\n"
"            .map(this::toQuark)\n"
"            .collect(Collectors.toList());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:268 upstream/_guides/amazon-sqs.adoc:449
#, no-wrap
msgid ""
"    private Quark toQuark(String message) {\n"
"        Quark quark = null;\n"
"        try {\n"
"            quark = QUARK_READER.readValue(message);\n"
"        } catch (Exception e) {\n"
"            LOGGER.error(\"Error decoding message\", e);\n"
"            throw new RuntimeException(e);\n"
"        }\n"
"        return quark;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:271
#, fuzzy
msgid "We are using here a Jackson's `ObjectReader` in order to deserialize queue messages into our `Quark` POJOs."
msgstr "ここでは、キューメッセージを `Quark` POJO にデシリアライズするために、Jackson's `ObjectReader` を使用しています。"

#. type: Title ==
#: upstream/_guides/amazon-sqs.adoc:272
#, fuzzy, no-wrap
msgid "Configuring SQS clients"
msgstr "SQS クライアントの設定"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:277
#, fuzzy
msgid "Both SQS clients (sync and async) are configurable via the `application.properties` file that can be provided in the `src/main/resources` directory.  Additionally, you need to add to the classpath a proper implementation of the sync client. By default the extension uses the URL connection HTTP client, so you need to add a URL connection client dependency to the `pom.xml` file:"
msgstr "SQS クライアント (sync および async) はいずれも、 `src/main/resources` ディレクトリーで提供される `application.properties` ファイルを介して構成可能です。さらに、同期クライアントの適切な実装をクラスパスに追加する必要があります。デフォルトでは、エクステンションは URL 接続 HTTP クライアントを使用するため、URL 接続クライアントの依存関係を `pom.xml` ファイルに追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:284
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>url-connection-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:287
#, fuzzy
msgid "If you want to use Apache HTTP client instead, configure it as follows:"
msgstr "代わりにApache HTTPクライアントを使用したい場合は、以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:290
#, no-wrap
msgid "quarkus.sqs.sync-client.type=apache\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:293
#, fuzzy
msgid "And add the following dependency to the application `pom.xml`:"
msgstr "そして、以下の依存関係をアプリケーションに追加します `pom.xml` ."

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:303
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>apache-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-apache-httpclient</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:306
#, fuzzy
msgid "If you're going to use a local SQS instance, configure it as follows:"
msgstr "ローカルSQSインスタンスを使用する場合は、以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:310
#, no-wrap
msgid "quarkus.sqs.endpoint-override=http://localhost:8010\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:315
#, no-wrap
msgid ""
"quarkus.sqs.aws.region=us-east-1\n"
"quarkus.sqs.aws.credentials.type=static\n"
"quarkus.sqs.aws.credentials.static-provider.access-key-id=test-key\n"
"quarkus.sqs.aws.credentials.static-provider.secret-access-key=test-secret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:318
#, fuzzy
msgid "`quarkus.sqs.aws.region` - It's required by the client, but since you're using a local SQS instance use `us-east-1` as it's a default region of localstack's SQS."
msgstr "`quarkus.sqs.aws.region` - クライアントによって必要とされますが、ローカルSQSインスタンスを使用しているので、ローカルスタックのSQSのデフォルトリージョンである `us-east-1` を使用します。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:319
#, fuzzy
msgid "`quarkus.sqs.aws.credentials.type` - Set `static` credentials provider with any values for `access-key-id` and `secret-access-key`"
msgstr "`quarkus.sqs.aws.credentials.type` - `static` の資格情報プロバイダを `access-key-id` と任意の値で設定します。 `secret-access-key`"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:320
#, fuzzy
msgid "`quarkus.sqs.endpoint-override` - Override the SQS client to use a local instance instead of an AWS service"
msgstr "`quarkus.sqs.endpoint-override` - SQS クライアントをオーバーライドして AWS サービスの代わりにローカルインスタンスを使用する"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:323
#, fuzzy
msgid "If you want to work with an AWS account, you can simply remove or comment out all SQS related properties. By default, the SQS client extension will use the `default` credentials provider chain that looks for credentials in this order:"
msgstr "AWS アカウントで作業する場合は、SQS 関連のプロパティーをすべて削除またはコメントアウトするだけです。デフォルトでは、SQS クライアントエクステンションは、 `default` 認証情報プロバイダチェーンを使用して、この順番で認証情報を探します。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:327
#, fuzzy
msgid "And the region from your AWS CLI profile will be used."
msgstr "そして、AWS CLIプロファイルからのリージョンが使用されます。"

#. type: Title ==
#: upstream/_guides/amazon-sqs.adoc:328
#, fuzzy, no-wrap
msgid "Next steps"
msgstr "次のステップ"

#. type: Title ===
#: upstream/_guides/amazon-sqs.adoc:330
#, fuzzy, no-wrap
msgid "Packaging"
msgstr "パッケージング"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:334
#, fuzzy
msgid "Packaging your application is as simple as `./mvnw clean package`.  It can be run with `java -Dqueue.url=$QUEUE_URL -jar target/quarkus-app/quarkus-run.jar`."
msgstr "アプリケーションのパッケージ化は `./mvnw clean package` のように簡単です。 `java -Dqueue.url=$QUEUE_URL -jar target/amazon-sqs-quickstart-1.0-SNAPSHOT-runner.jar` で実行できます。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:337
#, fuzzy
msgid "With GraalVM installed, you can also create a native executable binary: `./mvnw clean package -Dnative`.  Depending on your system, that will take some time."
msgstr "GraalVMをインストールした状態で、ネイティブの実行バイナリーを作成することもできます: `./mvnw clean package -Dnative` .お使いのシステムにもよりますが、時間がかかります。"

#. type: Title ===
#: upstream/_guides/amazon-sqs.adoc:338
#, fuzzy, no-wrap
msgid "Going asynchronous"
msgstr "非同期に行く"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:341
#, fuzzy
msgid "Thanks to the AWS SDK v2.x used by the Quarkus extension, you can use the asynchronous programming model out of the box."
msgstr "Quarkusのエクステンションで使われているAWS SDK v2.xのおかげで、非同期プログラミングモデルをすぐに使えるようになりました。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:343
#, fuzzy
msgid "Create a `org.acme.sqs.QuarksCannonAsyncResource` REST resource that will be similar to our `QuarksCannonSyncResource` but using an asynchronous programming model."
msgstr "`org.acme.sqs.QuarksCannonAsyncResource` RESTリソースを作成します。 `QuarksCannonSyncResource` と似ていますが、非同期プログラミングモデルを使用しています。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:363
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import com.fasterxml.jackson.databind.ObjectWriter;\n"
"import io.smallrye.mutiny.Uni;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
"import org.acme.sqs.model.Quark;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.jboss.logging.Logger;\n"
"import software.amazon.awssdk.services.sqs.SqsAsyncClient;\n"
"import software.amazon.awssdk.services.sqs.model.SendMessageResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:368
#, no-wrap
msgid ""
"@Path(\"/async/cannon\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class QuarksCannonAsyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:370
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(QuarksCannonAsyncResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:373 upstream/_guides/amazon-sqs.adoc:424
#, no-wrap
msgid ""
"    @Inject\n"
"    SqsAsyncClient sqs;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:391
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/shoot\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    public Uni<Response> sendMessage(Quark quark) throws Exception {\n"
"        String message = QUARK_WRITER.writeValueAsString(quark);\n"
"        return Uni.createFrom()\n"
"            .completionStage(sqs.sendMessage(m -> m.queueUrl(queueUrl).messageBody(message)))\n"
"            .onItem().invoke(item -> LOGGER.infov(\"Fired Quark[{0}, {1}}]\", quark.getFlavor(), quark.getSpin()))\n"
"            .onItem().transform(SendMessageResponse::messageId)\n"
"            .onItem().transform(id -> Response.ok().entity(id).build());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:393
#, fuzzy
msgid "We create `Uni` instances from the `CompletionStage` objects returned by the asynchronous SQS client, and then transform the emitted item."
msgstr "非同期 SQS クライアントから返された `CompletionStage` オブジェクトから `Uni` インスタンスを作成し、放出されたアイテムを変換します。"

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:395
#, fuzzy
msgid "And the corresponding async receiver of the queue messages `org.acme.sqs.QuarksShieldAsyncResource`"
msgstr "そして、キューメッセージの対応する非同期レシーバ `org.acme.sqs.QuarksShieldAsyncResource`"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:416
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import com.fasterxml.jackson.databind.ObjectReader;\n"
"import io.smallrye.mutiny.Uni;\n"
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.acme.sqs.model.Quark;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.jboss.logging.Logger;\n"
"import software.amazon.awssdk.services.sqs.SqsAsyncClient;\n"
"import software.amazon.awssdk.services.sqs.model.Message;\n"
"import software.amazon.awssdk.services.sqs.model.ReceiveMessageResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:419
#, no-wrap
msgid ""
"@Path(\"/async/shield\")\n"
"public class QuarksShieldAsyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:421
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(QuarksShieldAsyncResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:437
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<List<Quark>> receive() {\n"
"        return Uni.createFrom()\n"
"            .completionStage(sqs.receiveMessage(m -> m.maxNumberOfMessages(10).queueUrl(queueUrl)))\n"
"            .onItem().transform(ReceiveMessageResponse::messages)\n"
"            .onItem().transform(m -> m.stream().map(Message::body).map(this::toQuark).collect(Collectors.toList()));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-sqs.adoc:452
#, fuzzy
msgid "And we need to add the Netty HTTP client dependency to the `pom.xml`:"
msgstr "そして、 `pom.xml` .NETTY HTTPクライアント依存関係を追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/amazon-sqs.adoc:459
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>netty-nio-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-sqs.adoc:461
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"
