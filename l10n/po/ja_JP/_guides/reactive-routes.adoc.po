# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-08-31 13:16+0000\n"
"PO-Revision-Date: 2021-04-26 22:10+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/reactive-routes.adoc:6
#, no-wrap
msgid "Using Reactive Routes"
msgstr "Reactive Routesの使用"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:14
msgid "Reactive routes propose an alternative approach to implement HTTP endpoints where you declare and chain _routes_.  This approach became very popular in the JavaScript world, with frameworks like Express.Js or Hapi.  Quarkus also offers the possibility to use reactive routes.  You can implement REST API with routes only or combine them with JAX-RS resources and servlets."
msgstr "Reactive Routesは、HTTPエンドポイントを実装するために、 _routes_ を宣言して連鎖させる代替アプローチを提案します。このアプローチは、Express.JsやHapiのようなフレームワークで、JavaScriptの世界で非常に人気があります。Quarkusは、Reactive Routesを使用する可能性も提供しています。ルートのみでREST APIを実装することもできますし、JAX-RSリソースやサーブレットと組み合わせて実装することもできます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:16
msgid "The code presented in this guide is available in this {quickstarts-base-url}[Github repository] under the {quickstarts-tree-url}/reactive-routes-quickstart[`reactive-routes-quickstart` directory]"
msgstr "このガイドで紹介するコードは、{quickstarts-base-url}[Github リポジトリ]の{quickstarts-tree-url}/reactive-routes-quickstart[ `reactive-routes-quickstart` ディレクトリー]の下にある{quickstarts-base-url}[Github リポジトリ]にあります。"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:17
#, no-wrap
msgid "Quarkus HTTP"
msgstr "Quarkus HTTP"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:24
#, fuzzy
#| msgid "Before going further, let's have a look at the HTTP layer of Quarkus.  Quarkus HTTP support is based on a non-blocking and reactive engine (Eclipse Vert.x and Netty).  All the HTTP requests your application receive are handled by _event loops_ (IO Thread) and then are routed towards the code that manages the request.  Depending on the destination, it can invoke the code managing the request on a worker thread (Servlet, Jax-RS) or use the IO Thread (reactive route).  Note that because of this, a reactive route must be non-blocking or explicitly declare its blocking nature (which would result by being called on a worker thread)."
msgid "Before going further, let's have a look at the HTTP layer of Quarkus.  Quarkus HTTP support is based on a non-blocking and reactive engine (Eclipse Vert.x and Netty).  All the HTTP requests your application receive are handled by _event loops_ (I/O Thread) and then are routed towards the code that manages the request.  Depending on the destination, it can invoke the code managing the request on a worker thread (Servlet, Jax-RS) or use the IO Thread (reactive route).  Note that because of this, a reactive route must be non-blocking or explicitly declare its blocking nature (which would result by being called on a worker thread)."
msgstr "先に進む前に、QuarkusのHTTPレイヤーを見てみましょう。QuarkusのHTTPサポートは、ノンブロッキングでリアクティブなエンジン(Eclipse Vert.xとNetty)に基づいています。アプリケーションが受け取るすべてのHTTPリクエストは、 _イベントループ_ (IOスレッド)によって処理され、リクエストを管理するコードに向かってルーティングされます。宛先に応じて、ワーカースレッド(Servlet、Jax-RS)でリクエストを管理するコードを呼び出すか、IOスレッド(Reactive Routes)を使用します。このため、Reactive Routesはノンブロッキングであるか、そのブロッキング性を明示的に宣言しなければならないことに注意してください (ワーカースレッド上で呼び出されることで結果的にブロッキングされます)。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:26
msgid "image:http-architecture.png[alt=Quarkus HTTP Architecture]"
msgstr "image:http-architecture.png[alt=Quarkus HTTP Architecture]"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:28
msgid "See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:30
#, no-wrap
msgid "Declaring reactive routes"
msgstr "Reactive Routesの宣言"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:34
msgid "The first way to use reactive routes is to use the `@Route` annotation.  To have access to this annotation, you need to add the `quarkus-vertx-web` extension:"
msgstr "Reactive Routesを使用する最初の方法は、 `@Route` アノテーションを使用することです。このアノテーションにアクセスするには、 `quarkus-vertx-web` エクステンションを追加する必要があります。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:36
msgid "In your `pom.xml` file, add:"
msgstr "`pom.xml` ファイルに以下を追加します。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:43
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vertx-web</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:46
msgid "Then in a _bean_, you can use the `@Route` annotation as follows:"
msgstr "そして、 _Bean_ では、以下のように `@Route` アノテーションを使用することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:50
#: upstream/_guides/reactive-routes.adoc:622
#, no-wrap
msgid "package org.acme.reactive.routes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:55
#, no-wrap
msgid ""
"import io.quarkus.vertx.web.Route;\n"
"import io.quarkus.vertx.web.Route.HttpMethod;\n"
"import io.quarkus.vertx.web.RoutingExchange;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:57
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:60
#, no-wrap
msgid ""
"@ApplicationScoped // <1>\n"
"public class MyDeclarativeRoutes {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:66
#, no-wrap
msgid ""
"    // neither path nor regex is set - match a path derived from the method name\n"
"    @Route(methods = Route.HttpMethod.GET) // <2>\n"
"    void hello(RoutingContext rc) { // <3>\n"
"        rc.response().end(\"hello\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:71
#, no-wrap
msgid ""
"    @Route(path = \"/world\") \n"
"    String helloWorld() { // <4>\n"
"        return \"Hello world!\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:77
#, no-wrap
msgid ""
"    @Route(path = \"/greetings\", methods = Route.HttpMethod.GET)\n"
"    void greetings(RoutingExchange ex) { // <5>\n"
"        ex.ok(\"hello \" + ex.getParam(\"name\").orElse(\"world\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:79
#, fuzzy
msgid "If there is a reactive route found on a class with no scope annotation then `@javax.inject.Singleton` is added automatically."
msgstr "スコープアノテーションのないクラスにリアクティブなルートが見つかった場合は、 `@javax.inject.Singleton` が自動的に追加されます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:80
#, fuzzy
msgid "The `@Route` annotation indicates that the method is a reactive route. Again, by default, the code contained in the method must not block."
msgstr "`@Route` アノテーションは、メソッドがリアクティブ・ルートであることを示します。ここでもデフォルトでは、メソッドに含まれるコードはブロックしてはいけません。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:81
#, fuzzy
msgid "The method gets a https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] as a parameter. From the `RoutingContext` you can retrieve the HTTP request (using `request()`) and write the response using `response().end(...)`."
msgstr "メソッドは link:https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] をパラメーターとして指定します。 `RoutingContext` から HTTP リクエストを取得し ( `request()` を使用して)、 `response().end(…)` を使用してレスポンスを書くことができます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:82
#, fuzzy
msgid "If the annotated method does not return `void` the arguments are optional."
msgstr "アノテーションされたメソッドが `void` を返さない場合、引数はオプションです。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:83
#, fuzzy
msgid "`RoutingExchange` is a convenient wrapper of `RoutingContext` which provides some useful methods."
msgstr "`RoutingExchange` は `RoutingContext` の便利なラッパーで、いくつかの便利なメソッドを提供します。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:85
#, fuzzy
msgid "More details about using the `RoutingContext` is available in the https://vertx.io/docs/vertx-web/java/[Vert.x Web documentation]."
msgstr "`RoutingContext` の使用方法の詳細は link:https://vertx.io/docs/vertx-web/java/[Vert.x Web ドキュメント] にあります。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:87
#, fuzzy
msgid "The `@Route` annotation allows you to configure:"
msgstr "`@Route` アノテーションで設定できます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:89
#, fuzzy
msgid "The `path` - for routing by path, using the https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Web format]"
msgstr "`path` - link:https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x ウェブフォーマットを] 使用したパスによるルーティングのための"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:90
#, fuzzy
msgid "The `regex` - for routing with regular expressions, see https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[for more details]"
msgstr "`regex` - 正規表現を使ったルーティングについては、 link:https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[詳細を] 参照してください。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:91
#, fuzzy
msgid "The `methods` - the HTTP verb triggering the route such as `GET`, `POST`..."
msgstr "`methods` - `GET` , `POST` ... のようなルートをトリガーするHTTP動詞。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:92
#, fuzzy
msgid "The `type` - it can be _normal_ (non-blocking), _blocking_ (method dispatched on a worker thread), or _failure_ to indicate that this route is called on failures"
msgstr "`type` - _通常_ (ノンブロッキング)、 _ブロッキング_ (ワーカースレッドにディスパッチされたメソッド)、または失敗時にこのルートが呼び出されることを示すために _失敗_ することができます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:94
#, fuzzy
msgid "The `order` - the order of the route when several routes are involved in handling the incoming request.  Must be positive for regular user routes."
msgstr "`order` - 複数のルートが着信リクエストの処理に関与している場合のルートの順序。通常のユーザールートでは正の値でなければならない。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:95
#, fuzzy
msgid "The produced and consumed mime types using `produces`, and `consumes`"
msgstr "`produces` , を使用して生産・消費されるマイムの種類と `consumes`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:97
#, fuzzy
msgid "For instance, you can declare a blocking route as follows:"
msgstr "例えば、以下のようにブロッキングルートを宣言することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:104
#, no-wrap
msgid ""
"@Route(methods = HttpMethod.POST, path = \"/post\", type = Route.HandlerType.BLOCKING)\n"
"public void blocking(RoutingContext rc) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-routes.adoc:109
#, fuzzy
msgid "Alternatively, you can use `@io.smallrye.common.annotation.Blocking` and omit the `type = Route.HandlerType.BLOCKING`:"
msgstr "または、 `@io.smallrye.common.annotation.Blocking` を使用して、 `type = Route.HandlerType.BLOCKING` ."

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:116
#, no-wrap
msgid ""
"@Route(methods = HttpMethod.POST, path = \"/post\")\n"
"@Blocking\n"
"public void blocking(RoutingContext rc) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:118
#, fuzzy
msgid "When `@Blocking` is used, it ignores the `type` attribute of `@Route`."
msgstr "`@Blocking` を使用した場合、 `@Route` .の `type` 属性は無視されます。"

#. type: delimited block =
#: upstream/_guides/reactive-routes.adoc:121
#, fuzzy
msgid "The `@Route` annotation is repeatable and so you can declare several routes for a single method:"
msgstr "`@Route` アノテーションは繰り返し可能なので、一つのメソッドに対して複数のルートを宣言することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:129
#, no-wrap
msgid ""
"@Route(path = \"/first\") <1>\n"
"@Route(path = \"/second\")\n"
"public void route(RoutingContext rc) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:131
#, fuzzy
msgid "Each route can use different paths, methods..."
msgstr "各ルートは、異なるパス、方法を使用することができます..."

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:133
#, fuzzy
msgid "If no content-type header is set then we will try to use the most acceptable content type as defined by `io.vertx.ext.web.RoutingContext.getAcceptableContentType()`."
msgstr "content-type ヘッダが設定されていない場合は、 `io.vertx.ext.web.RoutingContext.getAcceptableContentType()` で定義されている最も許容可能なコンテンツタイプを使用しようとします。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:140
#, no-wrap
msgid ""
"@Route(path = \"/person\", produces = \"text/html\") <1>\n"
"String person() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:142
#, fuzzy
msgid "If the `accept` header matches `text/html` we set the content type automatically."
msgstr "`accept` ヘッダーが `text/html` と一致する場合は、コンテンツタイプを自動的に設定します。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:143
#, fuzzy, no-wrap
msgid "Handling conflicting routes"
msgstr "競合するルートへの対応"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:147
#, fuzzy
msgid "You may end up with multiple routes matching a given path.  In the following example, both route matches `/accounts/me`:"
msgstr "与えられたパスにマッチする複数のルートがある場合があります。次の例では、両方のルートが `/accounts/me` ."

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:154
#, no-wrap
msgid ""
"@Route(path = \"/accounts/:id\", methods = HttpMethod.GET)\n"
"void getAccount(RoutingContext ctx) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:159
#, no-wrap
msgid ""
"@Route(path = \"/accounts/me\", methods = HttpMethod.GET)\n"
"void getCurrentUserAccount(RoutingContext ctx) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:163
#, fuzzy
msgid "As a consequence, the result is not the expected one as the first route is called with the path parameter `id` set to `me`.  To avoid the conflict, use the `order` attribute:"
msgstr "結果として、最初のルートはパスパラメーター `id` を `me` に設定して呼び出されるため、期待した結果ではありません。競合を回避するには、 `order` 属性を使用します。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:170
#, no-wrap
msgid ""
"@Route(path = \"/accounts/:id\", methods = HttpMethod.GET, order = 2)\n"
"void getAccount(RoutingContext ctx) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:175
#, no-wrap
msgid ""
"@Route(path = \"/accounts/me\", methods = HttpMethod.GET, order = 1)\n"
"void getCurrentUserAccount(RoutingContext ctx) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:179
#, fuzzy
msgid "By giving a lower order to the second route, it gets evaluated first.  If the request path matches, it is invoked, otherwise the other routes are evaluated."
msgstr "2番目のルートに低いオーダーを与えることで、それが最初に評価されます。リクエストパスがマッチした場合は呼び出され、そうでない場合は他のルートが評価されます。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:180
#, fuzzy, no-wrap
msgid "`@RouteBase`"
msgstr "`@RouteBase`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:183
#, fuzzy
msgid "This annotation can be used to configure some defaults for reactive routes declared on a class."
msgstr "このアノテーションを使用して、クラスで宣言されたリアクティブ・ルートの既定値をいくつか構成できます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:188
#, no-wrap
msgid ""
"@RouteBase(path = \"simple\", produces = \"text/plain\") <1> <2>\n"
"public class SimpleRoutes {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:194
#, no-wrap
msgid ""
"    @Route(path = \"ping\") // the final path is /simple/ping\n"
"    void ping(RoutingContext rc) {\n"
"        rc.response().end(\"pong\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:196
#, fuzzy
msgid "The `path` value is used as a prefix for any route method declared on the class where `Route#path()` is used."
msgstr "`path` の値は、 `Route#path()` が使用されているクラスで宣言されたすべてのルートメソッドのプレフィックスとして使用されます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:197
#, fuzzy
msgid "The value of `produces()` is used for content-based routing for all routes where `Route#produces()` is empty."
msgstr "`produces()` の値は、 `Route#produces()` が空のすべてのルートのコンテンツベースルーティングに使用されます。"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:199
#, fuzzy, no-wrap
msgid "Reactive Route Methods"
msgstr "Reactive Routesの方法"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:204
#, fuzzy
msgid "A route method must be a non-private non-static method of a CDI bean.  If the annotated method returns `void` then it has to accept at least one argument - see the supported types below.  If the annotated method does not return `void` then the arguments are optional."
msgstr "ルートメソッドは、CDI Beanの非プライベート非静的メソッドでなければなりません。注釈付きメソッドが `void` を返す場合は、少なくとも一つの引数を受け入れなければなりません - 以下のサポートされている型を参照してください。アノテーションされたメソッドが `void` を返さない場合、引数はオプションです。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:207
#, fuzzy
msgid "Methods that return `void` must __end__ the response or the HTTP request to this route will never end.  Some methods of `RoutingExchange` do it for you, others not and you must call the `end()` method of the response by yourself, please refer to its JavaDoc for more information."
msgstr "`void` を返すメソッドはレスポンスを終了さ _せ_ なければなりません。 `RoutingExchange` のメソッドの中には、あなたの代わりにそれをしてくれるものもあれば、そうでないものもあり、自分でレスポンスの `end()` メソッドを呼び出す必要があります。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:209
#, fuzzy
msgid "A route method can accept arguments of the following types:"
msgstr "ルートメソッドは以下の型の引数を受け取ることができます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:211
msgid "`io.vertx.ext.web.RoutingContext`"
msgstr "`io.vertx.ext.web.RoutingContext`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:212
msgid "`io.quarkus.vertx.web.RoutingExchange`"
msgstr "`io.quarkus.vertx.web.RoutingExchange`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:213
msgid "`io.vertx.core.http.HttpServerRequest`"
msgstr "`io.vertx.core.http.HttpServerRequest`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:214
msgid "`io.vertx.core.http.HttpServerResponse`"
msgstr "`io.vertx.core.http.HttpServerResponse`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:215
msgid "`io.vertx.mutiny.core.http.HttpServerRequest`"
msgstr "`io.vertx.core.http.HttpServerRequest`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:216
msgid "`io.vertx.mutiny.core.http.HttpServerResponse`"
msgstr "`io.vertx.core.http.HttpServerResponse`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:218
#, fuzzy
msgid "Furthermore, it is possible to inject the `HttpServerRequest` parameters into a method parameter annotated with `@io.quarkus.vertx.web.Param`:"
msgstr "さらに、 `HttpServerRequest` パラメーターを `@io.quarkus.vertx.web.Param` ."

#. type: Table
#: upstream/_guides/reactive-routes.adoc:221
#: upstream/_guides/reactive-routes.adoc:241
#: upstream/_guides/reactive-routes.adoc:261
#, fuzzy, no-wrap
msgid "Parameter Type"
msgstr "パラメーターの種類"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:223
#: upstream/_guides/reactive-routes.adoc:243
#: upstream/_guides/reactive-routes.adoc:263
#, fuzzy, no-wrap
msgid ""
"Obtained via  \n"
"//-------------"
msgstr "経由で取得"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:223
#: upstream/_guides/reactive-routes.adoc:243
#: upstream/_guides/reactive-routes.adoc:263
#, no-wrap
msgid "`java.lang.String`"
msgstr "`java.lang.String`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:224
#: upstream/_guides/reactive-routes.adoc:225
#, no-wrap
msgid "`routingContext.request().getParam()`"
msgstr "`routingContext.request().getParam()`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:224
#: upstream/_guides/reactive-routes.adoc:244
#, no-wrap
msgid "`java.util.Optional<String>`"
msgstr "`java.util.Optional<String>`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:225
#: upstream/_guides/reactive-routes.adoc:245
#, no-wrap
msgid "`java.util.List<String>`"
msgstr "`java.util.List<String>`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:226
#, no-wrap
msgid "`routingContext.request().params().getAll()`"
msgstr "`routingContext.request().params().getAll()`"

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:228
#, fuzzy, no-wrap
msgid "Request Parameter Example"
msgstr "リクエストパラメーターの例"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:235
#, no-wrap
msgid ""
"@Route\n"
"String hello(@Param Optional<String> name) {\n"
"   return \"Hello \" + name.orElse(\"world\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:238
#, fuzzy
msgid "The `HttpServerRequest` headers can be injected into a method parameter annotated with `@io.quarkus.vertx.web.Header`:"
msgstr "`HttpServerRequest` ヘッダは、 `@io.quarkus.vertx.web.Header` でアノテーションされたメソッドパラメーターに注入することができます。"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:244
#: upstream/_guides/reactive-routes.adoc:245
#, fuzzy, no-wrap
msgid "`routingContext.request().getHeader()`"
msgstr "`routingContext.request().getHeader()`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:246
#, fuzzy, no-wrap
msgid "`routingContext.request().headers().getAll()`"
msgstr "`routingContext.request().headers().getAll()`"

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:248
#, no-wrap
msgid "Request Header Example"
msgstr "リクエストヘッダーの例"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:255
#, no-wrap
msgid ""
"@Route\n"
"String helloFromHeader(@Header(\"My-Header\") String header) {\n"
"   return header;\n"
"}\n"
msgstr ""
"@Route\n"
"String helloFromHeader(@Header(\"My-Header\") String header) {\n"
"   return header;\n"
"}\n"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:258
msgid "The request body can be injected into a method parameter annotated with `@io.quarkus.vertx.web.Body`."
msgstr "リクエストボディは、 `@io.quarkus.vertx.web.Body` でアノテーションされたメソッドパラメーターに注入することができます。"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:264
#, no-wrap
msgid "`routingContext.getBodyAsString()`"
msgstr "`routingContext.getBodyAsString()`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:264
#, no-wrap
msgid "`io.vertx.core.buffer.Buffer`"
msgstr "`io.vertx.core.buffer.Buffer`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:265
#, no-wrap
msgid "`routingContext.getBody()`"
msgstr "`routingContext.getBody()`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:265
#, no-wrap
msgid "`io.vertx.core.json.JsonObject`"
msgstr "`io.vertx.core.json.JsonObject`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:266
#, no-wrap
msgid "`routingContext.getBodyAsJson()`"
msgstr "`routingContext.getBodyAsJson()`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:266
#, no-wrap
msgid "`io.vertx.core.json.JsonArray`"
msgstr "`io.vertx.core.json.JsonArray`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:267
#, no-wrap
msgid "`routingContext.getBodyAsJsonArray()`"
msgstr "`routingContext.getBodyAsJsonArray()`"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:267
#, fuzzy, no-wrap
msgid "any other type"
msgstr "他の種類"

#. type: Table
#: upstream/_guides/reactive-routes.adoc:268
#, fuzzy, no-wrap
msgid "`routingContext.getBodyAsJson().mapTo(MyPojo.class)`"
msgstr "`routingContext.getBodyAsJson().mapTo(MyPojo.class)`"

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:270
#, fuzzy, no-wrap
msgid "Request Body Example"
msgstr "リクエストボディの例"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:278
#, no-wrap
msgid ""
"@Route(produces = \"application/json\")\n"
"Person createPerson(@Body Person person, @Param(\"id\") Optional<String> primaryKey) {\n"
"  person.setId(primaryKey.map(Integer::valueOf).orElse(42));\n"
"  return person;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:282
#, fuzzy
msgid "A failure handler can declare a single method parameter whose type extends `Throwable`.  The type of the parameter is used to match the result of `RoutingContext#failure()`."
msgstr "失敗ハンドラーは、型が `Throwable` を拡張した単一のメソッドパラメーターを宣言することができます。パラメーターの型は `RoutingContext#failure()` ."

#. type: Block title
#: upstream/_guides/reactive-routes.adoc:283
#, fuzzy, no-wrap
msgid "Failure Handler Example"
msgstr "失敗ハンドラーの例"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:290
#, no-wrap
msgid ""
"@Route(type = HandlerType.FAILURE)\n"
"void unsupported(UnsupportedOperationException e, HttpServerResponse response) {\n"
"  response.setStatusCode(501).end(e.getMessage());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:292
#, fuzzy, no-wrap
msgid "Returning Unis"
msgstr "ユニスを返す"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:295
#, fuzzy
msgid "In a reactive route, you can return a `Uni` directly:"
msgstr "Reactive Routesでは、 `Uni` を直接返すことができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:302
#, no-wrap
msgid ""
"@Route(path = \"/hello\")\n"
"Uni<String> hello(RoutingContext context) {\n"
"    return Uni.createFrom().item(\"Hello world!\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:307
#, no-wrap
msgid ""
"@Route(path = \"/person\")\n"
"Uni<Person> getPerson(RoutingContext context) {\n"
"    return Uni.createFrom().item(() -> new Person(\"neo\", 12345));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:310
#, fuzzy
msgid "Returning `Unis` is convenient when using a reactive client:"
msgstr "リアクティブクライアントを使用している場合は、 `Unis` を返すのが便利です。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:317
#, no-wrap
msgid ""
"@Route(path = \"/mail\")\n"
"Uni<Void> sendEmail(RoutingContext context) {\n"
"    return mailer.send(...);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:320
#, fuzzy
msgid "The item produced by the returned `Uni` can be:"
msgstr "返却された `Uni` で生成されたアイテムを使用することができます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:322
#: upstream/_guides/reactive-routes.adoc:348
#, fuzzy
msgid "a string - written into the HTTP response directly"
msgstr "文字列 - HTTP レスポンスに直接書き込まれます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:323
#: upstream/_guides/reactive-routes.adoc:349
#, fuzzy
msgid "a buffer - written into the HTTP response directly"
msgstr "バッファ - HTTP レスポンスに直接書き込まれる"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:325
#: upstream/_guides/reactive-routes.adoc:351
#, fuzzy
msgid "an object - written into the HTTP response after having been encoded into JSON.  The `content-type` header is set to `application/json` if not already set."
msgstr "オブジェクト - JSON にエンコードされた後、HTTP レスポンスに書き込まれます。 `content-type` ヘッダは、まだ設定されていなければ `application/json` に設定されます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:327
#, fuzzy
msgid "If the returned `Uni` produces a failure (or is `null`), an HTTP 500 response is written."
msgstr "返された `Uni` が失敗した場合(または `null` である場合)、HTTP 500 レスポンスが書き込まれます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:329
#, fuzzy
msgid "Returning a `Uni<Void>` produces a 204 response (no content)."
msgstr "`Uni<Void>` を返すと 204 のレスポンスが得られます (内容はありません)。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:330
#, fuzzy, no-wrap
msgid "Returning results"
msgstr "結果を返す"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:333
#, fuzzy
msgid "You can also return a result directly:"
msgstr "結果を直接返すこともできます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:340
#, no-wrap
msgid ""
"@Route(path = \"/hello\")\n"
"String helloSync(RoutingContext context) {\n"
"    return \"Hello world\";\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:344
#, fuzzy
msgid "Be aware, the processing must be **non-blocking** as reactive routes are invoked on the IO Thread.  Otherwise, set the `type` attribute of the `@Route` annotation to `Route.HandlerType.BLOCKING`, or use the `@io.smallrye.common.annotation.Blocking` annotation."
msgstr "リアクティブ・ルートが IO スレッド上で呼び出されるため、処理は *ノンブロッキング* でなければならないことに注意してください。そうでない場合は、 `@Route` アノテーションの `type` 属性を `Route.HandlerType.BLOCKING` に設定するか、 `@io.smallrye.common.annotation.Blocking` アノテーションを使用してください。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:346
#: upstream/_guides/reactive-routes.adoc:368
#, fuzzy
msgid "The method can return:"
msgstr "メソッドは返すことができます。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:352
#, fuzzy, no-wrap
msgid "Returning Multis"
msgstr "マルチスを返す"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:357
#, fuzzy
msgid "A reactive route can return a `Multi`.  The items are written one by one, in the response.  The response `Transfer-Encoding` header is set to `chunked`."
msgstr "反応型ルートは、 `Multi` .レスポンスには、項目が一つずつ書き込まれます。応答の `Transfer-Encoding` ヘッダは `chunked` ."

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:364
#, no-wrap
msgid ""
"@Route(path = \"/hello\")\n"
"Multi<String> hellos(RoutingContext context) {\n"
"    return Multi.createFrom().items(\"hello\", \"world\", \"!\");  // <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:366
#, fuzzy
msgid "Produces `helloworld!`"
msgstr "生産 `helloworld!`"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:370
#, fuzzy
msgid "a `Multi<String>` - the items are written one by one (one per _chunk_) in the response."
msgstr "a `Multi<String>` - 回答の中に項目を一つずつ(一つの _塊_ に一つずつ)書いています。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:371
#, fuzzy
msgid "a `Multi<Buffer>` - the buffers are written one by one (one per _chunk_) without any processing."
msgstr "a `Multi<Buffer>` - バッファは何の処理もせずに1つずつ( _チャンク_ ごとに1つずつ)書き込まれます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:372
#, fuzzy
msgid "a `Multi<Object>` - the items are encoded to JSON written one by one in the response."
msgstr "a `Multi<Object>` - レスポンスには、項目が一つずつJSONにエンコードされています。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:383
#, no-wrap
msgid ""
"@Route(path = \"/people\")\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:386
#: upstream/_guides/reactive-routes.adoc:414
#, fuzzy
msgid "The previous snippet produces:"
msgstr "前のスニペットが生成します。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:392
#, no-wrap
msgid ""
"{\"name\":\"superman\", \"id\": 1} // chunk 1\n"
"{\"name\":\"batman\", \"id\": 2} // chunk 2\n"
"{\"name\":\"spiderman\", \"id\": 3} // chunk 3\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:394
#, fuzzy, no-wrap
msgid "Streaming JSON Array items"
msgstr "ストリーミングJSON配列項目"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:399
#, fuzzy
msgid "You can return a `Multi` to produce a JSON Array, where every item is an item from this array.  The response is written item by item to the client.  The `content-type` is set to `application/json` if not set already."
msgstr "`Multi` を返して JSON 配列を生成し、ここではすべての項目がこの配列からの項目となります。レスポンスは項目ごとにクライアントに書き込まれます。 `content-type` は、まだ設定されていなければ `application/json` に設定されています。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:401
#, fuzzy
msgid "To use this feature, you need to wrap the returned `Multi` using `io.quarkus.vertx.web.ReactiveRoutes.asJsonArray`:"
msgstr "この機能を使用するには、 `io.quarkus.vertx.web.ReactiveRoutes.asJsonArray` を使用して返された `Multi` をラップする必要があります。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:411
#, no-wrap
msgid ""
"@Route(path = \"/people\")\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return ReactiveRoutes.asJsonArray(Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3)));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:422
#, no-wrap
msgid ""
"[\n"
"  {\"name\":\"superman\", \"id\": 1} // chunk 1\n"
"  ,{\"name\":\"batman\", \"id\": 2} // chunk 2\n"
"  ,{\"name\":\"spiderman\", \"id\": 3} // chunk 3\n"
"]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:428
#, fuzzy
msgid "Only `Multi<String>`, `Multi<Object>` and `Multi<Void>` can be written into the JSON Array.  Using a `Multi<Void>` produces an empty array.  You cannot use `Multi<Buffer>`.  If you need to use `Buffer`, transform the content into a JSON or String representation first."
msgstr "JSON配列に書き込めるのは、 `Multi<String>` , `Multi<Object>` , `Multi<Void>` のみです。 `Multi<Void>` を使用すると、空の配列が生成されます。 `Multi<Buffer>` は使用できません。 `Buffer` を使用する必要がある場合は、まずコンテンツを JSON または String 表現に変換してください。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:429
#, fuzzy, no-wrap
msgid "Event Stream and Server-Sent Event support"
msgstr "イベントストリームとサーバー送信イベントのサポート"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:433
#, fuzzy
msgid "You can return a `Multi` to produce an event source (stream of server sent events).  To enable this feature, you need to wrap the returned `Multi` using `io.quarkus.vertx.web.ReactiveRoutes.asEventStream`:"
msgstr "`Multi` を返すことで、イベントソース(サーバーから送信されたイベントのストリーム)を生成することができます。この機能を有効にするには、 `io.quarkus.vertx.web.ReactiveRoutes.asEventStream` を使用して返された `Multi` をラップする必要があります。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:443
#, no-wrap
msgid ""
"@Route(path = \"/people\")\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return ReactiveRoutes.asEventStream(Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3)));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:446
#: upstream/_guides/reactive-routes.adoc:526
#, fuzzy
msgid "This method would produce:"
msgstr "この方法であれば、生産することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:451
#, no-wrap
msgid ""
"data: {\"name\":\"superman\", \"id\": 1}\n"
"id: 0\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:454
#, no-wrap
msgid ""
"data: {\"name\":\"batman\", \"id\": 2}\n"
"id: 1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:457
#, no-wrap
msgid ""
"data: {\"name\":\"spiderman\", \"id\": 3}\n"
"id: 2\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:461
#, fuzzy
msgid "You can also implement the `io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` interface to customize the `event` and `id` section of the server sent event:"
msgstr "また、 `io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` インターフェイスを実装して、サーバー送信イベントの `event` と `id` セクションをカスタマイズすることもできます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:467
#, no-wrap
msgid ""
"class PersonEvent implements ReactiveRoutes.ServerSentEvent<Person> {\n"
"    public String name;\n"
"    public int id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:472
#, no-wrap
msgid ""
"    public PersonEvent(String name, int id) {\n"
"        this.name = name;\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:477
#, no-wrap
msgid ""
"    @Override\n"
"    public Person data() {\n"
"        return new Person(name, id); // Will be JSON encoded\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:482
#, no-wrap
msgid ""
"    @Override\n"
"    public long id() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:488
#, no-wrap
msgid ""
"    @Override\n"
"    public String event() {\n"
"        return \"person\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:491
#, fuzzy
msgid "Using a `Multi<PersonEvent>` (wrapped using `io.quarkus.vertx.web.ReactiveRoutes.asEventStream`) would produce:"
msgstr "`Multi<PersonEvent>` ( `io.quarkus.vertx.web.ReactiveRoutes.asEventStream` を使用してラップしたもの) を使用すると、生成されます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:497
#, no-wrap
msgid ""
"event: person\n"
"data: {\"name\":\"superman\", \"id\": 1}\n"
"id: 1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:501
#, no-wrap
msgid ""
"event: person\n"
"data: {\"name\":\"batman\", \"id\": 2}\n"
"id: 2\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:505
#, no-wrap
msgid ""
"event: person\n"
"data: {\"name\":\"spiderman\", \"id\": 3}\n"
"id: 3\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:508
#, fuzzy, no-wrap
msgid "Json Stream in NDJSON format"
msgstr "ストリーミングJSON配列項目"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:512
#, fuzzy
msgid "You can return a `Multi` to produce a newline delimited stream of JSON values.  To enable this feature, you need to wrap the returned `Multi` using `io.quarkus.vertx.web.ReactiveRoutes.asJsonStream`:"
msgstr "`Multi` を返すことで、イベントソース(サーバーから送信されたイベントのストリーム)を生成することができます。この機能を有効にするには、 `io.quarkus.vertx.web.ReactiveRoutes.asEventStream` を使用して返された `Multi` をラップする必要があります。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:523
#, no-wrap
msgid ""
"@Route(path = \"/people\")\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return ReactiveRoutes.asJsonStream(Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3)\n"
"            ));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:532
#, no-wrap
msgid ""
"{\"name\":\"superman\", \"id\": 1}\n"
"{\"name\":\"batman\", \"id\": 2}\n"
"{\"name\":\"spiderman\", \"id\": 3}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:536
#, fuzzy
msgid "You can also provide strings instead of Objects, in that case the strings will be wrapped in quotes to become valid JSON values:"
msgstr "オブジェクトの代わりに文字列を指定することもできます。その場合、文字列は引用符で囲まれ、有効なJSON値となります。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:547
#, no-wrap
msgid ""
"@Route(path = \"/people\")\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return ReactiveRoutes.asJsonStream(Multi.createFrom().items(\n"
"            \"superman\",\n"
"            \"batman\",\n"
"            \"spiderman\"\n"
"            ));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:554
#, no-wrap
msgid ""
"\"superman\"\n"
"\"batman\"\n"
"\"spiderman\"\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:557
#, no-wrap
msgid "Using Bean Validation"
msgstr "Bean バリデーションの使用"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:562
#, fuzzy
msgid "You can combine reactive routes and Bean Validation.  First, don't forget to add the `quarkus-hibernate-validator` extension to your project.  Then, you can add constraints to your route parameter (annotated with `@Param` or `@Body`):"
msgstr "Reactive RoutesとBean Validationを組み合わせることができます。まず、プロジェクトに `quarkus-hibernate-validator` エクステンションを追加することを忘れないでください。次に、ルートパラメーターに制約を追加します( `@Param` または `@Body` で注釈を付けます)。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:569
#, no-wrap
msgid ""
"@Route(produces = \"application/json\")\n"
"Person createPerson(@Body @Valid Person person, @NonNull @Param(\"id\") String primaryKey) {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:573
#, fuzzy
msgid "If the parameters do not pass the tests, it returns an HTTP 400 response.  If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr "パラメーターがテストに合格しない場合は、HTTP 400 応答を返します。リクエストが JSON ペイロードを受け付ける場合、レスポンスは link:https://opensource.zalando.com/problem/constraint-violation/[Problem の] 形式に従います。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:575
#, fuzzy
msgid "When returning an object or a `Uni`, you can also use the `@Valid` annotation:"
msgstr "オブジェクトや `Uni` を返す場合は、 `@Valid` アノテーションを使用することもできます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:582
#, no-wrap
msgid ""
"@Route(...)\n"
"@Valid Uni<Person> createPerson(@Body @Valid Person person, @NonNull @Param(\"id\") String primaryKey) {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:586
#, fuzzy
msgid "If the item produced by the route does not pass the validation, it returns a HTTP 500 response.  If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr "ルートが生成したアイテムが検証をパスしなかった場合、HTTP 500 レスポンスを返します。リクエストがJSONペイロードを受け入れる場合、レスポンスは link:https://opensource.zalando.com/problem/constraint-violation/[Problem] の形式に従います。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:590
#, fuzzy
msgid "Note that only `@Valid` is supported on the return type.  The returned class can use any constraint.  In the case of `Uni`, it checks the item produced asynchronously."
msgstr "戻り値の型は `@Valid` だけがサポートされていることに注意してください。返されるクラスは、任意の制約を使用することができます。 `Uni` の場合は、非同期的に生成された項目をチェックします。"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:591
#, no-wrap
msgid "Using the Vert.x Web Router"
msgstr "Vert.x Web ルーターの使用"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:595
#, fuzzy
msgid "You can also register your route directly on the _HTTP routing layer_ by registering routes directly on the `Router` object.  To retrieve the `Router` instance at startup:"
msgstr "また、 `Router` オブジェクトに直接ルートを登録することで、 _HTTP ルーティングレイヤー_ に直接ルートを登録することもできます。起動時に `Router` インスタンスを取得するには。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:601
#, no-wrap
msgid ""
"public void init(@Observes Router router) {\n"
"    router.get(\"/my-route\").handler(rc -> rc.response().end(\"Hello from my route\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:604
#, fuzzy
msgid "Check the https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web documentation] to know more about the route registration, options, and available handlers."
msgstr "ルート登録、オプション、利用可能なハンドラーの詳細については link:https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web ドキュメントを] 確認してください。"

#. type: delimited block =
#: upstream/_guides/reactive-routes.adoc:610
#, fuzzy
msgid "`Router` access is provided by the `quarkus-vertx-http` extension.  If you use `quarkus-resteasy` or `quarkus-vertx-web`, the extension will be added automatically."
msgstr "`Router` のアクセスは、 `quarkus-vertx-http` エクステンションで提供されています。 `quarkus-resteasy` または `quarkus-vertx-web` を使用している場合、エクステンションは自動的に追加されます。"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:612
#, no-wrap
msgid "Intercepting HTTP requests"
msgstr "HTTP リクエストの傍受"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:616
#, fuzzy
msgid "You can also register filters that would intercept incoming HTTP requests.  Note that these filters are also applied for servlets, JAX-RS resources, and reactive routes."
msgstr "また、着信 HTTP リクエストを傍受するフィルタを登録することもできます。これらのフィルタは、サーブレット、JAX-RSリソース、Reactive Routesにも適用されることに注意してください。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:618
#, fuzzy
msgid "For example, the following code snippet registers a filter adding an HTTP header:"
msgstr "例えば、以下のコードスニペットは HTTP ヘッダを追加するフィルタを登録します。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:624
#, no-wrap
msgid "import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:626
#, no-wrap
msgid "public class MyFilters {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:633
#, no-wrap
msgid ""
"    @RouteFilter(100) <1>\n"
"    void myFilter(RoutingContext rc) {\n"
"       rc.response().putHeader(\"X-Header\", \"intercepting the request\");\n"
"       rc.next(); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:636
#, fuzzy
msgid "The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first."
msgstr "`RouteFilter#value()` はフィルタのソートに使用する優先度を定義します - 優先度の高いフィルタが最初に呼び出されます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:637
#, fuzzy
msgid "The filter is likely required to call the `next()` method to continue the chain."
msgstr "チェーンを継続するためには、 `next()` メソッドを呼び出す必要がありそうです。"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:638
#, no-wrap
msgid "Adding OpenAPI and Swagger UI"
msgstr "OpenAPIとSwagger UIの追加"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:641
#, fuzzy
msgid "You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger UI] by using the `quarkus-smallrye-openapi` extension."
msgstr "`quarkus-smallrye-openapi` エクステンションを使用して、 link:https://www.openapis.org/[OpenAPI] と link:https://swagger.io/tools/swagger-ui/[Swagger UI の] サポートを追加することができます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:643
msgid "Add the extension by running this command:"
msgstr "このコマンドを実行してエクステンションを追加"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:647
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-smallrye-openapi\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:650
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:657
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-openapi</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:660
#, fuzzy
msgid "This is enough to generate a basic OpenAPI schema document from your Vert.x Routes:"
msgstr "Vert.x Routes から基本的な OpenAPI スキーマドキュメントを生成するにはこれで十分です。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:664
#, no-wrap
msgid "curl http://localhost:8080/q/openapi\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:667
#, fuzzy
msgid "You will see the generated OpenAPI schema document:"
msgstr "生成された OpenAPI スキーマドキュメントが表示されます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:670
#: upstream/_guides/reactive-routes.adoc:751
#, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:695
#, no-wrap
msgid ""
"openapi: 3.0.3\n"
"info:\n"
"  title: Generated API\n"
"  version: \"1.0\"\n"
"paths:\n"
"  /greetings:\n"
"    get:\n"
"      responses:\n"
"        \"204\":\n"
"          description: No Content\n"
"  /hello:\n"
"    get:\n"
"      responses:\n"
"        \"204\":\n"
"          description: No Content\n"
"  /world:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: OK\n"
"          content:\n"
"            '*/*':\n"
"              schema:\n"
"                type: string\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:698
msgid "Also see link:openapi-swaggerui[the OpenAPI Guide]."
msgstr "link:openapi-swaggerui[OpenAPIガイド] も参照してください。"

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:699
#, no-wrap
msgid "Adding MicroProfile OpenAPI Annotations"
msgstr "MicroProfile OpenAPIアノテーションの追加"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:703
msgid "You can use link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] to better document your schema, example, adding header info, or specifying the return type on `void` methods might be usefull :"
msgstr "link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI ] を使用してスキーマをより良くドキュメント化することができます。例えば、ヘッダ情報を追加したり、 `void` メソッドでリターンタイプを指定したりすると便利です。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:720
#, no-wrap
msgid ""
"@OpenAPIDefinition( // <1>\n"
"    info = @Info(\n"
"        title=\"Greeting API\",\n"
"        version = \"1.0.1\",\n"
"        contact = @Contact(\n"
"            name = \"Greeting API Support\",\n"
"            url = \"http://exampleurl.com/contact\",\n"
"            email = \"techsupport@example.com\"),\n"
"        license = @License(\n"
"            name = \"Apache 2.0\",\n"
"            url = \"https://www.apache.org/licenses/LICENSE-2.0.html\"))\n"
")\n"
"@ApplicationScoped\n"
"public class MyDeclarativeRoutes {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:729
#, no-wrap
msgid ""
"    // neither path nor regex is set - match a path derived from the method name\n"
"    @Route(methods = Route.HttpMethod.GET)\n"
"    @APIResponse(responseCode=\"200\", \n"
"            description=\"Say hello\", \n"
"            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING))) // <2>\n"
"    void hello(RoutingContext rc) {\n"
"        rc.response().end(\"hello\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:734
#, no-wrap
msgid ""
"    @Route(path = \"/world\") \n"
"    String helloWorld() {\n"
"        return \"Hello world!\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:743
#, no-wrap
msgid ""
"    @Route(path = \"/greetings\", methods = HttpMethod.GET)\n"
"    @APIResponse(responseCode=\"200\", \n"
"            description=\"Greeting\", \n"
"            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING)))\n"
"    void greetings(RoutingExchange ex) {\n"
"        ex.ok(\"hello \" + ex.getParam(\"name\").orElse(\"world\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:745
msgid "Header information about your API."
msgstr "APIに関するヘッダー情報"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:746
msgid "Defining the response"
msgstr "レスポンスの定義"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:748
msgid "This will generate this OpenAPI schema:"
msgstr "これにより、このOpenAPIスキーマが生成されます。"

#. type: delimited block -
#: upstream/_guides/reactive-routes.adoc:791
#, no-wrap
msgid ""
"openapi: 3.0.3\n"
"info:\n"
"  title: Greeting API\n"
"  contact:\n"
"    name: Greeting API Support\n"
"    url: http://exampleurl.com/contact\n"
"    email: techsupport@example.com\n"
"  license:\n"
"    name: Apache 2.0\n"
"    url: https://www.apache.org/licenses/LICENSE-2.0.html\n"
"  version: 1.0.1\n"
"paths:\n"
"  /greetings:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: Greeting\n"
"          content:\n"
"            application/json:\n"
"              schema:\n"
"                type: string\n"
"  /hello:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: Say hello\n"
"          content:\n"
"            application/json:\n"
"              schema:\n"
"                type: string\n"
"  /world:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: OK\n"
"          content:\n"
"            '*/*':\n"
"              schema:\n"
"                type: string\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-routes.adoc:793
#, no-wrap
msgid "Using Swagger UI"
msgstr "SwaggerのUIの使用"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:797
#, fuzzy
#| msgid "Swagger UI is included by default when running in `dev` or `test` mode, and can optionally added to `prod` mode.  See <<openapi-swaggerui.adoc#use-swagger-ui-for-development,the Swagger UI>> Guide for more details."
msgid "Swagger UI is included by default when running in `dev` or `test` mode, and can optionally added to `prod` mode.  See <<openapi-swaggerui.adoc#dev-mode,the Swagger UI>> Guide for more details."
msgstr "Swagger UIは、 `dev` または `test` モードで実行しているときにデフォルトで含まれており、オプションで `prod` モードに追加することができます。詳細については、 link:openapi-swaggerui.html#use-swagger-ui-for-development[Swagger UI] ガイドを参照してください。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:799
msgid "Navigate to link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] and you will see the Swagger UI screen:"
msgstr "link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] に移動すると、Swagger UIの画面が表示されます。"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:801
msgid "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"
msgstr "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"

#. type: Title ==
#: upstream/_guides/reactive-routes.adoc:802
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_guides/reactive-routes.adoc:805
msgid "This guide has introduced how you can use reactive routes to define an HTTP endpoint.  It also describes the structure of the Quarkus HTTP layer and how to write filters."
msgstr "このガイドでは、Reactive Routesを使用してHTTPエンドポイントを定義する方法を紹介してきました。また、Quarkus HTTPレイヤーの構造とフィルターの書き方についても説明しました。"

#~ msgid "`io.vertx.mutiny.ext.web.RoutingContext`"
#~ msgstr "`io.vertx.ext.web.RoutingContext`"
