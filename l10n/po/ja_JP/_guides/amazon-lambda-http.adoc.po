# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-02-23 11:07+0000\n"
"PO-Revision-Date: 2021-03-17 21:18+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: Nobuhiro Sue <nobuhiro.sue@gmail.com>\n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/amazon-lambda-http.adoc:6
#, no-wrap
msgid "Quarkus - Amazon Lambda with RESTEasy, Undertow, or Vert.x Web "
msgstr "Quarkus - RESTEasy、Undertow、またはVert.x Webを使用した Amazon Lambda"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:15
msgid "The `quarkus-amazon-lambda-http` extension allows you to write microservices with RESTEasy (JAX-RS), Undertow (servlet), Vert.x Web, link:funqy-http[Funqy HTTP] or any other Quarkus HTTP API that runs on top of Vert.x Web and deploy them to Amazon Lambda using https://aws.amazon.com/api-gateway/[Amazon's API Gateway] and https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[Amazon's SAM framework]."
msgstr "`quarkus-amazon-lambda-http` エクステンションを使うと、RESTEasy (JAX-RS)、Undertow (サーブレット)、Vert.x Web、または link:funqy-http[Funqy HTTP] でマイクロサービスを書き、 link:https://aws.amazon.com/api-gateway/[AmazonのAPI Gateway] とAmazonの link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[SAMフレームワークを] 使って、これらのマイクロサービスをAmazon Lambdaとしてデプロイ可能な状態にすることができます。"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:18
msgid "You can deploy your Lambda as a pure Java jar, or you can compile your project to a native image and deploy that for a smaller memory footprint and startup time."
msgstr "Lambda を純粋な Java jar としてデプロイすることもできますし、プロジェクトをネイティブイメージにコンパイルしてデプロイすることで、より少ないメモリーフットプリントと起動時間を実現することもできます。"

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:21
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:24
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:26
msgid "less than 30 minutes"
msgstr "三十分以内"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:27
msgid "JDK 11 (AWS requires JDK 1.8 or 11)"
msgstr "JDK 11 (AWSではJDK 1.8または11が必要)"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:28
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:29
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr "link:https://aws.amazon.com[Amazon AWSのアカウント]"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:30
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:31
#, no-wrap
msgid "Getting Started"
msgstr "はじめに"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:35
msgid "This guide walks you through generating an example Java project via a maven archetype.  Later on it walks through the structure of the project so you can adapt any existing projects you have to use Amazon Lambda."
msgstr "このガイドでは、mavenのアーキタイプを介してJavaプロジェクトのサンプルを生成する方法を説明します。その後、既存のプロジェクトを Amazon Lambda で利用できるようにするために、プロジェクトの構造を説明します。"

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:36
#, no-wrap
msgid "Installing AWS bits"
msgstr "AWSツールのインストール"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:40
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS SAM CLI."
msgstr "AWSのすべてのツールをインストールすることは、おそらくこのガイドでは最も難しいことです。AWS CLIをインストールするためのすべての手順に従っていることを確認してください。"

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:41
#, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr "Maven デプロイメントプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:44
msgid "Create the Quarkus AWS Lambda maven project using our Maven Archetype."
msgstr "Maven Archetypeを使用してQuarkus AWS Lambda Mavenプロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:52
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-http-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:56
msgid "This extension has recently been upgraded to use API Gateway V2.  If you need to still use V1 of the API Gateway use the `quarkus-amazon-lambda-http-v1` extension instead."
msgstr "このエクステンションは最近、API Gateway V2を使用するようにアップグレードされました。まだ API Gateway V1 を使用する必要がある場合は、代わりに `quarkus-amazon-lambda-http-v1` エクステンションを使用してください。"

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:57
#, no-wrap
msgid "Build and Deploy"
msgstr "ビルドとデプロイ"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:60
msgid "Build the project using maven."
msgstr "mavenを使ってプロジェクトをビルドします。"

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:64
#, no-wrap
msgid "./mvnw clean install\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:69
msgid "This will compile the code and run the unit tests included within the generated project.  Unit testing is the same as any other Java project and does not require running on Amazon.  Quarkus dev-mode is also available with this extension."
msgstr "これでコードがコンパイルされ、生成されたプロジェクト内に含まれるユニットテストが実行されます。ユニットテストは他のJavaプロジェクトと同じで、Amazonで実行する必要はありません。Quarkus dev-modeもこのエクステンションで利用できます。"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:72
msgid "If you want to build for native too, make sure you have GraalVM installed correctly and just add a `native` property to the build"
msgstr "ネイティブ用にもビルドしたい場合は、GraalVMが正しくインストールされていることを確認し、 `native` プロパティーをビルドに追加してください。"

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:76
#: upstream/_guides/amazon-lambda-http.adoc:146
#, no-wrap
msgid "./mvnw clean install -Dnative\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:81
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing quarkus to use a docker build as Amazon Lambda requires linux binaries.  You can do this by passing this property to your Maven build: `-Dnative-image.docker-build=true`, or for Gradle: `--docker-build=true`.  This requires you to have docker installed locally, however."
msgstr "非 Linux システムでビルドしている場合は、Amazon Lambda が linux バイナリーを必要とするため、quarkus に docker ビルドを使用するように指示するプロパティーを渡す必要があります。これは、このプロパティーを Maven ビルドに渡すことで行うことができます: `-Dnative-image.docker-build=true` , または Gradle の場合: `--docker-build=true` .ただし、この場合はローカルに docker がインストールされている必要があります。"

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:85
#, no-wrap
msgid "./mvnw clean install -Dnative -Dnative-image.docker-build=true\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:87
#, no-wrap
msgid "Extra Build Generated Files"
msgstr "ビルド時に追加生成されるファイル"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:91
msgid "After you run the build, there are a few extra files generated by the `quarkus-amazon-lambda` extension.  These files are in the the build directory: `target/` for maven, `build/` for gradle."
msgstr "ビルドを実行すると、 `quarkus-amazon-lambda` のエクステンションで生成されるいくつかの追加ファイルがあります。これらのファイルはビルドディレクトリーにあります: mavenなら `target/` 、gradleなら `build/` 。"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:93
msgid "`function.zip` - lambda deployment file"
msgstr "`function.zip` - Lambda デプロイファイル"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:94
msgid "`sam.jvm.yaml` - sam cli deployment script"
msgstr "`sam.jvm.yaml` - SAM CLI デプロイメントスクリプト"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:95
msgid "`sam.native.yaml` - sam cli deployment script for native"
msgstr "`sam.native.yaml` - ネイティブ用の SAM CLI デプロイメントスクリプト"

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:96
#, no-wrap
msgid "Simulate Amazon Lambda Deployment"
msgstr "Amazon Lambdaデプロイのシミュレーション"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:100
msgid "The AWS SAM CLI allows you to run your lambda's locally on your laptop in a simulated Lambda environment.  This requires docker to be installed (see their install docs).  After you have built your maven project, execute this command"
msgstr "AWS SAM CLIを使うと、ラップトップ上でLambdaをシミュレートした環境でローカルに実行することができます。このためにはdockerをインストールする必要があります(インストールドキュメントを参照してください)。mavenプロジェクトをビルドした後、以下のコマンドを実行してください"

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:104
#, no-wrap
msgid "sam local start-api --template target/sam.jvm.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:108
msgid "This will start a docker container that mimics Amazon's Lambda's deployment environment.  Once the environment is started you can invoke the example lambda in your browser by going to"
msgstr "これでAmazonのLambdaのデプロイ環境を模したdockerコンテナーが起動します。環境が起動したら、ブラウザで以下を開くとサンプルの Lambda を実行できます。"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:110
msgid "http://127.0.0.1:3000/hello"
msgstr "http://127.0.0.1:3000/hello"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:113
msgid "In the console you'll see startup messages from the lambda.  This particular deployment starts a JVM and loads your lambda as pure Java."
msgstr "コンソールには、ラムダからの起動メッセージが表示されます。この特定のデプロイメントでは、JVM を起動し、純粋な Java として Lambda をロードします。"

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:115
#, no-wrap
msgid "Deploy to AWS"
msgstr "AWSへのデプロイ"

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:120
#, no-wrap
msgid "sam deploy -t target/sam.jvm.yaml -g\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:124
msgid "Answer all the questions and your lambda will be deployed and the necessary hooks to the API Gateway will be set up. If everything deploys successfully, the root URL of your microservice will be output to the console.  Something like this:"
msgstr "すべての質問に答えると、 Lambda がデプロイされ、API Gatewayへの必要なフックが設定されます。すべてが正常にデプロイされると、マイクロサービスのルート URL がコンソールに出力されます。このような感じです。"

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:129
#, no-wrap
msgid ""
"Key                 LambdaHttpApi\n"
"Description         URL for application\n"
"Value               https://234asdf234as.execute-api.us-east-1.amazonaws.com/\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:132
msgid "The `Value` attribute is the root URL for your lambda. Copy it to your browser and add `hello` at the end."
msgstr "`Value` 属性は Lambda のルート URL です。これをブラウザにコピーして、最後に `hello` を追加します。"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:138
msgid "Responses for binary types will be automatically encoded with base64.  This is different than the behavior using `quarkus:dev` which will return the raw bytes.  Amazon's API has additional restrictions requiring the base64 encoding.  In general, client code will automatically handle this encoding but in certain custom situations, you should be aware you may need to manually manage that encoding."
msgstr "バイナリー型のレスポンスは自動的にbase64でエンコードされます。これは、生のバイトを返す `quarkus:dev` を使用した動作とは異なります。Amazon の API には、base64 エンコーディングを必要とする追加の制限があります。一般的に、クライアントコードは自動的にこのエンコーディングを処理しますが、特定のカスタムな状況では、手動でエンコーディングを管理する必要があるかもしれないことを認識しておく必要があります。"

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:139
#, no-wrap
msgid "Deploying a native executable"
msgstr "ネイティブ実行ファイルのデプロイ"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:142
msgid "To deploy a native executable, you must build it with Graal."
msgstr "ネイティブ実行ファイルをデプロイするには、Graalを使ってビルドする必要があります。"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:149
msgid "You can then test the executable locally with sam local"
msgstr "その後、ローカルで sam local を使って実行ファイルをテストすることができます。"

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:153
#, no-wrap
msgid "sam local start-api --template target/sam.native.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:156
msgid "To deploy to AWS Lambda:"
msgstr "AWS Lambda へのデプロイ"

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:159
#, no-wrap
msgid "sam deploy -t target/sam.native.yaml -g\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:161
#, no-wrap
msgid "Examine the POM"
msgstr "POMを調べる"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:165
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda-http` extension as a dependencies.  The extension automatically generates everything you might need for your lambda deployment."
msgstr "POM には `quarkus-amazon-lambda-http` エクステンションが依存関係として含まれている以外に特別なことは何もありません。このエクステンションは Lambda のデプロイに必要なものをすべて自動的に生成します。"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:169
msgid "Also, at least in the generated maven archetype `pom.xml`, the `quarkus-resteasy`, `quarkus-vertx-web`, and `quarkus-undertow` dependencies are all optional.  Pick which http framework(s) you want to use (JAX-RS, Vertx Web, and/or Servlet) and remove the other dependencies to shrink your deployment."
msgstr "また、少なくとも生成された maven のアーキタイプ `pom.xml` , `quarkus-resteasy` , `quarkus-vertx-web` , `quarkus-undertow` の依存関係はすべてオプションです。使用したい http フレームワーク (JAX-RS、Vertx Web、および/または Servlet) を選択し、他の依存関係を削除してデプロイを縮小します。"

#. type: Title ===
#: upstream/_guides/amazon-lambda-http.adoc:170
#, no-wrap
msgid "Examine sam.yaml"
msgstr "sam.yaml を調べる"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:174
msgid "The `sam.yaml` syntax is beyond the scope of this document.  There's a couple of things to note though that are particular to the `quarkus-amazon-lambda-http` extension."
msgstr "`sam.yaml` の構文はこのドキュメントの範囲を超えています。しかし、 `quarkus-amazon-lambda-http` エクステンションに特有の注意点がいくつかあります。"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:178
msgid "Amazon's API Gateway assumes that HTTP response bodies are text unless you explicitly tell it which media types are binary through configuration.  To make things easier, the Quarkus extension forces a binary (base 64) encoding of all HTTP response messages and the `sam.yaml` file must configure the API Gateway to assume all media types are binary:"
msgstr "AmazonのAPI Gatewayでは、設定でどのメディアタイプがバイナリーであるかを明示的に指定しない限り、HTTPレスポンスボディはテキストであることを前提としています。より簡単にするために、QuarkusエクステンションはすべてのHTTP応答メッセージのバイナリー(ベース64)エンコーディングを強制します。 `sam.yaml` ファイルでは、すべてのメディアタイプがバイナリーであると仮定するようにAPI Gatewayを設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:186
#, no-wrap
msgid ""
"  Globals:\n"
"    Api:\n"
"      EndpointConfiguration: REGIONAL\n"
"      BinaryMediaTypes:\n"
"        - \"*/*\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:189
msgid "Another thing to note is that for pure Java lambda deployments, do not change the Lambda handler name."
msgstr "もう一つ注意すべきことは、純粋な Java Lambda ラムダデプロイメントの場合、 Lambda ハンドラーの名前を変更しないことです。"

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:195
#, no-wrap
msgid ""
"     Properties:\n"
"        Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest\n"
"        Runtime: java11\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:199
msgid "This particular handler handles all the intricacies of integrating with the Quarkus runtime.  So you must use that handler."
msgstr "この特定のハンドラーは、Quarkusランタイムとの統合のすべての複雑さを処理します。そのため、そのハンドラーを使用する必要があります。"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:202
msgid "Finally, there's an environment variable that must be set for native GraalVM deployments.  If you look at `sam.native.yaml` you'll see this:"
msgstr "最後に、ネイティブなGraalVMデプロイメントのために設定しなければならない環境変数があります。 `sam.native.yaml` を見ると、以下のようになっています。"

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:208
#, no-wrap
msgid ""
"        Environment:\n"
"          Variables:\n"
"            DISABLE_SIGNAL_HANDLERS: true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:211
msgid "This environment variable resolves some incompatibilities between Quarkus and the Amazon Lambda Custom Runtime environment."
msgstr "この環境変数は、QuarkusとAmazon Lambdaカスタムランタイム環境との間のいくつかの非互換性を解決します。"

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:212
#, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr "AWS XRay と GraalVMでのトレース"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:216
msgid "If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray library is not fully compatible with GraalVM so we had to do some integration work to make this work."
msgstr "ネイティブイメージをビルドしていて、Lambda で link:https://aws.amazon.com/xray[AWS X-Ray Tracing] を使いたい場合は、 `quarkus-amazon-lambda-xray` を依存関係として pom に含める必要があります。AWS X-Ray ライブラリは GraalVM との完全な互換性がないため、これを動作させるためにいくつかの統合作業をしなければなりませんでした。"
