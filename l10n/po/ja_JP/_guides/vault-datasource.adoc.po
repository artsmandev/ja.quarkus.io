# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-20 08:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/vault-datasource.adoc:6
#, fuzzy, no-wrap
msgid "Using HashiCorp Vault with Databases"
msgstr "Quarkus - HashiCorp Vaultとデータベースの使用"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:17
#, fuzzy
msgid "The most common use case when working with Vault is to keep confidential the database connection credentials.  There are several approaches that are supported in Quarkus, with different levels of sophistication and security:"
msgstr "Vaultを使用する際の最も一般的なユースケースは、データベースの接続認証情報を機密に保つことです。Quarkusでサポートされているアプローチはいくつかあり、洗練度とセキュリティーのレベルが異なります。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:19
#, fuzzy
msgid "Property fetched from the KV Secret Engine using the Vault MicroProfile Config Source"
msgstr "Vault MicroProfile Config Source を使用して KV シークレット エンジンから取得したプロパティー"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:20
#, fuzzy
msgid "Quarkus Credentials Provider"
msgstr "Quarkusクレデンシャルプロバイダー"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:21
#, fuzzy
msgid "Vault Dynamic DB Credentials"
msgstr "Vault ダイナミック DB クレデンシャル"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:24
#, fuzzy
msgid "This guide aims at providing examples for each of those approaches. We will reuse the application implemented in the {base-guide} and enhance it with a simple persistence use case."
msgstr "このガイドでは、これらのアプローチのそれぞれの例を提供することを目的としています。ベースガイド}で実装したアプリケーションを再利用し、簡単な永続化のユースケースで強化します。"

#. type: Title ==
#: upstream/_guides/vault-datasource.adoc:27
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:30
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:32
#, fuzzy
msgid "to complete the {base-guide}"
msgstr "ベースガイド}を完成させるために"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:33
#, fuzzy
msgid "roughly 20 minutes"
msgstr "ざっと20分"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:34
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:35
#, fuzzy
#| msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:36
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:37
msgid "Docker installed"
msgstr "Dockerがインストールされていること"

#. type: Title ===
#: upstream/_guides/vault-datasource.adoc:38
#, fuzzy, no-wrap
msgid "Application"
msgstr "アプリケーション"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:42
#, fuzzy
msgid "We assume the {base-guide} application has been developed, a Vault container is running, and the root token is known.  In this section we are going to start a PostgreSQL database, and add a persistence service in the application."
msgstr "ここでは、{base-guide}アプリケーションが開発され、Vaultコンテナーが実行され、ルートトークンが既知であると仮定します。このセクションでは、PostgreSQLデータベースを起動し、アプリケーションに永続化サービスを追加します。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:44
#, fuzzy
msgid "Add the _Hibernate_ and _PostgreSQL_ extensions to the application:"
msgstr "アプリケーションに _Hibernate_ と _PostgreSQLの_ エクステンションを追加します。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:46
#, no-wrap
msgid "mvn quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-hibernate-orm,io.quarkus:quarkus-jdbc-postgresql\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:49
#, fuzzy
msgid "Create a simple service:"
msgstr "簡単なサービスを作成します。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:54
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SantaClausService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:57
#, no-wrap
msgid ""
"    @Inject\n"
"    EntityManager em;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:63
#, no-wrap
msgid ""
"    @Transactional\n"
"    public List<Gift> getGifts() {\n"
"        return (List<Gift>) em.createQuery(\"select g from Gift g\").getResultList();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:66
#, fuzzy
msgid "With its `Gift` entity:"
msgstr "その `Gift` エンティティーで。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:71
#, no-wrap
msgid ""
"@Entity\n"
"public class Gift {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:74
#, no-wrap
msgid ""
"    private Long id;\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:80
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator=\"giftSeq\")\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:84
#, no-wrap
msgid ""
"    public void setId(Long id) {\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:88
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:93
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:96
#, fuzzy
msgid "Finally, add a new endpoint in `GreetingResource`:"
msgstr "最後に、 `GreetingResource` .に新しいエンドポイントを追加します。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:101
#, no-wrap
msgid ""
"@Inject\n"
"SantaClausService santaClausService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:108
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/gift-count\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public int geGiftCount() {\n"
"    return santaClausService.getGifts().size();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:111
#, fuzzy
msgid "Start a PostgreSQL database:"
msgstr "PostgreSQLデータベースを起動します。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:115
#, no-wrap
msgid "docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name postgres-quarkus-hibernate -e POSTGRES_USER=sarah -e POSTGRES_PASSWORD=connor -e POSTGRES_DB=mydatabase -p 5432:5432 postgres:10.5\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:118
#, fuzzy
msgid "Now we are ready to configure Vault and Quarkus to be able to connect to this database from the application."
msgstr "これで、アプリケーションからこのデータベースに接続できるようにVaultとQuarkusを設定する準備が整いました。"

#. type: Title ==
#: upstream/_guides/vault-datasource.adoc:119
#, fuzzy, no-wrap
msgid "Vault MicroProfile Config Source"
msgstr "Vault MicroProfile コンフィグソース"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:123
#, fuzzy
msgid "The simplest approach is to write the database password in the KV secret engine under the path that is fetched from the Vault Config Source."
msgstr "最も簡単な方法は、Vault MicroProfile Config Source から取得したパスの下に KV シークレット エンジンにデータベースのパスワードを書き込むことです。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:125
#, fuzzy
msgid "Open a new shell, `docker exec` in the Vault container and set the root token:"
msgstr "Vault コンテナーで新しいシェル `docker exec` を開き、ルートトークンを設定します。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:129
#, no-wrap
msgid ""
"docker exec -it dev-vault sh\n"
"export VAULT_TOKEN={root-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:133
#, fuzzy
msgid "Add a `dbpassword` property in the `config` path of the KV secret engine, beside the original `a-private-key` property:"
msgstr "オリジナルの `a-private-key` プロパティーの横に、KV 秘密エンジンの `config` パスに `dbpassword` プロパティーを追加します。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:136
#, no-wrap
msgid "vault kv put secret/myapps/vault-quickstart/config a-private-key=123456 dbpassword=connor\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:139
#, fuzzy
msgid "Add the following configuration in Quarkus to use the value of property `dbpassword` as our database password:"
msgstr "プロパティー `dbpassword` の値をデータベースのパスワードとして使用するために、Quarkusで以下の設定を追加します。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:146
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = ${dbpassword}\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:149
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:152
#, fuzzy
msgid "Compile and start the application:"
msgstr "コンパイルしてアプリケーションを起動します。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:156
#, no-wrap
msgid ""
"./mvnw package\n"
"java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:159
#, fuzzy
msgid "Test it with the `gift-count` endpoint:"
msgstr "`gift-count` エンドポイントでテストします。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:163
#, no-wrap
msgid "curl http://localhost:8080/hello/gift-count\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:166
#, fuzzy
msgid "You should see:"
msgstr "見た方がいいですよ。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:170
#, no-wrap
msgid "0\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:179
#, fuzzy
msgid "This approach is certainly the simplest of all. It has also the big advantage of working with any subsystem that requires a secret information in the configuration (i.e. not just _Agroal_).  The only drawback is that the password will never be fetched again from Vault after the initial property loading.  This means that if the db password was changed while running, the application would have to be restarted after Vault has been updated with the new password.  This contrasts with the credentials provider approach, which fetches the password from Vault every time a connection creation is attempted."
msgstr "このアプローチは確かにすべての中で最もシンプルです。また、設定で秘密の情報を必要とするあらゆるサブシステムで動作するという大きな利点があります(つまり、 _Agroal_ だけではありません)。唯一の欠点は、最初にプロパティーをロードした後、パスワードがVaultから二度と取得されないことです。これは、実行中に db のパスワードが変更された場合、Vault が新しいパスワードで更新された後にアプリケーションを再起動しなければならないことを意味します。これは、接続を作成しようとするたびに Vault からパスワードを取得するクレデンシャル プロバイダのアプローチとは対照的です。"

#. type: Title ==
#: upstream/_guides/vault-datasource.adoc:180
#, no-wrap
msgid "Credentials Provider"
msgstr "資格情報プロバイダー"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:187
#, fuzzy
msgid "In this approach we introduce a new abstraction called the _Credentials Provider_ that acts as an intermediary component between the Agroal datasource and Vault. The additional configuration required is small, and it has the major advantage of handling gracefully database password change while the application is running, without any restart. Since all new connections go through the _Credentials Provider_ to fetch their password, we make sure we have a fresh value every time."
msgstr "このアプローチでは、Agroal データソースと Vault 間の仲介コンポーネントとして機能する _クレデンシャル・プロバイダ_ と呼ばれる新しい抽象化を導入する。必要な追加設定は小さく、アプリケーションの実行中に再起動なしでデータベースのパスワード変更を優雅に処理できるという大きな利点がある。すべての新しい接続は、パスワードを取得するために _クレデンシャルプロバイダ_ を経由するので、毎回新鮮な値を持っていることを確認しています。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:189
#, fuzzy
msgid "Create a new path (different than the `config` path) in Vault where the database password will be added:"
msgstr "デー タ ベース のパ ス ワー ド が追加 さ れ る Vault 内に、 新しいパス ( `config` パス とは別の) を作成 し ます。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:193
#, no-wrap
msgid "vault kv put secret/myapps/vault-quickstart/db password=connor\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:197
#, fuzzy
msgid "Since we allowed read access on `secret/myapps/vault-quickstart/*` subpaths in the policy, there is nothing else we have to do to allow the application to read it."
msgstr "ポリシーで `secret/myapps/vault-quickstart/*` サブパスの読み込みアクセスを許可しているので、アプリケーションに読み込みを許可するためには、他に何もしなければならないことはありません。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:200
#, fuzzy
msgid "When fetching credentials from Vault that are intended to be used by the Agroal connection pool, we need first to create a named Vault credentials provider in the {config-file}:"
msgstr "Agroal 接続プールで使用することを意図した資格情報を Vault からフェッチする場合、まず {config-file} に名前付き Vault 資格情報プロバイダを作成する必要があります。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:204
#, no-wrap
msgid "quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:208
#, fuzzy
msgid "This defines a credentials provider `mydatabase` that will fetch the password from key `password` at path `myapps/vault-quickstart/db`."
msgstr "これは、パス `myapps/vault-quickstart/db` のキー `password` からパスワードを取得するクレデンシャル・プロバイダ `mydatabase` を定義しています。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:211
#, fuzzy
msgid "The credentials provider can now be used in the datasource configuration, in place of the `password` property:"
msgstr "データソースの設定で、 `password` プロパティーの代わりに資格情報プロバイダを使用できるようになりました。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:219
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.credentials-provider = mydatabase\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:222
#, fuzzy
msgid "Recompile, start and test the `gift-count` endpoint. You should see `0` again."
msgstr "再コンパイルし、 `gift-count` エンドポイントを起動してテストします。再び `0` が表示されるはずです。"

#. type: Title ==
#: upstream/_guides/vault-datasource.adoc:223
#, fuzzy, no-wrap
msgid "Dynamic Database Credentials"
msgstr "動的データベースの資格情報"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:229
#, fuzzy
msgid "The two previous approaches work well and are very popular. However they rely on a well known user configured in the application (i.e. the database user), and the security comes from the confidentiality of the password.  If the password was stolen, we would have to change it in the database and in Vault. Regularly rotating passwords is actually a very good practice to limit (in time) the impact of getting the password stolen."
msgstr "前の2つのアプローチはうまく機能し、非常に人気があります。しかし、これらのアプローチはアプリケーションで設定されたよく知られたユーザー(すなわちデータベースユーザー)に依存しており、セキュリティーはパスワードの機密性から来ています。パスワードが盗まれた場合、データベースとVaultでパスワードを変更しなければなりません。Regularyローテーションパスワードは、パスワードが盗まれた場合の影響を(時間的に)制限するために、実際には非常に良い練習です。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:233
#, fuzzy
msgid "A more sophisticated approach consists in letting Vault create and retire database accounts on a regular basis.  This is supported in Vault with the https://www.vaultproject.io/docs/secrets/databases[Database secret engine]. A number of databases are supported, such as https://www.vaultproject.io/docs/secrets/databases/postgresql[PostgreSQL]."
msgstr "より洗練されたアプローチは、Vault にデータベース アカウントを定期的に作成および破棄させることで構成されています。これは、 link:https://www.vaultproject.io/docs/secrets/databases[データベースシークレットエンジン] を使用してVaultでサポートされています。 link:https://www.vaultproject.io/docs/secrets/databases/postgresql[PostgreSQL] など、多くのデータベースがサポートされています。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:237
#, fuzzy
msgid "First we need to enable the `database` secret engine, configure the `postgresql-database-plugin` and create the database role `mydbrole` (replace `10.0.0.3` by the actual host that is running the PostgreSQL container; for simplicity we disabled _TLS_ between Vault and the PostgreSQL database):"
msgstr "まず、 `database` 秘密エンジンを有効にし、 `postgresql-database-plugin` を設定し、データベースロール `mydbrole` を作成する必要があります( `10.0.0.3` を PostgreSQL コンテナーを実行している実際のホストに置き換えてください。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:240
#, no-wrap
msgid "vault secrets enable database\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:247
#, no-wrap
msgid ""
"vault write database/config/mydb \\\n"
"    plugin_name=postgresql-database-plugin \\\n"
"    allowed_roles=mydbrole \\\n"
"    connection_url=postgresql://{{username}}:{{password}}@10.0.0.3:5432/mydatabase?sslmode=disable \\\n"
"    username=sarah \\\n"
"    password=connor\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:253
#, no-wrap
msgid ""
"cat <<EOF > vault-postgres-creation.sql\n"
"CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';\n"
"GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO \"{{name}}\";\n"
"GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public to \"{{name}}\";\n"
"EOF\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:260
#, no-wrap
msgid ""
"vault write database/roles/mydbrole \\\n"
"    db_name=mydb creation_statements=@vault-postgres-creation.sql \\\n"
"    default_ttl=1h \\\n"
"    max_ttl=24h \\\n"
"    revocation_statements=\"ALTER ROLE \\\"{{name}}\\\" NOLOGIN;\" \\\n"
"    renew_statements=\"ALTER ROLE \\\"{{name}}\\\" VALID UNTIL '{{expiration}}';\"\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/vault-datasource.adoc:266
#, fuzzy
msgid "For this use case, user `sarah` configured above needs to be a PostgreSQL super user with the capability to create users."
msgstr "このユースケースでは、上記で設定したユーザー `sarah` は、ユーザーを作成する機能を持つPostgreSQLのスーパーユーザーである必要があります。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:269
#, fuzzy
msgid "Then we need to give a read capability to the Quarkus application on path `database/creds/mydbrole`."
msgstr "次に、パス `database/creds/mydbrole` にあるQuarkusアプリケーションに読み込み機能を与える必要があります。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:279
#, no-wrap
msgid ""
"cat <<EOF | vault policy write vault-quickstart-policy -\n"
"path \"secret/data/myapps/vault-quickstart/*\" {\n"
"  capabilities = [\"read\"]\n"
"}\n"
"path \"database/creds/mydbrole\" {\n"
"  capabilities = [ \"read\" ]\n"
"}\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:283
#, fuzzy
msgid "Now that Vault knows how to create users in PostgreSQL, we juste need to change the `mydatabase` credentials provider to use a `database-credentials-role`."
msgstr "これでVaultはPostgreSQLでユーザーを作成する方法を知っているので、 `mydatabase` の認証情報プロバイダを `database-credentials-role` .NET を使用するように変更する必要があります。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:286
#, no-wrap
msgid "quarkus.vault.credentials-provider.mydatabase.database-credentials-role=mydbrole\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/vault-datasource.adoc:295
#, fuzzy
msgid "When using `quarkus.hibernate-orm.database.generation=drop-create`, objects get created with the applicative user. Since a user will be created every time the applications starts, database objects will be created with the first created user, then we will attempt to drop them on the second run with a different user that is not the owner. As expected this will fail. As a result, it is recommended to use `quarkus.hibernate-orm.database.generation=update` in this section."
msgstr "`quarkus.hibernate-orm.database.generation=drop-create` を使用している場合、オブジェクトはアプリケーションのユーザーで作成されます。アプリケーションが起動するたびにユーザーが作成されるので、データベースオブジェクトは最初に作成されたユーザーで作成され、2回目の実行時には所有者ではない別のユーザーで削除しようとします。予想通り、これは失敗します。結果として、このセクションでは `quarkus.hibernate-orm.database.generation=update` を使用することをお勧めします。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:298
#, fuzzy
msgid "Recompile with `./mvnw package`, start and test the `gift-count` endpoint. You should see `0` again."
msgstr "`./mvnw package` で再コンパイルし、 `gift-count` エンドポイントを起動してテストしてください。再び `0` が表示されるはずです。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:300
#, fuzzy
msgid "Notice in the logs:"
msgstr "ログで気づく。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:303
#, no-wrap
msgid "2020-04-22 14:29:48,522 DEBUG [io.qua.vau.run.VaultDbManager] (Agroal_682171661) generated mydbrole credentials: {leaseId: database/creds/mydbrole/L6PxoI68gZDeVPXP0RAA4c0a, renewable: true, leaseDuration: 60s, valid_until: Wed Apr 22 14:30:48 CEST 2020, username: v-userpass-mydbrole-HeOMJCmy9coEnO2my2AR-1587558588, password:***}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:307
#, fuzzy
msgid "If you connect to the PostgreSQL database, and list all users configured on `mydatabase`, you will see the `sarah` super user, but also the technical users dynamically created by Vault:"
msgstr "あなたは、PostgreSQLデータベースに接続し、 `mydatabase` に設定されたすべてのユーザーをリストアップする場合は、 `sarah` スーパーユーザーだけでなく、動的にVaultによって作成された技術的なユーザーが表示されます。"

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:310
#, no-wrap
msgid ""
"docker exec -it postgres-quarkus-hibernate bash\n"
"psql mydatabase sarah\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-datasource.adoc:319
#, no-wrap
msgid ""
"mydatabase=# \\du\n"
"                                                        List of roles\n"
"                      Role name                      |                         Attributes                         | Member of\n"
"-----------------------------------------------------+------------------------------------------------------------+-----------\n"
" sarah                                               | Superuser, Create role, Create DB, Replication, Bypass RLS | {}\n"
" v-userpass-mydbrole-HeOMJCmy9coEnO2my2AR-1587558588 | Password valid until 2020-04-22 12:30:53+00                | {}\n"
" v-userpass-mydbrole-N2ITbBXxoqMQ3A3cZL88-1587558572 | Cannot login                                              +| {}\n"
"                                                     | Password valid until 2020-04-22 12:30:37+00                |\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:322
#, fuzzy
msgid "As you can see 2 users have been created:"
msgstr "ご覧のように2人のユーザーが作成されています。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:324
#, fuzzy
msgid "`v-userpass-mydbrole-N2ITbBXxoqMQ3A3cZL88-1587558572` that has expired, which was created while we were executing the tests."
msgstr "`v-userpass-mydbrole-N2ITbBXxoqMQ3A3cZL88-1587558572` 、テストを実行している間に作成された期限切れのものです。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:325
#, fuzzy
msgid "`v-userpass-mydbrole-HeOMJCmy9coEnO2my2AR-1587558588` that is valid until `12:30:53`."
msgstr "`v-userpass-mydbrole-HeOMJCmy9coEnO2my2AR-1587558588` `12:30:53` まで有効です。"

#. type: Plain text
#: upstream/_guides/vault-datasource.adoc:328
#, fuzzy
msgid "As expected, users have been created dynamically by Vault, with expiration dates, allowing a rotation to occur, without breaking existing connections, allowing a greater level of security than the traditional _password_ based approaches."
msgstr "予想通り、ユーザーは、既存の接続を壊すことなく、回転が発生することを可能にする、有効期限付きのVaultによって動的に作成されている、従来の _パスワード_ ベースのアプローチよりもセキュリティーの高いレベルを可能にします。"
