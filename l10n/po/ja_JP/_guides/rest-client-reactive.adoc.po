# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-02-04 01:50+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/rest-client-reactive.adoc:6
#, fuzzy, no-wrap
msgid "Using the REST Client Reactive"
msgstr "RESTクライアントの使用 Reactive"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:12
#, fuzzy
msgid "This guide explains how to use the REST Client Reactive in order to interact with REST APIs.  REST Client Reactive is a non-blocking counterpart of the RESTEasy REST Client."
msgstr "このガイドでは、REST APIと対話するためにREST Client Reactiveを使用する方法を説明します。REST Client Reactiveは、RESTEasy REST Clientのノンブロッキング・カウンターパートです。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:15
#, fuzzy
msgid "If your application uses a client and exposes REST endpoints, please use xref:resteasy-reactive.adoc[RESTEasy Reactive] for the server part."
msgstr "クライアントを使用し、RESTエンドポイントを公開するアプリケーションの場合は、サーバー部分に link:resteasy-reactive.html[RESTEasy Reactive]をご利用ください。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:16
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:19
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:21
#, fuzzy
msgid "less than 15 minutes"
msgstr "15分未満"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:22
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:23
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:24
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:25
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:29
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:31
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:33
#, fuzzy
msgid "The solution is located in the `rest-client-reactive-quickstart` {quickstarts-tree-url}/rest-client-reactive-quickstart[directory]."
msgstr "このソリューションは、 `rest-client-reactive-quickstart` {quickstarts-tree-url}/rest-client-reactive-quickstart[directory]にあります。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:34
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:37
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:47
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=rest-client-reactive-quickstart \\\n"
"    -DclassName=\"org.acme.rest.client.ExtensionsResource\" \\\n"
"    -Dpath=\"/extension\" \\\n"
"    -Dextensions=\"resteasy-reactive-jackson,rest-client-reactive-jackson\"\n"
"cd rest-client-reactive-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:50
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr "このコマンドは、REST エンドポイントを持つ Maven プロジェクトを生成し、 `rest-client` と `resteasy-jackson` のエクステンションをインポートします。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:52
#, fuzzy
msgid "the `resteasy-reactive-jackson` extension for the REST server support. Use `resteasy-reactive` instead if you do not wish to use Jackson;"
msgstr "は、REST サーバーをサポートする `resteasy-reactive-jackson` エクステンションです。Jackson を使用したくない場合は、代わりに `resteasy-reactive` を使用してください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:53
#, fuzzy
msgid "the `rest-client-reactive-jackson` extension for the REST client support. Use `rest-client-reactive` instead if you do not wish to use Jackson"
msgstr "RESTクライアントのサポートには、 `rest-client-reactive-jackson` エクステンションが必要です。Jackson を使用したくない場合は、代わりに `rest-client-reactive` を使用してください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:56
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `rest-client-reactive-jackson` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリで以下のコマンドを実行することで、 `rest-client-reactive-jackson` エクステンションをプロジェクトに追加することができます。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:60
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"rest-client-reactive-jackson\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:63
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:70
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-reactive-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:72
#, no-wrap
msgid "Setting up the model"
msgstr "モデルの設定"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:76
#, fuzzy
msgid "In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.  Our first order of business is to set up the model we will be using, in the form of a `Extension` POJO."
msgstr "このガイドでは、 link:https://stage.code.quarkus.io[stage.code.quarkus.io]サービスが提供するREST APIの一部を利用する方法を紹介します。まず最初に、使用するモデルを `Extension` POJO の形でセットアップします。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:78
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr "`src/main/java/org/acme/rest/client/Extension.java` ファイルを作成し、以下の内容を設定します。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:82
#: upstream/_guides/rest-client-reactive.adoc:104
#: upstream/_guides/rest-client-reactive.adoc:152
#: upstream/_guides/rest-client-reactive.adoc:214
#: upstream/_guides/rest-client-reactive.adoc:254
#: upstream/_guides/rest-client-reactive.adoc:272
#: upstream/_guides/rest-client-reactive.adoc:311
#: upstream/_guides/rest-client-reactive.adoc:352
#: upstream/_guides/rest-client-reactive.adoc:378
#: upstream/_guides/rest-client-reactive.adoc:436
#: upstream/_guides/rest-client-reactive.adoc:463
#: upstream/_guides/rest-client-reactive.adoc:528
#: upstream/_guides/rest-client-reactive.adoc:571
#: upstream/_guides/rest-client-reactive.adoc:606
#, no-wrap
msgid "package org.acme.rest.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:84
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:86
#, no-wrap
msgid "public class Extension {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:91
#, no-wrap
msgid ""
"    public String id;\n"
"    public String name;\n"
"    public String shortName;\n"
"    public List<String> keywords;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:93
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:96
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr "上記のモデルは、サービスによって提供されるフィールドのサブセットに過ぎませんが、このガイドの目的には十分です。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:97
#, no-wrap
msgid "Create the interface"
msgstr "インターフェースの作成"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:100
#, fuzzy
msgid "Using the REST Client Reactive is as simple as creating an interface using the proper JAX-RS and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr "RESTクライアントReactiveを使用するには、適切なJAX-RSとMicroProfileアノテーションを使用してインターフェイスを作成するだけです。今回のケースでは、インターフェイスは `src/main/java/org/acme/rest/client/ExtensionsService.java` で作成し、以下のような内容にします。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:106
#: upstream/_guides/rest-client-reactive.adoc:154
#: upstream/_guides/rest-client-reactive.adoc:354
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:111
#: upstream/_guides/rest-client-reactive.adoc:259
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:115
#: upstream/_guides/rest-client-reactive.adoc:164
#: upstream/_guides/rest-client-reactive.adoc:692
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:119
#: upstream/_guides/rest-client-reactive.adoc:266
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:122
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr "`getById` メソッドは、私たちのコードに、Code Quarkus API からidを指定してエクステンションを問い合わせる機能を与えます。クライアントがすべてのネットワーキングとマーシャリングを処理してくれるので、このような技術的な詳細は一切ありません。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:124
msgid "The purpose of the annotations in the code above is the following:"
msgstr "上のコードのアノテーションの目的は以下の通りです。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:127
msgid "`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for CDI injection as a REST Client"
msgstr "`@RegisterRestClient` により、Quarkusは、このインターフェイスがRESTクライアントとしてCDIインジェクションに利用可能であることを知ることができます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:128
msgid "`@Path`, `@GET` and `@PathParam` are the standard JAX-RS annotations used to define how to access the service"
msgstr "`@Path` 、 `@GET` 、 `@PathParam` は、サービスへのアクセス方法を定義するために使用される標準的な JAX-RS アノテーションです。"

#. type: delimited block =
#: upstream/_guides/rest-client-reactive.adoc:133
#, fuzzy
msgid "When the `quarkus-rest-client-reactive-jackson` extension is installed, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations."
msgstr "`quarkus-rest-client-reactive-jackson` エクステンションがインストールされている場合、 `@Produces` または `@Consumes` アノテーションによってメディアタイプが明示的に設定されていない限り、Quarkusはほとんどの戻り値に対してデフォルトで `application/json` メディアタイプを使用します。"

#. type: delimited block =
#: upstream/_guides/rest-client-reactive.adoc:136
msgid "If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.  It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr "JSON のデフォルトに頼らない場合は、エンドポイントに `@Produces` や `@Consumes` のアノテーションを付けて、期待されるコンテンツタイプを正確に定義することを強くお勧めします。これにより、ネイティブ実行可能ファイルに含まれる JAX-RS プロバイダ (コンバータとみなすことができます) の数を絞り込むことができます。"

#. type: delimited block =
#: upstream/_guides/rest-client-reactive.adoc:142
#, fuzzy
msgid "The `getById` method above is a blocking call. It should not be invoked on the event loop.  The <<async-support>> section describes how to make non-blocking calls."
msgstr "上記の `getById` メソッドは、ブロッキングコールです。イベントループ上で呼び出してはいけません。 link:#async-support[async-support]]では、ノンブロッキングコールの作り方を説明しています。"

#. type: Title ===
#: upstream/_guides/rest-client-reactive.adoc:144
#, no-wrap
msgid "Path Parameters"
msgstr "パスパラメーター"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:148
#, fuzzy
msgid "If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of (or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in the example below."
msgstr "GETリクエストにパスパラメーターが必要な場合は、 `@QueryParam` の代わりに（または追加で）、 `@PathParam(\"parameter-name\")` アノテーションを利用することができます。以下の例のように、パスパラメータとクエリパラメータを必要に応じて組み合わせることができます。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:160
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:169
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/stream/{stream}\")\n"
"    Set<Extension> getByStream(@PathParam(\"stream\") String stream, @QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:172
#, no-wrap
msgid "Create the configuration"
msgstr "コンフィグレーションの作成"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:176
msgid "In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.  The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr "REST 呼び出しが行われるベース URL を決定するために、REST クライアントは `application.properties` からの設定を使用します。プロパティーの名前は、以下のコードで表示される特定の規則に従う必要があります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:181
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".url=https://stage.code.quarkus.io/api # // <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:185
#, fuzzy
msgid "Having this configuration means that all requests performed using `org.acme.rest.client.ExtensionsService` will use `https://stage.code.quarkus.io/api` as the base URL.  Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client-reactive` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client-reactive`."
msgstr "この設定を行うと、 `org.acme.rest.client.ExtensionsService` を使用して実行されるすべてのリクエストは、ベースURLとして `&lt;a href=\"https://stage.code.quarkus.io/api\" class=\"bare\"&gt;https://stage.code.quarkus.io/api&lt;/a&gt;`をベースURLとして使用することになります。上記の構成で、 `ExtensionsService` の `getById` メソッドを `io.quarkus:quarkus-rest-client-reactive` の値で呼び出すと、次のような HTTP GET リクエストになります。 `&lt;a href=\"https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client-reactive\" class=\"bare\"&gt;https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client-reactive&lt;/a&gt;`."

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:187
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr "`org.acme.rest.client.ExtensionsService` は、前のセクションで作成した`ExtensionsService` インターフェイスの完全修飾名と _一致しなければならない_ ことに注意してください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:189
#, fuzzy
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use different configuration root than the fully qualified name of your interface."
msgstr "設定を容易にするために、 `@RegisterRestClient` `configKey` プロパティを使用すると、インターフェイスの完全修飾名とは異なる設定ルートを使用することができます。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:197
#, no-wrap
msgid ""
"@RegisterRestClient(configKey=\"extensions-api\")\n"
"public interface ExtensionsService {\n"
"    [...]\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:204
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.extensions-api.url=https://stage.code.quarkus.io/api\n"
"quarkus.rest-client.extensions-api.scope=javax.inject.Singleton\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:206
#, fuzzy, no-wrap
msgid "Update the JAX-RS resource"
msgstr "テストの更新"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:209
#: upstream/_guides/rest-client-reactive.adoc:374
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr "`src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを開き、以下の内容で更新してください。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:217
#: upstream/_guides/rest-client-reactive.adoc:381
#, no-wrap
msgid ""
"import io.smallrye.common.annotation.Blocking;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:221
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:224
#: upstream/_guides/rest-client-reactive.adoc:285
#: upstream/_guides/rest-client-reactive.adoc:389
#: upstream/_guides/rest-client-reactive.adoc:475
#, no-wrap
msgid ""
"@Path(\"/extension\")\n"
"public class ExtensionsResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:227
#, no-wrap
msgid ""
"    @RestClient // <1>\n"
"    ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:236
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    @Blocking // <2>\n"
"    public Set<Extension> id(String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:239
#, fuzzy
msgid "There are two interesting parts in this listing:"
msgstr "このリストには2つの興味深い部分があります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:241
#, fuzzy
msgid "the client stub is injected with the `@RestClient` annotation instead of the usual CDI `@Inject`"
msgstr "クライアントスタブは、通常のCDIではなく、 `@RestClient` アノテーションで注入されます。 `@Inject`"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:242
#, fuzzy
msgid "the call we are making with the client is blocking, hence we need the `@Blocking` annotation on the REST endpoint"
msgstr "そのため、RESTエンドポイントに `@Blocking` アノテーションが必要です。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:243
#, fuzzy, no-wrap
msgid "Programmatic client creation with RestClientBuilder"
msgstr "RestClientBuilderによるプログラム的なクライアント作成"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:248
#, fuzzy
msgid "Instead of annotating the client with `@RegisterRestClient`, and injecting a client with `@RestClient`, you can also create REST Client programmatically.  You do that with `RestClientBuilder`."
msgstr "`@RegisterRestClient` でクライアントをアノテーションし、 `@RestClient` でクライアントをインジェクションする代わりに、プログラムでRESTクライアントを作成することもできます。それには `RestClientBuilder` を使用します。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:250
#, fuzzy
msgid "With this approach the client interface could look as follows:"
msgstr "この方法では、クライアントのインターフェースは次のようになります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:262
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:269
#, fuzzy
msgid "And the service as follows:"
msgstr "そして、以下のようなサービス。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:276
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import org.eclipse.microprofile.rest.client.RestClientBuilder;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:282
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.net.URI;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:287
#, no-wrap
msgid "    private final ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:293
#, no-wrap
msgid ""
"    public ExtensionsResource() {\n"
"        extensionsService = RestClientBuilder.newBuilder()\n"
"            .baseUri(URI.create(\"https://stage.code.quarkus.io/api\"))\n"
"            .build(ExtensionsService.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:300
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:302
#, no-wrap
msgid "Update the test"
msgstr "テストの更新"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:306
#, fuzzy
msgid "Next, we need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the test to:"
msgstr "次に、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。 `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` ファイルを編集して、テストの内容を次のように変更します。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:313
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:315
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:320
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.hasItem;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
"import static org.hamcrest.Matchers.greaterThan;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:323
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class ExtensionsResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:337
#, no-wrap
msgid ""
"    @Test\n"
"    public void testExtensionsIdEndpoint() {\n"
"        given()\n"
"            .when().get(\"/extension/id/io.quarkus:quarkus-rest-client-reactive\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            .body(\"$.size()\", is(1),\n"
"                \"[0].id\", is(\"io.quarkus:quarkus-rest-client-reactive\"),\n"
"                \"[0].name\", is(\"REST Client Reactive\"),\n"
"                \"[0].keywords.size()\", greaterThan(1),\n"
"                \"[0].keywords\", hasItem(\"rest-client\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:340
msgid "The code above uses link:http://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr "上のコードでは、 link:http://rest-assured.io/[REST Assured] の link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] 機能を使用しています。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:343
#, no-wrap
msgid "Async Support"
msgstr "非同期サポート"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:348
#, fuzzy
msgid "To get the full power of the reactive nature of the client, you can use the non-blocking flavor of REST Client Reactive extension, which comes with support for `CompletionStage` and `Uni`.  Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr "クライアントのリアクティブ性を最大限に活用するには、ノンブロッキング仕様のREST Client Reactive extensionを使用するとよいでしょう。これには、 `CompletionStage` と `Uni` のサポートが含まれます。 `ExtensionsService` REST インターフェースに `getByIdAsync` メソッドを追加して、実際に動作させてみましょう。コードは以下のようになります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:360
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:364
#: upstream/_guides/rest-client-reactive.adoc:450
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient(configKey = \"extensions-api\")\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:367
#: upstream/_guides/rest-client-reactive.adoc:645
#: upstream/_guides/rest-client-reactive.adoc:695
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam(\"id\") String id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:371
#: upstream/_guides/rest-client-reactive.adoc:649
#, no-wrap
msgid ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:386
#: upstream/_guides/rest-client-reactive.adoc:472
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:392
#: upstream/_guides/rest-client-reactive.adoc:478
#, no-wrap
msgid ""
"    @RestClient\n"
"    ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:400
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    @Blocking\n"
"    public Set<Extension> id(String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:407
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-async/{id}\")\n"
"    public CompletionStage<Set<Extension>> idAsync(String id) {\n"
"        return extensionsService.getByIdAsync(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:412
#, fuzzy
msgid "Please note that since the invocation is now non-blocking, we don't need the `@Blocking` annotation anymore on the endpoint.  This means that the `idAsync` method will be invoked on the event loop, i.e. will not get offloaded to a worker pool thread and thus reducing hardware resource utilization."
msgstr "呼び出しがノンブロッキングになったことで、エンドポイントに `@Blocking` アノテーションが不要になったことに注意してください。つまり、 `idAsync` メソッドはイベントループ上で呼び出され、ワーカープールスレッドにオフロードされないため、ハードウェアリソースの使用率を下げることができます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:415
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr "非同期メソッドをテストするには、`ExtensionsResourceTest` に以下のテストメソッドを追加します。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:429
#, no-wrap
msgid ""
"@Test\n"
"public void testExtensionIdAsyncEndpoint() {\n"
"    given()\n"
"        .when().get(\"/extension/id-async/io.quarkus:quarkus-rest-client-reactive\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(\"$.size()\", is(1),\n"
"            \"[0].id\", is(\"io.quarkus:quarkus-rest-client-reactive\"),\n"
"            \"[0].name\", is(\"REST Client Reactive\"),\n"
"            \"[0].keywords.size()\", greaterThan(1),\n"
"            \"[0].keywords\", hasItem(\"rest-client\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:432
msgid "The `Uni` version is very similar:"
msgstr "`Uni` 版は非常に似ています。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:439
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:446
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:452
#: upstream/_guides/rest-client-reactive.adoc:481
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:456
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<Set<Extension>> getByIdAsUni(@QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:459
msgid "The `ExtensionsResource` becomes:"
msgstr "`ExtensionsResource` は次のようになります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:467
#, no-wrap
msgid ""
"import io.smallrye.common.annotation.Blocking;\n"
"import io.smallrye.mutiny.Uni;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:488
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-uni/{id}\")\n"
"    public Uni<Set<Extension>> idUni(String id) {\n"
"        return extensionsService.getByIdAsUni(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/rest-client-reactive.adoc:491
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_guides/rest-client-reactive.adoc:495
msgid "The previous snippet uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前のスニペットでは、Mutinyのリアクティブ型を使用していますが、もし慣れていない場合は、まず xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] を読んでください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:499
msgid "When returning a `Uni`, every _subscription_ invokes the remote service.  It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr "`Uni` を返すとき、すべての _サブスクリプション_ は 、リモートサービスを呼び出します。つまり、 `Uni` で再購読してリクエストを再送信するか、以下のように `retry` を使用することができます。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:504
#, no-wrap
msgid "@RestClient ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:506
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:509
#, no-wrap
msgid ""
"extensionsService.getByIdAsUni(id)\n"
"    .onFailure().retry().atMost(10);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:514
msgid "If you use a `CompletionStage`, you would need to call the service's method to retry.  This difference comes from the laziness aspect of Mutiny and its subscription protocol.  More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation]."
msgstr "`CompletionStage` を使用する場合は、サービスのメソッドを呼び出して再試行する必要があります。この違いは、Mutinyとそのサブスクリプションプロトコルの lazy 性の側面から来ています。これについての詳細は Mutiny の link:https://smallrye.io/smallrye-mutiny/#_uni_and_multi[ドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:515
#, no-wrap
msgid "Custom headers support"
msgstr "カスタムヘッダーのサポート"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:518
#, fuzzy
msgid "There are a few ways in which you can specify custom headers for your REST calls:"
msgstr "RESTコールにカスタムヘッダーを指定するにはいくつかの方法があります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:520
#, fuzzy
msgid "by registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `@RegisterClientHeaders` annotation"
msgstr "`ClientHeadersFactory` または `ReactiveClientHeadersFactory` を `@RegisterClientHeaders` のアノテーションで登録することにより"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:521
#, fuzzy
msgid "by specifying the value of the header with `@ClientHeaderParam`"
msgstr "でヘッダーの値を指定することで `@ClientHeaderParam`"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:522
#, fuzzy
msgid "by specifying the value of the header by `@HeaderParam`"
msgstr "でヘッダーの値を指定することで `@HeaderParam`"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:524
#, fuzzy
msgid "The code below demonstrates how to use each of these techniques:"
msgstr "以下のコードでは、それぞれのテクニックの使い方を紹介しています。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:533
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import org.eclipse.microprofile.rest.client.annotation.ClientHeaderParam;\n"
"import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:540
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.HeaderParam;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:547
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders(RequestUUIDHeaderFactory.class) // <1>\n"
"@ClientHeaderParam(name = \"my-header\", value = \"constant-header-value\") // <2>\n"
"@ClientHeaderParam(name = \"computed-header\", value = \"{org.acme.rest.client.Util.computeHeader}\") // <3>\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:552
#, no-wrap
msgid ""
"    @GET\n"
"    @ClientHeaderParam(name = \"header-from-properties\", value = \"${header.value}\") // <4>\n"
"    Set<Extension> getById(@QueryParam(\"id\") String id, @HeaderParam(\"jaxrs-style-header\") String headerValue); // <5>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:555
#, fuzzy
msgid "There can be only one `ClientHeadersFactory` per class. With it, you can not only add custom headers, but you can also transform existing ones. See the `RequestUUIDHeaderFactory` class below for an example of the factory."
msgstr "`ClientHeadersFactory` は、1つのクラスにつき1つだけです。これを使うと、カスタムヘッダーを追加できるだけでなく、既存のヘッダーを変換することもできます。ファクトリーの例として、以下の `RequestUUIDHeaderFactory` クラスをご覧ください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:556
#, fuzzy
msgid "`@ClientHeaderParam` can be used on the client interface and on methods. It can specify a constant header value..."
msgstr "`@ClientHeaderParam` は、クライアントインターフェイスやメソッドで使用できます。定数のヘッダー値を指定することができます..."

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:557
#, fuzzy
msgid "... and a name of a method that should compute the value of the header. It can either be a static method or a default method in this interface"
msgstr "<li> <p>と、ヘッダの値を計算するメソッドの名前を指定します。これは、このインターフェースのスタティック・メソッドまたはデフォルト・メソッドのいずれかです。</p> </li>"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:558
#, fuzzy
msgid "... as well as a value from your application's configuration"
msgstr "<li> <p>と、アプリケーションの設定値である</p> </li>"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:559
#, fuzzy
msgid "... or as a normal JAX-RS `@HeaderParam` annotated argument"
msgstr "<li> <p>または、通常のJAX-RS `@HeaderParam` アノテーションされた引数として</p> </li>"

#. type: delimited block =
#: upstream/_guides/rest-client-reactive.adoc:564
#, fuzzy
msgid "When using Kotlin, if default methods are going to be leveraged, then the Kotlin compiler needs to be configured to use Java's default interface capabilities.  See link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[this] for more details."
msgstr "Kotlinを使用する場合、デフォルトのメソッドを活用するのであれば、Javaのデフォルトのインターフェース機能を使用するようにKotlinのコンパイラを設定する必要があります。詳しくは link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[こちら]をご覧ください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:567
#, fuzzy
msgid "A `ClientHeadersFactory` can look as follows:"
msgstr "`ClientHeadersFactory` は以下のようになります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:573
#: upstream/_guides/rest-client-reactive.adoc:608
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:578
#: upstream/_guides/rest-client-reactive.adoc:613
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.core.MultivaluedHashMap;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:581
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:589
#, no-wrap
msgid ""
"    @Override\n"
"    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders, MultivaluedMap<String, String> clientOutgoingHeaders) {\n"
"        MultivaluedMap<String, String> result = new MultivaluedHashMap<>();\n"
"        result.add(\"X-request-uuid\", UUID.randomUUID().toString());\n"
"        return result;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:593
msgid "As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr "上の例のように、 `@Singleton`, `@ApplicationScoped` などのスコープを定義するアノテーションを付けることで、 `ClientHeadersFactory` の実装をCDI Beanにすることができます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:595
#, fuzzy
msgid "To specify a value for `${header.value}`, simply put the following in your `application.properties`:"
msgstr "`${header.value}` の値を指定するには、次のように `application.properties` に記述するだけです。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:599
#, no-wrap
msgid "header.value=value of the header\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:602
#, fuzzy
msgid "Also, there is a reactive flavor of `ClientHeadersFactory` that allows doing blocking operations. For example:"
msgstr "また、 `ClientHeadersFactory` には、ブロッキング操作を可能にするリアクティブなフレーバーがあります。例えば、以下のようなものです。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:616
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GetTokenReactiveClientHeadersFactory extends ReactiveClientHeadersFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:619
#, no-wrap
msgid ""
"    @Inject\n"
"    Service service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:630
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<MultivaluedMap<String, String>> getHeaders(MultivaluedMap<String, String> incomingHeaders) {\n"
"        return Uni.createFrom().item(() -> {\n"
"            MultivaluedHashMap<String, String> newHeaders = new MultivaluedHashMap<>();\n"
"            // perform blocking call\n"
"            newHeaders.add(HEADER_NAME, service.getToken());\n"
"            return newHeaders;\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/rest-client-reactive.adoc:632
#, no-wrap
msgid "Default header factory"
msgstr "デフォルトのヘッダーファクトリー"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:636
#, fuzzy
msgid "The `@RegisterClientHeaders` annotation can also be used without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used.  If you make a REST client call from a REST resource, this factory will propagate all the headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property from the resource request to the client request. Individual header names are comma-separated."
msgstr "`@RegisterClientHeaders` アノテーションは、カスタムファクトリーを指定せずに使用することもできます。その場合は、 `DefaultClientHeadersFactoryImpl` のファクトリーが使用されます。RESTリソースからRESTクライアントコールを行うと、このファクトリーは、 `org.eclipse.microprofile.rest.client.propagateHeaders` 構成プロパティにリストされているすべてのヘッダーをリソースリクエストからクライアントリクエストに伝搬します。個々のヘッダー名はコンマで区切られています。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:642
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:654
#, no-wrap
msgid "org.eclipse.microprofile.rest.client.propagateHeaders=Authorization,Proxy-Authorization\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:656
#, fuzzy, no-wrap
msgid "Exception handling"
msgstr "例外処理"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:659
#, fuzzy
msgid "The MicroProfile REST Client specification introduces the `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` whose purpose is to convert an HTTP response to an exception."
msgstr "MicroProfile REST Client 仕様では、HTTP レスポンスを例外に変換することを目的とした `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` を導入しています。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:661
#, fuzzy
msgid "A simple example of implementing such a `ResponseExceptionMapper` for the `ExtensionsService` discussed above, could be:"
msgstr "上述した `ExtensionsService` のために、このような `ResponseExceptionMapper` を実装する簡単な例があります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:665
#, no-wrap
msgid "public interface MyResponseExceptionMapper implements ResponseExceptionMapper<RuntimeException> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:673
#, no-wrap
msgid ""
"    RuntimeException toThrowable(Response response) {\n"
"        if (response.getStatus() == 500) {\n"
"            throw new RuntimeException(\"The remote service responded with HTTP 500\");\n"
"        }\n"
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:677
#, fuzzy
msgid "`ResponseExceptionMapper` also defines the `getPriority` method which is used in order to determine the priority with which `ResponseExceptionMapper` implementations will be called (implementations with a lower value for `getPriority` will be invoked first).  If `toThrowable` returns an exception, then that exception will be thrown. If `null` is returned, the next implementation of `ResponseExceptionMapper` in the chain will be called (if there is any)."
msgstr "`ResponseExceptionMapper` では、 `ResponseExceptionMapper` の実装が呼び出される際の優先順位を決定するために使用される `getPriority` メソッドも定義しています（ `getPriority` の値が低い実装が最初に呼び出されます）。 `toThrowable` が例外を返した場合は、その例外がスローされます。 `null` が返された場合は、チェーンにある `ResponseExceptionMapper` の次の実装が呼び出されます (もしあれば)。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:680
#, fuzzy
msgid "The class as written above, would not be automatically be used by any REST Client. To make it available to every REST Client of the application, the class needs to be annotated with `@Provider` (as long as `quarkus.rest-client-reactive.provider-autodiscovery` is not set to `false`).  Alternatively, if the exception handling class should only apply to specific REST Client interfaces, you can either annotate the interfaces with `@RegisterProvider(MyResponseExceptionMapper.class)`, or register it using configuration using the `providers` property of the proper `quarkus.rest-client` configuration group."
msgstr "上記のように書かれたクラスは、どのRESTクライアントからも自動的に使用されることはありません。アプリケーションのすべての REST クライアントが利用できるようにするには、クラスに `@Provider` をアノテートする必要があります (ただし、 `quarkus.rest-client-reactive.provider-autodiscovery` が `false` に設定されていない場合に限ります)。また、例外処理クラスを特定の REST クライアントのインターフェイスにのみ適用する場合は、インターフェイスに `@RegisterProvider(MyResponseExceptionMapper.class)` をアノテートするか、適切な `quarkus.rest-client` 構成グループの `providers` プロパティを使用して構成を使用して登録することができます。"

#. type: Title ===
#: upstream/_guides/rest-client-reactive.adoc:681
#, fuzzy, no-wrap
msgid "Using @ClientExceptionMapper"
msgstr "@ClientExceptionMapperの使用"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:684
#, fuzzy
msgid "A simpler way to convert HTTP response codes of 400 or above is to use the `@ClientExceptionMapper` annotation."
msgstr "400以上のHTTPレスポンスコードを変換するより簡単な方法は、 `@ClientExceptionMapper` アノテーションを使用することです。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:686
#, fuzzy
msgid "For the `ExtensionsService` REST Client interface defined above, an example use of `@ClientExceptionMapper` would be:"
msgstr "上で定義した `ExtensionsService` REST Client インターフェイスの場合、 `@ClientExceptionMapper` の使用例は次のようになります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:698
#, no-wrap
msgid ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam(\"id\") String id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:707
#, no-wrap
msgid ""
"    @ClientExceptionMapper\n"
"    static RuntimeException toException(Response response) {\n"
"        if (response.getStatus() == 500) {\n"
"            throw new RuntimeException(\"The remote service responded with HTTP 500\");\n"
"        }\n"
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:710
#, fuzzy
msgid "Naturally this handling is per REST Client. `@ClientExceptionMapper` uses the default priority if the `priority` attribute is not set and the normal rules of invoking all handlers in turn apply."
msgstr "`priority` 属性が設定されていない場合、 `@ClientExceptionMapper` はデフォルトの優先順位を使用し、すべてのハンドラーを順番に呼び出す通常のルールが適用されます。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:711
#, fuzzy, no-wrap
msgid "Multipart Form support"
msgstr "マルチパートフォーム対応"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:714
#, fuzzy
msgid "REST Client Reactive support multipart messages."
msgstr "RESTクライアントReactiveは、マルチパートメッセージをサポートしています。"

#. type: Title ===
#: upstream/_guides/rest-client-reactive.adoc:715
#, fuzzy, no-wrap
msgid "Sending Multipart messages"
msgstr "マルチパートメッセージの送信"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:719
#, fuzzy
msgid "REST Client Reactive allows sending data as multipart forms. This way you can for example send files efficiently."
msgstr "REST Client Reactiveでは、データをマルチパート形式で送信することができます。これにより、例えばファイルを効率的に送信することができます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:722
#, fuzzy
msgid "To send data as a multipart form, you need to create a class that would encapsulate all the fields to be sent, e.g."
msgstr "マルチパートフォームとしてデータを送信するには、送信するすべてのフィールドをカプセル化したクラスを作成する必要があります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:729
#, no-wrap
msgid ""
"public class FormDto {\n"
"    @FormParam(\"file\")\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public File file;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:734
#, no-wrap
msgid ""
"    @FormParam(\"otherField\")\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String textProperty;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:737
#, fuzzy
msgid "The method that sends a form needs to specify multipart form data as the consumed media type, e.g."
msgstr "フォームを送信するメソッドでは、消費されるメディアタイプとしてマルチパートのフォームデータを指定する必要があります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:744
#, no-wrap
msgid ""
"    @POST\n"
"    @Consumes(MediaType.MULTIPART_FORM_DATA)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/binary\")\n"
"    String sendMultipart(@MultipartForm FormDto data);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:749
#, fuzzy
msgid "Fields specified as `File`, `Path`, `byte[]` or `Buffer` are sent as files; as binary files for `@PartType(MediaType.APPLICATION_OCTET_STREAM)`, as text files for other content types.  Other fields are sent as form attributes."
msgstr "`File`, `Path`, `byte[]` or `Buffer` として指定されたフィールドは、ファイルとして送信されます。 `@PartType(MediaType.APPLICATION_OCTET_STREAM)` ではバイナリファイルとして、その他のコンテンツタイプではテキストファイルとして送信されます。その他のフィールドは、フォームの属性として送信されます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:759
#, fuzzy
msgid "There are a few modes in which the form data can be encoded. By default, Rest Client Reactive uses RFC1738.  You can override it by specifying the mode either on the client level, by setting `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder property to the selected value of `HttpPostRequestEncoder.EncoderMode` or by specifying `quarkus.rest-client.multipart-post-encoder-mode` in your `application.properties`. Please note that the latter works only for clients created with the `@RegisterRestClient` annotation.  All the available modes are described in the link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation]"
msgstr "フォームデータのエンコードには、いくつかのモードがあります。デフォルトでは、Rest Client ReactiveはRFC1738を使用します。クライアントレベルで、 `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilderプロパティを `HttpPostRequestEncoder.EncoderMode` の選択された値に設定するか、 `application.properties` で `quarkus.rest-client.multipart-post-encoder-mode` を指定することにより、モードを指定して、上書きすることができます。後者は、 `@RegisterRestClient` アノテーションで作成されたクライアントに対してのみ動作することに注意してください。すべての利用可能なモードは、 link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Nettyのドキュメント]で説明されています。"

#. type: Title ===
#: upstream/_guides/rest-client-reactive.adoc:760
#, fuzzy, no-wrap
msgid "Receiving Multipart Messages"
msgstr "マルチパートメッセージの受信"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:763
#, fuzzy
msgid "REST Client Reactive also supports receiving multipart messages.  As with sending, to parse a multipart response, you need to create a class that describes the response data, e.g."
msgstr "REST Client Reactiveは、マルチパートメッセージの受信もサポートしています。送信と同様に、マルチパートレスポンスを解析するには、レスポンスデータを記述するクラスを作成する必要があります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:770
#, no-wrap
msgid ""
"public class FormDto {\n"
"    @RestForm // <1>\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public File file;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:775
#, no-wrap
msgid ""
"    @FormParam(\"otherField\") // <2>\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String textProperty;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:777
#, fuzzy
msgid "uses the shorthand `@RestForm` annotation to make a field as a part of a multipart form"
msgstr "は、速記法である `@RestForm` アノテーションを使用して、マルチパートフォームの一部としてフィールドを"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:778
#, fuzzy
msgid "the standard `@FormParam` can also be used. It allows to override the name of the multipart part."
msgstr "標準の `@FormParam` を使用することもできます。これにより、マルチパートの名前を上書きすることができます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:780
#, fuzzy
msgid "Then, create an interface method that corresponds to the call and make it return the `FormDto`:"
msgstr "そして、呼び出しに対応するインターフェイスのメソッドを作成し、 `FormDto` を返すようにします。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:786
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.MULTIPART_FORM_DATA)\n"
"    @Path(\"/get-file\")\n"
"    FormDto data sendMultipart();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:789
#, fuzzy
msgid "At the moment, multipart response support is subject to the following limitations:"
msgstr "現時点では、マルチパートレスポンスのサポートには以下の制限があります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:791
#, fuzzy
msgid "files sent in multipart responses can only be parsed to `File`, `Path` and `FileDownload`"
msgstr "マルチパート応答で送信されたファイルは、 `File`, `Path`, にのみ解析されます。 `FileDownload`"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:792
#, fuzzy
msgid "each field of the response type has to be annotated with `@PartType` - fields without this annotation are ignored"
msgstr "レスポンスタイプの各フィールドには、 `@PartType` のアノテーションが必要です - このアノテーションがないフィールドは無視されます"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:794
#, fuzzy
msgid "REST Client Reactive needs to know the classes used as multipart return types upfront. If you have an interface method that produces `multipart/form-data`, the return type will be discovered automatically. However, if you intend to use the `ClientBuilder` API to parse a response as multipart, you need to annotate your DTO class with `@MultipartForm`."
msgstr "RESTクライアントReactiveは、マルチパートの戻り値の型として使用されるクラスを前もって知る必要があります。 `multipart/form-data` を生成するインターフェイスのメソッドがあれば、そのリターンタイプは自動的に発見されます。しかし、 `ClientBuilder` APIを使用してレスポンスをマルチパートとして解析しようとする場合は、DTOクラスに `@MultipartForm` をアノテートする必要があります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:796
#, fuzzy
msgid "The files you download are not automatically removed and can take up a lot of disk space. Consider removing the files when you are done working with them."
msgstr "ダウンロードしたファイルは自動的に削除されないため、多くのディスクスペースを占有してしまいます。作業が終わったら、ファイルの削除を検討してください。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:797
#, fuzzy, no-wrap
msgid "Proxy support"
msgstr "非同期サポート"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:800
#, fuzzy
msgid "REST Client Reactive supports sending requests through a proxy.  It honors the JVM settings for it but also allows to specify both:"
msgstr "RESTクライアント Reactiveは、プロキシ経由でのリクエスト送信をサポートしています。これは、JVMの設定を尊重しますが、両方を指定することもできます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:802
#, fuzzy
msgid "global client proxy settings, with `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`"
msgstr "グローバルクライアントのプロキシ設定で、 `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:804
#, fuzzy
msgid "per-client proxy settings, with `quarkus.rest-client.<my-client>.proxy-address`, etc. These are applied only to clients injected with CDI, that is the ones created with `@RegisterRestClient`"
msgstr "`quarkus.rest-client.<my-client>.proxy-address` などのクライアントごとのプロキシ設定。これらはCDIで注入されたクライアントにのみ適用され、つまり `@RegisterRestClient`"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:806
#, fuzzy
msgid "If `proxy-address` is set on the client level, the client uses its specific proxy settings. No proxy settings are propagated from the global configuration or JVM properties."
msgstr "`proxy-address` がクライアントレベルで設定されている場合、クライアントはその特定のプロキシ設定を使用します。グローバル構成やJVMプロパティからプロキシ設定が伝搬されることはありません。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:809
#, fuzzy
msgid "If `proxy-address` is not set for the client but is set on the global level, the client uses the global settings.  Otherwise, the client uses the JVM settings."
msgstr "`proxy-address` がクライアントに設定されておらず、グローバルレベルで設定されている場合、クライアントはグローバル設定を使用します。そうでない場合は、クライアントはJVMの設定を使用します。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:812
#, fuzzy
msgid "An example configuration for setting proxy:"
msgstr "プロキシを設定するための設定例です。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:820
#, no-wrap
msgid ""
"# global proxy configuration is used for all clients\n"
"quarkus.rest-client.proxy-address=localhost:8182\n"
"quarkus.rest-client.proxy-user=<proxy user name>\n"
"quarkus.rest-client.proxy-password=<proxy password>\n"
"quarkus.rest-client.non-proxy-hosts=example.com\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:826
#, no-wrap
msgid ""
"# per-client configuration overrides the global settings for a specific client\n"
"quarkus.rest-client.my-client.proxy-address=localhost:8183\n"
"quarkus.rest-client.my-client.proxy-user=<proxy user name>\n"
"quarkus.rest-client.my-client.proxy-password=<proxy password>\n"
"quarkus.rest-client.my-client.url=...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:829
#, fuzzy
msgid "MicroProfile REST Client specification does not allow setting proxy credentials. In order to specify proxy user and proxy password programmatically, you need to cast your `RestClientBuilder` to `RestClientBuilderImpl`."
msgstr "MicroProfile REST Client の仕様では、プロキシの認証情報を設定することができない。プログラムでプロキシユーザーとプロキシパスワードを指定するためには、 `RestClientBuilder` を `RestClientBuilderImpl` にキャストする必要があります。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:830
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:834
#, fuzzy
msgid "Run the application with: `./mvnw compile quarkus:dev`.  Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client-reactive."
msgstr "`./mvnw compile quarkus:dev` でアプリケーションを実行してください。ブラウザを開いて、 http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client-reactive 。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:836
#, fuzzy
msgid "You should see a JSON object containing some basic information about this extension."
msgstr "このエクステンションに関する基本的な情報を含むJSONオブジェクトが表示されます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:839
msgid "As usual, the application can be packaged using `./mvnw clean package` and executed using the `target/quarkus-app/quarkus-run.jar` file.  You can also generate the native executable with `./mvnw clean package -Pnative`."
msgstr "いつものように、 `./mvnw clean package` を使ってアプリケーションをパッケージ化し、 `-runner.jar` ファイルを使って実行することができます。また、 `./mvnw clean package -Pnative` でネイティブ実行可能ファイルを生成することもできます。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:840
#, fuzzy, no-wrap
msgid "Logging traffic"
msgstr "トラフィックを記録する"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:843
#, fuzzy
msgid "REST Client Reactive can log the requests it sends and the responses it receives.  To enable logging, add the `quarkus.rest-client.logging.scope` property to your `application.properties` and set it to:"
msgstr "RESTクライアントReactiveは、送信したリクエストと受信したレスポンスをログに記録することができます。 `application.properties` ロギングを有効にするには、 `quarkus.rest-client.logging.scope` プロパティを追加して設定します。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:845
#, fuzzy
msgid "`request-response` to log the request and response contents, or"
msgstr "`request-response` 、リクエストとレスポンスの内容を記録するか"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:846
#, fuzzy
msgid "`all` to also enable low level logging of the underlying libraries."
msgstr "`all` 、基礎となるライブラリの低レベルのロギングも可能になります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:848
#, fuzzy
msgid "As HTTP messages can have large bodies, we limit the amount of body characters logged. The default limit is `100`, you can change it by specifying `quarkus.rest-client.logging.body-limit`."
msgstr "HTTPメッセージは本文が大きい場合があるため、ログに記録される本文の文字数を制限しています。デフォルトの制限値は `100` ですが、 `quarkus.rest-client.logging.body-limit` を指定することで変更することができます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:850
#, fuzzy
msgid "REST Client Reactive is logging the traffic with level DEBUG and does not alter logger properties. You may need to adjust your logger configuration to use this feature."
msgstr "REST Client Reactiveは、レベルDEBUGでトラフィックを記録し、ロガーのプロパティを変更しません。この機能を使用するには、ロガーの設定を調整する必要があるかもしれません。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:852
#, fuzzy
msgid "An example logging configuration:"
msgstr "コンフィグレーションの作成"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:857
#, no-wrap
msgid ""
"quarkus.rest-client.logging.scope=request-response\n"
"quarkus.rest-client.logging.body-limit=50\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:859
#, no-wrap
msgid "quarkus.log.category.\"org.jboss.resteasy.reactive.client.logging\".level=DEBUG\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:863
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr "テストにモックHTTPサーバーを使用する"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:868
#, fuzzy
msgid "For tests, you can easily mock the HTTP server with Wiremock.  The xref:rest-client.adoc#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client] describes how to set it up in detail."
msgstr "テストのために、Wiremockを使って簡単にHTTPサーバーをモックすることができます。設定方法は、「 link:rest-client.html#using-a-mock-http-server-for-tests[Quarkus - Using the REST Client」のWiremockの項]で詳しく説明しています。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:869
#, fuzzy, no-wrap
msgid "Known limitations"
msgstr "既知の制限"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:872
#, fuzzy
msgid "While the REST Client Reactive extension aims to be a drop-in replacement for the REST Client extension, there are some differences and limitations:"
msgstr "REST Client Reactiveエクステンションは、REST Clientエクステンションを簡単に置き換えることを目的としていますが、いくつかの違いと制限があります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:875
#, fuzzy
msgid "the default scope of the client for the new extension is `@ApplicationScoped` while the `quarkus-rest-client` defaults to `@Dependent` To change this behavior, set the `quarkus.rest-client-reactive.scope` property to the fully qualified scope name."
msgstr "`@ApplicationScoped` `quarkus-rest-client` `@Dependent` この動作を変更するには、 `quarkus.rest-client-reactive.scope` プロパティに完全修飾スコープ名を設定します。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:876
#, fuzzy
msgid "it is not possible to set `HostnameVerifier` or `SSLContext`"
msgstr "を設定することはできません。 `HostnameVerifier` または `SSLContext`"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:877
#, fuzzy
msgid "a few things that don't make sense for a non-blocking implementations, such as setting the `ExecutorService`, don't work"
msgstr "`ExecutorService` の設定など、ノンブロッキング実装では意味をなさないいくつかの機能が動作しません。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:880
#, no-wrap
msgid "Further reading"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:882
#, fuzzy
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client仕様]"
