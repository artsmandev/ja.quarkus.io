# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-08-02 09:13+0000\n"
"PO-Revision-Date: 2022-09-06 11:54+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.1.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-getting-started.adoc:6
#, no-wrap
msgid "Getting Started with Quarkus Security"
msgstr "Quarkus セキュリティー入門"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:11
msgid "This guide demonstartes how you can quickly create a secure Quarkus application by using xref:security-built-in-authentication.adoc#basic-auth[Basic AuthenticationMechanism] and `JPA IdentityProvider` to create `SecurityIdentity` which is authorized by the `Role Based Access Control` (RBAC) layer before the access to application is permitted."
msgstr "このガイドでは、xref:security-built-in-authentication.adoc#basic-auth[Basic AuthenticationMechanism] と `JPA IdentityProvider` を使用して、アプリケーションへのアクセスを許可する前に `Role Based Access Control` (RBAC) レイヤーで認可される `SecurityIdentity` を作成して、セキュアな Quarkus アプリケーションを迅速に作成する方法を説明します。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:15
msgid "Using `Basic AuthenticationMechanism` with `JPA IdentityProvider` is better than configuring the users and roles in `application.properties` therefore this guide recommends to combine `Basic AuthenticationMechanism` and `JPA IdentityProvider`. We will update this recommendation to use a reactive equivalent of the `JPA IdentityProvider` as soon as it is introduced."
msgstr "`Basic AuthenticationMechanism` と `JPA IdentityProvider` の組み合わせは、`application.properties` でユーザーやロールを設定するよりも優れているため、このガイドでは `Basic AuthenticationMechanism` と `JPA IdentityProvider` を組み合わせて使用することを推奨しています。`JPA IdentityProvider` に相当するリアクティブが導入され次第、推奨内容を更新する予定です。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:18
msgid "This guide will conclude with recommending how to learn more about Quarkus Security, and in particular about its `OpenId Connect Authentication Mechanism`."
msgstr "このガイドの最後では、Quarkus セキュリティー、特にその `OpenId Connect Authentication Mechanism` についてさらに学ぶ方法を推奨しています。"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:20
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:24
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:27
msgid "In this example, we build a very simple microservice which offers three endpoints:"
msgstr "この例では、3つのエンドポイントを提供する非常にシンプルなマイクロサービスを構築します:"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:29
msgid "`/api/public`"
msgstr "`/api/public`"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:30
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:31
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:35
msgid "The `/api/public` endpoint can be accessed anonymously.  The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.  The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `user` role can access. As a response, it returns a JSON document with details about the user."
msgstr "`/api/public` エンドポイントは匿名でアクセスできます。 `/api/admin` エンドポイントは RBAC (Role-Based Access Control) で保護されており、 `admin` の役割を与えられたユーザーのみがアクセスできます。このエンドポイントでは、 `@RolesAllowed` アノテーションを使用して、アクセス制約を宣言的に強制します。 `/api/users/me` エンドポイントも RBAC (Role-Based Access Control) で保護されており、 `user` ロールで付与されたユーザーのみがアクセスできます。レスポンスとして、ユーザーに関する詳細を含むJSONドキュメントを返します。"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:36
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:40
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:42
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする: `git clone {quickstarts-clone-url}` 、または {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:44
msgid "The solution is located in the `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory]."
msgstr "ソリューションは `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[ディレクトリー] にあります。"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:45
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Maven プロジェクトの作成"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:48
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:55
msgid "This command generates a Maven project, importing the `security-jpa` extension which allows you to map your security source to JPA entities."
msgstr "このコマンドは、セキュリティー ソースを JPA エンティティーにマップできる `security-jpa` エクステンションをインポートして、Maven プロジェクトを生成します。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:59
msgid "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] is used to store your user identities but you can also use xref:hibernate-orm.adoc[Hibernate ORM]."
msgstr "ユーザー ID の保存には xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] が使用されていますが、xref:hibernate-orm.adoc[Hibernate ORM] を使用することも可能です。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:61
msgid "Don't forget to add the database connector library of choice. Here we are using PostgreSQL as identity store."
msgstr "選択したデータベースコネクタライブラリを追加することを忘れないでください。ここでは、PostgreSQLをIDストアとして使用しています。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:65
msgid "If you already have your Quarkus project configured, you can add the `security-jpa` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `security-jpa` エクステンションを追加することができます:"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:70
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_guides/security-getting-started.adoc:72
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:78
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security-jpa</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security-jpa</artifactId>\n"
"</dependency>\n"

#. type: Block title
#: upstream/_guides/security-getting-started.adoc:81
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:84
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-security-jpa\")\n"
msgstr "implementation(\"io.quarkus:quarkus-security-jpa\")\n"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:86
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:89
msgid "Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular JAX-RS resource:"
msgstr "`/api/public` エンドポイントの実装から始めましょう。以下のソースコードから分かるように、通常のJAX-RSリソースです:"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:93
#: upstream/_guides/security-getting-started.adoc:118
#: upstream/_guides/security-getting-started.adoc:143
#: upstream/_guides/security-getting-started.adoc:170
#: upstream/_guides/security-getting-started.adoc:241
#, no-wrap
msgid "package org.acme.security.jpa;\n"
msgstr "package org.acme.security.jpa;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:99
#, no-wrap
msgid ""
"import javax.annotation.security.PermitAll;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.annotation.security.PermitAll;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:102
#, no-wrap
msgid ""
"@Path(\"/api/public\")\n"
"public class PublicResource {\n"
msgstr ""
"@Path(\"/api/public\")\n"
"public class PublicResource {\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:110
#, no-wrap
msgid ""
"    @GET\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String publicResource() {\n"
"        return \"public\";\n"
"   }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String publicResource() {\n"
"        return \"public\";\n"
"   }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:113
msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
msgstr "`/api/admin` エンドポイントのソースコードも非常にシンプルです。ここでの主な違いは、 `admin` ロールで付与されたユーザーだけがエンドポイントにアクセスできるように `@RolesAllowed` アノテーションを使用していることです:"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:124
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:127
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:135
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String adminResource() {\n"
"         return \"admin\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String adminResource() {\n"
"         return \"admin\";\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:139
msgid "Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `user` role.  We are using `SecurityContext` to get access to the current authenticated Principal, and we return the user's name. This information is loaded from the database."
msgstr "最後に、 `/api/users/me` エンドポイントを考えてみましょう。下のソースコードを見ればわかるように、 `user` の役割を持つユーザのみを信頼しています。現在認証されているプリンシパルへのアクセスを得るために `SecurityContext` を使用しており、ユーザーの名前を返します。この情報はデータベースから読み込まれます。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:150
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.SecurityContext;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:153
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UserResource {\n"
msgstr ""
"@Path(\"/api/users\")\n"
"public class UserResource {\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:161
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Path(\"/me\")\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        return securityContext.getUserPrincipal().getName();\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Path(\"/me\")\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        return securityContext.getUserPrincipal().getName();\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:163
#, no-wrap
msgid "Defining our user entity"
msgstr "ユーザーエンティティーの定義"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:166
msgid "We can now describe how our security information is stored in our model by adding a few annotations to our `User` entity:"
msgstr "これで、 `User` エンティティーにいくつかのアノテーションを追加することで、セキュリティー情報がモデルにどのように保存されているかを説明することができます:"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:173
#, no-wrap
msgid ""
"import javax.persistence.Entity;\n"
"import javax.persistence.Table;\n"
msgstr ""
"import javax.persistence.Entity;\n"
"import javax.persistence.Table;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:180
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"
msgstr ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:191
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"
msgstr ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:206
#, no-wrap
msgid ""
"    /**\n"
"     * Adds a new user in the database\n"
"     * @param username the username\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"
msgstr ""
"    /**\n"
"     * Adds a new user in the database\n"
"     * @param username the username\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:210
msgid "The `security-jpa` extension is only initialized if there is a single entity annotated with `@UserDefinition`."
msgstr "`security-jpa` エクステンションは、 `@UserDefinition` でアノテーションされた単一のエンティティーがある場合にのみ初期化されます。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:212
msgid "This annotation must be present on a single entity. It can be a regular Hibernate ORM entity or a Hibernate ORM with Panache entity as in this example."
msgstr "このアノテーションは、単一のエンティティーに存在しなければなりません。この例のように、通常のHibernate ORMエンティティーまたはHibernate ORM with Panacheエンティティーにすることができます。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:213
msgid "This indicates the field used for the username."
msgstr "これは、ユーザー名に使用されるフィールドを示します。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:214
msgid "This indicates the field used for the password. This defaults to using bcrypt hashed passwords, but you can also configure it for clear text passwords or custom passwords."
msgstr "これは、パスワードに使用するフィールドを示します。これはデフォルトでは bcrypt ハッシュ化されたパスワードを使用するように設定されていますが、クリアテキストパスワードやカスタムパスワード用に設定することもできます。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:215
msgid "This indicates the comma-separated list of roles added to the target Principal representation attributes."
msgstr "これは、対象のプリンシパル表現属性に追加されたロールのコンマ区切りリストを示します。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:216
msgid "This method allows us to add users while hashing the password with the proper bcrypt hash."
msgstr "この方法では、パスワードを適切なbcryptハッシュでハッシュしながらユーザーを追加することができます。"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:217
#, no-wrap
msgid "Configuring the Application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:220
msgid "First, xref:security-built-in-authentication.adoc#basic-auth[ベーシック HTTP 認証メカニズム] has to be enabled with `quarkus.http.auth.basic=true`. In fact, you do not even have to set `quarkus.http.auth.basic=true` to enable it in this demo as `Basic HTTPAuthenticationMechanism` is used as a fallback authentication mechanism when a secure access is required and no other authentication mechanisms are enabled."
msgstr "まず、xref:security-built-in-authentication.adoc#basic-auth[ベーシック HTTP 認証メカニズム] を `quarkus.http.auth.basic=true` で有効化する必要があります。ただし、このデモでは、セキュアなアクセスが必要な場合に他の認証メカニズムが有効になっていなければ `Basic HTTPAuthenticationMechanism` が使用されるため、`quarkus.http.auth.basic=true` を設定する必要はありません。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:222
msgid "Next, configure the datasource. The `security-jpa` extension requires at least one datasource to access to your database."
msgstr "次に、データソースを設定します。`security-jpa` エクステンションは、データベースにアクセスするために少なくとも一つのデータソースを必要とします。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:226
#, no-wrap
msgid "quarkus.http.auth.basic=true\n"
msgstr "quarkus.http.auth.basic=true\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:231
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus\n"
"quarkus.datasource.password=quarkus\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:security_jpa\n"
msgstr ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus\n"
"quarkus.datasource.password=quarkus\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:security_jpa\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:233
#: upstream/_guides/security-getting-started.adoc:288
#, no-wrap
msgid "quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr "quarkus.hibernate-orm.database.generation=drop-and-create\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:237
msgid "In our context, we are using PostgreSQL as identity store. The database schema is created by Hibernate ORM automatically on startup (change this in production), and we initialize the database with users and roles in the `Startup` class:"
msgstr "私たちのコンテキストでは、IDストアとしてPostgreSQLを使用しています。データベーススキーマはHibernate ORMによって起動時に自動的に作成され(本番ではこれを変更します)、 `Startup` クラスのユーザーとロールでデータベースを初期化します。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:245
#, no-wrap
msgid ""
"import javax.enterprise.event.Observes;\n"
"import javax.inject.Singleton;\n"
"import javax.transaction.Transactional;\n"
msgstr ""
"import javax.enterprise.event.Observes;\n"
"import javax.inject.Singleton;\n"
"import javax.transaction.Transactional;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:247
#, no-wrap
msgid "import io.quarkus.runtime.StartupEvent;\n"
msgstr "import io.quarkus.runtime.StartupEvent;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:259
#, no-wrap
msgid ""
"@Singleton\n"
"public class Startup {\n"
"    @Transactional\n"
"    public void loadUsers(@Observes StartupEvent evt) {\n"
"        // reset and load all test users\n"
"        User.deleteAll();\n"
"        User.add(\"admin\", \"admin\", \"admin\");\n"
"        User.add(\"user\", \"user\", \"user\");\n"
"    }\n"
"}\n"
msgstr ""
"@Singleton\n"
"public class Startup {\n"
"    @Transactional\n"
"    public void loadUsers(@Observes StartupEvent evt) {\n"
"        // reset and load all test users\n"
"        User.deleteAll();\n"
"        User.add(\"admin\", \"admin\", \"admin\");\n"
"        User.add(\"user\", \"user\", \"user\");\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:262
msgid "The application is now protected and the identities are provided by our database."
msgstr "アプリケーションは保護され、IDは私たちのデータベースから提供されるようになりました。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:267
msgid "We kindly remind you that you must not store clear-text passwords in production environments ;-).  As a result, the `security-jpa` defaults to using bcrypt-hashed passwords."
msgstr "本番環境ではクリアテキストのパスワードを保存してはいけないことをご注意ください。その結果、`security-jpa` はデフォルトで bcrypt でハッシュ化されたパスワードを使用するようになりました。"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:269
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:271
#, no-wrap
msgid "With Dev Services for PostgreSQL"
msgstr "Dev Services for PostgreSQL を使用する場合"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:276
msgid "Lets add the integration tests before running your application in production mode."
msgstr "アプリケーションを実稼働モードで動作させる前に、統合テストを追加してみましょう。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:279
msgid "We recommend using xref:https://quarkus.io/guides/dev-services#databases[Dev Services for PostgreSQL] for the integration testing of your application in JVM and native modes.  `Dev Services for PostgreSQL` will launch and configure a `PostgreSQL` test container if PostgreSQL configuration properties are enabled only in production (`prod`) mode:"
msgstr "JVM とネイティブモードでのアプリケーションの統合テストには、xref:https://quarkus.io/guides/dev-services#databases[Dev Services for PostgreSQL] の使用をお勧めします。`Dev Services for PostgreSQL` は、PostgreSQL の設定プロパティーが実稼働 (`prod`) モードでのみ有効な場合に、`PostgreSQL` テストコンテナーを起動および設定します。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:286
#, no-wrap
msgid ""
"%prod.quarkus.datasource.db-kind=postgresql\n"
"%prod.quarkus.datasource.username=quarkus\n"
"%prod.quarkus.datasource.password=quarkus\n"
"%prod.quarkus.datasource.jdbc.url=jdbc:postgresql:elytron_security_jpa\n"
msgstr ""
"%prod.quarkus.datasource.db-kind=postgresql\n"
"%prod.quarkus.datasource.username=quarkus\n"
"%prod.quarkus.datasource.password=quarkus\n"
"%prod.quarkus.datasource.jdbc.url=jdbc:postgresql:elytron_security_jpa\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:291
msgid "Note that adding a `%prod.` profile prefix the datasource properties will not make them visible to `Dev Services for PostgreSQL` but only to the application runnnig in production mode."
msgstr "`%prod.` プロファイルプレフィックスを追加しても、データソースプロパティーはそれを `Dev Services for PostgreSQL` には表示せず、実稼働モードで実行されているアプリケーションにのみ表示される点に注意してください。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:293
msgid "Next you can write the integration test:"
msgstr "次に、統合テストを記述できます。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:297
#, no-wrap
msgid "package org.acme.elytron.security.jpa;\n"
msgstr "package org.acme.elytron.security.jpa;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:301
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.get;\n"
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.core.Is.is;\n"
msgstr ""
"import static io.restassured.RestAssured.get;\n"
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.core.Is.is;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:304
#, no-wrap
msgid ""
"import org.apache.http.HttpStatus;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""
"import org.apache.http.HttpStatus;\n"
"import org.junit.jupiter.api.Test;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:306
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr "import io.quarkus.test.junit.QuarkusTest;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:309
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class JpaSecurityRealmTest {\n"
msgstr ""
"@QuarkusTest\n"
"public class JpaSecurityRealmTest {\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:315
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessPublicWhenAnonymous() {\n"
"        get(\"/api/public\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"
msgstr ""
"    @Test\n"
"    void shouldAccessPublicWhenAnonymous() {\n"
"        get(\"/api/public\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:317
#: upstream/_guides/security-getting-started.adoc:325
#: upstream/_guides/security-getting-started.adoc:336
#, no-wrap
msgid "    }\n"
msgstr "    }\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:323
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldNotAccessAdminWhenAnonymous() {\n"
"        get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_UNAUTHORIZED);\n"
msgstr ""
"    @Test\n"
"    void shouldNotAccessAdminWhenAnonymous() {\n"
"        get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_UNAUTHORIZED);\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:334
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessAdminWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"
msgstr ""
"    @Test\n"
"    void shouldAccessAdminWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:346
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldNotAccessUserWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_FORBIDDEN);\n"
"    }\n"
msgstr ""
"    @Test\n"
"    void shouldNotAccessUserWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_FORBIDDEN);\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:358
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessUserAndGetIdentityWhenUserAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"user\", \"user\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK)\n"
"                .body(is(\"user\"));\n"
"    }\n"
"}\n"
msgstr ""
"    @Test\n"
"    void shouldAccessUserAndGetIdentityWhenUserAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"user\", \"user\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK)\n"
"                .body(is(\"user\"));\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:361
msgid "As you can see you do not have to launch the test container from the test code."
msgstr "見てわかるとおり、テストコードからテストコンテナーを起動する必要はありません。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:367
msgid "If you start your application in `devmode` then `Dev Services for PostgreSQL` will launch a `PostgreSQL` devmode container for a start for you to focus on the application development.  While developing you can also start adding tests one by one and run them with the xref:continuous-testing.adoc[Continous Testing] feature - `Dev Services for PostgreSQL` will support these tests with a separate `PostgreSQL` test container which will not conflict with the devmode container."
msgstr "アプリケーションを `devmode` で起動すると、`Dev Services for PostgreSQL` が `PostgreSQL` devmode コンテナーを起動するため、ユーザーはアプリケーションの開発に集中できます。xref:continuous-testing.adoc[継続的テスト] 機能を使用すると、開発中にテストを 1 つずつ追加して実行することも可能です。`Dev Services for PostgreSQL` は、別の `PostgreSQL` テストコンテナーでこれらのテストをサポートするため、devmode コンテナーと競合しません。"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:369
#, no-wrap
msgid "With Curl or Browser"
msgstr "Curl またはブラウザーを使用する場合"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:372
msgid "First, start a PostgreSQL server:"
msgstr "まず、PostgreSQL サーバーを起動します:"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:378
#, no-wrap
msgid ""
"docker run --rm=true --name security-getting-started -e POSTGRES_USER=quarkus \\\n"
"           -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=elytron_security_jpa \\\n"
"           -p 5432:5432 postgres:14.1\n"
msgstr ""
"docker run --rm=true --name security-getting-started -e POSTGRES_USER=quarkus \\\n"
"           -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=elytron_security_jpa \\\n"
"           -p 5432:5432 postgres:14.1\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:381
msgid "Next, compile and run the application in either JVM or Native mode:"
msgstr "次に、JVM または Native モードでアプリケーションをコンパイルし、実行します。"

#. type: Title ====
#: upstream/_guides/security-getting-started.adoc:382
#, no-wrap
msgid "JVM mode"
msgstr "JVM モード"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:385
#: upstream/_guides/security-getting-started.adoc:398
msgid "Compile the application:"
msgstr "アプリケーションをコンパイルします:"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:389
msgid "Then run it:"
msgstr "次に、それを実行します:"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:393
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr "java -jar target/quarkus-app/quarkus-run.jar\n"

#. type: Title ====
#: upstream/_guides/security-getting-started.adoc:395
#, no-wrap
msgid "Native Mode"
msgstr "Native モード"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:402
msgid "and run it:"
msgstr "それを実行します:"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:406
#, no-wrap
msgid "./target/security-jpa-quickstart-runner\n"
msgstr "./target/security-jpa-quickstart-runner\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:410
msgid "Now you can test it with `curl` or your favourite browser.  We will use `curl` in this section but you can try to access the same endpoint URLs from the browser."
msgstr "これで `curl` やお気に入りのブラウザーでテストできます。ここでは `curl` を使用しますが、ブラウザーから同じエンドポイント URL にアクセスすることもできます。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:412
msgid "The very first thing to check is to ensure the anonymous access works."
msgstr "まず最初に確認すべきは、匿名でのアクセスが可能かどうかということです。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:419
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/public\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 6\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""
"$ curl -i -X GET http://localhost:8080/api/public\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 6\n"
"Content-Type: text/plain;charset=UTF-8\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:421
#, no-wrap
msgid "public%\n"
msgstr "public%\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:424
msgid "Now, let's try to hit a protected resource anonymously."
msgstr "では、保護されたリソースを匿名で攻撃してみましょう。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:432
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/admin\n"
"HTTP/1.1 401 Unauthorized\n"
"Content-Length: 14\n"
"Content-Type: text/html;charset=UTF-8\n"
"WWW-Authenticate: Basic\n"
msgstr ""
"$ curl -i -X GET http://localhost:8080/api/admin\n"
"HTTP/1.1 401 Unauthorized\n"
"Content-Length: 14\n"
"Content-Type: text/html;charset=UTF-8\n"
"WWW-Authenticate: Basic\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:434
#, no-wrap
msgid "Not authorized%\n"
msgstr "Not authorized%\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:437
msgid "Note, if you are using the browser then you should see the browser displaying a Basic Authentication challenge form."
msgstr "ブラウザーを使用している場合は、ブラウザーにベーシック認証のチャレンジフォームが表示されます。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:439
msgid "So far so good, now let's try with an allowed user."
msgstr "ここまでは順調ですが、今度は許可されたユーザーで試してみましょう。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:446
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 5\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 5\n"
"Content-Type: text/plain;charset=UTF-8\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:448
#, no-wrap
msgid "admin%\n"
msgstr "admin%\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:451
msgid "By providing the `admin:admin` credentials, the extension authenticated the user and loaded their roles.  The `admin` user is authorized to access to the protected resources."
msgstr "`admin:admin` 資格情報を提供することで、エクステンションはユーザーを認証し、そのロールをロードしました。 `admin` ユーザーは、保護されたリソースへのアクセスを許可されています。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:453
msgid "The user `admin` should be forbidden to access a resource protected with `@RolesAllowed(\"user\")` because it doesn't have this role."
msgstr "ユーザー `admin` は、この役割を持っていないので、 `@RolesAllowed(\"user\")` で保護されたリソースへのアクセスを禁止する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:460
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me\n"
"HTTP/1.1 403 Forbidden\n"
"Content-Length: 34\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me\n"
"HTTP/1.1 403 Forbidden\n"
"Content-Length: 34\n"
"Content-Type: text/html;charset=UTF-8\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:462
#, no-wrap
msgid "Forbidden%\n"
msgstr "Forbidden%\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:465
msgid "Finally, using the user `user` works and the security context contains the principal details (username for instance)."
msgstr "最後に、ユーザー `user` を使用すると動作し、セキュリティーコンテキストには主要な詳細(例えばユーザー名)が含まれています。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:472
#, no-wrap
msgid ""
"$ curl -i -X GET -u user:user http://localhost:8080/api/users/me\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 4\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""
"$ curl -i -X GET -u user:user http://localhost:8080/api/users/me\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 4\n"
"Content-Type: text/plain;charset=UTF-8\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:474
#, no-wrap
msgid "user%\n"
msgstr "user%\n"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:476
#, no-wrap
msgid "Security JPA Reference Guide "
msgstr "セキュリティー JPA リファレンスガイド"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:479
msgid "Now that you have run and tested the demo, please have a look at the more specific information about preparing your JPA identity store."
msgstr "これでデモの実行とテストが完了ました。次に、JPA アイデンティティーストアの準備を詳しく説明します。"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:480
#, no-wrap
msgid "Supported model types"
msgstr "サポートされているモデルの種類"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:483
msgid "The `@UserDefinition` class must be a JPA entity (with Panache or not)."
msgstr "`@UserDefinition` クラスは JPA エンティティーである必要があります(Panache を使用しているかどうかは問いません)。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:484
msgid "The `@Username` and `@Password` field types must be of type `String`."
msgstr "`@Username` と `@Password` フィールドの型は `String` でなければなりません。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:485
msgid "The `@Roles` field must either be of type `String` or `Collection<String>` or alternately a `Collection<X>` where `X` is an entity class with one `String` field annotated with the `@RolesValue` annotation."
msgstr "`@Roles` フィールドは `String`、`Collection<String>`、`Collection<X>` (`X` は `@RolesValue` アノテーションが付与された `String` フィールドを 1 つ持つエンティティークラス) のいずれかとします。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:486
msgid "Each `String` role element type will be parsed as a comma-separated list of roles."
msgstr "各 `String` role 要素の型は、カンマで区切られたロールのリストとして解析されます。"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:487
#, no-wrap
msgid "Storing roles in another entity"
msgstr "別のエンティティーにロールを格納する"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:490
msgid "You can also store roles in another entity:"
msgstr "また、別のエンティティーにロールを格納することもできます。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:499
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class User extends PanacheEntity {\n"
"    @Username\n"
"    public String name;\n"
msgstr ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class User extends PanacheEntity {\n"
"    @Username\n"
"    public String name;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:502
#, no-wrap
msgid ""
"    @Password\n"
"    public String pass;\n"
msgstr ""
"    @Password\n"
"    public String pass;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:507
#, no-wrap
msgid ""
"    @ManyToMany\n"
"    @Roles\n"
"    public List<Role> roles = new ArrayList<>();\n"
"}\n"
msgstr ""
"    @ManyToMany\n"
"    @Roles\n"
"    public List<Role> roles = new ArrayList<>();\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:510
#, no-wrap
msgid ""
"@Entity\n"
"public class Role extends PanacheEntity {\n"
msgstr ""
"@Entity\n"
"public class Role extends PanacheEntity {\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:513
#, no-wrap
msgid ""
"    @ManyToMany(mappedBy = \"roles\")\n"
"    public List<ExternalRolesUserEntity> users;\n"
msgstr ""
"    @ManyToMany(mappedBy = \"roles\")\n"
"    public List<ExternalRolesUserEntity> users;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:517
#, no-wrap
msgid ""
"    @RolesValue\n"
"    public String role;\n"
"}\n"
msgstr ""
"    @RolesValue\n"
"    public String role;\n"
"}\n"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:519
#, no-wrap
msgid "Password storage and hashing"
msgstr "パスワードの保存とハッシュ化"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:523
msgid "By default, we consider passwords to be stored hashed with https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF)."
msgstr "デフォルトでは、パスワードは MCF ( link:https://en.wikipedia.org/wiki/Crypt_©[Modular Crypt Format]) の下で link:https://en.wikipedia.org/wiki/Bcrypt[bcrypt]でハッシュ化されて保存されると考えています。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:527
msgid "When you need to create such a hashed password we provide the convenient `String BcryptUtil.bcryptHash(String password)` function, which defaults to creating a random salt and hashing in 10 iterations (though you can specify the iterations and salt too)."
msgstr "このようなハッシュ化されたパスワードを作成する必要がある場合は、便利な `String BcryptUtil.bcryptHash(String password)` 関数を用意しています。デフォルトでは、ランダムなソルトを作成して 10 回の繰り返しでハッシュ化します (繰り返しとソルトも指定できます)。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:530
msgid "with MCF you don't need dedicated columns to store the hashing algorithm, the iterations count or the salt because they're all stored in the hashed value."
msgstr "MCF を使うと、ハッシュアルゴリズムや反復回数、 ソルトを格納するための専用のカラムは必要ありません。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:532
msgid "You also have the possibility to store password using different hashing algorithm `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)`:"
msgstr "また、異なるハッシュアルゴリズム（ `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)` ）を使用してパスワードを保存することもできます。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:542
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class CustomPasswordUserEntity {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class CustomPasswordUserEntity {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:546
#, no-wrap
msgid ""
"    @Column(name = \"username\")\n"
"    @Username\n"
"    public String name;\n"
msgstr ""
"    @Column(name = \"username\")\n"
"    @Username\n"
"    public String name;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:550
#, no-wrap
msgid ""
"    @Column(name = \"password\")\n"
"    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
"    public String pass;\n"
msgstr ""
"    @Column(name = \"password\")\n"
"    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
"    public String pass;\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:554
#, no-wrap
msgid ""
"    @Roles\n"
"    public String role;\n"
"}\n"
msgstr ""
"    @Roles\n"
"    public String role;\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:562
#, no-wrap
msgid ""
"public class CustomPasswordProvider implements PasswordProvider {\n"
"    @Override\n"
"    public Password getPassword(String pass) {\n"
"        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
"        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
"    }\n"
"}\n"
msgstr ""
"public class CustomPasswordProvider implements PasswordProvider {\n"
"    @Override\n"
"    public Password getPassword(String pass) {\n"
"        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
"        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:566
msgid "WARN: you can also store passwords in clear text with `@Password(PasswordType.CLEAR)` but we strongly recommend against it in production."
msgstr "警告: `@Password(PasswordType.CLEAR)` を使ってパスワードをクリアテキストで保存することもできますが、本番では絶対にしないことを強くお勧めします。"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:567
#, no-wrap
msgid "What is Next"
msgstr "次のステップ"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:570
msgid "You have learned how to create and test a secure Quarkus application by using xref:security-built-in-authentication.adoc#basic-auth[Basic HTTPAuthenticationMechanism], `JPA IdentityProvider`."
msgstr "ここでは、xref:security-built-in-authentication.adoc#basic-auth[ベーシック HTTP 認証メカニズム]、`JPA IdentityProvider` を使用して、セキュアな Quarkus アプリケーションを作成およびテストする方法を学びました。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:572
msgid "Next we recommend you to see how `OpenId Connect` can be used to provide a secure, single sign on access to your Quarkus endpoints. Please follow xref:security-openid-connect.adoc[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization] and xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow] guides."
msgstr "次のステップとして、`OpenId Connect` を使用して Quarkus エンドポイントにセキュアなシングルサインオンアクセスを提供する方法を確認することをお勧めします。xref:security-openid-connect.adoc[Quarkus - Using OpenID Connect を使用した、ベアラートークン認可によるサービスアプリケーションの保護] および xref:security-openid-connect-web-authentication.adoc[Quarkus - OpenID Connect を使用した、認可コードフローによる Web アプリケーションの保護] ガイドを確認してください。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:574
msgid "For a complete reference to Quarkus Security please read a xref:security.adoc[Quarkus Security] document."
msgstr "Quarkus セキュリティーの詳細については、xref:security.adoc[Quarkus セキュリティー] ドキュメントを参照してください。"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:575
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:578
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus セキュリティー]"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:579
msgid "xref:security-openid-connect.adoc[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr "xref:security-openid-connect.adoc[Quarkus - OpenID Connect (OIDC) を使用した、ベアラートークン認可によるサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:580
msgid "xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr "xref:security-openid-connect-web-authentication.adoc[Quarkus - OpenID Connect を使用した、認可コードフローによる Web アプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:581
msgid "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache]"
msgstr "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache]"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:582
msgid "xref:hibernate-orm.adoc[Hibernate ORM]"
msgstr "xref:hibernate-orm.adoc[Hibernate ORM]"
