# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-08-28 00:22+0000\n"
"PO-Revision-Date: 2022-05-07 23:11+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/redis-reference.adoc:6
#, fuzzy, no-wrap
msgid "Redis Extension Reference Guide"
msgstr "Redisリファレンスガイド"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:15
#, fuzzy
msgid "Redis is an in-memory data store used as a database, cache, streaming engine, and message broker.  The Quarkus Redis extension allows integrating Quarkus applications with Redis."
msgstr "Redisは、データベース、キャッシュ、ストリーミングエンジン、メッセージブローカーとして使用されるインメモリデータストアです。Quarkus Redisエクステンションを使用すると、QuarkusアプリケーションとRedisを統合することができます。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:18
#, fuzzy
msgid "To use this extension, the user must be familiar with Redis, especially understanding the mechanism of commands and how they are organized.  Typically, we recommend:"
msgstr "この拡張機能を使うには、ユーザーがRedisに慣れていること、特にコマンドの仕組みとその構成について理解していることが必要です。一般的には、以下を推奨します。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:20
#, fuzzy
msgid "The https://try.redis.io/[interactive tutorial] introducing Redis."
msgstr "Redisを紹介する link:https://try.redis.io/[インタラクティブなチュートリアル] です。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:21
#, fuzzy
msgid "The https://redis.io/commands/[command references] explains Redis commands and contains links to reference documentation."
msgstr "link:https://redis.io/commands/[コマンドリファレンスでは] 、Redisのコマンドを説明し、参考ドキュメントへのリンクを掲載しています。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:23
#, fuzzy
msgid "This extension provides imperative and reactive APIs and low-level and high-level (type-safe) clients."
msgstr "この拡張機能は、命令型と反応型のAPI、および低レベルと高レベルの（型安全な）クライアントを提供します。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:25
#, fuzzy, no-wrap
msgid "Installation"
msgstr "インストール"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:29
#, fuzzy
msgid "If you want to use this extension, you need to add the `io.quarkus:quarkus-redis` extension first.  In your `pom.xml` file, add:"
msgstr "この拡張子を使用する場合は、まず `io.quarkus:quarkus-redis` 拡張子を追加する必要があります。 `pom.xml` ファイルに、追加してください。"

#. type: Block title
#: upstream/_guides/redis-reference.adoc:31
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:37
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-redis-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/redis-reference.adoc:40
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:43
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-redis\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:46
#, fuzzy
msgid "With this dependency, you can then inject Redis clients or _datasource_ (high-level, type-safe API), such as:"
msgstr "この依存関係があれば、あとはRedisクライアントや _データソース_ (高レベル、タイプセーフなAPI)をインジェクトすることができます。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:50
#, no-wrap
msgid "import io.quarkus.redis.datasource.RedisDataSource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:54
#, no-wrap
msgid ""
"// ...\n"
"@Inject RedisAPI lowLevelClient;\n"
"@Inject RedisDataSource highLevelApi;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:57
#, fuzzy
msgid "More details about the various APIs offered by the quarkus-redis extension are available in the <<apis>> section."
msgstr "quarkus-redisエクステンションが提供する様々なAPIの詳細については、 link:#apis[[apis]] セクションに記載されています。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:59
#, fuzzy, no-wrap
msgid "One extension, multiple APIs"
msgstr "1つの拡張機能で複数のAPIを利用可能"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:62
#, fuzzy
msgid "This extension provides multiple ways to interact with Redis:"
msgstr "この拡張機能は、Redisと対話するための複数の方法を提供します。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:67
#, fuzzy
msgid "the _low-level_ Vert.x client: it's a fully reactive, non-blocking, and asynchronous client.  More details on https://vertx.io/docs/vertx-redis-client/java/[the Vert.x Redis Client documentation].  Two APIs are exposed: `io.vertx.redis.client.Redis`, and `io.vertx.redis.client.RedisAPI`.  You will generally use the latter, except if you need to manage connections yourself."
msgstr "は、 _低レベルの_ Vert.xクライアントで、完全なリアクティブ、ノンブロッキング、非同期クライアントです。詳細は link:https://vertx.io/docs/vertx-redis-client/java/[Vert.x Redis Clientのドキュメント] を参照してください。2つのAPIが公開されています。 `io.vertx.redis.client.Redis` `io.vertx.redis.client.RedisAPI` 自分で接続を管理する必要がある場合を除き、一般的には後者を使用することになるでしょう。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:70
#, fuzzy
msgid "the _low-level_ Mutiny variant of the Vert.x API: Unlike the previous one, it exposes a Mutiny API and provides both reactive and imperative methods (suffixed with `andAwait()`).  Two APIs are exposed: `io.vertx.mutiny.redis.client.Redis` and `io.vertx.mutiny.redis.client.RedisAPI`.  You will generally use the latter, except if you need to manage connections yourself."
msgstr "は、Vert.x APIの _低レベルの_ Mutinyの亜種である。前者とは異なり、Mutiny APIを公開し、反応型と命令型の両方のメソッドを提供します(サフィックスは `andAwait()` )。 `io.vertx.mutiny.redis.client.Redis` と `io.vertx.mutiny.redis.client.RedisAPI` の2つのAPIが公開されています。自分で接続を管理する必要がある場合を除き、 一般的には後者を使うことになるでしょう。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:74
#, fuzzy
msgid "a _high-level_ reactive data source: A type-safe, high-level API to interact with Redis.  This API is fully reactive and asynchronous.  It exposes a Mutiny API.  It exposes the `io.quarkus.redis.datasource.ReactiveRedisDataSource` interface."
msgstr " _高水準の_ リアクティブなデータソースRedisと対話するための、タイプセーフな高レベルAPIです。このAPIは完全にリアクティブで非同期です。MutinyのAPIを公開します。 `io.quarkus.redis.datasource.ReactiveRedisDataSource` インターフェースを公開します。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:77
#, fuzzy
msgid "a _high-level_ imperative data source: A type-safe, high-level API to interact with Redis.  It is the imperative variant of the reactive data source.  It exposes the `io.quarkus.redis.datasource.RedisDataSource` interface."
msgstr " _高レベルの_ 命令型データソースです。Redisと対話するための、タイプセーフな高レベルAPIです。リアクティブなデータソースの命令型バージョンです。 `io.quarkus.redis.datasource.RedisDataSource` のインターフェイスを公開します。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:79
#, fuzzy
msgid "To help you select the suitable API for you, here are some recommendations:"
msgstr "お客様に適したAPIを選んでいただくために、いくつかのおすすめをご紹介します。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:81
#, fuzzy
msgid "If you are building an imperative (_classic_) Quarkus application integrating with Redis: use `io.quarkus.redis.datasource.RedisDataSource`."
msgstr "Redisと統合する命令型 _（クラシック）_ Quarkusアプリケーションを構築する場合、 `io.quarkus.redis.datasource.RedisDataSource` を使用します。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:82
#, fuzzy
msgid "If you are building a reactive Quarkus application integrating with Redis: use `io.quarkus.redis.datasource.ReactiveRedisDataSource`."
msgstr "Redisと統合したリアクティブなQuarkusアプリケーションを構築する場合： `io.quarkus.redis.datasource.RedisReactiveDataSource` を使用します。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:83
#, fuzzy
msgid "If you need fine-grain control, or execute commands in a generic way: use `io.vertx.mutiny.redis.client.RedisAPI`"
msgstr "細かい制御が必要な場合や、汎用的な方法でコマンドを実行する場合は、次のようにします。 `io.vertx.mutiny.redis.client.RedisAPI` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:84
#, fuzzy
msgid "If you have existing Vert.x code, use `io.vertx.redis.client.RedisAPI`"
msgstr "既存のVert.xのコードをお持ちの方は `io.vertx.redis.client.RedisAPI` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:85
#, fuzzy
msgid "If you need to emit custom commands, you can either use the data sources (reactive or imperative) or the `io.vertx.mutiny.redis.client.Redis`."
msgstr "カスタムコマンドを発行する必要がある場合は、データソース（reactiveまたはimperative）を使用するか、 `io.vertx.mutiny.redis.client.Redis` ."

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:87
#, fuzzy, no-wrap
msgid "Default and named clients"
msgstr "デフォルトクライアントとネームドクライアント"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:91
#, fuzzy
msgid "This extension lets you configure a _default_ Redis client/data sources or _named_ ones.  The latter is essential when you need to connect to multiple Redis instances."
msgstr "この拡張モジュールを使うと、 _デフォルトの_ Redis クライアント/データソースと _名前つき_ クライアントとを設定することができます。後者は、複数の Redis インスタンスに接続する必要がある場合に必須となります。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:94
#, fuzzy
msgid "The default connection is configured using the `quarkus.redis.*` properties.  For example, to configure the default Redis client, use:"
msgstr "デフォルトの接続は、 `quarkus.redis.*` のプロパティを使用して設定されます。たとえば、デフォルトのRedisクライアントを設定するには、以下を使用します。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:99
#, no-wrap
msgid "quarkus.redis.hosts=redis://localhost/\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:102
#, fuzzy
msgid "When using the default connection, you can inject the various APIS using a _plain_ `@Inject`:"
msgstr "デフォルトの接続を使用する場合、 _プレーンな_ `@Inject` を使用して様々な APIS を注入することができます。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:112
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedisExample {\n"
"    @Inject ReactiveRedisDataSource reactiveDataSource;\n"
"    @Inject RedisDataSource redisDataSource;\n"
"    @Inject RedisAPI redisAPI;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:115
#, fuzzy
msgid "In general, you inject a single one; the previous snippet is just an example."
msgstr "一般的には、1つだけ注入します。先ほどのスニペットは単なる一例です。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:118
#, fuzzy
msgid "_Named_ clients are configured using the `quarkus.redis.<name>.*` properties:"
msgstr " _名前付き_ クライアントは、 `quarkus.redis.<name>.*` のプロパティを使用して設定されます。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:123
#, no-wrap
msgid ""
"quarkus.redis.my-redis-1.hosts=redis://localhost/\n"
"quarkus.redis.my-redis-2.hosts=redis://my-other-redis:6379\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:126
#, fuzzy
msgid "To access the APIs, you need to use the `@RedisClientName` qualifier:"
msgstr "APIにアクセスするためには、 `@RedisClientName` 修飾子を使用する必要があります。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:135
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedisExample {\n"
"    @Inject @RedisClientName(\"my-redis-1\") ReactiveRedisDataSource reactiveDataSource;\n"
"    @Inject @RedisClientName(\"my-redis-2\") RedisDataSource redisDataSource;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:138
#, fuzzy
msgid "When using `@RedisClientName`, you can omit the `@Inject` annotation."
msgstr " `@RedisClientName` を使用する場合、 `@Inject` のアノテーションを省略することができます。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:139
#, fuzzy, no-wrap
msgid "Connecting to Redis"
msgstr "Redisへの接続"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:142
#, fuzzy
msgid "The Redis extension can operate in 4 distinct modes:"
msgstr "Redisエクステンションは、4つの異なるモードで動作することができます。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:144
#, fuzzy
msgid "Simple client (probably what most users need)."
msgstr "シンプルなクライアント（おそらくほとんどのユーザーが必要としているもの）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:145
#, fuzzy
msgid "Sentinel (when working with Redis in High Availability mode)."
msgstr "Sentinel (高可用性モードでRedisを使用する場合)。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:146
#, fuzzy
msgid "Cluster (when working with Redis in Clustered mode)."
msgstr "Cluster（RedisをClusteredモードで動作させる場合）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:147
#, fuzzy
msgid "Replication (single shard, one node write, multiple read)."
msgstr "レプリケーション（シングルシャード、1ノードライト、マルチリード）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:149
#, fuzzy
msgid "The connection url is configured with the `quarkus.redis.hosts` (or `quarkus.redis.<name>.hosts`) as follows:"
msgstr "接続URLは、 `quarkus.redis.hosts` （または `quarkus.redis.<name>.hosts` ）で以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:153
#, no-wrap
msgid "quarkus.redis.hosts=redis://[:password@]host[:port][/db-number]\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:155
#, fuzzy, no-wrap
msgid "Using Unix Socket"
msgstr "Unixソケットの使用"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:158
#, fuzzy
msgid "When using unix-socket, you need:"
msgstr "unix-socketを使用する場合、必要です。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:162
#, no-wrap
msgid "quarkus.redis.hosts=unix://[:password@]/domain/docker.sock[?select=db-number]\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:164
#, fuzzy, no-wrap
msgid "Sentinel Mode"
msgstr "センチネルモード"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:167
#, fuzzy
msgid "When using Sentinel, you need to pass multiple _host urls_ and configure the client type to `sentinel`:"
msgstr "Sentinelを使用する場合、複数の _ホストURLを_ 渡し、クライアントタイプを `sentinel` に設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:172
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:5000,redis://localhost:5001,redis://localhost:5002\n"
"quarkus.redis.client-type=sentinel\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:176
#, no-wrap
msgid ""
"# Optional\n"
"quarkus.redis.master-name=my-sentinel # Default is my-master\n"
"quarkus.redis.role=master # master is the default\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:178
#, fuzzy, no-wrap
msgid "Cluster Mode"
msgstr "クラスター・モード"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:181
#, fuzzy
msgid "When using Redis in cluster mode, you need to pass multiple _host urls_, configure the client type to `cluster` and configure the `replicas` mode:"
msgstr "Redisをクラスタモードで使用する場合、複数の _ホストURLを_ 渡すこと、クライアントタイプを `cluster` に設定すること、 `replicas` モードを設定することが必要です。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:187
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:7000,redis://localhost:7001,redis://localhost:7002\n"
"quarkus.redis.client-type=cluster\n"
"quarkus.redis.replicas=share\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:189
#, fuzzy, no-wrap
msgid "Replication Mode"
msgstr "レプリケーションモード"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:192
#, fuzzy
msgid "When using the replication mode, you need to pass a single host url and configure the type to be `replication`:"
msgstr "レプリケーションモードを使用する場合、1つのホストURLを渡し、タイプを `replication` に設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:197
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:7000\n"
"quarkus.redis.client-type=replication\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:199
#, fuzzy, no-wrap
msgid "Connecting to Redis Cloud"
msgstr "Redis Cloudへの接続"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:202
#, fuzzy
msgid "To connect to redis cloud, you need the following properties:"
msgstr "redisクラウドに接続するためには、以下のプロパティが必要です。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:207
#, no-wrap
msgid ""
"quarkus.redis.hosts=<the redis cloud url such as redis://redis-12436.c14.us-east-1-3.ec2.cloud.redislabs.com:12436>\n"
"quarkus.redis.password=<the password>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:209
#, no-wrap
msgid "Authentication"
msgstr "認証"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:213
#, fuzzy
msgid "The Redis password can be set in the `redis://` URL or with the `quarkus.redis.password` property.  We recommend the latter, and if possible, using secrets or an environment variable to configure the password."
msgstr "Redisのパスワードは、 `redis://` のURLで設定するか、 `quarkus.redis.password` のプロパティで設定することができます。後者をお勧めします。可能であれば、secretsや環境変数を使ってパスワードを設定することをお勧めします。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:215
#, fuzzy
msgid "The associated environment variable is `QUARKUS_REDIS_PASSWORD`, or `QUARKUS_REDIS_<NAME>_PASSWORD` for named clients."
msgstr "関連する環境変数は、 `QUARKUS_REDIS_PASSWORD` 、名前付きクライアントの場合は `QUARKUS_REDIS_<NAME>_PASSWORD` です。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:216
#, fuzzy, no-wrap
msgid "Using the high-level clients (data sources)"
msgstr "上位クライアント（データソース）を利用する"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:221
#, fuzzy
msgid "Quarkus exposes a high-level API on top of Redis.  This API is type-safe and structured around the notion of _group_, inherited from the https://redis.io/commands/command-docs/[Redis command organization].  This API lets you execute Redis commands more conveniently and safely."
msgstr "Quarkusは、Redis上で高レベルのAPIを公開します。このAPIは型安全で、Red link:https://redis.io/commands/command-docs/[isコマンドの構成から] 継承された _グループの_ 概念を中心に構成されています。このAPIを使用すると、Redisコマンドをより便利かつ安全に実行できます。"

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:222
#, fuzzy, no-wrap
msgid "Injecting data sources"
msgstr "データソースを注入する"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:225
#, fuzzy
msgid "For each configured Redis client, two Redis data sources are exposed:"
msgstr "設定された各Redisクライアントに対して、2つのRedisデータソースが公開されます。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:228
#, fuzzy
msgid "`io.quarkus.redis.datasource.RedisDataSource` - an imperative (blocking) Redis data source.  Each operation blocks until a response is received or a timeout is reached"
msgstr " `io.quarkus.redis.datasource.RedisDataSource` - 命令型（ブロック型）のRedisデータソースです。各操作は応答を受信するか、タイムアウトに達するまでブロックされる"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:229
#, fuzzy
msgid "`io.quarkus.redis.datasource.ReactiveRedisDataSource` - a reactive Redis data source returning `Uni<X>` or `Multi<X>`."
msgstr " `io.quarkus.redis.datasource.ReactiveRedisDataSource` - リアクティブなRedisデータソースで、 または を返します。 `Uni<X>` `Multi<X>` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:231
#, fuzzy
msgid "If you configured the _default_ Redis client, you could inject the data sources using:"
msgstr " _デフォルトの_ Redisクライアントを設定した場合、使用してデータソースを注入することができました。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:236
#, no-wrap
msgid ""
"@Inject RedisDataSource defaultRedisDataSource;\n"
"@Inject ReactiveRedisDataSource defaultReactiveRedisDataSource;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:239
#, fuzzy
msgid "If you configured a _named_ Redis client, you need to use the `io.quarkus.redis.RedisClientName` qualifier to select the right client:"
msgstr " _名前付き_ Redisクライアントを設定した場合、 `io.quarkus.redis.RedisClientName` 修飾子を使用して、正しいクライアントを選択する必要があります。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:244
#, no-wrap
msgid ""
"@RedisClientName(\"my-redis\") RedisDataSource myRedisDataSource;\n"
"@RedisClientName(\"my-redis\") ReactiveRedisDataSource myReactiveRedisDataSource;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:247
#, fuzzy
msgid "When using the _blocking_ variant, you can configure the default timeout with:"
msgstr " _blocking_ variant を使用する場合、デフォルトのタイムアウトの設定は"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:252
#, no-wrap
msgid ""
"quarkus.redis.timeout=5s\n"
"quarkus.redis.my-redis.timeout=5s\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:255
#, fuzzy
msgid "The default timeout is configured to 10s."
msgstr "デフォルトのタイムアウトは10sに設定されています。"

#. type: Block title
#: upstream/_guides/redis-reference.adoc:257
#, fuzzy, no-wrap
msgid "All about delegation"
msgstr "デリゲーションのすべて"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:261
#, fuzzy
msgid "The blocking data source (`io.quarkus.redis.datasource.RedisDataSource`) is implemented on top of the reactive one (`io.quarkus.redis.datasource.ReactiveRedisDataSource`).  The `ReactiveRedisDataSource` is implemented on top of the `io.vertx.mutiny.redis.Redis` API."
msgstr "ブロッキングデータソース( `io.quarkus.redis.datasource.RedisDataSource` )は、リアクティブデータソース( `io.quarkus.redis.datasource.ReactiveRedisDataSource` )の上に実装されています。 `ReactiveRedisDataSource` は `io.vertx.mutiny.redis.Redis` の API の上に実装されています。"

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:263
#, fuzzy, no-wrap
msgid "Data Source groups"
msgstr "データソースグループ"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:266
#, fuzzy
msgid "As mentioned above, the API is divided into groups:"
msgstr "前述の通り、APIはグループに分かれています。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:268
#: upstream/_guides/redis-reference.adoc:269
#, fuzzy
msgid "bitmap - `.bitmap()`"
msgstr "ビットマップ `.bitmap()` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:270
#, fuzzy
msgid "key (generic) - `.key()`"
msgstr "キー `.key()` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:271
#, fuzzy
msgid "geo - `.geo(memberType)`"
msgstr "ジオ `.geo(memberType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:272
#, fuzzy
msgid "hash - `.hash(`valueType)`"
msgstr "ハッシュ `.hash(`valueType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:273
#, fuzzy
msgid "hyperloglog - `.hyperloglog(memberType)`"
msgstr "ハイパーログログ `.hyperloglog(memberType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:274
#, fuzzy
msgid "list - `.list(memberType)`"
msgstr "リスト `.list(memberType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:275
#, fuzzy
msgid "pubsub - `pubsub()`"
msgstr "パブサブ `pubsub()` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:276
#, fuzzy
msgid "set - `.set(memberType)`"
msgstr "セット `.set(memberType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:277
#, fuzzy
msgid "sorted-set - `.sortedSet(memberType)`"
msgstr "ソート済みセット `.sortedSet(memberType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:278
#, fuzzy
msgid "stream (not available yet)"
msgstr "ストリーム（未発売）"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:279
#, fuzzy
msgid "string - `.string(valueType)`"
msgstr "文字列- `.string(valueType)` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:280
#, fuzzy
msgid "transactions - `withTransaction`"
msgstr "トランザクション- `withTransaction` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:283
#, fuzzy
msgid "Each of these methods returns an object that lets you execute the commands related to the group.  The following snippet demonstrates how to use the _hash_ group:"
msgstr "これらのメソッドはそれぞれ、そのグループに関連するコマンドを実行するためのオブジェクトを返します。次のスニペットは、 _ハッシュ・_ グループの使い方を示しています。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:288
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyRedisService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:290
#, no-wrap
msgid "    private static final String MY_KEY = \"my-key\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:292
#, no-wrap
msgid "    private final HashCommands<String, String, Person> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:296
#, no-wrap
msgid ""
"    public MyRedisService(RedisDataSource ds) { // <1>\n"
"        commands = ds.hash(Person.class); // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:300
#, no-wrap
msgid ""
"    public void set(String field, Person value) {\n"
"        commands.hset(MY_KEY, field, value);  // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:305
#, no-wrap
msgid ""
"    public Person get(String field) {\n"
"        commands.hget(MY_KEY, field);  // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:307
#, fuzzy
msgid "Inject the `RedisDataSource` in the constructor"
msgstr "コンストラクタで `RedisDataSource` をインジェクトする"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:309
#, fuzzy
msgid "Creates the `HashCommands` object.  This object has three type parameters: the type of the key, the type of the field, and the type of the member"
msgstr " `HashCommands` オブジェクトを作成します。このオブジェクトは3つの型パラメータを持ちます: キーの型、フィールドの型、メンバーの型"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:310
#, fuzzy
msgid "Use the created `commands` to associate the field `field` with the value `value`"
msgstr "作成した `commands` を使って、フィールド `field` に値を関連付けます。 `value` "

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:311
#, fuzzy
msgid "Use the created `commands` to retrieve the field `field` value."
msgstr "作成された `commands` を使って、フィールド `field` の値を取得する。"

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:312
#, fuzzy, no-wrap
msgid "Serialization and Deserialization"
msgstr "シリアライズとデシリアライズ"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:317
#, fuzzy
msgid "The data source APIs handle the serialization and deserialization automatically.  When a non-standard type is used, the object is serialized into JSON and deserialized from JSON.  In this case, `quarkus-jackson` is used."
msgstr "データソースAPIは、シリアライズとデシリアライズを自動的に処理する。非標準の型が使用されている場合，オブジェクトはJSONにシリアライズされ，JSONからデシリアライズされる．この場合、 `quarkus-jackson` 。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:319
#, fuzzy
msgid "To store binary data, use `byte[]`."
msgstr "バイナリデータを格納する場合は、 `byte[]` 。"

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:320
#, fuzzy, no-wrap
msgid "The `string` group"
msgstr " `string` グループ"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:324
#, fuzzy
msgid "The `string` group is used to manipulate https://redis.io/docs/manual/data-types/#strings[Redis Strings].  Thus, this group is not limited to Java Strings but can be used for integers (like a counter) or binary content (like images)."
msgstr " `string` グループは、 link:https://redis.io/docs/manual/data-types/#strings[Redis の文字列を] 操作するために使用されます。したがって、このグループはJavaのStringに限らず、整数（カウンターのような）やバイナリコンテンツ（画像のような）に使用することができます。"

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:325
#, fuzzy, no-wrap
msgid "Caching values"
msgstr "値のキャッシュ"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:329
#, fuzzy
msgid "You can use Redis as a cache using the `setex` command, which stores a given value to a given key for a given duration.  The following snippet shows how such a command can be used to store `BusinessObject` for 1 second."
msgstr "Redisをキャッシュとして使用するには、 `setex` コマンドを使用します。このコマンドは、指定したキーに指定した値を指定した時間だけ保存するものです。次のスニペットは、このようなコマンドを使用して、 `BusinessObject` を 1 秒間保存する方法を示しています。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:334
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyRedisCache {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:336
#, no-wrap
msgid "    private final StringCommands<String, BusinessObject> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:340
#, no-wrap
msgid ""
"    public MyRedisCache(RedisDataSource ds) {\n"
"        commands = ds.string(BusinessObject.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:344
#: upstream/_guides/redis-reference.adoc:504
#, no-wrap
msgid ""
"    public BusinessObject get(String key) {\n"
"        return commands.get(key);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:349
#, no-wrap
msgid ""
"    public void set(String key, BusinessObject bo) {\n"
"        commands.setex(key, 1, bo); // Expires after 1 second\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:352
#, fuzzy
msgid "You can use the `setnx` method only to set the value if no value has been stored for the given key."
msgstr " `setnx` メソッドは、与えられたキーに対して値が保存されていない場合にのみ、値を設定するために使用することができます。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:354
#, fuzzy
msgid "The `key` group provides more fine-grain control on expiration and ttl of each key."
msgstr " `key` グループでは、各鍵の有効期限やttlをより細かく制御することができます。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:358
#, fuzzy
msgid "The `set` method can also receive a `SetArgs` argument that modify the behavior:"
msgstr " `set` メソッドは、動作を変更する `SetArgs` 引数を受け取ることもできる。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:360
#, fuzzy
msgid "`ex(seconds)` - Set the specified expire time, in seconds."
msgstr " `ex(seconds)` - 指定された有効期限を秒単位で設定する。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:361
#, fuzzy
msgid "`px(milliseconds)` - Set the specified expire time, in milliseconds."
msgstr " `px(milliseconds)` - 指定された有効期限をミリ秒単位で設定する。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:362
#, fuzzy
msgid "`exat(timestamp-seconds)` - Set the specified Unix time at which the key will expire, in seconds."
msgstr " `exat(timestamp-seconds)` - 鍵の有効期限が切れるまでの Unix 時間を秒単位で指定します。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:363
#, fuzzy
msgid "`pxat(timestamp-milliseconds)` - Set the specified Unix time at which the key will expire, in milliseconds."
msgstr " `pxat(timestamp-milliseconds)` - 鍵の有効期限が切れるまでの Unix 時間をミリ秒単位で指定します。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:364
#, fuzzy
msgid "`nx()` - Only set the key if it does not already exist."
msgstr " `nx()` - キーがまだ存在しない場合のみ設定します。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:365
#, fuzzy
msgid "`xx()` - Only set the key if it already exists."
msgstr " `xx()` - キーがすでに存在する場合のみ設定します。"

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:366
#, fuzzy
msgid "`keepttl()` - Retain the time to live associated with the key."
msgstr " `keepttl()` - キーに関連する生存時間を保持する。"

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:368
#, fuzzy, no-wrap
msgid "Storing binary data"
msgstr "バイナリーデータを格納する"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:372
#, fuzzy
msgid "Redis _strings_ can be used to store binary data, such as images.  In this case, we will use `byte[]` as value type:"
msgstr "Redis の _文字列は_ 、画像などのバイナリデータを格納するために使用することができます。今回は、値の型として `byte[]` を使用します。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:377
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyBinaryRepository {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:379
#, no-wrap
msgid "    private final StringCommands<String, byte[]> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:383
#, no-wrap
msgid ""
"    public MyBinaryRepository(RedisDataSource ds) {\n"
"        commands = ds.string(byte[].class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:391
#, no-wrap
msgid ""
"    public byte[] get(String key) {\n"
"        byte[] bytes = commands.get(key);\n"
"        if (bytes == null) {\n"
"            throw new NoSuchElementException(\"`\" + key + \"` not found\");\n"
"        }\n"
"        return bytes;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:395
#, no-wrap
msgid ""
"    public void add(String key, byte[] bytes) {\n"
"        commands.set(key, bytes);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:400
#, no-wrap
msgid ""
"    public void addIfAbsent(String key, byte[] bytes) {\n"
"        commands.setnx(key, bytes);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:402
#, fuzzy, no-wrap
msgid "Storing a counter"
msgstr "カウンターの格納"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:405
#, fuzzy
msgid "You can store counters in Redis as demonstrated below:"
msgstr "以下のデモのように、Redisにカウンターを格納することができます。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:410
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyRedisCounter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:412
#, no-wrap
msgid "    private final StringCommands<String, Long> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:416
#, no-wrap
msgid ""
"    public MyRedisCounter(RedisDataSource ds) {\n"
"        commands = ds.string(Long.class); // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:424
#, no-wrap
msgid ""
"    public long get(String key) {\n"
"        Long l = commands.get(key);  // <2>\n"
"        if (l == null) {\n"
"            return 0L;\n"
"        }\n"
"        return l;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:428
#, no-wrap
msgid ""
"    public void incr(String key) {\n"
"        commands.incr(key);  // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:430
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:433
#, fuzzy
msgid "Retrieve the commands.  This time we will manipulate `Long` values"
msgstr "コマンドを取得する。今回は、 `Long` の値を操作します。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:435
#, fuzzy
msgid "Retrieve the counter associated with the given `key`.  Return `0L` when no counter is stored."
msgstr "与えられた `key` に関連するカウンタを取得する。カウンタが格納されていない場合は， `0L` を返す。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:437
#, fuzzy
msgid "Increment the value.  If there are no counter stored for the key, the `incr` command considers 0 as value (so `incr` sets the value to 1)."
msgstr "値をインクリメントします。キーに対応するカウンタが格納されていない場合、 `incr` コマンドは 0 を値とみなします（したがって `incr` は値を 1 に設定します）。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:439
#, fuzzy
msgid "There are other methods that can be useful to manipulate counters, such as:"
msgstr "他にも、カウンターを操作するのに便利なメソッドがあります。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:441
#, fuzzy
msgid "`incrby` - allows setting the increment value (positive or negative)"
msgstr " `incrby` - インクリメント値（正または負）を設定できます。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:442
#, fuzzy
msgid "`incrbyfloat` - allows setting the increment value as a float/ double (the stored value will be a double)"
msgstr " `incrbyfloat` - インクリメント値をfloat/doubleで設定可能(格納される値はdoubleとなる)"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:443
#, fuzzy
msgid "`set` - to set an initial value if needed"
msgstr " `set` - を使用して、必要に応じて初期値を設定します。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:444
#, fuzzy
msgid "`decr` and `decrby` - allows decrementing the stored value"
msgstr " `decr` および - 保存された値をデクリメントすることができます。 `decrby` "

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:445
#, fuzzy, no-wrap
msgid "Using pub/sub"
msgstr "pub/subの使用"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:449
#, fuzzy
msgid "Redis allows sending _messages_ to channels and listening for these messages.  These features are available from the the `pubsub` group."
msgstr "Redis では、チャンネルに _メッセージを_ 送信したり、そのメッセージをリッスンしたりすることができます。これらの機能は、 `pubsub` グループから利用できます。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:451
#, fuzzy
msgid "The following snippets shows how a _cache_ can emit a `Notification` after every `set`, and how a subscriber can receive the notification."
msgstr "次のスニペットは、 _キャッシュが_ `set` ごとに `Notification` を発行する方法と、サブスクライバーが通知を受信する方法を示しています。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:457
#, no-wrap
msgid ""
"public static final class Notification {\n"
"    public String key;\n"
"    public BusinessObject bo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:459
#, no-wrap
msgid "    public Notification() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:461
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:467
#, no-wrap
msgid ""
"    public Notification(String key, BusinessObject bo) {\n"
"        this.key = key;\n"
"        this.bo = bo;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:473
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Startup // We want to create the bean instance on startup to subscribe to the channel.\n"
"public static class MySubscriber implements Consumer<Notification> {\n"
"    private final PubSubCommands<Notification> pub;\n"
"    private final PubSubCommands.RedisSubscriber subscriber;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:478
#, no-wrap
msgid ""
"    public MySubscriber(RedisDataSource ds) {\n"
"        pub = ds.pubsub(Notification.class);\n"
"        subscriber = pub.subscribe(\"notifications\", this);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:483
#, no-wrap
msgid ""
"    @Override\n"
"    public void accept(Notification notification) {\n"
"        // Receive the notification\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:489
#, no-wrap
msgid ""
"    @PreDestroy\n"
"    public void terminate() {\n"
"        subscriber.unsubscribe(); // Unsubscribe from all subscribed channels\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:492
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyCache {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:495
#, no-wrap
msgid ""
"    private final StringCommands<String, BusinessObject> commands;\n"
"    private final PubSubCommands<Notification> pub;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:500
#, no-wrap
msgid ""
"    public MyCache(RedisDataSource ds) {\n"
"        commands = ds.string(BusinessObject.class);\n"
"        pub = ds.pubsub(Notification.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:510
#, no-wrap
msgid ""
"    public void set(String key, BusinessObject bo) {\n"
"        commands.set(key, bo);\n"
"        pub.publish(\"notifications\", new Notification(key, bo));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:512
#, fuzzy, no-wrap
msgid "Using transactions"
msgstr "トランザクションの使用"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:516
#, fuzzy
msgid "Redis transactions are slightly different from relational database transactions.  Redis transactions are a batch of commands executed altogether."
msgstr "Redisのトランザクションは、リレーショナルデータベースのトランザクションとは少し異なります。Redisのトランザクションは、まとめて実行されるコマンドのバッチです。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:518
#, fuzzy
msgid "A Redis transaction can _watch_ a set of keys, which would _discard_ the transaction is one of these keys are updated during the transaction execution."
msgstr "Redisトランザクションは一連のキーを _監視_ することができ、トランザクションの実行中にこれらのキーのいずれかが更新された場合、トランザクションは _破棄_ されます。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:523
#, fuzzy
msgid "Commands enqueued in a transaction are not executed before the whole transaction is executed.  It means that you cannot retrieve a result during the transaction.  Results are accumulated in a `TransactionResult` object you will access after the completion of the transaction.  This object contains whether the transaction succeeded or was discarded, and in the former case the result of each command (indexed by the command order)."
msgstr "トランザクション内でキューに入れられたコマンドは、トランザクション全体が実行される前に実行されることはありません。つまり、トランザクション中に結果を取得することはできない。結果は、トランザクションの完了後にアクセスする `TransactionResult` オブジェクトに蓄積される。このオブジェクトには、トランザクションが成功したか、破棄されたか、そして前者の場合は各コマンドの結果（コマンドの順序でインデックスが付けられている）が含まれています。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:527
#, fuzzy
msgid "To start a transaction, you use the `withTransaction` method.  This method receives a `Consumer<TransactionalRedisDataSource>`, which follows the same API as the regular `RedisDataSource` except that the commands return `void` (`Uni<Void>` for the reactive variant).  When that consumer returns, the transaction is _executed_."
msgstr "トランザクションを開始するには、 `withTransaction` メソッドを使用する。このメソッドは `Consumer<TransactionalRedisDataSource>` を受け取る。コマンドは `void` ( リアクティブバリアントでは `Uni<Void>` ) を返すことを除いて、通常の `RedisDataSource` と同じ API に従っている。そのコンシューマーが返されると、トランザクションが _実行_ される。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:529
#, fuzzy
msgid "The following snippet shows how to create a transaction executing two related _writes_:"
msgstr "次のスニペットは、2つの関連する _書き込みを_ 実行するトランザクションを作成する方法を示しています。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:533
#, no-wrap
msgid "@Inject RedisDataSource ds;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:535
#: upstream/_guides/redis-reference.adoc:553
#: upstream/_guides/redis-reference.adoc:585
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:541
#, no-wrap
msgid ""
"TransactionResult result = ds.withTransaction(tx -> {\n"
"        TransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"        hash.hset(KEY, \"field-1\", \"hello\");\n"
"        hash.hset(KEY, \"field-2\", \"hello\");\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:545
#, fuzzy
msgid "The received `tx` object can also be used to _discard_ the transaction, using: `tx.discard();`.  The returned `TransactionResult` lets you retrieve the result of each command."
msgstr "受け取った `tx` オブジェクトは、 `tx.discard();` を使って、トランザクションを _破棄_ することもできる。返された `TransactionResult` 、各コマンドの結果を取得することができます。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:547
#, fuzzy
msgid "When using the reactive variant of the data source, the passed callback is a `Function<ReactiveTransactionalRedisDataSource, Uni<Void>>`:"
msgstr "データソースのリアクティブバリアントを使用する場合、渡されたコールバックは `Function<ReactiveTransactionalRedisDataSource, Uni<Void>>` :"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:551
#: upstream/_guides/redis-reference.adoc:583
#, no-wrap
msgid "@Inject ReactiveRedisDataSource ds;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:559
#, no-wrap
msgid ""
"Uni<TransactionResult> result = ds.withTransaction(tx -> {\n"
"        ReactiveTransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"        return hash.hset(KEY, \"field-1\", \"hello\")\n"
"            .chain(() -> hash.hset(KEY, \"field-2\", \"hello\"));\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:564
#, fuzzy
msgid "Transaction execution can be conditioned by _keys_.  When a passed key gets modified during the execution of a transaction, the transaction is discarded.  The keys are passed as `String` as a second parameter to the `withTransaction` method:"
msgstr "トランザクションの実行は、 _キーによって_ 条件付けできる。渡されたキーがトランザクションの実行中に変更された場合、そのトランザクションは破棄される。キーは、 `String` として、 `withTransaction` メソッドの第2パラメータとして渡される。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:572
#, no-wrap
msgid ""
"TransactionResult result = ds.withTransaction(tx -> {\n"
"    TransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"    hash.hset(KEY, \"field-1\", \"hello\");\n"
"    hash.hset(KEY, \"field-2\", \"hello\");\n"
"}, KEY);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:575
#, fuzzy
msgid "You cannot use the pub/sub feature from within a transaction."
msgstr "トランザクションの中からPub/Sub機能を使用することはできません。"

#. type: Title ====
#: upstream/_guides/redis-reference.adoc:576
#, fuzzy, no-wrap
msgid "Executing custom commands"
msgstr "カスタムコマンドの実行"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:579
#, fuzzy
msgid "To execute a custom command, or a command not supported by the API, use the following approach:"
msgstr "カスタムコマンドやAPIでサポートされていないコマンドを実行するには、以下の方法を使用します。"

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:587
#, no-wrap
msgid "Response response = ds.execute(\"my-command\", param1, param2, param3);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:593
#, fuzzy
msgid "The `execute` method sends the command to Redis and retrieves the `Response`.  The command name is passed as first parameters.  You can add an arbitrary number of **String** parameters to your command.  The result is wrapped into a `Response` object."
msgstr " `execute` メソッドは、Redis にコマンドを送信し、 `Response` を取得します。 最初のパラメータとして、コマンド名が渡されます。コマンドには、任意の数の *String* パラメータを追加することができます。結果は、 `Response` オブジェクトにラップされます。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:595
#, fuzzy
msgid "The reactive variant returns a `Uni<Response>`."
msgstr "reactive variant は `Uni<Response>` を返します。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:597
#, fuzzy
msgid "You can also execute custom command in a transaction."
msgstr "また、トランザクション内でカスタムコマンドを実行することも可能です。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:598
#, fuzzy, no-wrap
msgid "Vert.x Redis Client"
msgstr "Vert.x Redisクライアント"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:602
msgid "In addition to the high-level API, you can use the Vertx Redis clients directly in your code.  The documentation of the Vert.x Redis Client is available on the https://vertx.io/docs/vertx-redis-client/java/[Vert.x Web Site]."
msgstr ""

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:603
#, no-wrap
msgid "Redis Health Check"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:606
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-redis` will automatically add a readiness health check to validate the connection to the Redis server."
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:608
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr "そのため、アプリケーションの `/q/health/ready` エンドポイントにアクセスすると、接続の検証状況に関する情報が表示されます。"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:610
msgid "This behavior can be disabled by setting the `quarkus.redis.health.enabled` property to `false` in your `application.properties`."
msgstr "この動作は、 `application.properties` の `quarkus.redis.health.enabled` プロパティーを `false` に設定することで無効にできます。"

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:611
#, no-wrap
msgid "Providing Redis Hosts Programmatically"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:615
msgid "The `RedisHostsProvider` programmatically provides redis hosts.  This allows for configuration of properties like redis connection password coming from other sources."
msgstr ""

#. type: delimited block =
#: upstream/_guides/redis-reference.adoc:619
msgid "This is useful as it removes the need to store sensitive data in application.properties."
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:633
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Identifier(\"hosts-provider\") // the name of the host provider\n"
"public class ExampleRedisHostProvider implements RedisHostsProvider {\n"
"    @Override\n"
"    public Set<URI> getHosts() {\n"
"        // do stuff to get the host\n"
"        String host = \"redis://localhost:6379/3\";\n"
"        return Collections.singleton(URI.create(host));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:636
msgid "The host provider can be used to configure the redis client like shown below"
msgstr ""

#. type: delimited block -
#: upstream/_guides/redis-reference.adoc:640
#, no-wrap
msgid "quarkus.redis.hosts-provider-name=hosts-provider\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/redis-reference.adoc:642
#, no-wrap
msgid "Dev Services"
msgstr "Dev Services"

#. type: Plain text
#: upstream/_guides/redis-reference.adoc:645
msgid "See link:redis-dev-services.adoc[Redis Dev Service]."
msgstr ""

#. type: Title ==
#: upstream/_guides/redis-reference.adoc:647
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#~ msgid "How to use custom Redis Commands"
#~ msgstr "Redisのカスタムコマンドの使い方"

#~ msgid "As the list of commands which are supported out-of-box by both https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] and https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`] depends on what is available in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`], then there might be case when you need a command which is not (yet) available via https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]."
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`]と  link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`]の両方でサポートされているコマンドのリストは link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]で利用可能なものに依存するため、場合によっては link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] で利用できないコマンドが必要になる場合があります。"

#~ msgid "In such case (if you don't want to wait for the new command to be supported in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]), you can implement it in either https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] or https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`].  In order to do so, you will need:"
#~ msgstr "このような場合（新しいコマンドが link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]でサポートされるのを待ちたくない場合）は、 link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`]または link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`] のいずれかで実装できます。 そのためには、以下のものが必要となります。"

#~ msgid "Generate a new `Command` based on the nodejs code available in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] repository:"
#~ msgstr "link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]リポジトリで公開されているnodejsのコードに基づいて、新しい `Command` を生成"

#~ msgid "If you don't have a Redis service running locally, you can run Redis in a Docker container:"
#~ msgstr "Redisのサービスをローカルで実行していない場合は、DockerコンテナでRedisを実行することができます。"

#~ msgid "Next, while being in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] root folder execute:"
#~ msgstr "次に、link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] ルートフォルダにいる状態で 次を実行します:"

#~ msgid "The above sequence of commands should update the https://github.com/vert-x3/vertx-redis-client/blob/master/src/main/java/io/vertx/redis/client/Command.java[`Command.java`] file, so it includes all the possible commands supported by a particular Redis version."
#~ msgstr "上記の一連のコマンドは、link:https://github.com/vert-x3/vertx-redis-client/blob/master/src/main/java/io/vertx/redis/client/Command.java[`Command.java`]ファイルを更新し、特定のRedisバージョンでサポートされるすべてのコマンドが含まれるようになります。"

#~ msgid "This definition is very important as we will have to use it in the service.  Once we have this `Command` we can start to update the redis-client extension by:"
#~ msgstr "この定義は、サービスの中で使用する必要があるため、非常に重要です。この `Command` ができたら、redis-client extension を以下のように更新していきます。"

#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] interface, i.e.:"
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`]インターフェイスを更新、つまり"

#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientImpl.java[`RedisClientImpl`], i.e.:"
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientImpl.java[`RedisClientImpl`]を更新、すなわち"

#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`] interface, i.e.:"
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`]インターフェイスを更新、つまり"

#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/ReactiveRedisClientImpl.java[`ReactiveRedisClientImpl`], i.e.:"
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/ReactiveRedisClientImpl.java[`ReactiveRedisClientImpl`]を更新、すなわち"

#~ msgid "Please note that it's using the `MutinyRedis` class which does asynchronous calls to Redis."
#~ msgstr "Redisへの非同期呼び出しを行う `MutinyRedis` クラスを使用していることに注目してください。"
