# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-10-06 08:09+0000\n"
"PO-Revision-Date: 2021-04-04 21:04+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/vault.adoc:6
#, fuzzy, no-wrap
#| msgid "Quarkus - Using HashiCorp Vault"
msgid "Using HashiCorp Vault"
msgstr "HashiCorp Vaultの使用"

#. type: Plain text
#: upstream/_guides/vault.adoc:22
msgid "https://www.vaultproject.io/[HashiCorp Vault] is a multi-purpose tool aiming at protecting sensitive data, such as credentials, certificates, access tokens, encryption keys, ... In the context of Quarkus, several use cases are supported:"
msgstr "link:https://www.vaultproject.io/[HashiCorp Vault] は、クレデンシャル、証明書、アクセストークン、暗号化キーなどの機密データの保護を目的とした多目的ツールです。"

#. type: Plain text
#: upstream/_guides/vault.adoc:25
msgid "mounting a map of properties stored into the https://www.vaultproject.io/docs/secrets/kv/index.html[Vault kv secret engine] as an Eclipse MicroProfile config source"
msgstr "link:https://www.vaultproject.io/docs/secrets/kv/index.html[Vault kv シークレットエンジン] に保存されたプロパティーのマップを Eclipse MicroProfile の設定ソースとしてマウントします。"

#. type: Plain text
#: upstream/_guides/vault.adoc:26
msgid "fetching credentials from Vault when configuring an Agroal datasource, as documented in the {vault-datasource-guide}"
msgstr "Agroal データソースを構成する際に、{vault-datasource-guide} で説明されているように、Vault から資格情報をフェッチします。"

#. type: Plain text
#: upstream/_guides/vault.adoc:27
msgid "accessing Vault _kv secret engine_ programmatically"
msgstr "Vault _kv のシークレットエンジンに_ プログラムでアクセスする"

#. type: Plain text
#: upstream/_guides/vault.adoc:28
msgid "support for the https://www.vaultproject.io/docs/secrets/totp[TOTP Secret Engine]"
msgstr "link:https://www.vaultproject.io/docs/secrets/totp[TOTPシークレットエンジン] のサポート"

#. type: Plain text
#: upstream/_guides/vault.adoc:30
msgid "support for the https://www.vaultproject.io/docs/secrets/transit[Transit Secret Engine] as documented in the {vault-transit-guide}"
msgstr "link:https://www.vaultproject.io/docs/secrets/transit[トランジットシークレットエンジン] のサポートは {vault-transit-guide} で文書化されています。"

#. type: Plain text
#: upstream/_guides/vault.adoc:32
#, fuzzy
#| msgid "support for the https://www.vaultproject.io/docs/secrets/transit[Transit Secret Engine] as documented in the {vault-transit-guide}"
msgid "support for the https://www.vaultproject.io/docs/secrets/pki[PKI Secret Engine] as documented in the {vault-pki-guide}"
msgstr "link:https://www.vaultproject.io/docs/secrets/transit[トランジットシークレットエンジン] のサポートは {vault-transit-guide} で文書化されています。"

#. type: Plain text
#: upstream/_guides/vault.adoc:33
msgid "support for several authentication methods as documented in the {vault-auth-guide}"
msgstr "{vault-auth-guide} で説明されているように、いくつかの認証方法をサポート"

#. type: Plain text
#: upstream/_guides/vault.adoc:36
msgid "Under the hood, the Quarkus Vault extension takes care of authentication when negotiating a client Vault token plus any transparent token or lease renewals according to _ttl_ and _max-ttl._"
msgstr "Quarkus Vaultエクステンションでは、クライアントのVaultトークンをネゴシエートする際の認証と、 _ttl_ と _max-ttl_ に応じた透過的なトークンやリースの更新を行います"

#. type: Title ==
#: upstream/_guides/vault.adoc:39
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/vault.adoc:42
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/vault.adoc:44
msgid "roughly 20 minutes"
msgstr "ざっと20分"

#. type: Plain text
#: upstream/_guides/vault.adoc:45
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/vault.adoc:46
#, fuzzy
#| msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_guides/vault.adoc:47
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_guides/vault.adoc:48
msgid "Docker installed"
msgstr "Dockerがインストールされていること"

#. type: Title ==
#: upstream/_guides/vault.adoc:49
#, no-wrap
msgid "Starting Vault"
msgstr "Vaultの起動"

#. type: delimited block =
#: upstream/_guides/vault.adoc:54
#, fuzzy
msgid "Using <<dev-services,Dev Services>>, Quarkus will take care of starting Vault in dev and test mode."
msgstr "link:#dev-services[DevServices]を使用することで、QuarkusはdevおよびtestモードでのVaultの起動を担当します。"

#. type: Plain text
#: upstream/_guides/vault.adoc:57
msgid "Let's start Vault in development mode:"
msgstr "開発モードでVaultを起動してみましょう。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:61
#, no-wrap
msgid "docker run --rm --cap-add=IPC_LOCK -e VAULT_ADDR=http://localhost:8200 -p 8200:8200 -d --name=dev-vault vault:{vault-version}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:64
msgid "You can check that vault is running with:"
msgstr "次のコマンドでVaultが実行されていることを確認することができます。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:67
#, no-wrap
msgid "docker logs dev-vault\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:70 upstream/_guides/vault.adoc:206
#: upstream/_guides/vault.adoc:234 upstream/_guides/vault.adoc:333
#: upstream/_guides/vault.adoc:383
msgid "You should see:"
msgstr "次のような出力が得られるはずです。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:74
#, no-wrap
msgid "==> Vault server configuration:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:83
#, no-wrap
msgid ""
"             Api Address: http://0.0.0.0:8200\n"
"                     Cgo: disabled\n"
"         Cluster Address: https://0.0.0.0:8201\n"
"              Listener 1: tcp (addr: \"0.0.0.0:8200\", cluster address: \"0.0.0.0:8201\", max_request_duration: \"1m30s\", max_request_size: \"33554432\", tls: \"disabled\")\n"
"               Log Level: info\n"
"                   Mlock: supported: true, enabled: false\n"
"                 Storage: inmem\n"
"                 Version: Vault v{vault-version}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:87
#, no-wrap
msgid ""
"WARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory\n"
"and starts unsealed with a single unseal key. The root token is already\n"
"authenticated to the CLI, so you can immediately begin using Vault.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:89
#, no-wrap
msgid "You may need to set the following environment variable:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:91
#, no-wrap
msgid "    $ export VAULT_ADDR='http://0.0.0.0:8200'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:94
#, no-wrap
msgid ""
"The unseal key and root token are displayed below in case you want to\n"
"seal/unseal the Vault or re-authenticate.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:97
#, no-wrap
msgid ""
"Unseal Key: 0lZ2/vzpa92pH8gersSn2h9b5tmzd4m5sqIdMC/4PDs=\n"
"Root Token: {root-token}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:99
#, no-wrap
msgid "Development mode should NOT be used in production installations!\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:101
#, no-wrap
msgid "==> Vault server started! Log data will stream in below:\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:104
msgid "In development mode, Vault gets configured with several options that makes it convenient:"
msgstr "開発モードでは、Vaultはそれを便利にするいくつかのオプションが設定されます。"

#. type: Plain text
#: upstream/_guides/vault.adoc:107
msgid "Vault is already initialized with one key share (whereas in normal mode this has to be done explicitly and the number of key shares is 5 by default)"
msgstr "Vault はすでに 1 つのキーシェアで初期化されています (通常のモードではこれは明示的に行う必要があり、キーシェアの数はデフォルトでは 5 となっています)。"

#. type: Plain text
#: upstream/_guides/vault.adoc:109
msgid "the unseal key and the root token are displayed in the logs (please write down the root token, we will need it in the following step)"
msgstr "unseal キーと root トークンがログに表示されます (root トークンは次のステップで必要になるのでメモしておいてください)"

#. type: Plain text
#: upstream/_guides/vault.adoc:110
#, fuzzy
msgid "Vault is unsealed"
msgstr "Vaultの封印が解除されています"

#. type: Plain text
#: upstream/_guides/vault.adoc:111
msgid "in-memory storage"
msgstr "インメモリストレージ"

#. type: Plain text
#: upstream/_guides/vault.adoc:112
msgid "TLS is disabled"
msgstr "TLSは無効化"

#. type: Plain text
#: upstream/_guides/vault.adoc:113
msgid "a _kv secret engine v2_ is mounted at `secret/`"
msgstr "_kvシークレットエンジン v2_ `secret/` にマウントされています"

#. type: delimited block =
#: upstream/_guides/vault.adoc:119
#, fuzzy
msgid "By default Quarkus assumes that a _kv secret engine_ in version *2* mounted at path `secret/` will be used.  If that is not the case, please use properties `quarkus.vault.kv-secret-engine-version` and `quarkus.vault.kv-secret-engine-mount-path` accordingly."
msgstr "デフォルトでは、Quarkusは、パス `secret/` にマウントされたバージョン *2* の _kvシークレットエンジン_ が使用されると想定しています。そうでない場合は、プロパティー `quarkus.vault.kv-secret-engine-version` と `quarkus.vault.kv-secret-engine-mount-path` を適宜使用してください。"

#. type: Plain text
#: upstream/_guides/vault.adoc:123
#, fuzzy
msgid "In the following step, we are going to add a `userpass` authentication that we will use from the Quarkus application, to access a secret stored in the _kv secret engine_."
msgstr "次のステップでは、Quarkusアプリケーションから使用する `userpass` 認証を追加して、 _kv秘密エンジン_ に保存されている秘密にアクセスします。"

#. type: Plain text
#: upstream/_guides/vault.adoc:125
msgid "First open a shell inside the vault container:"
msgstr "まず、Vaultのコンテナの中の貝殻を開けます。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:129
#, no-wrap
msgid "docker exec -it dev-vault sh\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:132
#, fuzzy
msgid "Set the `VAULT_TOKEN` with the value that was printed in the logs:"
msgstr "`VAULT_TOKEN` に、ログに印刷されていた値を設定します。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:136
#, no-wrap
msgid "export VAULT_TOKEN={root-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:139
#, fuzzy
msgid "You can check Vault's status using the CLI command `vault status`:"
msgstr "Vault のステータスは、CLI コマンドを使用して確認できます `vault status` ."

#. type: delimited block -
#: upstream/_guides/vault.adoc:153
#, no-wrap
msgid ""
"Key             Value\n"
"---             -----\n"
"Seal Type       shamir\n"
"Initialized     true\n"
"Sealed          false\n"
"Total Shares    1\n"
"Threshold       1\n"
"Version         1.6.0\n"
"Cluster Name    vault-cluster-b07e80d8\n"
"Cluster ID      55bd74b6-eaaf-3862-f7ce-3473ab86c57f\n"
"HA Enabled      false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:156
#, fuzzy
msgid "Now let's add a secret configuration for our application:"
msgstr "では、アプリケーションに秘密の設定を追加してみましょう。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:160
#, no-wrap
msgid "vault kv put secret/myapps/vault-quickstart/config a-private-key=123456\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:163
#, fuzzy
msgid "We have defined a path `secret/myapps/vault-quickstart` in Vault that we need to give access to from the Quarkus application."
msgstr "Vaultでは、Quarkusアプリケーションからアクセスできるようにする必要があるパス `secret/myapps/vault-quickstart` を定義しました。"

#. type: Plain text
#: upstream/_guides/vault.adoc:165
#, fuzzy
msgid "Create a policy that gives read access to `secret/myapps/vault-quickstart` and subpaths:"
msgstr "`secret/myapps/vault-quickstart` とサブパスへの読み取りアクセスを与えるポリシーを作成します。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:173
#, no-wrap
msgid ""
"cat <<EOF | vault policy write vault-quickstart-policy -\n"
"path \"secret/data/myapps/vault-quickstart/*\" {\n"
"  capabilities = [\"read\"]\n"
"}\n"
"EOF\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/vault.adoc:183
#, fuzzy
msgid "When using a _kv secret engine version 2_, secrets are written and fetched at path `<mount>/*data*/<secret-path>` as opposed to `<mount>/<secret-path>` in a _kv secret engine version 1_.  It does not change any of the CLI commands (i.e. you do not specify `data` in your path).  However it does change the policies, since capabilities are applied to the real path. In the example above, the path is `secret/*data*/myapps/vault-quickstart/\\*` since we are working with a _kv secret engine version 2_.  It would be `secret/myapps/vault-quickstart/*` with a _kv secret engine version 1_."
msgstr "_kvシークレットエンジンバージョン2を_ 使用している場合、シークレットはパス `<mount>/ *data* /<secret-path>` とは対照的に、 _kvシークレットエンジンのバージョン1_ では `<mount>/<secret-path>` となります。これはCLIコマンドを変更しません(つまり、パスに `data` を指定しません)。しかし、実際のパスに能力が適用されるので、ポリシーは変更されます。上の例では、パスは `secret/ *data* /myapps/vault-quickstart/*` 私たちはKVシーク _レットエンジンバージョン2_ で作業しています。それは _kvシークレットエンジンバージョン1_ で `secret/myapps/vault-quickstart/*` になるでしょう。"

#. type: Plain text
#: upstream/_guides/vault.adoc:186
#, fuzzy
msgid "And finally, let's enable the _userpass auth secret engine_, and create user `bob` with access to the `vault-quickstart-policy`:"
msgstr "最後に、 _userpass auth シークレットエンジンを_ 有効にして、 `bob` にアクセスできるユーザー `vault-quickstart-policy` を作成してみましょう。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:191
#, no-wrap
msgid ""
"vault auth enable userpass\n"
"vault write auth/userpass/users/bob password=sinclair policies=vault-quickstart-policy\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/vault.adoc:196
#, fuzzy
msgid "Quarkus supports additional Vault Authentication methods. Check the {vault-auth-guide} for details."
msgstr "Quarkusは、追加のVault認証方法をサポートしています。詳細については、{vault-auth-guide}を確認してください。"

#. type: Plain text
#: upstream/_guides/vault.adoc:199
#, fuzzy
msgid "To check that the configuration is correct, try logging in:"
msgstr "設定が正しいことを確認するには、ログインしてみてください。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:203
#, no-wrap
msgid "vault login -method=userpass username=bob password=sinclair\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:212
#, no-wrap
msgid ""
"Success! You are now authenticated. The token information displayed below\n"
"is already stored in the token helper. You do NOT need to run \"vault login\"\n"
"again. Future Vault requests will automatically use this token.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:223
#, no-wrap
msgid ""
"Key                    Value\n"
"---                    -----\n"
"token                  {client-token}\n"
"token_accessor         OKNipTAgxWbxsrjixASNiwdY\n"
"token_duration         768h\n"
"token_renewable        true\n"
"token_policies         [\"default\" \"vault-quickstart-policy\"]\n"
"identity_policies      []\n"
"policies               [\"default\" \"vault-quickstart-policy\"]\n"
"token_meta_username    bob\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:226
#, fuzzy
msgid "Now set `VAULT_TOKEN` to the `token` above (instead of the root token), and try reading the vault-quickstart secret config:"
msgstr "では、上記の `VAULT_TOKEN` を (ルートトークンではなく) `token` に設定し、Vault-quickstart の秘密設定を読み込んでみてください。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:231
#, no-wrap
msgid ""
"export VAULT_TOKEN={client-token}\n"
"vault kv get secret/myapps/vault-quickstart/config\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:241
#, no-wrap
msgid ""
"======== Data ========\n"
"Key              Value\n"
"---              -----\n"
"a-private-key    123456\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/vault.adoc:243
#, fuzzy, no-wrap
msgid "Create a Quarkus application with a secret configuration"
msgstr "秘密の設定でQuarkusアプリケーションを作成する"

#. type: delimited block -
#: upstream/_guides/vault.adoc:254
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vault-quickstart \\\n"
"    -DclassName=\"org.acme.quickstart.GreetingResource\" \\\n"
"    -Dpath=\"/hello\" \\\n"
"    -Dextensions=\"resteasy,vault\"\n"
"cd vault-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:258
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `vault` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `vault` エクステンションを追加することができます。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:262
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"vault\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:265
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_guides/vault.adoc:272
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vault</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:275
#, fuzzy
msgid "Configure access to Vault from the `{config-file}`:"
msgstr "`{config-file}` から Vault へのアクセスを設定します。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:280
#, no-wrap
msgid ""
"# vault url\n"
"quarkus.vault.url=http://localhost:8200\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:284
#, no-wrap
msgid ""
"# vault authentication\n"
"quarkus.vault.authentication.userpass.username=bob\n"
"quarkus.vault.authentication.userpass.password=sinclair\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:287
#, no-wrap
msgid ""
"# path within the kv secret engine where is located the vault-quickstart secret configuration\n"
"quarkus.vault.secret-config-kv-path=myapps/vault-quickstart/config\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/vault.adoc:292
#, fuzzy
msgid "Using <<dev-services,Dev Services>>, Quarkus will take care of configuring the Vault connection in dev and test mode."
msgstr "link:#dev-services[DevServices]を使用することで、QuarkusはdevおよびtestモードでのVault接続の設定を行います。"

#. type: Plain text
#: upstream/_guides/vault.adoc:295
#, fuzzy
msgid "This should mount whatever keys are stored in `secret/myapps/vault-quickstart` as Config properties."
msgstr "これは、 `secret/myapps/vault-quickstart` に保存されているすべてのキーを MicroProfile Config プロパティーとしてマウントする必要があります。"

#. type: Plain text
#: upstream/_guides/vault.adoc:297
#, fuzzy
msgid "Let's verify that by adding a new endpoint in GreetingResource:"
msgstr "GreetingResourceに新しいエンドポイントを追加して検証してみましょう。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:302
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:305
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"a-private-key\")\n"
"    String privateKey;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:307
#, no-wrap
msgid "    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:315
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/private-key\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String privateKey() {\n"
"        return privateKey;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:318
msgid "Now compile the application and run it:"
msgstr "では、アプリケーションをコンパイルして実行してみましょう。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:323
#, no-wrap
msgid ""
"./mvnw clean install\n"
"java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:326
msgid "Finally test the new endpoint:"
msgstr "最後に新しいエンドポイントをテストします。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:330
#, no-wrap
msgid "curl http://localhost:8080/hello/private-key\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:337
#, no-wrap
msgid "123456\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/vault.adoc:344
#, fuzzy
msgid "The _Vault Config Source_ is configured with ordinal `270`, which is higher than the file system or jar ordinals, but lower than environment variables.  This value can be changed using property `quarkus.vault.config-ordinal`."
msgstr "MicroProfile _Vault Config Source_は、ファイルシステムや jar の序列よりも高く、環境変数よりも低い序列 `270` で構成されています。この値は、プロパティ `quarkus.vault.config-ordinal` を使用して変更できます。"

#. type: Title ==
#: upstream/_guides/vault.adoc:346
#, fuzzy, no-wrap
msgid "Programmatic access to the KV secret engine"
msgstr "KVシークレットエンジンへのプログラムによるアクセス"

#. type: Plain text
#: upstream/_guides/vault.adoc:351
#, fuzzy
msgid "Sometimes secrets are retrieved from an arbitrary path that is known only at runtime through an application specific property, or a method argument for instance.  In that case it is possible to inject a Quarkus `VaultKVSecretEngine`, and retrieve secrets programmatically."
msgstr "秘密は、アプリケーション固有のプロパティーやメソッドの引数などを介して、実行時にのみ知られている任意のパスから取得されることがあります。その場合は、Quarkus `VaultKVSecretEngine` を注入して、プログラムで秘密を取得することが可能です。"

#. type: Plain text
#: upstream/_guides/vault.adoc:353
#, fuzzy
msgid "For instance, in `GreetingResource`, add:"
msgstr "例えば、 `GreetingResource` で、追加します。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:358
#, no-wrap
msgid ""
"@Inject\n"
"VaultKVSecretEngine kvSecretEngine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:360 upstream/_guides/vault.adoc:488
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:367
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/secrets/{vault-path}\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String getSecrets(@PathParam(\"vault-path\") String vaultPath) {\n"
"    return kvSecretEngine.readSecret(\"myapps/vault-quickstart/\" + vaultPath).toString();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:370
#, fuzzy
msgid "Add a new key in Vault:"
msgstr "Vaultに新しいキーを追加します。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:373
#, no-wrap
msgid "vault kv put secret/myapps/vault-quickstart/private mysecret=abc\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:376
#, fuzzy
msgid "Restart the application after rebuilding it, and test it with the new endpoint:"
msgstr "アプリケーションを再構築した後にアプリケーションを再起動し、新しいエンドポイントでテストします。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:380
#, no-wrap
msgid "curl http://localhost:8080/hello/secrets/private\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:386
#, no-wrap
msgid "{mysecret=abc}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/vault.adoc:389
#, fuzzy, no-wrap
msgid "TOTP Secrets Engine"
msgstr "TOTPシークレットエンジン"

#. type: Plain text
#: upstream/_guides/vault.adoc:392
#, fuzzy
msgid "The https://www.vaultproject.io/docs/secrets/totp/[Vault TOTP secrets engine] generates time-based credentials according to the TOTP standard."
msgstr "link:https://www.vaultproject.io/docs/secrets/totp/[Vault TOTP シークレットエンジンは] 、TOTP 標準に従って時間ベースのクレデンシャルを生成します。"

#. type: Plain text
#: upstream/_guides/vault.adoc:394
#, fuzzy
msgid "Vault TOTP supports both the generator scenario (like Google Authenticator) and the provider scenario (like the Google.com sign in)."
msgstr "Vault TOTPは、ジェネレーターのシナリオ(Google Authenticatorのような)とプロバイダのシナリオ(Google.comのサインインのような)の両方をサポートしています。"

#. type: Plain text
#: upstream/_guides/vault.adoc:396
#, fuzzy
msgid "The Vault extension integrates with the Vault TOTP secret engine by providing an `io.quarkus.vault.VaultTOTPSecretEngine` class."
msgstr "Vault エクステンションは、 `io.quarkus.vault.VaultTOTPSecretEngine` クラスを提供することで、Vault TOTP シークレットエンジンと統合されます。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:403
#, no-wrap
msgid ""
"import io.quarkus.vault.VaultTOTPSecretEngine;\n"
"import io.quarkus.vault.secrets.totp.CreateKeyParameters;\n"
"import io.quarkus.vault.secrets.totp.KeyConfiguration;\n"
"import io.quarkus.vault.secrets.totp.KeyDefinition;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:406
#, no-wrap
msgid ""
"@Inject\n"
"VaultTOTPSecretEngine vaultTOTPSecretEngine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:409
#, no-wrap
msgid ""
"CreateKeyParameters createKeyParameters = new CreateKeyParameters(\"Google\", \"test@gmail.com\");\n"
"createKeyParameters.setPeriod(\"30m\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:411
#, no-wrap
msgid "/** Google Authentication logic */\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:414
#, no-wrap
msgid ""
"final Optional<KeyDefinition> myKey = vaultTOTPSecretEngine\n"
"                                            .createKey(\"my_key_2\", createKeyParameters); // <1> <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:416
#, no-wrap
msgid "final String keyCode = vaultTOTPSecretEngine.generateCode(\"my_key_2\"); // <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:418
#, no-wrap
msgid "/** Google Login logic */\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:420
#, no-wrap
msgid "boolean valid = vaultTOTPSecretEngine.validateCode(\"my_key_2\", keyCode); // <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:422
#, fuzzy
msgid "Create a key to generate codes."
msgstr "コードを生成するキーを作成します。"

#. type: Plain text
#: upstream/_guides/vault.adoc:423
#, fuzzy
msgid "`KeyDefinition` class contains an embeddable base64 QR code that can be used by third-party code generators."
msgstr "`KeyDefinition` クラスには、サードパーティのコードジェネレーターが使用できる埋め込み可能なbase64 QRコードが含まれています。"

#. type: Plain text
#: upstream/_guides/vault.adoc:424
#, fuzzy
msgid "Generates a code (not using third-party generator)."
msgstr "コードを生成します(サードパーティ製のジェネレータは使用しません)。"

#. type: Plain text
#: upstream/_guides/vault.adoc:425
#, fuzzy
msgid "Validates that the code is valid."
msgstr "コードが有効であることを検証します。"

#. type: Title ==
#: upstream/_guides/vault.adoc:426
#, no-wrap
msgid "Vault Health Check"
msgstr "Vault ヘルスチェック"

#. type: Plain text
#: upstream/_guides/vault.adoc:430
#, fuzzy
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-vault` can add a readiness health check to validate the connection to the Vault server. This is disabled by default."
msgstr "`quarkus-smallrye-health` エクステンションを使用している場合、 `quarkus-vault` は、Vault サーバーへの接続を検証するための準備状態の健全性チェックを追加することができます。これは、既定では無効になっています。"

#. type: Plain text
#: upstream/_guides/vault.adoc:432
#, fuzzy
msgid "If enabled, when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr "この機能を有効にすると、アプリケーションの `/q/health/ready` エンドポイントにアクセスしたときに、接続の検証状態に関する情報が表示されます。"

#. type: Plain text
#: upstream/_guides/vault.adoc:434
#, fuzzy
msgid "This behavior can be enabled by setting the `quarkus.vault.health.enabled` property to `true` in your `application.properties`."
msgstr "この動作を有効にするには、 `application.properties` の `quarkus.vault.health.enabled` プロパティーを `true` に設定します。"

#. type: Plain text
#: upstream/_guides/vault.adoc:436
#, fuzzy
msgid "Only if Vault is initialized, unsealed and active, the health endpoint returns that Vault is ready to serve requests."
msgstr "Vault が初期化され、シールドされておらず、アクティブな場合に限り、ヘルス エンドポイントは、Vault がリクエストに対応する準備ができていることを返します。"

#. type: Plain text
#: upstream/_guides/vault.adoc:438
#, fuzzy
msgid "You can change a bit this behaviour by using `quarkus.vault.health.stand-by-ok` and `quarkus.vault.health.performance-stand-by-ok` to `true` in your `application.properties`."
msgstr "あなたの `quarkus.vault.health.stand-by-ok` と `quarkus.vault.health.performance-stand-by-ok` を `true` にすることで、この動作を少し変更することができます `application.properties` ."

#. type: Labeled list
#: upstream/_guides/vault.adoc:439
#, fuzzy, no-wrap
msgid "stand-by-ok"
msgstr "スタンバイオク"

#. type: Plain text
#: upstream/_guides/vault.adoc:440
#, fuzzy
msgid "Specifies if being a standby should still return the active status code instead of the standby status code."
msgstr "待機中であっても、待機状態コードではなくアクティブ状態コードを返すかどうかを指定します。"

#. type: Labeled list
#: upstream/_guides/vault.adoc:441
#, fuzzy, no-wrap
msgid "performance-stand-by-ok"
msgstr "パフォーマンステックバイオク"

#. type: Plain text
#: upstream/_guides/vault.adoc:442
#, fuzzy
msgid "Specifies if being a performance standby should still return the active status code instead of the performance standby status code."
msgstr "パフォーマンス待機状態であっても、パフォーマンス待機状態コードではなくアクティブ状態コードを返すかどうかを指定します。"

#. type: Plain text
#: upstream/_guides/vault.adoc:444
#, fuzzy
msgid "You can inject `io.quarkus.vault.VaultSystemBackendEngine` to run system operations programmatically."
msgstr "`io.quarkus.vault.VaultSystemBackendEngine` を注入して、システム操作をプログラム的に実行することができます。"

#. type: Plain text
#: upstream/_guides/vault.adoc:446
#, fuzzy
msgid "When the readiness probe is failing in Kubernetes, then the application is not reachable. This means that if Vault is failing, all services depending on Vault will become unreachable and maybe this is not the desired state, so use this flag according to your requirements."
msgstr "KubernetesでReadyness probeが失敗している場合、アプリケーションに到達できない状態になります。これは、Vaultが失敗しているとVaultに依存している全てのサービスが到達不能になることを意味しており、もしかしたらこれは望ましい状態ではないかもしれないので、要件に応じてこのフラグを使いましょう。"

#. type: Title ==
#: upstream/_guides/vault.adoc:447
#, no-wrap
msgid "TLS"
msgstr "TLS"

#. type: Plain text
#: upstream/_guides/vault.adoc:450
#, fuzzy
msgid "In production mode, TLS should be activated between the Quarkus application and Vault to prevent _man-in-the-middle_ attacks."
msgstr "本番モードでは、 _中間_ 者攻撃を防ぐために、QuarkusアプリケーションとVaultの間でTLSを有効にする必要があります。"

#. type: Plain text
#: upstream/_guides/vault.adoc:452
#, fuzzy
msgid "There are several ways to configure the Quarkus application:"
msgstr "Quarkusアプリケーションを設定する方法はいくつかあります。"

#. type: Plain text
#: upstream/_guides/vault.adoc:455
#, fuzzy
msgid "through the standard `javax.net.ssl.trustStore` system property, which should refer to a JKS truststore containing the trusted certificates"
msgstr "`javax.net.ssl.trustStore` このプロパティーは、信頼された証明書を含む JKS truststore を参照しなければなりません。"

#. type: Plain text
#: upstream/_guides/vault.adoc:456
#, fuzzy
msgid "using property `quarkus.vault.tls.ca-cert`, which should refer to a pem encoded file."
msgstr "プロパティー `quarkus.vault.tls.ca-cert` を使用します。"

#. type: Plain text
#: upstream/_guides/vault.adoc:461
#, fuzzy
msgid "If `quarkus.vault.tls.ca-cert` is not set and the Quarkus application is using the Kubernetes authentication, TLS will be active and use the CA certificate bundle located in `/var/run/secrets/kubernetes.io/serviceaccount/ca.crt`.  If you want to disable this behavior (for instance when using a trust store), you need to set it explicitly using: `quarkus.vault.tls.use-kubernetes-ca-cert=false`."
msgstr "`quarkus.vault.tls.ca-cert` が設定されておらず、QuarkusアプリケーションがKubernetes認証を使用している場合、TLSがアクティブになり、 `/var/run/secrets/kubernetes.io/serviceaccount/ca.crt` にあるCA証明書バンドルが使用されます。この動作を無効にしたい場合(例えば、トラストストアを使用している場合など)は、 `quarkus.vault.tls.use-kubernetes-ca-cert=false` を使用して明示的に設定する必要があります。"

#. type: Plain text
#: upstream/_guides/vault.adoc:465
#, fuzzy
msgid "The last relevant property is `quarkus.vault.tls.skip-verify`, which allows to communicate with Vault using TLS, but without checking the certificate authenticity. This may be convenient in development, but is strongly discouraged in production as it is not more secure than talking to Vault in plain HTTP."
msgstr "最後の関連プロパティーは `quarkus.vault.tls.skip-verify` で、これは TLS を使用して Vault と通信することができますが、証明書の真正性をチェックする必要はありません。これは、 開発では便利かもしれませんが、本番環境では、プレーン HTTP で Vault と通信するよりも安全ではないため、強くお勧めしません。"

#. type: Title ==
#: upstream/_guides/vault.adoc:466
#, fuzzy, no-wrap
msgid "Vault Provisioning"
msgstr "保管庫のプロビジョニング"

#. type: Plain text
#: upstream/_guides/vault.adoc:470
#, fuzzy
msgid "Beside the typical client use cases, the Quarkus extension can be used to provision Vault as well, for instance as part of a CD pipeline. Specific CDI beans and operations support this scenario:"
msgstr "Quarkusエクステンションは、典型的なクライアントのユースケースのほかに、例えばCDパイプラインの一部としてVaultのプロビジョニングにも使用できます。特定のCDI Beanと操作がこのシナリオをサポートしています。"

#. type: Plain text
#: upstream/_guides/vault.adoc:472
#, fuzzy
msgid "`VaultSystemBackendEngine`: create Vault Policies. See the https://www.vaultproject.io/api-docs/system/policy[Vault documentation]."
msgstr "`VaultSystemBackendEngine` : Vault ポリシーを作成します。V link:https://www.vaultproject.io/api-docs/system/policy[ault のドキュメント] を参照してください。"

#. type: Plain text
#: upstream/_guides/vault.adoc:473
#, fuzzy
msgid "`VaultKubernetesAuthService`. See the https://www.vaultproject.io/api-docs/auth/kubernetes[Vault documentation]."
msgstr "`VaultKubernetesAuthService` 。 link:https://www.vaultproject.io/api-docs/auth/kubernetes[Vault のドキュメントを] 参照してください。"

#. type: Plain text
#: upstream/_guides/vault.adoc:474
#, fuzzy
msgid "Configure the Kubernetes Auth Method (Kubernetes host, certificates, keys, ...)"
msgstr "Kubernetes認証方法の設定(Kubernetesホスト、証明書、鍵、..."

#. type: Plain text
#: upstream/_guides/vault.adoc:475
#, fuzzy
msgid "Create Kubernetes Auth Roles (association between Kubernetes service accounts, Kubernetes namespaces and Vault policies)"
msgstr "Kubernetes Authロールの作成(Kubernetesサービスアカウント、Kubernetesネームスペース、Vaultポリシー間の関連付け"

#. type: Plain text
#: upstream/_guides/vault.adoc:476
#, fuzzy
msgid "`VaultTransitSecretEngine`: _CRUD_ operations on keys. See the https://www.vaultproject.io/api-docs/secret/transit[Vault documentation]."
msgstr "`VaultTransitSecretEngine` _:_ 鍵に対する _CRUD_ 操作。 link:https://www.vaultproject.io/api-docs/secret/transit[Vault のドキュメント] を参照してください。"

#. type: Plain text
#: upstream/_guides/vault.adoc:478
#, fuzzy
msgid "For instance:"
msgstr "例えば"

#. type: delimited block -
#: upstream/_guides/vault.adoc:483
#, no-wrap
msgid ""
"@Inject\n"
"VaultSystemBackendEngine vaultSystemBackendEngine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:486
#, no-wrap
msgid ""
"@Inject\n"
"VaultKubernetesAuthService vaultKubernetesAuthService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:494
#, no-wrap
msgid ""
"  String rules = \"path \\\"transit/*\\\" {\\n\" +\n"
"          \"  capabilities = [ \\\"create\\\", \\\"read\\\", \\\"update\\\" ]\\n\" +\n"
"          \"}\";\n"
"  String policyName = \"sys-test-policy\";\n"
"  vaultSystemBackendEngine.createUpdatePolicy(policyName, rules);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:499
#, no-wrap
msgid ""
"  String roleName = \"test-auth-k8s\";\n"
"  List<String> boundServiceAccountNames = asList(\"vault-auth\");\n"
"  List<String> boundServiceAccountNamespaces = asList(\"default\");\n"
"  List<String> tokenPolicies = asList(policyName);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:504
#, no-wrap
msgid ""
"  vaultKubernetesAuthService.createRole(roleName, new VaultKubernetesAuthRole()\n"
"          .setBoundServiceAccountNames(boundServiceAccountNames)\n"
"          .setBoundServiceAccountNamespaces(boundServiceAccountNamespaces)\n"
"          .setTokenPolicies(tokenPolicies));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:508
#, fuzzy
msgid "Like any client, a provisioning program would have to authenticate using one of the supported Auth methods, and get the appropriate grants through one or more policies. Example:"
msgstr "他のクライアントと同様に、プロビジョニングプログラムはサポートされている Auth メソッドのいずれかを使って認証を行い、1つ以上のポリシーを使って適切なグラントを取得しなければなりません。例"

#. type: delimited block -
#: upstream/_guides/vault.adoc:515
#, no-wrap
msgid ""
"# create Policies\n"
"path \"sys/policy/*\" {\n"
"  capabilities = [\"read\", \"create\", \"update\", \"delete\"]\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:520
#, no-wrap
msgid ""
"# create Kubernetes Auth Roles\n"
"path \"auth/kubernetes/role/*\" {\n"
"  capabilities = [\"read\", \"create\", \"update\", \"delete\"]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:523
#, fuzzy
msgid "You should adjust to the minimal set of access rights depending on your specific use case."
msgstr "特定のユースケースに応じて、アクセス権の最小セットを調整する必要があります。"

#. type: Title ==
#: upstream/_guides/vault.adoc:525
#, fuzzy, no-wrap
msgid "Dev Services (Configuration Free Vault)"
msgstr "DevServices (Configuration Free Vault)"

#. type: Plain text
#: upstream/_guides/vault.adoc:531
#, fuzzy
msgid "Quarkus supports a feature called Dev Services that allows you to create various containers without any config.  What that means in practice is that if you have Docker running and have not configured `quarkus.vault.url`, Quarkus will automatically start a Vault container when running tests or in dev mode, and automatically configure the connection."
msgstr "QuarkusはDevServicesという機能をサポートしており、設定なしで様々なコンテナを作成することができます。実際にどういうことかというと、Dockerを起動していて、 `quarkus.vault.url` を設定していない場合、Quarkusはテスト実行時やdevモード時に自動的にVaultコンテナを起動し、自動的に接続を設定します。"

#. type: Plain text
#: upstream/_guides/vault.adoc:535
#, fuzzy
msgid "When running the production version of the application, the Vault connection needs to be configured as normal, so if you want to include a production Vault config in your `application.properties` and continue to use Dev Services we recommend that you use the `%prod.` profile to define your Vault connection settings."
msgstr "そのため、本番用の Vault 設定を `application.properties` に含めて、引き続き DevServices を使用したい場合は、 `%prod.` プロファイルを使用して Vault 接続設定を定義することをお勧めします。"

#. type: Title ===
#: upstream/_guides/vault.adoc:536
#, fuzzy, no-wrap
msgid "Automatic Secret Engine Provisioning"
msgstr "シークレットエンジンの自動プロビジョニング"

#. type: Plain text
#: upstream/_guides/vault.adoc:539
#, fuzzy
msgid "To help with provisioning the automatically managed Vault instance, you can enable certain secret engines."
msgstr "自動的に管理されるVaultインスタンスのプロビジョニングを支援するために、特定のシークレットエンジンを有効にすることができます。"

#. type: delimited block =
#: upstream/_guides/vault.adoc:544
#, fuzzy
msgid "As mentioned above Vault containers started in dev mode automatically mount the _kv secret engine v2_ at `secret/`."
msgstr "前述の通り、devモードで起動したVaultコンテナは、自動的に _kv secret engine v2_を `secret/` にマウントします。"

#. type: Plain text
#: upstream/_guides/vault.adoc:547
#, fuzzy
msgid "Enable the **Transit Secret Engine** at `transit/` using:"
msgstr "`transit/` を使って *Transit Secret Engine*を有効にします。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:551
#, no-wrap
msgid "quarkus.vault.devservices.transit-enabled=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:554
#, fuzzy
msgid "Enable the **PKI Secret Engine** at `pki/` using:"
msgstr "`pki/` を使用して、 *PKI Secret Engine*を有効にします。"

#. type: delimited block -
#: upstream/_guides/vault.adoc:558
#, no-wrap
msgid "quarkus.vault.devservices.pki-enabled=true\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/vault.adoc:560
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_guides/vault.adoc:564
#, fuzzy
msgid "As a general matter, you should consider reading the extensive https://www.vaultproject.io/docs/[Vault documentation] and apply best practices."
msgstr "一般的な問題として、広範な link:https://www.vaultproject.io/docs/[Vaultのドキュメント] を読み、ベストプラクティスを適用することを検討する必要があります。"

#. type: Plain text
#: upstream/_guides/vault.adoc:568
#, fuzzy
msgid "The features exposed today through the Vault extension covers only a small fraction of what the product is capable of.  Still, it addresses already some of the most common microservices scenarii (e.g. sensitive configuration and database credentials), which goes a long way towards creating secured applications."
msgstr "Vault エクステンションを通して今日公開された機能は、製品ができることのほんの一部をカバーしているに過ぎません。しかし、最も一般的なマイクロサービスのいくつか(機密性の高い設定やデータベースの資格情報など)にはすでに対応しており、これは安全なアプリケーションの作成に向けた長い道のりとなっています。"

#. type: Title ==
#: upstream/_guides/vault.adoc:570
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ==
#: upstream/_guides/vault.adoc:574
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/vault.adoc:577
msgid "https://www.vaultproject.io/[HashiCorp Vault]"
msgstr "https://www.vaultproject.io/[HashiCorp Vault]"

#. type: Plain text
#: upstream/_guides/vault.adoc:577
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkus Security]"
