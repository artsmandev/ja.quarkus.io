# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2023-03-05 08:14+0000\n"
"PO-Revision-Date: 2023-04-09 11:07+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-csrf-prevention.adoc:6
#, no-wrap
msgid "Cross-Site Request Forgery Prevention"
msgstr "クロスサイトリクエストフォージェリー対策"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:11
msgid "https://owasp.org/www-community/attacks/csrf[Cross-Site Request Forgery (CSRF)] is an attack that forces an end user to execute unwanted actions on a web application in which they are currently authenticated."
msgstr "link:https://owasp.org/www-community/attacks/csrf[クロスサイトリクエストフォージェリ（CSRF）] とは、エンドユーザーが現在認証されているウェブアプリケーション上で意図しないアクションを実行させる攻撃です。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:13
msgid "Quarkus Security provides a CSRF prevention feature which implements a https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie[Double Submit Cookie technique]. This techninque requires that the CSRF token is never directly exposed to scripts executed on the client-side. In this extension, the CSRF token is:"
msgstr "Quarkus Securityは、 link:https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie[Double Submit Cookieテクニック] を実装したCSRF防止機能を提供しています。この技術では、CSRFトークンがクライアントサイドで実行されるスクリプトに直接公開されないようにする必要があります。このエクステンションでは、CSRFトークンは、以下のようになります。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:15
msgid "sent as `HTTPOnly` cookie to the client, and"
msgstr "`HTTPOnly` のCookieとしてクライアントに送信され、"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:16
msgid "directly embedded in a hidden form input of server-side rendered forms, which are transmitted to and used by the client."
msgstr "サーバサイドレンダリングフォームの隠しフォーム入力に直接埋め込まれ、クライアントに送信され使用されます。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:18
msgid "The extension consists of a xref:resteasy-reactive.adoc[RESTEasy Reactive] server filter which creates and verifies CSRF tokens in `application/x-www-form-urlencoded` and `multipart/form-data` forms and a Qute HTML form parameter provider which supports the xref:qute-reference.adoc#injecting-beans-directly-in-templates[injection of CSRF tokens in Qute templates]."
msgstr "このエクステンションは、`application/x-www-form-urlencoded` と `multipart/form-data` フォームの CSRF トークンを作成し検証する xref:resteasy-reactive.adoc[RESTEasy Reactive] サーバフィルターと、 xref:qute-reference.adoc#injecting-beans-directly-in-templates[QuteテンプレートへのCSRFトークン注入] をサポートする Qute HTML form parameter provider からなります。"

#. type: Title ==
#: upstream/_guides/security-csrf-prevention.adoc:19
#, no-wrap
msgid "Creating the Project"
msgstr "プロジェクトの作成"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:23
msgid "First, we need a new project.  Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します:"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:29
msgid "This command generates a project which imports the `csrf-reactive` extension."
msgstr "このコマンドは、 `csrf-reactive` エクステンションをインポートするプロジェクトを生成します。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:32
msgid "If you already have your Quarkus project configured, you can add the `csrf-reactive` extension to your project by running the following command in your project base directory:"
msgstr "Quarkusプロジェクトをすでに設定している場合は、プロジェクトのベースディレクトリで次のコマンドを実行することで、 `csrf-reactive` エクステンションをプロジェクトに追加できます:"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:37
msgid "This will add the following to your build file:"
msgstr "これにより、ビルドファイルに以下が追加されます:"

#. type: Block title
#: upstream/_guides/security-csrf-prevention.adoc:39
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:45
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-csrf-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-csrf-prevention.adoc:48
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:51
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-csrf-reactive\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:54
msgid "Next, let's add a `csrfToken.html` Qute template producing an HTML form in the `src/main/resources/templates` folder:"
msgstr "次に、このテンプレートを含むファイルを `csrfToken.html` と名付け、 `src/main/resources/templates` フォルダに置いてください:"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:65
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>User Name Input</title> \n"
"</head>\n"
"<body>\n"
"    <h1>User Name Input</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:68
#, no-wrap
msgid ""
"    <form action=\"/service/csrfTokenForm\" method=\"post\">\n"
"    \t<input type=\"hidden\" name=\"{inject:csrf.parameterName}\" value=\"{inject:csrf.token}\" />  <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:74
#, no-wrap
msgid ""
"    \t<p>Your Name: <input type=\"text\" name=\"name\" /></p>\n"
"    \t<p><input type=\"submit\" name=\"submit\"/></p>\n"
"    </form>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:76
msgid "This expression is used to inject a CSRF token into a hidden form field. This token will be verified by the CSRF filter against a CSRF cookie."
msgstr "この書式は、CSRF トークンを隠しフォームフィールドに注入するために使用されます。このトークンは CSRF フィルタによって CSRF クッキーと照合され検証されます。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:78
msgid "Now let's create a resource class which returns an HTML form and handles form POST requests:"
msgstr "では、HTMLフォームを返し、フォームのPOSTリクエストを処理するリソースクラスを作成しましょう:"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:82
#: upstream/_guides/security-csrf-prevention.adoc:147
#: upstream/_guides/security-csrf-prevention.adoc:234
#, no-wrap
msgid "package io.quarkus.it.csrf;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:91
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.FormParam;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:94
#: upstream/_guides/security-csrf-prevention.adoc:160
#: upstream/_guides/security-csrf-prevention.adoc:248
#, no-wrap
msgid ""
"import io.quarkus.qute.Template;\n"
"import io.quarkus.qute.TemplateInstance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:97
#: upstream/_guides/security-csrf-prevention.adoc:163
#: upstream/_guides/security-csrf-prevention.adoc:251
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class UserNameResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:100
#, no-wrap
msgid ""
"    @Inject\n"
"    Template csrfToken; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:107
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance getCsrfTokenForm() {\n"
"        return csrfToken.instance(); <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:116
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postCsrfTokenForm(@FormParam(\"name\") String userName) {\n"
"        return userName; <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:118
msgid "Inject the `csrfToken.html` as a `Template`."
msgstr " `csrfToken.html` を `Template` として注入してください。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:119
msgid "Return the HTML form with a hidden form field containing a CSRF token created by the CSRF filter."
msgstr "CSRFフィルターによって作成されたCSRFトークンを含むhiddenフォームフィールドを持つHTMLフォームを返します。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:120
msgid "Handle the POST form request, this method can only be invoked if the CSRF filter has successfully verified the token."
msgstr "フォームの POST リクエストを処理します。このメソッドは、CSRF フィルターがトークンの確認に成功した場合にのみ呼び出すことができます。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:122
msgid "The form POST request will fail with HTTP status `400` if the filter finds the hidden CSRF form field is missing, the CSRF cookie is missing, or if the CSRF form field and CSRF cookie values do not match."
msgstr "フィルタが、隠された CSRF フォームフィールドがない、CSRF クッキーがない、あるいは CSRF フォームフィールドと CSRF クッキーの値が一致しないことを発見した場合、フォーム POST リクエストは HTTP ステータス `400` で失敗します。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:124
msgid "At this stage no additional configuration is needed - by default the CSRF form field and cookie name will be set to `csrf_token`, and the filter will verify the token. But you can change these names if you would like:"
msgstr "この段階では、追加の設定は必要ありません。デフォルトでは、CSRF フォームフィールドとクッキー名が `csrf_token` に設定され、フィルタがトークンを検証します。しかし、これらの名前を変更してみましょう:"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:129
#, no-wrap
msgid ""
"quarkus.csrf-reactive.form-field-name=csrftoken\n"
"quarkus.csrf-reactive.cookie-name=csrftoken\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-csrf-prevention.adoc:131
#, no-wrap
msgid "Sign CSRF token"
msgstr "CSRFトークンに署名"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:134
msgid "You can get `HMAC` signatures created for the generated CSRF tokens and have these `HMAC` values stored as CSRF token cookies if you would like to avoid the risk of the attackers recreating the CSRF cookie token. All you need to do is to configure a token signature secret which must be at least 32 characters long:"
msgstr "生成された CSRF トークンに `HMAC` 署名を作成し、これらの `HMAC` 値を CSRF トークン・クッキーとして保存することで、攻撃者が CSRF クッキー・トークンを再作成するリスクを回避することができます。必要なのは、少なくとも 32 文字の長さのトークン署名シークレットを設定することだけです。"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:138
#, no-wrap
msgid "quarkus.csrf-reactive.token-signature-key=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-csrf-prevention.adoc:140
#, no-wrap
msgid "Restrict CSRF token verification"
msgstr "CSRFトークンの検証を制限"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:143
msgid "Your JAX-RS endpoint may accept not only HTTP POST requests with `application/x-www-form-urlencoded` or `multipart/form-data` payloads but also payloads with other media types, either on the same or different URL paths, and therefore you would like to avoid verifying the CSRF token in such cases, for example:"
msgstr "JAX-RS のエンドポイントは、 `application/x-www-form-urlencoded` または `multipart/form-data` のペイロードを持つ HTTP POST リクエストだけでなく、他のメディアタイプを持つペイロードも、同じ URL パスまたは異なる URL パスで受け入れることがあります。したがって、そのような場合に CSRF トークンの検証を回避したいのです。例："

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:157
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.BadRequestException;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.FormParam;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:166
#: upstream/_guides/security-csrf-prevention.adoc:254
#, no-wrap
msgid ""
"    @Inject\n"
"    Template csrfToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:173
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/user\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance getCsrfTokenForm() {\n"
"        return csrfToken.instance();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:182
#, no-wrap
msgid ""
"    <1>\n"
"    @POST\n"
"    @Path(\"/user\")\n"
"    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postCsrfTokenForm(@FormParam(\"name\") String userName) {\n"
"        return userName;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:191
#, no-wrap
msgid ""
"    <2>\n"
"    @POST\n"
"    @Path(\"/user\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postJson(User user) {\n"
"        return user.name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:200
#, no-wrap
msgid ""
"    <3>\n"
"    @POST\n"
"    @Path(\"/users\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postJson(User user) {\n"
"        return user.name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:211
#, no-wrap
msgid ""
"    public static class User {\n"
"        private String name;\n"
"        public String getName() {\n"
"            return this.name;\n"
"        }\n"
"        public void setName(String name) {\n"
"            this.name = name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:213
msgid "POST form request to `/user`, CSRF token verification is enforced by the CSRF filter"
msgstr "`/user` へのPOSTフォームのリクエスト、CSRFフィルターによりCSRFトークンの検証が行われます。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:214
msgid "POST json request to `/user`, CSRF token verification is not needed"
msgstr "`/user` への POST json リクエスト , CSRF トークン検証は不要です。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:215
msgid "POST json request to `/users`, CSRF token verification is not needed"
msgstr "`/users` への POST json リクエスト , CSRF トークン検証は不要です。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:217
msgid "As you can see a CSRF token verification will be required at the `/service/user` path accepting the `application/x-www-form-urlencoded` payload, but `User` JSON representation posted to both `/service/user` and `/service/users` method will have no CSRF token and therefore the token verification has to be skipped in these cases by restricting it to the specific `/service/user` request path but also allowing not only `application/x-www-form-urlencoded` on this path:"
msgstr "ご覧のように、`service/user` パスで `application/x-www-form-urlencoded` ペイロードを受け取る際に CSRF トークン検証が必要になりますが、 `service/user` と `service/users` の両方のメソッドにPOSTされた `User` JSON表現はCSRFトークンを持たないため、これらのケースではトークン検証をスキップする必要があります。この場合、特定の`service/user`リクエストパスに限定し、このパスでは`application/x-www-form-urlencoded`だけを許可しないようにします："

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:222
#, no-wrap
msgid ""
"# Verify CSRF token only for the `/service/user` path, ignore other paths such as `/service/users`\n"
"quarkus.csrf-reactive.create-token-path=/service/user\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:225
#, no-wrap
msgid ""
"# If `/service/user` path accepts not only `application/x-www-form-urlencoded` payloads but also other ones such as JSON then allow them\n"
"quarkus.csrf-reactive.require-form-url-encoded=false\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-csrf-prevention.adoc:227
#, no-wrap
msgid "Verify CSRF token in the application code"
msgstr "アプリケーションコード内のCSRFトークンの検証"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:230
msgid "If you prefer to compare the CSRF form field and cookie values in the application code then you can do it as follows:"
msgstr "もし、CSRFのフォームフィールドとクッキーの値をアプリケーションのコードで比較したい場合は、次のようにします。"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:245
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.BadRequestException;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.CookieParam;\n"
"import javax.ws.rs.FormParam;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:261
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance getCsrfTokenForm() {\n"
"        return csrfToken.instance();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:273
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postCsrfTokenForm(@CookieParam(\"csrf-token\") csrfCookie, @FormParam(\"csrf-token\") String formCsrfToken, @FormParam(\"name\") String userName) {\n"
"        if (!csrfCookie.getValue().equals(formCsrfToken)) { <1>\n"
"            throw new BadRequestException();\n"
"        }\n"
"        return userName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:275
msgid "Compare the CSRF form field and cookie values and fail with HTTP status `400` if they don't match."
msgstr "CSRFのフォームフィールドとクッキーの値を比較し、一致しない場合はHTTPステータス `400` で失敗します。"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:277
msgid "Also disable the token verification in the filter:"
msgstr "また、フィルターのトークン検証を無効にします:"

#. type: delimited block -
#: upstream/_guides/security-csrf-prevention.adoc:281
#, no-wrap
msgid "quarkus.csrf-reactive.verify-token=false\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-csrf-prevention.adoc:284
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ==
#: upstream/_guides/security-csrf-prevention.adoc:288
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:291
msgid "https://owasp.org/www-community/attacks/csrf[OWASP Cross-Site Request Forgery]"
msgstr "link:https://owasp.org/www-community/attacks/csrf[OWASP クロスサイトリクエストフォージェリ]"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:292
msgid "xref:resteasy-reactive.adoc[RESTEasy Reactive]"
msgstr "link:resteasy-reactive.html[RESTEasy Reactive]"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:293
msgid "xref:qute-reference.adoc[Qute Reference]"
msgstr "xref:qute-reference.adoc[Qute リファレンス]"

#. type: Plain text
#: upstream/_guides/security-csrf-prevention.adoc:293
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"

#~ msgid "Note that the CSRF filter has to read the input stream in order to verify the token and then re-create the stream for the application code to read it as well. The filter performs this work on an event loop thread so for small form payloads, such as the one shown in the example above, it will have negligible performance side-effects. However if you deal with large form payloads then it is recommended to compare the CSRF form field and cookie values in the application code:"
#~ msgstr "CSRF フィルタはトークンを検証するために入力ストリームを読み、アプリケーション コードが読み込めるようにストリームを再作成しなければならないことに注意してください。このフィルタはイベントループのスレッドでこの作業を行うので、上の例で示したような小さなフォームのペイロードでは、パフォーマンスの副作用はごくわずかです。しかし、大きなフォームペイロードを扱う場合は、アプリケーションコードでCSRFフォームフィールドとクッキーの値を比較することをお勧めします:"

#~ msgid "Next lets add a Qute template producing an HTML form:"
#~ msgstr "次に、HTMLフォームを生成するQuteテンプレートを追加してみましょう:"
