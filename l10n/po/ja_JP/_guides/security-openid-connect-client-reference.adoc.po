# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2023-05-03 00:43+0900\n"
"PO-Revision-Date: 2023-04-23 14:13+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-client-reference.adoc:6
#, no-wrap
msgid "OpenID Connect (OIDC) and OAuth2 Client and Filters Reference Guide"
msgstr "OpenID Connect（OIDC）およびOAuth2クライアントとフィルターリファレンスガイド"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:11
msgid "This reference guide explains how to use:"
msgstr "このリファレンスガイドは、以下の使用方法について説明しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:13
#, fuzzy
msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as link:https://www.keycloak.org[Keycloak]"
msgstr "`quarkus-oidc-client` OpenID Connectや link:https://www.keycloak.org[Keycloakなどの] OAuth 2.0準拠の認可サーバーからアクセストークンを取得し、リフレッシュするための、 `quarkus-oidc-client-reactive-filter` 、 `quarkus-oidc-client-filter` のエクステンション。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:14
msgid "`quarkus-oidc-token-propagation-reactive` and `quarkus-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
msgstr "現在の `Bearer` または `Authorization Code Flow` アクセストークンを伝播する `quarkus-oidc-token-propagation-reactive` エクステンションと `quarkus-oidc-token-propagation` エクステンション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:16
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization ベアラートークンとして使用して、リモートサービスにアクセスすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:18
msgid "Please also see xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]."
msgstr "xref:security-openid-connect-client.adoc[OpenID Connect Clientとトークン伝搬クイックスタート] も参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client-reference.adoc:19
#, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:22
msgid "Add the following dependency:"
msgstr "以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:29
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:32
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` エクステンションは、SmallRye Mutiny `Uni` および `Vert.xWebClient` を使用してトークンを取得および更新するために使用できるリアクティブな `io.quarkus.oidc.client.OidcClient` を提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:34
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using the token grants such as `client_credentials` or `password` and refresh the tokens using a `refresh_token` grant."
msgstr "`OidcClient` はビルド時に IDP トークンエンドポイント URL (自動検出または手動設定) で初期化され、このエンドポイントを使用して `client_credentials` や `password` などのトークングラントを使用してアクセストークンを取得し、`refresh_token` グラントを使用してトークンをリフレッシュすることができます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:35
#, no-wrap
msgid "Token Endpoint Configuration"
msgstr "トークンエンドポイントの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:38
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "デフォルトでは、トークンのエンドポイントアドレスは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` パスを追加することによって検出されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:40
msgid "For example, given this Keycloak URL:"
msgstr "例えば、この Keycloak の URL があるとします。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:44
#, no-wrap
msgid "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:47
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr "`OidcClient` は、トークンのエンドポイント URL が `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens` であることを検出します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:49
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、相対パス値でトークンエンドポイントアドレスを設定することもできます。例:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:56
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
"quarkus.oidc-client.token-path=/protocol/openid-connect/tokens\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:59
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "ディスカバリーなしでトークンエンドポイント URL を設定する、よりコンパクトな方法は、 `quarkus.oidc-client.token-path` を絶対 URL に設定することです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:63
#, no-wrap
msgid "quarkus.oidc-client.token-path=http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:66
msgid "Setting 'quarkus.oidc-client.auth-server-url' and 'quarkus.oidc-client.discovery-enabled' is not required in this case."
msgstr "この場合、 'quarkus.oidc-client.auth-server-url' と 'quarkus.oidc-client.discovery-enabled' の設定は必要ありません。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:67
#, no-wrap
msgid "Supported Token Grants"
msgstr "トークングラントをサポート"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:70
msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr "`OidcClient` がトークンを取得するために使用できる主なトークングラントは、`client_credentials` (デフォルト) と `password` グラントです。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:71
#, no-wrap
msgid "Client Credentials Grant"
msgstr "クライアントクレデンシャル・グラント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:74
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:80
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:83
msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
msgstr "`client_credentials` グラントは、 `quarkus.oidc-client.grant-options.client.<param-name>=<value>` によって、トークン要求に追加のパラメーターを設定することが可能です。ここでは、 `audience` パラメーターを使用してトークンの受信者を設定する方法を説明します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:92
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"# 'client' is a shortcut for `client_credentials`\n"
"quarkus.oidc-client.grant.type=client\n"
"quarkus.oidc-client.grant-options.client.audience=https://example.com/api\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:94
#, no-wrap
msgid "Password Grant"
msgstr "パスワード・グラント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:97
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:106
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:109
msgid "It can be further customized using a `quarkus.oidc-client.grant-options.password` configuration prefix, similarly to how the client credentials grant can be customized."
msgstr "さらに、 `quarkus.oidc-client.grant-options.password` という設定接頭辞を使用して、クライアント認証のグラントをカスタマイズする方法と同様に、カスタマイズすることが可能です。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:110
#, no-wrap
msgid "Other Grants"
msgstr "その他のグラント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:113
msgid "`OidcClient` can also help with acquiring the tokens using the grants which require some extra input parameters which can not be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, as well as two grants which can be used to exchange the current access token, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr "`OidcClient` は設定にはない特別な入力パラメータを必要とするグラントを使用して、トークンの取得を支援することもできます。これらのグラントとは、 `refresh_token` （外部リフレッシュ・トークン付き）、`authorization_code` 、および現在のアクセストークンを交換するために使用できる2つのグラント`urn:ietf:params:oauth:grant-type:token-exchange` および `urn:ietf:params:oauth:grant-type:jwt-bearer`です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:115
msgid "Using the `refresh_token` grant which uses an out-of-band refresh token to acquire a new set of tokens will be required if the existing refresh token has been posted to the current Quarkus endpoint for it to acquire the access token. In this case `OidcClient` needs to be configured as follows:"
msgstr "アクセストークンを取得するために、既存のリフレッシュトークンが現在の Quarkus エンドポイントにポストされた場合、帯域外リフレッシュトークンを使用して新しいトークンセットを取得する `refresh_token` グラントを使用する必要があります。この場合、`OidcClient` を次のように設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:122
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=refresh\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:125
msgid "and then you can use `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr "次に、`OidcClient.refreshTokens` メソッドと提供された更新トークンを使用して、アクセストークンを取得できます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:127
#, fuzzy
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants may be required if you are building a complex microservices application and would like to avoid the same `Bearer` token be propagated to and used by more than one service. Please see xref:token-propagation-reactive[Token Propagation in MicroProfile RestClient Reactive filter] and xref:token-propagation[Token Propagation in MicroProfile RestClient filter] for more details."
msgstr "複雑なマイクロサービスアプリケーションを構築していて、同じ `Bearer` トークンが複数のサービスに伝搬して使用されるのを避けたい場合は、 `urn:ietf:params:oauth:grant-type:token-exchange` または `urn:ietf:params:oauth:grant-type:jwt-bearer` グランツの使用が必要になることがあります。詳細は、 xref:token-propagation-reactive[MicroProfile RestClient ReactiveフィルターのToken Propagationと] xref:token-propagation[MicroProfile RestClientフィルターのToken Propagationを] 参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:129
#, fuzzy
msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reason you cannot use the xref:security-oidc-code-flow-authentication-concept.adoc[Quarkus OIDC extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
msgstr "何らかの理由で認可コードフローをサポートするためのQuarkus xref:security-oidc-code-flow-authentication-concept.adoc[OIDC] エクステンションを使用できない場合、 `authorization code` グラントをサポートするために `OidcClient` を使用する必要がある場合があります。認可コードフローを実装する正当な理由がある場合は、 `OidcClient` を次のように設定できます:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:136
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=code\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:139
msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr "そして、`OidcClient.accessTokens` メソッドで追加プロパティーの Map を受け取り、現在の `code` と `redirect_uri` パラメーターを渡して認証コードとトークンを交換することが可能です。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:140
#, no-wrap
msgid "Grant scopes"
msgstr "グラントスコープ"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:144
msgid "You may need to request that a specific set of scopes is associated with an issued access token.  Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr "発行されたアクセストークンに、特定のスコープを関連付けるよう要求する必要がある場合があります。専用の `quarkus.oidc-client.scopes` リストプロパティーを使用します (例: `quarkus.oidc-client.scopes=email,phone`)。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:145
#, no-wrap
msgid "Use OidcClient directly"
msgstr "OidcClient を直接使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:148
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:154
#: upstream/_guides/security-openid-connect-client-reference.adoc:194
#, no-wrap
msgid ""
"import jakarta.inject.PostConstruct;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:157
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:160
#: upstream/_guides/security-openid-connect-client-reference.adoc:199
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:163
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:165
#, no-wrap
msgid "    volatile Tokens currentTokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:170
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public void init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:173
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:183
#, no-wrap
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        }\n"
"        // Use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:185
#, no-wrap
msgid "Inject Tokens"
msgstr "トークンの注入"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:188
msgid "You can inject `Tokens` which uses `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr "内部で `OidcClient` を使用する `Tokens` を注入することができます。 `Tokens` はアクセストークンを取得し、必要に応じてリフレッシュするために使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:196
#: upstream/_guides/security-openid-connect-client-reference.adoc:525
#, no-wrap
msgid "import io.quarkus.oidc.client.Tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:201
#, no-wrap
msgid "    @Inject Tokens tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:209
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        //  Get the access token which may have been refreshed.\n"
"        String accessToken = tokens.getAccessToken();\n"
"        // Use the access token to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:212
#, no-wrap
msgid "Use OidcClients"
msgstr "OidcClientsの使用"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:215
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` は ``OidcClient`` のコンテナーで、デフォルトの `OidcClient` と、このように設定できる名前付きクライアントが含まれています。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:219
#, no-wrap
msgid "quarkus.oidc-client.client-enabled=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:223
#, no-wrap
msgid ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:226
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:232
#: upstream/_guides/security-openid-connect-client-reference.adoc:259
#: upstream/_guides/security-openid-connect-client-reference.adoc:290
#: upstream/_guides/security-openid-connect-client-reference.adoc:328
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:235
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:238
#: upstream/_guides/security-openid-connect-client-reference.adoc:266
#: upstream/_guides/security-openid-connect-client-reference.adoc:299
#: upstream/_guides/security-openid-connect-client-reference.adoc:331
#, no-wrap
msgid ""
"@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:241
#: upstream/_guides/security-openid-connect-client-reference.adoc:302
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:248
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client-reference.adoc:253
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "xref:security-openid-connect-multitenancy.adoc[OIDCマルチテナンシー] も使用し、各 OIDC テナントに独自の関連付けられた `OidcClient` がある場合は、Vert.x `RoutingContext` `tenantId` 属性を使用できます。次に例を示します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:263
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:271
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:280
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client-reference.adoc:284
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:294
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:296
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:314
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
"        cfg.setClientId(\"quarkus\");\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(cfg);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:317
#, no-wrap
msgid "Inject named OidcClient and Tokens"
msgstr "名前の付いたOidcClient とトークンの注入"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:320
msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr "複数の ``OidcClient`` が設定されている場合、`OidcClients` を使用する代わりに、追加の修飾子 `@NamedOidcClient` で `OidcClient` の注入ターゲットを指定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:324
#, no-wrap
msgid "package io.quarkus.oidc.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:335
#, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    OidcClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:341
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        // use client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:344
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "同じ修飾子を使用して、`Tokens` 注入に使用する `OidcClient` を指定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:351
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"@RequestScoped\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:355
#, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    Tokens tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:361
#: upstream/_guides/security-openid-connect-client-reference.adoc:538
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:364
#, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "RestClient の Reactive ClientFilter で OidcClient を使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:367
#: upstream/_guides/security-openid-connect-client-reference.adoc:447
#: upstream/_guides/security-openid-connect-client-reference.adoc:1095
msgid "Add the following Maven Dependency:"
msgstr "以下の Maven 依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:374
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:377
#: upstream/_guides/security-openid-connect-client-reference.adoc:457
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "また、 `io.quarkus:quarkus-oidc-client` も持ってくることに注意しましょう。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:379
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr "`quarkus-oidc-client-reactive-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` を提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:381
#, fuzzy
msgid "It works similarly to the way `OidcClientRequestFilter` does (see xref:oidc-client-filter[Use OidcClient in MicroProfile RestClient client filter]) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
msgstr "これは、 `OidcClientRequestFilter` の方法と同様に動作します ( xref:oidc-client-filter[MicroProfile RestClient クライアントフィルタで OidcClient を使用] するを参照)。 `OidcClient` を使用してアクセストークンを取得し、必要に応じてリフレッシュして、HTTP `Authorization` `Bearer` スキーム値としてセットします。違いは、 xref:rest-client-reactive.adoc[Reactive RestClientで] 動作し、トークンを取得または更新するときに現在のIOスレッドをブロックしないノンブロッキングクライアントフィルタを実装している点です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:383
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr "IOスレッドのブロックを避けるために、 `OidcClientRequestReactiveFilter` は実行されるまで最初のトークン取得を遅らせます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:385
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either io.quarkus.oidc.client.reactive.filter.OidcClientFilter or org.eclipse.microprofile.rest.client.annotation.RegisterProvider annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:392
#: upstream/_guides/security-openid-connect-client-reference.adoc:432
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:397
#: upstream/_guides/security-openid-connect-client-reference.adoc:473
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:401
#: upstream/_guides/security-openid-connect-client-reference.adoc:420
#: upstream/_guides/security-openid-connect-client-reference.adoc:441
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<String> getUserName();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:404
#: upstream/_guides/security-openid-connect-client-reference.adoc:480
#: upstream/_guides/security-openid-connect-client-reference.adoc:579
#: upstream/_guides/security-openid-connect-client-reference.adoc:884
#: upstream/_guides/security-openid-connect-client-reference.adoc:972
#: upstream/_guides/security-openid-connect-client-reference.adoc:1048
msgid "or"
msgstr "or"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:411
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:416
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:425
#, fuzzy
msgid "`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.  You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.  For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestReactiveFilter` は、デフォルトで を使用します。名前付きの は、 設定プロパティで選択することができます。また、 アノテーションの 属性を設定することで、 を選択することができます。アノテーションで設定されたクライアント名は、 設定プロパティより優先されます。例えば、 `OidcClient` `OidcClient` `quarkus.oidc-client-reactive-filter.client-name` `@OidcClientFilter` `value` `OidcClient` `quarkus.oidc-client-reactive-filter.client-name` xref:use-oidc-clients[この] `jwt-secret` named OIDC クライアント宣言があれば、このクライアントを次のように参照することができます:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:437
#: upstream/_guides/security-openid-connect-client-reference.adoc:512
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@OidcClientFilter(\"jwt-secret\")\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:444
#, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "RestClient の ClientFilter で OidcClient を使用する"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:454
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-filter</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:459
#, fuzzy
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは、 Jakarta REST ClientRequestFilter を提供し、 を使用してアクセストークンを取得し、必要に応じてリフレッシュし、HTTP  スキーム値として設定します。 `io.quarkus.oidc.client.filter.OidcClientRequestFilter` `OidcClient` `Authorization` `Bearer` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:461
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、`quarkus.oidc-client.early-tokens-acquisition=false` でトークンの取得を遅延させるべきです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:463
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:468
#: upstream/_guides/security-openid-connect-client-reference.adoc:507
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:477
#: upstream/_guides/security-openid-connect-client-reference.adoc:495
#: upstream/_guides/security-openid-connect-client-reference.adoc:516
#: upstream/_guides/security-openid-connect-client-reference.adoc:881
#: upstream/_guides/security-openid-connect-client-reference.adoc:899
#: upstream/_guides/security-openid-connect-client-reference.adoc:970
#: upstream/_guides/security-openid-connect-client-reference.adoc:987
#: upstream/_guides/security-openid-connect-client-reference.adoc:1046
#: upstream/_guides/security-openid-connect-client-reference.adoc:1063
#, no-wrap
msgid ""
"    @GET\n"
"    String getUserName();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:486
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:491
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:498
#, fuzzy
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "また、 `quarkus.oidc-client-filter.register-filter=true` プロパティが設定されている場合、すべての MP Rest または Jakarta REST クライアントで `OidcClientRequestFilter` を自動的に登録することもできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:502
#, fuzzy
msgid "`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.  You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.  For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestFilter` は、デフォルトで を使用します。名前付きの は、 設定プロパティで選択することができます。また、 アノテーションの 属性を設定することで、 を選択することができます。アノテーションで設定されたクライアント名は、 設定プロパティよりも優先されます。例えば、 `OidcClient` `OidcClient` `quarkus.oidc-client-filter.client-name` `@OidcClientFilter` `value` `OidcClient` `quarkus.oidc-client-filter.client-name` xref:use-oidc-clients[この] `jwt-secret` named OIDC クライアント宣言があれば、このクライアントを次のように参照することができます:"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:518
#, no-wrap
msgid "Use Custom RestClient ClientFilter"
msgstr "カスタムの RestClient ClientFilter を使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:521
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:529
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:532
#, no-wrap
msgid ""
"    @Inject\n"
"    Tokens tokens;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:541
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:543
#, fuzzy
msgid "You can also inject named `Tokens`, see xref:named-oidc-clients[Inject named OidcClient and Tokens]"
msgstr "また、 `Tokens` という名前のインジェクトも可能です。「 xref:named-oidc-clients[OidcClient とトークンという名前のインジェクト] 」を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:545
#, no-wrap
msgid "Refreshing Access Tokens"
msgstr "アクセストークンの更新"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:549
msgid "`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.  Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr "`OidcClientRequestReactiveFilter` 、 `OidcClientRequestFilter` 、 `Tokens` プロデューサーは、リフレッシュトークンが利用可能であれば、現在の期限切れのアクセストークンをリフレッシュすることができます。さらに、 `quarkus.oidc-client.refresh-token-time-skew` プロパティーを使用すると、HTTP 401 エラーの原因となる期限切れのアクセストークンの送信を回避し、事前にアクセストークンをリフレッシュさせることが可能です。例えば、このプロパティーが `3S` に設定されていて、アクセストークンの有効期限が 3 秒未満である場合、このトークンは自動的にリフレッシュされます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:551
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr "アクセストークンの更新が必要なのにリフレッシュトークンがない場合は、 `client_credentials` のように設定されたグラントを使って新しいトークンの取得を試みます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:553
msgid "Please note that some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
msgstr "OpenID Connect プロバイダーによっては、 `client_credentials` グラントレスポンスでリフレッシュトークンを返さないものがあることに注意してください。例えば、Keycloak 12 以降では、 `client_credentials` に対してデフォルトでリフレッシュトークンが返されません。また、プロバイダーはリフレッシュトークンの使用回数を制限している場合があります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:555
#, no-wrap
msgid "Revoking Access Tokens"
msgstr "アクセストークンの失効"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:558
msgid "If your OpenId Connect provider such as Keycloak supports a token revocation endpoint then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr "Keycloak などの OpenId Connect プロバイダがトークンの失効エンドポイントをサポートしている場合、`OidcClient#revokeAccessToken` を使うことで現在のアクセストークンを失効させることができます。失効エンドポイントの URL は、トークン要求 URI と共に検出されるか、または `quarkus.oidc-client.revoke-path` で設定することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:560
msgid "You may want to have the access token revoked if using this token with a REST client fails with HTTP `401` or the access token has already been used for a long time and you'd like to refresh it."
msgstr "RESTクライアントで使用するとHTTP `401` で失敗するアクセストークンを使っている場合や、長い時間使用されているアクセストークンをリフレッシュしたい場合は、アクセストークンを失効させることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:562
msgid "This can be achieved by requesting a token refresh using a refresh token. However, if the refresh token is not available then you can refresh it by revoking it first and then request a new access token."
msgstr "リフレッシュトークンを使用してトークンのリフレッシュを要求することができます。リフレッシュトークンが利用できない場合は、まずそれを失効させてから、新しいアクセストークンをリクエストすることでリフレッシュできます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:564
#, no-wrap
msgid "OidcClient Authentication"
msgstr "OidcClient 認証"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:568
msgid "`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` は、 `client_credentials` やその他のグラントリクエストを成功させるために OpenID Connect Provider に認証する必要があります。 link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC クライアント認証] オプションはすべてサポートされています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:570
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:576
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:585
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:588
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "または、xref:credentials-provider.adoc[クレデンシャルプロバイダー] から取得したシークレットを使用します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:593
#: upstream/_guides/security-openid-connect-client-reference.adoc:625
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:598
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:601
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:608
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:611
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr "`client_secret_jwt`、署名アルゴリズムは `HS256` です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:617
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:620
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr "または xref:credentials-provider.adoc[CredentialsProvider] から取得した秘密鍵で、署名アルゴリズムは `HS256` です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:630
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:633
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr "PEM キーファイルを使用した `private_key_jwt` 、署名アルゴリズムは `RS256` です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:639
#: upstream/_guides/security-openid-connect-client-reference.adoc:668
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:642
msgid "`private_key_jwt` with the key store file, signature algorithm is `RS256`:"
msgstr "キーストアファイルを使用した `private_key_jwt` 、署名アルゴリズムは `RS256` です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:650
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:653
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc-client.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:656
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントシークレットが漏れることはありません。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:657
#, no-wrap
msgid "Additional JWT Authentication options"
msgstr "追加の JWT 認証オプション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:660
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "もし `client_secret_jwt` と `private_key_jwt` のいずれかの認証方法を使用する場合、JWT 署名アルゴリズム、鍵識別子、オーディエンス、サブジェクト、発行者などをカスタマイズすることが可能です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:664
#, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:673
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc-client.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc-client.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:676
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc-client.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:679
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc-client.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:682
#, no-wrap
msgid ""
"# custom subject instead of the client id :\n"
"quarkus.oidc-client.credentials.jwt.subject=custom-subject\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:685
#, no-wrap
msgid ""
"# custom issuer instead of the client id :\n"
"quarkus.oidc-client.credentials.jwt.issuer=custom-issuer\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:687
#, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:690
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject properties."
msgstr "Apple OpenID Connect プロバイダーは `client_secret_post` メソッドを使用します。ここで、secret は `private_key_jwt` 認証メソッドで生成された JWT ですが、Apple アカウント固有の発行者とサブジェクトプロパティーを使用します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:692
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr "`quarkus-oidc-client` は、以下のように設定できる標準外の `client_secret_post_jwt` 認証方法をサポートしています。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:698
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${apple.url}\n"
"quarkus.oidc-client.client-id=${apple.client-id}\n"
"quarkus.oidc-client.credentials.client-secret.method=post-jwt\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:703
#, no-wrap
msgid ""
"quarkus.oidc-client.credentials.jwt.key-file=ecPrivateKey.pem\n"
"quarkus.oidc-client.credentials.jwt.signature-algorithm=ES256\n"
"quarkus.oidc-client.credentials.jwt.subject=${apple.subject}\n"
"quarkus.oidc-client.credentials.jwt.issuer=${apple.issuer}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:705
#, no-wrap
msgid "Mutual TLS"
msgstr "相互 TLS"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:708
msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`mTLS`) authentication process."
msgstr "OpenID Connect プロバイダーによっては、クライアントが `Mutual TLS` (`mTLS`) 認証プロセスの一部として認証されることを要求する場合があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:710
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr "`mTLS` をサポートする為に `quarkus-oidc-client` は以下のように設定出来ます :"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:714
#, no-wrap
msgid "quarkus.oidc.tls.verification=certificate-validation\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:718
#, no-wrap
msgid ""
"# Keystore configuration\n"
"quarkus.oidc.client.tls.key-store-file=client-keystore.jks\n"
"quarkus.oidc.client.tls.key-store-password=${key-store-password}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:722
#, no-wrap
msgid ""
"# Add more keystore properties if needed:\n"
"#quarkus.oidc.client.tls.key-store-alias=keyAlias\n"
"#quarkus.oidc.client.tls.key-store-alias-password=keyAliasPassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:728
#, no-wrap
msgid ""
"# Truststore configuration\n"
"quarkus.oidc-client.tls.trust-store-file=client-truststore.jks\n"
"quarkus.oidc-client.tls.trust-store-password=${trust-store-password}\n"
"# Add more truststore properties if needed:\n"
"#quarkus.oidc.client.tls.trust-store-alias=certAlias\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:731
#: upstream/_guides/security-openid-connect-client-reference.adoc:1086
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:734
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:747
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>org.awaitility</groupId>\n"
"    <artifactId>awaitility</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:750
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:753
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:761
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:764
msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "Wiremockベースの `QuarkusTestResourceLifecycleManager` を例えば以下のように書きます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:767
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:770
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:773
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:777
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
"import com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:779
#, no-wrap
msgid "import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:782
#, no-wrap
msgid ""
"public class KeycloakRealmResourceManager implements QuarkusTestResourceLifecycleManager {\n"
"    private WireMockServer server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:785
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:788
#, no-wrap
msgid ""
"        server = new WireMockServer(wireMockConfig().dynamicPort().useChunkedTransferEncoding(ChunkedEncodingPolicy.NEVER));\n"
"        server.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:803
#, no-wrap
msgid ""
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=password&username=alice&password=alice\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_1\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=refresh_token&refresh_token=refresh_token_1\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_2\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:809
#, no-wrap
msgid ""
"        Map<String, String> conf = new HashMap<>();\n"
"        conf.put(\"keycloak.url\", server.baseUrl());\n"
"        return conf;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:818
#, no-wrap
msgid ""
"    @Override\n"
"    public synchronized void stop() {\n"
"        if (server != null) {\n"
"            server.stop();\n"
"            server = null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:821
msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:823
msgid "Set `application.properties`, for example:"
msgstr "`application.properties` を次のように設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:835
#, no-wrap
msgid ""
"# Use 'keycloak.url' property set by the test KeycloakRealmResourceManager\n"
"quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"quarkus.oidc-client.token-path=/tokens\n"
"quarkus.oidc-client.client-id=quarkus-service-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:838
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr "そして最後にテストコードを書きます。上記の Wiremock ベースのリソースがある場合、最初のテスト起動では `access_token_1` アクセストークンが返却されますが、このアクセストークンは 4 秒で期限切れになります。 `awaitility` を使用して約 5 秒間待つと、次のテスト起動時に `access_token_2` アクセストークンが返され、期限切れの `access_token_1` アクセストークンがリフレッシュされたことが確認できます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:839
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:842
#, fuzzy
msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-oidc-bearer-authentication-concept.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr "Keycloakと連携する場合は、「OpenID xref:security-oidc-bearer-authentication-concept.adoc#integration-testing-keycloak[Connect Bearer Token Integration testing] Keycloak」セクションで説明したのと同じ方法を使うことができます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:843
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:846
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "トークン取得および更新エラーの詳細を確認するには、`io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` レベルのロギングを有効にしてください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:851
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:854
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "OidcClient の初期化エラーの詳細を確認するには、`io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` レベルのログを有効にしてください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:859
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client-reference.adoc:862
#: upstream/_guides/security-openid-connect-client-reference.adoc:1092
#, no-wrap
msgid "Token Propagation Reactive"
msgstr "Token Propagation Reactive"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:865
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides RestEasy Reactive Client `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` that simplifies the propagation of authentication information by propagating the xref:security-oidc-bearer-authentication-concept.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication-concept.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr "`quarkus-oidc-token-propagation-reactive` エクステンションは、HTTP `Authorization` ヘッダの `Bearer` スキーム値として、現在のアクティブなリクエストに存在するベアラ認証 xref:security-oidc-bearer-authentication-concept.adoc[トークン] 、または認可コードフロー xref:security-oidc-code-flow-authentication-concept.adoc[メカニズムから] 取得したトークンを伝播することによって認証情報の伝播を簡素化するRESTEasy Reactive Client `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` を提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:867
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:872
#: upstream/_guides/security-openid-connect-client-reference.adoc:961
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:877
#: upstream/_guides/security-openid-connect-client-reference.adoc:966
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:890
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:895
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:903
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr "さらに、 `AccessTokenRequestReactiveFilter` 、トークンを伝播する前に交換する必要がある複雑なアプリケーションをサポートすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:905
msgid "If you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Providers which support a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "もし、現在のアクセストークンを伝播する前に交換する必要があり、かつ link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] やその他の link:https://tools.ietf.org/html/rfc8693[Token Exchange] トークングラントをサポートする OpenID Connect Provider で作業する場合は、`AccessTokenRequestFilter` をこのように設定することが可能です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:913
#: upstream/_guides/security-openid-connect-client-reference.adoc:1002
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=exchange\n"
"quarkus.oidc-client.grant-options.exchange.audience=quarkus-app-exchange\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:915
#: upstream/_guides/security-openid-connect-client-reference.adoc:1004
#: upstream/_guides/security-openid-connect-client-reference.adoc:1019
#, no-wrap
msgid "quarkus.oidc-token-propagation.exchange-token=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:918
msgid "Note `AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "`AccessTokenRequestReactiveFilter` は `OidcClient` を使用して現在のトークンを交換することに注意してください。また、`quarkus.oidc-client.grant-options.exchange` を使用して OpenID Connect プロバイダーが期待する追加の交換プロパティーを設定できます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:920
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exhange the current token then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "`Azure` のように、 link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWTベアラートークングラント] を使用して現在のトークンを交換する link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[必要がある] プロバイダを使用する場合、 `AccessTokenRequestReactiveFilter` をトークンを交換するように設定することができます:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:926
#: upstream/_guides/security-openid-connect-client-reference.adoc:1013
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${azure.provider.url}\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:930
#: upstream/_guides/security-openid-connect-client-reference.adoc:1017
#, no-wrap
msgid ""
"quarkus.oidc-client.grant.type=jwt\n"
"quarkus.oidc-client.grant-options.jwt.requested_token_use=on_behalf_of\n"
"quarkus.oidc-client.scopes=https://graph.microsoft.com/user.read,offline_access\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:932
#, no-wrap
msgid "quarkus.oidc-token-propagation-reactive.exchange-token=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:935
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation-reactive.client-name` configuration property."
msgstr "`AccessTokenRequestReactiveFilter` はデフォルトでデフォルトの `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-token-propagation-reactive.client-name` 設定プロパティーで選択することができます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client-reference.adoc:937
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:942
#, fuzzy
msgid "The `quarkus-oidc-token-propagation` extension provides two Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.  `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-oidc-bearer-authentication-concept.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication-concept.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value.  The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
msgstr "`quarkus-oidc-token-propagation` エクステンションは、認証情報の伝播を単純化する2つの Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` クラスの実装を提供します。 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` は、現在のアクティブなリクエストに存在する xref:security-oidc-bearer-authentication-concept.adoc[ベアラー] 認証、または認可コードフロー xref:security-oidc-code-flow-authentication-concept.adoc[メカニズムから] 取得したトークンを、HTTP `Authorization` ヘッダーの `Bearer` スキーム値として伝播します。 `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` は同じ機能を提供しますが、さらに JWT トークンのサポートを提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:944
msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr "コードフローアクセストークンは (ID トークンとは異なり)、現在の Quarkus エンドポイントに伝播され、現在認証されているユーザーに代わってリモートサービスにアクセスすることを意図しているからです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:946
msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr "しかし、エンドツーエンドで直接 Bearer トークンを伝播することは、可能な限り避けるべきです。例えば、`Client -> Service A -> Service B` では、`Client` から `Service A` に送られたトークンを `Service B` が受け取ります。このような場合、`Service B` はトークンが `Service A` から来たのか、それとも `Client` から直接来たのかを区別することができません。`Service B` は、トークンが `Service A` から来たことを確認するために、新しい発行者とオーディエンスのクレームをアサートする必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:948
msgid "Additionally, a complex application may need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or a completely different set of scopes to access `Service B`."
msgstr "さらに、複雑なアプリケーションでは、トークンを伝搬する前に交換または更新する必要があるかもしれません。例えば、`Service A` が `Service B` にアクセスするとき、アクセスコンテキストが異なるかもしれません。この場合、`Service A` には `Service B` にアクセスするための狭いスコープまたは完全に異なるスコープが付与される場合があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:950
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "以下のセクションでは、`AccessTokenRequestFilter` と `JsonWebTokenRequestFilter` がどのように役立つかを説明します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:951
#, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr "RestClient AccessTokenRequestFilter"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:954
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` は、すべてのトークンをStringとして扱うため、JWTトークンと不透明なトークンの両方を扱うことができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:956
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:978
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:983
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:990
#, fuzzy
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "また、 `quarkus.oidc-token-propagation.register-filter` プロパティを `true` に、 `quarkus.oidc-token-propagation.json-web-token` プロパティを `false` （デフォルト値）に設定すれば、すべての MP Rest または Jakarta REST クライアントに `AccessTokenRequestFilter` を自動的に登録することができる。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:991
#, no-wrap
msgid "Exchange Token Before Propagation"
msgstr "伝播前のトークンを交換する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:994
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr "もし、現在のアクセストークンを伝播する前に交換する必要があり、かつ link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] やその他の link:https://tools.ietf.org/html/rfc8693[Token Exchange] トークン付与をサポートする OpenID Connect Provider で作業する場合は、`AccessTokenRequestFilter` をこのように設定することが可能です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1007
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exhange the current token then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr "`Azure` のように、 link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWTベアラートークングラント] を使用して現在のトークンを交換する link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[必要がある] プロバイダを使用する場合、 `AccessTokenRequestFilter` のようにトークンを交換するように設定することができます:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1022
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "`AccessTokenRequestFilter` は `OidcClient` を使用して現在のトークンを交換することに注意してください。また、`quarkus.oidc-client.grant-options.exchange` を使用して OpenID Connect プロバイダーが期待する追加の交換プロパティーを設定できます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1024
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr "`AccessTokenRequestFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-token-propagation.client-name` 設定プロパティーで選択することができます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:1025
#, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1028
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr "`JsonWebTokenRequestFilter` の使用は、Bearer JWT トークンを扱う場合に推奨します。これらのトークンは `issuer` や `audience` などの claim を変更でき、更新したトークンは再度セキュリティー保護 (例えば、再署名) を受けることができます。これは注入された `org.eclipse.microprofile.jwt.JsonWebToken` を想定しているので、不透明なトークンでは動作しません。また、OpenID Connect プロバイダーが Token Exchange プロトコルをサポートしている場合は、代わりに `AccessTokenRequestFilter` を使用することを推奨します - JWT と不透明な bearer トークンの両方を `AccessTokenRequestFilter` で安全に交換することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1030
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr "`JsonWebTokenRequestFilter` により、`Service A` の実装は注入された `org.eclipse.microprofile.jwt.JsonWebToken` を新しい `issuer` と `audience` claim 値で更新し、更新したトークンを新しい署名で再度保護することが簡単にできます。唯一の難しいステップは、`Service A` が署名鍵を持っていることを確認することです。署名鍵は、安全なファイルシステムか、Vault のようなリモートセキュアストレージからプロビジョニングする必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1032
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:1037
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:1042
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@JsonWebToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:1054
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:1059
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(JsonWebTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1066
#, fuzzy
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MicroProfile REST or Jakarta REST clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "あるいは、 `quarkus.oidc-token-propagation.register-filter` と `quarkus.oidc-token-propagation.json-web-token` の両方のプロパティを `true` に設定すると、すべての MicroProfile REST または Jakarta REST クライアントで `JsonWebTokenRequestFilter` が自動的に登録されます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:1067
#, no-wrap
msgid "Update Token Before Propagation"
msgstr "伝播前のトークンの更新"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1070
msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr "注入されたトークンの `iss` (issuer) や `aud` (audience) の主張を更新して、新しい署名で保護する必要がある場合は、次のように `JsonWebTokenRequestFilter` を設定できます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:1081
#, no-wrap
msgid ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1084
msgid "As already noted above, please use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider which supports a Token Exchange protocol."
msgstr "既に述べたように、Token Exchange プロトコルをサポートする Keycloak や OpenID Connect Provider を使用する場合は、`AccessTokenRequestFilter` を使用してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1090
#, fuzzy
msgid "You can generate the tokens as described in xref:security-oidc-bearer-authentication-concept.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "OpenID Connect xref:security-oidc-bearer-authentication-concept.adoc#integration-testing[Bearer Token Integration testing] のセクションで説明したように、トークンを生成することができます。RESTテストエンドポイントを準備します。注入されたMP RESTクライアントを使用するテストフロントエンドエンドポイントに、トークン伝播フィルタを登録して下流エンドポイントに呼び出すことができます。例えば、 `main` Quarkusリポジトリの `integration-tests/oidc-token-propagation` を参照してください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:1102
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1105
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "`quarkus-oidc-token-propagation-reactive` エクステンションは、`io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` を提供します。これは、現在の `Bearer` または `Authorization Code Flow` アクセストークンを伝播するために使用することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1108
msgid "The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning the tokens before the propagation.  However, these features may be added in the future."
msgstr "(非リアクティブの `quarkus-oidc-token-propagation` エクステンションとは対照的に) `quarkus-oidc-token-propagation-reactive` エクステンションは現在、伝播の前にトークンを交換したり放棄することをサポートしていません。しかし、これらの機能は将来的に追加される可能性があります。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client-reference.adoc:1109
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1112
msgid "xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]"
msgstr "xref:security-openid-connect-client.adoc[OpenID Connect Clientとトークン伝搬クイックスタート]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1113
msgid "xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer authentication]"
msgstr "xref:security-oidc-bearer-authentication-concept.adoc[OIDC ベアラー認証]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1114
msgid "xref:security-oidc-code-flow-authentication-concept.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication-concept.adoc[Webアプリケーションを保護するためのOIDCコードフローメカニズム]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1114
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"

#~ msgid "OpenID Connect (OIDC) and OAuth2 Client and Filters Reference Guide "
#~ msgstr "OpenID Connect (OIDC) および OAuth2 クライアントとフィルターのリファレンスガイド "

#~ msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org[Keycloak]"
#~ msgstr "https://www.keycloak.org[Keycloak] などの OpenID Connect および OAuth 2.0 準拠の認証サーバーからアクセストークンを取得および更新するための `quarkus-oidc-client`、`quarkus-oidc-client-reactive-filter` および `quarkus-oidc-client-filter` エクステンション"

#~ msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants may be required if you are building a complex microservices application and would like to avoid the same `Bearer` token be propagated to and used by more than one service. Please see <<token-propagation-reactive,Token Propagation in MicroProfile RestClient Reactive filter>> and <<token-propagation,Token Propagation in MicroProfile RestClient filter>> for more details."
#~ msgstr "複雑なマイクロサービスアプリケーションを構築していて、同じ `Bearer` トークンが複数のサービスに伝搬して使用されるのを避けたい場合は、 `urn:ietf:params:oauth:grant-type:token-exchange` または `urn:ietf:params:oauth:grant-type:jwt-bearer` グラントの使用が必要になることがあります。詳細は、 link:#token-propagation-reactive[MicroProfile RestClient ReactiveフィルターのToken Propagation] と link:#token-propagation[MicroProfile RestClientフィルターのToken Propagation] を参照してください。"

#~ msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reasons you can not use the xref:security-openid-connect-web-authentication.adoc[Quarkus OpenID Connect extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
#~ msgstr "何らかの理由で xref:security-openid-connect-web-authentication.adoc[Quarkus OpenID Connect extension] を使用して認証コードフローをサポートできない場合、`OidcClient` を使用して `authorization code` グラントをサポートすることが必要になることがあります。認証コードフローを実装する正当な理由がある場合は、`OidcClient` を次のように設定します。"

#~ msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<oidc-client-filter, Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
#~ msgstr "これは `OidcClientRequestFilter` と同じように動作します (<<oidc-client-filter, MicroProfile RestClient client filterでのOidcClientの使用>> 参照) - `OidcClient` を使用してアクセストークンを取得し、必要に応じてリフレッシュして、HTTP `Authorization` `Bearer` スキームの値としてセットします。違いは xref:rest-client-reactive.adoc[Reactive RestClient] で動作することと、トークンの取得やリフレッシュ時に現在の IO スレッドをブロックしないノンブロッキングクライアントフィルターを実装している点です。"

#~ msgid "`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.  You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.  For example, given <<use-oidc-clients, this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
#~ msgstr "`OidcClientRequestReactiveFilter` は、デフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は、 `quarkus.oidc-client-reactive-filter.client-name` 設定プロパティで選択することができます。また、 `@OidcClientFilter` アノテーションの `value` 属性を設定することで、 `OidcClient` を選択することができます。アノテーションで設定されたクライアント名は、 `quarkus.oidc-client-reactive-filter.client-name` 設定プロパティよりも高い優先度を持ちます。例えば、<<use-oidc-clients, この>> `jwt-secret` named OIDC クライアント宣言があれば、このクライアントを次のように参照することができます:"

#~ msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
#~ msgstr "`quarkus-oidc-client-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。このフィルターは、`OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#~ msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
#~ msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#~ msgid "`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.  You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.  For example, given <<use-oidc-clients, this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
#~ msgstr "`OidcClientRequestFilter` は、デフォルトでデフォルトの `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-client-filter.client-name` 設定プロパティで選択することができます。 また、`@OidcClientFilter` アノテーションの `value` 属性を設定することでも、`OidcClient` を選択することができます。アノテーションで設定したクライアント名は、`quarkus.oidc-client-filter.client-name` 設定プロパティより優先されます。 例えば、<<use-oidc-clients, この>> `jwt-secret` という名前のOIDCクライアント宣言がある場合、このクライアントを次のように参照することができます:"

#~ msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
#~ msgstr "また、名前付きの `Tokens` を注入することもできます。<<named-oidc-clients,名前の付いたOidcClientとトークンの注入>> を参照してください。"

#~ msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-openid-connect.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
#~ msgstr "Keycloak を使用する場合は、xref:security-openid-connect.adoc#integration-testing-keycloak[OpenID Connect Bearer Token 結合テスト] Keycloak セクションで説明したのと同じ方法を使用することができます。"

#~ msgid "The `quarkus-oidc-token-propagation-reactive` extension provides RestEasy Reactive Client `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` that simplifies the propagation of authentication information by propagating the xref:security-openid-connect.adoc[Bearer] token present in the current active request or the token acquired from the xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow], as the HTTP `Authorization` header's `Bearer` scheme value."
#~ msgstr "quarkus-oidc-token-propagation-reactive` エクステンションは、RestEasy Reactive Client `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` を提供し、認証情報の伝搬を簡素化するもので、このフィルタは、現在アクティブなリクエストに存在する xref:security-openid-connect. xref:security-openid-connect.adoc[ベアラー] トークン、または xref:security-openid-connect-web-authentication.adoc[認可コードフロー] から取得したトークンを HTTP `Authorization` ヘッダーの `Bearer` スキーム値として伝播することで、認証情報の伝播を単純化します。"

#~ msgid "The `quarkus-oidc-token-propagation` extension provides two JAX-RS `javax.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.  `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-openid-connect.adoc[Bearer] token present in the current active request or the token acquired from the xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow], as the HTTP `Authorization` header's `Bearer` scheme value.  The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
#~ msgstr "`quarkus-oidc-token-propagation` エクステンションは、認証情報の伝播を簡単にするために、2 つの JAX-RS `javax.ws.rs.client.ClientRequestFilter` クラスの実装を提供します。`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` は、現在のアクティブなリクエストに存在する xref:security-openid-connect.adoc[Bearer] トークン、または xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow] から取得したトークンを HTTP `Authorization` ヘッダの `Bearer` スキーマ値として伝播します。`io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` は同じ機能を提供しますが、さらに JWT トークンのサポートを提供します。"

#~ msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
#~ msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#~ msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
#~ msgstr "また、`quarkus.oidc-token-propagation.register-filter` と `quarkus.oidc-token-propagation.json-web-token` の両方のプロパティーを `true` にすると、すべての MP Rest または JAX-RS クライアントで自動的に `JsonWebTokenRequestFilter` を登録することができるようになります。"

#~ msgid "You can generate the tokens as described in xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
#~ msgstr "xref:security-openid-connect.adoc#integration-testing[OpenID Connect ベアラートークンの統合テスト] セクションにあるように、トークンを生成することができます。REST テストエンドポイントを準備します。注入された MP REST クライアントを使用するテストフロントエンドポイントに、下流のエンドポイントで呼び出すためのトークン伝搬フィルターが登録されています。たとえば、`main` Quarkus リポジトリーの `integration-tests/oidc-token-propagation` を参照してみてください。"

#~ msgid "xref:security-openid-connect.adoc[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
#~ msgstr "xref:security-openid-connect.adoc[Quarkus - OpenID Connect (OIDC) を使用した、ベアラートークン認可によるサービスアプリケーションの保護]"

#~ msgid "xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
#~ msgstr "xref:security-openid-connect-web-authentication.adoc[Quarkus - OpenID Connectを使用した認可コードフローによるWebアプリケーションの保護]"

#~ msgid "`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property."
#~ msgstr "`OidcClientRequestReactiveFilter` は、デフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-client-reactive-filter.client-name` という設定プロパティーで選択することができます。"

#~ msgid "`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property."
#~ msgstr "`OidcClientRequestFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-client-filter.client-name` という設定プロパティーで選択することができます。"
