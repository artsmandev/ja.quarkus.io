# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-06-29 15:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-client-reference.adoc:6
#, fuzzy, no-wrap
msgid "OpenID Connect (OIDC) and OAuth2 Client and Filters Reference Guide "
msgstr "OpenID Connect（OIDC）およびOAuth2クライアントとフィルタのリファレンスガイド"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:12
#, fuzzy
msgid "This reference guide explains how to use:"
msgstr "このリファレンスガイドは、使用方法について説明しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:14
#, fuzzy
msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org[Keycloak]"
msgstr " `quarkus-oidc-client` OpenID Connect や link:https://www.keycloak.org[Keycloak] などの OAuth 2.0 準拠の認証サーバからアクセストークンを取得し、更新するための , `quarkus-oidc-client-reactive-filter` および `quarkus-oidc-client-filter` 拡張機能です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:15
#, fuzzy
msgid "`quarkus-oidc-token-propagation` and `quarkus-oidc-token-propagation-reactive` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
msgstr " `quarkus-oidc-token-propagation` および の拡張機能により、現在の または のアクセストークンを伝搬させることができます。 `quarkus-oidc-token-propagation-reactive` `Bearer` `Authorization Code Flow` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:17
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:19
#, fuzzy
msgid "Please also see xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]."
msgstr "link:security-openid-connect-client.html[OpenID Connect Client and Token Propagation Quickstartも] ご覧ください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client-reference.adoc:20
#, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:23
msgid "Add the following dependency:"
msgstr "次の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:30
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:33
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` エクステンションは、SmallRye Mutiny `Uni` および `Vert.xWebClient` を使用してトークンを取得および更新するために使用できるリアクティブな `io.quarkus.oidc.client.OidcClient` を提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:35
#, fuzzy
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using the token grants such as `client_credentials` or `password` and refresh the tokens using a `refresh_token` grant."
msgstr " `OidcClient` は、構築時に IDP トークン・エンドポイント URL を自動検出または手動で設定して初期化し、このエンドポイントを使用して や などのトークングラントを使用してアクセストークンを取得し、 グラントを使用してトークンをリフレッシュすることができます。 `client_credentials` `password` `refresh_token` "

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:36
#, fuzzy, no-wrap
msgid "Token Endpoint Configuration"
msgstr "トークン・エンドポイントの構成"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:39
#, fuzzy
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` のパスを追加することで、トークンのエンドポイントアドレスが検出されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:41
#, fuzzy
msgid "For example, given this Keycloak URL:"
msgstr "例えば、このKeycloakのURLがあるとします。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:45
#, no-wrap
msgid "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:48
#, fuzzy
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr " `OidcClient` は、トークンのエンドポイント URL が `<a href=\"http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\" class=\"bare\">http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens</a>` ."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:50
#, fuzzy
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、トークンエンドポイントのアドレスを相対パスの値で設定することができます。例:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:57
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
"quarkus.oidc-client.token-path=/protocol/openid-connect/tokens\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:60
#, fuzzy
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "ディスカバリーを使用せずにトークンエンドポイントのURLを設定する、よりコンパクトな方法は、 `quarkus.oidc-client.token-path` を絶対的なURLに設定することです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:64
#, no-wrap
msgid "quarkus.oidc-client.token-path=http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:67
#, fuzzy
msgid "Setting 'quarkus.oidc-client.auth-server-url' and 'quarkus.oidc-client.discovery-enabled' is not required in this case."
msgstr "この場合、「quarkus.oidc-client.auth-server-url」と「quarkus.oidc-client.discovery-enabled」の設定は必要ありません。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:68
#, fuzzy, no-wrap
msgid "Supported Token Grants"
msgstr "トークン・グラントをサポート"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:71
#, fuzzy
msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr " `OidcClient` がトークンの取得に使用できる主なトークングラントは、 `client_credentials` (デフォルト) と `password` グランツです。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:72
#, no-wrap
msgid "Client Credentials Grant"
msgstr "クライアントクレデンシャル・グラント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:75
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:81
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:84
msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
msgstr "`client_credentials` グラントにより、`quarkus.oidc-client.grant-options.client.<param-name>=<value>` を介してトークンリクエストに追加のパラメータを設定できます。 `audience` パラメータを使用して目的のトークン受信者を設定する方法は次のとおりです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:93
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"# 'client' is a shortcut for `client_credentials`\n"
"quarkus.oidc-client.grant.type=client\n"
"quarkus.oidc-client.grant-options.client.audience=https://example.com/api\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:95
#, no-wrap
msgid "Password Grant"
msgstr "パスワード・グラント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:98
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:107
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:110
#, fuzzy
msgid "It can be further customized using a `quarkus.oidc-client.grant-options.password` configuration prefix, similarly to how the client credentials grant can be customized."
msgstr " `quarkus.oidc-client.grant-options.password` コンフィギュレーションプレフィックスを使用して、さらにカスタマイズすることができます。これは、クライアントクレデンシャルグラントをカスタマイズできる方法と同様です。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:111
#, fuzzy, no-wrap
msgid "Other Grants"
msgstr "その他の助成金"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:114
#, fuzzy
msgid "`OidcClient` can also help with acquiring the tokens using the grants which require some extra input parameters which can not be captured in the configuration. These grants are `refresh token` (with the external refresh token), `token exchange` and `authorization code`."
msgstr " `OidcClient` は、設定にない追加入力パラメータを必要とするグラントを使用して、トークンの取得を支援することもできます。これらのグラントは、 (外部リフレッシュトークン付き)、 、 。 `refresh token` `token exchange` `authorization code` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:116
#, fuzzy
msgid "Using the `refresh_token` grant which uses an out-of-band refresh token to acquire a new set of tokens will be required if the existing refresh token has been posted to the current Quarkus endpoint for it to acquire the access token. In this case `OidcClient` needs to be configured as follows:"
msgstr "アクセストークンを取得するために、既存のリフレッシュトークンが現在のQuarkusエンドポイントにポストされた場合、帯域外のリフレッシュトークンを使用して新しいトークンセットを取得する `refresh_token` グラントを使用することが必要になります。この場合、 `OidcClient` を次のように設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:123
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=refresh\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:126
#, fuzzy
msgid "and then you can use `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr "で、与えられたリフレッシュトークンを使って `OidcClient.refreshTokens` メソッドを使い、アクセストークンを取得することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:128
#, fuzzy
msgid "Using the `token exchange` grant may be required if you are building a complex microservices application and would like to avoid the same `Bearer` token be propagated to and used by more than one service. Please see <<token-propagation,Token Propagation in MicroProfile RestClient client filter>> for more details."
msgstr "複雑なマイクロサービスアプリケーションを構築していて、同じ `Bearer` トークンが複数のサービスに伝搬されて使用されるのを避けたい場合、 `token exchange` グラントを使用することが必要な場合があります。詳細については、 link:#token-propagation[MicroProfile RestClientクライアントフィルタのトークン伝搬を] 参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:130
#, fuzzy
msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reasons you can not use the xref:security-openid-connect-web-authentication.adoc[Quarkus OpenID Connect extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
msgstr "何らかの理由で link:security-openid-connect-web-authentication.html[Quarkus OpenID Connect拡張] 機能を使用してAuthorization Code Flowをサポートできない場合、 `OidcClient` を使用して `authorization code` グラントをサポートすることが必要になる場合があります。認可コードフローを実装する正当な理由がある場合は、 `OidcClient` を次のように設定できます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:137
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=code\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:140
#, fuzzy
msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr "で、追加プロパティの Map を受け取る `OidcClient.accessTokens` メソッドを使用し、現在の `code` と `redirect_uri` パラメータを渡して、認証コードとトークンを交換することができます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:141
#, fuzzy, no-wrap
msgid "Grant scopes"
msgstr "グラント・スコープ"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:145
#, fuzzy
msgid "You may need to request that a specific set of scopes is associated with an issued access token.  Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr "発行されたアクセストークンに対して、特定のスコープを関連付けるよう要求する必要がある場合があります。例えば、専用の `quarkus.oidc-client.scopes` リストプロパティを使用します。 `quarkus.oidc-client.scopes=email,phone` "

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:146
#, fuzzy, no-wrap
msgid "Use OidcClient directly"
msgstr "OidcClientを直接使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:149
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:155
#: upstream/_guides/security-openid-connect-client-reference.adoc:195
#, no-wrap
msgid ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
msgstr ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:158
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"
msgstr ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:161
#: upstream/_guides/security-openid-connect-client-reference.adoc:200
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"
msgstr ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:164
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClient client;\n"
msgstr ""
"    @Inject\n"
"    OidcClient client;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:166
#, no-wrap
msgid "    volatile Tokens currentTokens;\n"
msgstr "    volatile Tokens currentTokens;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:171
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public void init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:174
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
msgstr ""
"    @GET\n"
"    public String getResponse() {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:184
#, no-wrap
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // Use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:186
#, fuzzy, no-wrap
msgid "Inject Tokens"
msgstr "トークンを注入する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:189
#, fuzzy
msgid "You can inject `Tokens` which uses `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr " `OidcClient` を内部で利用する `Tokens` を注入することができます。 `Tokens` はアクセストークンを取得し、必要に応じてリフレッシュするために利用できます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:197
#: upstream/_guides/security-openid-connect-client-reference.adoc:469
#, no-wrap
msgid "import io.quarkus.oidc.client.Tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:202
#, no-wrap
msgid "    @Inject Tokens tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:210
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        //  Get the access token which may have been refreshed.\n"
"        String accessToken = tokens.getAccessToken();\n"
"        // Use the access token to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:212
#, fuzzy, no-wrap
msgid "Use OidcClients"
msgstr "OidcClientsを使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:215
#, fuzzy
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr " `io.quarkus.oidc.client.OidcClients` は、 のコンテナです。デフォルトの と、このように設定できる名前付きクライアントが含まれています。 `OidcClient` `OidcClient` "

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:219
#, no-wrap
msgid "quarkus.oidc-client.client-enabled=false\n"
msgstr "quarkus.oidc-client.client-enabled=false\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:223
#, no-wrap
msgid ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:226
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:232
#: upstream/_guides/security-openid-connect-client-reference.adoc:259
#: upstream/_guides/security-openid-connect-client-reference.adoc:290
#: upstream/_guides/security-openid-connect-client-reference.adoc:328
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:235
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:238
#: upstream/_guides/security-openid-connect-client-reference.adoc:266
#: upstream/_guides/security-openid-connect-client-reference.adoc:299
#: upstream/_guides/security-openid-connect-client-reference.adoc:331
#, no-wrap
msgid ""
"@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:241
#: upstream/_guides/security-openid-connect-client-reference.adoc:302
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:248
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client-reference.adoc:253
#, fuzzy
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "link:security-openid-connect-multitenancy.html[OIDCマルチテナントも] 使用し、各OIDCテナントがそれぞれ関連する `OidcClient` 、例えばVert.x `RoutingContext` `tenantId` 属性を使用できます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:263
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:271
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:280
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client-reference.adoc:284
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:294
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:296
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:314
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
"        cfg.setClientId(\"quarkus\");\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(cfg);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:317
#, fuzzy, no-wrap
msgid "Inject named OidcClient and Tokens"
msgstr "OidcClientとトークンという名前でインジェクトする。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:320
#, fuzzy
msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr " `OidcClient` が複数設定されている場合、 `OidcClients` を使用する代わりに、追加の修飾子 `@NamedOidcClient` で `OidcClient` の注入対象を指定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:324
#, no-wrap
msgid "package io.quarkus.oidc.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:335
#, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    OidcClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:341
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        // use client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:344
#, fuzzy
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "同じ修飾子を使用して、 `Tokens` インジェクションに使用する `OidcClient` を指定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:351
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"@RequestScoped\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:355
#, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    Tokens tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:361
#: upstream/_guides/security-openid-connect-client-reference.adoc:482
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:364
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "RestClientのReactive ClientFilterでOidcClientを使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:367
#: upstream/_guides/security-openid-connect-client-reference.adoc:408
#: upstream/_guides/security-openid-connect-client-reference.adoc:940
#, fuzzy
msgid "Add the following Maven Dependency:"
msgstr "以下のMaven Dependencyを追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:374
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:377
#: upstream/_guides/security-openid-connect-client-reference.adoc:418
#, fuzzy
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "また、 `io.quarkus:quarkus-oidc-client` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:379
#, fuzzy
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr " `quarkus-oidc-client-reactive-filter` extension は を提供します。 `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:381
#, fuzzy
msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<oidc-client-filter, Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
msgstr "それは `OidcClientRequestFilter` が行う方法と同様に動作します ( link:#oidc-client-filter[MicroProfile RestClient クライアントフィルタで OidcClient を使用] する を参照)。それは `OidcClient` を使用してアクセストークンを取得し、必要に応じてそれをリフレッシュし、HTTP `Authorization` `Bearer` スキーム値としてそれをセットします。違いは、 link:rest-client-reactive.html[Reactive RestClient] で動作し、トークンを取得または更新するときに現在の IO スレッドをブロックしないノンブロッキング クライアント フィルタを実装していることです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:383
#, fuzzy
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread, and it currently can only be registered with `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation:"
msgstr " `OidcClientRequestReactiveFilter` は、IOスレッドのブロックを避けるため、最初のトークン取得を実行されるまで遅らせます。現在、 アノテーションでのみ登録可能です。 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` "

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:390
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:395
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:399
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<String> getUserName();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:402
#, fuzzy
msgid "`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property."
msgstr " `OidcClientRequestReactiveFilter` はデフォルトで を使用します。名前付き は、 構成プロパティで選択することができます。 `OidcClient` `OidcClient` `quarkus.oidc-client-reactive-filter.client-name` "

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:405
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "RestClientのClientFilterでOidcClientを使用する"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:415
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-filter</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:420
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。このフィルターは、`OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:422
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、`quarkus.oidc-client.early-tokens-acquisition=false` でトークンの取得を遅延させるべきです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:424
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:429
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:434
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:438
#: upstream/_guides/security-openid-connect-client-reference.adoc:456
#: upstream/_guides/security-openid-connect-client-reference.adoc:830
#: upstream/_guides/security-openid-connect-client-reference.adoc:847
#: upstream/_guides/security-openid-connect-client-reference.adoc:891
#: upstream/_guides/security-openid-connect-client-reference.adoc:908
#, no-wrap
msgid ""
"    @GET\n"
"    String getUserName();\n"
"}\n"
msgstr ""
"    @GET\n"
"    String getUserName();\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:441
#: upstream/_guides/security-openid-connect-client-reference.adoc:514
#: upstream/_guides/security-openid-connect-client-reference.adoc:832
#: upstream/_guides/security-openid-connect-client-reference.adoc:893
#, fuzzy
msgid "or"
msgstr "または"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:447
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:452
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:459
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:461
#, fuzzy
msgid "`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property."
msgstr " `OidcClientRequestFilter` はデフォルトで を使用します。名前付き は、 構成プロパティで選択することができます。 `OidcClient` `OidcClient` `quarkus.oidc-client-filter.client-name` "

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:462
#, fuzzy, no-wrap
msgid "Use Custom RestClient ClientFilter"
msgstr "カスタムのRestClient ClientFilterを使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:465
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:473
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:476
#, no-wrap
msgid ""
"    @Inject\n"
"    Tokens tokens;\n"
msgstr ""
"    @Inject\n"
"    Tokens tokens;\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:485
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:487
#, fuzzy
msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
msgstr " `Tokens` という名前でインジェクトすることもできます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:489
#, no-wrap
msgid "Refreshing Access Tokens"
msgstr "アクセストークンの更新"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:493
#, fuzzy
msgid "`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.  Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr " `OidcClientRequestReactiveFilter` `OidcClientRequestFilter` および プロデューサーは、リフレッシュトークンが利用可能な場合、現在の期限切れのアクセストークンをリフレッシュします。さらに、 プロパティを使用すると、HTTP 401 エラーの原因となる期限切れ間近のアクセストークンの送信を回避し、アクセストークンを先取りして更新することができます。たとえば、このプロパティが に設定されていて、アクセストークンの有効期限が3秒未満である場合、このトークンは自動的にリフレッシュされます。 `Tokens` `quarkus.oidc-client.refresh-token-time-skew` `3S` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:495
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr "アクセストークンの更新が必要なのにリフレッシュトークンがない場合は、 `client_credentials` のように設定されたグラントを使って新しいトークンの取得を試みます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:497
#, fuzzy
msgid "Please note that some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
msgstr "OpenID Connectプロバイダによっては、 `client_credentials` のグラントレスポンスでリフレッシュトークンを返さないものがあることに注意してください。例えば、Keycloak 12以降では、 `client_credentials` に対してリフレッシュ・トークンがデフォルトで返されません。また、プロバイダはリフレッシュ・トークンの使用回数を制限している場合があります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:499
#, fuzzy, no-wrap
msgid "OidcClient Authentication"
msgstr "OidcClient 認証"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:503
#, fuzzy
msgid "`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr " `OidcClient` は、 およびその他のグラント要求を成功させるために、OpenID Connect プロバイダを認証する必要があります。 `client_credentials` link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC クライアント認証の] オプションはすべてサポートされています。たとえば次のようなものです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:505
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:511
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:520
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:523
#, fuzzy
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "または link:credentials-provider.html[CredentialsProviderから] 取得した秘密と一緒に使用します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:528
#: upstream/_guides/security-openid-connect-client-reference.adoc:560
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:533
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentails returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:536
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:543
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:546
#, fuzzy
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr " `client_secret_jwt` 署名アルゴリズムは、 `HS256` 。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:552
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:555
#, fuzzy
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr "または link:credentials-provider.html[CredentialsProviderから] 取得した秘密で、署名アルゴリズムは `HS256` 。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:565
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:568
#, fuzzy
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr " `private_key_jwt` をPEMキーファイルとした場合、署名アルゴリズムは 。 `RS256` "

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:574
#: upstream/_guides/security-openid-connect-client-reference.adoc:603
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:577
#, fuzzy
msgid "`private_key_jwt` with the key store file, signature algorithm is `RS256`:"
msgstr " `private_key_jwt` は，署名アルゴリズムが である。 `RS256` "

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:585
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:588
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc-client.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:591
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr " `client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントの秘密がワイヤーを通過しないようにします。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:592
#, fuzzy, no-wrap
msgid "Additional JWT Authentication options"
msgstr "JWT認証の追加オプション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:595
#, fuzzy
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr " `client_secret_jwt` または `private_key_jwt` のいずれかの認証方法を使用する場合、JWT 署名アルゴリズム、キー識別子、オーディエンス、サブジェクト、発行者などをカスタマイズすることが可能です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:599
#, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:608
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc-client.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc-client.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:611
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc-client.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:614
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc-client.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:617
#, no-wrap
msgid ""
"# custom subject instead of the client id :\n"
"quarkus.oidc-client.credentials.jwt.subject=custom-subject\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:620
#, no-wrap
msgid ""
"# custom issuer instead of the client id :\n"
"quarkus.oidc-client.credentials.jwt.issuer=custom-issuer\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:622
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:625
#, fuzzy
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject properties."
msgstr "Apple OpenID Connect Providerは、 `private_key_jwt` 認証方式で生成されたJWTに、Appleアカウント固有の発行者と件名のプロパティを付与したものを秘密として、 `client_secret_post` 方式を採用しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:627
#, fuzzy
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr " `quarkus-oidc-client` は、非標準の 認証方式をサポートしており、以下のように設定することができます。 `client_secret_post_jwt` "

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:633
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${apple.url}\n"
"quarkus.oidc-client.client-id=${apple.client-id}\n"
"quarkus.oidc-client.credentials.client-secret.method=post-jwt\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:638
#, no-wrap
msgid ""
"quarkus.oidc-client.credentials.jwt.key-file=ecPrivateKey.pem\n"
"quarkus.oidc-client.credentials.jwt.signature-algorithm=ES256\n"
"quarkus.oidc-client.credentials.jwt.subject=${apple.subject}\n"
"quarkus.oidc-client.credentials.jwt.issuer=${apple.issuer}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:640
#, fuzzy, no-wrap
msgid "Mutual TLS"
msgstr "相互TLS"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:643
#, fuzzy
msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`mTLS`) authentication process."
msgstr "OpenID Connect プロバイダによっては、 `Mutual TLS` ( `mTLS` ) 認証プロセスの一部として、クライアントの認証が必要な場合があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:645
#, fuzzy
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr " `quarkus-oidc-client` は、以下のように設定することで、 をサポートします。 `mTLS` "

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:649
#, no-wrap
msgid "quarkus.oidc.tls.verification=certificate-validation\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:653
#, no-wrap
msgid ""
"# Keystore configuration\n"
"quarkus.oidc.client.tls.key-store-file=client-keystore.jks\n"
"quarkus.oidc.client.tls.key-store-password=${key-store-password}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:657
#, no-wrap
msgid ""
"# Add more keystore properties if needed:\n"
"#quarkus.oidc.client.tls.key-store-alias=keyAlias\n"
"#quarkus.oidc.client.tls.key-store-alias-password=keyAliasPassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:663
#, no-wrap
msgid ""
"# Truststore configuration\n"
"quarkus.oidc.client.tls.trust-store-file=client-truststore.jks\n"
"quarkus.oidc.client.tls.trust-store-password=${trust-store-password}\n"
"# Add more truststore properties if needed:\n"
"#quarkus.oidc.client.tls.trust-store-alias=certAlias\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:666
#: upstream/_guides/security-openid-connect-client-reference.adoc:931
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:669
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:682
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>org.awaitility</groupId>\n"
"    <artifactId>awaitility</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:685
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:688
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:696
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:699
msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "Wiremockベースの `QuarkusTestResourceLifecycleManager` を例えば以下のように書きます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:702
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr "package io.quarkus.it.keycloak;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:705
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:708
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:712
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
"import com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:714
#, no-wrap
msgid "import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:717
#, no-wrap
msgid ""
"public class KeycloakRealmResourceManager implements QuarkusTestResourceLifecycleManager {\n"
"    private WireMockServer server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:720
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
msgstr ""
"    @Override\n"
"    public Map<String, String> start() {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:723
#, no-wrap
msgid ""
"        server = new WireMockServer(wireMockConfig().dynamicPort().useChunkedTransferEncoding(ChunkedEncodingPolicy.NEVER));\n"
"        server.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:738
#, no-wrap
msgid ""
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=password&username=alice&password=alice\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_1\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=refresh_token&refresh_token=refresh_token_1\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_2\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:744
#, no-wrap
msgid ""
"        Map<String, String> conf = new HashMap<>();\n"
"        conf.put(\"keycloak.url\", server.baseUrl());\n"
"        return conf;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:753
#, no-wrap
msgid ""
"    @Override\n"
"    public synchronized void stop() {\n"
"        if (server != null) {\n"
"            server.stop();\n"
"            server = null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:756
msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:758
msgid "Set `application.properties`, for example:"
msgstr "`application.properties` を次のように設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:770
#, no-wrap
msgid ""
"# Use 'keycloak.url' property set by the test KeycloakRealmResourceManager\n"
"quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"quarkus.oidc-client.token-path=/tokens\n"
"quarkus.oidc-client.client-id=quarkus-service-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:773
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr "そして最後にテストコードを書きます。上記の Wiremock ベースのリソースがある場合、最初のテスト起動では `access_token_1` アクセストークンが返却されますが、このアクセストークンは 4 秒で期限切れになります。 `awaitility` を使用して約 5 秒間待つと、次のテスト起動時に `access_token_2` アクセストークンが返され、期限切れの `access_token_1` アクセストークンがリフレッシュされたことが確認できます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:774
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:777
#, fuzzy
msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-openid-connect.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr "Keycloakを使用している場合は、 link:security-openid-connect.html#integration-testing-keycloak.adoc[OpenID Connect Bearer Token Integration testing] Keycloakのセクションで説明したのと同じ方法を使用することができます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:778
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:781
#, fuzzy
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr " `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` レベルのロギングを有効にして、トークン取得とリフレッシュのエラーの詳細を確認してください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:786
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:789
#, fuzzy
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "OidcClient の初期化エラーの詳細を確認するには、 `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` レベルのロギングを有効にしてください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:794
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client-reference.adoc:797
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:802
#, fuzzy
msgid "The `quarkus-oidc-token-propagation` extension provides two JAX-RS `javax.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.  `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-openid-connect.adoc[Bearer] token present in the current active request or the token acquired from the xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow], as the HTTP `Authorization` header's `Bearer` scheme value.  The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
msgstr " `quarkus-oidc-token-propagation` 拡張は、認証情報の伝達を簡略化する2つの JAX-RS `javax.ws.rs.client.ClientRequestFilter` クラスの実装を提供する。 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` は、現在のアクティブなリクエストに存在する link:security-openid-connect.html[Bearer] トークン、または link:security-openid-connect-web-authentication.html[Authorization Code Flow] から取得したトークンを、HTTP `Authorization` ヘッダーの `Bearer` スキーム値として伝達する。 `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` は同じ機能を提供しますが、さらに JWT トークンのサポートを提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:804
#, fuzzy
msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr "コードフローアクセストークンは（IDトークンとは異なり）、現在のQuarkusエンドポイントに伝播され、現在認証されているユーザーの代わりにリモートサービスにアクセスすることを目的としているためです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:806
#, fuzzy
msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr "しかし、エンドツーエンドの直接のベアラートークン伝搬は、可能であれば避けるべきです。たとえば、 `Client → Service A → Service B` 。 `Service B` が `Client` から `Service A` に送られたトークンを受け取る場合。このような場合、 `Service B` は、トークンが `Service A` から来たのか、直接 `Client` から来たのか区別することができない。 `Service B` がトークンが `Service A` から来たことを確認するためには、新しい発行者と聴衆の主張をアサートできる必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:808
#, fuzzy
msgid "Additionally, a complex application may need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or a completely different set of scopes to access `Service B`."
msgstr "さらに、複雑なアプリケーションでは、トークンを伝搬する前に交換または 更新する必要があるかもしれない。たとえば、 `Service A` が `Service B` にアクセスするとき、アクセスコンテキストは異なるかもしれない。この場合、 `Service A` には、 `Service B` にアクセスするための狭いスコープまたはまったく異なるスコープのセットが付与されるかもしれない。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:810
#, fuzzy
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "次のセクションでは、 `AccessTokenRequestFilter` と `JsonWebTokenRequestFilter` がどのように役立つかを紹介します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:811
#, fuzzy, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr "RestClient AccessTokenRequestFilter"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:814
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` は、すべてのトークンをStringとして扱うため、JWTトークンと不透明なトークンの両方を扱うことができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:816
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:821
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:826
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:838
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:843
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:850
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:851
#, fuzzy, no-wrap
msgid "Exchange Token Before Propagation"
msgstr "伝搬前のトークンを交換する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:854
#, fuzzy
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr "もし現在のアクセストークンを伝搬前に交換する必要があり、 link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] や link:https://tools.ietf.org/html/rfc8693[Token Exchange] トークン付与をサポートする他の OpenID Connect Provider を使用している場合は、次のように `AccessTokenRequestFilter` を設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:862
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=exchange\n"
"quarkus.oidc-client.grant-options.exchange.audience=quarkus-app-exchange\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:864
#, no-wrap
msgid "quarkus.oidc-token-propagation.exchange-token=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:867
#, fuzzy
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "注 `AccessTokenRequestFilter` は `OidcClient` を使って現在のトークンを交換し、 `quarkus.oidc-client.grant-options.exchange` を使って OpenID Connect Provider が期待する追加の交換プロパティを設定することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:869
#, fuzzy
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr " `AccessTokenRequestFilter` はデフォルトで を使用します。名前付き は、 構成プロパティで選択することができます。 `OidcClient` `OidcClient` `quarkus.oidc-token-propagation.client-name` "

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:870
#, fuzzy, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:873
#, fuzzy
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr "Bearer JWT トークンを扱う場合、 `issuer` や `audience` のような主張を変更し、更新されたトークンを再度保護（例えば、再署名）することが可能な `JsonWebTokenRequestFilter` を使用することが推奨されます。これは注入された `org.eclipse.microprofile.jwt.JsonWebToken` を期待するので、不透明なトークンでは動作しません。また、OpenID Connect プロバイダが Token Exchange プロトコルをサポートしている場合は、代わりに `AccessTokenRequestFilter` を使用することを推奨します。JWT と不透明なベアラートークンの両方を `AccessTokenRequestFilter` で安全に交換することができるからです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:875
#, fuzzy
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr " `JsonWebTokenRequestFilter` は、 の実装が、注入された を新しい と の請求値で更新し、更新されたトークンを新しい署名で再度保護することを容易にします。唯一の難しいステップは、 が署名鍵を持っていることを確認することです。これは、安全なファイルシステムまたは Vault などのリモート安全ストレージからプロビジョニングされる必要があります。 `Service A` `org.eclipse.microprofile.jwt.JsonWebToken` `issuer` `audience` `Service A` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:877
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:882
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:887
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@JsonWebToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:899
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:904
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(JsonWebTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:911
#, fuzzy
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "あるいは、 `quarkus.oidc-token-propagation.register-filter` と `quarkus.oidc-token-propagation.json-web-token` の両プロパティを `true` に設定すれば、すべての MP Rest または JAX-RS クライアントに `JsonWebTokenRequestFilter` を自動的に登録することができる。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:912
#, fuzzy, no-wrap
msgid "Update Token Before Propagation"
msgstr "伝搬前のトークンの更新"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:915
#, fuzzy
msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr "注入されたトークンの `iss` (発行者) および/または `aud` (視聴者) の主張を更新し、新しい署名で再度保護する必要がある場合は、次のように `JsonWebTokenRequestFilter` を設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:926
#, no-wrap
msgid ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"
msgstr ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:929
#, fuzzy
msgid "As already noted above, please use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider which supports a Token Exchange protocol."
msgstr "すでに述べたように、KeycloakやOpenID Connect Providerなど、Token Exchangeプロトコルをサポートしているプロバイダと連携する場合は、 `AccessTokenRequestFilter` を使用してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:935
#, fuzzy
msgid "You can generate the tokens as described in xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "link:security-openid-connect.html#integration-testing[OpenID Connect Bearer Token Integration のテスト] セクションで説明されているように、トークンを生成することができます。REST テストエンドポイントを準備します。注入された MP REST クライアントを使用するテストフロントエンドポイントに、トークン伝搬フィルタを登録して下流のエンドポイントに呼び出させることができます。たとえば、 `main` Quarkus リポジトリの `integration-tests/oidc-token-propagation` を参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client-reference.adoc:937
#, fuzzy, no-wrap
msgid "Token Propagation Reactive"
msgstr "トークン プロパゲーション リアクティブ"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:947
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:950
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:953
msgid "The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning the tokens before the propagation.  However, these features may be added in the future."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client-reference.adoc:954
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:957
msgid "xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:958
msgid "xref:security-openid-connect.adoc[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:959
msgid "xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:959
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"
