# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-06 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/mongodb-panache.adoc:6
#, fuzzy, no-wrap
msgid "Simplified MongoDB with Panache"
msgstr "Panacheを使用したシンプルなMongoDB"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:13
#, fuzzy
msgid "MongoDB is a well known NoSQL Database that is widely used, but using its raw API can be cumbersome as you need to express your entities and your queries as a MongoDB link:{mongodb-doc-root-url}/bson/documents/#document[`Document`]."
msgstr "MongoDBは広く使われているよく知られたNoSQLデータベースですが、その生のAPIを使用すると、エンティティーとクエリをMongoDBとして表現する必要があるため、面倒なことになります。 link:{mongodb-doc-root-url}/bson/documents/#document[`Document`] ."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:15
#, fuzzy
msgid "MongoDB with Panache provides active record style entities (and repositories) like you have in link:hibernate-orm-panache[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr "MongoDB with Panacheは、 link:hibernate-orm-panache[Hibernate ORM with Panacheの] ようなアクティブなレコードスタイルのエンティティー(とリポジトリ)を提供し、エンティティーをQuarkusで書くのが簡単で楽しいものにすることに重点を置いています。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:17
#, fuzzy
msgid "It is built on top of the link:mongodb[MongoDB Client] extension."
msgstr "link:mongodb[MongoDB Client] エクステンションの上に構築されています。"

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:18
#, fuzzy, no-wrap
msgid "First: an example"
msgstr "最初に:一例"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:21
#, fuzzy
msgid "Panache allows you to write your MongoDB entities like this:"
msgstr "Panacheでは、MongoDBのエンティティーをこのように書くことができます。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:28
#: upstream/_guides/mongodb-panache.adoc:257
#, no-wrap
msgid ""
"public class Person extends PanacheMongoEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:32
#: upstream/_guides/mongodb-panache.adoc:261
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:36
#: upstream/_guides/mongodb-panache.adoc:265
#, no-wrap
msgid ""
"    public static List<Person> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:41
#: upstream/_guides/mongodb-panache.adoc:270
#, no-wrap
msgid ""
"    public static void deleteLoics(){\n"
"        delete(\"name\", \"Loïc\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:45
#, fuzzy
msgid "You have noticed how much more compact and readable the code is compared to using the MongoDB API? Does this look interesting? Read on!"
msgstr "MongoDB APIを使うのと比べて、コードがどれだけコンパクトで読みやすくなっているかお気づきでしょうか?面白そうに見えますか?ぜひ読んでみてください。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:49
#, fuzzy
msgid "the `list()` method might be surprising at first. It takes fragments of PanacheQL queries (subset of JPQL) and contextualizes the rest.  That makes for very concise but yet readable code.  MongoDB native queries are also supported."
msgstr "`list()` メソッドは、最初は驚くかもしれません。これは PanacheQL クエリの断片 (JPQL のサブセット) を取り、残りの部分をコンテキスト化します。これにより、非常に簡潔でありながら読みやすいコードになっています。MongoDBネイティブクエリもサポートしています。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:52
#, fuzzy
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  MongoDB with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheMongoRepository`."
msgstr "上で説明したのは、基本的には link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[アクティブレコードパターン] で、エンティティーパターンと呼ばれることもあります。MongoDB with Panache は、 `PanacheMongoRepository` を通じてより古典的な link:https://martinfowler.com/eaaCatalog/repository.html[リポジトリパターンを] 使用することもできます。"

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:53
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:57
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:59
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:61
#, fuzzy
msgid "The solution is located in the `mongodb-panache-quickstart` {quickstarts-tree-url}/mongodb-panache-quickstart[directory]."
msgstr "ソリューションは `mongodb-panache-quickstart` {quickstarts-tree-url}/mongodb-panache-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:62
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:65
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:75
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=mongodb-panache-quickstart \\\n"
"    -DclassName=\"org.acme.mongodb.panache.PersonResource\" \\\n"
"    -Dpath=\"/persons\" \\\n"
"    -Dextensions=\"resteasy-reactive-jackson,mongodb-panache\"\n"
"cd mongodb-panache-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:79
#, fuzzy
msgid "This command generates a Maven structure importing the RESTEasy Reactive Jackson and MongoDB with Panache extensions.  After this, the `quarkus-mongodb-panache` extension has been added to your `pom.xml`."
msgstr "このコマンドは、RESTEasy/JAX-RS、Jackson、MongoDBをPanacheエクステンションでインポートしたMaven構造体を生成します。この後、 `quarkus-mongodb-panache` エクステンションが `pom.xml` ."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:81
#, fuzzy
msgid "If you don't want to generate a new project, add the dependency in your `pom.xml`:"
msgstr "新しいプロジェクトを生成したくない場合は、 `pom.xml` ."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:88
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-mongodb-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:90
#, fuzzy, no-wrap
msgid "Setting up and configuring MongoDB with Panache"
msgstr "PanacheでMongoDBを設定・設定する"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:93
#, fuzzy
msgid "To get started:"
msgstr "始めるには"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:95
#, fuzzy
msgid "add your settings in `{config-file}`"
msgstr "で設定を追加します。 `{config-file}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:96
#, fuzzy
msgid "Make your entities extend `PanacheMongoEntity` (optional if you are using the repository pattern)"
msgstr "エンティティーを `PanacheMongoEntity` を拡張するようにします (リポジトリパターンを使用している場合はオプション)"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:97
#, fuzzy
msgid "Optionally, use the `@MongoEntity` annotation to specify the name of the collection, the name of the database or the name of the client."
msgstr "必要に応じて、 `@MongoEntity` アノテーションを使用して、コレクションの名前、データベースの名前、またはクライアントの名前を指定します。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:99
#, fuzzy
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "次に、関連する設定プロパティーを `{config-file}` ."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:106
#, no-wrap
msgid ""
"# configure the MongoDB client for a replica set of two nodes\n"
"quarkus.mongodb.connection-string = mongodb://mongo1:27017,mongo2:27017\n"
"# mandatory if you don't specify the name of the database using @MongoEntity\n"
"quarkus.mongodb.database = person\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:109
#, fuzzy
msgid "The `quarkus.mongodb.database` property will be used by MongoDB with Panache to determine the name of the database where your entities will be persisted (if not overridden by `@MongoEntity`)."
msgstr "`quarkus.mongodb.database` プロパティーは、MongoDB with Panache がエンティティーを永続化するデータベースの名前を決めるために使います ( `@MongoEntity` でオーバーライドしない場合)。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:111
#, fuzzy
msgid "The `@MongoEntity` annotation allows configuring:"
msgstr "`@MongoEntity` アノテーションで設定できます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:113
#, fuzzy
msgid "the name of the client for multi-tenant application, see link:mongodb#multiple-mongodb-clients[Multiple MongoDB Clients]. Otherwise, the default client will be used."
msgstr "link:mongodb#multiple-mongodb-clients[マルチテナントアプリケーション] のクライアント名を指定します。それ以外の場合はデフォルトのクライアントを使用します。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:114
#, fuzzy
msgid "the name of the database, otherwise, the `quarkus.mongodb.database` property will be used."
msgstr "そうでない場合は `quarkus.mongodb.database` プロパティーが使用されます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:115
#, fuzzy
msgid "the name of the collection, otherwise the simple name of the class will be used."
msgstr "そうでない場合は単純なクラス名が使用されます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:117
#, fuzzy
msgid "For advanced configuration of the MongoDB client, you can follow the link:mongodb#configuring-the-mongodb-database[Configuring the MongoDB database guide]."
msgstr "MongoDBクライアントの高度な設定については、Mon link:mongodb#configuring-the-mongodb-database[goDBデータベースの設定ガイドに] 従ってください。"

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:118
#, fuzzy, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解決策1:アクティブレコードパターンを使用する"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:120
#: upstream/_guides/mongodb-panache.adoc:274
#, fuzzy, no-wrap
msgid "Defining your entity"
msgstr "実体の定義"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:124
#, fuzzy
msgid "To define a Panache entity, simply extend `PanacheMongoEntity` and add your columns as public fields.  You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr "Panache エンティティーを定義するには、 `PanacheMongoEntity` を拡張して、列をパブリック フィールドとして追加します。コレクション、データベース、クライアントの名前をカスタマイズする必要がある場合は、エンティティーに `@MongoEntity` アノテーションを追加することができます。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:130
#, no-wrap
msgid ""
"@MongoEntity(collection=\"ThePerson\")\n"
"public class Person extends PanacheMongoEntity {\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:134
#, no-wrap
msgid ""
"    // will be persisted as a 'birth' field in MongoDB\n"
"    @BsonProperty(\"birth\")\n"
"    public LocalDate birthDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:137
#, no-wrap
msgid ""
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:140
#: upstream/_guides/mongodb-panache.adoc:291
#, fuzzy
msgid "Annotating with `@MongoEntity` is optional. Here the entity will be stored in the `ThePerson` collection instead of the default `Person` collection."
msgstr "`@MongoEntity` でのアノテーションはオプションです。ここでは、エンティティーはデフォルトの `Person` コレクションの代わりに `ThePerson` コレクションに格納されます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:142
#: upstream/_guides/mongodb-panache.adoc:293
#, fuzzy
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/bson/pojos/[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr "MongoDB with Panache は link:{mongodb-doc-root-url}/bson/pojos/[PojoCodecProvider を] 使用してエンティティーを MongoDB にマップします `Document` ."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:144
#: upstream/_guides/mongodb-panache.adoc:295
#, fuzzy
msgid "You will be allowed to use the following annotations to customize this mapping:"
msgstr "次のアノテーションを使用して、このマッピングをカスタマイズすることができます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:146
#: upstream/_guides/mongodb-panache.adoc:297
#, fuzzy
msgid "`@BsonId`: allows you to customize the ID field, see <<custom-ids,Custom IDs>>."
msgstr "`@BsonId` : link:#custom-ids[ID] フィールドをカスタマイズすることができます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:147
#: upstream/_guides/mongodb-panache.adoc:298
#, fuzzy
msgid "`@BsonProperty`: customize the serialized name of the field."
msgstr "`@BsonProperty` : フィールドのシリアライズ名をカスタマイズします。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:148
#: upstream/_guides/mongodb-panache.adoc:299
#, fuzzy
msgid "`@BsonIgnore`: ignore a field during the serialization."
msgstr "`@BsonIgnore` : シリアライズ中のフィールドを無視します。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:150
#, fuzzy
msgid "If you need to write accessors, you can:"
msgstr "アクセサーを書く必要があるのであれば"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:154
#: upstream/_guides/mongodb-panache.adoc:998
#, no-wrap
msgid "public class Person extends PanacheMongoEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:159
#, no-wrap
msgid ""
"    @JsonProperty\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:164
#: upstream/_guides/mongodb-panache.adoc:880
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:170
#: upstream/_guides/mongodb-panache.adoc:886
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:174
#, fuzzy
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "また、フィールドアクセスの書き換えのおかげで、ユーザーが `person.name` を読むときには、実際に `getName()` アクセサを呼び出すことになります。これにより、すべてのフィールドの呼び出しが対応するゲッター/セッターの呼び出しに置き換えられるため、実行時に適切なカプセル化が可能になります。"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:175
#: upstream/_guides/mongodb-panache.adoc:343
#, fuzzy, no-wrap
msgid "Most useful operations"
msgstr "最も便利な操作"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:178
#, fuzzy
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "エンティティーを記述したら、ここでは実行できる最も一般的な操作を紹介します。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:186
#: upstream/_guides/mongodb-panache.adoc:354
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Loïc\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:189
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:191
#: upstream/_guides/mongodb-panache.adoc:359
#: upstream/_guides/mongodb-panache.adoc:906
#, no-wrap
msgid "person.status = Status.Dead;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:194
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"person.update();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:197
#, no-wrap
msgid ""
"// delete it\n"
"person.delete();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:200
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:205
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = Person.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:209
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = Person.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:212
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:215
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:218
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:221
#, no-wrap
msgid ""
"// delete all living persons\n"
"Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:224
#, no-wrap
msgid ""
"// delete all persons\n"
"Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:227
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = Person.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:230
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"long updated = Person.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:233
#: upstream/_guides/mongodb-panache.adoc:401
#, fuzzy
msgid "All `list` methods have equivalent `stream` versions."
msgstr "`list` の方法は、すべて同等の `stream` のバージョンを持っています。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:241
#, no-wrap
msgid ""
"Stream<Person> persons = Person.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:244
#: upstream/_guides/mongodb-panache.adoc:412
#, fuzzy
msgid "A `persistOrUpdate()` method exist that persist or update an entity in the database, it uses the __upsert__ capability of MongoDB to do it in a single query."
msgstr "`persistOrUpdate()` データベース内のエンティティーを永続化したり更新したりするメソッドが存在します。"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:245
#, fuzzy, no-wrap
msgid "Adding entity methods"
msgstr "エンティティーメソッドの追加"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:250
#, fuzzy
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "エンティティー自体の内部にエンティティーにカスタムクエリを追加します。そうすれば、自分や同僚が簡単に見つけることができ、クエリは操作対象のオブジェクトと同じ場所に配置されます。エンティティークラスに静的メソッドとして追加する方法は、Panache Active Recordの方法です。"

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:272
#, fuzzy, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解決策2:リポジトリパターンを使用する"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:278
#, fuzzy
msgid "You can define your entity as regular POJO.  You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr "エンティティーを通常のPOJOとして定義することができます。コレクション、データベース、クライアントの名前をカスタマイズする必要がある場合は、エンティティーに `@MongoEntity` アノテーションを追加することができます。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:288
#, no-wrap
msgid ""
"@MongoEntity(collection=\"ThePerson\")\n"
"public class Person  {\n"
"    public ObjectId id; // used by MongoDB for the _id field\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:302
#, fuzzy
msgid "You can use public fields or private fields with getters/setters.  If you don't want to manage the ID by yourself, you can make your entity extends `PanacheMongoEntity`."
msgstr "ゲッター/セッターを使ってパブリックフィールドやプライベートフィールドを使うことができます。IDを自分で管理したくない場合は、エンティティーをextends `PanacheMongoEntity` ."

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:303
#, fuzzy, no-wrap
msgid "Defining your repository"
msgstr "リポジトリの定義"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:307
#, fuzzy
msgid "When using Repositories, you can get the exact same convenient methods as wit the active record pattern, injected in your Repository, by making them implements `PanacheMongoRepository`:"
msgstr "リポジトリを使用する場合、リポジトリに注入されたアクティブレコードパターンと全く同じ便利なメソッドを、 `PanacheMongoRepository` を実装することによって得ることができます。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:312
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:314
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:318
#, no-wrap
msgid ""
"   public Person findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:322
#, no-wrap
msgid ""
"   public List<Person> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:327
#, no-wrap
msgid ""
"   public void deleteLoics(){\n"
"       delete(\"name\", \"Loïc\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:331
#, fuzzy
msgid "All the operations that are defined on `PanacheMongoEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheMongoEntityBase` で定義されている操作はすべてリポジトリ上で利用可能なので、これを使用することはアクティブレコードパターンを使用するのと全く同じですが、それを注入する必要があります。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:336
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:341
#, no-wrap
msgid ""
"@GET\n"
"public long count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:346
#, fuzzy
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "リポジトリを書いたら、ここでは最も一般的な操作を紹介します。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:357
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:362
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"personRepository.update(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:365
#, no-wrap
msgid ""
"// delete it\n"
"personRepository.delete(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:368
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:373
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = personRepository.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:377
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = personRepository.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:380
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:383
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:386
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:389
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:392
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:395
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = personRepository.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:398
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"long updated = personRepository.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:409
#, no-wrap
msgid ""
"Stream<Person> persons = personRepository.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:416
#, fuzzy
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "残りのドキュメントでは、アクティブレコードパターンに基づく使用法のみを示していますが、リポジトリパターンでも実行できることを覚えておいてください。リポジトリパターンの例は簡潔にするために省略しています。"

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:417
#, fuzzy, no-wrap
msgid "Writing a JAX-RS resource"
msgstr "JAX-RSリソースの記述"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:420
#, fuzzy
msgid "First, include one of the RESTEasy extensions to enable JAX-RS endpoints, for example, add the `io.quarkus:quarkus-resteasy-reactive-jackson` dependency for JAX-RS and JSON support."
msgstr "まず、JAX-RSエンドポイントを有効にするために、RESTEasyの拡張機能の1つを含めます。例えば、JAX-RSとJSONのサポートのために、 `io.quarkus:quarkus-resteasy-jackson` の依存関係を追加します。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:422
#, fuzzy
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "そして、以下のリソースを作成することで、Personエンティティの作成/読み取り/更新/削除を行うことができます。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:429
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:434
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Person> list() {\n"
"        return Person.listAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:440
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person get(@PathParam(\"id\") String id) {\n"
"        return Person.findById(new ObjectId(id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:446
#, no-wrap
msgid ""
"    @POST\n"
"    public Response create(Person person) {\n"
"        person.persist();\n"
"        return Response.created(URI.create(\"/persons/\" + person.id)).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:452
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/{id}\")\n"
"    public void update(@PathParam(\"id\") String id, Person person) {\n"
"        person.update();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:462
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"/{id}\")\n"
"    public void delete(@PathParam(\"id\") String id) {\n"
"        Person person = Person.findById(new ObjectId(id));\n"
"        if(person == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
"        person.delete();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:468
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/search/{name}\")\n"
"    public Person search(@PathParam(\"name\") String name) {\n"
"        return Person.findByName(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:475
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/count\")\n"
"    public Long count() {\n"
"        return Person.count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:477
#, fuzzy, no-wrap
msgid "Advanced Query"
msgstr "高度なクエリ"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:479
#, fuzzy, no-wrap
msgid "Paging"
msgstr "ページング"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:483
#, fuzzy
msgid "You should only use `list` and `stream` methods if your collection contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "`list` と `stream` メソッドは、コレクションに十分に小さいデータセットが含まれている場合にのみ使用してください。大きなデータセットの場合は、 `find` メソッドと同等の `PanacheQuery` メソッドを使用することができます。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:488
#: upstream/_guides/mongodb-panache.adoc:524
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:491
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:494
#, no-wrap
msgid ""
"// get the first page\n"
"List<Person> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:497
#, no-wrap
msgid ""
"// get the second page\n"
"List<Person> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:500
#, no-wrap
msgid ""
"// get page 7\n"
"List<Person> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:503
#, no-wrap
msgid ""
"// get the number of pages\n"
"int numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:506
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"int count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:512
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"return Person.find(\"status\", Status.Alive)\n"
"    .page(Page.ofSize(25))\n"
"    .nextPage()\n"
"    .stream()\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:515
#, fuzzy
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 型には、ページングやリターンストリームを扱う方法が他にもたくさんあります。"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:516
#, fuzzy, no-wrap
msgid "Using a range instead of pages"
msgstr "ページの代わりに範囲を使用する"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:519
#, fuzzy
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` では、範囲ベースのクエリも可能です。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:527
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:530
#, no-wrap
msgid ""
"// get the range\n"
"List<Person> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:533
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"List<Person> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:539
#, fuzzy
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "範囲とページを混在させることはできません。範囲を使用している場合、現在のページに依存するすべてのメソッドは `UnsupportedOperationException` をスローします。 `page(Page)` または `page(int, int)` を使用してページングに戻すことができます。"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:541
#, fuzzy, no-wrap
msgid "Sorting"
msgstr "並び替え"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:544
#, fuzzy
msgid "All methods accepting a query string also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "クエリ文字列を受け入れるすべてのメソッドは、オプションの `Sort` パラメーターも受け入れます。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:548
#, no-wrap
msgid "List<Person> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:551
#, no-wrap
msgid ""
"// and with more restrictions\n"
"List<Person> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:554
#, fuzzy
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` クラスには、カラムを追加したり、ソートの方向を指定したりするためのメソッドがたくさんあります。"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:555
#, fuzzy, no-wrap
msgid "Simplified queries"
msgstr "簡素化されたクエリ"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:558
#, fuzzy
msgid "Normally, MongoDB queries are of this form: `{'firstname': 'John', 'lastname':'Doe'}`, this is what we call MongoDB native queries."
msgstr "通常、MongoDBのクエリは、この形式です: `{'firstname': 'John', 'lastname':'Doe'}` 、これは我々がMongoDBネイティブクエリと呼んでいるものです。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:561
#, fuzzy
msgid "You can use them if you want, but we also support what we call **PanacheQL** that can be seen as a subset of link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (or link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]) and allows you to easily express a query.  MongoDB with Panache will then map it to a MongoDB native query."
msgstr "必要に応じてそれらを使うこともできますが、 link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (または link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL] )のサブセットともいえる *PanacheQL* と呼ばれるものもサポートしており、クエリを簡単に表現することができます。Panacheを使ったMongoDBは、それをMongoDBネイティブクエリにマッピングしてくれます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:563
#, fuzzy
msgid "If your query does not start with `{`, we will consider it a PanacheQL query:"
msgstr "クエリが `{` で始まらない場合は、PanacheQL クエリとみなします。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:565
#, fuzzy
msgid "`<singlePropertyName>` (and single parameter) which will expand to `{'singleColumnName': '?1'}`"
msgstr "`<singlePropertyName>` (および単一パラメーター) に展開されます。 `{'singleColumnName': '?1'}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:566
#, fuzzy
msgid "`<query>` will expand to `{<query>}` where we will map the PanacheQL query to MongoDB native query form. We support the following operators that will be mapped to the corresponding MongoDB operators: 'and', 'or' ( mixing 'and' and 'or' is not currently supported), '=', '>', '>=', '<', '<=', '!=', 'is null', 'is not null', and 'like' that is mapped to the MongoDB `$regex` operator (both String and JavaScript patterns are supported)."
msgstr "`<query>` は、PanacheQL クエリを MongoDB ネイティブクエリフォームにマッピングする `{<query>}` に展開します。以下の演算子をサポートしており、対応する MongoDB 演算子にマップされます。'and'、'or' ( 'and' と 'or' の混合は現在サポートされていません)、'='、'>'、'>='、'<'、'⇐'、'!='、'is null'、'is not null'、そして MongoDB `$regex` 演算子にマップされる 'like' です (String パターンと JavaScript パターンの両方がサポートされています)。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:568
#, fuzzy
msgid "Here are some query examples:"
msgstr "以下にクエリの例を示します。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:570
#, fuzzy
msgid "`firstname = ?1 and status = ?2` will be mapped to `{'firstname': ?1, 'status': ?2}`"
msgstr "`firstname = ?1 and status = ?2` は `{'firstname': ?1, 'status': ?2}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:571
#, fuzzy
msgid "`amount > ?1 and firstname != ?2` will be mapped to `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}`"
msgstr "`amount > ?1 and firstname != ?2` は `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:572
#, fuzzy
msgid "`lastname like ?1` will be mapped to `{'lastname': {'$regex': ?1}}`. Be careful that this will be link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB regex] support and not SQL like pattern."
msgstr "`lastname like ?1` は `{'lastname': {'$regex': ?1}}` にマップされます。これは link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB の] 正規表現サポートであり、SQL のようなパターンではないことに注意してください。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:573
#, fuzzy
msgid "`lastname is not null` will be mapped to `{'lastname':{'$exists': true}}`"
msgstr "`lastname is not null` は `{'lastname':{'$exists': true}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:574
#, fuzzy
msgid "`status in ?1` will be mapped to `{'status':{$in: [?1]}}`"
msgstr "`status in ?1` は `{'status':{$in: [?1]}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:578
#, fuzzy
msgid "MongoDB queries must be valid JSON documents, using the same field multiple times in a query is not allowed using PanacheQL as it would generate an invalid JSON (see link:https://github.com/quarkusio/quarkus/issues/12086[this issue on github])."
msgstr "MongoDB のクエリは有効な JSON ドキュメントでなければなりません。同じフィールドをクエリで複数回使うと無効な JSON が生成されてしまうので、PanacheQL を使うことはできません ( link:https://github.com/quarkusio/quarkus/issues/12086[github のこの問題を]参照してください)。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:582
#, fuzzy
msgid "We also handle some basic date type transformations: all fields of type `Date`, `LocalDate`, `LocalDateTime` or `Instant` will be mapped to the link:https://docs.mongodb.com/manual/reference/bson-types/#date[BSON Date] using the `ISODate` type (UTC datetime).  The MongoDB POJO codec doesn't support `ZonedDateTime` and `OffsetDateTime` so you should convert them prior usage."
msgstr "基本的な日付型の変換も扱っています。 `Date` , `LocalDate` , `LocalDateTime` , `Instant` のすべてのフィールドは、 `ISODate` 型 (UTC datetime) を使って link:https://docs.mongodb.com/manual/reference/bson-types/#document-bson-type-date[BSON 日付] にマッピングされます。MongoDB POJO コーデックは `ZonedDateTime` と `OffsetDateTime` をサポートしていません。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:584
#, fuzzy
msgid "MongoDB with Panache also supports extended MongoDB queries by providing a `Document` query, this is supported by the find/list/stream/count/delete methods."
msgstr "MongoDB with Panache は、 `Document` クエリを提供することで MongoDB クエリの拡張にも対応しています。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:587
#, fuzzy
msgid "MongoDB with Panache offers operations to update multiple documents based on an update document and a query : `Person.update(\"foo = ?1, bar = ?2\", fooName, barName).where(\"name = ?1\", name)`."
msgstr "MongoDB with Panacheは、更新ドキュメントとクエリに基づいて複数のドキュメントを更新するための操作を提供しています: `Person.update(\"foo = ?1, bar = ?2\", fooName, barName).where(\"name = ?1\", name)` ."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:589
#, fuzzy
msgid "For these operations, you can express the update document the same way you express your queries, here are some examples:"
msgstr "これらの操作については、クエリと同じ方法で更新文書を表現することができます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:591
#, fuzzy
msgid "`<singlePropertyName>` (and single parameter) which will expand to the update document `{'$set' : {'singleColumnName': '?1'}}`"
msgstr "`<singlePropertyName>` (と単一のパラメーター) は、更新ドキュメントに展開されます。 `{'$set' : {'singleColumnName': '?1'}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:592
#, fuzzy
msgid "`firstname = ?1, status = ?2` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr "`firstname = ?1, status = ?2` は更新文書にマッピングされます。 `{'$set' : {'firstname': ?1, 'status': ?2}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:593
#, fuzzy
msgid "`firstname = :firstname, status = :status` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr "`firstname = :firstname, status = :status` は更新文書にマッピングされます。 `{'$set' : {'firstname': :firstname, 'status': :status}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:594
#, fuzzy
msgid "`{'firstname' : ?1, 'status' : ?2}` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr "`{'firstname' : ?1, 'status' : ?2}` は更新文書にマッピングされます。 `{'$set' : {'firstname': ?1, 'status': ?2}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:595
#, fuzzy
msgid "`{'firstname' : firstname, 'status' : :status}` ` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr "`{'firstname' : firstname, 'status' : :status}` ` は更新文書にマップされます。 `{'$set' : {'firstname': :firstname, 'status': :status}}`"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:596
#, fuzzy, no-wrap
msgid "Query parameters"
msgstr "クエリパラメーター"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:599
#, fuzzy
msgid "You can pass query parameters, for both native and PanacheQL queries, by index (1-based) as shown below:"
msgstr "クエリパラメーターは、ネイティブクエリと PanacheQL クエリの両方に対して、以下のようにインデックス (1-based) で渡すことができます。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:604
#, no-wrap
msgid ""
"Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive);\n"
"Person.find(\"{'name': ?1, 'status': ?2}\", \"Loïc\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:607
#, fuzzy
msgid "Or by name using a `Map`:"
msgstr "または、 `Map` ."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:615
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"Loïc\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
"Person.find(\"{'name': :name, 'status', :status}\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:618
#, fuzzy
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "または、コンビニエンスクラス `Parameters` をそのまま使用するか、 `Map` ."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:624
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"Loïc\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:628
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"{'name': :name, 'status': :status}\",\n"
"         Parameters.with(\"name\", \"Loïc\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:631
#, fuzzy
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "すべての問い合わせ操作は、インデックス ( `Object…` )、または名前 ( `Map<String,Object>` または `Parameters` ) によるパラメーターの渡しを受け付けます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:633
#, fuzzy
msgid "When you use query parameters, be careful that PanacheQL queries will refer to the Object parameters name but native queries will refer to MongoDB field names."
msgstr "クエリパラメーターを使用する際に注意したいのは、PanacheQLのクエリはObjectパラメーター名を参照しますが、ネイティブクエリはMongoDBのフィールド名を参照します。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:635
#, fuzzy
msgid "Imagine the following entity:"
msgstr "次のような実体を想像してみてください。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:643
#, no-wrap
msgid ""
"public class Person extends PanacheMongoEntity {\n"
"    @BsonProperty(\"lastname\")\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:647
#, no-wrap
msgid ""
"    public static Person findByNameWithPanacheQLQuery(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:652
#, no-wrap
msgid ""
"    public static Person findByNameWithNativeQuery(String name){\n"
"        return find(\"{'lastname': ?1}\", name).firstResult();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:656
#, fuzzy
msgid "Both `findByNameWithPanacheQLQuery()` and `findByNameWithNativeQuery()` methods will return the same result but query written in PanacheQL will use the entity field name: `name`, and native query will use the MongoDB field name: `lastname`."
msgstr "`findByNameWithPanacheQLQuery()` と `findByNameWithNativeQuery()` メソッドはどちらも同じ結果を返しますが、PanacheQL で書かれたクエリはエンティティーフィールド名 `name` を使用し、ネイティブクエリは MongoDB のフィールド名 `lastname` を使用します。"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:657
#, fuzzy, no-wrap
msgid "Query projection"
msgstr "クエリ投影"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:660
#, fuzzy
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "クエリの投影は、 `find()` メソッドが返す `PanacheQuery` オブジェクト上の `project(Class)` メソッドで行うことができます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:663
#, fuzzy
msgid "You can use it to restrict which fields will be returned by the database, the ID field will always be returned, but it's not mandatory to include it inside the projection class."
msgstr "IDフィールドは常に返されますが、投影クラスの中に含めることは必須ではありません。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:667
#, fuzzy
msgid "For this, you need to create a class (a POJO) that will only contain the projected fields.  This POJO needs to be annotated with `@ProjectionFor(Entity.class)` where `Entity` is the name of your entity class.  The field names, or getters, of the projection class will be used to restrict which properties will be loaded from the database."
msgstr "そのためには、投影されたフィールドのみを含むクラス(POJO)を作成する必要があります。この POJO には `@ProjectionFor(Entity.class)` と注釈を付ける必要があります。 `Entity` はエンティティー・クラスの名前です。投影クラスのフィールド名(ゲッター)は、データベースから読み込まれるプロパティーを制限するために使用されます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:669
#, fuzzy
msgid "Projection can be done for both PanacheQL and native queries."
msgstr "プロジェクションは、PanacheQLとネイティブクエリの両方で行うことができます。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:674
#, no-wrap
msgid ""
"import io.quarkus.mongodb.panache.common.ProjectionFor;\n"
"import org.bson.codecs.pojo.annotations.BsonProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:680
#, no-wrap
msgid ""
"// using public fields\n"
"@ProjectionFor(Person.class)\n"
"public class PersonName {\n"
"    public String name;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:685
#, no-wrap
msgid ""
"// using getters\n"
"@ProjectionFor(Person.class)\n"
"public class PersonNameWithGetter {\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:689
#, no-wrap
msgid ""
"    public String getName(){\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:694
#, no-wrap
msgid ""
"    public void setName(String name){\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:699
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> shortQuery = Person.find(\"status \", Status.Alive).project(PersonName.class);\n"
"PanacheQuery<PersonName> query = Person.find(\"'status': ?1\", Status.Alive).project(PersonNameWithGetter.class);\n"
"PanacheQuery<PersonName> nativeQuery = Person.find(\"{'status': 'ALIVE'}\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:702
#, fuzzy
msgid "Using `@BsonProperty` is not needed to define custom column mappings, as the mappings from the entity class will be used."
msgstr "`@BsonProperty` を使用すると、エンティティークラスからのマッピングが使用されるので、カスタムカラムマッピングを定義する必要はありません。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:704
#, fuzzy
msgid "You can have your projection class extends from another class. In this case, the parent class also needs to have use `@ProjectionFor` annotation."
msgstr "投影クラスを別のクラスから拡張してもらうことができます。この場合、親クラスも `@ProjectionFor` アノテーションを使用する必要があります。"

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:705
#, fuzzy, no-wrap
msgid "Query debugging"
msgstr "クエリのデバッグ"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:708
#, fuzzy
msgid "As MongoDB with Panache allows writing simplified queries, it is sometimes handy to log the generated native queries for debugging purpose."
msgstr "MongoDB with Panacheでは簡易的なクエリを書くことができるので、生成されたネイティブクエリをデバッグ用にログに記録しておくと便利なこともあります。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:710
#, fuzzy
msgid "This can be achieved by setting to DEBUG the following log category inside your `application.properties`:"
msgstr "これは、 `application.properties` .NET Framework の中の以下のログカテゴリを DEBUG に設定することで実現できます。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:714
#, no-wrap
msgid "quarkus.log.category.\"io.quarkus.mongodb.panache.runtime\".level=DEBUG\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:716
#, fuzzy, no-wrap
msgid "The PojoCodecProvider: easy object to BSON document conversion."
msgstr "PojoCodecProvider: オブジェクトからBSONドキュメントへの変換を簡単に行うことができます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:720
#, fuzzy
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/bson/pojos[PojoCodecProvider], with link:{mongodb-doc-root-url}/pojos/#pojo-support[automatic POJO support, to automatically convert your object to a BSON document."
msgstr "MongoDB with Panache は link:{mongodb-doc-root-url}/bson/pojos/[PojoCodecProvider を] 使用してエンティティーを MongoDB にマップします `Document` ."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:725
#, fuzzy
msgid "In case you encounter the `org.bson.codecs.configuration.CodecConfigurationException` exception, it means the codec is not able to automatically convert your object.  This codec obeys the Java Bean standard, so it will successfully convert a POJO using public fields or getters/setters.  You can use `@BsonIgnore` to make a field, or a getter/setter, ignored by the codec."
msgstr "`org.bson.codecs.configuration.CodecConfigurationException` 例外が発生した場合は、コーデックがオブジェクトを自動的に変換できないことを意味します。このコーデックは、Java Bean 標準に準拠しているため、パブリックフィールドまたはゲッター/セッターを使用する POJO を正常に変換します。 `@BsonIgnore` を使用して、フィールドまたはゲッター/セッターをコーデックで無視することができます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:730
#, fuzzy
msgid "If your class doesn't obey these rules (for example by including a method that starts with `get` but is not a setter), you could provide a custom codec for it.  Your custom codec will be automatically discovered and registered inside the codec registry.  See link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr "クラスがこれらの規則に従わない場合（例えば、 `get` で始まるがセッターではないメソッドを含む場合）、そのクラスにカスタムコーデックを提供することができます。あなたのカスタム・コーデックは、自動的に検出され、コーデック・レジストリに登録されます。詳しくは、 link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[「BSONコーデックの使用]」をご覧ください。"

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:731
#, fuzzy, no-wrap
msgid "Transactions"
msgstr "取引"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:734
#, fuzzy
msgid "MongoDB offers ACID transactions since version 4.0."
msgstr "MongoDBはバージョン4.0からACIDトランザクションを提供しています。MongoDB with Panache はサポートしていません。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:736
#, fuzzy
msgid "To use them with MongoDB with Panache you need to annotate the method that starts the transaction with the `@Transactional` annotation."
msgstr "Panacheを使ったMongoDBでこれらを使うには、トランザクションを開始するメソッドに `@Transactional` アノテーションを付ける必要があります。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:738
#, fuzzy
msgid "Transaction support inside MongoDB with Panache is still experimental."
msgstr "PanacheによるMongoDB内部のトランザクションサポートはまだ実験的なものです。"

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:739
#, fuzzy, no-wrap
msgid "Custom IDs"
msgstr "カスタムID"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:744
#, fuzzy
msgid "IDs are often a touchy subject. In MongoDB, they are usually auto-generated by the database with an `ObjectId` type.  In MongoDB with Panache the ID are defined by a field named `id` of the `org.bson.types.ObjectId` type, but if you want to customize them, once again we have you covered."
msgstr "ID は気難しい話題になりがちです。MongoDB では、通常は `ObjectId` 型でデータベースが自動生成します。MongoDB で Panache を使うと、ID は `org.bson.types.ObjectId` 型の `id` というフィールドで定義されますが、カスタマイズしたい場合はもう一度説明します。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:747
#, fuzzy
msgid "You can specify your own ID strategy by extending `PanacheMongoEntityBase` instead of `PanacheMongoEntity`. Then you just declare whatever ID you want as a public field by annotating it by `@BsonId`:"
msgstr "`PanacheMongoEntity` の代わりに `PanacheMongoEntityBase` を拡張することで、独自の ID 戦略を指定することができます。そして、好きなIDを `@BsonId` でアノテーションを付けて、パブリックフィールドとして宣言するだけです。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:752
#, no-wrap
msgid ""
"@MongoEntity\n"
"public class Person extends PanacheMongoEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:755
#, no-wrap
msgid ""
"    @BsonId\n"
"    public Integer myId;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:758
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:762
#, fuzzy
msgid "If you're using repositories, then you will want to extend `PanacheMongoRepositoryBase` instead of `PanacheMongoRepository` and specify your ID type as an extra type parameter:"
msgstr "リポジトリを使用しているのであれば、 `PanacheMongoRepository` の代わりに `PanacheMongoRepositoryBase` を拡張して、ID のタイプを追加のタイプパラメーターとして指定することになります。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:769
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:775
#, fuzzy
msgid "When using `ObjectId`, MongoDB will automatically provide a value for you, but if you use a custom field type, you need to provide the value by yourself."
msgstr "`ObjectId` を使う場合は、MongoDB が自動的に値を提供してくれますが、カスタムフィールド型を使う場合は自分で値を提供する必要があります。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:779
#, fuzzy
msgid "`ObjectId` can be difficult to use if you want to expose its value in your REST service.  So we created Jackson and JSON-B providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on either the RESTEasy Jackson extension or the RESTEasy JSON-B extension."
msgstr "`ObjectId` は、その値を REST サービスで公開したい場合には使いにくいかもしれません。そこで、Jackson と JSON-B プロバイダを作成し、 `String` としてシリアライズ/デシリアライズすることで、プロジェクトが RESTEasy Jackson エクステンションまたは RESTEasy JSON-B エクステンションに依存している場合に自動的に登録されます。"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:783
#, fuzzy
msgid "If you use the standard `ObjectId` ID type, don't forget to retrieve your entity by creating a new `ObjectId` when the identifier comes from a path parameter. For example:"
msgstr "標準の `ObjectId` ID 型を使用している場合、識別子がパスパラメーターから来た場合は、新しい `ObjectId` を作成してエンティティーを取得することを忘れないでください。例えば、以下のようになります。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:791
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{id}\")\n"
"public Person findById(@PathParam(\"id\") String id) {\n"
"    return Person.findById(new ObjectId(id));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:794
#, fuzzy, no-wrap
msgid "Working with Kotlin Data classes"
msgstr "Kotlin のデータクラスを使った作業"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:797
#, fuzzy
msgid "Kotlin data classes are a very convenient way of defining data carrier classes, making them a great match to define an entity class."
msgstr "Kotlinのデータクラスは、データキャリアクラスを定義するのに非常に便利なので、エンティティークラスを定義するのに非常にマッチします。"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:800
#, fuzzy
msgid "But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked as nullable, and the generated constructor needs to have as parameters all the fields of the data class."
msgstr "しかし、このタイプのクラスにはいくつかの制限があります。それは、すべてのフィールドを構築時に初期化するか、nullable としてマークする必要があること、そして生成されたコンストラクタのパラメーターとしてデータクラスのすべてのフィールドを持つ必要があることです。"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:802
#, fuzzy
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/bson/pojos[PojoCodecProvider], a MongoDB codec which mandates the presence of a parameterless constructor."
msgstr "MongoDB with Panache は `PojoCodec` を使用しています。 MongoDB コーデックは、パラメーターレスのコンストラクタの存在を義務づけています。"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:806
#, fuzzy
msgid "Therefore, if you want to use a data class as an entity class, you need a way to make Kotlin generate an empty constructor.  To do so, you need to provide default values for all the fields of your classes.  The following sentence from the Kotlin documentation explains it:"
msgstr "したがって、データクラスをエンティティークラスとして使いたい場合は、Kotlinに空のコンストラクタを生成させる方法が必要です。そのためには、クラスのすべてのフィールドにデフォルト値を与える必要があります。それを説明しているのが、Kotlinのドキュメントにある次の一文です。"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:808
#, fuzzy
msgid "__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__"
msgstr "_JVM上で、生成されたクラスがパラメーターレスのコンストラクタを持つ必要がある場合、すべてのプロパティーのデフォルト値を指定する必要があります(「コンストラクタ」を参照してください)。_"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:810
#, fuzzy
msgid "If for whatever reason, the aforementioned solution is deemed unacceptable, there are alternatives."
msgstr "何らかの理由で前述の解決策が受け入れられないと判断された場合、代替案があります。"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:813
#, fuzzy
msgid "First, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the `PojoCodecProvider`.  See this part of the documentation: link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr "最初に、Quarkusによって自動的に登録され、 `PojoCodec` の代わりに使用されるBSONコーデックを作成することができます。ドキュメントのこの部分を参照してください。BSONコーデック link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[を使用する] 。"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:816
#, fuzzy
msgid "Another option is to use the `@BsonCreator` annotation to tell the `PojoCodecProvider` to use the Kotlin data class default constructor, in this case all constructor parameters have to be annotated with `@BsonProperty`: see link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constructor]."
msgstr "もう一つの選択肢は `@BsonCreator` アノテーションを使って `PojoCodec` に Kotlin データクラスのデフォルトのコンストラクタを使うように指示することです。この場合、すべての link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[コンス] トラクタのパラメーターに `@BsonProperty` のアノテーションをつけなければなりません。"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:818
#, fuzzy
msgid "This will only work when the entity extends `PanacheMongoEntityBase` and not `PanacheMongoEntity`, as the ID field also needs to be included in the constructor."
msgstr "これは、 `PanacheMongoEntity` ではなく `PanacheMongoEntityBase` を拡張したエンティティーの場合にのみ機能します。"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:820
#, fuzzy
msgid "An example of a `Person` class defined as a Kotlin data class would look like:"
msgstr "Kotlin データクラスとして定義された `Person` クラスの例は次のようになります。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:829
#, no-wrap
msgid ""
"data class Person @BsonCreator constructor (\n"
"    @BsonId var id: ObjectId,\n"
"    @BsonProperty(\"name\") var name: String,\n"
"    @BsonProperty(\"birth\") var birth: LocalDate,\n"
"    @BsonProperty(\"status\") var status: Status\n"
"): PanacheMongoEntityBase()\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:834
#, fuzzy
msgid "Here we use `var` but note that `val` can also be used."
msgstr "ここでは `var` を使用していますが、 `val` も使用できることに注意してください。"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:836
#, fuzzy
msgid "The `@BsonId` annotation is used instead of `@BsonProperty(\"_id\")` for brevity's sake, but use of either is valid."
msgstr "`@BsonId` アノテーションは簡潔さのために `@BsonProperty(\"_id\")` の代わりに使用されていますが、どちらの使用も有効です。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:840
#, fuzzy
msgid "The last option is to the use the link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg] compiler plugin.  This plugin is configured with a list of annotations, and the end result is the generation of no-args constructor for each class annotated with them."
msgstr "最後のオプションは link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg] コンパイラプラグインを使用することです。このプラグインはアノテーションのリストで設定されており、最終的にはアノテーションされたクラスごとに no-args コンストラクタを生成します。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:842
#, fuzzy
msgid "For MongoDB with Panache, you could use the `@MongoEntity` annotation on your data class for this:"
msgstr "MongoDB with Panache の場合は、データクラスの `@MongoEntity` アノテーションを使うといいでしょう。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:851
#, no-wrap
msgid ""
"@MongoEntity\n"
"data class Person (\n"
"    var name: String,\n"
"    var birth: LocalDate,\n"
"    var status: Status\n"
"): PanacheMongoEntity()\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:854
#, fuzzy, no-wrap
msgid "Reactive Entities and Repositories"
msgstr "反応性のあるエンティティーとリポジトリ"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:859
#, fuzzy
msgid "MongoDB with Panache allows using reactive style implementation for both entities and repositories.  For this, you need to use the Reactive variants when defining your entities : `ReactivePanacheMongoEntity` or `ReactivePanacheMongoEntityBase`, and when defining your repositories: `ReactivePanacheMongoRepository` or `ReactivePanacheMongoRepositoryBase`."
msgstr "MongoDB with Panache では、エンティティーとリポジトリの両方にリアクティブスタイルの実装を使用できます。そのためには、エンティティーを定義する際に Reactive variant を使用する必要があります: `ReactivePanacheMongoEntity` または `ReactivePanacheMongoEntityBase` 、リポジトリを定義する際には `ReactivePanacheMongoRepository` または `ReactivePanacheMongoRepositoryBase` 。"

#. type: Block title
#: upstream/_guides/mongodb-panache.adoc:861
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:865
#, fuzzy
msgid "The reactive API of the MongoDB with Panache uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "MongoDB with Panache のリアクティブ API は Mutiny link:getting-started-reactive#mutiny[の] リアクティブ型を使っています。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:868
#, fuzzy
msgid "The reactive variant of the `Person` class will be:"
msgstr "`Person` クラスの反応型バリアントは、これになります。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:875
#, no-wrap
msgid ""
"public class ReactivePerson extends ReactivePanacheMongoEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:890
#, fuzzy
msgid "You will have access to the same functionalities of the _imperative_ variant inside the reactive one: bson annotations, custom ID, PanacheQL, ...  But the methods on your entities or repositories will all return reactive types."
msgstr "bson アノテーション、カスタム ID、PanacheQL など、リアクティブなバリアントの中にある _命令的_ バリアントと同じ機能にアクセスすることができます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:892
#, fuzzy
msgid "See the equivalent methods from the imperative example with the reactive variant:"
msgstr "反応性バリアントを使用した命令的な例の同等のメソッドを参照してください。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:900
#, no-wrap
msgid ""
"// creating a person\n"
"ReactivePerson person = new ReactivePerson();\n"
"person.name = \"Loïc\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:904
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver,\n"
"// and accessible when uni1 will be resolved\n"
"Uni<ReactivePerson> uni1 = person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:909
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"Uni<ReactivePerson> uni2 = person.update();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:912
#, no-wrap
msgid ""
"// delete it\n"
"Uni<Void> uni3 = person.delete();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:915
#, no-wrap
msgid ""
"// getting a list of all persons\n"
"Uni<List<ReactivePerson>> allPersons = ReactivePerson.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:920
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"Uni<ReactivePerson> personById = ReactivePerson.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:924
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Uni<Optional<ReactivePerson>> optional = ReactivePerson.findByIdOptional(personId);\n"
"personById = optional.map(o -> o.orElseThrow(() -> new NotFoundException()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:927
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<ReactivePerson>> livingPersons = ReactivePerson.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:930
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = ReactivePerson.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:933
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = ReactivePerson.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:936
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long>  deleteCount = ReactivePerson.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:939
#, no-wrap
msgid ""
"// delete all persons\n"
"deleteCount = ReactivePerson.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:942
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleted = ReactivePerson.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:945
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Long> updated = ReactivePerson.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:948
#, fuzzy
msgid "If you use MongoDB with Panache in conjunction with RESTEasy, you can directly return a reactive type inside your JAX-RS resource endpoint as long as you include the `quarkus-resteasy-mutiny` extension."
msgstr "RESTEasy と組み合わせて MongoDB with Panache を使用している場合は、 `quarkus-resteasy-mutiny` エクステンションを含めていれば、JAX-RS リソースエンドポイントの内部で反応型を直接返すことができます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:950
#, fuzzy
msgid "The same query facility exists for the reactive types, but the `stream()` methods act differently: they return a `Multi` (which implement a reactive stream `Publisher`) instead of a `Stream`."
msgstr "`Multi` `Publisher` リアクティブ型にも同じクエリ機能が存在しますが、 `stream()` メソッドの動作は異なります。 `Stream` ."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:952
#, fuzzy
msgid "It allows more advanced reactive use cases, for example, you can use it to send server-sent events (SSE) via RESTEasy:"
msgstr "より高度なリアクティブユースケースを可能にし、例えば、RESTEasy経由でサーバー送信イベント(SSE)を送信するために使用することができます。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:960
#, no-wrap
msgid ""
"import org.jboss.resteasy.annotations.SseElementType;\n"
"import org.reactivestreams.Publisher;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:968
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/stream\")\n"
"@Produces(MediaType.SERVER_SENT_EVENTS)\n"
"@SseElementType(MediaType.APPLICATION_JSON)\n"
"public Multi<ReactivePerson> streamPersons() {\n"
"    return ReactivePerson.streamAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:971
#, fuzzy
msgid "`@SseElementType(MediaType.APPLICATION_JSON)` tells RESTEasy to serialize the object in JSON."
msgstr "`@SseElementType(MediaType.APPLICATION_JSON)` RESTEasyにオブジェクトをJSONでシリアライズするように指示します。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:973
#, fuzzy
msgid "Transactions are not supported for Reactive Entities and Repositories."
msgstr "反応性のあるエンティティーとリポジトリ"

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:974
#, fuzzy, no-wrap
msgid "Mocking"
msgstr "嘲笑"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:976
#, fuzzy, no-wrap
msgid "Using the active-record pattern"
msgstr "アクティブレコードパターンの使用"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:981
#, fuzzy
msgid "If you are using the active-record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "アクティブレコードパターンを使用している場合、静的メソッドのモックをサポートしていないため、Mockitoを直接使用することはできませんが、 `quarkus-panache-mock` モジュールを使用することで、Mockitoが提供するすべての静的メソッドをモックすることができます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:983
#, fuzzy
msgid "Add this dependency to your `pom.xml`:"
msgstr "この依存関係を `pom.xml` ."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:991
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:994
#: upstream/_guides/mongodb-panache.adoc:1074
#, fuzzy
msgid "Given this simple entity:"
msgstr "この単純な実体を考えると"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1000
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1005
#, no-wrap
msgid ""
"    public static List<Person> findOrdered() {\n"
"        return findAll(Sort.by(\"lastname\", \"firstname\")).list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1008
#: upstream/_guides/mongodb-panache.adoc:1099
#, fuzzy
msgid "You can write your mocking test like this:"
msgstr "モックテストはこのように書くことができます。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1013
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1017
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1020
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1024
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1028
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1032
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1035
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1041
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, Person.findById(12L));\n"
"        Assertions.assertNull(Person.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1045
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> Person.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1049
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(Person.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1055
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1058
#, fuzzy
msgid "Be sure to call your `verify` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "`verify` のメソッドは必ず `Mockito` ではなく `PanacheMock` で呼び出すようにしてください。そうしないと、どのモックオブジェクトを渡すべきかわからなくなってしまいます。"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:1059
#, fuzzy, no-wrap
msgid "Using the repository pattern"
msgstr "リポジトリパターンの使用"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1063
#, fuzzy
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "リポジトリパターンを使用している場合は、 `quarkus-junit5-mockito` モジュールを使用して直接 Mockito を使用することができますので、Beanのモッキングが非常に簡単になります。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1071
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1078
#, no-wrap
msgid "public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1081
#, no-wrap
msgid ""
"    @BsonId\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1084
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1087
#, fuzzy
msgid "And this repository:"
msgstr "そして、このリポジトリ。"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1096
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepository<Person> {\n"
"    public List<Person> findOrdered() {\n"
"        return findAll(Sort.by(\"lastname\", \"firstname\")).list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1106
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1111
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1115
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1119
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1123
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(personRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1126
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(personRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1132
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(personRepository.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, personRepository.findById(12L));\n"
"        Assertions.assertNull(personRepository.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1136
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(personRepository.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> personRepository.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1139
#, no-wrap
msgid ""
"        Mockito.when(personRepository.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(personRepository.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1146
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.verify(personRepository).findOrdered();\n"
"        Mockito.verify(personRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verifyNoMoreInteractions(personRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:1149
#, fuzzy, no-wrap
msgid "How and why we simplify MongoDB API"
msgstr "MongoDB APIをシンプルにする方法と理由"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1153
#, fuzzy
msgid "When it comes to writing MongoDB entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "MongoDB のエンティティーを書くことになると、ユーザーがしぶしぶ慣れてしまったような、いくつかの迷惑なことがあります。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1156
#, fuzzy
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really relevant to your model."
msgstr "IDロジックの複製:ほとんどのエンティティーはIDを必要とし、ほとんどの人はそれがどのように設定されているかは気にしません。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1159
#, fuzzy
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr "間抜けなゲッターとセッター: Javaには言語内のプロパティーのサポートがないので、フィールドを作成し、そのフィールドのゲッターとセッターを生成しなければなりません。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1162
#, fuzzy
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "従来のEEパターンでは、エンティティー定義(モデル)を、エンティティーでできる操作(DAO、リポジトリ)から分離することを推奨していますが、オブジェクト指向アーキテクチャでは、ステートとメソッドが同じクラスにある通常のオブジェクトに対してそのようなことをすることはありませんが、実際にはステートとその操作の間に不自然な分離を必要とします。さらに、これはエンティティーごとに2つのクラスを必要とし、エンティティーの操作を行う必要があるDAOやリポジトリのインジェクションを必要とします。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1164
#, fuzzy
msgid "MongoDB queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "MongoDBのクエリは超強力ですが、一般的な操作には冗長すぎて、すべてのパーツが必要ない場合でもクエリを書く必要があります。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1165
#, fuzzy
msgid "MongoDB queries are JSON based, so you will need some String manipulation or using the `Document` type and it will need a lot of boilerplate code."
msgstr "MongoDBのクエリはJSONベースなので、Stringの操作が必要になるか、 `Document` 型を使う必要があり、多くのボイラプレートコードが必要になります。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1167
#, fuzzy
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "パナシェでは、これらの問題に対して、意見を出し合いながら取り組んできました。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1170
#, fuzzy
msgid "Make your entities extend `PanacheMongoEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheMongoEntityBase` instead and handle the ID yourself."
msgstr "エンティティーを `PanacheMongoEntity` を拡張するようにしてください。 には自動生成される ID フィールドがあります。カスタムの ID 戦略が必要な場合は、代わりに `PanacheMongoEntityBase` を拡張して、自分で ID を処理することができます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1173
#, fuzzy
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "パブリックフィールドを使う。間抜けなゲッターとセッターを取り除く。フードの下では、不足しているすべてのゲッターとセッターを生成し、これらのフィールドへのすべてのアクセスをアクセサメソッドを使用するように書き換えます。こうすることで、必要なときに _便利な_ アクセサを書くことができ、エンティティーのユーザーがまだフィールドアクセスを使用しているにもかかわらず、それが使用されます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1176
#, fuzzy
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "アクティブレコードパターンでは、エンティティークラスの静的メソッドにすべてのエンティティーロジックを配置し、DAOを作成しないようにします。エンティティーのスーパークラスには、非常に便利な静的メソッドがたくさん付属しており、エンティティークラスに独自のメソッドを追加することができます。ユーザーは、 `Person.` と入力するだけで、エンティティー `Person` の使用を開始し、一箇所ですべての操作を完了させることができます。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1178
#, fuzzy
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` or even better `Person.find(\"name\", \"Loïc\")`."
msgstr "クエリの不要な部分を書かないでください: `Person.find(\"order by name\")` や `Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` 、あるいはもっと良い `Person.find(\"name\", \"Loïc\")` を書いてください。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1180
#, fuzzy
msgid "That's all there is to it: with Panache, MongoDB has never looked so trim and neat."
msgstr "Panache を使えば、MongoDB はこれまでにないほどすっきりとした見た目になります。"

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:1181
#, fuzzy, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1184
#, fuzzy
msgid "MongoDB with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "MongoDB with Panache は、コンパイル時のバイトコードによるエンティティーの強化に頼っています。"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1189
#, fuzzy
msgid "It attempts to identity archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "このファイルは、マーカーファイルの存在によってアーカイブを Panache エンティティー (および Panache エンティティーの消費者) と識別しようとします `META-INF/panache-archive.marker` 。Panache にはアノテーション プロセッサーが含まれており、Panache に依存している (間接的であっても) アーカイヴでこのファイルを自動的に作成します。注釈プロセッサーを無効にしている場合は、場合によってはこのファイルを手動で作成する必要があるかもしれません。"
