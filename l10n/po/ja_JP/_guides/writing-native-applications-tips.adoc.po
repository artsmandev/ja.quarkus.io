msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"By default, when building a native executable, GraalVM will not include any of the resources that are on the classpath into the native executable it creates.\n"
"Resources that are meant to be part of the native executable need to be configured explicitly."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"Note that you need to be extremely careful here as anything in `META-INF/resources` will be exposed as static web resources.\n"
"So this directory is not a shortcut for \"let's automatically include these resources in the native executable\" and should only be used for static web resources."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"To include more resources in the native executable, the easiest way is to use the `quarkus.native.resources.includes` configuration property,\n"
"and its counterpart to exclude resources `quarkus.native.resources.excludes`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"If globs are not sufficiently precise for your use case and you need to rely on regular expressions, or if you prefer relying on the GraalVM infrastructure,\n"
"you can also create a `resources-config.json` (the most common location is within `src/main/resources`) JSON file defining which resources should be included:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"The patterns are valid Java regexps.\n"
"Here we include all the XML files and JSON files into the native executable."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"In the previous snippet we were able to simply use `resources-config.json` instead of specifying the entire path of the file simply because it was added to `src/main/resources`.\n"
"If the file had been added to another directory, the proper file path would have had to be specified manually."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"When building a native executable, GraalVM operates with a closed world assumption.\n"
"It analyzes the call tree and removes all the classes/methods/fields that are not used directly."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"The elements used via reflection are not part of the call tree so they are dead code eliminated (if not called directly in other cases).\n"
"To include these elements in your native executable, you need to register them for reflection explicitly."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid "Note that `MyClassRequiringReflection` and  `MySecondClassRequiringReflection` will be registered for reflection but not `MyReflectionConfiguration`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"In the previous snippet we were able to simply use `reflection-config.json` instead of specifying the entire path of the file simply because it was added to `src/main/resources`.\n"
"If the file had been added to another directory, the proper file path would have had to be specified manually."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"There are cases where the initialization of certain classes is done in a static block needs to be postponed to runtime.\n"
"Typically, omitting such configuration would result in a runtime exception like the following:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"Which is more often than not caused by Quarkus initializing at build time a class with a static `Random`/`SplittableRandom` field,\n"
"causing this particular instance to be tentatively included in the image heap."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"In these cases, delaying the infringing class initialization at runtime might be the solution and, to achieve that,\n"
"you can use the `--initialize-at-run-time=<package or class>` configuration knob."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"When multiple classes or packages need to be specified via the `quarkus.native.additional-build-args` configuration property, the `,` symbol needs to be escaped.\n"
"An example of this is the following:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"During native executable build time GraalVM analyses the application's call tree and generates a code-set that includes all the code it needs.\n"
"Having a modular codebase is key to avoiding problems with unused or optional parts of your application,\n"
"while at the same time reducing both native executable build times and size.\n"
"In this section you will learn about the details behind the benefits of modularity for native applications."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"When code is not modular enough, generated native executables can end up with more code than what the user needs.\n"
"If a feature is not used and the code gets compiled into the native executable,\n"
"this is a waste of native compilation time and memory usage, as well as native executable disk space and starting heap size.\n"
"Even more problems arise when third party libraries or specialized API subsystems are used which cause native compilation or runtime errors,\n"
"and their use is not modularised enough.\n"
"A recent problem can be found in the JAXB library,\n"
"which is capable of deserializing XML files containing images using Java’s AWT APIs.\n"
"The vast majority of Quarkus XML users don’t need to deserialize images,\n"
"so there shouldn’t be a need for users applications to include Java AWT code,\n"
"unless they specifically configure Quarkus to add the JAXB AWT code to the native executable.\n"
"However, because JAXB code that uses AWT is in the same jar as the rest of the XML parsing code,\n"
"achieving this separation was rather complex and required the use of Java bytecode substitutions to get around it.\n"
"These substitutions are hard to maintain and can easily break, hence they should be one's last resort."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"A modular codebase is the best way to avoid these kind of issues.\n"
"Taking the JAXB/AWT problem above,\n"
"if the JAXB code that dealt with images was in a separate module or jar (e.g. `jaxb-images`),\n"
"then Quarkus could choose not to include that module unless the user specifically requested the need to serialize/deserialize XML files containing images at build time."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"Another benefit of modular applications is that they can reduce the code-set that will need to get into the native executable.\n"
"The smaller the code-set, the faster the native executable builds will be and the smaller the native executable produced."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"The key takeaway point here is the following:\n"
"Keeping optional features, particularly those that depend on third party libraries or API subsystems with a big footprint,\n"
"in separate modules is the best solution."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"How do I know if my application suffers from similar problems?\n"
"Aside from a deep study of the application,\n"
"finding usages of\n"
"https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html[Maven optional dependencies]\n"
"is a clear indicator that your application might suffer from similar problems.\n"
"These type of dependencies should be avoided,\n"
"and instead code that interacts with optional dependencies should be moved into separate modules."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"As already explained in the xref:delay-class-init-in-your-app[delay class initialization] section,\n"
"Quarkus marks all code to be initialized at build time by default.\n"
"This means that, unless marked otherwise,\n"
"static variables will be assigned at build time,\n"
"and static blocks will be executed at build time too."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"This can cause values in Java programs that would normally vary from one run to another,\n"
"to always return a constant value.\n"
"E.g. a static field that is assigned the value of `System.currentTimeMillis()`\n"
"will always return the same value when executed as a Quarkus native executable."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"Singletons that rely on static variable initialization will suffer similar problems.\n"
"For example, imagine you have a singleton based around static initialization along with a REST endpoint to query it:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"When the `singletons/static` endpoint is queried,\n"
"it will always return the same value,\n"
"even after the application is restarted:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"When the `singletons/enum` endpoint is queried,\n"
"it will always return the same value,\n"
"even after the application is restarted:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"After each restart,\n"
"querying `singletons/cdi` will return a different value,\n"
"just like it would in JVM mode:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"An alternative way to enforce a singleton while relying static fields, or enums,\n"
"is to xref:delay-class-init-in-your-app[delay its class initialization until run time].\n"
"The nice advantage of CDI-based singletons is that your class initialization is not constrained,\n"
"so you can freely decide whether it should be build-time or run-time initialized,\n"
"depending on your use case."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"Certain commonly used Java methods are overriden by user classes,\n"
"e.g. `toString`, `equals`, `hashCode`...etc.\n"
"The majority of overrides do not cause problems,\n"
"but if they use third party libraries (e.g. for additional formatting),\n"
"or use dynamic language features (e.g. reflection or proxies),\n"
"they can cause native image build to fail.\n"
"Some of those failures might be solvable via configuration,\n"
"but others can be more tricky to handle."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_guides/writing-native-applications-tips.adoc
msgid ""
"From a GraalVM points-to analysis perspective,\n"
"what happens in these method overrides matters,\n"
"even if the application does not explicitly call them.\n"
"This is because these methods are used throughout the JDK,\n"
"and all it takes is for one of those calls to be done on an unconstrained type,\n"
"e.g. `java.lang.Object`,\n"
"for the analysis to have to pull all implementations of that particular method."
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/writing-native-applications-tips.adoc:6
#, no-wrap
msgid "Tips for writing native applications"
msgstr "ネイティブ・アプリケーションを作成するためのヒント"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:12
msgid "This guide contains various tips and tricks for getting around problems that might arise when attempting to run Java applications as native executables."
msgstr "このガイドには、Java アプリケーションをネイティブ実行可能ファイルとして実行しようとしたときに発生する可能性のある問題を回避するためのさまざまなヒントやコツが記載されています。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:14
msgid "Note that we differentiate two contexts where the solution applied might be different:"
msgstr "適用されるソリューションが異なる可能性のある 2 つの文脈を区別していることに注意してください。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:16
msgid "in the context of an application, you will rely on configuring the `native-image` configuration by tweaking your `pom.xml`;"
msgstr "アプリケーションの文脈では、`pom.xml` を修正して、 `native-image` 設定を調整することに依存することになります。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:17
msgid "in the context of an extension, Quarkus offers a lot of infrastructure to simplify all of this."
msgstr "エクステンションの文脈では、Quarkus はこれらすべてを簡素化するための多くのインフラストラクチャーを提供しています。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:19
msgid "Please refer to the appropriate section depending on your context."
msgstr "コンテキストに応じて適切なセクションを参照してください。"

#. type: Title ==
#: upstream/_guides/writing-native-applications-tips.adoc:20
#, no-wrap
msgid "Supporting native in your application"
msgstr "アプリケーションでのネイティブのサポート"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:23
msgid "GraalVM imposes a number of constraints and making your application a native executable might require a few tweaks."
msgstr "GraalVM は多くの制約を課しており、アプリケーションをネイティブ実行可能なものにするには、いくつかの調整が必要になるかもしれません。"

#. type: Title ===
#: upstream/_guides/writing-native-applications-tips.adoc:24
#: upstream/_guides/writing-native-applications-tips.adoc:619
#, no-wrap
msgid "Including resources"
msgstr "リソースのインクルード"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:30
msgid "Quarkus automatically includes the resources present in `META-INF/resources` (the web resources) but, outside this directory, you are on your own."
msgstr "Quarkus では、`META-INF/resources` (Web リソース) にあるリソースを自動的にインクルードしますが、このディレクトリー以外の場所は自分で設定する必要があります。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:37
msgid "Other resources should be declared explicitly."
msgstr "その他のリソースは明示的に宣言する必要があります。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:43
msgid "Both configuration properties support glob patterns."
msgstr "どちらの設定プロパティーもグロブパターンに対応しています。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:45
msgid "For instance, having the following properties in your `application.properties`:"
msgstr "たとえば、`application.properties` で以下のプロパティーを設定すると、"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:53
msgid "will include:"
msgstr "以下が含まれます。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:55
msgid "all files in the `foo/` directory and its subdirectories except for files in `foo/private/` and its subdirectories,"
msgstr "`foo/` ディレクトリーとそのサブディレクトリーにあるすべてのファイルのうち、`foo/private/` とそのサブディレクトリーにあるファイルを除く。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:56
msgid "all text files in the `bar/` directory and its subdirectories."
msgstr "`bar/` ディレクトリーとそのサブディレクトリーにあるすべてのテキストファイル。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:80
#, fuzzy
msgid "For more information about this topic, see the link:https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Resources/[GraalVM Accessing Resources in Native Image] guide."
msgstr "このトピックの詳細については、「 link:https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Resources/[ネイティブ・イメージでリソースにアクセスするGraalVM] 」ガイドを参照してください。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:83
#: upstream/_guides/writing-native-applications-tips.adoc:252
msgid "The final order of business is to make the configuration file known to the `native-image` executable by adding the proper configuration to `application.properties`:"
msgstr "最後にやるべきことは、`application.properties` に適切な設定を追加して、設定ファイルを `native-image` 実行可能ファイルに知らせることです。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:95
#: upstream/_guides/writing-native-applications-tips.adoc:264
msgid "Multiple options may be separated by a comma. For example, one could use:"
msgstr "複数のオプションはカンマで区切ることができます。例えば、次のように使用することができます。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:104
#: upstream/_guides/writing-native-applications-tips.adoc:273
msgid "in order to ensure that various resources are included and additional reflection is registered."
msgstr "さまざまなリソースが含まれており、追加のリフレクションの登録を担保するため。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:107
#: upstream/_guides/writing-native-applications-tips.adoc:276
msgid "If for some reason adding the aforementioned configuration to `application.properties` is not desirable, it is possible to configure the build tool to effectively perform the same operation."
msgstr "何らかの理由で `application.properties` に前述の構成を追加することが望ましくない場合には、ビルドツールで効果的に同様の操作を行うように構成することも可能です。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:109
#: upstream/_guides/writing-native-applications-tips.adoc:278
msgid "When using Maven, we could use the following configuration:"
msgstr "Maven を使用する場合は、以下のような構成にすることができます。"

#. type: Title ===
#: upstream/_guides/writing-native-applications-tips.adoc:123
#, no-wrap
msgid "Registering for reflection"
msgstr "リフレクションのための登録"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:132
msgid "This is a very common case as JSON libraries typically use reflection to serialize the objects to JSON:"
msgstr "これは非常によくあるケースです。JSONライブラリは一般的にリフレクションを使用してオブジェクトをJSONにシリアライズする為です。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:175
msgid "If we were to use the code above, we would get an exception like the following when using the native executable:"
msgstr "上記のコードを使用した場合、ネイティブ実行可能ファイルを使用すると以下のような例外が発生します:"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:182
msgid "or if you are using Jackson:"
msgstr "あるいはJackson を使用している場合は以下の通りです:"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:189
msgid "An even nastier possible outcome could be for no exception to be thrown, but instead the JSON result would be completely empty."
msgstr "さらに厄介なのは、例外がスローされずに JSON の結果が完全に空になってしまうことです。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:191
msgid "There are two different ways to fix this type of issues."
msgstr "このタイプの問題を解決するには、2 つの方法があります。"

#. type: Title ====
#: upstream/_guides/writing-native-applications-tips.adoc:193
#, no-wrap
msgid "Using the @RegisterForReflection annotation"
msgstr "@RegisterForReflection アノテーションの使用"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:196
msgid "The easiest way to register a class for reflection is to use the `@RegisterForReflection` annotation:"
msgstr "リフレクション用のクラスを登録する最も簡単な方法は、`@RegisterForReflection` アノテーションを使用することです。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:205
msgid "If your class is in a third-party jar, you can do it by using an empty class that will host the `@RegisterForReflection` for it."
msgstr "クラスがサードパーティの jar にある場合は、そのクラスの `@RegisterForReflection` をホストする空のクラスを使用することで行うことができます。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:216
msgid "This feature is handy when using third-party libraries using object mapping features (such as Jackson or GSON):"
msgstr "この機能は、オブジェクトマッピング機能を使用するサードパーティのライブラリ（JacksonやGSONなど）を使用する際に便利です。"

#. type: Title ====
#: upstream/_guides/writing-native-applications-tips.adoc:225
#, no-wrap
msgid "Using a configuration file"
msgstr "設定ファイルの使用"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:228
msgid "You can use a configuration file to register classes for reflection."
msgstr "設定ファイルを使用してリフレクション用のクラスを登録することも可能です。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:230
msgid "As an example, in order to register all methods of class `com.acme.MyClass` for reflection, we create `reflection-config.json` (the most common location is within `src/main/resources`)"
msgstr "例えば、クラス `com.acme.MyClass` のすべてのメソッドをリフレクションのために登録するには、`reflection-config.json` を作成します (最も一般的な場所は `src/main/resources` の中です)。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:249
#, fuzzy
msgid "For more information about the format of this file, see the link:https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Reflection/[GraalVM Reflection in Native Image] guide."
msgstr "このファイルのフォーマットの詳細については、 link:https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Reflection/[GraalVM Reflection in Native Image] ガイドを参照してください。"

#. type: Title ===
#: upstream/_guides/writing-native-applications-tips.adoc:293
#, no-wrap
msgid "Delaying class initialization"
msgstr "クラスの初期化を遅らせる"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:296
msgid "By default, Quarkus initializes all classes at build time."
msgstr "デフォルトでは、Quarkus はビルド時にすべてのクラスを初期化します。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:309
msgid "Another common source of errors is when the image heap taken by GraalVM contains a `Random`/`SplittableRandom` instance:"
msgstr "もう一つのよくあるエラーの原因は、GraalVMによって取得されたイメージヒープが `Random` / `SplittableRandom` インスタンスを含んでいる場合です。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:321
msgid "You can find detailed information about this `Random`/`SplittableRandom` issue in https://foivos.zakkak.net/tutorials/working-with-randoms-native-images/[this blog post]."
msgstr "この `Random`/`SplittableRandom` の問題については、 https://foivos.zakkak.net/tutorials/working-with-randoms-native-images/[このブログ記事] に詳細な情報があります。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:327
msgid "It should be added to the `native-image` configuration using the `quarkus.native.additional-build-args` configuration property as shown in the examples above."
msgstr "上記の例のように、`quarkus.native.additional-build-args` 設定プロパティーを使用して `native-image` 設定に追加する必要があります。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:331
#, fuzzy
msgid "For more information, see the link:https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[GraalVM Class Initialization in Native Image] guide."
msgstr "詳細については、 link:https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[ネイティブ・イメージにおけるGraalVMクラスの初期化] ガイドを参照してください。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:344
msgid "and in the case of using the Maven configuration instead of `application.properties`:"
msgstr "`application.properties` の代わりに Maven 設定を使用する場合。"

#. type: Title ===
#: upstream/_guides/writing-native-applications-tips.adoc:351
#: upstream/_guides/writing-native-applications-tips.adoc:664
#, no-wrap
msgid "Managing Proxy Classes"
msgstr "プロキシークラスの管理"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:354
msgid "While writing native application you'll need to define proxy classes at image build time by specifying the list of interfaces that they implement."
msgstr "ネイティブアプリケーションを書く際には、実装するインターフェースのリストを指定して、イメージのビルド時にプロキシークラスを定義する必要があります。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:356
msgid "In such a situation, the error you might encounter is:"
msgstr "このような状況では、以下のようなエラーが発生します。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:363
#, fuzzy
msgid "Solving this issue requires adding the `-H:DynamicProxyConfigurationResources=<comma-separated-config-resources>` option and to provide a dynamic proxy configuration file."
msgstr "この問題を解決するには、 `-H:DynamicProxyConfigurationResources=<comma-separated-config-resources>` オプションを追加し、動的プロキシ設定ファイルを提供する必要がある。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:365
#, fuzzy
msgid "For more information about the format of this file, see the link:https://www.graalvm.org/latest/reference-manual/native-image/guides/configure-dynamic-proxies/[GraalVM Configure Dynamic Proxies Manually] guide."
msgstr "このファイルのフォーマットの詳細については、「 link:https://www.graalvm.org/latest/reference-manual/native-image/guides/configure-dynamic-proxies/[GraalVM Configure Dynamic Proxies Manually] 」ガイドを参照してください。"

#. type: Title ===
#: upstream/_guides/writing-native-applications-tips.adoc:367
#, no-wrap
msgid "Modularity Benefits"
msgstr "モジュール化のメリット"

#. type: Title ===
#: upstream/_guides/writing-native-applications-tips.adoc:412
#, no-wrap
msgid "Enforcing Singletons"
msgstr "シングルトンの強制"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:468
msgid "Singletons that rely on `enum` classes are also affected by the same issue:"
msgstr "`enum` クラスに依存しているシングルトンも同じ問題の影響を受けます。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:515
msgid "One way to fix it is to build singletons using CDI's `@Singleton` annotation:"
msgstr "これを修正する 1 つの方法は、CDI の `@Singleton` アノテーションを使用してシングルトンを構築することです。"

#. type: Title ===
#: upstream/_guides/writing-native-applications-tips.adoc:566
#, no-wrap
msgid "Beware of common Java API overrides"
msgstr "よくある Java API オーバーライドの注意点"

#. type: Title ==
#: upstream/_guides/writing-native-applications-tips.adoc:586
#, no-wrap
msgid "Supporting native in a Quarkus extension"
msgstr "Quarkus エクステンションでネイティブをサポートする"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:589
msgid "Supporting native in a Quarkus extension is even easier as Quarkus provides a lot of tools to simplify all this."
msgstr "Quarkus のエクステンションでのネイティブのサポートは、Quarkus がこれらすべてを単純化するための多くのツールを提供しているため、さらに簡単になりました。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:593
msgid "Everything described here will only work in the context of Quarkus extensions, it won't work in an application."
msgstr "ここで説明したことはすべて、Quarkus エクステンションの文脈でのみ機能し、アプリケーションでは機能しません。"

#. type: Title ===
#: upstream/_guides/writing-native-applications-tips.adoc:595
#, no-wrap
msgid "Register reflection"
msgstr "リフレクションの登録"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:598
msgid "Quarkus makes registration of reflection in an extension a breeze by using `ReflectiveClassBuildItem`, thus eliminating the need for a JSON configuration file."
msgstr "Quarkus では、`ReflectiveClassBuildItem` を使用することで、エクステンションへのリフレクションの登録が簡単になり、JSON 設定ファイルが不要になります。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:600
msgid "To register a class for reflection, one would need to create a Quarkus processor class and add a build step that registers reflection:"
msgstr "リフレクション用のクラスを登録するには、Quarkus プロセッサークラスを作成し、リフレクションを登録するビルドステップを追加する必要があります。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:617
#, fuzzy
msgid "For more information about reflection in GraalVM, see the link:https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Reflection/[GraalVM Reflection in Native Image] guide."
msgstr "GraalVMにおけるリフレクションの詳細については、 link:https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Reflection/[GraalVM Reflection in Native Image] ガイドを参照してください。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:622
msgid "In the context of an extension, Quarkus eliminates the need for a JSON configuration file by allowing extension authors to specify a `NativeImageResourceBuildItem`:"
msgstr "エクステンションのコンテキストでは、Quarkus は、エクステンションの作成者が `NativeImageResourceBuildItem` を指定できるようにすることで、JSON 設定ファイルの必要性を排除しています。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:638
#, fuzzy
msgid "For more information about GraalVM resource handling in native executables, see the link:https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Resources/[GraalVM Accessing Resources in Native Image] guide."
msgstr "ネイティブ実行ファイルでのGraalVMリソース処理の詳細については、「 link:https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Resources/[ネイティブ・イメージでリソースにアクセスするGraalVM] 」ガイドを参照してください。"

#. type: Title ==
#: upstream/_guides/writing-native-applications-tips.adoc:641
#, no-wrap
msgid "Delay class initialization"
msgstr "遅延クラス初期化"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:644
msgid "Quarkus simplifies things by allowing extensions authors to simply register a `RuntimeInitializedClassBuildItem`. A simple example of doing so could be:"
msgstr "Quarkus では、エクステンションの作成者が簡単に `RuntimeInitializedClassBuildItem` を登録できるようにすることで、物事をシンプルにしています。簡単な例としては、次のようなものが考えられます。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:658
msgid "Using such a construct means that a `--initialize-at-run-time` option will automatically be added to the `native-image` command line."
msgstr "このような構文を使用すると、 `--initialize-at-run-time` オプションが自動的に `native-image` コマンドラインに追加されることを意味します。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:662
#, fuzzy
msgid "For more information about the `--initialize-at-run-time` option, see the link:https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[GraalVM Class Initialization in Native Image] guide."
msgstr "`--initialize-at-run-time` オプションの詳細については、「 link:https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[ネイティブ・イメージにおけるGraalVMクラスの初期化] 」ガイドを参照してください。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:667
msgid "Very similarly, Quarkus allows extensions authors to register a `NativeImageProxyDefinitionBuildItem`. An example of doing so is:"
msgstr "同様に、Quarkus では、エクステンションの作成者が `NativeImageProxyDefinitionBuildItem` を登録することができます。その例としては、以下のようなものがあります。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:682
msgid "Using such a construct means that a `-H:DynamicProxyConfigurationResources` option will automatically be added to the `native-image` command line."
msgstr "このような構文を使用すると、`-H:DynamicProxyConfigurationResources` オプションが自動的に `native-image` コマンドラインに追加されることを意味します。"

#. type: delimited block =
#: upstream/_guides/writing-native-applications-tips.adoc:686
#, fuzzy
msgid "For more information about Proxy Classes, see the link:https://www.graalvm.org/latest/reference-manual/native-image/guides/configure-dynamic-proxies/[GraalVM Configure Dynamic Proxies Manually] guide."
msgstr "プロキシ・クラスの詳細については、 link:https://www.graalvm.org/latest/reference-manual/native-image/guides/configure-dynamic-proxies/[GraalVM Configure Dynamic Proxies Manually] ガイドを参照してください。"

#. type: Title ===
#: upstream/_guides/writing-native-applications-tips.adoc:688
#, no-wrap
msgid "Logging with Native Image"
msgstr "ネイティブイメージでのロギング"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:691
msgid "If you are using dependencies that require logging components such as Apache Commons Logging or Log4j and are experiencing a `ClassNotFoundException` when building the native executable, you can resolve this by excluding the logging library and adding the corresponding JBoss Logging adapter."
msgstr "Apache Commons Logging や Log4j などのロギングコンポーネントを必要とする依存関係を使用していて、ネイティブ実行可能ファイルをビルドする際に `ClassNotFoundException` が発生する場合、ロギングライブラリーを除外し、対応する JBoss Logging アダプターを追加することで解決できます。"

#. type: Plain text
#: upstream/_guides/writing-native-applications-tips.adoc:692
msgid "For more details please refer to the xref:logging.adoc#logging-adapters[Logging guide]."
msgstr "詳しくは、link:logging.html#logging-adapters[Loggingガイド] をご覧ください。"
