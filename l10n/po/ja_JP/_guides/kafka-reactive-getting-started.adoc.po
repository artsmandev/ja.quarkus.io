# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-12-22 15:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/kafka-reactive-getting-started.adoc:6
#, fuzzy, no-wrap
msgid "Getting Started to SmallRye Reactive Messaging with Apache Kafka"
msgstr "Apache Kafkaを使用したSmallRye Reactive Messagingの入門編"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:11
#, fuzzy
msgid "This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with Apache Kafka."
msgstr "このガイドでは、QuarkusアプリケーションがSmallRye Reactive Messagingを利用してApache Kafkaと連携する方法を説明します。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:12
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:15
#, fuzzy
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるためには"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:17
#, fuzzy
msgid "less than 15 minutes"
msgstr "15分未満"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:18
#, fuzzy
msgid "an IDE"
msgstr "a IDE"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:19
#, fuzzy
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 11+をインストールし、 `JAVA_HOME` を適切に設定する。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:20
#, fuzzy
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:21
#, fuzzy
msgid "Docker and docker-compose to run the application in containers"
msgstr "アプリケーションをコンテナで実行するためのDockerとdocker-compose"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:22
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建築"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:27
#, fuzzy
msgid "In this guide, we are going to develop two applications communicating with Kafka.  The first application sends a _quote request_ to Kafka and consumes Kafka messages from the _quote_ topic.  The second application receives the _quote request_ and sends a _quote_ back."
msgstr "このガイドでは、Kafkaと通信する2つのアプリケーションを開発していきます。1つ目のアプリケーションは、Kafkaに _見積もりリクエスト_を送信し、 _見積もり_トピックからKafkaメッセージを消費します。2つ目のアプリケーションは、 _見積もりリクエスト_を受信し、 _見積もり_を送り返します。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/kafka-reactive-getting-started.adoc:28
#, fuzzy, no-wrap
msgid "Architecture,"
msgstr "建築です。"

#. type: Target for macro image
#: upstream/_guides/kafka-reactive-getting-started.adoc:28
#, no-wrap
msgid "kafka-qs-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:33
#, fuzzy
msgid "The first application, the _producer_, will let the user request some quotes over a HTTP endpoint.  For each quote request a random identifier is generated and returned to the user, to mark the quote request as _pending_.  At the same time, the generated request id is sent over a Kafka topic `quote-requests`."
msgstr "最初のアプリケーションである _プロデューサー_は、ユーザーにHTTPエンドポイントを介していくつかの見積もりを要求させます。各見積もり要求に対して、ランダムな識別子が生成され、ユーザーに返され、見積もり要求が _保留_されていることを示します。同時に、生成されたリクエストIDは、Kafkaトピック（ `quote-requests` ）を介して送信されます。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/kafka-reactive-getting-started.adoc:34
#, fuzzy, no-wrap
msgid "Producer"
msgstr "プロデューサー"

#. type: Target for macro image
#: upstream/_guides/kafka-reactive-getting-started.adoc:34
#, no-wrap
msgid "kafka-qs-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:37
#, fuzzy
msgid "The second application, the _processor_, will read from the `quote-requests` topic, put a random price to the quote, and send it to a Kafka topic named `quotes`."
msgstr "2 番目のアプリケーションである _プロセッサ_は、 `quote-requests` トピックから読み取り、ランダムな価格を引用符に付け、それを `quotes` という名前の Kafka トピックに送信します。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:40
#, fuzzy
msgid "Lastly, the _producer_ will read the quotes and send them to the browser using server-sent events.  The user will therefore see the quote price updated from _pending_ to the received price in real-time."
msgstr "最後に、 _プロデューサー_が気配値を読み取り、サーバー・センテッド・イベントを使ってブラウザに送信します。そのため、ユーザーは気配値が _保留_から受信した価格にリアルタイムで更新されるのを見ることができます。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:41
#, fuzzy, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:45
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create applications step by step.  However, you can go right to the completed example."
msgstr "次のセクションの説明に沿って、段階的にアプリケーションを作成することをお勧めします。しかし、完成した例をすぐに見ることもできます。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:47
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive]をダウンロードする。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:49
#, fuzzy
msgid "The solution is located in the `kafka-quickstart` {quickstarts-tree-url}/kafka-quickstart[directory]."
msgstr "このソリューションは、 `kafka-quickstart` {quickstarts-tree-url}/kafka-quickstart[directory]にあります。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:50
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:53
#, fuzzy
msgid "First, we need to create two projects: the _producer_ and the _processor_."
msgstr "まず、 _プロデューサー_と _プロセッサー_の2つのプロジェクトを作成する必要があります。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:55
#, fuzzy
msgid "To create the _producer_ project, in a terminal run:"
msgstr "_プロデューサー・_プロジェクトを作成するには、ターミナルで次のように実行します。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:63
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=kafka-quickstart-producer \\\n"
"    -DnoCode=true \\\n"
"    -Dextensions=resteasy-reactive-jackson,smallrye-reactive-messaging-kafka\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:66
#, fuzzy
msgid "This command creates the project structure and selects two Quarkus extensions we will be using:"
msgstr "このコマンドは、プロジェクト構造を作成し、使用する2つのQuarkusエクステンションを選択します。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:68
#, fuzzy
msgid "RESTEasy Reactive and its Jackson support (to handle JSON) to serve the HTTP endpoint."
msgstr "RESTEasy ReactiveとそのJacksonサポート（JSONを扱うため）でHTTPエンドポイントを提供しています。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:69
#, fuzzy
msgid "The Kafka connector for Reactive Messaging"
msgstr "Reactive Messaging のための Kafka コネクタ"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:71
#, fuzzy
msgid "To create the _processor_ project, from the same directory, run:"
msgstr "_プロセッサー・_プロジェクトを作成するには、同じディレクトリから、次のように実行します。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:79
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=kafka-quickstart-processor \\\n"
"    -DnoCode=true \\\n"
"    -Dextensions=smallrye-reactive-messaging-kafka\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:82
#, fuzzy
msgid "At that point, you should have the following structure:"
msgstr "その時点で、次のような構成になっているはずです。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:108
#, no-wrap
msgid ""
".\n"
"├── kafka-quickstart-processor\n"
"│  ├── README.md\n"
"│  ├── mvnw\n"
"│  ├── mvnw.cmd\n"
"│  ├── pom.xml\n"
"│  └── src\n"
"│     └── main\n"
"│        ├── docker\n"
"│        ├── java\n"
"│        └── resources\n"
"│           └── application.properties\n"
"└── kafka-quickstart-producer\n"
"   ├── README.md\n"
"   ├── mvnw\n"
"   ├── mvnw.cmd\n"
"   ├── pom.xml\n"
"   └── src\n"
"      └── main\n"
"         ├── docker\n"
"         ├── java\n"
"         └── resources\n"
"            └── application.properties\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:111
#, fuzzy
msgid "Open the two projects in your favorite IDE."
msgstr "2つのプロジェクトをお好きなIDEで開きます。"

#. type: Block title
#: upstream/_guides/kafka-reactive-getting-started.adoc:113
#, fuzzy, no-wrap
msgid "Dev Services"
msgstr "開発サービス"

#. type: delimited block =
#: upstream/_guides/kafka-reactive-getting-started.adoc:118
#, fuzzy
msgid "No need to start a Kafka broker when using the dev mode or for tests.  Quarkus starts a broker for you automatically.  See xref:kafka-dev-services.adoc[Dev Services for Kafka] for details."
msgstr "開発モードやテスト用にKafkaブローカーを起動する必要はありません。Quarkusが自動的にブローカーを起動します。詳細は、 link:kafka-dev-services.html[Kafkaの開発サービス]を参照してください。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:120
#, fuzzy, no-wrap
msgid "The Quote object"
msgstr "Quoteオブジェクト"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:125
#, fuzzy
msgid "The `Quote` class will be used in both _producer_ and _processor_ projects.  For the sake of simplicity, we will duplicate the class.  In both projects, create the `src/main/java/org/acme/kafka/model/Quote.java` file, with the following content:"
msgstr "`Quote` クラスは、 _プロデューサー_プロジェクトと _プロセッサー_プロジェクトの両方で使用されます。簡単にするために、このクラスを複製します。両方のプロジェクトで、次のような内容の `src/main/java/org/acme/kafka/model/Quote.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:129
#, no-wrap
msgid "package org.acme.kafka.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:131
#, no-wrap
msgid "public class Quote {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:134
#, no-wrap
msgid ""
"    public String id;\n"
"    public int price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:139
#, no-wrap
msgid ""
"    /**\n"
"    * Default constructor required for Jackson serializer\n"
"    */\n"
"    public Quote() { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:144
#, no-wrap
msgid ""
"    public Quote(String id, int price) {\n"
"        this.id = id;\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:153
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return \"Quote{\" +\n"
"                \"id='\" + id + '\\'' +\n"
"                \", price=\" + price +\n"
"                '}';\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:157
#, fuzzy
msgid "JSON representation of `Quote` objects will be used in messages sent to the Kafka topic and also in the server-sent events sent to web browsers."
msgstr "`Quote` オブジェクトのJSON表現は、Kafkaトピックに送信されるメッセージや、Webブラウザに送信されるサーバー送信イベントでも使用されます。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:160
#, fuzzy
msgid "Quarkus has built-in capabilities to deal with JSON Kafka messages.  In a following section, we will create serializer/deserializer classes for Jackson."
msgstr "Quarkusには、JSONのKafkaメッセージを扱う機能が組み込まれています。次のセクションでは、Jackson用のシリアライザ/デシリアライザクラスを作成します。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:161
#, fuzzy, no-wrap
msgid "Sending quote request"
msgstr "見積もり依頼の送信"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:164
#, fuzzy
msgid "Inside the _producer_ project, create the `src/main/java/org/acme/kafka/producer/QuotesResource.java` file and add the following content:"
msgstr "_producer_プロジェクト内で、 `src/main/java/org/acme/kafka/producer/QuotesResource.java` ファイルを作成し、以下の内容を追加します。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:168
#, no-wrap
msgid "package org.acme.kafka.producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:170
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:176
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:180
#, no-wrap
msgid ""
"import org.acme.kafka.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:183
#, no-wrap
msgid ""
"@Path(\"/quotes\")\n"
"public class QuotesResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:186
#, no-wrap
msgid ""
"    @Channel(\"quote-requests\")\n"
"    Emitter<String> quoteRequestEmitter; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:199
#, no-wrap
msgid ""
"    /**\n"
"     * Endpoint to generate a new quote request id and send it to \"quote-requests\" Kafka topic using the emitter.\n"
"     */\n"
"    @POST\n"
"    @Path(\"/request\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String createRequest() {\n"
"        UUID uuid = UUID.randomUUID();\n"
"        quoteRequestEmitter.send(uuid.toString()); // <2>\n"
"        return uuid.toString(); // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:201
#, fuzzy
msgid "Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel."
msgstr "Reactive Messaging `Emitter` をインジェクトして、 `quote-requests` チャンネルにメッセージを送信します。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:202
#, fuzzy
msgid "On a post request, generate a random UUID and send it to the Kafka topic using the emitter."
msgstr "投稿リクエストで、ランダムなUUIDを生成し、エミッターを使ってKafkaトピックに送信します。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:203
#, fuzzy
msgid "Return the same UUID to the client."
msgstr "同じUUIDをクライアントに返す。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:209
#, fuzzy
msgid "The `quote-requests` channel is going to be managed as a Kafka topic, as that's the only connector on the classpath.  If not indicated otherwise, like in this example, Quarkus uses the channel name as topic name.  So, in this example, the application writes into the `quote-requests` topic.  Quarkus also configures the serializer automatically, because it finds that the `Emitter` produces `String` values."
msgstr "指定する必要があるのは、 `smallrye-kafka` のコネクタだけです。デフォルトでは、Kafkaコネクタはチャネル名( `quote-requests`)をKafkaトピック名として使用します。Quarkusは、 `Emitter` が `String` の値を生成することを発見したため、シリアライザーを自動的に設定します。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:211
#, fuzzy
msgid "When you have multiple connectors, you would need to indicate which connector you want to use in the application configuration."
msgstr "複数のコネクタがある場合は、アプリケーションの設定でどのコネクタを使用するかを指定する必要があります。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:212
#, fuzzy, no-wrap
msgid "Processing quote requests"
msgstr "見積もり依頼の処理"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:216
#, fuzzy
msgid "Now let's consume the quote request and give out a price.  Inside the _processor_ project, create the `src/main/java/org/acme/kafka/processor/QuotesProcessor.java` file and add the following content:"
msgstr "それでは、見積依頼を消費して価格を出してみましょう。 _プロセッサ_プロジェクト内で、 `src/main/java/org/acme/kafka/processor/QuotesProcessor.java` ファイルを作成し、以下の内容を追加します。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:220
#, no-wrap
msgid "package org.acme.kafka.processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:222
#, no-wrap
msgid "import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:224
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:228
#, no-wrap
msgid ""
"import org.acme.kafka.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:230
#, no-wrap
msgid "import io.smallrye.reactive.messaging.annotations.Blocking;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:237
#, no-wrap
msgid ""
"/**\n"
" * A bean consuming data from the \"quote-requests\" Kafka topic (mapped to \"requests\" channel) and giving out a random quote.\n"
" * The result is pushed to the \"quotes\" Kafka topic.\n"
" */\n"
"@ApplicationScoped\n"
"public class QuotesProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:239
#, no-wrap
msgid "    private Random random = new Random();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:249
#, no-wrap
msgid ""
"    @Incoming(\"requests\") // <1>\n"
"    @Outgoing(\"quotes\")   // <2>\n"
"    @Blocking             // <3>\n"
"    public Quote process(String quoteRequest) throws InterruptedException {\n"
"        // simulate some hard working task\n"
"        Thread.sleep(200);\n"
"        return new Quote(quoteRequest, random.nextInt(100));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:252
#, fuzzy
msgid "Indicates that the method consumes the items from the `requests` channel."
msgstr "メソッドが `requests` チャンネルのアイテムを消費することを示す。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:253
#, fuzzy
msgid "Indicates that the objects returned by the method are sent to the `quotes` channel."
msgstr "メソッドが返すオブジェクトが `quotes` チャンネルに送信されることを示す。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:254
#, fuzzy
msgid "Indicates that the processing is _blocking_ and cannot be run on the caller thread."
msgstr "処理が _ブロック_化されており、呼び出し元のスレッドでは実行できないことを示す。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:257
#, fuzzy
msgid "For every Kafka _record_ from the `quote-requests` topic, Reactive Messaging calls the `process` method, and sends the returned `Quote` object to the `quotes` channel.  In this case, we need to configure the channel in the `application.properties` file, to configures the `requests` and `quotes` channels:"
msgstr "`quote-requests` トピックからのすべての Kafka _レコード_に対して、Reactive Messagins は `process` メソッドを呼び出し、返された `Quote` オブジェクトを `quotes` チャンネルに送信します。前述の例と同様に、 `application.properties` ファイルでコネクタを設定して、 `requests` と `quotes` のチャンネルを Kafka のトピックにマッピングする必要があります。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:261
#, no-wrap
msgid "%dev.quarkus.http.port=8081\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:265
#, no-wrap
msgid ""
"# Configure the incoming `quote-requests` Kafka topic\n"
"mp.messaging.incoming.requests.topic=quote-requests\n"
"mp.messaging.incoming.requests.auto.offset.reset=earliest\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:269
#, fuzzy
msgid "Note that in this case we have one incoming and one outgoing connector configuration, each one distinctly named.  The configuration keys are structured as follows:"
msgstr "この場合、着信用と発信用のコネクタ構成がそれぞれ1つずつあり、それぞれに明確な名前がついていることに注意してください。コンフィギュレーションのキーは以下のように構成されています。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:271
#, fuzzy
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:273
#, fuzzy
msgid "The `channel-name` segment must match the value set in the `@Incoming` and `@Outgoing` annotation:"
msgstr "`channel-name` のセグメントは、 `@Incoming` と `@Outgoing` のアノテーションで設定された値と一致する必要があります。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:275
#, fuzzy
msgid "`quote-requests` -> Kafka topic from which we read the quote requests"
msgstr "`quote-requests` → 見積もり依頼を読み込んだKafkaトピック"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:276
#, fuzzy
msgid "`quotes` -> Kafka topic in which we write the quotes"
msgstr "`quotes` → 引用文を書くカフカのトピック"

#. type: delimited block =
#: upstream/_guides/kafka-reactive-getting-started.adoc:281
#, fuzzy
msgid "More details about this configuration is available on the https://kafka.apache.org/documentation/#producerconfigs[Producer configuration] and https://kafka.apache.org/documentation/#consumerconfigs[Consumer configuration] section from the Kafka documentation. These properties are configured with the prefix `kafka`.  An exhaustive list of configuration properties is available in xref:kafka.adoc#kafka-configuration[Kafka Reference Guide - Configuration]."
msgstr "この設定についての詳細は、Kafka のドキュメントの link:https://kafka.apache.org/documentation/#producerconfigs[Producer configuration]と link:https://kafka.apache.org/documentation/#consumerconfigs[Consumer configuration]のセクションを参照してください。これらのプロパティは、接頭辞 `kafka` で設定されます。設定プロパティの一覧は、「 link:kafka.html#kafka-configuration[Kafka リファレンスガイド - 設定]」に記載されています。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:285
#, fuzzy
msgid "`mp.messaging.incoming.requests.auto.offset.reset=earliest` instructs the application to start reading the topics from the first offset, when there is no committed offset for the consumer group.  In other words, it will also process messages sent before we start the processor application."
msgstr "`mp.messaging.incoming.requests.auto.offset.reset=earliest` は、コンシューマ・グループにコミットされたオフセットがない場合に、最初のオフセットからトピックの読み取りを開始するようアプリケーションに指示します。つまり、プロセッサ・アプリケーションを起動する前に送られてきたメッセージも処理することになります。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:288
#, fuzzy
msgid "There is no need to set serializers or deserializers.  Quarkus detects them, and if none are found, generates them using JSON serialization."
msgstr "シリアライザやデシリアライザを設定する必要はありません。Quarkusはそれらを検出し、見つからない場合は、JSONシリアライゼーションを使用して生成します。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:289
#, fuzzy, no-wrap
msgid "Receiving quotes"
msgstr "見積もりを受け取る"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:293
#, fuzzy
msgid "Back to our _producer_ project.  Let's modify the `QuotesResource` to consume quotes from Kafka and send them back to the client via Server-Sent Events:"
msgstr "_プロデューサー_プロジェクトに戻ります。 `QuotesResource` を修正して、Kafka から引用符を取得し、Server-Sent Events を通じてクライアントに送信してみましょう。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:297
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:299
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:302
#, no-wrap
msgid ""
"@Channel(\"quotes\")\n"
"Multi<Quote> quotes; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:311
#, no-wrap
msgid ""
"/**\n"
" * Endpoint retrieving the \"quotes\" Kafka topic and sending the items to a server sent event.\n"
" */\n"
"@GET\n"
"@Produces(MediaType.SERVER_SENT_EVENTS) // <2>\n"
"public Multi<Quote> stream() {\n"
"    return quotes; // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:313
#, fuzzy
msgid "Injects the `quotes` channel using the `@Channel` qualifier"
msgstr "`@Channel` の修飾子を使用して `quotes` のチャネルを注入します。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:314
#, fuzzy
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr "を使用してコンテンツを送信することを示します。 `Server Sent Events`"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:315
#, fuzzy
msgid "Returns the stream (_Reactive Stream_)"
msgstr "ストリームを返す _（Reactive Stream_"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:318
#, fuzzy
msgid "No need to configure anything, as Quarkus will automatically associate the `quotes` channel to the `quotes` Kafka topic.  It will also generate a deserializer for the `Quote` class."
msgstr "Quarkusは `quotes` チャンネルを `quotes` Kafkaトピックに自動的に関連付けますので、何も設定する必要はありません。また、 `Quote` クラスのデシリアライザも生成されます。"

#. type: Block title
#: upstream/_guides/kafka-reactive-getting-started.adoc:321
#, fuzzy, no-wrap
msgid "Message serialization in Kafka"
msgstr "Kafkaにおけるメッセージのシリアル化"

#. type: delimited block =
#: upstream/_guides/kafka-reactive-getting-started.adoc:324
#, fuzzy
msgid "In this example we used Jackson to serialize/deserialize Kafka messages.  For more options on message serialization, see xref:kafka.adoc#kafka-serialization[Kafka Reference Guide - Serialization]."
msgstr "この例では、Jacksonを使ってKafkaメッセージのシリアライズ/デシリアライズを行いました。メッセージのシリアライズに関する詳細なオプションについては、「 link:kafka.html#kafka-serialization[Kafka リファレンスガイド - シリアライズ]」を参照してください。"

#. type: delimited block =
#: upstream/_guides/kafka-reactive-getting-started.adoc:328
#, fuzzy
msgid "We strongly suggest adopting a contract-first approach using a schema registry.  To learn more about how to use Apache Kafka with the schema registry and Avro, follow the xref:kafka-schema-registry-avro.adoc[Using Apache Kafka with Schema Registry and Avro] guide."
msgstr "スキーマレジストリを使用してコントラクトファーストのアプローチを採用することを強くお勧めします。Apache Kafkaをスキーマ・レジストリとAvroと一緒に使用する方法の詳細については、 link:kafka-schema-registry-avro.html[Using Apache Kafka with Schema Registry and Avro]ガイドに従ってください。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:330
#, fuzzy, no-wrap
msgid "The HTML page"
msgstr "HTMLページ"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:333
#, fuzzy
msgid "Final touch, the HTML page requesting quotes and displaying the prices obtained over SSE."
msgstr "最後の仕上げは、見積もりを依頼し、SSEで得た価格を表示するHTMLページです。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:335
#, fuzzy
msgid "Inside the _producer_ project, create the `src/main/resources/META-INF/resources/quotes.html` file with the following content:"
msgstr "_producer_プロジェクト内に、以下の内容の `src/main/resources/META-INF/resources/quotes.html` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:343
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html lang=\"en\">\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <title>Prices</title>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:370
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
"</head>\n"
"<body>\n"
"<div class=\"container\">\n"
"    <div class=\"card\">\n"
"        <div class=\"card-body\">\n"
"            <h2 class=\"card-title\">Quotes</h2>\n"
"            <button class=\"btn btn-info\" id=\"request-quote\">Request Quote</button>\n"
"            <div class=\"quotes\"></div>\n"
"        </div>\n"
"    </div>\n"
"</div>\n"
"</body>\n"
"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n"
"<script>\n"
"    $(\"#request-quote\").click((event) => {\n"
"        fetch(\"/quotes/request\", {method: \"POST\"})\n"
"        .then(res => res.text())\n"
"        .then(qid => {\n"
"            var row = $(`<h4 class='col-md-12' id='${qid}'>Quote # <i>${qid}</i> | <strong>Pending</strong></h4>`);\n"
"            $(\".quotes\").prepend(row);\n"
"        });\n"
"    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:380
#, no-wrap
msgid ""
"    var source = new EventSource(\"/quotes\");\n"
"    source.onmessage = (event) => {\n"
"      var json = JSON.parse(event.data);\n"
"      $(`#${json.id}`).html((index, html) => {\n"
"        return html.replace(\"Pending\", `\\$\\xA0${json.price}`);\n"
"      });\n"
"    };\n"
"</script>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:385
#, fuzzy
msgid "Nothing spectacular here.  When the user clicks the button, HTTP request is made to request a quote, and a pending quote is added to the list.  On each quote received over SSE, the corresponding item in the list is updated."
msgstr "ここには目を見張るものはありません。ユーザーがボタンをクリックすると、見積もりを依頼するためのHTTPリクエストが行われ、保留中の見積もりがリストに追加されます。SSEで見積書を受信するたびに、リストの対応する項目が更新されます。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:386
#, fuzzy, no-wrap
msgid "Get it running"
msgstr "稼動させる"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:390
#, fuzzy
msgid "You just need to run both applications.  In one terminal, run:"
msgstr "両方のアプリケーションを実行する必要があります。一つのターミナルで、実行します。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:394
#, no-wrap
msgid "mvn -f kafka-quickstart-producer quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:397
#, fuzzy
msgid "In another terminal, run:"
msgstr "別の端末で、実行する。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:401
#, no-wrap
msgid "mvn -f kafka-quickstart-processor quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:405
#, fuzzy
msgid "Quarkus starts a Kafka broker automatically, configures the application and shares the Kafka broker instance between different applications.  See xref:kafka-dev-services.adoc[Dev Services for Kafka] for more details."
msgstr "Quarkusは、Kafkaブローカーを自動的に起動し、アプリケーションを構成し、異なるアプリケーション間でKafkaブローカーインスタンスを共有します。詳細は、 link:kafka-dev-services.html[Dev Services for Kafka]を参照してください。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:407
#, fuzzy
msgid "Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button."
msgstr "開く `&lt;a href=\"http://localhost:8080/quotes.html\" class=\"bare\"&gt;http://localhost:8080/quotes.html&lt;/a&gt;`をブラウザで開き、ボタンをクリックして見積もりを依頼してください。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:408
#, fuzzy, no-wrap
msgid "Running in JVM or Native mode"
msgstr "JVMまたはNativeモードでの実行"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:412
#, fuzzy
msgid "When not running in dev or test mode, you will need to start your Kafka broker.  You can follow the instructions from the https://kafka.apache.org/quickstart[Apache Kafka website] or create a `docker-compose.yaml` file with the following content:"
msgstr "開発モードやテストモードで実行していないときは、Kafkaブローカーを起動する必要があります。 link:https://kafka.apache.org/quickstart[Apache Kafkaのウェブサイト]の指示に従うか、以下の内容の `docker-compose.yaml` ファイルを作成してください。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:416
#, no-wrap
msgid "version: '3.5'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:418
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:431
#, no-wrap
msgid ""
"  zookeeper:\n"
"    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0\n"
"    command: [\n"
"      \"sh\", \"-c\",\n"
"      \"bin/zookeeper-server-start.sh config/zookeeper.properties\"\n"
"    ]\n"
"    ports:\n"
"      - \"2181:2181\"\n"
"    environment:\n"
"      LOG_DIR: /tmp/logs\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:449
#, no-wrap
msgid ""
"  kafka:\n"
"    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0\n"
"    command: [\n"
"      \"sh\", \"-c\",\n"
"      \"bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}\"\n"
"    ]\n"
"    depends_on:\n"
"      - zookeeper\n"
"    ports:\n"
"      - \"9092:9092\"\n"
"    environment:\n"
"      LOG_DIR: \"/tmp/logs\"\n"
"      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092\n"
"      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n"
"      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:463
#, no-wrap
msgid ""
"  producer:\n"
"    image: quarkus-quickstarts/kafka-quickstart-producer:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: producer\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    depends_on:\n"
"      - kafka\n"
"    environment:\n"
"      KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n"
"    ports:\n"
"      - \"8080:8080\"\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:475
#, no-wrap
msgid ""
"  processor:\n"
"    image: quarkus-quickstarts/kafka-quickstart-processor:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: processor\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    depends_on:\n"
"      - kafka\n"
"    environment:\n"
"      KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:479
#, no-wrap
msgid ""
"networks:\n"
"  kafka-quickstart-network:\n"
"    name: kafkaquickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:482
#, fuzzy
msgid "Make sure you first build both applications in JVM mode with:"
msgstr "まず、両方のアプリケーションをJVMモードでビルドしてください。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:487
#, no-wrap
msgid ""
"mvn -f kafka-quickstart-producer package\n"
"mvn -f kafka-quickstart-processor package\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:490
#, fuzzy
msgid "Once packaged, run `docker-compose up`."
msgstr "パッケージ化されたら、 `docker-compose up` を実行します。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:492
#, fuzzy
msgid "This is a development cluster, do not use in production."
msgstr "これは開発用のクラスターで、本番では使用しないでください。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:495
#, fuzzy
msgid "You can also build and run our applications as native executables.  First, compile both applications as native:"
msgstr "アプリケーションをネイティブな実行ファイルとしてビルドして実行することもできます。まず、両方のアプリケーションをネイティブとしてコンパイルします。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:500
#, no-wrap
msgid ""
"mvn -f kafka-quickstart-producer package -Dnative -Dquarkus.native.container-build=true\n"
"mvn -f kafka-quickstart-processor package -Dnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:503
#, fuzzy
msgid "Run the system with:"
msgstr "でシステムを実行します。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:508
#, no-wrap
msgid ""
"export QUARKUS_MODE=native\n"
"docker-compose up --build\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:510
#, fuzzy, no-wrap
msgid "Going further"
msgstr "さらに進む"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:514
#, fuzzy
msgid "This guide has shown how you can interact with Kafka using Quarkus.  It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications."
msgstr "このガイドでは、Quarkusを使ってKafkaとやり取りする方法を紹介しました。 link:https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging]を利用して、データストリーミングアプリケーションを構築しています。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:516
#, fuzzy
msgid "For the exhaustive list of features and configuration options, check the xref:kafka.adoc[Reference guide for Apache Kafka Extension]."
msgstr "機能や設定オプションの詳細については、 link:kafka.html[Apache Kafka Extensionのリファレンスガイド]をご覧ください。"

#. type: delimited block =
#: upstream/_guides/kafka-reactive-getting-started.adoc:522
#, fuzzy
msgid "In this guide we explore Smallrye Reactive Messaging framework to interact with Apache Kafka.  Quarkus extension for Kafka also allows xref:kafka.adoc#kafka-bare-clients[using Kafka clients directly]."
msgstr "このガイドでは、Apache Kafkaと連携するSmallrye Reactive Messagingフレームワークを紹介します。また、Quarkus extension for Kafkaでは、 link:kafka.html#kafka-bare-clients[Kafkaクライアントを直接使用する]ことができます。"

#, fuzzy
#~ msgid "We need to instruct Quarkus to map the `quote-requests` channel to a Kafka topic.  In the `src/main/resources/application.properties` file in the _producer_ project, add:"
#~ msgstr "`quote-requests` チャンネルをKafkaトピックにマッピングするようQuarkusに指示する必要があります。 _producer_プロジェクトの `src/main/resources/application.properties` ファイルに、以下を追加します。"

#, fuzzy
#~ msgid "Also, for the outgoing configuration we specified the serializer because we are sending a `Quote` object as the message payload."
#~ msgstr "また、送信設定では、メッセージのペイロードとして `Quote` オブジェクトを送信するため、シリアライザーを指定しています。"

#, fuzzy
#~ msgid "Quarkus provides default implementations for Kafka serializer/deserializer pairs using Jackson `ObjectMapper`.  `ObjectMapperSerializer` can be used to serialize all objects via Jackson."
#~ msgstr "Quarkusは、Jacksonを使用したKafkaシリアライザー／デシリアライザーペアのデフォルト実装を提供しています。 `ObjectMapper` `ObjectMapperSerializer` は、Jackson経由ですべてのオブジェクトをシリアライズするために使用できます。"

#, fuzzy
#~ msgid "Again we need to configure the incoming `quotes` channel inside _producer_ project.  Add the following inside `application.properties` file:"
#~ msgstr "再度、 _producer_プロジェクト内で `quotes` の受信チャンネルを設定する必要があります。 `application.properties` ファイル内に以下を追加します。"

#, fuzzy
#~ msgid "JSON serialization via Jackson"
#~ msgstr "JacksonによるJSONのシリアライズ"

#, fuzzy
#~ msgid "Finally, we will configure JSON serialization for messages using Jackson.  Previously, we've seen the usage of `ObjectMapperSerializer` to serialize objects via Jackson.  For the corresponding deserializer class, we need to create a subclass of `ObjectMapperDeserializer`."
#~ msgstr "最後に、Jacksonを使ってメッセージのJSONシリアライズを設定します。前回、Jacksonでオブジェクトをシリアライズするために `ObjectMapperSerializer` を使用したことを紹介しました。これに対応するデシリアライザークラスは、 `ObjectMapperDeserializer` のサブクラスを作成する必要があります。"

#, fuzzy
#~ msgid "So, let's create it inside _producer_ project on `src/main/java/org/acme/kafka/model/QuoteDeserializer.java`"
#~ msgstr "では、 _プロデューサー・_プロジェクトの中で、次のように作成してみましょう。 `src/main/java/org/acme/kafka/model/QuoteDeserializer.java`"

#, fuzzy
#~ msgid "No need to add any configuration for this inside `application.properties` file.  Quarkus will automatically detect this deserializer."
#~ msgstr "`application.properties` ファイル内にこのための設定を追加する必要はありません。Quarkusはこのデシリアライザを自動的に検出します。"
