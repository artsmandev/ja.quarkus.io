# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2023-08-13 08:15+0000\n"
"PO-Revision-Date: 2023-08-16 23:39+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#. type: Title =
#: upstream/_guides/security-jpa.adoc:2
#, no-wrap
msgid "Quarkus Security with Jakarta Persistence"
msgstr "Quarkus SecurityとJakarta Persistence"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:7
msgid "Quarkus provides a Jakarta Persistence (formerly known as JPA) identity provider, similar to the xref:security-jdbc.adoc[JDBC identity provider], suitable for use with the xref:security-basic-authentication.adoc[Basic] and xref:security-authentication-mechanisms.adoc#form-auth[Form-based] Quarkus Security mechanisms, which require a combination of username and password credentials."
msgstr "Quarkusには、 xref:security-jdbc.adoc[JDBC アイデンティティープロバイダー] に似たJakarta Persistence（旧称JPA）アイデンティティープロバイダーがあり、ユーザー名とパスワードの組み合わせが必要な xref:security-basic-authentication-concept.adoc[Basic] および xref:security-authentication-mechanisms-concept.adoc#form-auth[フォームベース] のQuarkusセキュリティメカニズムで使用するのに適しています。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:9
msgid "The Jakarta Persistence `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
msgstr "Jakarta Persistence `IdentityProvider` は、 `SecurityIdentity` インスタンスを作成します。このインスタンスは、ユーザー認証時に使用され、アクセス要求の検証と認可を行い、Quarkusアプリケーションを保護します。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:11
msgid "For an example of practical use of Basic authentication and Jakarta Persistence, see the xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence] tutorial."
msgstr "Basic認証とJakarta Persistenceの実用的な使用例については、 xref:security-basic-authentication-tutorial.adoc[Basic認証とJakarta Persistenceを使用したQuarkusアプリケーションの保護] チュートリアルを参照してください。"

#. type: Title ==
#: upstream/_guides/security-jpa.adoc:13
#, no-wrap
msgid "Jakarta Persistence entity specification"
msgstr "Jakarta Persistenceエンティティ仕様"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:16
msgid "Quarkus security offers a Jakarta Persistence integration to collect usernames, passwords, and roles, and store them into Jakarta Persistence database entities."
msgstr "Quarkus securityには、ユーザー名、パスワード、ロールを収集し、Jakarta Persistenceデータベースエンティティに保存するためのJakarta Persistence統合があります。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:18
msgid "The following Jakarta Persistence entity specification demonstrates how users' information needs to be stored in a Jakarta Persistence entity and properly mapped so that Quarkus can retrieve this information from a database."
msgstr "次のJakarta Persistenceエンティティの定義は、Quarkusがデータベースからこの情報を取得できるように、ユーザーの情報をJakarta Persistenceエンティティに格納し、適切にマッピングする必要があることを示すものです。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:21
msgid "The `@UserDefinition` annotation must be present on a Jakarta Persistence entity, regardless of whether xref:hibernate-orm-panache.adoc[simplified Hibernate ORM with Panache] is used or not."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:23
msgid "The `@Username` and `@Password` field types are always `String`."
msgstr "`@Username` と `@Password` のフィールドの型は常に `String` です。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:25
msgid "The `@Roles` field must either be `String`, `Collection<String>`, or a `Collection<X>`, where `X` is an entity class with a single `String` field annotated as `@RolesValue`."
msgstr "`@Roles` フィールドは、 `String` 、 `Collection<String>` 、または `Collection<X>` のいずれかである必要があります。 `X` は、 `@RolesValue` としてアノテーションされた単一の `String` フィールドを持つエンティティクラスです。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:27
msgid "Each `String` role element type is parsed as a comma-separated list of roles."
msgstr "各 `String` ロール要素タイプは、ロールのカンマ区切りリストとしてパースされます。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:29
msgid "The following example demonstrates storing security information by adding annotations to the `user` entity:"
msgstr "次の例では、 `user` エンティティにアノテーションを追加して、セキュリティ情報の保存をデモします:"

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:33
#, no-wrap
msgid "package org.acme.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:36
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.Table;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:43
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:54
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:69
#, no-wrap
msgid ""
"    /**\n"
"     * Adds a new user to the database\n"
"     * @param username the username\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:73
msgid "The `security-jpa` extension initializes only if a single entity is annotated with `@UserDefinition`."
msgstr "`security-jpa` エクステンションは、単一のエンティティが `@UserDefinition` でアノテーションされている場合にのみ、初期化されます。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:75
msgid "The `@UserDefinition` annotation must be present on a single entity, either a regular Hibernate ORM entity or a Hibernate ORM with a Panache entity."
msgstr "`@UserDefinition` アノテーションは、通常の Hibernate ORM エンティティまたは Hibernate ORM with a Panache エンティティのいずれか、単一のエンティティのみに存在する必要があります。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:76
msgid "Indicates the field used for the username."
msgstr "ユーザー名に使用するフィールドを示します。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:78
msgid "Indicates the field used for the password.  By default, `security-jpa` uses bcrypt-hashed passwords, or you can configure plain text or custom passwords instead."
msgstr "パスワードに使用するフィールドを示します。デフォルトでは、 `security-jpa` は bcryptでハッシュ化されたパスワードを使用します。代わりにプレーンテキストまたはカスタムパスワードを設定することもできます。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:79
msgid "This indicates the comma-separated list of roles added to the target principal representation attributes."
msgstr "ここでは対象のプリンシパル表現属性に追加されたロールのコンマ区切りリストを示します。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:80
msgid "This method allows you to add users while hashing passwords with the proper `bcrypt` hash."
msgstr "このメソッドでは、パスワードを適切な `bcrypt` ハッシュでハッシュ化しながらユーザーを追加することができます。"

#. type: Title ==
#: upstream/_guides/security-jpa.adoc:82
#, no-wrap
msgid "Jakarta Persistence entity as storage of roles"
msgstr "ロールの保存先としてのjakarta Persistenceエンティティ"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:85
msgid "Use the following example to store roles inside another Jakarta Persistence entity:"
msgstr "以下の例を使用して、ロールを別のJakarta Persistenceエンティティ内に格納します:"

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:94
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class User extends PanacheEntity {\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:97
#, no-wrap
msgid ""
"    @Password\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:102
#, no-wrap
msgid ""
"    @ManyToMany\n"
"    @Roles\n"
"    public List<Role> roles = new ArrayList<>();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:105
#, no-wrap
msgid ""
"@Entity\n"
"public class Role extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:108
#, no-wrap
msgid ""
"    @ManyToMany(mappedBy = \"roles\")\n"
"    public List<ExternalRolesUserEntity> users;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:112
#, no-wrap
msgid ""
"    @RolesValue\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-jpa.adoc:114
#, no-wrap
msgid "Password storage and hashing"
msgstr "パスワードの保存とハッシュ化"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:117
msgid "When developing applications with Quarkus, you can decide how to manage password storage and hashing. You can choose to keep the default password and hashing settings of Quarkus, or you can hash passwords manually."
msgstr "Quarkusでアプリケーションを開発する場合、パスワードのストレージとハッシュ化の管理方法を決めることができます。Quarkusのデフォルトのパスワードとハッシュの設定を維持するか、パスワードを手動でハッシュ化するかを選択できます。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:122
msgid "With the default option, passwords are stored and hashed with https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF).  While using MCF, the hashing algorithm, iteration count, and salt are stored as a part of the hashed value.  As such, we do not need dedicated columns to keep them."
msgstr "デフォルトのオプションでは、パスワードは link:https://en.wikipedia.org/wiki/Bcrypt[bcrypt] でハッシュ化され、 link:https://en.wikipedia.org/wiki/Crypt_©[Modular Crypt Format]（MCF）で保存されます。MCFを使用している場合、ハッシュアルゴリズム、反復回数、およびソルトは、ハッシュ値の一部として保存されます。そのため、これらを保持するための専用カラムは必要ありません。"

#. type: delimited block =
#: upstream/_guides/security-jpa.adoc:126
msgid "In cryptography, a salt is a name for random data used as an additional input to a one-way function that hashes data, a password, or a passphrase."
msgstr "暗号技術において、ソルトとは、データ、パスワード、パスフレーズをハッシュ化する一方向性関数への追加入力として使用されるランダムデータの名称です。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:129
msgid "For manual password hashing, create a class that implements the `CustomPasswordProvider`as shown in the example below."
msgstr "手動でパスワードをハッシュ化する場合は、以下の例のように `CustomPasswordProvider` を実装したクラスを作成します。"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:131
msgid "The following snippet shows how to set a custom password provider that uses the SHA256 hashing algorithm."
msgstr "次のスニペットは、SHA256ハッシュアルゴリズムを使用するカスタムパスワードプロバイダーを設定する方法を示しています。"

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:141
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class CustomPasswordUserEntity {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:145
#, no-wrap
msgid ""
"    @Column(name = \"username\")\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:149
#, no-wrap
msgid ""
"    @Column(name = \"password\")\n"
"    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:153
#, no-wrap
msgid ""
"    @Roles\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa.adoc:161
#, no-wrap
msgid ""
"public class CustomPasswordProvider implements PasswordProvider {\n"
"    @Override\n"
"    public Password getPassword(String pass) {\n"
"        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
"        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-jpa.adoc:167
msgid "For quick creation of a hashed password, use `String BcryptUtil.bcryptHash(String password)`, which defaults to creating a random salt and hashing in ten iterations.  This method also allows specifying the desired amount of iterations and the salt used."
msgstr "ハッシュ化されたパスワードを素早く作成するには、 `String BcryptUtil.bcryptHash(String password)` を使用します。デフォルトでは、ランダムなソルトが作成され、10回の反復でハッシュ化されます。このメソッドでは、希望する反復回数と使用するソルトを指定することも可能です。"

#. type: delimited block =
#: upstream/_guides/security-jpa.adoc:172
msgid "For applications running in a production environment, do not store passwords as plain text."
msgstr "本番環境で動作するアプリケーションでは、パスワードをプレーンテキストとして保存しないでください。"

#. type: delimited block =
#: upstream/_guides/security-jpa.adoc:174
msgid "However, it is possible to store passwords as plain text with the `@Password(PasswordType.CLEAR)` annotation when operating in a test environment."
msgstr "ただし、テスト環境で運用する場合は、 `@Password(PasswordType.CLEAR)` のアノテーションでパスワードを平文で保存することが可能です。"

#. type: Title ==
#: upstream/_guides/security-jpa.adoc:176
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:179
msgid "xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence]"
msgstr "xref:security-basic-authentication-tutorial.adoc[Basic認証とJakarta PersistenceによるQuarkusアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:180
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr "xref:security-identity-providers.adoc[アイデンティティ・プロバイダー]"

#. type: Plain text
#: upstream/_guides/security-jpa.adoc:180
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

#~ msgid "The `@UserDefinition` annotation must be present on a Jakarta Persistence entity, regardless of whether link:https://quarkus.io/guides/hibernate-orm-panache[simplified Hibernate ORM with Panache] is used or not."
#~ msgstr "`@UserDefinition` アノテーションは、 link:https://quarkus.io/guides/hibernate-orm-panache[簡略化されたHibernate ORM with Panache] が使用されているかどうかにかかわらず、Jakarta Persistenceエンティティに存在する必要があります。"

#~ msgid "Using Security with JPA"
#~ msgstr "JPAと共にSecurityを使用"

#~ msgid "This guide demonstrates how your Quarkus application can use a database to store your user identities with xref:hibernate-orm.adoc[Hibernate ORM] or xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache]."
#~ msgstr "このガイドでは、Quarkusアプリケーションでlink:hibernate-orm[Hibernate ORM]または link:hibernate-orm-panache[Hibernate ORM with Panache]と一緒にデータベースを使用してユーザーIDを保存する方法を説明します。"

#~ msgid "Prerequisites"
#~ msgstr "前提条件"

#~ msgid "Architecture"
#~ msgstr "アーキテクチャ"

#~ msgid "In this example, we build a very simple microservice which offers three endpoints:"
#~ msgstr "この例では、3つのエンドポイントを提供する非常にシンプルなマイクロサービスを構築します:"

#~ msgid "`/api/public`"
#~ msgstr "`/api/public`"

#~ msgid "`/api/users/me`"
#~ msgstr "`/api/users/me`"

#~ msgid "`/api/admin`"
#~ msgstr "`/api/admin`"

#~ msgid "The `/api/public` endpoint can be accessed anonymously.  The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.  The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `user` role can access. As a response, it returns a JSON document with details about the user."
#~ msgstr "`/api/public` エンドポイントは匿名でアクセスできます。 `/api/admin` エンドポイントは RBAC (Role-Based Access Control) で保護されており、 `admin` の役割を与えられたユーザーのみがアクセスできます。このエンドポイントでは、 `@RolesAllowed` アノテーションを使用して、アクセス制約を宣言的に強制します。 `/api/users/me` エンドポイントも RBAC (Role-Based Access Control) で保護されており、 `user` ロールで付与されたユーザーのみがアクセスできます。レスポンスとして、ユーザーに関する詳細を含むJSONドキュメントを返します。"

#~ msgid "Solution"
#~ msgstr "ソリューション"

#~ msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
#~ msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#~ msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
#~ msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#~ msgid "The solution is located in the `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory]."
#~ msgstr "ソリューションは `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[ディレクトリ] にあります。"

#~ msgid "Creating the Maven Project"
#~ msgstr "Mavenプロジェクトの作成"

#~ msgid "First, we need a new project. Create a new project with the following command:"
#~ msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します:"

#~ msgid "Don't forget to add the database connector library of choice. Here we are using PostgreSQL as identity store."
#~ msgstr "選択したデータベースコネクタライブラリを追加することを忘れないでください。ここでは、PostgreSQLをIDストアとして使用しています。"

#~ msgid "This command generates a Maven project, importing the `security-jpa` extension which allows you to map your security source to JPA entities."
#~ msgstr "このコマンドは、セキュリティー ソースを JPA エンティティーにマップできる `security-jpa` エクステンションをインポートして、Maven プロジェクトを生成します。"

#~ msgid "If you already have your Quarkus project configured, you can add the `security-jpa` extension to your project by running the following command in your project base directory:"
#~ msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `security-jpa` エクステンションを追加することができます:"

#~ msgid "This will add the following to your build file:"
#~ msgstr "これにより、ビルドファイルに以下が追加されます:"

#~ msgid "pom.xml"
#~ msgstr "pom.xml"

#~ msgid "build.gradle"
#~ msgstr "build.gradle"

#~ msgid "Writing the application"
#~ msgstr "アプリケーションの記述"

#~ msgid "Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular JAX-RS resource:"
#~ msgstr "`/api/public` エンドポイントの実装から始めましょう。以下のソースコードから分かるように、通常のJAX-RSリソースです:"

#~ msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
#~ msgstr "`/api/admin` エンドポイントのソースコードも非常にシンプルです。ここでの主な違いは、 `admin` ロールで付与されたユーザーだけがエンドポイントにアクセスできるように `@RolesAllowed` アノテーションを使用していることです:"

#~ msgid "Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `user` role.  We are using `SecurityContext` to get access to the current authenticated Principal, and we return the user's name. This information is loaded from the database."
#~ msgstr "最後に `/api/users/me` エンドポイントを考えてみましょう。下のソースコードを見ればわかるように `user` のロールを持つユーザーのみを信頼しています。現在認証されているプリンシパルへのアクセス権を得るために `SecurityContext` を使用しており、ユーザーの名前を返します。この情報はデータベースから読み込まれます。"

#~ msgid "Defining our user entity"
#~ msgstr "ユーザーエンティティーの定義"

#~ msgid "We can now describe how our security information is stored in our model by adding a few annotations to our `User` entity:"
#~ msgstr "これで、 `User` エンティティーにいくつかのアノテーションを追加することで、セキュリティー情報がモデルにどのように保存されているかを説明することができます:"

#~ msgid "The `security-jpa` extension is only initialized if there is a single entity annotated with `@UserDefinition`."
#~ msgstr "`security-jpa` エクステンションは、 `@UserDefinition` でアノテーションされた単一のエンティティーがある場合にのみ初期化されます。"

#~ msgid "This annotation must be present on a single entity. It can be a regular Hibernate ORM entity or a Hibernate ORM with Panache entity as in this example."
#~ msgstr "このアノテーションは、単一のエンティティーに存在しなければなりません。この例のように、通常のHibernate ORMエンティティーまたはHibernate ORM with Panacheエンティティーにすることができます。"

#~ msgid "This indicates the field used for the username."
#~ msgstr "これはユーザー名に使用されるフィールドを示します。"

#~ msgid "This indicates the field used for the password. This defaults to using bcrypt hashed passwords, but you can also configure it for clear text passwords or custom passwords."
#~ msgstr "これは、パスワードに使用するフィールドを示します。これはデフォルトでは bcrypt ハッシュ化されたパスワードを使用するように設定されていますが、クリアテキストパスワードやカスタムパスワード用に設定することもできます。"

#~ msgid "This indicates the comma-separated list of roles added to the target Principal representation attributes."
#~ msgstr "これは、対象のプリンシパル表現属性に追加されたロールのコンマ区切りリストを示します。"

#~ msgid "This method allows us to add users while hashing the password with the proper bcrypt hash."
#~ msgstr "この方法では、パスワードを適切なbcryptハッシュでハッシュしながらユーザーを追加することができます。"

#~ msgid "Configuring the Application"
#~ msgstr "アプリケーションの設定"

#~ msgid "The `security-jpa` extension requires at least one datasource to access to your database."
#~ msgstr "`security-jpa` エクステンションは、データベースにアクセスするために少なくとも一つのデータソースが必要です。"

#~ msgid "In our context, we are using PostgreSQL as identity store. The database schema is created by Hibernate ORM automatically on startup (change this in production), and we initialize the database with users and roles in the `Startup` class:"
#~ msgstr "今回はIDストアとしてPostgreSQLを使用しています。データベーススキーマはHibernate ORMによって起動時に自動的に作成され(本番環境ではこれを変更します)、 `Startup` クラスのユーザーとロールでデータベースを初期化します:"

#~ msgid "It is probably useless, but we kindly remind you that you must not store clear-text passwords in production environments ;-).  As a result, the `security-jpa` defaults to using bcrypt-hashed passwords."
#~ msgstr "本番環境ではクリアテキストのパスワードを保存してはいけないのでおそらく役に立たないと思います ;-)。その後、 `security-jpa` はデフォルトで bcrypt でハッシュ化されたパスワードを使用するようになりました。"

#~ msgid "Testing the Application"
#~ msgstr "アプリケーションのテスト"

#~ msgid "You can start the application in dev mode as follows:"
#~ msgstr "開発モードでアプリケーションを起動するには、次のようにします:"

#~ msgid "In the following tests we use the basic authentication mechanism, you can enable it by setting `quarkus.http.auth.basic=true` in the `application.properties` file."
#~ msgstr "以下のテストでは、基本的な認証メカニズムを使用していますが、 `application.properties` ファイルに `quarkus.http.auth.basic=true` を設定することで有効にすることができます。"

#~ msgid "The application is now protected and the identities are provided by our database.  The very first thing to check is to ensure the anonymous access works."
#~ msgstr "アプリケーションが保護され、アイデンティティがデータベースから提供されるようになりました。非常に最初に確認しなければならないことは、匿名アクセスが機能することを確認することです。"

#~ msgid "Now, let's try to hit a protected resource anonymously."
#~ msgstr "では、匿名で保護されたリソースを攻撃してみましょう。"

#~ msgid "So far so good, now let's try with an allowed user."
#~ msgstr "ここまでは順調ですが、今度は許可されたユーザーで試してみましょう。"

#~ msgid "By providing the `admin:admin` credentials, the extension authenticated the user and loaded their roles.  The `admin` user is authorized to access to the protected resources."
#~ msgstr "`admin:admin` 資格情報を提供することで、エクステンションはユーザーを認証し、そのロールをロードしました。 `admin` ユーザーは、保護されたリソースへのアクセスを許可されています。"

#~ msgid "The user `admin` should be forbidden to access a resource protected with `@RolesAllowed(\"user\")` because it doesn't have this role."
#~ msgstr "ユーザー `admin` は、この役割を持っていないので、 `@RolesAllowed(\"user\")` で保護されたリソースへのアクセスを禁止する必要があります。"

#~ msgid "Finally, using the user `user` works and the security context contains the principal details (username for instance)."
#~ msgstr "最後に、ユーザー `user` を使用すると動作し、セキュリティーコンテキストには主要な詳細(例えばユーザー名)が含まれています。"

#~ msgid "Supported model types"
#~ msgstr "サポートされているモデルの種類"

#~ msgid "The `@UserDefinition` class must be a JPA entity (with Panache or not)."
#~ msgstr "`@UserDefinition` クラスは JPA エンティティーである必要があります(Panache を使用しているかどうかは問いません)。"

#~ msgid "The `@Username` and `@Password` field types must be of type `String`."
#~ msgstr "`@Username` と `@Password` フィールドの型は `String` でなければなりません。"

#~ msgid "The `@Roles` field must either be of type `String` or `Collection<String>` or alternately a `Collection<X>` where `X` is an entity class with one `String` field annotated with the `@RolesValue` annotation."
#~ msgstr "`@Roles` フィールドは `String` か `Collection<String>` のいずれかのタイプであるか、または `Collection<X>` である必要があります。 `X` はエンティティークラスで、 `@RolesValue` アノテーションが付与された `String` フィールドが 1 つあります。"

#~ msgid "Each `String` role element type will be parsed as a comma-separated list of roles."
#~ msgstr "各 `String` role 要素の型は、カンマで区切られたロールのリストとして解析されます。"

#~ msgid "Storing roles in another entity"
#~ msgstr "別のエンティティーにロールを格納する"

#~ msgid "You can also store roles in another entity:"
#~ msgstr "また、別のエンティティーにロールを格納することもできます。"

#~ msgid "By default, we consider passwords to be stored hashed with https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF)."
#~ msgstr "デフォルトでは、パスワードは MCF ( link:https://en.wikipedia.org/wiki/Crypt_©[Modular Crypt Format]) の下で link:https://en.wikipedia.org/wiki/Bcrypt[bcrypt]でハッシュ化されて保存されると考えています。"

#~ msgid "When you need to create such a hashed password we provide the convenient `String BcryptUtil.bcryptHash(String password)` function, which defaults to creating a random salt and hashing in 10 iterations (though you can specify the iterations and salt too)."
#~ msgstr "このようなハッシュ化されたパスワードを作成する必要がある場合は、便利な `String BcryptUtil.bcryptHash(String password)` 関数を用意しています。デフォルトでは、ランダムなソルトを作成して 10 回の繰り返しでハッシュ化します (繰り返しとソルトも指定できます)。"

#~ msgid "with MCF you don't need dedicated columns to store the hashing algorithm, the iterations count or the salt because they're all stored in the hashed value."
#~ msgstr "MCF を使うと、ハッシュアルゴリズムや反復回数、 ソルトを格納するための専用のカラムは必要ありません。"

#~ msgid "You also have the possibility to store password using different hashing algorithm `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)`:"
#~ msgstr "また、異なるハッシュアルゴリズム（ `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)` ）を使用してパスワードを保存することもできます。"

#~ msgid "WARN: you can also store passwords in clear text with `@Password(PasswordType.CLEAR)` but we strongly recommend against it in production."
#~ msgstr "警告: `@Password(PasswordType.CLEAR)` を使ってパスワードをクリアテキストで保存することもできますが、本番では絶対にしないことを強くお勧めします。"

#~ msgid "xref:security.adoc[Quarkus Security]"
#~ msgstr "xref:security.adoc[Quarkus Security]"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "less than 15 minutes"
#~ msgstr "15 分未満"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME` が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"
