# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-11-24 10:04+0000\n"
"PO-Revision-Date: 2021-04-25 23:37+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-web-authentication.adoc:6
#, fuzzy, no-wrap
#| msgid "Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow."
msgid "Using OpenID Connect (OIDC) to Protect Web Applications using Authorization Code Flow."
msgstr "認可コードフローのOpenID Connectを使用してWebアプリケーションを保護"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:12
#, fuzzy
#| msgid "This guide demonstrates how to use Quarkus OpenID Connect Extension to protect your Quarkus HTTP endpoints using OpenId Connect Authorization Code Flow supported by OpenId Connect compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]."
msgid "This guide demonstrates how to use Quarkus OpenID Connect (OIDC) Extension to protect your Quarkus HTTP endpoints using OpenId Connect Authorization Code Flow supported by OpenId Connect compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]."
msgstr "このガイドでは、Quarkus OpenID Connect Extensionを使用して、 link:https://www.keycloak.org/about.html[Keycloak] などのOpenId Connect準拠の認証サーバーでサポートされているOpenId Connect 認可コードフローを使用してQuarkus HTTPエンドポイントを保護する方法を説明します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:14
msgid "The extension allows to easily authenticate the users of your web application by redirecting them to the OpenID Connect Provider (e.g.: Keycloak) to login and, once the authentication is complete, return them back with the code confirming the successful authentication. The extension will request ID and access tokens from the OpenID Connect Provider using an authorization code grant and verify these tokens in order to authorize an access to the application."
msgstr "このエクステンションは、OpenID Connect Provider (例: Keycloak) にリダイレクトしてログインさせ、認証が完了したら、認証に成功したことを確認するコードを使って、ウェブアプリケーションのユーザーを簡単に認証することができます。エクステンションは、認可コードグラントを使用して OpenID Connect Provider から ID とアクセストークンを要求し、アプリケーションへのアクセスを承認するためにこれらのトークンを検証します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:16
msgid "Please read the link:security-openid-connect[Using OpenID Connect to Protect Service Applications] guide if you need to protect your applications using Bearer Token Authorization."
msgstr "ベアラートークン認証を使用してアプリケーションを保護する必要がある場合は、 link:security-openid-connect[Using OpenID Connect to Protect Service Applications] ガイドをお読みください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:18
msgid "Please read the link:security-openid-connect-multitenancy[Using OpenID Connect Multi-Tenancy] guide how to support multiple tenants."
msgstr "マルチテナントのサポート方法については、 link:security-openid-connect-multitenancy[Using OpenID Connect Multi-Tenancy] ガイドをお読みください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:19
#, no-wrap
msgid "Quickstart"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:21
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:24
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:26
msgid "less than 15 minutes"
msgstr "15分未満"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:27
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:28
#, fuzzy
#| msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:29
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:30
msgid "Docker"
msgstr "Docker"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:31
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:34
msgid "In this example, we build a very simple web application with a single page:"
msgstr "この例では、1ページの非常にシンプルなWebアプリケーションを構築しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:36
msgid "`/index.html`"
msgstr "`/index.html`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:38
msgid "This page is protected and can only be accessed by authenticated users."
msgstr "このページは保護されており、認証されたユーザーのみがアクセスできます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:39
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:43
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:45
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:47
msgid "The solution is located in the `security-openid-connect-web-authentication-quickstart` {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart[directory]."
msgstr "ソリューションは `security-openid-connect-web-authentication-quickstart` {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart[ディレクトリ] にあります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:48
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:51
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:60
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-openid-connect-web-authentication-quickstart \\\n"
"    -Dextensions=\"resteasy,oidc\" \\\n"
"    -DnoExamples\n"
"cd security-openid-connect-web-authentication-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:64
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `oidc` エクステンションを追加することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:68
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"oidc\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:71
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:78
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:80
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:83
msgid "Let's write a simple JAX-RS resource which has all the tokens returned in the authorization code grant response injected:"
msgstr "認可コードグラントのレスポンスで返されたすべてのトークンが注入されたシンプルなJAX-RSリソースを書いてみましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:87
#, no-wrap
msgid "package org.acme.security.openid.connect.web.authentication;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:91
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:93
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:96
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.oidc.RefreshToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:99
#, no-wrap
msgid ""
"@Path(\"/tokens\")\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:106
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:112
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Access Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:118
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Refresh Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    RefreshToken refreshToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:130
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the tokens available to the application. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose these tokens in a real application.\n"
"     *\n"
"     * @return a map containing the tokens available to the application\n"
"     */\n"
"    @GET\n"
"    public String getTokens() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\")\n"
"                .append(\"<ul>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:132
#, no-wrap
msgid "        Object userName = this.idToken.getClaim(\"preferred_username\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:136
#, no-wrap
msgid ""
"        if (userName != null) {\n"
"            response.append(\"<li>username: \").append(userName.toString()).append(\"</li>\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:138
#, no-wrap
msgid "        Object scopes = this.accessToken.getClaim(\"scope\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:142
#, no-wrap
msgid ""
"        if (scopes != null) {\n"
"            response.append(\"<li>scopes: \").append(scopes.toString()).append(\"</li>\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:144
#, no-wrap
msgid "        response.append(\"<li>refresh_token: \").append(refreshToken.getToken() != null).append(\"</li>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:148
#, no-wrap
msgid ""
"        return response.append(\"</ul>\").append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:151
msgid "This endpoint has ID, access and refresh tokens injected. It returns a `preferred_username` claim from the ID token, a `scope` claim from the access token and also a refresh token availability status."
msgstr "このエンドポイントには、ID、アクセス、およびリフレッシュ トークンが注入されています。ID トークンから `preferred_username` クレーム、アクセス トークンから `scope` クレーム、およびリフレッシュ トークンの可用性ステータスを返します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:153
msgid "Note that you do not have to inject the tokens - it is only required if the endpoint needs to use the ID token to interact with the currently authenticated user or use the access token to access a downstream service on behalf of this user."
msgstr "基本的にトークンを注入する必要はありません。エンドポイントが ID トークンを使用して現在認証されているユーザーとやりとりする必要がある場合や、アクセス・トークンを使用してこのユーザーに代わってダウンストリーム・サービスにアクセスする必要がある場合にのみ必要となります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:155
msgid "Please see <<access_id_and_access_tokens,Access ID and Access Tokens>> section below for more information."
msgstr "詳しくは下記の link:#access_id_and_access_tokens[アクセスID・アクセストークン] の項をご覧ください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:156
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:159
msgid "The OpenID Connect extension allows you to define the configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr "OpenID Connect エクステンションを使用すると、src/main/resources` ディレクトリーにあるはずの `application.properties` ファイルを使用して設定を定義することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:167
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:170
msgid "This is the simplest configuration you can have when enabling authentication to your application."
msgstr "これは、アプリケーションへの認証を有効にする際に最もシンプルな設定です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:172
msgid "The `quarkus.oidc.client-id` property references the `client_id` issued by the OpenID Connect Provider and, in this case, the application is a public client (no client secret is defined)."
msgstr "`quarkus.oidc.client-id` プロパティーは OpenID Connect Provider が発行した `client_id` を参照します。この場合、アプリケーションはパブリッククライアントです(クライアントシークレットは定義されていません)。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:174
msgid "The `quarkus.oidc.application-type` property is set to `web-app` in order to tell Quarkus that you want to enable the OpenID Connect Authorization Code Flow, so that your users are redirected to the OpenID Connect Provider to authenticate."
msgstr "OpenID Connect 認可コードフローを有効にしたいことをQuarkusに伝えるために、 `quarkus.oidc.application-type` プロパティーは、 `web-app` に設定します。これにより、ユーザーが認証のためにOpenID Connect Providerにリダイレクトされます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:177
#, fuzzy
msgid "For last, the `quarkus.http.auth.permission.authenticated` permission is set to tell Quarkus about the paths you want to protect. In this case, all paths are being protected by a policy that ensures that only `authenticated` users are allowed to access. For more details check link:security-authorization[Security Authorization Guide]."
msgstr "最後に、保護したいパスをQuarkusに伝えるために、 `quarkus.http.auth.permission.authenticated` のパーミッションを設定します。この場合、すべてのパスは、 `authenticated` ユーザーのみがアクセスを許可されるようにするポリシーによって保護されます。詳細については、 link:security-authorization[セキュリティー認証ガイド] を確認してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:178
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloakサーバーの起動と設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:181
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak Serverを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:185
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak version}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:188
msgid "You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth]."
msgstr "Keycloakサーバーには、 link:http://localhost:8180/auth[localhost:8180/auth] でアクセスできるはずです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:190
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:192
msgid "Import the {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "新しいレルムを作成するには、{quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart/config/quarkus-realm.json[realm構成ファイル]をインポートします。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムの作成] 方法についてのKeycloakのドキュメントを参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:193
#, no-wrap
msgid "Running the Application in Dev and JVM modes"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:196
#, fuzzy
#| msgid "To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`."
msgid "To run the application in a dev mode, use `./mvnw clean compile quarkus:dev`."
msgstr "マイクロサービスをdevモードで実行するには、 `./mvnw clean compile quarkus:dev` を使用します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:198
#, fuzzy
#| msgid "When you're done playing with \"dev-mode\" you can run it as a standard Java application."
msgid "When you're done playing with the `dev` mode you can run it as a standard Java application."
msgstr "「開発モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:200
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:204
#, no-wrap
msgid "./mvnw package\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:207
msgid "Then run it:"
msgstr "それから以下で実行してください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:211
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:213
#, fuzzy, no-wrap
#| msgid "Running in Native Mode"
msgid "Running the Application in Native Mode"
msgstr "ネイティブモードでの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:216
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。修正は必要ありません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:220
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:223
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:227
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr "./mvnw package -Pnative\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:230
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを一杯飲んだら、このバイナリーを直接実行出来るようになります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:234
#, no-wrap
msgid "./target/security-openid-connect-web-authentication-quickstart-runner\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:236
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:239
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "テストするには、ブラウザを開いて以下のURLにアクセスする必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:241
msgid "http://localhost:8080[http://localhost:8080]"
msgstr "link:http://localhost:8080[http://localhost:8080]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:243
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate."
msgstr "すべてが期待通りに動作している場合は、認証のためにKeycloakサーバーにリダイレクトされるはずです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:245
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "アプリケーションを認証するためには、Keycloakのログインページで以下の認証情報を入力する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:247
msgid "Username: *alice*"
msgstr "Username: *alice*"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:248
msgid "Password: *alice*"
msgstr "Password: *alice*"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:250
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "`Login` ボタンをクリックすると、アプリケーションにリダイレクトされます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:252
msgid "Please also see the <<integration-testing-keycloak-devservices, Dev Services for Keycloak>> section below about writing the integration tests which depend on `Dev Services for Keycloak`."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:253
#, fuzzy, no-wrap
#| msgid "References"
msgid "Reference Guide"
msgstr "参照"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:256
#, no-wrap
msgid "Accessing ID and Access Tokens"
msgstr "IDとアクセストークンへのアクセス"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:259
#, fuzzy
msgid "OIDC Code Authentication Mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token and Refresh Token."
msgstr "OIDCコード認証機構は、認証コードの流れの中で3つのトークンを取得します。 link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken] 、Access Token、Refresh Tokenです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:262
#, fuzzy
msgid "ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.  One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr "ID Token は常に JWT トークンであり、JWT クレームでユーザー認証を表現するために使用される。ID Token の主張にアクセスするには、 `JsonWebToken` に `IdToken` の修飾子を付ける。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:269
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:273
#: upstream/_guides/security-openid-connect-web-authentication.adoc:297
#, no-wrap
msgid ""
"@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:277
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:283
#, no-wrap
msgid ""
"    @GET\n"
"    public String getUserName() {\n"
"        return idToken.getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:286
#, fuzzy
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged in user. The raw access token can be accessed as follows:"
msgstr "アクセストークンは通常、OIDC `web-app` アプリケーションが現在ログインしているユーザーに代わって他のエンドポイントにアクセスするために使用されます。生のアクセストークンは、以下のようにアクセスすることができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:293
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.AccessTokenCredential;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:300
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:304
#, no-wrap
msgid ""
"    // or\n"
"    // @Inject\n"
"    // AccessTokenCredential accessTokenCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:310
#, no-wrap
msgid ""
"    @GET\n"
"    public String getReservationOnBehalfOfUser() {\n"
"        String rawAccessToken = accessToken.getRawToken();\n"
"        //or\n"
"        //String rawAccessToken = accessTokenCredential.getToken();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:315
#, no-wrap
msgid ""
"        // Use the raw access token to access a remote endpoint\n"
"        return getReservationfromRemoteEndpoint(rawAccesstoken);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:318
#, fuzzy
msgid "Note that `AccessTokenCredential` will have to be used if the Access Token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to `JsonWebToken`."
msgstr "Quarkus `web-app` アプリケーションに発行されたアクセストークンが不透明(バイナリー)で、 `JsonWebToken` に解析できない場合は、 `AccessTokenCredential` を使用する必要があることに注意してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:320
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "`JsonWebToken` と `AccessTokenCredential` のインジェクションは、 `@RequestScoped` と `@ApplicationScoped` の両方のコンテキストでサポートされています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:322
msgid "RefreshToken is only used to refresh the current ID and access tokens as part of its link:#session_management[session management] process."
msgstr "RefreshTokenは、その link:#session_management[セッション管理] プロセスの一部として、現在のIDとアクセストークンをリフレッシュするためにのみ使用されます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:324
#, no-wrap
msgid "User Info"
msgstr "ユーザー情報"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:327
#, fuzzy
#| msgid "If IdToken does not provide enough information about the currently authenticated user then you can set a `quarkus.oidc.user-info-required=true` property for a https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC userinfo endpoint to be requested."
msgid "If IdToken does not provide enough information about the currently authenticated user then you can set a `quarkus.oidc.authentication.user-info-required=true` property for a https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC userinfo endpoint to be requested."
msgstr "IdTokenが現在認証されているユーザーに関する十分な情報を提供しない場合は、`quarkus.oidc.user-info-required=true` プロパティーを設定することでOIDCのuserinfoエンドポイントから link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSONオブジェクトを要求することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:329
#, fuzzy
msgid "A request will be sent to the OpenId Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "リクエストが OpenId Provider UserInfo エンドポイントに送信され、認証コード付与レスポンスで返されたアクセストークンを使用して `io.quarkus.oidc.UserInfo` (単純な `javax.json.JsonObject` ラッパー)オブジェクトが作成されます。 `io.quarkus.oidc.UserInfo` は、SecurityIdentity `userinfo` 属性として注入またはアクセスできます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:331
#, no-wrap
msgid "Configuration Metadata"
msgstr "設定メタデータ"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:334
#, fuzzy
#| msgid "The discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenId Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenId Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "発見された link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenId Connect Configuration Metadata]は `io.quarkus.oidc.OidcConfigurationMetadata` で表され、 `SecurityIdentity` `configuration-metadata` 属性として注入またはアクセスすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:336
#, fuzzy
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "エンドポイントが公開されている場合は、デフォルトのテナントの `OidcConfigurationMetadata` が注入されます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:338
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr "トークンクレームと SecurityIdentity のロール"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:341
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the link:security-openid-connect#token-claims-and-securityidentity-roles[bearer tokens] with the only difference being is that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr "検証済みトークンからSecurityIdentityのロールにロールをマッピングする方法は、 link:security-openid-connect#token-claims-and-securityidentity-roles[ベアラートークン] の場合と同じですが、唯一の違いは、 link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID] トークンがデフォルトでロールのソースとして使用されるということです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:343
msgid "Note if you use Keycloak then you should set a Microprofile JWT client scope for ID token to contain a `groups` claim, please see the https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide] for more information."
msgstr "Keycloakを使用する場合は、IDトークン用のMicroprofile JWTクライアントスコープに `groups` クレームを含めるように設定する必要があることに注意してください。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloakサーバー管理ガイド] を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:345
msgid "If only the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr "アクセストークンのみがロールを含み、このアクセストークンが下流のエンドポイントに伝播されることを意図していない場合は、 `quarkus.oidc.roles.source=accesstoken` をセットします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:347
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "UserInfoがロールのソースである場合は、 `quarkus.oidc.authentication.user-info-required=true` と `quarkus.oidc.roles.source=userinfo` をセットし、必要に応じて `quarkus.oidc.roles.role-claim-path` を設定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:349
msgid "Additionally a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented link:security#security-identity-customization[here]."
msgstr "さらに、カスタム `SecurityIdentityAugmentor` を使用して、 link:security#security-identity-customization[ここ] で文書化されているようにロールを追加することもできます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:351
#, fuzzy, no-wrap
msgid "Token Verification And Introspection"
msgstr "トークンの検証とイントロスペクション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:354
#, fuzzy
#| msgid "Please see link:security-openid-connect-client#token-propagation[Token Propagation] section about the Authorization Code Flow access token propagation to the downstream services."
msgid "Please see link:security-openid-connect#token-verification-introspection for details about how the tokens are verified and introspected."
msgstr "下流サービスへの認可コードフローアクセストークンの伝播については、 link:security-openid-connect-client#token-propagation[トークン伝播] の項を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:356
#, fuzzy
msgid "Note that in case of `web-app` applications only `IdToken` is verified by default since the access token is not used by default to access the current Quarkus `web-app` endpoint and instead meant to be propagated to the services expecting this access token, for example, to the OpenId Connect Provider's UserInfo endpoint, etc. However if you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr "`web-app` アプリケーションの場合、アクセストークンは現在のQuarkus `web-app` エンドポイントにアクセスするためにはデフォルトでは使用されず、OpenId Connect ProviderのUserInfoエンドポイントなど、このアクセストークンを期待するサービスに伝搬されることになっているため、デフォルトでは `IdToken` のみが検証されることに注意してください。ただし、アクセストークンに、現在のQuarkusエンドポイント( `quarkus.oidc.roles.source=accesstoken`)にアクセスするために必要なロールが含まれていることを期待する場合は、それも検証されます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:358
#, fuzzy, no-wrap
msgid "Token Introspection and UserInfo Cache"
msgstr "トークンのイントロスペクションとUserInfo Cache"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:361
#, fuzzy
msgid "Code flow access tokens are not introspected unless they are expected to be the source of roles but will be used to get `UserInfo`. So there will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr "コードフローアクセストークンは、ロールのソースとなることが予想されない限りイントロスペクションされませんが、 `UserInfo` を取得するために使用されます。そのため、トークンのイントロスペクションおよび/または `UserInfo` が必要な場合、コードフローアクセストークンを使用した1つまたは2つのリモートコールがあります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:363
#, fuzzy
#| msgid "Please see link:security-openid-connect-client#token-propagation[Token Propagation] section about the Authorization Code Flow access token propagation to the downstream services."
msgid "Please see link:security-openid-connect#token-introspection-userinfo-cache for more information about using a default token cache or registering a custom cache implementation."
msgstr "下流サービスへの認可コードフローアクセストークンの伝播については、 link:security-openid-connect-client#token-propagation[トークン伝播] の項を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:365
#, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr "JSON Web Tokenクレーム検証"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:369
#, fuzzy
msgid "Please see link:security-openid-connect#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.  It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr "`iss` （発行者）の主張を含む主張の検証については、 link:security-openid-connect#jwt-claim-verification[「JSON Web トークンの主張検証]」の項を参照してください。これはIDトークンに適用されますが、 `web-app` アプリケーションがアクセストークンの検証を要求した場合は、JWTフォーマットのアクセストークンにも適用されます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:370
#, no-wrap
msgid "Redirection"
msgstr "リダイレクト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:373
#, fuzzy
msgid "When the user is redirected to the OpenID Connect Provider to authenticate, the redirect URL includes a `redirect_uri` query parameter which indicates to the Provider where the user has to be redirected to once the authentication has been completed."
msgstr "ユーザーが認証のために OpenID Connect プロバイダにリダイレクトされる場合、リダイレクト URL には `redirect_uri` クエリパラメーターが含まれており、認証が完了した後にどこにリダイレクトするかをプロバイダに指示します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:375
#, fuzzy
msgid "Quarkus will set this parameter to the current request URL by default. For example, if the user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/1`. Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/2`, etc."
msgstr "Quarkusは、デフォルトでこのパラメーターを現在のリクエストURLに設定します。たとえば、ユーザーがQuarkusサービスのエンドポイントにアクセスしようとしている場合 `http://localhost:8080/service/1` の場合、 `redirect_uri` パラメーターは `http://localhost:8080/service/1` .同様に、リクエストURLが `http://localhost:8080/service/2` の場合、 `redirect_uri` パラメーターは `http://localhost:8080/service/2` などと、その都度、ご紹介しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:378
#, fuzzy
msgid "OpenID Connect Providers may be configured to require the `redirect_uri` parameter to have the same value (eg. `http://localhost:8080/service/callback`) for all the redirect URLs.  In such cases a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback` which will be the same regardless of the current request URL."
msgstr "OpenID Connect Providers は、すべてのリダイレクト URL に対して `redirect_uri` パラメーターに同じ値 (例えば `http://localhost:8080/service/callback` など)を必要とするように設定されている場合があります。 `redirect_uri` このような場合は、 `quarkus.oidc.authentication.redirect-path` プロパティーを設定する必要があります(例: `quarkus.oidc.authentication.redirect-path=/service/callback` )。 `http://localhost:8080/service/callback` は、現在のリクエストURLに関係なく同じになります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:380
#, fuzzy
msgid "If `quarkus.oidc.authentication.redirect-path` is set but the original request URL has to be restored after the user has been redirected back to a callback URL such as `http://localhost:8080/service/callback` then a `quarkus.oidc.authentication.restore-path-after-redirect` property has to be set to `true` which will restore the request URL such as `http://localhost:8080/service/1`, etc."
msgstr "`quarkus.oidc.authentication.redirect-path` が設定されていても、ユーザーがリダイレクトされた後に元のリクエスト URL を復元しなければならない場合は `http://localhost:8080/service/callback` のようなリクエストURLを復元する `quarkus.oidc.authentication.restore-path-after-redirect` プロパティーを `true` に設定する必要があります。 `http://localhost:8080/service/1` などと、その都度、ご紹介しています。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:382
#, no-wrap
msgid "Dealing with Cookies"
msgstr "クッキーの取り扱い"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:385
msgid "The OIDC adapter uses cookies to keep the session, code flow and post logout state."
msgstr "OIDCアダプターは、セッション、コードフロー、ログアウト後の状態を保持するためにクッキーを使用します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:387
#, fuzzy
msgid "`quarkus.oidc.authentication.cookie-path` property is used to ensure the cookies are visible especially when you access the protected resources with overlapping or different roots, for example:"
msgstr "例えば、保護されたリソースに重複してアクセスしたり、異なるルートでアクセスしたりした場合。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:389
msgid "`/index.html` and `/web-app/service`"
msgstr "`/index.html` と `/web-app/service`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:390
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr "`/web-app/service1` と `/web-app/service2`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:391
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr "`/web-app1/service` と `/web-app2/service`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:393
msgid "`quarkus.oidc.authentication.cookie-path` is set to `/` by default but can be narrowed to the more specific root path such as `/web-app`."
msgstr "`quarkus.oidc.authentication.cookie-path` は、デフォルトでは `/` に設定されていますが、 `/web-app` のように、より具体的なルートパスに絞り込むことができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:396
msgid "You can also set a `quarkus.oidc.authentication.cookie-path-header` property if the cookie path needs to be set dynamically.  For example, setting `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` means that the value of HTTP `X-Forwarded-Prefix` header will be used to set a cookie path."
msgstr "クッキーパスを動的に設定する必要がある場合は、 `quarkus.oidc.authentication.cookie-path-header` プロパティを設定することもできます。例えば、 `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` を設定すると、HTTP `X-Forwarded-Prefix` ヘッダーの値がクッキーパスを設定するために使用されることを意味します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:398
#, fuzzy
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr "`quarkus.oidc.authentication.cookie-path-header` が設定されているが、現在のリクエストで設定された HTTP ヘッダーが利用できない場合、 `quarkus.oidc.authentication.cookie-path` がチェックされます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:400
#, fuzzy
msgid "If your application is deployed across multiple domains, make sure to set a `quarkus.oidc.authentication.cookie-domain` property for the session cookie be visible to all protected Quarkus services, for example, if you have 2 services deployed at:"
msgstr "アプリケーションが複数のドメインにまたがってデプロイされている場合、保護されているすべてのQuarkusサービスに対してセッションクッキーが見えるように、 `quarkus.oidc.authentication.cookie-domain` プロパティーを設定してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:402
msgid "https://whatever.wherever.company.net/"
msgstr "https://whatever.wherever.company.net/"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:403
msgid "https://another.address.company.net/"
msgstr "https://another.address.company.net/"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:405
#, fuzzy
msgid "then the `quarkus.oidc.authentication.cookie-domain` property must be set to `company.net`."
msgstr "の場合は、 `quarkus.oidc.authentication.cookie-domain` プロパティーを `company.net` に設定する必要があります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:406
#, no-wrap
msgid "Logout"
msgstr "ログアウト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:409
msgid "By default the logout is based on the expiration time of the ID Token issued by the OpenID Connect Provider. When the ID Token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OpenID Connect Provider again to authenticate. If the session at the OpenID Connect Provider is still active, users are automatically re-authenticated without having to provide their credentials again."
msgstr "デフォルトでは、ログアウトはOpenID Connect Providerが発行したID Tokenの有効期限に基づいて行われます。IDトークンの有効期限が切れると、Quarkusエンドポイントでの現在のユーザーセッションは無効になり、ユーザーは認証のために再度OpenID Connect Providerにリダイレクトされます。OpenID Connect Providerでのセッションがまだアクティブな場合は、ユーザーは再び資格情報を提供することなく自動的に再認証されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:411
msgid "The current user session may be automatically extended by enabling a `quarkus.oidc.token.refresh-expired` property. If it is set to `true` then when the current ID Token expires a Refresh Token Grant will be used to refresh ID Token as well as Access and Refresh Tokens."
msgstr "現在のユーザーセッションは、 `quarkus.oidc.token.refresh-expired` プロパティーを有効にすることで自動的に拡張される場合があります。 `true` に設定されている場合、現在の ID トークンの有効期限が切れると、リフレッシュ・トークンの付与が使用され、ID トークンだけでなく、アクセス・トークンやリフレッシュ・トークンもリフレッシュされます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:412
#, no-wrap
msgid "User-Initiated Logout"
msgstr "ユーザー主導型ログアウト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:416
msgid "Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.  For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr "ユーザーは、 `quarkus.oidc.logout.path` プロパティーで設定されたQuarkusエンドポイントのログアウトパスにリクエストを送信することで、ログアウトを要求することができます。たとえば、エンドポイントのアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.path` が \"/logout\" に設定されている場合、ログアウト要求は `https://application.com/webapp/logout` に送信されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:418
#, fuzzy
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr "このログアウト要求は link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] を開始し、ユーザーはOpenID Connect Providerにリダイレクトしてログアウトします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:420
#, fuzzy
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr "`quarkus.oidc.logout.post-logout-path` プロパティーが設定されている場合、ログアウトが完了するとエンドポイントのポストログアウトページに戻ります。例えば、エンドポイントのアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.post-logout-path` が \"/signin\" に設定されている場合、ユーザーは `https://application.com/webapp/signin` (このURIはOpenID Connect Providerで有効な `post_logout_redirect_uri` として登録されている必要があることに注意してください)。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:422
#, fuzzy
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a JAX-RS filter."
msgstr "`quarkus.oidc.logout.post-logout-path` が設定されている場合、 `q_post_logout` クッキーが作成され、一致する `state` クエリパラメーターがログアウトのリダイレクトURIに追加され、ログアウトが完了するとOpenID Connect Providerはこの `state` を返します。Quarkus `web-app` アプリケーションでは、 `state` クエリパラメーターが `q_post_logout` クッキーの値と一致することを確認することをお勧めします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:424
#, fuzzy
msgid "Note that a cookie name will vary when using link:security-openid-connect-multitenancy[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` id, etc."
msgstr "link:security-openid-connect-multitenancy[OpenID Connect Multi-Tenancy] を使用する場合は、クッキー名が異なることに注意してください。例えば、 `tenant_1` ID を持つテナントの場合は `q_post_logout_tenant_1` という名前になります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:426
#, fuzzy
msgid "Here is an example of how to configure an RP initiated logout flow:"
msgstr "ここでは、RP主導のログアウトフローを設定する方法の例を示します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:432
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:435
#, no-wrap
msgid ""
"quarkus.oidc.tenant-logout.logout.path=/logout\n"
"quarkus.oidc.tenant-logout.logout.post-logout-path=/postlogout\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:439
#, no-wrap
msgid ""
"# Only the authenticated users can initiate a logout:\n"
"quarkus.http.auth.permission.authenticated.paths=/logout\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:443
#, no-wrap
msgid ""
"# Logged out users should be returned to the /welcome.html site which will offer an option to re-login:\n"
"quarkus.http.auth.permission.authenticated.paths=/welcome.html\n"
"quarkus.http.auth.permission.authenticated.policy=permit\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:447
#, fuzzy
msgid "You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all of the application resources which is `/` in this example.  See <<oidc-cookies, Dealing with Cookies>> for more information."
msgstr "また、 `quarkus.oidc.authentication.cookie-path` をすべてのアプリケーションリソースに共通のパス値(この例では `/` )に設定する必要があるかもしれません。詳細については、「 link:#oidc-cookies[クッキーの] 扱い」を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:449
#, no-wrap
msgid "Session Management"
msgstr "セッション管理"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:452
msgid "If you have a link:security-openid-connect#single-page-applications[Single Page Application for Service Applications] where your OpenId Connect Provider script such as `keycloak.js` is managing an authoriization code flow then that script will also control the SPA authentication session lifespan."
msgstr "`keycloak.js` などの OpenId Connect Provider スクリプトが認可コードフローを管理している link:security-openid-connect#single-page-applications[サービスアプリケーション用のシングルページアプリケーション] の場合、そのスクリプトは SPA 認証セッションの寿命も制御します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:454
#, fuzzy
#| msgid "If your work with a Quarkus OIDC `web-app` application then it is Quarkus OIDC Code Authentication mechanism which is managing the user session lifespan."
msgid "If you work with a Quarkus OIDC `web-app` application then it is Quarkus OIDC Code Authentication mechanism which is managing the user session lifespan."
msgstr "Quarkus OIDC `web-app` アプリケーションで作業している場合、ユーザーセッションの寿命を管理しているのはQuarkus OIDCコード認証メカニズムです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:456
msgid "The session age is calculated by adding the lifespan value of the current IDToken and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties. Of the last two properties only `quarkus.oidc.authentication.session-age-extension` should be used to significantly extend the session lifespan if required since `quarkus.oidc.token.lifespan-grace` is only meant for taking some small clock skews into consideration."
msgstr "セッション年齢は、現在のIDTokenの寿命値と、 `quarkus.oidc.authentication.session-age-extension` と `quarkus.oidc.token.lifespan-grace` プロパティーの値を加算して計算されます。最後の2つのプロパティーのうち、 `quarkus.oidc.authentication.session-age-extension` だけは、必要に応じてセッションの寿命を大幅に延ばすために使用すべきです。 `quarkus.oidc.token.lifespan-grace` は小さなクロックスキューを考慮することだけを目的としている為です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:458
#, fuzzy
msgid "When the currently authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired then, by default, the user will be auto-redirected to the OIDC Authorization endpoint to re-authenticate. Most likely the OIDC provider will challenge the user again though not necessarily if the session between the user and this OIDC provider is still active which may happen if it is configured to last longer than the ID token."
msgstr "現在認証済みのユーザーが保護されたQuarkusエンドポイントに戻り、セッションクッキーに関連付けられたIDトークンが期限切れになると、デフォルトでは、ユーザーは再認証のために自動的にOIDC認証エンドポイントにリダイレクトされます。ユーザーとこのOIDCプロバイダーの間のセッションがまだアクティブである場合は必ずしもそうとは限りませんが、ほとんどの場合、OIDCプロバイダーがユーザーに再チャレンジしますが、IDトークンよりも長く続くように設定されている場合はそうなる可能性があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:460
#, fuzzy
msgid "If the `quarkus.oidc.token.refresh-expired` then the expired ID token (as well as the access token) will be refreshed using the refresh token returned with the authorization code grant response. This refresh token may also be recycled (refreshed) itself as part of this process. As a result the new session cookie will be created and the session will be extended."
msgstr "`quarkus.oidc.token.refresh-expired` の場合、期限切れの ID トークン(アクセス・トークンと同様に)は、認証コード付与応答で返されたリフレッシュ・トークンを使用してリフレッシュされます。このリフレッシュ・トークンは、このプロセスの一部としてリサイクル(リフレッシュ)されるかもしれません。その結果、新しいセッションクッキーが作成され、セッションが拡張されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:462
#, fuzzy
msgid "Note, `quarkus.oidc.authentication.session-age-extension` can be important when dealing with expired ID tokens, when the user is not very active. In such cases, if the ID token expires, then the session cookie may not be returned back to the Quarkus endpoint during the next user request and Quarkus will assume it is the first authentication request. Therefore using `quarkus.oidc.authentication.session-age-extension` is important if you need to have even the expired ID tokens refreshed."
msgstr "注意: `quarkus.oidc.authentication.session-age-extension` は、ユーザーがあまりアクティブではない場合に、期限切れのIDトークンを扱う際に重要になることがあります。このような場合、IDトークンの有効期限が切れていると、次のユーザーリクエストの際にセッションクッキーがQuarkusエンドポイントに返されず、Quarkusはそれが最初の認証リクエストであると判断します。したがって、期限切れのIDトークンでもリフレッシュさせる必要がある場合は、 `quarkus.oidc.authentication.session-age-extension` を使用することが重要です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:464
#, fuzzy
msgid "You can also complement refreshing the expired ID tokens by proactively refreshing the valid ID tokens which are about to be expired within the `quarkus.oidc.token.refresh-token-time-skew` value. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr "`quarkus.oidc.token.auto-refresh-interval` の値内で期限切れになりそうな有効な ID トークンを積極的にリフレッシュすることで、期限切れの ID トークンのリフレッシュを補完することもできます。現在のユーザー要求の間に、現在の ID トークンがこの `quarkus.oidc.token.auto-refresh-interval` 内で期限切れになると計算された場合、それはリフレッシュされ、新しいセッション・クッキーが作成されます。このプロパティーは ID トークンの寿命よりも短い値に設定されるべきです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:466
#, fuzzy
msgid "You can have this process further optimized by having a simple JavaScript function periodically emulating the user activity by pinging your Quarkus endpoint thus minimizing the window during which the user may have to be re-authenticated."
msgstr "Quarkusのエンドポイントにpingを打つことでユーザーの活動を定期的にエミュレートするシンプルなJavaScript関数を用意することで、このプロセスをさらに最適化することができ、ユーザーが再認証しなければならないウィンドウを最小限に抑えることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:468
#, fuzzy
msgid "Note this user session can not be extended forever - the returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr "このユーザー・セッションを永遠に延長することはできないことに注意してください。期限切れのIDトークンを持つ戻りユーザーは、リフレッシュ・トークンが期限切れになると、OIDCプロバイダ・エンドポイントで再認証を行う必要があります。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:469
#, no-wrap
msgid "TokenStateManager"
msgstr "TokenStateManager"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:472
#, fuzzy
msgid "OIDC `CodeAuthenticationMechanism` is using the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access and refresh tokens returned in the authorization code or refresh grant responses in a session cookie. It makes Quarkus OIDC endpoints completely stateless."
msgstr "OIDC `CodeAuthenticationMechanism` はデフォルトの `io.quarkus.oidc.TokenStateManager' インターフェイスの実装を使用しており、認証コードで返されたID、アクセス、リフレッシュ付与のレスポンスをセッションクッキーに保持しています。これにより、Quarkus OIDCエンドポイントは完全にステートレスになります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:474
#, fuzzy
msgid "Note that some endpoints do not require the access token. An access token is only required if the endpoint needs to retrieve `UserInfo` or access the downstream service with this access token or use the roles associated with the access token (the roles in the ID token are checked by default). In such cases you can set either `quarkus.oidc.token-state-manager.strategy=id-refresh-token` (keep ID and refresh tokens only) or `quarkus.oidc.token-state-manager.strategy=id-token` (keep ID token only)."
msgstr "エンドポイントによっては、アクセストークンを必要としないものもあることに注意してください。アクセストークンが必要なのは、エンドポイントが `UserInfo` を取得したり、このアクセストークンを使用してダウンストリームサービスにアクセスしたり、アクセストークンに関連付けられたロールを使用する必要がある場合のみです（IDトークンのロールはデフォルトでチェックされています）。このような場合は、 `quarkus.oidc.state-session-manager.strategy=id-refresh-token` （IDトークンとリフレッシュ・トークンのみを保持）または `quarkus.oidc.state-session-manager.strategy=id-token` （IDトークンのみを保持）のいずれかを設定することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:477
#, fuzzy
msgid "If the ID, access and refresh tokens are JWT tokens then combining all of them (if the strategy is the default `keep-all-tokens`) or only ID and refresh tokens (if the strategy is `id-refresh-token`) may produce a session cookie value larger than 4KB and the browsers may not be able to keep this cookie.  In such cases, you can use `quarkus.oidc.token-state-manager.split-tokens=true` to have a unique session token per each of these tokens."
msgstr "これらのトークンがすべて JWT トークンである場合、それらを組み合わせると 4KB を超えるセッションクッキーの値が生成され、ブラウザがこのクッキーを保持しない場合があります。そのような場合は、 `quarkus.oidc.token-state-manager.split-tokens=true` を使用して、これら 3 つのトークンごとに固有のセッショントークンを持つことができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:479
#, fuzzy
msgid "Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie. For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie. Note though that it may present some challenges in making the tokens available across multiple microservices nodes."
msgstr "トークンがセッションクッキーに関連付けられる方法をカスタマイズする必要がある場合は、あなた自身の `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI Beanを登録してください。例えば、トークンをデータベースに保存し、セッションクッキーにはデータベースポインタのみを保存したいかもしれません。ただし、トークンを複数のマイクロサービスノードで利用できるようにするには、いくつかの課題があるかもしれないことに注意してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:481
#, fuzzy
msgid "Here is a simple example:"
msgstr "簡単な例を挙げてみましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:485
#, no-wrap
msgid "package io.quarkus.oidc.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:488
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:496
#, no-wrap
msgid ""
"import io.quarkus.arc.AlternativePriority;\n"
"import io.quarkus.oidc.AuthorizationCodeTokens;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TokenStateManager;\n"
"import io.quarkus.oidc.runtime.DefaultTokenStateManager;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:500
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@AlternativePriority(1)\n"
"public class CustomTokenStateManager implements TokenStateManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:503
#, no-wrap
msgid ""
"    @Inject\n"
"    DefaultTokenStateManager tokenStateManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:510
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<String> createTokenState(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            AuthorizationCodeTokens sessionContent, TokenStateManager.CreateTokenStateRequestContext requestContext) {\n"
"        return tokenStateManager.createTokenState(routingContext, oidcConfig, sessionContent, requestContext)\n"
"                .map(t -> (t + \"|custom\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:520
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            String tokenState, TokenStateManager.GetTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.getTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:531
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> deleteTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig, String tokenState,\n"
"            TokenStateManager.DeleteTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.deleteTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:533
#, no-wrap
msgid "Listening to important authentication events"
msgstr "重要な認証イベントのリッスン"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:536
#, fuzzy
msgid "One can register `@ApplicationScoped` bean which will observe important OIDC authentication events. The listener will be updated when a user has logged in for the first time or re-authenticated, as well as when the session has been refreshed. More events may be reported in the future. For example:"
msgstr "重要なOIDC認証イベントを監視する `@ApplicationScoped` Beanを登録することができます。リスナーは、ユーザーが初めてログインしたときや再認証したとき、セッションがリフレッシュされたときに更新されます。将来的には、より多くのイベントが報告されるかもしれません。例えば、以下のようなものです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:541
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:546
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdTokenCredential;\n"
"import io.quarkus.oidc.SecurityEvent;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:549
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SecurityEventListener {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:556
#, no-wrap
msgid ""
"    public void event(@Observes SecurityEvent event) {\n"
"        String tenantId = event.getSecurityIdentity().getAttribute(\"tenant-id\");\n"
"        RoutingContext vertxContext = event.getSecurityIdentity().getCredential(IdTokenCredential.class).getRoutingContext();\n"
"        vertxContext.put(\"listener-message\", String.format(\"event:%s,tenantId:%s\", event.getEventType().name(), tenantId));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:558
#, no-wrap
msgid "Single Page Applications"
msgstr "シングルページアプリケーション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:561
#, fuzzy
msgid "Please check if implementing SPAs the way it is suggested in the link:security-openid-connect#single-page-applications[Single Page Applications for Service Applications] section can meet your requirements."
msgstr "link:security-openid-connect#single-page-applications[サービスアプリケーションのシングルページアプリケーション] のセクションで提案されている方法でSPAを実装することが、お客様の要件を満たすことができるかどうかを確認してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:563
#, fuzzy
msgid "If you prefer to use SPA and JavaScript API such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, please be aware that OpenID Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus. This will lead to authentication failures if the Quarkus application and the OpenID Connect Provider are hosted on the different HTTP domains/ports."
msgstr "Quarkusウェブアプリケーションで `Fetch` や `XMLHttpRequest` (XHR)などのSPAやJavaScript APIを使用することを好む場合は、Quarkusからのリダイレクト後にユーザーが認証される認証エンドポイントでは、OpenID Connect ProviderがCORSをサポートしていない場合があることに注意してください。これは、QuarkusアプリケーションとOpenID Connect Providerが異なるHTTPドメイン/ポートでホストされている場合、認証に失敗することにつながります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:565
#, fuzzy
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value. The browser script also needs to be updated to set `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of `499`, for example:"
msgstr "このような場合は、 `quarkus.oidc.authentication.java-script-auto-redirect` プロパティーを `false` に設定すると、Quarkusは `499` ステータスコードと `WWW-Authenticate` ヘッダーを `OIDC` の値で返すように指示します。ブラウザスクリプトも、 `X-Requested-With` ヘッダを `JavaScript` の値で設定し、 `499` の場合は最後にリクエストされたページをリロードするように更新する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:570
#, no-wrap
msgid ""
"Future<void> callQuarkusService() async {\n"
"    Map<String, String> headers = Map.fromEntries([MapEntry(\"X-Requested-With\", \"JavaScript\")]);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:579
#, no-wrap
msgid ""
"    await http\n"
"        .get(\"https://localhost:443/serviceCall\")\n"
"        .then((response) {\n"
"            if (response.statusCode == 499) {\n"
"                window.location.assign(\"https://localhost.com:443/serviceCall\");\n"
"            }\n"
"         });\n"
"  }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:581
#, no-wrap
msgid "Cross Origin Resource Sharing"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:584
#, fuzzy
#| msgid "If you plan to consume this application from another application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the link:http-reference#cors-filter[HTTP CORS documentation] for more details."
msgid "If you plan to consume this application from a Single Page Application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the link:http-reference#cors-filter[HTTP CORS documentation] for more details."
msgstr "別のドメインで実行されている別のアプリケーションからこのアプリケーションを利用する予定の場合は、CORS (Cross-Origin Resource Sharing) を構成する必要があります。詳細については、 link:http-reference#cors-filter[HTTP CORS のドキュメント] をお読みください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:585
#, no-wrap
msgid "Integration with GitHub and other OAuth2 providers"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:588
msgid "Some well known providers such as `GitHub` or `LinkedIn` are not `OpenId Connect` but `OAuth2` providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2]."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:590
msgid "The main difference between `OAuth2` and `OpenId Connect` providers is that `OpenId Connect` providers, by building on top of `OAuth2`, return an `ID Token` representing a user authentication, in addition to the standard authorization code flow access and refresh tokens returned by `OAuth2` providers. With `OAuth2` providers, the fact of the user authentication is implicit and is indirectly represented by the access token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of this user."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:593
msgid "For example, when working with `GitHub`, the Quarkus endpoint can acquire an access token which will allow it to request a `GitHub` user profile of the current user.  In fact this is exactly how a standard `OpenId Connect` `UserInfo` acqusition also works - by authenticating into your `OpenId Connect` provider you also give a permission to Quarkus application to acquire your `UserInfo` on your behalf - and it also shows what is meant by `OpenId Connect` being built on top of `OAuth2`."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:595
msgid "In order to support the integration with such `OAuth2` servers, `quarkus-oidc` needs to be configured to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:598
msgid "The next step is to ensure that the returned access token can be useful to the current Quarkus endpoint.  If the `OAuth2` provider supports the introspection endpoint then you may be able to use this access token as a source of roles with `quarkus.oidc.roles.source=accesstoken`. If no introspection endpoint is available then at the very least it should be possible to request a user information from this provider with `quarkus.oidc.authentication.user-info-required` - this is the case with `GitHib`."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:600
msgid "Also, OAuth2 servers may not support a well-known configuration endpoint in which case the discovery has to be disabled and the authorization, token, and introspection and/or userinfo endpoint paths have to be configured manually."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:602
msgid "Here is how you can integrate `quarkus-oidc` with `GitHub` after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:609
msgid "```properties quarkus.oidc.auth-server-url=https://github.com/login/oauth quarkus.oidc.discovery-enabled=false quarkus.oidc.authorization-path=authorize quarkus.oidc.token-path=access_token quarkus.oidc.user-info-path=https://api.github.com/user"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:612
msgid "# See https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps quarkus.oidc.authentication.scopes=user:email"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:615
msgid "# Make sure a user info is required quarkus.oidc.authentication.user-info-required=true"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:618
msgid "# Allow the code flow responses without ID tokens quarkus.oidc.authentication.id-token-required=false"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:620
msgid "quarkus.oidc.application-type=web-app"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:624
msgid "quarkus.oidc.client-id=github_app_clientid quarkus.oidc.credentials.secret=github_app_clientsecret ```"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:626
msgid "This is all what is needed for an endpoint like this one to return the currently authenticated user's profile with `GET http:localhost:8080/github/userinfo`:"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:632
msgid "```java import javax.inject.Inject; import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.Produces;"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:635
msgid "import io.quarkus.oidc.UserInfo; import io.quarkus.security.Authenticated;"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:639
msgid "@Path(\"/github\")  @Authenticated public class TokenResource {"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:642
#, no-wrap
msgid ""
"    @Inject\n"
"    UserInfo userInfo;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:651
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/userinfo\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserInfo() {\n"
"        return userInfo.getUserInfoString();\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:653
msgid "In your own endpoint you can access individual `UserInfo` properties as required."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:655
msgid "The last important point is to make sure the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:656
#, no-wrap
msgid "Cloud Services"
msgstr "クラウドサービス"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:658
#, no-wrap
msgid "Google Cloud"
msgstr "Google Cloud"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:661
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google Developer Consoles."
msgstr "Quarkus OIDC `web-app` アプリケーションは、Google Developer Consolesで *BigQuery* などのサービスに対するOpendId Connect(Authorization Code Flow)パーミッションを有効にしている現在認証されたユーザーに代わって、 *BigQuery* などの *Google Cloudサービスに* アクセスすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:664
msgid "It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr "link:https://github.com/quarkiverse[Quarkiverseの] link:https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services] で行うのは超簡単で、 link:https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[最新のタグ] サービスの依存関係を追加するだけです。例:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:672
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkiverse.googlecloudservices</groupId>\n"
"  <artifactId>quarkus-google-cloud-bigquery</artifactId>\n"
"  <version>${quarkiverse.googlecloudservices.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:675
msgid "and configure Google OIDC properties:"
msgstr "そしてGoogle OIDCプロパティーを設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:683
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://accounts.google.com\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.oidc.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.token.issuer=https://accounts.google.com\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:685
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr "プロバイダーエンドポイントの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:688
#, fuzzy
msgid "OIDC `web-app` application needs to know OpenId Connect provider's authorization, token, `JsonWebKey` (JWK) set and possibly `UserInfo`, introspection and end session (RP-initiated logout) endpoint addresses."
msgstr "OIDC `web-app` アプリケーションは、OpenId Connect プロバイダのオーソリゼーション、トークン、 `JsonWebKey` (JWK) セット、そして場合によっては `UserInfo` 、イントロスペクション、エンドセッション (RP-initiated logout) のエンドポイントアドレスを知る必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:690
#, fuzzy
msgid "By default they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc.auth-server-url` に `/.well-known/openid-configuration` パスを追加することで検出されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:692
#, fuzzy
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure them with relative path values, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、相対パスの値で設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:709
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Authorization endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/auth\n"
"quarkus.oidc.authorization-path=/protocol/openid-connect/auth\n"
"# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/token/introspect\n"
"# End session endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/logout\n"
"quarkus.oidc.end-session-path=/protocol/openid-connect/logout\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:711
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:713
msgid "Please see link:security-openid-connect-client#token-propagation[Token Propagation] section about the Authorization Code Flow access token propagation to the downstream services."
msgstr "下流サービスへの認可コードフローアクセストークンの伝播については、 link:security-openid-connect-client#token-propagation[トークン伝播] の項を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:715
#, fuzzy, no-wrap
#| msgid "Provider Endpoint configuration"
msgid "Oidc Provider Client Authentication"
msgstr "プロバイダーエンドポイントの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:718
#, fuzzy
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenId Connect Provider has to be done. It has to authenticate to the OpenId Connect Provider when the authorization code has to be exchanged for the ID, access and refresh tokens, when the ID and access tokens have to be refreshed or introspected."
msgstr "`quarkus.oidc.runtime.OidcProviderClient` は、OpenId Connect Provider へのリモートリクエストが必要な場合に使用します。ID トークン、アクセストークン、リフレッシュトークンと認証コードを交換するとき、ID トークン、アクセストークンをリフレッシュするとき、イントロスペクトするときに、OpenId Connect Provider を認証する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:720
#, fuzzy
msgid "All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "すべての link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDCクライアント認証]オプションがサポートされていますが、例えば"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:722
#, fuzzy
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` 。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:728
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:731
#, fuzzy
msgid "or"
msgstr "または"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:737
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:740
#: upstream/_guides/security-openid-connect-web-authentication.adoc:772
#, fuzzy
msgid "or with the secret retrieved from a link:credentials-provider[CredentialsProvider]:"
msgstr "または link:credentials-provider[CredentialsProvider]から取得したシークレットを使用しています。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:745
#: upstream/_guides/security-openid-connect-web-authentication.adoc:777
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:750
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:753
#, fuzzy
msgid "`client_secret_post`:"
msgstr "`client_secret_post` 。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:760
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
"quarkus.oidc.credentials.client-secret.method=post\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:763
msgid "`client_secret_jwt`, signature algorithm is HS256:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:769
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:782
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:785
#, fuzzy
msgid "`private_key_jwt` with the PEM key file, signature algorithm is RS256:"
msgstr "`private_key_jwt` 、PEMキーファイルを使用します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:791
#: upstream/_guides/security-openid-connect-web-authentication.adoc:821
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:794
#, fuzzy
msgid "`private_key_jwt` with the key store file, signature algorithm is RS256:"
msgstr "`private_key_jwt` 、キーストアファイルを使用します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:802
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc.credentials.jwt.key-password=mykeypassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:805
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:808
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントの秘密がワイヤー上を通過することはありません。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:810
#, no-wrap
msgid "Additional JWT Authentication options"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:813
#, fuzzy
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier and audience can be customized, for example:"
msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントの秘密がワイヤー上を通過することはありません。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:817
#, fuzzy, no-wrap
#| msgid "Provider Endpoint configuration"
msgid "# private_key_jwt client authentication\n"
msgstr "プロバイダーエンドポイントの設定"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:826
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenId Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:829
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:832
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:835
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:838
#, fuzzy
#| msgid "Add the following dependencies to your test project:"
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:857
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>org.eclipse.jetty</groupId>\n"
"            <artifactId>*</artifactId>\n"
"       </exclusion>\n"
"    </exclusions>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:860
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:863
#, fuzzy
#| msgid "Add the following dependencies to your test project:"
msgid "Add the following dependency:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:871
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:874
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr "RESTテストエンドポイントを用意し、 `application.properties` を以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:882
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-web-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:885
msgid "and finally write the test code, for example:"
msgstr "そして最後にテストコードを例えば以下のように書きます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:889
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:891
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:896
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:900
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:904
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class CodeFlowAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:910
#, no-wrap
msgid ""
"    @Test\n"
"    public void testCodeFlow() throws Exception {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            // the test REST endpoint listens on '/code-flow'\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/code-flow\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:915
#, no-wrap
msgid ""
"            HtmlForm form = page.getFormByName(\"form\");\n"
"            // user 'alice' has the 'user' role\n"
"            form.getInputByName(\"username\").type(\"alice\");\n"
"            form.getInputByName(\"password\").type(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:917
#, no-wrap
msgid "            page = form.getInputByValue(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:921
#, no-wrap
msgid ""
"            assertEquals(\"alice\", page.getBody().asText());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:928
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:931
#, fuzzy
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr "`OidcWiremockTestResource` は、 `alice` と `admin` のユーザーを認識します。ユーザー `alice` は、デフォルトで `user` ロールのみを持っています - `quarkus.test.oidc.token.user-roles` システムプロパティでカスタマイズすることができます。ユーザー `admin` は、デフォルトで `user` と `admin` の役割を持っていますが、 `quarkus.test.oidc.token.admin-roles` のシステムプロパティでカスタマイズすることができます。さらに、 `OidcWiremockTestResource` は、トークンの発行者とオーディエンスを `&lt;a href=\"https://service.example.com\" class=\"bare\"&gt;https://service.example.com&lt;/a&gt;`これは `quarkus.test.oidc.token.issuer` と `quarkus.test.oidc.token.audience` のシステムプロパティでカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:933
#, fuzzy
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr "さらに、 `OidcWiremockTestResource` では、トークンの発行者とオーディエンスを `&lt;a href=\"https://service.example.com\" class=\"bare\"&gt;https://service.example.com&lt;/a&gt;`これは `quarkus.test.oidc.token.issuer` と `quarkus.test.oidc.token.audience` のシステムプロパティでカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:935
#, fuzzy
msgid "`OidcWiremockTestResource` can be used to emulate all OpenId Connect providers."
msgstr "`OidcWiremockTestResource` は、すべての OpenId Connect プロバイダーをエミュレートするために使用することができます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:937
#, fuzzy, no-wrap
msgid "Dev Services for Keycloak"
msgstr "Keycloakの開発サービス"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:941
#, fuzzy
msgid "Using link:security-openid-connect-dev-services[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "Keycloakに対する統合テストには、 link:security-openid-connect-dev-services[Dev Services for Keycloak]を使用することをお勧めします。 `Dev Services for Keycloak` は、テストコンテナを起動して初期化します。 `quarkus` レルム、 `quarkus-app` クライアント（ `secret` secret）を作成し、 `alice` （ `admin` and `user` role）と `bob` （ `user` role）のユーザーを追加しますが、これらのプロパティはすべてカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:943
#, fuzzy
msgid "First prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "まず、 `application.properties` を準備します。完全に空の `application.properties` から始めることができます。 `Dev Services for Keycloak` は、実行中のテストコンテナを指す `quarkus.oidc.auth-server-url` を、 `quarkus.oidc.client-id=quarkus-app` と `quarkus.oidc.credentials.secret=secret` と同様に登録します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:945
#, fuzzy
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "しかし、すでに必要な `quarkus-oidc` プロパティがすべて設定されている場合は、 `quarkus.oidc.auth-server-url` と `prod` プロファイルを関連付けるだけで、たとえば「Dev Services for Keycloak」のコンテナを起動することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:949
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:952
#, fuzzy
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "テストを実行する前にカスタムレルムファイルをKeycloakにインポートしなければならない場合、 `Dev Services for Keycloak` を以下のように設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:957
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:961
#, fuzzy
msgid "Finally write a test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.  The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr "そして、上記の link:#integration-testing-wiremock[Wiremock]のセクションで説明したのと同じように、設定を行い、テストコードを書きます。唯一の違いは、 `QuarkusTestResource` の名前です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:967
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:970
#, fuzzy, no-wrap
msgid "KeycloakTestResourceLifecycleManager"
msgstr "KeycloakTestResourceLifecycleManager"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:974
#, fuzzy
msgid "If you need to do the integration testing against Keycloak then you are encouraged to do it with <<integration-testing-keycloak-devservices,Dev Services For Keycloak>>.  Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`."
msgstr "Keycloakに対して統合テストを行う必要がある場合は、 link:#integration-testing-keycloak-devservices[Dev Services For Keycloak]で行うことをお勧めします。テストに `KeycloakTestResourceLifecycleManager` を使うのは、 `Dev Services for Keycloak` を使えない正当な理由がある場合のみです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:976
#, fuzzy
#| msgid "Add the following dependencies to your test project:"
msgid "Start with adding the following dependency:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:984
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:987
#, fuzzy
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "`io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - Keycloakコンテナを起動する `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` の実装を提供しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:989
#, fuzzy
msgid "And configure `maven.surefire.plugin` as follows:"
msgstr "で、 `maven.surefire.plugin` を以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1005
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1008
#, fuzzy
msgid "(and similarly `maven.failsafe.plugin` when testing in native image)."
msgstr "また、ネイティブイメージでテストした場合も同様に `maven.failsafe.plugin` ）。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1011
#, fuzzy
msgid "And now set the configuration and write the test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.  The only difference is the name of `QuarkusTestResource`:"
msgstr "そして、上記の link:#integration-testing-wiremock[Wiremock]のセクションで説明したのと同じように、設定を行い、テストコードを書きます。唯一の違いは、 `QuarkusTestResource` の名前です。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1015
#, no-wrap
msgid "import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1020
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1023
#, fuzzy
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`OidcWiremockTestResource` は、 `alice` と `admin` のユーザーを認識します。ユーザー `alice` は、デフォルトで `user` ロールのみを持っています - `quarkus.test.oidc.token.user-roles` システムプロパティでカスタマイズすることができます。ユーザー `admin` は、デフォルトで `user` と `admin` の役割を持っていますが、 `quarkus.test.oidc.token.admin-roles` のシステムプロパティでカスタマイズすることができます。さらに、 `OidcWiremockTestResource` は、トークンの発行者とオーディエンスを `&lt;a href=\"https://service.example.com\" class=\"bare\"&gt;https://service.example.com&lt;/a&gt;`これは `quarkus.test.oidc.token.issuer` と `quarkus.test.oidc.token.audience` のシステムプロパティでカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1026
#, fuzzy
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr "デフォルトでは、 `KeycloakTestResourceLifecycleManager` は Keycloak インスタンスの初期化に HTTPS を使用しますが、これは `keycloak.use.https=false` で無効にできます。デフォルトのレルム名は `quarkus` 、クライアントIDは `quarkus-web-app` です。必要に応じて `keycloak.realm` と `keycloak.web-app.client` のシステムプロパティを設定し、値をカスタマイズしてください。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1028
#, fuzzy, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurityアノテーション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1031
#, fuzzy
msgid "Please see link:security-openid-connect#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr "link:security-openid-connect#integration-testing-security-annotation[注入さ]れた ID に依存する `web-app` アプリケーションのエンドポイントのコードをテストするために `JsonWebToken` や `UserInfo` 、 `OidcConfigurationMetadata` に `@TestSecurity` や `@OidcSecurity` のアノテーションを使用することについての詳細は、「 link:security-openid-connect#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken]」のセクションを参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1032
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1035
#, fuzzy
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr "トークン検証エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcProvider` `TRACE` レベルのロギングを有効にしてください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1040
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1043
#, fuzzy
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr "トークン検証エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcProvider` `TRACE` レベルのロギングを有効にしてください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1048
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1050
#, no-wrap
msgid "Running behind a reverse proxy"
msgstr "リバースプロキシーの背後での実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1053
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr "Quarkusアプリケーションがリバースプロキシー/ゲートウェイ/ファイアウォールの背後で実行されている場合、HTTP `Host` ヘッダーが内部IPアドレスにリセットされたり、HTTPS接続が終了したりした場合などに、OIDC認証メカニズムが影響を受けることがあります。たとえば、認可コードフロー `redirect_uri` パラメーターが、期待される外部ホストではなく内部ホストに設定されている場合があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1055
#, fuzzy
#| msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, see link:vertx#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section for more information."
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, see link:http-reference#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section for more information."
msgstr "このような場合、プロキシーによって転送された元のヘッダーを認識するようにQuarkusを設定する必要があります。詳細については、 link:vertx#reverse-proxy[リバースプロキシーの背後での実行] Vert.xのドキュメントセクションを参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1057
#, fuzzy
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenId Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr "例えば、QuarkusのエンドポイントがKubernetes Ingressの背後にあるクラスタで動作している場合、OpenId Connect Providerからこのエンドポイントに戻るリダイレクトは、calcuated `redirect_uri` パラメータが内部エンドポイントのアドレスを指している可能性があるため、機能しない可能性があります。この問題は、以下の設定で解決できます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1064
#, no-wrap
msgid ""
"quarkus.http.proxy.proxy-address-forwarding=true\n"
"quarkus.http.proxy.allow-forwarded=false\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.forwarded-host-header=X-ORIGINAL-HOST\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1067
#, fuzzy
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr "ここで、 `X-ORIGINAL-HOST` はKubernetes Ingressが設定する外部エンドポイントのアドレスを表します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1069
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind a SSL terminating reverse proxy."
msgstr "`quarkus.oidc.authentication.force-redirect-https-scheme` プロパティーは、QuarkusアプリケーションがSSL終端リバースプロキシーの後ろで実行されている場合にも使用できます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1070
#, fuzzy, no-wrap
msgid "External and Internal Access to OpenId Connect Provider"
msgstr "OpenId Connect Providerへの外部および内部からのアクセス"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1074
#, fuzzy
msgid "Note that the OpenId Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.  In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr "OpenId Connect Provider の外部からアクセス可能な認証、ログアウトなどのエンドポイントは、 `quarkus.oidc.auth-server-url` の内部 URL に対して自動検出または設定された URL とは異なる HTTP(S)URL を持つ場合がありますのでご注意ください。このような場合、エンドポイントから発行者認証の失敗が報告され、外部からアクセス可能なコネクトプロバイダのエンドポイントへのリダイレクトが失敗することがあります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1077
#, fuzzy
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "このような場合、Keycloakを使用している場合は、 `KEYCLOAK_FRONTEND_URL` システムプロパティに外部からアクセス可能なベースURLを設定して起動してください。他のOpenid Connectプロバイダを使用している場合は、各プロバイダのドキュメントを確認してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1078
#, fuzzy, no-wrap
#| msgid "Listening to important authentication events"
msgid "Customize authentication requests"
msgstr "重要な認証イベントのリッスン"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1081
#, fuzzy
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenId Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr "デフォルトでは、 `response_type` （ `code` に設定）、 `scope` （ 'openid' に設定）、 `client_id` 、 `redirect_uri` 、 `state` の各プロパティのみが、ユーザーが認証のために OpenId Connect プロバイダーの認証エンドポイントにリダイレクトされる際に、HTTP クエリパラメータとして渡されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1083
#, fuzzy
msgid "You can add more properties to it with `quarkus.oidc.authentication.extra-params`. For example, some OpenId Connect providers may choose to return the authorization code as part of the redirect URI's fragment which would break the authentication process - it can be fixed as follows:"
msgstr "`quarkus.oidc.authentication.extra-params` でプロパティを追加することができます。例えば、OpenId Connect プロバイダーの中には、認証コードをリダイレクト URI のフラグメントの一部として返すことを選択している場合がありますが、これは認証プロセスを破壊することになりますので、以下のように修正することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1087
#, no-wrap
msgid "quarkus.oidc.authentication.extra-params.response_mode=query\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1089
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1093
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1096
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloakのドキュメント]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1097
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1098
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1099
msgid "link:security-openid-connect-client[Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens]"
msgstr "マルチテナントへの対応方法については、 link:security-openid-connect-multitenancy[Using OpenID Connect Multi-Tenancy] ガイドをお読みください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1100
#, fuzzy
msgid "link:security-openid-connect-dev-services[Dev Services for Keycloak]"
msgstr "link:security-openid-connect-dev-services[OpenId Connectの開発サービス]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1101
#, fuzzy
msgid "link:security#oidc-jwt-oauth2-comparison[Summary of Quarkus OIDC, JWT and OAuth2 features]"
msgstr "link:security#oidc-jwt-oauth2-comparison[QuarkusのOIDC、JWT、OAuth2機能の概要]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1101
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkus Security]"

#~ msgid "https://stedolan.github.io/jq/[jq tool]"
#~ msgstr "https://stedolan.github.io/jq/[jq tool]"

#~ msgid "Configuring using the application.properties file"
#~ msgstr "application.propertiesファイルを使って設定"

#~ msgid "Configuring CORS"
#~ msgstr "CORSの設定"

#~ msgid "Running and Using the Application"
#~ msgstr "アプリケーションの実行と使用"

#~ msgid "Running in Developer Mode"
#~ msgstr "デベロッパーモードでの実行"

#~ msgid "Running in JVM Mode"
#~ msgstr "JVMモードでの実行"

#, fuzzy
#~ msgid "`client_secret_jwt`:"
#~ msgstr "`client_secret_jwt` 。"

#, fuzzy
#~ msgid "Keycloak"
#~ msgstr "キークローク"

#, fuzzy
#~ msgid "If you work with Keycloak then you can test against a live Keycloak instance by adding the following dependency:"
#~ msgstr "Keycloakを使用している場合は、以下の依存関係を追加することで、ライブのKeycloakインスタンスに対してテストすることができます。"

#, fuzzy
#~ msgid "`OidcWiremockTestResource` will be enhanced going forward to support more complex authorization code flow test scenarios."
#~ msgstr "`OidcWiremockTestResource` は、より複雑なオーソリゼーションコードフローのテストシナリオをサポートするために、今後強化される予定です。"

#, fuzzy
#~ msgid "then most likely you also need to set a `quarkus.oidc.authentication.cookie-path` property to a path value that is common to all of them, such as `/` or `/web-app`, etc."
#~ msgstr "その場合は、 `quarkus.oidc.authentication.cookie-path` プロパティーに `/` や `/web-app` などのように、すべてのプロパティーに共通のパス値を設定する必要があります。"

#, fuzzy
#~ msgid "Otherwise the browser cache manager may keep request path specific cookies which in turn may lead to some difficult to diagnoze errors. For example, an authorization code flow may fail due to a missing state cookie if a user has initially accessed `/index.html` but configured a callback URI to `/web-app/callback`."
#~ msgstr "そうでなければ、ブラウザのキャッシュマネージャーはリクエストパス固有のクッキーを保持している可能性があり、その結果、解析が困難なエラーを引き起こす可能性があります。例えば、ユーザーが最初に `/index.html` にアクセスしたが、 `/web-app/callback` へのコールバック URI を設定していた場合、状態クッキーがないために認可コードフローが失敗するかもしれません。"
