# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-08-31 13:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/amqp.adoc:6
#, no-wrap
msgid "Getting Started to SmallRye Reactive Messaging with AMQP 1.0"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:11
#, fuzzy
#| msgid "This guide demonstrates how your Quarkus application can utilize MicroProfile Reactive Messaging to interact with AMQP."
msgid "This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with AMQP 1.0."
msgstr "このガイドでは、QuarkusアプリケーションがMicroProfile Reactive Messagingを利用してAMQPと対話する方法を説明します。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:16
msgid "If you want to use RabbitMQ, you need to enable AMQP 1.0 in the RabbitMQ broker.  Check the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.5/amqp/amqp.html#amqp-rabbitmq[connecting to RabbitMQ] documentation."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/amqp.adoc:20
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/amqp.adoc:22
msgid "less than 15 minutes"
msgstr "15分未満"

#. type: Plain text
#: upstream/_guides/amqp.adoc:23
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/amqp.adoc:24
#, fuzzy
#| msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_guides/amqp.adoc:25
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_guides/amqp.adoc:26
#, fuzzy
msgid "docker and docker-compose"
msgstr "作成したら、 `docker-compose up` を実行します。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:27
#, fuzzy
msgid "GraalVM installed if you want to run in native mode."
msgstr "ネイティブモードで動作させたい場合は、GraalVMがインストールされていること"

#. type: Title ==
#: upstream/_guides/amqp.adoc:28
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/amqp.adoc:34
msgid "In this guide, we are going to develop two applications communicating with an AMQP broker.  We will use https://activemq.apache.org/components/artemis/[Artemis], but you can use any AMQP 1.0 broker.  The first application sends a _quote request_ to an AMQP queue and consumes messages from the _quote_ queue.  The second application receives the _quote request_ and sends a _quote_ back."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/amqp.adoc:35
#, fuzzy, no-wrap
#| msgid "Architecture"
msgid "Architecture,"
msgstr "アーキテクチャ"

#. type: Target for macro image
#: upstream/_guides/amqp.adoc:35
#, fuzzy, no-wrap
#| msgid "Architecture"
msgid "amqp-qs-architecture.png"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/amqp.adoc:40
msgid "The first application, the `producer`, will let the user request some quotes over an HTTP endpoint.  For each quote request, a random identifier is generated and returned to the user, to put the quote request on _pending_.  At the same time the generated request id is sent over the `quote-requests` queue."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/amqp.adoc:41
#, no-wrap
msgid "Producer"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/amqp.adoc:41
#, no-wrap
msgid "amqp-qs-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:44
msgid "The second application, the `processor`, in turn, will read from the `quote-requests` queue put a random price to the quote, and send it to a queue named `quotes`."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:47
msgid "Lastly, the `producer` will read the quotes and send them to the browser using server-sent events.  The user will therefore see the quote price updated from _pending_ to the received price in real-time."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:48
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/amqp.adoc:52
#, fuzzy
#| msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgid "We recommend that you follow the instructions in the next sections and create applications step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:54
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:56
#, fuzzy
msgid "The solution is located in the `amqp-quickstart` {quickstarts-tree-url}/amqp-quickstart[directory]."
msgstr "ソリューションは `amqp-quickstart` {quickstarts-tree-url}/amqp-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/amqp.adoc:57
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/amqp.adoc:60
msgid "First, we need to create two projects: the _producer_ and the _processor_."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:62
msgid "To create the _producer_ project, in a terminal run:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:70
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amqp-quickstart-producer \\\n"
"    -DnoCode=true \\\n"
"    -Dextensions=resteasy-reactive-jackson,smallrye-reactive-messaging-amqp\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:73
msgid "This command creates the project structure and select the two Quarkus extensions we will be using:"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:75
msgid "RESTEasy Reactive and it's Jackson support to handle JSON payloads"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:76
msgid "The Reactive Messaging AMQP connector"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:78
msgid "To create the _processor_ project, from the same directory, run:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:86
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amqp-quickstart-processor \\\n"
"    -DnoCode=true \\\n"
"    -Dextensions=smallrye-reactive-messaging-amqp\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:89
msgid "At that point you should have the following structure:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:115
#, no-wrap
msgid ""
".\n"
"├── amqp-quickstart-processor\n"
"│  ├── README.md\n"
"│  ├── mvnw\n"
"│  ├── mvnw.cmd\n"
"│  ├── pom.xml\n"
"│  └── src\n"
"│     └── main\n"
"│        ├── docker\n"
"│        ├── java\n"
"│        └── resources\n"
"│           └── application.properties\n"
"└── amqp-quickstart-producer\n"
"   ├── README.md\n"
"   ├── mvnw\n"
"   ├── mvnw.cmd\n"
"   ├── pom.xml\n"
"   └── src\n"
"      └── main\n"
"         ├── docker\n"
"         ├── java\n"
"         └── resources\n"
"            └── application.properties\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:118
msgid "Open the two projects in your favorite IDE."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:119
#, no-wrap
msgid "The Quote object"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:124
msgid "The `Quote` class will be used in both `producer` and `processor` projects.  For the sake of simplicity we will duplicate the class.  In both projects, create the `src/main/java/org/acme/amqp/model/Quote.java` file, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:128
#, no-wrap
msgid "package org.acme.amqp.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:130
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:133
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Quote {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:136
#, no-wrap
msgid ""
"    public String id;\n"
"    public int price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:141
#, no-wrap
msgid ""
"    /**\n"
"    * Default constructor required for Jackson serializer\n"
"    */\n"
"    public Quote() { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:146
#, no-wrap
msgid ""
"    public Quote(String id, int price) {\n"
"        this.id = id;\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:155
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return \"Quote{\" +\n"
"                \"id='\" + id + '\\'' +\n"
"                \", price=\" + price +\n"
"                '}';\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:159
msgid "JSON representation of `Quote` objects will be used in messages sent to the AMQP queues and also in the server-sent events sent to browser clients."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:161
msgid "Quarkus has built-in capabilities to deal with JSON AMQP messages."
msgstr ""

#. type: Block title
#: upstream/_guides/amqp.adoc:163
#, no-wrap
msgid "@RegisterForReflection"
msgstr ""

#. type: delimited block =
#: upstream/_guides/amqp.adoc:168
msgid "The `@RegisterForReflection` annotation instructs Quarkus to include the class (including fields and methods) when building the native executable.  This will be useful later when we run the applications as native executables inside containers.  Without, the native compilation would remove the fields and methods during the dead-code elimination phase."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:170
#, no-wrap
msgid "Sending quote request"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:173
#, fuzzy
msgid "Inside the `producer` project locate the generated `src/main/java/org/acme/amqp/producer/QuotesResource.java` file, and update the content to be:"
msgstr "最後に、ストリームをJAX-RSリソースにバインドしてみましょう。以下の内容の `src/main/java/org/acme/amqp/PriceResource.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:177
#, no-wrap
msgid "package org.acme.amqp.producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:179
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:185
#, fuzzy, no-wrap
#| msgid ""
#| "import javax.inject.Inject;\n"
#| "import javax.ws.rs.POST;\n"
#| "import javax.ws.rs.Path;\n"
#| "import javax.ws.rs.Consumes;\n"
#| "import javax.ws.rs.core.MediaType;\n"
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:189
#, fuzzy, no-wrap
#| msgid ""
#| "import org.eclipse.microprofile.reactive.messaging.Channel;\n"
#| "import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgid ""
"import org.acme.amqp.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:191
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:194
#, fuzzy, no-wrap
#| msgid ""
#| "@Path(\"/prices\")\n"
#| "public class PriceResource {\n"
msgid ""
"@Path(\"/quotes\")\n"
"public class QuotesResource {\n"
msgstr ""
"@Path(\"/prices\")\n"
"public class PriceResource {\n"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:196
#, no-wrap
msgid "    @Channel(\"quote-requests\") Emitter<String> quoteRequestEmitter; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:209
#, no-wrap
msgid ""
"    /**\n"
"     * Endpoint to generate a new quote request id and send it to \"quote-requests\" AMQP queue using the emitter.\n"
"     */\n"
"    @POST\n"
"    @Path(\"/request\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String createRequest() {\n"
"        UUID uuid = UUID.randomUUID();\n"
"        quoteRequestEmitter.send(uuid.toString()); // <2>\n"
"        return uuid.toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:211
msgid "Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:212
msgid "On a post request, generate a random UUID and send it to the AMQP queue using the emitter."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:215
msgid "This channel is mapped to an AMQP queue using the configuration we will add to the `application.properties` file.  Open the `src/main/resource/application.properties` file and add:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:220 upstream/_guides/amqp.adoc:324
#, no-wrap
msgid ""
"# Configure the outgoing `quote-requests` queue\n"
"mp.messaging.outgoing.quote-requests.connector=smallrye-amqp\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:224
msgid "All we need to specify is the `smallrye-amqp` connector.  By default, reactive messaging maps the channel name `quote-requests` to the AMQP queue name."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:225
#, no-wrap
msgid "Processing quote requests"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:229
#, fuzzy
msgid "Now let's consume the quote request and give out a price.  Inside the `processor` project, locate the `src/main/java/org/acme/amqp/processor/QuoteProcessor.java` file and add the following:"
msgstr "価格コンバータは、AMQPから価格を読み込んで変換します。以下の内容の `src/main/java/org/acme/amqp/PriceConverter.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:233
#, no-wrap
msgid "package org.acme.amqp.processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:235
#, fuzzy, no-wrap
#| msgid ""
#| "import java.time.Duration;\n"
#| "import java.util.Random;\n"
msgid "import java.util.Random;\n"
msgstr ""
"import java.time.Duration;\n"
"import java.util.Random;\n"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:237
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:241
#, fuzzy, no-wrap
#| msgid ""
#| "import io.smallrye.reactive.messaging.annotations.Broadcast;\n"
#| "import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
#| "import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgid ""
"import org.acme.amqp.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""
"import io.smallrye.reactive.messaging.annotations.Broadcast;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:243
#, fuzzy, no-wrap
#| msgid ""
#| "import io.smallrye.reactive.messaging.annotations.Channel;\n"
#| "import org.reactivestreams.Publisher;\n"
msgid "import io.smallrye.reactive.messaging.annotations.Blocking;\n"
msgstr ""
"import io.smallrye.reactive.messaging.annotations.Channel;\n"
"import org.reactivestreams.Publisher;\n"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:250
#, no-wrap
msgid ""
"/**\n"
" * A bean consuming data from the \"request\" AMQP queue and giving out a random quote.\n"
" * The result is pushed to the \"quotes\" AMQP queue.\n"
" */\n"
"@ApplicationScoped\n"
"public class QuoteProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:252
#, no-wrap
msgid "    private Random random = new Random();\n"
msgstr "    private Random random = new Random();\n"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:262
#, no-wrap
msgid ""
"    @Incoming(\"requests\")       // <1>\n"
"    @Outgoing(\"quotes\")         // <2>\n"
"    @Blocking                   // <3>\n"
"    public Quote process(String quoteRequest) throws InterruptedException {\n"
"        // simulate some hard working task\n"
"        Thread.sleep(200);\n"
"        return new Quote(quoteRequest, random.nextInt(100));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:264
#, fuzzy
msgid "Indicates that the method consumes the items from the `requests` channel"
msgstr "メソッドが `prices` チャンネルのアイテムを消費することを示します。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:265
#, fuzzy
msgid "Indicates that the objects returned by the method are sent to the `quotes` channel"
msgstr "メソッドによって返されたオブジェクトが `my-data-stream` チャンネルに送られることを示します。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:266
msgid "Indicates that the processing is _blocking_ and cannot be run on the caller thread."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:268
#, fuzzy
msgid "The `process` method is called for every AMQP message from the `quote-requests` queue, and will send a `Quote` object to the `quotes` queue."
msgstr "`process` メソッドは、 `prices` キュー(アプリケーション設定で設定されている)からの AMQP メッセージごとに呼び出されます。すべての結果は `my-data-stream` のインメモリーストリームに送信されます。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:271
#, fuzzy
msgid "As with the previous example we need to configure the connectors in the `application.properties` file.  Open the `src/main/resources/application.properties` file and add:"
msgstr "AMQP コネクタを設定する必要があります。これは `application.properties` ファイルで行います。キーは以下のように構成されています。"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:277
#, no-wrap
msgid ""
"# Configure the incoming AMQP queue `quote-requests`\n"
"mp.messaging.incoming.requests.connector=smallrye-amqp\n"
"mp.messaging.incoming.requests.address=quote-requests\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:280
#, no-wrap
msgid ""
"# Configure the outgoing AMQP queue `quotes`\n"
"mp.messaging.outgoing.quotes.connector=smallrye-amqp\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:284
msgid "Note that in this case we have one incoming and one outgoing connector configuration, each one distinctly named.  The configuration keys are structured as follows:"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:286
#, fuzzy
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"

#. type: Plain text
#: upstream/_guides/amqp.adoc:288
#, fuzzy
msgid "The `channel-name` segment must match the value set in the `@Incoming` and `@Outgoing` annotation:"
msgstr "`channel-name` セグメントは、 `@Incoming` および `@Outgoing` アノテーションで設定された値と一致する必要があります。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:290
msgid "`quote-requests` -> AMQP queue from which we read the quote requests"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:291
#, fuzzy
msgid "`quotes` -> AMQP queue in which we write the quotes"
msgstr "`prices` → 価格を読み取ったソース"

#. type: Title ==
#: upstream/_guides/amqp.adoc:292
#, no-wrap
msgid "Receiving quotes"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:296
msgid "Back to our `producer` project.  Let's modify the `QuotesResource` to consume quotes, bind it to an HTTP endpoint to send events to clients:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:301
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"//...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:303
#, no-wrap
msgid "@Channel(\"quotes\") Multi<Quote> quotes;     // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:312
#, no-wrap
msgid ""
"/**\n"
" * Endpoint retrieving the \"quotes\" queue and sending the items to a server sent event.\n"
" */\n"
"@GET\n"
"@Produces(MediaType.SERVER_SENT_EVENTS) // <2>\n"
"public Multi<Quote> stream() {\n"
"    return quotes; // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:314
#, fuzzy
msgid "Injects the `quotes` channel using the `@Channel` qualifier"
msgstr "`@Channel` の修飾子を使って `my-data-stream` チャンネルを注入します。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:315
#, fuzzy
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr "を使用してコンテンツが送信されていることを示します。 `Server Sent Events`"

#. type: Plain text
#: upstream/_guides/amqp.adoc:316
#, fuzzy
msgid "Returns the stream (_Reactive Stream_)"
msgstr "ストリーム _(Reactive Stream_ )を返します。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:319
msgid "Again we need to configure the incoming `quotes` channel inside `producer` project.  Add the following inside `application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:327
#, no-wrap
msgid ""
"# Configure the incoming `quotes` queue\n"
"mp.messaging.incoming.quotes.connector=smallrye-amqp\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:329
#, fuzzy, no-wrap
msgid "The HTML page"
msgstr "HTMLページ"

#. type: Plain text
#: upstream/_guides/amqp.adoc:332
#, fuzzy
msgid "Final touch, the HTML page reading the converted prices using SSE."
msgstr "最後に、SSEを使って変換された価格を読み込んだHTMLページ。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:334
#, fuzzy
msgid "Create inside the `producer` project `src/main/resources/META-INF/resources/quotes.html` file, with the following content:"
msgstr "以下の内容の `src/main/resources/META-INF/resources/prices.html` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:338
#, fuzzy, no-wrap
#| msgid ""
#| "<!DOCTYPE html>\n"
#| "<html lang=\"en\">\n"
#| "<head>\n"
#| "    <meta charset=\"UTF-8\">\n"
#| "    <title>Prices</title>\n"
msgid "<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Quotes</title>\n"
msgstr ""
"<!DOCTYPE html>\n"
"<html lang=\"en\">\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <title>Prices</title>\n"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:374
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
"</head>\n"
"<body>\n"
"<div class=\"container\">\n"
"    <div class=\"card\">\n"
"        <div class=\"card-body\">\n"
"            <h2 class=\"card-title\">Quotes</h2>\n"
"            <button class=\"btn btn-info\" id=\"request-quote\">Request Quote</button>\n"
"            <div class=\"quotes\"></div>\n"
"        </div>\n"
"    </div>\n"
"</div>\n"
"</body>\n"
"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n"
"<script>\n"
"    $(\"#request-quote\").click((event) => {\n"
"        fetch(\"/quotes/request\", {method: \"POST\"})\n"
"        .then(res => res.text())\n"
"        .then(qid => {\n"
"            var row = $(`<h4 class='col-md-12' id='${qid}'>Quote # <i>${qid}</i> | <strong>Pending</strong></h4>`);\n"
"            $(\".quotes\").append(row);\n"
"        });\n"
"    });\n"
"    var source = new EventSource(\"/quotes\");\n"
"    source.onmessage = (event) => {\n"
"      var json = JSON.parse(event.data);\n"
"      $(`#${json.id}`).html(function(index, html) {\n"
"        return html.replace(\"Pending\", `\\$\\xA0${json.price}`);\n"
"      });\n"
"    };\n"
"</script>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:378
#, fuzzy
msgid "Nothing spectacular here.  On each received quote, it updates the page."
msgstr "目を見張るようなものは何もありません。受信した価格ごとに、ページを更新します。"

#. type: Title ==
#: upstream/_guides/amqp.adoc:379
#, fuzzy, no-wrap
msgid "Get it running"
msgstr "稼動させる"

#. type: Plain text
#: upstream/_guides/amqp.adoc:382
#, fuzzy
msgid "You just need to run both applications using:"
msgstr "でネイティブ実行ファイルをビルドすることができます。"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:386
#, no-wrap
msgid "> mvn -f amqp-quickstart-producer quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:389
msgid "And, in a separate terminal:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:393
#, no-wrap
msgid "> mvn -f amqp-quickstart-processor quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:397
#, fuzzy
msgid "Quarkus starts a AMQP broker automatically, configures the application and shares the broker instance between different applications.  See xref:amqp-dev-services.adoc[Dev Services for AMQP] for more details."
msgstr "開発モードやテスト用にAMQPブローカーを起動する必要はありません。Quarkusは自動的にブローカーを起動します。詳細は、 link:amqp-dev-services.html[AMQPの開発サービス]を参照してください。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:400
#, fuzzy
msgid "Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button."
msgstr "開く `http://localhost:8080/prices.html` をブラウザに表示してください。"

#. type: Title ==
#: upstream/_guides/amqp.adoc:401
#, fuzzy, no-wrap
msgid "Running in JVM or Native mode"
msgstr "ネイティブの実行"

#. type: Plain text
#: upstream/_guides/amqp.adoc:405
#, fuzzy
msgid "When not running in dev or test mode, you will need to start your AMQP broker.  You can follow the instructions from the https://activemq.apache.org/components/artemis/documentation/latest/using-server.html[Apache ActiveMQ Artemis website] or create a `docker-compose.yaml` file with the following content:"
msgstr "次に、AMQPブローカーが必要です。 link:https://activemq.apache.org/components/artemis/[Apache ArtemisのWebサイト] の指示に従うか、以下の内容の `docker-compose.yaml` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:409
#, no-wrap
msgid "version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:411
#, no-wrap
msgid "services:\n"
msgstr "services:\n"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:423
#, no-wrap
msgid ""
"  artemis:\n"
"    image: quay.io/artemiscloud/activemq-artemis-broker:0.1.2\n"
"    ports:\n"
"      - \"8161:8161\"\n"
"      - \"61616:61616\"\n"
"      - \"5672:5672\"\n"
"    environment:\n"
"      AMQ_USER: quarkus\n"
"      AMQ_PASSWORD: quarkus\n"
"    networks:\n"
"      - amqp-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:436
#, no-wrap
msgid ""
"  producer:\n"
"    image: quarkus-quickstarts/amqp-quickstart-producer:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: amqp-quickstart-producer\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      AMQP_HOST: artemis\n"
"      AMQP_PORT: 5672\n"
"    ports:\n"
"      - \"8080:8080\"\n"
"    networks:\n"
"      - amqp-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:447
#, no-wrap
msgid ""
"  processor:\n"
"    image: quarkus-quickstarts/amqp-quickstart-processor:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: amqp-quickstart-processor\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      AMQP_HOST: artemis\n"
"      AMQP_PORT: 5672\n"
"    networks:\n"
"      - amqp-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:451
#, no-wrap
msgid ""
"networks:\n"
"  amqp-quickstart-network:\n"
"    name: amqp-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:455
msgid "Note how the AMQP broker location is configured.  The `amqp.host` and `amqp.port` (`AMQP_HOST` and `AMQP_PORT` environment variables) properties configure location."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:458
#, fuzzy
msgid "First, make sure you stopped the applications, and build both applications in JVM mode with:"
msgstr "でネイティブ実行ファイルをビルドすることができます。"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:463
#, no-wrap
msgid ""
"> mvn -f amqp-quickstart-producer clean package\n"
"> mvn -f amqp-quickstart-processor clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:467
msgid "Once packaged, run `docker compose up --build`.  The UI is exposed on http://localhost:8080/quotes.html"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:469
msgid "To run your applications as native, first we need to build the native executables:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:474
#, no-wrap
msgid ""
"> mvn -f amqp-quickstart-producer package -Pnative  -Dquarkus.native.container-build=true\n"
"> mvn -f amqp-quickstart-processor package -Pnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:478
msgid "The `-Dquarkus.native.container-build=true` instructs Quarkus to build Linux 64bits native executables, who can run inside containers.  Then, run the system using:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:483
#, no-wrap
msgid ""
"> export QUARKUS_MODE=native\n"
"> docker compose up --build\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:486
msgid "As before, the UI is exposed on http://localhost:8080/quotes.html"
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:487
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_guides/amqp.adoc:491
#, fuzzy
msgid "This guide has shown how you can interact with AMQP 1.0 using Quarkus.  It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications."
msgstr "このガイドでは、Quarkusを使用してAMQPと対話する方法を示しました。このガイドでは、MicroProfile Reactive Messagingを利用してデータストリーミングアプリケーションを構築します。"

#. type: Plain text
#: upstream/_guides/amqp.adoc:494
#, fuzzy
msgid "If you did the Kafka quickstart, you have realized that it's the same code.  The only difference is the connector configuration and the JSON mapping."
msgstr "Kafka のクイックスタートをした人は、同じコードであることに気がついたはずです。違うのはコネクタの設定だけです。"

#, fuzzy
#~ msgid "Quarkus - Using AMQP with Reactive Messaging"
#~ msgstr "Quarkus - リアクティブメッセージングでAMQPを使用する"

#, fuzzy
#~ msgid "A running AMQP 1.0 broker, or Docker Compose to start a development cluster"
#~ msgstr "実行中のAMQP 1.0ブローカー、またはDocker Composeで開発クラスターを起動する"

#, fuzzy
#~ msgid "In this guide, we are going to generate (random) prices in one component.  These prices are written in an AMQP queue (`prices`).  A second component reads from the `prices` queue and apply some magic conversion to the price.  The result is sent to an in-memory stream consumed by a JAX-RS resource.  The data is sent to a browser using server-sent events."
#~ msgstr "このガイドでは、1つのコンポーネントで(ランダムな)価格を生成します。これらの価格はAMQPキュー( `prices` )に書き込まれます。2番目のコンポーネントは `prices` キューから読み込み、価格にいくつかの魔法の変換を適用します。その結果は、JAX-RSリソースによって消費されるインメモリーストリームに送られます。データは、サーバーから送られたイベントを使ってブラウザに送られます。"

#, fuzzy
#~ msgid "Architecture,align=center,width=80%"
#~ msgstr "建築物,align=center,width=80"

#~ msgid "First, we need a new project. Create a new project with the following command:"
#~ msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#, fuzzy
#~ msgid "This command generates a Maven project, importing the Reactive Messaging and AMQP connector extensions."
#~ msgstr "このコマンドは、Reactive MessagingとAMQPコネクタエクステンションをインポートしてMavenプロジェクトを生成します。"

#, fuzzy
#~| msgid "services:\n"
#~ msgid "Dev Services"
#~ msgstr "services:\n"

#, fuzzy
#~ msgid "The price generator"
#~ msgstr "価格発生装置"

#, fuzzy
#~ msgid "Create the `src/main/java/org/acme/amqp/PriceGenerator.java` file, with the following content:"
#~ msgstr "以下の内容の `src/main/java/org/acme/amqp/PriceGenerator.java` ファイルを作成します。"

#~ msgid ""
#~ "import io.smallrye.mutiny.Multi;\n"
#~ "import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
#~ msgstr ""
#~ "import io.smallrye.mutiny.Multi;\n"
#~ "import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"

#~ msgid ""
#~ "    @Outgoing(\"generated-price\")                        // <1>\n"
#~ "    public Multi<Integer> generate() {                  // <2>\n"
#~ "        return Multi.createFrom().ticks().every(Duration.ofSeconds(5))\n"
#~ "                .onOverflow().drop()\n"
#~ "                .map(tick -> random.nextInt(100));\n"
#~ "    }\n"
#~ msgstr ""
#~ "    @Outgoing(\"generated-price\")                        // <1>\n"
#~ "    public Multi<Integer> generate() {                  // <2>\n"
#~ "        return Multi.createFrom().ticks().every(Duration.ofSeconds(5))\n"
#~ "                .onOverflow().drop()\n"
#~ "                .map(tick -> random.nextInt(100));\n"
#~ "    }\n"

#~ msgid "}\n"
#~ msgstr "}\n"

#, fuzzy
#~ msgid "Instruct Reactive Messaging to dispatch the items from returned stream to `generated-price`."
#~ msgstr "返されたストリームから `generated-price` にアイテムをディスパッチするように Reactive Messaging に指示します。"

#, fuzzy
#~ msgid "The method returns a Mutiny _stream_ (`Multi`) emitting a random _price_ every 5 seconds."
#~ msgstr "このメソッドは、5秒ごとにランダムな _価格を_ 放出する Mutiny _ストリーム_ ( `Multi` ) を返します。"

#, fuzzy
#~ msgid "The method returns a _Reactive Stream_. The generated items are sent to the stream named `generated-price`.  This stream is mapped to an AMQP queue using the `application.properties` file that we will create soon."
#~ msgstr "このメソッドは、 _Reactive ストリーム_ を返します。生成されたアイテムは `generated-price` という名前のストリームに送られます。このストリームは、近日中に作成する `application.properties` ファイルを使用して AMQP キューにマッピングされます。"

#, fuzzy
#~ msgid "The price converter"
#~ msgstr "価格コンバーター"

#~ msgid "    private static final double CONVERSION_RATE = 0.88;\n"
#~ msgstr "    private static final double CONVERSION_RATE = 0.88;\n"

#, fuzzy
#~ msgid "Indicates that the item are dispatched to all _subscribers_"
#~ msgstr "アイテムがすべての _加入者_ に発送されていることを示します。"

#, fuzzy
#~ msgid "The price resource"
#~ msgstr "価格資源"

#, fuzzy
#~ msgid "Configuring the AMQP connector"
#~ msgstr "AMQP コネクタの設定"

#, fuzzy
#~ msgid "`generated-price` -> sink in which we write the prices"
#~ msgstr "`generated-price` → 価格を書いた流し"

#, fuzzy
#~ msgid "More details about this configuration is available in the https://smallrye.io/smallrye-reactive-messaging/#_interacting_using_amqp[SmallRye Reactive Messaging AMQP connector] documentation."
#~ msgstr "この設定の詳細については、 link:https://smallrye.io/smallrye-reactive-messaging/#_interacting_using_amqp[SmallRye Reactive Messaging AMQP コネクタの] ドキュメントを参照してください。"

#, fuzzy
#~ msgid "What about `my-data-stream`? This is an in-memory stream, not connected to a message broker."
#~ msgstr "`my-data-stream` はどうですか?これはインメモリーストリームであり、メッセージブローカには接続されていません。"

#~ msgid ""
#~ "    <link rel=\"stylesheet\" type=\"text/css\"\n"
#~ "          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
#~ "    <link rel=\"stylesheet\" type=\"text/css\"\n"
#~ "          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
#~ "</head>\n"
#~ "<body>\n"
#~ "<div class=\"container\">\n"
#~ msgstr ""
#~ "    <link rel=\"stylesheet\" type=\"text/css\"\n"
#~ "          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
#~ "    <link rel=\"stylesheet\" type=\"text/css\"\n"
#~ "          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
#~ "</head>\n"
#~ "<body>\n"
#~ "<div class=\"container\">\n"

#~ msgid ""
#~ "    <h2>Last price</h2>\n"
#~ "    <div class=\"row\">\n"
#~ "    <p class=\"col-md-12\">The last price is <strong><span id=\"content\">N/A</span>&nbsp;&euro;</strong>.</p>\n"
#~ "    </div>\n"
#~ "</div>\n"
#~ "</body>\n"
#~ "<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n"
#~ "<script>\n"
#~ "    var source = new EventSource(\"/prices/stream\");\n"
#~ "    source.onmessage = function (event) {\n"
#~ "        document.getElementById(\"content\").innerHTML = event.data;\n"
#~ "    };\n"
#~ "</script>\n"
#~ "</html>\n"
#~ msgstr ""
#~ "    <h2>Last price</h2>\n"
#~ "    <div class=\"row\">\n"
#~ "    <p class=\"col-md-12\">The last price is <strong><span id=\"content\">N/A</span>&nbsp;&euro;</strong>.</p>\n"
#~ "    </div>\n"
#~ "</div>\n"
#~ "</body>\n"
#~ "<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n"
#~ "<script>\n"
#~ "    var source = new EventSource(\"/prices/stream\");\n"
#~ "    source.onmessage = function (event) {\n"
#~ "        document.getElementById(\"content\").innerHTML = event.data;\n"
#~ "    };\n"
#~ "</script>\n"
#~ "</html>\n"

#, fuzzy
#~ msgid "If you followed the instructions, you should have the AMQP broker running.  Then, you just need to run the application using:"
#~ msgstr "指示に従えば、AMQPブローカーを実行しているはずです。あとは、アプリケーションを使用して実行するだけです。"

#~ msgid "./mvnw quarkus:dev\n"
#~ msgstr "./mvnw quarkus:dev\n"

#, fuzzy
#~ msgid "This is a development broker, do not use in production."
#~ msgstr "これは開発クラスターであり、生産では使用しないでください。"

#, fuzzy
#~ msgid "By default, the application tries to connect to a AMQP broker listening at `localhost:5672`.  You can configure the bootstrap server using: `java -Damqp-host=... -Damqp-port=... -jar target/quarkus-app/quarkus-run.jar`"
#~ msgstr "デフォルトでは、アプリケーションは `localhost:5672` をリスニングしている AMQP ブローカーへの接続を試みます。ブートストラップ・サーバーを設定するには `java -Damqp-host=…​ -Damqp-port=…​ -jar target/quarkus-app/quarkus-run.jar`"

#, fuzzy
#~ msgid "You can build and run the native executable with:"
#~ msgstr "でネイティブ実行ファイルをビルドすることができます。"

#, fuzzy
#~ msgid "Imperative usage"
#~ msgstr "強制的な使用法"

#, fuzzy
#~ msgid "Sometimes you need to have an imperative way of sending messages."
#~ msgstr "時には、メッセージを送るための必須の方法が必要になることもあります。"

#, fuzzy
#~ msgid "For example, if you need to send a message to a stream from inside a REST endpoint when receiving a POST request.  In this case, you cannot use `@Outgoing` because your method has parameters."
#~ msgstr "例えば、POST リクエストを受信した際に、REST エンドポイントの内部からストリームにメッセージを送信する必要がある場合。この場合、メソッドにはパラメーターがあるため、 `@Outgoing` を使用することはできません。"

#, fuzzy
#~ msgid "For this, you can use an `Emitter`."
#~ msgstr "そのためには、 `Emitter` ."

#~ msgid "    @Inject @Channel(\"price-create\") Emitter<Double> priceEmitter;\n"
#~ msgstr "    @Inject @Channel(\"price-create\") Emitter<Double> priceEmitter;\n"

#~ msgid ""
#~ "    @POST\n"
#~ "    @Consumes(MediaType.TEXT_PLAIN)\n"
#~ "    public void addPrice(Double price) {\n"
#~ "        priceEmitter.send(price);\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @POST\n"
#~ "    @Consumes(MediaType.TEXT_PLAIN)\n"
#~ "    public void addPrice(Double price) {\n"
#~ "        priceEmitter.send(price);\n"
#~ "    }\n"
#~ "}\n"

#, fuzzy
#~ msgid "The `Emitter` configuration is done the same way as the other stream configuration used by `@Incoming` and `@Outgoing`.  In addition, you can use `@OnOverflow` to configure a back-pressure strategy."
#~ msgstr "`Emitter` の設定は、 `@Incoming` と `@Outgoing` が使用する他のストリームの設定と同じ方法で行います。さらに、 `@OnOverflow` を使用して、バックプレッシャー戦略を設定することができます。"

#, fuzzy
#~ msgid "Deprecation"
#~ msgstr "非推奨"

#, fuzzy
#~ msgid "The `io.smallrye.reactive.messaging.annotations.Emitter`, `io.smallrye.reactive.messaging.annotations.Channel` and `io.smallrye.reactive.messaging.annotations.OnOverflow` classes are now deprecated and replaced by:"
#~ msgstr "`io.smallrye.reactive.messaging.annotations.Emitter` , `io.smallrye.reactive.messaging.annotations.Channel` , `io.smallrye.reactive.messaging.annotations.OnOverflow` クラスは現在非推奨となっており、以下のように置き換えられています。"

#, fuzzy
#~ msgid "`org.eclipse.microprofile.reactive.messaging.Emitter`"
#~ msgstr "`org.eclipse.microprofile.reactive.messaging.Emitter`"

#, fuzzy
#~ msgid "`org.eclipse.microprofile.reactive.messaging.Channel`"
#~ msgstr "`org.eclipse.microprofile.reactive.messaging.Channel`"

#, fuzzy
#~ msgid "`org.eclipse.microprofile.reactive.messaging.OnOverflow`"
#~ msgstr "`org.eclipse.microprofile.reactive.messaging.OnOverflow`"

#, fuzzy
#~ msgid "The new `Emitter.send` method returns a `CompletionStage` completed when the produced message is acknowledged."
#~ msgstr "新しい `Emitter.send` メソッドは、生成されたメッセージが確認されると `CompletionStage` 完了を返します。"

#, fuzzy
#~ msgid "If you want to go further check the documentation of https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging], the implementation used in Quarkus."
#~ msgstr "さらに詳しく知りたい場合は、Quarkusで使用されている実装である link:https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] のドキュメントを確認してください。"

#, fuzzy
#~ msgid "Starting an AMQP broker"
#~ msgstr "AMQPブローカーの開始"

#, fuzzy
#~ msgid "If you started the AMQP broker with docker compose, stop it using `CTRL+C` followed by `docker-compose down`."
#~ msgstr "docker composeでAMQPブローカーを起動した場合は、 `CTRL+C` に続いて `docker-compose down` ."

#~ msgid "./mvnw package -Pnative\n"
#~ msgstr "./mvnw package -Pnative\n"
