# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-03-03 16:17+0000\n"
"PO-Revision-Date: 2021-04-14 17:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/microprofile-health.adoc:6
#, no-wrap
msgid "Quarkus - MicroProfile Health"
msgstr "Quarkus - MicroProfile Health"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:12
msgid "This guide demonstrates how your Quarkus application can utilize the MicroProfile Health specification through the SmallRye Health extension."
msgstr "このガイドでは、QuarkusアプリケーションがSmallRye Healthエクステンションを使用してMicroProfile Health仕様を利用する方法を説明します。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:17
msgid "MicroProfile Health allows applications to provide information about their state to external viewers which is typically useful in cloud environments where automated processes must be able to determine whether the application should be discarded or restarted."
msgstr "MicroProfile Health は、アプリケーションの状態に関する情報を外部のビューアーに提供することを可能にします。これは、アプリケーションを廃棄するか再起動するかを自動化されたプロセスで判断する必要があるクラウド環境で一般的に有用です。"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:21
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:23
msgid "less than 15 minutes"
msgstr "15分未満"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:24
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:25
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:26
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:27
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:32
msgid "In this guide, we build a simple REST application that exposes MicroProfile Health functionalities at the `/q/health/live` and `/q/health/ready` endpoints according to the specification."
msgstr "このガイドでは、仕様に従って `/q/health/live` および `/q/health/ready` エンドポイントで MicroProfile Health 機能を公開するシンプルな REST アプリケーションを構築します。"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:33
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:37
msgid "We recommend that you follow the instructions in the next sections and create the application step by step. However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:40
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:43
msgid "The solution is located in the `microprofile-health-quickstart` {quickstarts-tree-url}/microprofile-health-quickstart[directory]."
msgstr "ソリューションは `microprofile-health-quickstart` {quickstarts-tree-url}/microprofile-health-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:44
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:47
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:55
#, fuzzy, no-wrap
#| msgid ""
#| "mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
#| "    -DprojectGroupId=org.acme \\\n"
#| "    -DprojectArtifactId=microprofile-health-quickstart \\\n"
#| "    -Dextensions=\"health\"\n"
#| "cd microprofile-health-quickstart\n"
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=microprofile-health-quickstart \\\n"
"    -Dextensions=\"smallrye-health\"\n"
"cd microprofile-health-quickstart\n"
msgstr ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=microprofile-health-quickstart \\\n"
"    -Dextensions=\"health\"\n"
"cd microprofile-health-quickstart\n"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:59
#, fuzzy
msgid "This command generates a Maven project, importing the `smallrye-health` extension which is an implementation of the MicroProfile Health specification used in Quarkus."
msgstr "このコマンドは、Quarkusで使用されているMicroProfile Health仕様の実装である `smallrye-health` エクステンションをインポートして、Mavenプロジェクトを生成します。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:62
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `smallrye-health` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `smallrye-health` エクステンションを追加することができます。"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:66
#: upstream/_guides/microprofile-health.adoc:359
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"smallrye-health\"\n"
msgstr "./mvnw quarkus:add-extension -Dextensions=\"smallrye-health\"\n"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:69
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:76
#: upstream/_guides/microprofile-health.adoc:368
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-health</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-health</artifactId>\n"
"</dependency>\n"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:78
#, no-wrap
msgid "Running the health check"
msgstr "ヘルスチェックの実行"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:81
msgid "Importing the `smallrye-health` extension directly exposes three REST endpoints:"
msgstr "`smallrye-health` エクステンションをインポートすると、3 つの REST エンドポイントが直接公開されます。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:83
msgid "`/q/health/live` - The application is up and running."
msgstr "`/q/health/live` - アプリケーションが起動していること"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:84
msgid "`/q/health/ready` - The application is ready to serve requests."
msgstr "`/q/health/ready` - アプリケーションがリクエストに応える準備ができていること"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:85
msgid "`/q/health` - Accumulating all health check procedures in the application."
msgstr "`/q/health` - アプリケーション内のすべてのヘルスチェックの蓄積"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:87
msgid "To check that the `smallrye-health` extension is working as expected:"
msgstr "`smallrye-health` のエクステンションが正常に動作していることの確認"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:89
msgid "start your Quarkus application with `./mvnw compile quarkus:dev`"
msgstr "`./mvnw compile quarkus:dev` でQuarkusアプリケーションを起動"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:91
msgid "access the `http://localhost:8080/q/health/live` endpoint using your browser or `curl http://localhost:8080/q/health/live`"
msgstr "ブラウザまたは `curl http://localhost:8080/q/health/live`を使用して、`http://localhost:8080/q/health/live` エンドポイントにアクセス"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:93
msgid "All of the health REST endpoints return a simple JSON object with two fields:"
msgstr "すべてのヘルスRESTエンドポイントは、2つのフィールドを持つシンプルなJSONオブジェクトを返します。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:95
msgid "`status` -- the overall result of all the health check procedures"
msgstr "`status` -- the overall result of all the health check procedures"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:96
msgid "`checks` -- an array of individual checks"
msgstr "`checks` -- an array of individual checks"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:100
#, fuzzy
msgid "The general `status` of the health check is computed as a logical AND of all the declared health check procedures. The `checks` array is empty as we have not specified any health check procedure yet so let's define some."
msgstr "ヘルスチェックの一般的な `status` は、宣言されたすべてのヘルスチェックプロシージャの論理 AND として計算されます。 `checks` の配列は、まだ何もヘルスチェックプロシージャを指定していないので空です。"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:101
#, no-wrap
msgid "Creating your first health check"
msgstr "初めてのヘルスチェックの作成"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:104
msgid "In this section, we create our first simple health check procedure."
msgstr "ここでは、初めての簡単なヘルスチェックを作成します。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:106
msgid "Create the `org.acme.microprofile.health.SimpleHealthCheck` class:"
msgstr "`org.acme.microprofile.health.SimpleHealthCheck` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:110
#: upstream/_guides/microprofile-health.adoc:164
#: upstream/_guides/microprofile-health.adoc:210
#: upstream/_guides/microprofile-health.adoc:281
#, no-wrap
msgid "package org.acme.microprofile.health;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:114
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.Liveness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:116
#: upstream/_guides/microprofile-health.adoc:170
#: upstream/_guides/microprofile-health.adoc:218
#: upstream/_guides/microprofile-health.adoc:287
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:120
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped <1> <2>\n"
"public class SimpleHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:126
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.up(\"Simple health check\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:128
msgid "It's recommended to annotate the health check class with `@ApplicationScoped` or the `@Singleton` scope so that a single bean instance is used for all health check requests."
msgstr "ヘルスチェッククラスに `@ApplicationScoped` や `@Singleton` スコープをアノテーションして、単一のBeanインスタンスがすべてのヘルスチェックリクエストに使用されるようにすることをお勧めします。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:129
msgid "If a bean class annotated with one of the health check annotations declares no scope then the `@Singleton` scope is used automatically."
msgstr "ヘルスチェックアノテーションの一つでアノテーションされたBeanクラスがスコープを宣言しない場合、 `@Singleton` スコープが自動的に使用されます。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:131
msgid "As you can see, the health check procedures are defined as CDI beans that implement the `HealthCheck` interface and are annotated with one of the health check qualifiers, such as:"
msgstr "ご覧のように、ヘルスチェックの手続は `HealthCheck` インターフェイスを実装した CDI Beanとして定義されており、ヘルスチェック修飾子のいずれかでアノテーションされています。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:133
msgid "`@Liveness` - the liveness check accessible at `/q/health/live`"
msgstr "`@Liveness` - `/q/health/live`でアクセス可能なLivenessチェック"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:134
msgid "`@Readiness` - the readiness check accessible at `/q/health/ready`"
msgstr "`@Readiness` - `/q/health/ready` でアクセス可能なReadinessチェック"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:138
msgid "`HealthCheck` is a functional interface whose single method `call` returns a `HealthCheckResponse` object which can be easily constructed by the fluent builder API shown in the example."
msgstr "`HealthCheck` は、関数インターフェイスで、単一メソッド `call` が `HealthCheckResponse` オブジェクトを返します。例に示した fluent ビルダー API で簡単に構築できます。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:144
#, fuzzy
msgid "As we have started our Quarkus application in dev mode simply repeat the request to `http://localhost:8080/q/health/live` by refreshing your browser window or by using `curl http://localhost:8080/q/health/live`. Because we defined our health check to be a liveness procedure (with `@Liveness` qualifier) the new health check procedure is now present in the `checks` array."
msgstr "開発モードでQuarkusアプリケーションを起動しているので、次のようなリクエストを繰り返します。 `http://localhost:8080/q/health/live` ブラウザのウィンドウをリフレッシュするか `curl http://localhost:8080/q/health/live` .ヘルスチェックをlivenessプロシージャ( `@Liveness` 修飾子付き)と定義したので、新しいヘルスチェックプロシージャは `checks` 配列に存在するようになりました。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:147
#, fuzzy
msgid "Congratulations! You've created your first Quarkus health check procedure. Let's continue by exploring what else can be done with the MicroProfile Health specification."
msgstr "おめでとうございます。最初のQuarkusヘルスチェック手順を作成しました。続けて、MicroProfile Health仕様を使用して、他に何ができるのかを調べてみましょう。"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:148
#, fuzzy, no-wrap
msgid "Adding a readiness health check procedure"
msgstr "準備健康チェックの手順を追加する"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:154
#, fuzzy
msgid "In the previous section, we created a simple liveness health check procedure which states whether our application is running or not. In this section, we will create a readiness health check which will be able to state whether our application is able to process requests."
msgstr "前のセクションでは、アプリケーションが動作しているかどうかを示す、簡単な動作確認の手順を作成しました。このセクションでは、アプリケーションがリクエストを処理できるかどうかを示すことができるようにするための準備度チェックを作成します。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:158
#, fuzzy
msgid "We will create another health check procedure that simulates a connection to an external service provider such as a database. For starters, we will always return the response indicating the application is ready."
msgstr "データベースのような外部サービス・プロバイダへの接続をシミュレートする別のヘルス・チェック・プロシージャを作成します。手始めに、アプリケーションの準備ができていることを示すレスポンスを常に返します。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:160
#, fuzzy
msgid "Create `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr "`org.acme.microprofile.health.DatabaseConnectionHealthCheck` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:168
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.Readiness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:174
#: upstream/_guides/microprofile-health.adoc:222
#, no-wrap
msgid ""
"@Readiness\n"
"@ApplicationScoped\n"
"public class DatabaseConnectionHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:180
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.up(\"Database connection health check\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:190
#, fuzzy
msgid "If you now rerun the health check at `http://localhost:8080/q/health/live` the `checks` array will contain only the previously defined `SimpleHealthCheck` as it is the only check defined with the `@Liveness` qualifier. However, if you access `http://localhost:8080/q/health/ready` (in the browser or with `curl http://localhost:8080/q/health/ready`) you will see only the `Database connection health check` as it is the only health check defined with the `@Readiness` qualifier as the readiness health check procedure."
msgstr "でヘルスチェックを再実行した場合は `http://localhost:8080/q/health/live` `checks` の配列には、 `@Liveness` の修飾子で定義された唯一のチェックなので、先に定義された `SimpleHealthCheck` だけが含まれます。しかし、もし `http://localhost:8080/q/health/ready` (ブラウザや `curl http://localhost:8080/q/health/ready` )では、 `Database connection health check` だけが表示されますが、これは `@Readiness` の修飾子で定義された唯一のヘルスチェックであるため、レディネスヘルスチェックの手順として表示されます。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:192
#, fuzzy
msgid "If you access `http://localhost:8080/q/health` you will get back both checks."
msgstr "アクセスした場合 `http://localhost:8080/q/health` あなたは両方の小切手を取り戻すでしょう。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:197
#, fuzzy
msgid "More information about which health check procedures should be used in which situation is detailed in the MicroProfile Health specification. Generally, the liveness procedures determine whether the application should be restarted while readiness procedures determine whether it makes sense to contact the application with requests."
msgstr "どのヘルスチェック手順をどのような状況で使用すべきかについての詳細は、MicroProfile のヘルス仕様に詳述されています。一般的には、活性化の手順はアプリケーションを再起動すべきかどうかを決定し、準備の手順はアプリケーションにリクエストを連絡することが意味のあることかどうかを決定します。"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:198
#, fuzzy, no-wrap
msgid "Negative health check procedures"
msgstr "ネガティブヘルスチェックの手順"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:204
#, fuzzy
msgid "In this section, we extend our `Database connection health check` with the option of stating that our application is not ready to process requests as the underlying database connection cannot be established. For simplicity reasons, we only determine whether the database is accessible or not by a configuration property."
msgstr "このセクションでは、 `Database connection health check` を拡張して、基礎となるデータベース接続が確立できないために、 アプリケーションがリクエストを処理する準備ができていないことを示すオプションを追加しています。単純化のために、データベースにアクセスできるかどうかは設定プロパティーでのみ判断します。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:206
#, fuzzy
msgid "Update the `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr "`org.acme.microprofile.health.DatabaseConnectionHealthCheck` クラスを更新します。"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:216
#, no-wrap
msgid ""
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.HealthCheckResponseBuilder;\n"
"import org.eclipse.microprofile.health.Readiness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:225
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"database.up\", defaultValue = \"false\")\n"
"    private boolean databaseUp;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:228
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:230
#, no-wrap
msgid "        HealthCheckResponseBuilder responseBuilder = HealthCheckResponse.named(\"Database connection health check\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:238
#, no-wrap
msgid ""
"        try {\n"
"            simulateDatabaseConnectionVerification();\n"
"            responseBuilder.up();\n"
"        } catch (IllegalStateException e) {\n"
"            // cannot access the database\n"
"            responseBuilder.down();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:241
#, no-wrap
msgid ""
"        return responseBuilder.build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:248
#, no-wrap
msgid ""
"    private void simulateDatabaseConnectionVerification() {\n"
"        if (!databaseUp) {\n"
"            throw new IllegalStateException(\"Cannot contact database\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:255
#, fuzzy
msgid "Until now we used a simplified method of building a `HealthCheckResponse` through the `HealthCheckResponse#up(String)` (there is also `HealthCheckResponse#down(String)`) which will directly build the response object.  From now on, we utilize the full builder capabilities provided by the `HealthCheckResponseBuilder` class."
msgstr "これまでは、 `HealthCheckResponse#up(String)` ( `HealthCheckResponse#down(String)` もあります) を通して `HealthCheckResponse` を構築する単純な方法を使用していましたが、これはレスポンスオブジェクトを直接構築するものです。今後は、 `HealthCheckResponseBuilder` クラスが提供する完全なビルダー機能を利用します。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:260
#, fuzzy
msgid "If you now rerun the readiness health check (at `http://localhost:8080/q/health/ready`)  the overall `status` should be DOWN. You can also check the liveness check at `http://localhost:8080/q/health/live` which will return the overall `status` UP because it isn't influenced by the readiness checks."
msgstr "今、準備状態の健康チェックを再実行した場合 ( `http://localhost:8080/q/health/ready` ) `status` が全体的にダウンしているはずです。また、ライブネスチェックは `http://localhost:8080/q/health/live` これは、準備チェックの影響を受けないので、全体の `status` UP を返します。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:264
#, fuzzy
msgid "As we shouldn't leave this application with a readiness check in a DOWN state and because we are running Quarkus in dev mode you can add `database.up=true` in `src/main/resources/application.properties` and rerun the readiness health check again"
msgstr "このアプリケーションをDOWN状態でレディネスチェックをしたままにしておくべきではないし、Quarkusをdevモードで実行しているので、 `database.up=true` を `src/main/resources/application.properties` に追加して、レディネスヘルスチェックを再実行することができます。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:265
#, fuzzy
msgid "it should be up again."
msgstr "また上がるはずです。"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:267
#, no-wrap
msgid "Adding user-specific data to the health check response"
msgstr "ヘルスチェック応答にユーザー固有のデータを追加する"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:275
#, fuzzy
msgid "In previous sections, we saw how to create simple health checks with only the minimal attributes, namely, the health check name and its status (UP or DOWN). However, the MicroProfile specification also provides a way for the applications to supply arbitrary data in the form of key-value pairs sent to the consuming end. This can be done by using the `withData(key, value)` method of the health check response builder API."
msgstr "前のセクションでは、最低限の属性、すなわちヘルスチェック名とそのステータス(UPまたはDOWN)だけで単純なヘルスチェックを作成する方法を見た。しかし、MicroProfile 仕様では、アプリケーションが任意のデータをキーと値のペアの形で消費側に送信する方法も提供しています。これは、ヘルスチェック応答ビルダ API の `withData(key, value)` メソッドを使用して行うことができます。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:277
#, fuzzy
msgid "Let's create a new health check procedure `org.acme.microprofile.health.DataHealthCheck`:"
msgstr "新しい健康チェックの手順を作ってみよう `org.acme.microprofile.health.DataHealthCheck` ."

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:285
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.Liveness;\n"
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:291
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped\n"
"public class DataHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:301
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.named(\"Health check with data\")\n"
"                .up()\n"
"                .withData(\"foo\", \"fooValue\")\n"
"                .withData(\"bar\", \"barValue\")\n"
"                .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:307
#, fuzzy
msgid "If you rerun the liveness health check procedure by accessing the `/q/health/live` endpoint you can see that the new health check `Health check with data` is present in the `checks` array. This check contains a new attribute called `data` which is a JSON object consisting of the properties we have defined in our health check procedure."
msgstr "`/q/health/live` エンドポイントにアクセスして liveness ヘルスチェックプロシージャを再実行すると、 `checks` 配列に新しいヘルスチェック `Health check with data` が存在することがわかります。このチェックには `data` という新しい属性が含まれており、これは、ヘルス・チェック・プロシージャで定義したプロパティーで構成される JSON オブジェクトです。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:310
msgid "This functionality is specifically useful in failure scenarios where you can pass the error along with the health check response."
msgstr "この機能は、障害シナリオで特に有用です。エラーをヘルスチェック応答と一緒に渡すことができます。"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:322
#, no-wrap
msgid ""
"        try {\n"
"            simulateDatabaseConnectionVerification();\n"
"            responseBuilder.up();\n"
"        } catch (IllegalStateException e) {\n"
"            // cannot access the database\n"
"            responseBuilder.down()\n"
"                    .withData(\"error\", e.getMessage()); // pass the exception message\n"
"        }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:324
#, no-wrap
msgid "Extension health checks"
msgstr "エクステンションのヘルスチェック"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:327
msgid "Some extension may provide default health checks, including the extension will automatically register its health checks."
msgstr "エクステンションによってはデフォルトのヘルスチェックを提供している場合があり、その場合はエクステンションが自動的にヘルスチェックを登録してくれます。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:330
msgid "For example, `quarkus-agroal` that is used to manage Quarkus datasource(s) automatically register a readiness health check that will validate each datasources: link:datasource#datasource-health-check[Datasource Health Check]."
msgstr "例えば、Quarkusのデータソースを管理するために使用されている `quarkus-agroal` は、各データソースを検証するレディネスヘルスチェックを自動的に登録します。 link:datasource#datasource-health-check[Datasource Health Check] ."

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:332
msgid "You can disable extension health check via the property `quarkus.health.extensions.enabled` so none will be automatically registered."
msgstr "プロパティー `quarkus.health.extensions.enabled` でエクステンションのヘルスチェックを無効にすることができるので、何も自動的に登録されません。"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:333
#, no-wrap
msgid "Health UI "
msgstr "Health UI "

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:336
msgid "Experimental - not included in the MicroProfile specification"
msgstr "実験的 - MicroProfile仕様には含まれていません。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:338
msgid "`health-ui` allows you to see your Health Checks in a Web GUI."
msgstr "`health-ui` では、Web GUI でヘルスチェックを見ることができます。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:340
msgid "The Quarkus `smallrye-health` extension ships with `health-ui` and enables it by default in dev and test modes, but it can also be explicitly configured for production mode as well."
msgstr "Quarkus `smallrye-health` エクステンションは `health-ui` に同梱されており、開発モードとテストモードではデフォルトで有効になっていますが、本番モードでも明示的に設定することができます。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:342
msgid "`health-ui` can be accessed from http://localhost:8080/q/health-ui/ ."
msgstr "`health-ui` は http://localhost:8080/q/health-ui/ からアクセスできます。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:344
msgid "image:health-ui-screenshot01.png[alt=Health UI]"
msgstr "image:health-ui-screenshot01.png[alt=Health UI]"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:345
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:351
msgid "MicroProfile Health provides a way for your application to distribute information about its healthiness state to state whether or not it is able to function properly.  Liveness checks are utilized to tell whether the application should be restarted and readiness checks are used to tell whether the application is able to process requests."
msgstr "MicroProfile Health は、アプリケーションが正常に機能するかどうかを示すために、アプリケーションの健康状態に関する情報を配布する方法を提供します。Livenessチェックはアプリケーションを再起動すべきかどうかを伝えるために利用され、Readinesチェックはアプリケーションがリクエストを処理できるかどうかを伝えるために利用されます。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:353
msgid "All that is needed to enable the MicroProfile Health features in Quarkus is:"
msgstr "QuarkusのMicroProfile Health機能を有効にするために必要なのは、これだけです。"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:356
msgid "adding the `smallrye-health` Quarkus extension to your project using the `quarkus-maven-plugin`: +"
msgstr "`smallrye-health` Quarkusエクステンションをプロジェクトに追加するには、 `quarkus-maven-plugin`. +"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:362
msgid "or simply adding the following Maven dependency: +"
msgstr "または、単に以下のMaven依存関係を追加するだけです。"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:370
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#~ msgid "./mvnw quarkus:add-extension -Dextensions=\"health\"\n"
#~ msgstr "./mvnw quarkus:add-extension -Dextensions=\"health\"\n"
