# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-02-23 11:07+0000\n"
"PO-Revision-Date: 2021-03-25 22:09+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-jwt.adoc:6
#, no-wrap
msgid "Quarkus - Using JWT RBAC"
msgstr "Quarkus - JWT RBACの使用"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:13
msgid "This guide explains how your Quarkus application can utilize MicroProfile JWT (MP JWT) to verify https://tools.ietf.org/html/rfc7519[JSON Web Token]s, represent them as MP JWT `org.eclipse.microprofile.jwt.JsonWebToken` and provide secured access to the Quarkus HTTP endpoints using Bearer Token Authorization and https://en.wikipedia.org/wiki/Role-based_access_control[Role-Based Access Control]."
msgstr "このガイドでは、QuarkusアプリケーションがMicroProfile JWT(MP JWT)を利用して、 link:https://tools.ietf.org/html/rfc7519[JSON Web Token] を検証し、MP JWT( `org.eclipse.microprofile.jwt.JsonWebToken` )として表現し、Bearer Token Authorizationと link:https://en.wikipedia.org/wiki/Role-based_access_control[Role-Based Access Control] を使用してQuarkus HTTPエンドポイントへのセキュアなアクセスを提供する方法について説明します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:16
#, fuzzy
msgid "Quarkus OpenId Connect extension also supports Bearer Token Authorization and uses `smallrye-jwt` to represent the bearer tokens as `JsonWebToken`, please read the link:security-openid-connect[Using OpenID Connect to Protect Service Applications] guide for more information.  OpenId Connect extension has to be used if the Quarkus application needs to authenticate the users using OIDC Authorization Code Flow, please read link:security-openid-connect-web-authentication[Using OpenID Connect to Protect Web Applications] guide for more information."
msgstr "Quarkus OpenId link:security-openid-connect[Connect] エクステンションは、ベアラートークンの認証もサポートしており、 `smallrye-jwt` を使用してベアラートークンを `JsonWebToken` のように表現します。OpenId link:security-openid-connect-web-authentication[Connect] extensionは、QuarkusアプリケーションがOIDC Authorization Code Flowを使用してユーザーを認証する必要がある場合に使用する必要があります。"

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:17
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:21
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、すぐに完成した例に飛んでも構いません。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:23
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:25
msgid "The solution is located in the `security-jwt-quickstart` {quickstarts-tree-url}/security-jwt-quickstart[directory]."
msgstr "ソリューションは `security-jwt-quickstart` {quickstarts-tree-url}/security-jwt-quickstart[directory] にあります。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:26
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:29
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:39
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-jwt-quickstart \\\n"
"    -DclassName=\"org.acme.security.jwt.TokenSecuredResource\" \\\n"
"    -Dpath=\"/secured\" \\\n"
"    -Dextensions=\"resteasy,resteasy-jackson,smallrye-jwt,smallrye-jwt-build\"\n"
"cd security-jwt-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:42
msgid "This command generates the Maven project with a REST endpoint and imports the `smallrye-jwt` extension, which includes the {mp-jwt} support."
msgstr "このコマンドは、RESTエンドポイントを持つMavenプロジェクトを生成し、{mp-jwt}サポートを含む `smallrye-jwt` エクステンションをインポートします。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:45
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `smallrye-jwt` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `smallrye-jwt` エクステンションを追加することができます。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:49
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"smallrye-jwt, smallrye-jwt-build\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:52
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:63
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-jwt</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-jwt-build</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:65
#, fuzzy, no-wrap
msgid "Examine the JAX-RS resource"
msgstr "JAX-RSリソースを調べる"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:68
#, fuzzy
msgid "Open the `src/main/java/org/acme/security/jwt/TokenSecuredResource.java` file and see the following content:"
msgstr "`src/main/java/org/acme/security/jwt/TokenSecuredResource.java` ファイルを開くと、以下のような内容が表示されます。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:69
#, fuzzy, no-wrap
msgid "Basic REST Endpoint"
msgstr "基本的なRESTエンドポイント"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:73 upstream/_guides/security-jwt.adoc:97
#: upstream/_guides/security-jwt.adoc:211
#: upstream/_guides/security-jwt.adoc:350
#: upstream/_guides/security-jwt.adoc:495
#, no-wrap
msgid "package org.acme.security.jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:78
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:81
#, no-wrap
msgid ""
"@Path(\"/secured\")\n"
"public class TokenSecuredResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:88
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:91
#, fuzzy
msgid "This is a basic REST endpoint that does not have any of the {extension-name} specific features, so let's add some."
msgstr "これは{extension-name}特有の機能を持たない基本的なRESTエンドポイントなので、いくつか追加してみましょう。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:93
#, fuzzy, no-wrap
msgid "REST Endpoint V1"
msgstr "REST エンドポイント V1"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:99
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:110
#, no-wrap
msgid ""
"import javax.annotation.security.PermitAll;\n"
"import javax.enterprise.context.RequestScoped;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.InternalServerErrorException;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:112
#: upstream/_guides/security-jwt.adoc:225
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:116
#, no-wrap
msgid ""
"@Path(\"/secured\")\n"
"@RequestScoped // <1>\n"
"public class TokenSecuredResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:119
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:127
#, no-wrap
msgid ""
"    @GET()\n"
"    @Path(\"permit-all\")\n"
"    @PermitAll // <3>\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx); // <4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:143
#, no-wrap
msgid ""
"    private String getResponseString(SecurityContext ctx) {\n"
"        String name;\n"
"        if (ctx.getUserPrincipal() == null) { // <5>\n"
"            name = \"anonymous\";\n"
"        } else if (!ctx.getUserPrincipal().getName().equals(jwt.getName())) { // <6>\n"
"            throw new InternalServerErrorException(\"Principal and JsonWebToken names do not match\");\n"
"        } else {\n"
"            name = ctx.getUserPrincipal().getName(); // <7>\n"
"        }\n"
"        return String.format(\"hello + %s,\"\n"
"            + \" isHttps: %s,\"\n"
"            + \" authScheme: %s,\"\n"
"            + \" hasJWT: %s\",\n"
"            name, ctx.isSecure(), ctx.getAuthenticationScheme(), hasJwt()); // <8>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:148
#, no-wrap
msgid ""
"    private boolean hasJwt() {\n"
"\treturn jwt.getClaimNames() != null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:151
#, fuzzy
msgid "Add a `RequestScoped` as Quarkus uses a default scoping of `ApplicationScoped` and this will produce undesirable behavior since JWT claims are naturally request scoped."
msgstr "Quarkusはデフォルトで `ApplicationScoped` のスコーピングを使用しているため、 `RequestScoped` を追加しました。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:152
#, fuzzy
msgid "Here we inject the JsonWebToken interface, an extension of the java.security.Principal interface that provides access to the claims associated with the current authenticated token."
msgstr "ここでは、現在の認証済みトークンに関連するクレームへのアクセスを提供する java.security.Principal インターフェイスの拡張である JsonWebToken インターフェイスを注入します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:153
#, fuzzy
msgid "@PermitAll is a JSR 250 common security annotation that indicates that the given endpoint is accessible by any caller, authenticated or not."
msgstr "PermitAllは、認証されているかどうかに関わらず、任意の呼び出し元からエンドポイントにアクセスできることを示すJSR250共通のセキュリティーアノテーションです。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:154
#, fuzzy
msgid "Here we inject the JAX-RS SecurityContext to inspect the security state of the call and use a `getResponseString()` function to populate a response string."
msgstr "ここでは、JAX-RS SecurityContextを注入して呼び出しのセキュリティー状態を検査し、 `getResponseString()` 関数を使用して応答文字列を入力します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:155
#, fuzzy
msgid "Here we check if the call is insecured by checking the request user/caller `Principal` against null."
msgstr "ここでは、リクエストユーザー/Caller `Principal` と null を照合することで、呼が安全でないかどうかをチェックします。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:156
#, fuzzy
msgid "Here we check that the Principal and JsonWebToken have the same name since JsonWebToken does represent the current Principal."
msgstr "ここでは、JsonWebTokenが現在のプリンシパルを表しているので、プリンシパルとJsonWebTokenが同じ名前であることを確認します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:157
#, fuzzy
msgid "Here we get the Principal name."
msgstr "ここでプリンシパルネームを取得します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:158
#, fuzzy
msgid "The reply we build up makes use of the caller name, the `isSecure()` and `getAuthenticationScheme()` states of the request `SecurityContext`, and whether a non-null `JsonWebToken` was injected."
msgstr "私たちが構築する応答は、発信者名、リクエストの `isSecure()` と `getAuthenticationScheme()` の状態 `SecurityContext` 、および NULL でない `JsonWebToken` が注入されたかどうかを使用します。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:159
#, no-wrap
msgid "Run the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:162
#, fuzzy
msgid "Now we are ready to run our application. Use:"
msgstr "これで、アプリケーションを実行する準備が整いました。使用してください。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:166
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr "./mvnw compile quarkus:dev\n"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:169
#, fuzzy
msgid "and you should see output similar to:"
msgstr "のような出力が表示されるはずです。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:170
#, fuzzy, no-wrap
msgid "quarkus:dev Output"
msgstr "quarkus:dev 出力"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:184
#, no-wrap
msgid ""
"$ ./mvnw compile quarkus:dev\n"
"[INFO] Scanning for projects...\n"
"[INFO]\n"
"[INFO] ----------------------< org.acme:security-jwt-quickstart >-----------------------\n"
"[INFO] Building security-jwt-quickstart 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]---------------------------------\n"
"...\n"
"Listening for transport dt_socket at address: 5005\n"
"2020-07-15 16:09:50,883 INFO  [io.quarkus] (Quarkus Main Thread) security-jwt-quickstart 1.0.0-SNAPSHOT on JVM (powered by Quarkus 999-SNAPSHOT) started in 1.073s. Listening on: http://0.0.0.0:8080\n"
"2020-07-15 16:09:50,885 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.\n"
"2020-07-15 16:09:50,885 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, mutiny, resteasy, resteasy-jackson, security, smallrye-context-propagation, smallrye-jwt, vertx, vertx-web]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:187
#, fuzzy
msgid "Now that the REST endpoint is running, we can access it using a command line tool like curl:"
msgstr "REST エンドポイントが実行されているので、curl のようなコマンドラインツールを使ってアクセスすることができます。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:188
#, fuzzy, no-wrap
msgid "curl command for /secured/permit-all"
msgstr "curl コマンドで /secured/permit-all を実行します。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:193
#, no-wrap
msgid ""
"$ curl http://127.0.0.1:8080/secured/permit-all; echo\n"
"hello + anonymous, isHttps: false, authScheme: null, hasJWT: false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:197
#, fuzzy
msgid "We have not provided any JWT in our request, so we would not expect that there is any security state seen by the endpoint, and the response is consistent with that:"
msgstr "今回のリクエストではJWTを提供していませんので、エンドポイントから見たセキュリティー状態があるとは考えられず、レスポンスもそれに沿ったものとなっています。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:199
#, fuzzy
msgid "user name is anonymous"
msgstr "ユーザー名は匿名"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:200
#, fuzzy
msgid "isHttps is false as https is not used"
msgstr "isHttps は https を使用しないので false です。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:201
#, fuzzy
msgid "authScheme is null"
msgstr "authScheme は null です。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:202
#, fuzzy
msgid "hasJWT is false"
msgstr "hasJWTは偽"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:204
#, fuzzy
msgid "Use Ctrl-C to stop the Quarkus server."
msgstr "Ctrl-Cを使用してQuarkusサーバーを停止します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:206
#, fuzzy
msgid "So now let's actually secure something. Take a look at the new endpoint method `helloRolesAllowed` in the following:"
msgstr "では実際に何かを確保してみましょう。下記の新しいエンドポイントメソッド `helloRolesAllowed` を見てみましょう。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:207
#, fuzzy, no-wrap
msgid "REST Endpoint V2"
msgstr "REST エンドポイント V2"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:223
#: upstream/_guides/security-jwt.adoc:507
#, no-wrap
msgid ""
"import javax.annotation.security.PermitAll;\n"
"import javax.annotation.security.RolesAllowed;\n"
"import javax.enterprise.context.RequestScoped;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.InternalServerErrorException;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:229
#: upstream/_guides/security-jwt.adoc:515
#, no-wrap
msgid ""
"@Path(\"/secured\")\n"
"@RequestScoped\n"
"public class TokenSecuredResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:232
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:240
#: upstream/_guides/security-jwt.adoc:529
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"permit-all\")\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:248
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"roles-allowed\") // <2>\n"
"    @RolesAllowed({ \"User\", \"Admin\" }) // <3>\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String helloRolesAllowed(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx) + \", birthdate: \" + jwt.getClaim(\"birthdate\").toString(); // <4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:264
#: upstream/_guides/security-jwt.adoc:561
#, no-wrap
msgid ""
"    private String getResponseString(SecurityContext ctx) {\n"
"        String name;\n"
"        if (ctx.getUserPrincipal() == null) {\n"
"            name = \"anonymous\";\n"
"        } else if (!ctx.getUserPrincipal().getName().equals(jwt.getName())) {\n"
"            throw new InternalServerErrorException(\"Principal and JsonWebToken names do not match\");\n"
"        } else {\n"
"            name = ctx.getUserPrincipal().getName();\n"
"        }\n"
"        return String.format(\"hello + %s,\"\n"
"            + \" isHttps: %s,\"\n"
"            + \" authScheme: %s,\"\n"
"            + \" hasJWT: %s\",\n"
"            name, ctx.isSecure(), ctx.getAuthenticationScheme(), hasJwt());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:269
#: upstream/_guides/security-jwt.adoc:566
#, no-wrap
msgid ""
"    private boolean hasJwt() {\n"
"        return jwt.getClaimNames() != null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:271
#, fuzzy
msgid "Here we inject `JsonWebToken`"
msgstr "ここで私たちは注入します。 `JsonWebToken`"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:272
#, fuzzy
msgid "This new endpoint will be located at /secured/roles-allowed"
msgstr "この新しいエンドポイントは /secured/roles-allowed に配置されます。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:274
#, fuzzy
msgid "@RolesAllowed is a JSR 250 common security annotation that indicates that the given endpoint is accessible by a caller if they have either a \"User\" or \"Admin\" role assigned."
msgstr "RolesAllowedは、「User」または「Admin」ロールのいずれかが割り当てられている場合に、指定されたエンドポイントが呼び出し元からアクセス可能であることを示すJSR250共通のセキュリティーアノテーションである。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:275
#, fuzzy
msgid "Here we build the reply the same way as in the `hello` method but also add a value of the JWT `birthdate` claim by directly calling the injected `JsonWebToken`."
msgstr "ここでは、 `hello` メソッドと同じ方法でリプライを作成しますが、注入された `JsonWebToken` を直接呼び出すことで JWT `birthdate` のクレームの値を追加します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:277
#, fuzzy
msgid "After you make this addition to your `TokenSecuredResource`, rerun the `./mvnw compile quarkus:dev` command, and then try `curl -v http://127.0.0.1:8080/secured/roles-allowed; echo` to attempt to access the new endpoint. Your output should be:"
msgstr "`TokenSecuredResource` にこの追加を行った後、 `./mvnw compile quarkus:dev` コマンドを再実行してから `curl -v http://127.0.0.1:8080/secured/roles-allowed; echo` を使用して、新しいエンドポイントへのアクセスを試みます。出力は次のようになります。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:278
#, fuzzy, no-wrap
msgid "curl command for /secured/roles-allowed"
msgstr "curl コマンドで /secured/roles-allowed を実行します。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:298
#, no-wrap
msgid ""
"$ curl -v http://127.0.0.1:8080/secured/roles-allowed; echo\n"
"*   Trying 127.0.0.1...\n"
"* TCP_NODELAY set\n"
"* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)\n"
"> GET /secured/roles-allowed HTTP/1.1\n"
"> Host: 127.0.0.1:8080\n"
"> User-Agent: curl/7.54.0\n"
"> Accept: */*\n"
">\n"
"< HTTP/1.1 401 Unauthorized\n"
"< Connection: keep-alive\n"
"< Content-Type: text/html;charset=UTF-8\n"
"< Content-Length: 14\n"
"< Date: Sun, 03 Mar 2019 16:32:34 GMT\n"
"<\n"
"* Connection #0 to host 127.0.0.1 left intact\n"
"Not authorized\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:301
#, fuzzy
msgid "Excellent, we have not provided any JWT in the request, so we should not be able to access the endpoint, and we were not. Instead we received an HTTP 401 Unauthorized error. We need to obtain and pass in a valid JWT to access that endpoint. There are two steps to this, 1) configuring our {extension-name} extension with information on how to validate a JWT, and 2) generating a matching JWT with the appropriate claims."
msgstr "素晴らしい、リクエストにJWTを提供していないので、エンドポイントにアクセスできないはずなのですが、そうではありませんでした。代わりにHTTP 401 Unauthorizedエラーを受信しました。そのエンドポイントにアクセスするには、有効なJWTを取得して渡す必要があります。これには2つのステップがあります。1) JWTの検証方法に関する情報を持つ{extension-name}エクステンションを設定すること、そして2) 適切なクレームを持つマッチするJWTを生成することです。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:302
#, fuzzy, no-wrap
msgid "Configuring the {extension-name} Extension Security Information"
msgstr "エクステンション名}エクステンションセキュリティー情報の設定"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:305
#, fuzzy
msgid "Create a `security-jwt-quickstart/src/main/resources/application.properties` with the following content:"
msgstr "以下の内容の `security-jwt-quickstart/src/main/resources/application.properties` を作成します。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:306
#, fuzzy, no-wrap
msgid "application.properties for TokenSecuredResource"
msgstr "TokenSecuredResource用のapplication.properties"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:311
#, no-wrap
msgid ""
"mp.jwt.verify.publickey.location=META-INF/resources/publicKey.pem #<1>\n"
"mp.jwt.verify.issuer=https://example.com/issuer #<2>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:313
#, fuzzy
msgid "We are setting public key location to point to a classpath publicKey.pem resource location. We will add this key in part B, <<Adding a Public Key>>."
msgstr "公開鍵の場所をクラスパスpublicKey.pemリソースの場所を指すように設定しています。この鍵を追加するのは、パートBの link:#Adding a Public Key[[公開鍵の追加]] で行います。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:314
#, fuzzy
msgid "We are setting the issuer to the URL string `https://example.com/issuer`."
msgstr "発行者をURLの文字列に設定しています。 `https://example.com/issuer` ."

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:315
#, fuzzy, no-wrap
msgid "Adding a Public Key"
msgstr "公開鍵の追加"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:323
#, fuzzy
msgid "The https://tools.ietf.org/html/rfc7519[JWT specification] defines various levels of security of JWTs that one can use.  The {mp-jwt} specification requires that JWTs that are signed with the RSA-256 signature algorithm. This in turn requires a RSA public key pair. On the REST endpoint server side, you need to configure the location of the RSA public key to use to verify the JWT sent along with requests. The `mp.jwt.verify.publickey.location=publicKey.pem` setting configured previously expects that the public key is available on the classpath as `publicKey.pem`. To accomplish this, copy the following content to a `security-jwt-quickstart/src/main/resources/META-INF/resources/publicKey.pem` file."
msgstr "link:https://tools.ietf.org/html/rfc7519[JWT仕様は] 、使用可能なJWTの様々なセキュリティーレベルを定義しています。mp-jwt}仕様では、RSA-256署名アルゴリズムで署名されたJWTを要求しています。これにより、RSA 公開鍵ペアが必要になります。REST エンドポイントサーバー側では、リクエストと一緒に送信された JWT を検証するために使用する RSA 公開鍵の場所を設定する必要があります。先に構成した `mp.jwt.verify.publickey.location=publicKey.pem` の設定では、公開鍵がクラスパス上で `publicKey.pem` として利用可能であることを想定しています。そのためには、以下の内容を `security-jwt-quickstart/src/main/resources/META-INF/resources/publicKey.pem` ファイルにコピーします。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:325
#, fuzzy
msgid "Adding `publicKey.pem` to `resources/META-INF/resources` ensures that it is available in the native image without having to provide a GraalVM resource file."
msgstr "`publicKey.pem` を `resources/META-INF/resources` に追加することで、GraalVM リソースファイルを提供しなくてもネイティブイメージで利用できるようになります。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:326
#, fuzzy, no-wrap
msgid "RSA Public Key PEM Content"
msgstr "RSA公開鍵PEMコンテンツ"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:338
#, no-wrap
msgid ""
"-----BEGIN PUBLIC KEY-----\n"
"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEq\n"
"Fyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwR\n"
"TYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5e\n"
"UF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9\n"
"AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYn\n"
"sIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9x\n"
"nQIDAQAB\n"
"-----END PUBLIC KEY-----\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:340
#, fuzzy, no-wrap
msgid "Generating a JWT"
msgstr "JWTの生成"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:343
#, fuzzy
msgid "Often one obtains a JWT from an identity manager like https://www.keycloak.org/[Keycloak], but for this quickstart we will generate our own using the JWT generation API provided by `smallrye-jwt` (see <<generate-jwt-tokens, Generate JWT tokens with SmallRye JWT>> for more information)."
msgstr "多くの場合、 link:https://www.keycloak.org/[Keycloak] のような ID マネージャーから JWT を取得しますが、今回のクイックスタートでは `smallrye-jwt` で提供されている JWT 生成 API を使用して独自に JWT を生成します (詳細は「 link:#generate-jwt-tokens[Generate JWT tokens with SmallRye JWT] 」を参照)。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:345
#, fuzzy
msgid "Take the code from the following listing and place into `security-jwt-quickstart/src/main/java/org/acme/security/jwt/GenerateToken.java`:"
msgstr "次のリストからコードを取り、 `security-jwt-quickstart/src/main/java/org/acme/security/jwt/GenerateToken.java` に配置します。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:346
#, fuzzy, no-wrap
msgid "GenerateToken main Driver Class"
msgstr "GenerateToken メインドライバークラス"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:353
#, no-wrap
msgid ""
"import java.util.Arrays;\n"
"import java.util.HashSet;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:355
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.Claims;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:357
#, no-wrap
msgid "import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:372
#, no-wrap
msgid ""
"public class GenerateToken {\n"
"    /**\n"
"     * Generate JWT token\n"
"     */\n"
"    public static void main(String[] args) {\n"
"        String token =\n"
"           Jwt.issuer(\"https://example.com/issuer\") // <1>\n"
"             .upn(\"jdoe@quarkus.io\") // <2>\n"
"             .groups(new HashSet<>(Arrays.asList(\"User\", \"Admin\"))) // <3>\n"
"             .claim(Claims.birthdate.name(), \"2001-07-13\") // <4>\n"
"           .sign();\n"
"        System.out.println(token);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:376
#, fuzzy
msgid "The `iss` claim is the issuer of the JWT. This needs to match the server side `mp.jwt.verify.issuer`.  in order for the token to be accepted as valid."
msgstr "`iss` クレームは JWT の発行者です。これは、トークンを有効なものとして受け入れるためには、サーバー側の `mp.jwt.verify.issuer` ."

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:378
#, fuzzy
msgid "The `upn` claim is defined by the {mp-jwt} spec as preferred claim to use for the `Principal` seen via the container security APIs."
msgstr "`upn` のクレームは、コンテナーセキュリティー API を通じて見られる `Principal` に使用するための好ましいクレームとして {mp-jwt} 仕様で定義されています。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:379
#, fuzzy
msgid "The `group` claim provides the groups and top-level roles associated with the JWT bearer."
msgstr "`group` クレームは、JWT ベアラに関連するグループとトップレベルの役割を提供します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:380
#, fuzzy
msgid "The `birthday` claim. It can be considered to be a sensitive claim so you may want to consider encrypting the claims, see <<generate-jwt-tokens, Generate JWT tokens with SmallRye JWT>>."
msgstr "`birthday` クレーム。これは機密性の高いクレームとみなされる可能性があるので、クレームを暗号化することを検討したいかもしれません link:#generate-jwt-tokens[。]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:382
#, fuzzy
msgid "Note for this code to work we need the content of the RSA private key that corresponds to the public key we have in the TokenSecuredResource application. Take the following PEM content and place it into `security-jwt-quickstart/src/test/resources/privateKey.pem`:"
msgstr "このコードを動作させるためには、TokenSecuredResource アプリケーションにある公開鍵に対応する RSA 秘密鍵の内容が必要であることに注意してください。以下の PEM コンテンツを取り、 `security-jwt-quickstart/src/test/resources/privateKey.pem` ."

#. type: Block title
#: upstream/_guides/security-jwt.adoc:383
#, fuzzy, no-wrap
msgid "RSA Private Key PEM Content"
msgstr "RSA 秘密鍵 PEM コンテンツ"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:414
#, no-wrap
msgid ""
"-----BEGIN PRIVATE KEY-----\n"
"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCWK8UjyoHgPTLa\n"
"PLQJ8SoXLLjpHSjtLxMqmzHnFscqhTVVaDpCRCb6e3Ii/WniQTWw8RA7vf4djz4H\n"
"OzvlfBFNgvUGZHXDwnmGaNVaNzpHYFMEYBhE8VGGiveSkzqeLZI+Y02G6sQAfDtN\n"
"qqzM/l5QX8X34oQFaTBW1r49nftvCpITiwJvWyhkWtXP9RP8sXi1im5Vi3dhupOh\n"
"nelk5n0BfajUYIbfHA6ORzjHRbt7NtBl0L2J+0/FUdHyKs6KMlFGNw8O0Dq88qnM\n"
"uXoLJiewhg9332W3DFMeOveel+//cvDnRsCRtPgd4sXFPHh+UShkso7+DRsChXa6\n"
"oGGQD3GdAgMBAAECggEAAjfTSZwMHwvIXIDZB+yP+pemg4ryt84iMlbofclQV8hv\n"
"6TsI4UGwcbKxFOM5VSYxbNOisb80qasb929gixsyBjsQ8284bhPJR7r0q8h1C+jY\n"
"URA6S4pk8d/LmFakXwG9Tz6YPo3pJziuh48lzkFTk0xW2Dp4SLwtAptZY/+ZXyJ6\n"
"96QXDrZKSSM99Jh9s7a0ST66WoxSS0UC51ak+Keb0KJ1jz4bIJ2C3r4rYlSu4hHB\n"
"Y73GfkWORtQuyUDa9yDOem0/z0nr6pp+pBSXPLHADsqvZiIhxD/O0Xk5I6/zVHB3\n"
"zuoQqLERk0WvA8FXz2o8AYwcQRY2g30eX9kU4uDQAQKBgQDmf7KGImUGitsEPepF\n"
"KH5yLWYWqghHx6wfV+fdbBxoqn9WlwcQ7JbynIiVx8MX8/1lLCCe8v41ypu/eLtP\n"
"iY1ev2IKdrUStvYRSsFigRkuPHUo1ajsGHQd+ucTDf58mn7kRLW1JGMeGxo/t32B\n"
"m96Af6AiPWPEJuVfgGV0iwg+HQKBgQCmyPzL9M2rhYZn1AozRUguvlpmJHU2DpqS\n"
"34Q+7x2Ghf7MgBUhqE0t3FAOxEC7IYBwHmeYOvFR8ZkVRKNF4gbnF9RtLdz0DMEG\n"
"5qsMnvJUSQbNB1yVjUCnDAtElqiFRlQ/k0LgYkjKDY7LfciZl9uJRl0OSYeX/qG2\n"
"tRW09tOpgQKBgBSGkpM3RN/MRayfBtmZvYjVWh3yjkI2GbHA1jj1g6IebLB9SnfL\n"
"WbXJErCj1U+wvoPf5hfBc7m+jRgD3Eo86YXibQyZfY5pFIh9q7Ll5CQl5hj4zc4Y\n"
"b16sFR+xQ1Q9Pcd+BuBWmSz5JOE/qcF869dthgkGhnfVLt/OQzqZluZRAoGAXQ09\n"
"nT0TkmKIvlza5Af/YbTqEpq8mlBDhTYXPlWCD4+qvMWpBII1rSSBtftgcgca9XLB\n"
"MXmRMbqtQeRtg4u7dishZVh1MeP7vbHsNLppUQT9Ol6lFPsd2xUpJDc6BkFat62d\n"
"Xjr3iWNPC9E9nhPPdCNBv7reX7q81obpeXFMXgECgYEAmk2Qlus3OV0tfoNRqNpe\n"
"Mb0teduf2+h3xaI1XDIzPVtZF35ELY/RkAHlmWRT4PCdR0zXDidE67L6XdJyecSt\n"
"FdOUH8z5qUraVVebRFvJqf/oGsXc4+ex1ZKUTbY0wqY1y9E39yvB3MaTmZFuuqk8\n"
"f3cg+fr8aou7pr9SHhJlZCU=\n"
"-----END PRIVATE KEY-----\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:417
#, fuzzy
msgid "We will use a `smallrye.jwt.sign.key-location` property to point to this private signing key."
msgstr "この秘密署名鍵を指すために `smallrye.jwt.sign.key-location` プロパティーを使用します。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:419
#, fuzzy, no-wrap
msgid "Generating Keys with OpenSSL"
msgstr "OpenSSL でキーを生成する"

#. type: delimited block =
#: upstream/_guides/security-jwt.adoc:422
#, fuzzy
msgid "It is also possible to generate a public and private key pair using the OpenSSL command line tool."
msgstr "また、OpenSSL のコマンドラインツールを使って公開鍵と秘密鍵のペアを生成することも可能です。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:423
#, fuzzy, no-wrap
msgid "openssl commands for generating keys"
msgstr "鍵を生成するための openssl コマンド"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:428
#, no-wrap
msgid ""
"openssl genrsa -out rsaPrivateKey.pem 2048\n"
"openssl rsa -pubout -in rsaPrivateKey.pem -out publicKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:431
#, fuzzy
msgid "An additional step is needed for generating the private key for converting it into the PKCS#8 format."
msgstr "秘密鍵を PKCS#8 形式に変換するためには、追加のステップが必要である。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:432
#, fuzzy, no-wrap
msgid "openssl command for converting private key"
msgstr "秘密鍵を変換するためのopensslコマンド"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:436
#, no-wrap
msgid "openssl pkcs8 -topk8 -nocrypt -inform pem -in rsaPrivateKey.pem -outform pem -out privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:439
#, fuzzy
msgid "You can use the generated pair of keys instead of the keys used in this quickstart."
msgstr "このクイックスタートで使用するキーの代わりに、生成されたキーのペアを使用することができます。"

#. type: delimited block =
#: upstream/_guides/security-jwt.adoc:442
#, fuzzy
msgid "Now we can generate a JWT to use with `TokenSecuredResource` endpoint. To do this, run the following command:"
msgstr "これで、 `TokenSecuredResource` エンドポイントで使用する JWT を生成することができるようになりました。これを行うには、以下のコマンドを実行します。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:443
#, fuzzy, no-wrap
msgid "Command to Generate JWT"
msgstr "JWTを生成するコマンド"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:445
#, fuzzy, no-wrap
msgid "Sample JWT Generation Output"
msgstr "サンプルJWT生成出力"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:449
#, no-wrap
msgid "$ mvn exec:java -Dexec.mainClass=org.acme.security.jwt.GenerateToken -Dexec.classpathScope=test -Dsmallrye.jwt.sign.key-location=privateKey.pem\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:451
#, no-wrap
msgid "eyJraWQiOiJcL3ByaXZhdGVLZXkucGVtIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJqZG9lLXVzaW5nLWp3dC1yYmFjIiwiYXVkIjoidXNpbmctand0LXJiYWMiLCJ1cG4iOiJqZG9lQHF1YXJrdXMuaW8iLCJiaXJ0aGRhdGUiOiIyMDAxLTA3LTEzIiwiYXV0aF90aW1lIjoxNTUxNjU5Njc2LCJpc3MiOiJodHRwczpcL1wvcXVhcmt1cy5pb1wvdXNpbmctand0LXJiYWMiLCJyb2xlTWFwcGluZ3MiOnsiZ3JvdXAyIjoiR3JvdXAyTWFwcGVkUm9sZSIsImdyb3VwMSI6Ikdyb3VwMU1hcHBlZFJvbGUifSwiZ3JvdXBzIjpbIkVjaG9lciIsIlRlc3RlciIsIlN1YnNjcmliZXIiLCJncm91cDIiXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiamRvZSIsImV4cCI6MTU1MTY1OTk3NiwiaWF0IjoxNTUxNjU5Njc2LCJqdGkiOiJhLTEyMyJ9.O9tx_wNNS4qdpFhxeD1e7v4aBNWz1FCq0UV8qmXd7dW9xM4hA5TO-ZREk3ApMrL7_rnX8z81qGPIo_R8IfHDyNaI1SLD56gVX-NaOLS2OjfcbO3zOWJPKR_BoZkYACtMoqlWgIwIRC-wJKUJU025dHZiNL0FWO4PjwuCz8hpZYXIuRscfFhXKrDX1fh3jDhTsOEFfu67ACd85f3BdX9pe-ayKSVLh_RSbTbBPeyoYPE59FW7H5-i8IE-Gqu838Hz0i38ksEJFI25eR-AJ6_PSUD0_-TV3NjXhF3bFIeT4VSaIZcpibekoJg0cQm-4ApPEcPLdgTejYHA-mupb8hSwg\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:455
#, fuzzy
msgid "The JWT string is the Base64 URL encoded string that has 3 parts separated by '.' characters.  First part - JWT headers, second part - JWT claims, third part - JWT signature."
msgstr "JWT文字列は、Base64のURLエンコードされた文字列で、'.'で区切られた3つの部分から構成されています。最初の部分 - JWTヘッダ、2番目の部分 - JWTクレーム、3番目の部分 - JWT署名。"

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:456
#, fuzzy, no-wrap
msgid "Finally, Secured Access to /secured/roles-allowed"
msgstr "最後に、/secured/roles-allowedへのセキュアアクセス"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:458
#, fuzzy
msgid "Now let's use this to make a secured request to the /secured/roles-allowed endpoint. Make sure you have the Quarkus server running using the `./mvnw compile quarkus:dev` command, and then run the following command, making sure to use your version of the generated JWT from the previous step:"
msgstr "これを使用して、/secured/roles-allowedエンドポイントにセキュアなリクエストを行いましょう。 `./mvnw compile quarkus:dev` コマンドを使用して Quarkus サーバーを起動していることを確認してから、次のコマンドを実行します。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:462
#, no-wrap
msgid "curl -H \"Authorization: Bearer eyJraWQiOiJcL3ByaXZhdGVLZXkucGVtIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJqZG9lLXVzaW5nLWp3dC1yYmFjIiwiYXVkIjoidXNpbmctand0LXJiYWMiLCJ1cG4iOiJqZG9lQHF1YXJrdXMuaW8iLCJiaXJ0aGRhdGUiOiIyMDAxLTA3LTEzIiwiYXV0aF90aW1lIjoxNTUxNjUyMDkxLCJpc3MiOiJodHRwczpcL1wvcXVhcmt1cy5pb1wvdXNpbmctand0LXJiYWMiLCJyb2xlTWFwcGluZ3MiOnsiZ3JvdXAyIjoiR3JvdXAyTWFwcGVkUm9sZSIsImdyb3VwMSI6Ikdyb3VwMU1hcHBlZFJvbGUifSwiZ3JvdXBzIjpbIkVjaG9lciIsIlRlc3RlciIsIlN1YnNjcmliZXIiLCJncm91cDIiXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiamRvZSIsImV4cCI6MTU1MTY1MjM5MSwiaWF0IjoxNTUxNjUyMDkxLCJqdGkiOiJhLTEyMyJ9.aPA4Rlc4kw7n_OZZRRk25xZydJy_J_3BRR8ryYLyHTO1o68_aNWWQCgpnAuOW64svPhPnLYYnQzK-l2vHX34B64JySyBD4y_vRObGmdwH_SEufBAWZV7mkG3Y4mTKT3_4EWNu4VH92IhdnkGI4GJB6yHAEzlQI6EdSOa4Nq8Gp4uPGqHsUZTJrA3uIW0TbNshFBm47-oVM3ZUrBz57JKtr0e9jv0HjPQWyvbzx1HuxZd6eA8ow8xzvooKXFxoSFCMnxotd3wagvYQ9ysBa89bgzL-lhjWtusuMFDUVYwFqADE7oOSOD4Vtclgq8svznBQ-YpfTHfb9QEcofMlpyjNA\" http://127.0.0.1:8080/secured/roles-allowed; echo\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-jwt.adoc:464
#, fuzzy, no-wrap
msgid "curl Command for /secured/roles-allowed With JWT"
msgstr "curl /secured/roles-allowed のコマンドです。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:469
#, no-wrap
msgid ""
"$ curl -H \"Authorization: Bearer eyJraWQ...\" http://127.0.0.1:8080/secured/roles-allowed; echo\n"
"hello + jdoe@quarkus.io, isHttps: false, authScheme: Bearer, hasJWT: true, birthdate: 2001-07-13\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:472
#, fuzzy
msgid "Success! We now have:"
msgstr "成功!今、私たちは持っています。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:474
#, fuzzy
msgid "a non-anonymous caller name of jdoe@quarkus.io"
msgstr "link:mailto:jdoe@quarkus.io[jdoe@quarkus.io] の非匿名の発信者名"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:475
#, fuzzy
msgid "an authentication scheme of Bearer"
msgstr "ベアラの認証スキーム"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:476
#, fuzzy
msgid "a non-null JsonWebToken"
msgstr "非 null JsonWebToken"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:477
#, fuzzy
msgid "birthdate claim value"
msgstr "生年月日債権額"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:478
#, fuzzy, no-wrap
msgid "Using the JsonWebToken and Claim Injection"
msgstr "JsonWebTokenとクレームインジェクションを使う"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:485
#, fuzzy
msgid "Now that we can generate a JWT to access our secured REST endpoints, let's see what more we can do with the `JsonWebToken` interface and the JWT claims. The `org.eclipse.microprofile.jwt.JsonWebToken` interface extends the `java.security.Principal` interface, and is in fact the type of the object that is returned by the `javax.ws.rs.core.SecurityContext#getUserPrincipal()` call we used previously. This means that code that does not use CDI but does have access to the REST container `SecurityContext` can get hold of the caller `JsonWebToken` interface by casting the `SecurityContext#getUserPrincipal()`."
msgstr "これで、セキュアな REST エンドポイントにアクセスするための JWT を生成できるようになったので、 `JsonWebToken` インターフェイスと JWT の主張を使って、さらに何ができるか見てみましょう。 `org.eclipse.microprofile.jwt.JsonWebToken` インターフェイスは `java.security.Principal` インターフェイスを拡張したもので、先ほど使用した `javax.ws.rs.core.SecurityContext#getUserPrincipal()` 呼び出しで返されるオブジェクトの型です。これは、CDI を使用しないが REST コンテナー `SecurityContext` にアクセスできるコードは、 `SecurityContext#getUserPrincipal()` をキャストすることで、呼び出し元の `JsonWebToken` インターフェイスを取得できることを意味します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:488
#, fuzzy
msgid "The `JsonWebToken` interface defines methods for accessing claims in the underlying JWT. It provides accessors for common claims that are required by the {mp-jwt} specification as well as arbitrary claims that may exist in the JWT."
msgstr "`JsonWebToken` インターフェイスは、基礎となる JWT のクレームにアクセスするためのメソッドを定義しています。これは、{mp-jwt}仕様で要求される一般的なクレームや、JWTに存在する可能性のある任意のクレームのためのアクセサを提供します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:491
#, fuzzy
msgid "All the JWT claims can also be injected. Let's expand our `TokenSecuredResource` with another endpoint /secured/roles-allowed-admin which uses the injected `birthdate` claim (as opposed to getting it from `JsonWebToken`):"
msgstr "すべての JWT クレームを注入することもできます。 `TokenSecuredResource` を別のエンドポイント /secured/roles-allowed-admin で拡張して、注入された `birthdate` のクレームを利用してみましょう ( `JsonWebToken` から取得するのとは対照的です )。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:511
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.Claim;\n"
"import org.eclipse.microprofile.jwt.Claims;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:521
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt;\n"
"    @Inject\n"
"    @Claim(standard = Claims.birthdate)\n"
"    String birthdate; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:537
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"roles-allowed\")\n"
"    @RolesAllowed({ \"User\", \"Admin\" })\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String helloRolesAllowed(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx) + \", birthdate: \" + jwt.getClaim(\"birthdate\").toString();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:545
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"roles-allowed-admin\")\n"
"    @RolesAllowed(\"Admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String helloRolesAllowedAdmin(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx) + \", birthdate: \" + birthdate; // <2>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:568
#, fuzzy
msgid "Here we use the injected `birthday` claim."
msgstr "ここでは、注入された `birthday` のクレームを使用しています。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:569
#, fuzzy
msgid "Here we use the injected `birthday` claim to build the final reply."
msgstr "ここでは、注入された `birthday` のクレームを使用して、最終的な返信を構築します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:571
#, fuzzy
msgid "Now generate the token again and run:"
msgstr "ここで再びトークンを生成して実行します。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:575
#, no-wrap
msgid "curl -H \"Authorization: Bearer eyJraWQiOiJcL3ByaXZhdGVLZXkucGVtIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJqZG9lLXVzaW5nLWp3dC1yYmFjIiwiYXVkIjoidXNpbmctand0LXJiYWMiLCJ1cG4iOiJqZG9lQHF1YXJrdXMuaW8iLCJiaXJ0aGRhdGUiOiIyMDAxLTA3LTEzIiwiYXV0aF90aW1lIjoxNTUxNjUyMDkxLCJpc3MiOiJodHRwczpcL1wvcXVhcmt1cy5pb1wvdXNpbmctand0LXJiYWMiLCJyb2xlTWFwcGluZ3MiOnsiZ3JvdXAyIjoiR3JvdXAyTWFwcGVkUm9sZSIsImdyb3VwMSI6Ikdyb3VwMU1hcHBlZFJvbGUifSwiZ3JvdXBzIjpbIkVjaG9lciIsIlRlc3RlciIsIlN1YnNjcmliZXIiLCJncm91cDIiXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiamRvZSIsImV4cCI6MTU1MTY1MjM5MSwiaWF0IjoxNTUxNjUyMDkxLCJqdGkiOiJhLTEyMyJ9.aPA4Rlc4kw7n_OZZRRk25xZydJy_J_3BRR8ryYLyHTO1o68_aNWWQCgpnAuOW64svPhPnLYYnQzK-l2vHX34B64JySyBD4y_vRObGmdwH_SEufBAWZV7mkG3Y4mTKT3_4EWNu4VH92IhdnkGI4GJB6yHAEzlQI6EdSOa4Nq8Gp4uPGqHsUZTJrA3uIW0TbNshFBm47-oVM3ZUrBz57JKtr0e9jv0HjPQWyvbzx1HuxZd6eA8ow8xzvooKXFxoSFCMnxotd3wagvYQ9ysBa89bgzL-lhjWtusuMFDUVYwFqADE7oOSOD4Vtclgq8svznBQ-YpfTHfb9QEcofMlpyjNA\" http://127.0.0.1:8080/secured/roles-allowed-admin; echo\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:581
#, no-wrap
msgid ""
"$ curl -H \"Authorization: Bearer eyJraWQ...\" http://127.0.0.1:8080/secured/roles-allowed-admin; echo\n"
"hello + jdoe@quarkus.io, isHttps: false, authScheme: Bearer, hasJWT: true, birthdate: 2001-07-13\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:583
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:585
#, fuzzy
msgid "As usual, the application can be packaged using `./mvnw clean package` and executed using the `target/quarkus-app/quarkus-run.jar` file:"
msgstr "いつものように、 `./mvnw clean package` を使ってパッケージ化し、 `-runner.jar` ファイルを使ってアプリケーションを実行することができます。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:585
#, fuzzy, no-wrap
msgid "Runner jar Example"
msgstr "ランナージャーの例"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:591
#, no-wrap
msgid ""
"$ ./mvnw clean package\n"
"[INFO] Scanning for projects...\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:595
#, no-wrap
msgid ""
"$ java -jar target/quarkus-app/quarkus-run.jar\n"
"2019-03-28 14:27:48,839 INFO  [io.quarkus] (main) Quarkus {quarkus-version} started in 0.796s. Listening on: http://[::]:8080\n"
"2019-03-28 14:27:48,841 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jackson, security, smallrye-jwt]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:598
#, fuzzy
msgid "You can also generate the native executable with `./mvnw clean package -Pnative`."
msgstr "`./mvnw clean package -Pnative` でネイティブの実行ファイルを生成することもできます。"

#. type: Block title
#: upstream/_guides/security-jwt.adoc:598
#, fuzzy, no-wrap
msgid "Native Executable Example"
msgstr "ネイティブ実行例"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:618
#, no-wrap
msgid ""
"$ ./mvnw clean package -Pnative\n"
"[INFO] Scanning for projects...\n"
"...\n"
"[security-jwt-quickstart-runner:25602]     universe:     493.17 ms\n"
"[security-jwt-quickstart-runner:25602]      (parse):     660.41 ms\n"
"[security-jwt-quickstart-runner:25602]     (inline):   1,431.10 ms\n"
"[security-jwt-quickstart-runner:25602]    (compile):   7,301.78 ms\n"
"[security-jwt-quickstart-runner:25602]      compile:  10,542.16 ms\n"
"[security-jwt-quickstart-runner:25602]        image:   2,797.62 ms\n"
"[security-jwt-quickstart-runner:25602]        write:     988.24 ms\n"
"[security-jwt-quickstart-runner:25602]      [total]:  43,778.16 ms\n"
"[INFO] ------------------------------------------------------------------------\n"
"[INFO] BUILD SUCCESS\n"
"[INFO] ------------------------------------------------------------------------\n"
"[INFO] Total time:  51.500 s\n"
"[INFO] Finished at: 2019-03-28T14:30:56-07:00\n"
"[INFO] ------------------------------------------------------------------------\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:622
#, no-wrap
msgid ""
"$ ./target/security-jwt-quickstart-runner\n"
"2019-03-28 14:31:37,315 INFO  [io.quarkus] (main) Quarkus 0.12.0 started in 0.006s. Listening on: http://[::]:8080\n"
"2019-03-28 14:31:37,316 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jackson, security, smallrye-jwt]\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:624
#, fuzzy, no-wrap
msgid "Explore the Solution"
msgstr "解決策を探る"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:630
#, fuzzy
msgid "The solution repository located in the `security-jwt-quickstart` {quickstarts-tree-url}/security-jwt-quickstart[directory] contains all of the versions we have worked through in this quickstart guide as well as some additional endpoints that illustrate subresources with injection of ``JsonWebToken``s and their claims into those using the CDI APIs. We suggest that you check out the quickstart solutions and explore the `security-jwt-quickstart` directory to learn more about the {extension-name} extension features."
msgstr "`security-jwt-quickstart` {quickstarts-tree-url}/security-jwt-quickstart[directory]にあるソリューションリポジトリには、このクイックスタートガイドで扱ったすべてのバージョンと、CDI APIを使用しているものへの `JsonWebToken` のインジェクションとその主張を持つサブリソースを示す追加のエンドポイントが含まれています。クイックスタートのソリューションをチェックアウトし、 `security-jwt-quickstart` ディレクトリーを探索して {extension-name} エクステンションについての詳細を学ぶことをお勧めします。"

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:632
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:634
#, fuzzy, no-wrap
msgid "Quarkus configuration"
msgstr "Quarkusの設定"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:638
#, fuzzy, no-wrap
msgid "MicroProfile JWT configuration"
msgstr "MicroProfile JWTの設定"

#. type: Table
#: upstream/_guides/security-jwt.adoc:642
#: upstream/_guides/security-jwt.adoc:666
#: upstream/_guides/security-jwt.adoc:942
#, fuzzy, no-wrap
msgid "Property Nam"
msgstr "物件名"

#. type: Table
#: upstream/_guides/security-jwt.adoc:642
#: upstream/_guides/security-jwt.adoc:666
#: upstream/_guides/security-jwt.adoc:942
#, fuzzy, no-wrap
msgid "Default"
msgstr "デフォルト"

#. type: Table
#: upstream/_guides/security-jwt.adoc:643
#: upstream/_guides/security-jwt.adoc:667
#: upstream/_guides/security-jwt.adoc:943
#, fuzzy, no-wrap
msgid "Description"
msgstr "説明"

#. type: Table
#: upstream/_guides/security-jwt.adoc:643
#, fuzzy, no-wrap
msgid "mp.jwt.verify.publickey"
msgstr "mp.jwt.verify.publickey"

#. type: Table
#: upstream/_guides/security-jwt.adoc:643
#: upstream/_guides/security-jwt.adoc:644
#: upstream/_guides/security-jwt.adoc:645
#: upstream/_guides/security-jwt.adoc:673
#: upstream/_guides/security-jwt.adoc:676
#: upstream/_guides/security-jwt.adoc:677
#: upstream/_guides/security-jwt.adoc:679
#: upstream/_guides/security-jwt.adoc:680
#: upstream/_guides/security-jwt.adoc:681
#: upstream/_guides/security-jwt.adoc:683
#: upstream/_guides/security-jwt.adoc:687
#: upstream/_guides/security-jwt.adoc:688
#: upstream/_guides/security-jwt.adoc:689
#: upstream/_guides/security-jwt.adoc:691
#: upstream/_guides/security-jwt.adoc:948
#: upstream/_guides/security-jwt.adoc:949
#, fuzzy, no-wrap
msgid "non"
msgstr "非"

#. type: Table
#: upstream/_guides/security-jwt.adoc:644
#, fuzzy, no-wrap
msgid "The `mp.jwt.verify.publickey` config property allows the Public Key text itself to be supplied as a string.  The Public Key will be parsed from the supplied string in the order defined in section <<Supported Public Key Formats>>."
msgstr "`mp.jwt.verify.publickey` config プロパティーでは、公開鍵のテキスト自体を文字列として提供することができます。与えられた文字列から、 link:#Supported Public Key Formats[[サポートされている公開鍵の形式]] で定義されている順序で、公開鍵が解析されます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:644
#, fuzzy, no-wrap
msgid "mp.jwt.verify.publickey.location"
msgstr "mp.jwt.verify.publickey.location"

#. type: Table
#: upstream/_guides/security-jwt.adoc:645
#, fuzzy, no-wrap
msgid "Config property allows for an external or internal location of Public Key to be specified.  The value may be a relative path or a URL. If the value points to an HTTPS based JWK set then, for it to work in native mode, the `quarkus.ssl.native` property must also be set to `true`, see link:native-and-ssl[Using SSL With Native Executables] for more details."
msgstr "Configプロパティーでは、公開鍵の外部または内部の場所を指定することができます。値は相対パスまたは URL である。値が HTTPS ベースの JWK セットを指す場合、 link:native-and-ssl[ネイティブモード] で動作するためには、 `quarkus.ssl.native` プロパティーも `true` に設定する必要があります。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:645
#, fuzzy, no-wrap
msgid "mp.jwt.verify.issuer"
msgstr "mp.jwt.verify.issuer"

#. type: Table
#: upstream/_guides/security-jwt.adoc:647
#, fuzzy, no-wrap
msgid ""
"Config property specifies the value of the `iss` (issuer)\n"
"                           claim of the JWT that the server will accept as valid."
msgstr "Configプロパティーは、サーバーが有効として受け入れるJWTの `iss` (発行者)クレームの値を指定します。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:649
#, fuzzy, no-wrap
msgid "Supported Public Key Formats"
msgstr "サポートされている公開鍵の形式"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:653
#, fuzzy
msgid "Public Keys may be formatted in any of the following formats, specified in order of precedence:"
msgstr "公開鍵は、優先順位の高い順に指定された以下のいずれかの形式でフォーマットすることができます。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:655
#, fuzzy
msgid "Public Key Cryptography Standards #8 (PKCS#8) PEM"
msgstr "公開鍵暗号規格#8 (PKCS#8) PEM"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:656
#, fuzzy
msgid "JSON Web Key (JWK)"
msgstr "JSON ウェブキー (JWK)"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:657
#, fuzzy
msgid "JSON Web Key Set (JWKS)"
msgstr "JSONウェブキーセット(JWKS)"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:658
#, fuzzy
msgid "JSON Web Key (JWK) Base64 URL encoded"
msgstr "JSON Web Key (JWK) Base64のURLをエンコードしたもの"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:659
#, fuzzy
msgid "JSON Web Key Set (JWKS) Base64 URL encoded"
msgstr "JSONウェブキーセット(JWKS) Base64 URLエンコード版"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:660
#, fuzzy, no-wrap
msgid "Additional SmallRye JWT configuration"
msgstr "スモールライJWTの追加構成"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:663
#, fuzzy
msgid "SmallRye JWT provides more properties which can be used to customize the token processing:"
msgstr "SmallRye JWTには、トークン処理をカスタマイズするために使用できる、より多くのプロパティーが用意されています。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:667
#, fuzzy, no-wrap
msgid "smallrye.jwt.verify.key.location"
msgstr "smallrye.jwt.verify.key.location"

#. type: Table
#: upstream/_guides/security-jwt.adoc:667
#, fuzzy, no-wrap
msgid "NONE"
msgstr "なし"

#. type: Table
#: upstream/_guides/security-jwt.adoc:668
#, fuzzy, no-wrap
msgid "Location of the verification key which can point to both public and secret keys. Secret keys can only be in the JWK format. Note that 'mp.jwt.verify.publickey.location' will be ignored if this property is set."
msgstr "公開鍵と秘密鍵の両方を指すことができる検証鍵の位置。秘密鍵はJWK形式でのみ使用できます。このプロパティーが設定されている場合、'mp.jwt.verify.publickey.location'は無視されることに注意してください。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:668
#, fuzzy, no-wrap
msgid "smallrye.jwt.verify.algorith"
msgstr "smallrye.jwt.verify.algorithm"

#. type: Table
#: upstream/_guides/security-jwt.adoc:668
#, fuzzy, no-wrap
msgid "`RS256`"
msgstr "`RS256`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:669
#, fuzzy, no-wrap
msgid "Signature algorithm. Set it to `ES256` to support the Elliptic Curve signature algorithm."
msgstr "署名アルゴリズム。 `ES256` に設定して、楕円曲線署名アルゴリズムをサポートします。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:669
#, fuzzy, no-wrap
msgid "smallrye.jwt.verify.key-format"
msgstr "smallrye.jwt.verify.key-format"

#. type: Table
#: upstream/_guides/security-jwt.adoc:669
#, fuzzy, no-wrap
msgid "`ANY`"
msgstr "`ANY`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:670
#, fuzzy, no-wrap
msgid "Set this property to a specific key format such as `PEM_KEY`, `PEM_CERTIFICATE`, `JWK` or `JWK_BASE64URL` to optimize the way the verification key is loaded."
msgstr "このプロパティーを `PEM_KEY` 、 `PEM_CERTIFICATE` 、 `JWK` 、 `JWK_BASE64URL` などの特定のキー形式に設定して、検証キーのロード方法を最適化します。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:670
#, fuzzy, no-wrap
msgid "smallrye.jwt.verify.relax-key-validation"
msgstr "smallrye.jwt.verify.relax-key-validation"

#. type: Table
#: upstream/_guides/security-jwt.adoc:670
#: upstream/_guides/security-jwt.adoc:671
#: upstream/_guides/security-jwt.adoc:674
#, fuzzy, no-wrap
msgid "fals"
msgstr "虚しい"

#. type: Table
#: upstream/_guides/security-jwt.adoc:671
#, fuzzy, no-wrap
msgid "Relax the validation of the verification keys, setting this property to `true` will allow public RSA keys with the length less than 2048 bit."
msgstr "検証鍵の検証を緩和し、このプロパティーを `true` に設定すると、2048 ビット以下の長さの公開 RSA 鍵を許可します。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:671
#, fuzzy, no-wrap
msgid "smallrye.jwt.verify.certificate-thumbprint"
msgstr "スモールライウ.jwt.verify.certificat-thumbprint"

#. type: Table
#: upstream/_guides/security-jwt.adoc:672
#, fuzzy, no-wrap
msgid "If this property is enabled then a signed token must contain either 'x5t' or 'x5t#S256' X509Certificate thumbprint headers. Verification keys can only be in JWK or PEM Certificate key formats in this case. JWK keys must have a 'x5c' (Base64-encoded X509Certificate) property set."
msgstr "このプロパティーが有効な場合、署名済みトークンには、「x5t」または「x5t#S256」の X509Certificate サムプリントヘッダが含まれていなければならない。この場合、検証鍵は、JWK または PEM 証明書の鍵形式でのみ使用できる。JWK 鍵は、'x5c'(Base64 エンコードされた X509Certificate)プロパティー・セットを持たなければならない。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:672
#, fuzzy, no-wrap
msgid "smallrye.jwt.token.header"
msgstr "smallrye.jwt.token.header"

#. type: Table
#: upstream/_guides/security-jwt.adoc:672
#, fuzzy, no-wrap
msgid "`Authorization`"
msgstr "`Authorization`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:673
#, fuzzy, no-wrap
msgid "Set this property if another header such as `Cookie` is used to pass the token."
msgstr "トークンを渡すために `Cookie` などの別のヘッダが使用されている場合は、このプロパティーを設定します。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:673
#, fuzzy, no-wrap
msgid "smallrye.jwt.token.cooki"
msgstr "smallrye.jwt.token.cooki"

#. type: Table
#: upstream/_guides/security-jwt.adoc:674
#, fuzzy, no-wrap
msgid "Name of the cookie containing a token. This property will be effective only if  `smallrye.jwt.token.header` is set to `Cookie`."
msgstr "トークンを含むクッキーの名前。このプロパティーは、 `smallrye.jwt.token.header` が `Cookie` に設定されている場合にのみ有効です。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:674
#, fuzzy, no-wrap
msgid "smallrye.jwt.always-check-authorization"
msgstr "smallrye.jwt.always-check-authorization"

#. type: Table
#: upstream/_guides/security-jwt.adoc:675
#, fuzzy, no-wrap
msgid "Set this property to `true` for `Authorization` header be checked even if the `smallrye.jwt.token.header` is set to `Cookie` but no cookie with a `smallrye.jwt.token.cookie` name exists."
msgstr "このプロパティーを `true` に設定すると、 `smallrye.jwt.token.header` が `Cookie` に設定されていても `smallrye.jwt.token.cookie` という名前のクッキーが存在しない場合でも `Authorization` ヘッダがチェックされるようになります。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:675
#, fuzzy, no-wrap
msgid "smallrye.jwt.token.scheme"
msgstr "スモールライウ.jwt.token.scheme"

#. type: Table
#: upstream/_guides/security-jwt.adoc:675
#, fuzzy, no-wrap
msgid "`Bearer`"
msgstr "`Bearer`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:676
#, fuzzy, no-wrap
msgid "Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`."
msgstr "代替の単一または複数のスキームを含むカンマ区切りのリスト、例えば、 `DPoP` ."

#. type: Table
#: upstream/_guides/security-jwt.adoc:676
#, fuzzy, no-wrap
msgid "smallrye.jwt.token.ki"
msgstr "スモールリー.jwt.token.ki"

#. type: Table
#: upstream/_guides/security-jwt.adoc:677
#, fuzzy, no-wrap
msgid "Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching `kid` header."
msgstr "鍵識別子。これが設定されている場合、検証用JWKキーおよびすべてのJWTトークンは、一致する `kid` ヘッダーを持たなければならない。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:677
#, fuzzy, no-wrap
msgid "smallrye.jwt.time-to-liv"
msgstr "smallrye.jwt.time-to-live"

#. type: Table
#: upstream/_guides/security-jwt.adoc:678
#, fuzzy, no-wrap
msgid "The maximum number of seconds that a JWT may be issued for use. Effectively, the difference between the expiration date of the JWT and the issued at date must not exceed this value."
msgstr "JWT が使用のために発行される最大秒数。実質的には、JWT の有効期限と発行日との差がこの値を超えてはならない。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:678
#, fuzzy, no-wrap
msgid "smallrye.jwt.require.named-principa"
msgstr "smallrye.jwt.require.named-principa"

#. type: Table
#: upstream/_guides/security-jwt.adoc:678
#, fuzzy, no-wrap
msgid "`false`"
msgstr "`false`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:679
#, fuzzy, no-wrap
msgid "If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in SmallRye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name."
msgstr "アプリケーションが名前を返す `java.security.Principal` に依存している場合、トークンには `upn` または `preferred_username` または `sub` のクレームが設定されていなければなりません。このプロパティーを設定すると、アプリケーションコードが NULL ではない `Principal` の名前を確実に処理するために、これらのクレームが利用できない場合、SmallRye JWT は例外をスローすることになります。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:679
#, fuzzy, no-wrap
msgid "smallrye.jwt.path.sub"
msgstr "smallrye.jwt.path.sub"

#. type: Table
#: upstream/_guides/security-jwt.adoc:680
#, fuzzy, no-wrap
msgid "Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims."
msgstr "サブジェクト名を含むクレームへのパス。 `realms/subject` これはトップレベルの JSON オブジェクトから始まり、複数のセグメントを含むことができ、各セグメントは JSON オブジェクト名のみを表します。このプロパティーは、トークンに「サブ」クレームがなく、別のクレームにサブジェクトが設定されている場合に使用することができます。名前空間修飾クレームには二重引用符を使用してください。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:680
#, fuzzy, no-wrap
msgid "smallrye.jwt.claims.sub"
msgstr "スモールライ.jwt.クレーム.サブ"

#. type: Table
#: upstream/_guides/security-jwt.adoc:681
#, fuzzy, no-wrap
msgid "This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set."
msgstr "このプロパティーは、現在のトークンに標準またはカスタムの `sub` クレームが設定されていない場合に、デフォルトのサブ クレーム値を設定するために使用することができます。実質的にこのプロパティーは、 `upn` または `preferred_username` または `sub` クレームが設定されていない場合に、 `java.security.Principal` の名前をカスタマイズするために使用することができます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:681
#, fuzzy, no-wrap
msgid "smallrye.jwt.path.group"
msgstr "smallrye.jwt.path.group"

#. type: Table
#: upstream/_guides/security-jwt.adoc:682
#, fuzzy, no-wrap
msgid "Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims."
msgstr "グループを含むクレームへのパス。 `realm/groups` これはトップレベルの JSON オブジェクトから始まり、複数のセグメントを含むことができ、各セグメントは JSON オブジェクト名のみを表します。このプロパティーは、トークンに 'groups' クレームがなく、別のクレームにグループが設定されている場合に使用することができます。名前空間修飾クレームには二重引用符を使用してください。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:682
#, fuzzy, no-wrap
msgid "smallrye.jwt.groups-separator"
msgstr "smallrye.jwt.groups-separator"

#. type: Table
#: upstream/_guides/security-jwt.adoc:682
#, fuzzy, no-wrap
msgid "' '"
msgstr "' '"

#. type: Table
#: upstream/_guides/security-jwt.adoc:683
#, fuzzy, no-wrap
msgid "Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence."
msgstr "複数のグループ値を含む可能性のある文字列を分割するための区切り文字。これは、 `smallrye.jwt.path.groups` プロパティーが値が文字列であるカスタム・クレームを指している場合にのみ使用されます。標準の OAuth2 `scope` クレームにはスペースで区切られたシーケンスが含まれている可能性があるため、デフォルト値はスペース1つです。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:683
#, fuzzy, no-wrap
msgid "smallrye.jwt.claims.group"
msgstr "スモールライ.jwt.クレームズグループ"

#. type: Table
#: upstream/_guides/security-jwt.adoc:684
#, fuzzy, no-wrap
msgid "This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available."
msgstr "このプロパティーは、現在のトークンに標準またはカスタムのグループ クレームがない場合に、デフォルトのグループ クレーム値を設定するために使用することができます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:684
#, fuzzy, no-wrap
msgid "smallrye.jwt.jwks.refresh-interva"
msgstr "スモールリィー.jwt.jwks.refresh-interva"

#. type: Table
#: upstream/_guides/security-jwt.adoc:684
#: upstream/_guides/security-jwt.adoc:686
#, fuzzy, no-wrap
msgid "60"
msgstr "60"

#. type: Table
#: upstream/_guides/security-jwt.adoc:685
#, fuzzy, no-wrap
msgid "JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint."
msgstr "JWK キャッシュのリフレッシュ間隔を分単位で指定します。 `mp.jwt.verify.publickey.location` が HTTPS URL ベースの JWK セットを指しており、JWK HTTPS エンドポイントから正の `max-age` パラメーター値を持つ HTTP `Cache-Control` レスポンスヘッダが返されない限り、これは無視されます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:685
#, fuzzy, no-wrap
msgid "smallrye.jwt.jwks.forced-refresh-interva"
msgstr "smallrye.jwt.jwks.forced-refresh-interva"

#. type: Table
#: upstream/_guides/security-jwt.adoc:685
#, fuzzy, no-wrap
msgid "30"
msgstr "30"

#. type: Table
#: upstream/_guides/security-jwt.adoc:686
#, fuzzy, no-wrap
msgid "Forced JWK cache refresh interval in minutes which is used to restrict the frequency of the forced refresh attempts which may happen when the token verification fails due to the cache having no JWK key with a `kid` property matching the current token's `kid` header. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set."
msgstr "これは、キャッシュに現在のトークンの `kid` ヘッダに一致する `kid` プロパティーを持つ JWK キーがないためにトークンの検証に失敗した場合に発生する可能性のある強制更新の頻度を制限するために使用される。 `mp.jwt.verify.publickey.location` が HTTPS URL ベースの JWK セットを指していない限り、この値は無視されます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:686
#, fuzzy, no-wrap
msgid "smallrye.jwt.expiration.grac"
msgstr "smallrye.jwt.expiration.grac"

#. type: Table
#: upstream/_guides/security-jwt.adoc:687
#, fuzzy, no-wrap
msgid "Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time."
msgstr "有効期限の猶予時間を秒単位で指定します。デフォルトでは、現在の時刻がトークンの有効期限から1分以内であれば、期限切れのトークンはまだ受け入れられます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:687
#, fuzzy, no-wrap
msgid "smallrye.jwt.verify.au"
msgstr "smallrye.jwt.verify.au"

#. type: Table
#: upstream/_guides/security-jwt.adoc:688
#, fuzzy, no-wrap
msgid "Comma separated list of the audiences that a token `aud` claim may contain."
msgstr "トークン `aud` クレームに含まれる可能性のあるオーディエンスのリストをカンマで区切ったもの。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:688
#, fuzzy, no-wrap
msgid "smallrye.jwt.required.claim"
msgstr "smallrye.jwt.required.claim"

#. type: Table
#: upstream/_guides/security-jwt.adoc:689
#, fuzzy, no-wrap
msgid "Comma separated list of the claims that a token must contain."
msgstr "トークンが含まなければならないクレームのコンマ区切りリスト。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:689
#, fuzzy, no-wrap
msgid "smallrye.jwt.decrypt.key.location"
msgstr "smallrye.jwt.decrypt.key.location"

#. type: Table
#: upstream/_guides/security-jwt.adoc:690
#, fuzzy, no-wrap
msgid "Config property allows for an external or internal location of Private Decryption Key to be specified."
msgstr "Configプロパティーでは、秘密復号鍵の外部または内部の場所を指定することができます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:690
#, fuzzy, no-wrap
msgid "smallrye.jwt.decrypt.algorith"
msgstr "smallrye.jwt.decrypt.アルゴリズム"

#. type: Table
#: upstream/_guides/security-jwt.adoc:690
#, fuzzy, no-wrap
msgid "`RSA_OAEP`"
msgstr "`RSA_OAEP`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:691
#, fuzzy, no-wrap
msgid "Decryption algorithm."
msgstr "復号化アルゴリズム。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:691
#, fuzzy, no-wrap
msgid "smallrye.jwt.token.decryption.ki"
msgstr "スモールライエ.jwt.token.decryption.ki"

#. type: Table
#: upstream/_guides/security-jwt.adoc:692
#, fuzzy, no-wrap
msgid "Decryption Key identifier. If it is set then the decryption JWK key as well every JWT token must have a matching `kid` header."
msgstr "復号鍵識別子。これが設定されている場合、復号化JWKキーおよびすべてのJWTトークンは、一致する `kid` ヘッダーを持たなければならない。"

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:694
#, fuzzy, no-wrap
msgid "Create JsonWebToken with JWTParser"
msgstr "JWTParserでJsonWebTokenを作成する"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:697
#, fuzzy
msgid "If the JWT token can not be injected, for example, if it is embedded in the service request payload or the service endpoint acquires it out of band, then one can use `JWTParser`:"
msgstr "JWT トークンを注入できない場合、例えば、JWT トークンがサービス要求ペイロードに埋め込まれている場合や、サービスエンドポイントがそれを帯域外で取得する場合は、 `JWTParser` ."

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:704
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.smallrye.jwt.auth.principal.JWTParser;\n"
"...\n"
"@Inject JWTParser parser;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:706
#, no-wrap
msgid "String token = getTokenFromOidcServer();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:709
#, no-wrap
msgid ""
"// Parse and verify the token\n"
"JsonWebToken jwt = parser.parse(token);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:712
#, fuzzy
msgid "You can also use it to customize the way the token is verified or decrypted. For example, one can supply a local `SecretKey`:"
msgstr "また、トークンの検証や復号化の方法をカスタマイズすることもできます。例えば、ローカルの `SecretKey` ."

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:722
#, no-wrap
msgid ""
"import javax.crypto.SecretKey;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.core.NewCookie;\n"
"import javax.ws.rs.core.Response;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.smallrye.jwt.auth.principal.JWTParser;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:727
#, no-wrap
msgid ""
"@Path(\"/secured\")\n"
"public class SecuredResource {\n"
"  @Inject JWTParser parser;\n"
"  private String secret = \"AyM1SysPpbyDfgZld3umj1qzKObwVMko\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:746
#, no-wrap
msgid ""
"  @GET\n"
"  @Produces(\"text/plain\")\n"
"  public Response getUserName(@CookieParam(\"jwt\") String jwtCookie) {\n"
"    Response response = null;\n"
"    if (jwtCookie == null) {\n"
"        // Create a JWT token signed using the 'HS256' algorithm\n"
"        String newJwtCookie = Jwt.upn(\"Alice\").signWithSecret(secret);\n"
"        // or create a JWT token encrypted using the 'A256KW' algorithm\n"
"        // Jwt.upn(\"alice\").encryptWithSecret(secret);\n"
"        return Response.ok(\"Alice\").cookie(new NewCookie(\"jwt\", newJwtCookie)).build();\n"
"    } else {\n"
"        // All mp.jwt and smallrye.jwt properties are still effective, only the verification key is customized.\n"
"        JsonWebToken jwt = parser.verify(jwtCookie, secret);\n"
"        // or jwt = parser.decrypt(jwtCookie, secret);\n"
"        return Response.ok(jwt.getName()).build();\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:748
#, no-wrap
msgid "Token Decryption"
msgstr "トークン復号化"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:752
#, fuzzy
msgid "If your application needs to accept the tokens with the encrypted claims or with the encrypted inner signed claims then all you have to do is to set `smallrye.jwt.decrypt.key-location` pointing to the decryption key."
msgstr "アプリケーションが暗号化されたクレームや暗号化された内部署名付きクレームのトークンを受け入れる必要がある場合は、 `smallrye.jwt.decrypt.key-location` を復号化キーを指すように設定するだけです。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:756
#, fuzzy
msgid "If this is the only key property which is set then the incoming token is expected to contain the encrypted claims only.  If either `mp.jwt.verify.publickey` or `mp.jwt.verify.publickey.location` verification properties are also set then the incoming token is expected to contain the encrypted inner-signed token."
msgstr "これが唯一のキープロパティーとして設定されている場合、受信トークンには暗号化されたクレームのみが含まれることが予想されます。 `mp.jwt.verify.publickey` または `mp.jwt.verify.publickey.location` の検証プロパティーが設定されている場合、受信トークンには暗号化された内部署名付きトークンが含まれると予想されます。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:758
#, fuzzy
msgid "See <<generate-jwt-tokens, Generate JWT tokens with SmallRye JWT>> and learn how to generate the encrypted or inner-signed and then encrypted tokens fast."
msgstr "link:#generate-jwt-tokens[SmallRye JWTでJWTトークンを生成し] 、暗号化されたトークンや内部署名されたトークンを高速に生成する方法については、「Generate J link:#generate-jwt-tokens[WT tokens with SmallRye JWT] 」を参照してください。"

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:759
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:762
msgid "Set `quarkus.log.category.\"io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator\".level=TRACE` and `quarkus.log.category.\"io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator\".min-level=TRACE` to see more details about the token verification or decryption errors."
msgstr "`quarkus.log.category.\"io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator\".level=TRACE` と `quarkus.log.category.\"io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator\".min-level=TRACE` を設定すると、トークンの検証エラーや復号エラーの詳細が表示されます。"

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:763
#, no-wrap
msgid "Custom Factories"
msgstr "カスタムファクトリー"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:767
#, fuzzy
msgid "`io.smallrye.jwt.auth.principal.DefaultJWTCallerPrincipalFactory` is used by default to parse and verify JWT tokens and convert them to `JsonWebToken` principals.  It uses `MP JWT` and `smallrye-jwt` properties listed in the `Configuration` section to verify and customize JWT tokens."
msgstr "`io.smallrye.jwt.auth.principal.DefaultJWTCallerPrincipalFactory` は、デフォルトで使用され、JWT トークンをパースして検証し、それらを `JsonWebToken` プリンシパルに変換します。 `MP JWT` と `smallrye-jwt` プロパティーを使用して、 `Configuration` セクションにリストされている JWT トークンの検証とカスタマイズを行います。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:769
#, fuzzy
msgid "If you need to provide your own factory, for example, to avoid verifying the tokens again which have already been verified by the firewall, then you can either use a `ServiceLoader` mechanism by providing a `META-INF/services/io.smallrye.jwt.auth.principal.JWTCallerPrincipalFactory` resource or simply have an `Alternative` CDI bean implementation like this one:"
msgstr "ファイアウォールで既に検証済みのトークンを再度検証しないようにするためなど、独自のファクトリを提供する必要がある場合は、 `ServiceLoader` の仕組みを利用して `META-INF/services/io.smallrye.jwt.auth.principal.JWTCallerPrincipalFactory` リソースを提供するか、単にこのような `Alternative` CDI Bean の実装を持っているかのどちらかになります。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:784
#, no-wrap
msgid ""
"import java.nio.charset.StandardCharsets;\n"
"import java.util.Base64;\n"
"import javax.annotation.Priority;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.inject.Alternative;\n"
"import org.jose4j.jwt.JwtClaims;\n"
"import org.jose4j.jwt.consumer.InvalidJwtException;\n"
"import io.smallrye.jwt.auth.principal.DefaultJWTCallerPrincipal;\n"
"import io.smallrye.jwt.auth.principal.JWTAuthContextInfo;\n"
"import io.smallrye.jwt.auth.principal.JWTCallerPrincipal;\n"
"import io.smallrye.jwt.auth.principal.JWTCallerPrincipalFactory;\n"
"import io.smallrye.jwt.auth.principal.ParseException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:789
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Alternative\n"
"@Priority(1)\n"
"public class TestJWTCallerPrincipalFactory extends JWTCallerPrincipalFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:801
#, no-wrap
msgid ""
"    @Override\n"
"    public JWTCallerPrincipal parse(String token, JWTAuthContextInfo authContextInfo) throws ParseException {\n"
"        try {\n"
"            // Token has already been verified, parse the token claims only\n"
"            String json = new String(Base64.getUrlDecoder().decode(token.split(\"\\\\.\")[1]), StandardCharsets.UTF_8);\n"
"            return new DefaultJWTCallerPrincipal(JwtClaims.parse(json));\n"
"        } catch (InvalidJwtException ex) {\n"
"            throw new ParseException(ex.getMessage());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:804
#, fuzzy, no-wrap
msgid "Generate JWT tokens with SmallRye JWT"
msgstr "SmallRye JWTでJWTトークンを生成する"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:810
#, fuzzy
msgid "JWT claims can be signed or encrypted or signed first and the nested JWT token encrypted.  Signing the claims is used most often to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the link:https://tools.ietf.org/html/rfc7515[JSON Web Signature] specification.  However, when the claims are sensitive, their confidentiality can be guaranteed by following the steps described in the link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption] specification to produce a JWT token with the encrypted claims.  Finally both the confidentiality and integrity of the claims can be further enforced by signing them first and then encrypting the nested JWT token."
msgstr "JWT クレームは、署名または暗号化、または最初に署名し、入れ子になった JWT トークンを暗号化することができます。クレームへの署名は、クレームの安全性を確保するために最も頻繁に使用されます。現在JWTトークンとして知られているものは、通常、JSON link:https://tools.ietf.org/html/rfc7515[Web Signature] 仕様に記載されている手順を使用して、JSON形式でクレームに署名することで生成されます。しかし、クレームが機密性の高いものである場合には、 link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption] 仕様に記載されている手順に従って、暗号化されたクレームを含む JWT トークンを生成することで、その機密性を保証することができます。最後に、クレームの機密性と完全性は、最初に署名してから入れ子になったJWTトークンを暗号化することで、さらに強化することができます。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:812
#, fuzzy
msgid "SmallRye JWT provides an API for securing the JWT claims using all of these options."
msgstr "SmallRye JWTは、これらすべてのオプションを使用してJWTのクレームを保護するためのAPIを提供しています。"

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:813
#, no-wrap
msgid "Maven dependency"
msgstr "Maven依存関係"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:821
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-smallrye-jwt-build</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:825
#, fuzzy
msgid "Note you can use Smallrye JWT Build API without having to create MP JWT endpoints.  It can also be excluded from `quarkus-smallrye-jwt` if MP JWT endpoints do not need to generate JWT tokens."
msgstr "MP JWTエンドポイントを作成しなくてもSmallrye JWT Build APIを使用できることに注意してください。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:826
#, fuzzy, no-wrap
msgid "Create JwtClaimsBuilder and set the claims"
msgstr "JwtClaimsBuilderを作成し、クレームを設定します。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:829
#, fuzzy
msgid "The first step is to initialize a `JwtClaimsBuilder` using one of the options below and add some claims to it:"
msgstr "最初のステップは、以下のオプションのいずれかを使用して `JwtClaimsBuilder` を初期化し、そこにいくつかのクレームを追加することです。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:844
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import javax.json.Json;\n"
"import javax.json.JsonObject;\n"
"import io.smallrye.jwt.build.Jwt;\n"
"import io.smallrye.jwt.build.JwtClaimsBuilder;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"...\n"
"// Create an empty builder and add some claims\n"
"JwtClaimsBuilder builder1 = Jwt.claims();\n"
"builder1.claim(\"customClaim\", \"custom-value\").issuer(\"https://issuer.org\");\n"
"// Or start typing the claims immediately:\n"
"// JwtClaimsBuilder builder1 = Jwt.upn(\"Alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:847
#, no-wrap
msgid ""
"// Builder created from the existing claims\n"
"JwtClaimsBuilder builder2 = Jwt.claims(\"/tokenClaims.json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:850
#, no-wrap
msgid ""
"// Builder created from a map of claims\n"
"JwtClaimsBuilder builder3 = Jwt.claims(Collections.singletonMap(\"customClaim\", \"custom-value\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:856
#, no-wrap
msgid ""
"// Builder created from JsonObject\n"
"JsonObject userName = Json.createObjectBuilder().add(\"username\", \"Alice\").build();\n"
"JsonObject userAddress = Json.createObjectBuilder().add(\"city\", \"someCity\").add(\"street\", \"someStreet\").build();\n"
"JsonObject json = Json.createObjectBuilder(userName).add(\"address\", userAddress).build();\n"
"JwtClaimsBuilder builder4 = Jwt.claims(json);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:860
#, no-wrap
msgid ""
"// Builder created from JsonWebToken\n"
"@Inject JsonWebToken token;\n"
"JwtClaimsBuilder builder5 = Jwt.claims(token);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:863
#, fuzzy
msgid "The API is fluent so the builder initialization can be done as part of the fluent API sequence."
msgstr "APIが流暢なので、ビルダーの初期化は流暢なAPIのシーケンスの一部として行うことができます。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:866
#, fuzzy
msgid "The builder will also set `iat` (issued at) to the current time, `exp` (expires at) to 5 minutes away from the current time (it can be customized with the `smallrye.jwt.new-token.lifespan` property) and `jti` (unique token identifier) claims if they have not already been set.  One can also configure `smallrye.jwt.new-token.issuer` property and skip setting the issuer directly with the builder API."
msgstr "`jti` ビルダーはまた、 `iat` (発行時)を現在の時刻に設定し、 `exp` (期限切れ)を現在の時刻から 5 分後に設定する( `smallrye.jwt.new-token.lifespan` プロパティーでカスタマイズ可能)。また、 `smallrye.jwt.new-token.issuer` プロパティーを設定して、ビルダー API で直接発行者の設定を省略することもできます。"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:868
#, fuzzy
msgid "The next step is to decide how to secure the claims."
msgstr "次のステップは、請求権をどのように確保するかを決めることです。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:869
#, fuzzy, no-wrap
msgid "Sign the claims"
msgstr "クレームに署名する"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:872
#, fuzzy
msgid "The claims can be signed immediately or after the `JSON Web Signature` headers have been set:"
msgstr "クレームは、すぐに署名することも、 `JSON Web Signature` ヘッダーを設定した後に署名することもできます。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:877
#: upstream/_guides/security-jwt.adoc:897
#: upstream/_guides/security-jwt.adoc:914
#, no-wrap
msgid ""
"import io.smallrye.jwt.build.Jwt;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:881
#, no-wrap
msgid ""
"// Sign the claims using the private key loaded from the location set with a 'smallrye.jwt.sign.key-location' property.\n"
"// No 'jws()' transition is necessary.\n"
"String jwt1 = Jwt.claims(\"/tokenClaims.json\").sign();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:884
#, no-wrap
msgid ""
"// Set the headers and sign the claims with an RSA private key loaded in the code (the implementation of this method is omitted). Note a 'jws()' transition to a 'JwtSignatureBuilder'.\n"
"String jwt2 = Jwt.claims(\"/tokenClaims.json\").jws().keyId(\"kid1\").header(\"custom-header\", \"custom-value\").sign(getPrivateKey());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:887
#, fuzzy
msgid "Note the `alg` (algorithm) header is set to `RS256` by default."
msgstr "`alg` (アルゴリズム) ヘッダーはデフォルトで `RS256` に設定されていることに注意してください。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:888
#, fuzzy, no-wrap
msgid "Encrypt the claims"
msgstr "クレームを暗号化する"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:892
#, fuzzy
msgid "The claims can be encrypted immediately or after the `JSON Web Encryption` headers have been set the same way as they can be signed.  The only minor difference is that encrypting the claims always requires a `jwe()` `JwtEncryptionBuilder` transition:"
msgstr "クレームを暗号化するには、すぐに暗号化するか、 `JSON Web Encryption` ヘッダーを設定した後に署名するのと同じ方法で暗号化することができます。唯一の小さな違いは、クレームを暗号化するには常に `jwe()` `JwtEncryptionBuilder` への移行が必要なことです。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:900
#, no-wrap
msgid ""
"// Encrypt the claims using the public key loaded from the location set with a 'smallrye.jwt.encrypt.key-location' property.\n"
"String jwt1 = Jwt.claims(\"/tokenClaims.json\").jwe().encrypt();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:903
#, no-wrap
msgid ""
"// Set the headers and encrypt the claims with an RSA public key loaded in the code (the implementation of this method is omitted).\n"
"String jwt2 = Jwt.claims(\"/tokenClaims.json\").jwe().header(\"custom-header\", \"custom-value\").encrypt(getPublicKey());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:906
#, fuzzy
msgid "Note the `alg` (key management algorithm) header is set to `RSA-OAEP-256` (it will be changed to `RSA-OAEP` in a future version of smallrye-jwt) and the `enc` (content encryption header) is set to `A256GCM` by default."
msgstr "`alg` (鍵管理アルゴリズム) ヘッダは `RSA-OAEP-256` に設定されており (smallrye-jwt の将来のバージョンでは `RSA-OAEP` に変更されます)、 `enc` (コンテンツ暗号化ヘッダ) はデフォルトで `A256GCM` に設定されていることに注意してください。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:907
#, fuzzy, no-wrap
msgid "Sign the claims and encrypt the nested JWT token"
msgstr "クレームに署名し、入れ子になったJWTトークンを暗号化する"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:910
#, fuzzy
msgid "The claims can be signed and then the nested JWT token encrypted by combining the sign and encrypt steps."
msgstr "クレームを署名した後、署名ステップと暗号化ステップを組み合わせることで、入れ子になったJWTトークンを暗号化することができます。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:917
#, no-wrap
msgid ""
"// Sign the claims and encrypt the nested token using the private and public keys loaded from the locations set with the 'smallrye.jwt.sign.key-location' and 'smallrye.jwt.encrypt.key-location' properties respectively.\n"
"String jwt = Jwt.claims(\"/tokenClaims.json\").innerSign().encrypt();\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:919
#, fuzzy, no-wrap
msgid "Fast JWT Generation"
msgstr "高速JWTジェネレーション"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:922
#, fuzzy
msgid "If `smallrye.jwt.sign.key-location` or/and `smallrye.jwt.encrypt.key-location` properties are set then one can secure the existing claims (resources, maps, JsonObjects) with a single call:"
msgstr "`smallrye.jwt.sign.key-location` や `smallrye.jwt.encrypt.key-location` プロパティーが設定されていれば、1回の呼び出しで既存のクレーム(リソース、マップ、JsonObjects)を確保することができます。"

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:927
#, no-wrap
msgid ""
"// More compact than Jwt.claims(\"/claims.json\").sign();\n"
"Jwt.sign(\"/claims.json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:930
#, no-wrap
msgid ""
"// More compact than Jwt.claims(\"/claims.json\").jwe().encrypt();\n"
"Jwt.encrypt(\"/claims.json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jwt.adoc:933
#, no-wrap
msgid ""
"// More compact than Jwt.claims(\"/claims.json\").innerSign().encrypt();\n"
"Jwt.signAndEncrypt(\"/claims.json\");\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:935
#, fuzzy
msgid "As mentioned above, `iat`, `exp`, `jti` and `iss` claims will be added if needed."
msgstr "上記の通り、 `iat` 、 `exp` 、 `jti` 、 `iss` クレームは必要に応じて追加されます。"

#. type: Title ===
#: upstream/_guides/security-jwt.adoc:936
#, fuzzy, no-wrap
msgid "SmallRye JWT Builder configuration"
msgstr "SmallRye JWT Builderの設定"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:939
#, fuzzy
msgid "SmallRye JWT supports the following properties which can be used to customize the way claims are signed and encrypted:"
msgstr "SmallRye JWTは以下のプロパティーをサポートしており、クレームの署名および暗号化の方法をカスタマイズするために使用できます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:943
#, fuzzy, no-wrap
msgid "smallrye.jwt.sign.key.location"
msgstr "smallrye.jwt.sign.key-location"

#. type: Table
#: upstream/_guides/security-jwt.adoc:943
#: upstream/_guides/security-jwt.adoc:944
#: upstream/_guides/security-jwt.adoc:945
#: upstream/_guides/security-jwt.adoc:946
#, fuzzy, no-wrap
msgid "`none`"
msgstr "`none`"

#. type: Table
#: upstream/_guides/security-jwt.adoc:944
#, fuzzy, no-wrap
msgid "Location of a private key which will be used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called."
msgstr "引数なし `sign()` または `innerSign()` メソッドが呼び出されたときに、クレームに署名するために使用される秘密鍵の場所。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:944
#, fuzzy, no-wrap
msgid "smallrye.jwt.sign.key-location"
msgstr "smallrye.jwt.sign.key-location"

#. type: Table
#: upstream/_guides/security-jwt.adoc:945
#, fuzzy, no-wrap
msgid "Location of a private key which will be used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called. This property has been deprecated and will be removed in the next major `smallrye-jwt` release."
msgstr "引数なし `sign()` または `innerSign()` メソッドが呼び出されたときに、クレームに署名するために使用される秘密鍵の場所。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:945
#, fuzzy, no-wrap
msgid "smallrye.jwt.encrypt.key.location"
msgstr "smallrye.jwt.encrypt.key-location"

#. type: Table
#: upstream/_guides/security-jwt.adoc:946
#, fuzzy, no-wrap
msgid "Location of a public key which will be used to encrypt the claims or inner JWT when a no-argument `encrypt()` method is called."
msgstr "ノーアーギュメント `encrypt()` メソッドが呼び出された際に、クレームまたは内部 JWT を暗号化するために使用される公開鍵の位置。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:946
#, fuzzy, no-wrap
msgid "smallrye.jwt.encrypt.key-location"
msgstr "smallrye.jwt.encrypt.key-location"

#. type: Table
#: upstream/_guides/security-jwt.adoc:947
#, fuzzy, no-wrap
msgid "Location of a public key which will be used to encrypt the claims or inner JWT when a no-argument `encrypt()` method is called. This property has been deprecated and will be removed in the next major `smallrye-jwt` release."
msgstr "ノーアーギュメント `encrypt()` メソッドが呼び出された際に、クレームまたは内部 JWT を暗号化するために使用される公開鍵の位置。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:947
#, fuzzy, no-wrap
msgid "smallrye.jwt.new-token.lifespan"
msgstr "smallrye.jwt.new-token.lifespan"

#. type: Table
#: upstream/_guides/security-jwt.adoc:947
#, fuzzy, no-wrap
msgid "300"
msgstr "300"

#. type: Table
#: upstream/_guides/security-jwt.adoc:948
#, fuzzy, no-wrap
msgid "Token lifespan in seconds which will be used to calculate an `exp` (expiry) claim value if this claim has not already been set."
msgstr "このクレームがまだ設定されていない場合、exp (expiry) クレーム値を計算するために使用されます。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:948
#, fuzzy, no-wrap
msgid "smallrye.jwt.new-token.issuer"
msgstr "smallrye.jwt.new-token.issuer"

#. type: Table
#: upstream/_guides/security-jwt.adoc:949
#, fuzzy, no-wrap
msgid "Token issuer which can be used to set an `iss` (issuer) claim value if this claim has not already been set."
msgstr "このクレームがまだ設定されていない場合に、ISS(発行者)クレーム値を設定するために使用できるトークン発行者。"

#. type: Table
#: upstream/_guides/security-jwt.adoc:949
#, fuzzy, no-wrap
msgid "smallrye.jwt.new-token.audienc"
msgstr "smallrye.jwt.new-token.lifespan"

#. type: Table
#: upstream/_guides/security-jwt.adoc:950
#, fuzzy, no-wrap
msgid "Token audience which can be used to set an `aud` (audience) claim value if this claim has not already been set."
msgstr "このクレームがまだ設定されていない場合に、ISS(発行者)クレーム値を設定するために使用できるトークン発行者。"

#. type: Title ==
#: upstream/_guides/security-jwt.adoc:952
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:955
msgid "link:https://github.com/eclipse/microprofile-jwt-auth/releases/download/1.1.1/microprofile-jwt-auth-spec.html[MP JWT 1.1.1 HTML]"
msgstr "link:https://github.com/eclipse/microprofile-jwt-auth/releases/download/1.1.1/microprofile-jwt-auth-spec.html[MP JWT 1.1.1 HTML]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:956
msgid "link:https://github.com/eclipse/microprofile-jwt-auth/releases/download/1.1.1/microprofile-jwt-auth-spec.pdf[MP JWT 1.1.1 PDF]"
msgstr "link:https://github.com/eclipse/microprofile-jwt-auth/releases/download/1.1.1/microprofile-jwt-auth-spec.pdf[MP JWT 1.1.1 PDF]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:957
msgid "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"
msgstr "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:958
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:959
msgid "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"
msgstr "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:960
msgid "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"
msgstr "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:961
msgid "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"
msgstr "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"

#. type: Plain text
#: upstream/_guides/security-jwt.adoc:961
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkus Security]"
