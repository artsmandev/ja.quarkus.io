# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-02-02 15:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-dev-services.adoc:6
#, fuzzy, no-wrap
msgid "Dev Services and UI for OpenID Connect (OIDC)"
msgstr "OpenId Connect用Dev ServicesとUI"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:12
#, fuzzy
msgid "This guide covers the Dev Services and UI for OpenID Connect (OIDC) Keycloak provider and explains how to support Dev Services and UI for other OpenID Connect providers.  It also describes Dev UI for all OpenID Connect providers which have already been started before Quarkus is launched in a dev mode."
msgstr "このガイドでは、Dev Services for OpenId Connect Keycloak プロバイダを取り上げ、他の OpenId Connect プロバイダをサポートする方法について説明します。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:13
#, fuzzy, no-wrap
msgid "Introduction"
msgstr "はじめに"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:17
#, fuzzy
msgid "Quarkus introduces an experimental `Dev Services For Keycloak` feature which is enabled by default when the `quarkus-oidc` extension is started in dev mode with `mvn quarkus:dev` and when the integration tests are running in test mode, but only when no `quarkus.oidc.auth-server-url` property is configured.  It starts a Keycloak container for both the dev and/or test modes and initializes them by registering the existing Keycloak realm or creating a new realm with the client and users for you to start developing your Quarkus application secured by Keycloak immediately. It will restart the container when the `application.properties` or the realm file changes have been detected."
msgstr "Quarkusは、実験的な `Dev Services For Keycloak` 機能を導入しています。この機能は、 `quarkus-oidc` 拡張機能が開発モードで開始されると、デフォルトで有効になります。これは、Keycloakコンテナを起動し、既存のKeycloakレルムを登録するか、クライアントとユーザーで新しいレルムを作成することでコンテナを初期化し、Keycloakで保護されたQuarkusアプリケーションの開発をすぐに始めることができます。 `application.properties` またはレルムファイルの変更が検出されたときに、コンテナを再起動します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:19
#, fuzzy
msgid "Additionally, xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev[/q/dev] complements this feature with a Dev UI page which helps to acquire the tokens from Keycloak and test your Quarkus application."
msgstr "さらに、 link:http://localhost:8080/q/dev[/q/dev]にある link:dev-ui[Dev UI]では、Keycloak固有のページでこの機能をサポートしており、Keycloakからトークンを取得してQuarkusアプリケーションをテストするのに役立ちます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:21
#, fuzzy
msgid "If `quarkus.oidc.auth-server-url` is already set then a generic OpenID Connect Dev Console which can be used with all OpenID Connect providers will be activated, please see <<dev-ui-all-oidc-providers,Dev UI for all OpenID Connect Providers>> for more information."
msgstr "`quarkus.oidc.auth-server-url` がすでに設定されている場合は、すべての OpenId Connect プロバイダーで使用できる汎用の OpenId Connect Dev Console が有効になります。詳細は、 link:#dev-ui-all-oidc-providers[すべての OpenId Connect プロバイダーの Dev UI]を参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:22
#, fuzzy, no-wrap
msgid "Dev Services for Keycloak"
msgstr "Keycloakの開発サービス"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:25
#, fuzzy
msgid "Start your application without configuring `quarkus.oidc` properties in `application.properties`. You will see in the console something similar to:"
msgstr "`quarkus.oidc` のプロパティを `application.properties` に設定せずに、アプリケーションを起動してください。コンソールには以下のような表示がされます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:29
#: upstream/_guides/security-openid-connect-dev-services.adoc:47
#, no-wrap
msgid "$ mvn quarkus:dev\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:33
#, no-wrap
msgid ""
"KeyCloak Dev Services Starting:\n"
"2021-11-02 17:14:24,864 INFO  [org.tes.con.wai.str.HttpWaitStrategy] (build-10) /unruffled_agnesi: Waiting for 60 seconds for URL: http://localhost:32781/auth (where port 32781 maps to container port 8080)\n"
"2021-11-02 17:14:44,170 INFO  [io.qua.oid.dep.dev.key.KeycloakDevServicesProcessor] (build-10) Dev Services for Keycloak started.\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:36
#, fuzzy
msgid "The `quay.io/keycloak/keycloak:15.0.2` image which contains a `Keycloak` distribution powered by `WildFly` is currently used to start a container by default. See the <<keycloak-initialization, Keycloak Initialization>> section for more details about the image selection."
msgstr "現在、コンテナの起動には、 `WildFly` を搭載した `Keycloak` ディストリビューションを含む `quay.io/keycloak/keycloak:15.0.2` イメージがデフォルトで使用されています。イメージの選択についての詳細は、「 link:#keycloak-initialization[Keycloakの初期化]」セクションを参照してください。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:40
#, fuzzy
msgid "When logging in the Keycloak admin console, the username is `admin` and the password is `admin`."
msgstr "Keycloakの管理コンソールにログインする際のユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:43
#, fuzzy
msgid "Note that by default, `Dev Services for Keycloak` will not start a new container if it finds a container with a `quarkus-dev-service-keycloak` label and connect to it if this label's value matches the value of the `quarkus.keycloak.devservices.service-name` property (default value is `quarkus`). In such cases you will see a slighty different output:"
msgstr "なお、デフォルトでは、 `Dev Services for Keycloak` は、 `quarkus-dev-service-keycloak` ラベルを持つコンテナを見つけても、そのラベルの値が `quarkus.keycloak.devservces.service-name` プロパティの値（デフォルト値は `quarkus` ）と一致する場合には、新しいコンテナを開始しません。このような場合には、若干異なる出力が表示されます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:51
#, no-wrap
msgid ""
"2021-08-27 18:42:43,530 INFO  [io.qua.dev.com.ContainerLocator] (build-15) Dev Services container found: 48fee151a31ddfe32c39965be8f61108587b25ed2f66cdc18bb926d9e2e570c5 (quay.io/keycloak/keycloak:14.0.0). Connecting to: 0.0.0.0:32797.\n"
"2021-08-27 18:42:43,600 INFO  [io.qua.oid.dep.dev.key.KeycloakDevServicesProcessor] (build-15) Dev Services for Keycloak started.\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:54
#, fuzzy
msgid "Note that you can disable sharing the containers with `quarkus.keycloak.devservices.shared=false`."
msgstr "なお、 `quarkus.keycloak.devservices.shared=false` でコンテナの共有を無効にすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:56
#, fuzzy
msgid "Now open the main link:http://localhost:8080/q/dev[Dev UI page] and you will see the `OpenID Connect Card` linking to a `Keycloak` page:"
msgstr "次にメインのDev UIページを開くと、 `OpenId Connect Card` が `Keycloak` ページにリンクしているのがわかります。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/security-openid-connect-dev-services.adoc:57
#: upstream/_guides/security-openid-connect-dev-services.adoc:73
#: upstream/_guides/security-openid-connect-dev-services.adoc:77
#: upstream/_guides/security-openid-connect-dev-services.adoc:81
#: upstream/_guides/security-openid-connect-dev-services.adoc:91
#: upstream/_guides/security-openid-connect-dev-services.adoc:129
#: upstream/_guides/security-openid-connect-dev-services.adoc:151
#: upstream/_guides/security-openid-connect-dev-services.adoc:162
#: upstream/_guides/security-openid-connect-dev-services.adoc:221
#: upstream/_guides/security-openid-connect-dev-services.adoc:236
#, fuzzy, no-wrap
msgid "Dev"
msgstr "デブ"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:57
#, no-wrap
msgid "dev-ui-oidc-keycloak-card.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:60
#, fuzzy
msgid "Click on the `Provider: Keycloak` link and you will see a Keycloak page which will be presented slightly differently depending on how `Dev Services for Keycloak` feature has been configured."
msgstr "`Provider: Keycloak` リンクをクリックすると、Keycloakページが表示されます。このページは、 `Dev Services for Keycloak` 機能の設定方法によって、表示内容が若干異なります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-dev-services.adoc:62
#, fuzzy, no-wrap
msgid "Developing Service Applications"
msgstr "テストサービスアプリケーション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:65
#, fuzzy
msgid "By default the Keycloak page can be used to support the development of a xref:security-openid-connect.adoc[Quarkus OIDC service application]."
msgstr "デフォルトでは、Keycloakページは、 link:security-openid-connect[Quarkus OIDCサービスアプリケーション]の開発をサポートするために使用することができます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-dev-services.adoc:67
#, fuzzy, no-wrap
msgid "Authorization Code Grant"
msgstr "許諾コード グラント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:70
#, fuzzy
msgid "If you set `quarkus.oidc.devui.grant.type=code` in `application.properties` (this is a default value) then an `authorization_code` grant will be used to acquire both access and ID tokens. Using this grant is recommended to emulate a typical flow where a `Single Page Application` acquires the tokens and uses them to access Quarkus services."
msgstr "`applicatin.properties` に `quarkus.keycloak.devservices.grant.type=code` を設定した場合（これはデフォルト値です）、 `authorization_code` のグラントを使用してアクセストークンと ID トークンの両方を取得します。 `Single Page Application` がトークンを取得し、それを使用してQuarkusのサービスにアクセスするという典型的なフローをエミュレートするには、このグラントの使用が推奨されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:72
#, fuzzy
msgid "First you will see an option to `Log into Single Page Application`:"
msgstr "まず、 `Log into Single Page Application` というオプションが表示されます。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:73
#, no-wrap
msgid "dev-ui-keycloak-sign-in-to-spa.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:76
#, fuzzy
msgid "Next, after you select this option, you will be redirected to Keycloak to authenticate, example, as `alice:alice` and then returned to the page representing the SPA:"
msgstr "次に、このオプションを選択すると、Keycloakにリダイレクトされ、例えば `alice:alice` のように認証され、その後、SPAを表すページに戻ります。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:77
#, no-wrap
msgid "dev-ui-keycloak-test-service-from-spa.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:80
#, fuzzy
msgid "You can view the acquired access and ID tokens, for example:"
msgstr "取得したアクセストークンやIDトークンなどを確認することができます。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:81
#, no-wrap
msgid "dev-ui-keycloak-decoded-tokens.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:84
#, fuzzy
msgid "This view shows the encoded JWT token on the left hand side and highlights the headers (red colour), payload/claims (green colour) and signature (blue colour). It also shows the decoded JWT token on the right hand side where you can see the header and claim names and their values."
msgstr "このビューでは、エンコードされたJWTトークンが左側に表示され、ヘッダ（赤色）、ペイロード/クレーム（緑色）、署名（青色）がハイライトされます。また、右側にはデコードされたJWTトークンが表示され、ヘッダとクレームの名前とその値を確認することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:86
#, fuzzy
msgid "Next test the service with either the current access or ID token. SPA usually sends the access tokens to the application endpoints but there could be cases where the ID tokens are forwarded to the application frontends for them to be aware about the user who is currently logged into SPA."
msgstr "次に、現在のアクセストークンまたはIDトークンを使ってサービスをテストします。SPAは通常、アクセストークンをアプリケーションのエンドポイントに送りますが、アプリケーションのフロントエンドがSPAに現在ログインしているユーザーを認識できるように、IDトークンを転送する場合もあります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:88
#, fuzzy
msgid "Finally you can select a `Log Out` image::dev-ui-keycloak-logout.png option if you'd like to log out and authenticate to Keycloak as a different user."
msgstr "最後に、ログアウトして別のユーザーとしてKeycloakを認証したい場合は、 `Logged in` オプションをクリックします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:90
#, fuzzy
msgid "Note Keycloak may return an error when you try to `Log into Single Page Application`. For example, `quarkus.oidc.client-id` may not match the client id in the realm imported to Keycloak or the client in this realm is not configured correctly to support the authorization code flow, etc. In such cases Keycloak will return an `error_description` query parameter and `Dev UI` will also show this error description, for example:"
msgstr "注意 Keycloakは、 `Log into Single Page Application` をしようとすると、エラーを返すことがある。例えば、 `quarkus.oidc.client-id` は、KeycloakにインポートされたレルムのクライアントIDと一致しない場合や、このレルムのクライアントが認可コードフローをサポートするように正しく設定されていない場合などがあります。このような場合、Keycloakは、 `error_description` クエリパラメータを返し、 `Dev UI` には、例えば、このようなエラー説明も表示されます。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:91
#, no-wrap
msgid "dev-ui-keycloak-login-error.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:94
#, fuzzy
msgid "If the error occurs then log into Keycloak using the `Keycloak Admin` option and update the realm configuration as necesary and also check the `application.properties`."
msgstr "エラーが発生した場合は、 `Keycloak Admin` オプションを使ってKeycloakにログインし、必要に応じてレルム構成を更新し、 `application.properties` を確認してください。"

#. type: Title =====
#: upstream/_guides/security-openid-connect-dev-services.adoc:95
#, fuzzy, no-wrap
msgid "Test with Swagger UI or GrapghQL UI"
msgstr "Swagger UIまたはGrapghQL UIでのテスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:98
#, fuzzy
msgid "You can avoid manually entering the service paths and test your service with `Swagger UI` or `GraphQL UI` if `quarkus-smallrye-openapi` and/or `quarkus-smallrye-graphql` are used in your project. For example, if you run `mvn quarkus-dev` with both `quarkus-smallrye-openapi` and `quarkus-smallrye-graphql` dependencies then you will see the following options after logging in into Keycloak:"
msgstr "`quarkus-smallrye-openapi` や `quarkus-smallrye-graphql` がプロジェクトで使用されている場合、サービスパスを手動で入力せず、 `Swagger UI` や `GraphQL UI` でサービスをテストすることができます。例えば、 `mvn quarkus-dev` を `quarkus-smallrye-openapi` と `quarkus-smallrye-graphql` の両方の依存関係で実行した場合、Keycloak にログインした後、次のようなオプションが表示されます。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/security-openid-connect-dev-services.adoc:99
#, fuzzy, no-wrap
msgid "Test"
msgstr "テスト"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:99
#, no-wrap
msgid "dev-ui-keycloak-test-service-swaggerui-graphql.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:103
#, fuzzy
msgid "For example, clicking on `Swagger UI` will open `Swagger UI` in a new browser tab where you can test the service using the token acquired by Dev UI for Keycloak.  and `Swagger UI` will not try to re-authenticate again."
msgstr "例えば、 `Swagger UI` をクリックすると、新しいブラウザタブで `Swagger UI` が開かれ、Dev UI for Keycloak で取得したトークンを使ってサービスをテストすることができます。また、 `Swagger UI` は再度の認証を試みません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:105
#, fuzzy
msgid "Integration with `GraphQL UI` works in a similar way, the access token acquired by Dev UI for Keycloak will be used."
msgstr "`GraphQL UI` との連携も同様で、Dev UI for Keycloakで取得したアクセストークンが使用されます。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:109
#, fuzzy
msgid "You may need to register a redirect URI for the authorization code flow initiated by Dev UI for Keycloak to work because Keycloak may enforce that the authenticated users are redirected only to the configured redirect URI. It is recommended to do in production to avoid the users being redirected to the wrong endpoints which might happen if the correct `redirect_uri` parameter in the authentication request URI has been manipulated."
msgstr "Keycloakは、認証されたユーザが構成されたリダイレクトURIにのみリダイレクトされることを強制する可能性があるため、Keycloakを動作させるためにDev UIによって開始された認証コードフローにリダイレクトURIを登録する必要があるかもしれません。これは、認証要求URIの正しい `redirect_uri` パラメータが操作された場合に発生する可能性のある、ユーザが誤ったエンドポイントにリダイレクトされることを避けるために、本番環境で行うことが推奨されます。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:111
#, fuzzy
msgid "If Keycloak does enforce it then you will see an authentication error informing you that the `redirect_uri` value is wrong."
msgstr "Keycloakがそれを強制する場合は、 `redirect_uri` の値が間違っていることを知らせる認証エラーが表示されます。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:113
#, fuzzy
msgid "In this case select the `Keycloak Admin` option in the right top corner, login as `admin:admin`, select the test realm and the client which Dev UI for Keycloak is configured with and add `http://localhost:8080/q/dev/io.quarkus.quarkus-oidc/provider` to `Valid Redirect URIs`. If you used `-Dquarkus.http.port` when starting Quarkus then change `8080` to the value of `quarkus.http.port`."
msgstr "Dev UI for Keycloakによって開始される認証コード・フローが機能するために、リダイレクトURIを登録する必要があるかもしれません。右上の `Keycloak Admin` オプションを選択し、 `admin:admin` としてログインし、テストレルムとDev UI for Keycloakが構成されているクライアントを選択し、 に追加します。 `&lt;a href=\"http://localhost:8080/q/dev/io.quarkus.quarkus-oidc/provider\" class=\"bare\"&gt;http://localhost:8080/q/dev/io.quarkus.quarkus-oidc/provider&lt;/a&gt;`を `Valid Redirect URIs` に追加します。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:115
#, fuzzy
msgid "If the container is shared between multiple applications running on different ports then you will need to register `redirect_uri` values for each of these applications."
msgstr "コンテナが異なるポートで動作する複数のアプリケーションで共有されている場合は、これらのアプリケーションごとに `redirect_uri` の値を登録する必要があります。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:117
#, fuzzy
msgid "You can set the `redirect_uri` value to `*` only for the test purposes, especially when the containers are shared between multiple applications."
msgstr "特にコンテナを複数のアプリケーションで共有する場合など、テスト目的でのみ `redirect_uri` の値を `*` に設定することができます。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:119
#, fuzzy
msgid "`*` `redirect_uri` value is set by `Dev Services for Keycloak` when it creates a default realm, if no custom realm is imported."
msgstr "`*` `redirect_uri` の値は、カスタムレルムがインポートされていない場合、 `Dev Services for Keycloak` がデフォルトのレルムを作成する際に設定されます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-dev-services.adoc:121
#, fuzzy, no-wrap
msgid "Implicit Grant"
msgstr "暗黙の了解"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:124
#, fuzzy
msgid "If you set `quarkus.oidc.devui.grant.type=implicit` in `application.properties` then an `implicit` grant will be used to acquire both access and ID tokens. Use this grant for emulating a `Single Page Application` only if the authorization code grant does not work (for example, a client is configured in Keycloak to support an implicit grant, etc)."
msgstr "`applicatin.properties` に `quarkus.keycloak.devservices.grant.type=implicit` を設定した場合、アクセストークンと ID トークンの両方を取得するために `implicit` のグラントが使用されます。 `Single Page Application` をエミュレートするためにこのグラントを使うのは、認証コードグラントが機能しない場合のみです(たとえば、Keycloakでクライアントが暗黙のグラントをサポートするように設定されている場合など)。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-dev-services.adoc:125
#, fuzzy, no-wrap
msgid "Password Grant"
msgstr "パスワード付与"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:128
#, fuzzy
msgid "If you set `quarkus.oidc.devui.grant.type=password` in `application.properties` then you will see a screen like this one:"
msgstr "`quarkus.keycloak.devservices.grant.type=password` を `applicatin.properties` に設定すると、このような画面が表示されます。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:129
#, no-wrap
msgid "dev-ui-keycloak-password-grant.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:134
#, fuzzy
msgid "Enter a registered user name, user password, a relative service endpoint path, click on `Test Service` and you will see a status code such as `200`, `403`, `401` or `404` printed.  If the user name is also set in `quarkus.keycloak.devservices.users` map property containing user names and passwords then you do not have to set a password when testing the service.  But note, you do not have to initialize `quarkus.keycloak.devservices.users` to test the service using the password grant."
msgstr "登録したユーザー名、ユーザーパスワード、相対的なサービスエンドポイントのパスを入力し、 `Test Service` をクリックすると、 `200` 、 `403` 、 `401` または `404` のようなステータスコードが表示されます。ユーザー名が、 `quarkus.keycloak.devservices.users` マッププロパティ（ユーザー名とパスワードを含む）にも設定されていれば、サービスをテストする際にパスワードを設定する必要はありません。ただし、パスワード付与を利用してサービスをテストする場合は、 `quarkus.keycloak.devservices.users` を初期化する必要はありません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:136
#, fuzzy
msgid "You will also see in the Dev UI console something similar to:"
msgstr "また、Dev UIコンソールには以下のようなものが表示されます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:143
#, no-wrap
msgid ""
"2021-07-19 17:58:11,407 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Using password grant to get a token from 'http://localhost:32818/auth/realms/quarkus/protocol/openid-connect/token' for user 'alice' in realm 'quarkus' with client id 'quarkus-app'\n"
"2021-07-19 17:58:11,533 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Test token: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ6Z2tDazJQZ1JaYnVlVG5kcTFKSW1sVnNoZ2hhbWhtbnBNcXU0QUt5MnJBIn0.ey...\n"
"2021-07-19 17:58:11,536 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Sending token to 'http://localhost:8080/api/admin'\n"
"2021-07-19 17:58:11,674 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Result: 200\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:146
#, fuzzy
msgid "A token is acquired from Keycloak using a `password` grant and is sent to the service endpoint."
msgstr "トークンは、 `password` グラントを使用して Keycloak から取得され、サービスエンドポイントに送信されます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-dev-services.adoc:147
#, fuzzy, no-wrap
msgid "Client Credentials Grant"
msgstr "クライアントクレデンシャルグラント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:150
#, fuzzy
msgid "If you set `quarkus.oidc.devui.grant.type=client` then a `client_credentials` grant will be used to acquire a token, with the page showing no `User` field in this case:"
msgstr "`quarkus.keycloak.devservices.grant.type=client` を設定すると、 `client_credentials` のグラントがトークンの取得に使用されます。この場合、ページには `User` のフィールドは表示されません。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:151
#, no-wrap
msgid "dev-ui-keycloak-client-credentials-grant.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:154
#, fuzzy
msgid "You can test the service the same way as with the `Password` grant."
msgstr "`Password` の助成金と同じ方法でサービスをテストすることができます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-dev-services.adoc:156
#, fuzzy, no-wrap
msgid "Developing OpenID Connect Web App Applications"
msgstr "OpenId Connect Web Appアプリケーションの開発"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:159
#, fuzzy
msgid "If you develop a xref:security-openid-connect-web-authentication.adoc[Quarkus OIDC web-app application] then you should set `quarkus.oidc.application-type=web-app` in `application.properties` before starting the application."
msgstr "link:security-openid-connect-web-authentication[Quarkus OIDCのウェブアプリのアプリケーション]を開発する場合は、アプリケーションを起動する前に、 `application.properties` に `quarkus.oidc.application-type=web-app` を設定する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:161
#, fuzzy
msgid "You will see a screen like this one:"
msgstr "このような画面が表示されます。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:162
#, no-wrap
msgid "dev-ui-keycloak-sign-in-to-service.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:165
#, fuzzy
msgid "Set a relative service endpoint path, click on `Sign In To Service` and you will be redirected to Keycloak to enter a username and password in a new browser tab and get a response from the Quarkus application."
msgstr "相対的なサービスエンドポイントのパスを設定し、 `Sign In To Service` をクリックすると、Keycloakにリダイレクトされ、新しいブラウザタブでユーザー名とパスワードを入力し、Quarkusアプリケーションからの応答を得ることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:167
#, fuzzy
msgid "Note that in this case Dev UI does not really enrich a dev experience since it is a Quarkus OIDC `web-app` application which controls the authorization code flow and acquires the tokens."
msgstr "このケースでは、Dev UIは実際には開発体験を豊かにするものではないことに注意してください。なぜなら、認証コードの流れを制御し、トークンを取得するQuarkus OIDC `web-app` のアプリケーションだからです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:169
#, fuzzy
msgid "To make Dev UI more useful for supporting the development of OIDC `web-app` applications you may want to consider setting profile specific values for `quarkus.oidc.application-type`:"
msgstr "OIDC `web-app` アプリケーションの開発をサポートするために Dev UI をより便利にするために、 `quarkus.oidc.application-type` にプロファイル固有の値を設定することを検討するとよいでしょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:175
#, no-wrap
msgid ""
"%prod.quarkus.oidc.application-type=web-app\n"
"%test.quarkus.oidc.application-type=web-app\n"
"%dev.quarkus.oidc.application-type=service\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:179
#, fuzzy
msgid "It will ensure that all Dev UI options described in <<develop-service-applications, Developing OpenID Connect Service Applications>> will be available when your `web-app` application is run in dev mode. The limitation of this approach is that both access and ID tokens returned with the code flow and acquired with Dev UI will be sent to the endpoint as HTTP `Bearer` tokens - which will not work well if your endpoint requires the injection of `IdToken`.  However it will work as expected if your `web-app` application only uses the access token, for example, as a source of roles or to get `UserInfo`, even if it is assumed to be a `service` application in devmode."
msgstr "これにより、 `web-app` アプリケーションが開発モードで実行されたときに、 link:#develop-service-applications[「Developing OpenId Connect Service Applications]」で説明されているすべての開発UIオプションが利用できるようになります。この方法の限界は、コードフローで返され、Dev UIで取得されるアクセストークンとIDトークンの両方がHTTP `Bearer` トークンとしてエンドポイントに送信されることです。これは、エンドポイントが `IdToken` のインジェクションを必要とする場合にはうまく機能しません。しかし、 `web-app` アプリケーションがアクセストークンを使用するだけであれば、たとえそれがdevモードの `service` アプリケーションであると想定されていても、例えばロールのソースとして、あるいは `UserInfo` を取得するために使用される場合は、期待通りに動作します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-dev-services.adoc:180
#, fuzzy, no-wrap
msgid "Running the tests"
msgstr "テストの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:183
#, fuzzy
msgid "You can run the tests against a Keycloak container started in a test mode in a xref:continuous-testing.adoc[Continuous Testing] mode."
msgstr "テストモードで起動したKeycloakコンテナに対して、 link:continuous-testing[連続テスト]モードでテストを実行することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:186
#, fuzzy
msgid "It is also recommended to run the integration tests against Keycloak using `Dev Services for Keycloak`.  Please see xref:security-openid-connect.adoc#integration-testing-keycloak-devservices[Testing OpenID Connect Service Applications with Dev Services] and xref:security-openid-connect-web-authentication.adoc#integration-testing-keycloak-devservices[Testing OpenID Connect WebApp Applications with Dev Services] for more information."
msgstr "また、 `Dev Services for Keycloak` を使用して、Keycloak に対する統合テストを実行することをお勧めします。詳細については、「 link:security-openid-connect#integration-testing-keycloak-devservices[Testing OpenId Connect Service Applications with Dev Services]」および link:security-openid-connect-web-authentication#integration-testing-keycloak-devservices[「Testing OpenId Connect WebApp Applications with Dev Services]」を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-dev-services.adoc:188
#, fuzzy, no-wrap
msgid "Keycloak Initialization"
msgstr "Keycloakの初期化"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:192
#, fuzzy
msgid "The `quay.io/keycloak/keycloak-x:16.0.0` image which contains a `Keycloak-X` distribution powered by `Quarkus` is used to start a container by default.  `quarkus.keycloak.devservices.image-name` can be used to change the Keycloak image name. For example, set it to `quay.io/keycloak/keycloak:16.0.0` to use a `Keycloak` distribution powered by `WildFly`."
msgstr "現在、コンテナの起動には、デフォルトで `Keycloak` ディストリビューション powered by `WildFly` を含む `quay.io/keycloak/keycloak:15.0.2` イメージが使用されています。 `quarkus.keycloak.devservices.image-name` は、Keycloak イメージ名を変更するために使用できます。例えば、 `quay.io/keycloak/keycloak-x:15.0.2` に設定すると、 `Quarkus` を電源とする `Keycloak-X` ディストリビューションを使用します。 `Dev Services for Keycloak` は、まもなくデフォルトで Keycloak-X ベースのイメージを使用します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:194
#, fuzzy
msgid "`Dev Services for Keycloak` will initialize a launched Keycloak server next."
msgstr "`Dev Services for Keycloak` 次に起動したKeycloakサーバーを初期化します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:196
#, fuzzy
msgid "By default, the `quarkus`, `quarkus-app` client with a `secret` password, `alice` and `bob` users (with the passwords matching the names), and `user` and `admin` roles are created, with `alice` given both `admin` and `user` roles and `bob` - the `user` role."
msgstr "デフォルトでは、 `quarkus` 、 `quarkus-app` クライアント（ `secret` パスワード付き）、 `alice` と `bob` ユーザー（パスワードは名前と一致）、 `user` と `admin` ロールが作成され、 `alice` には `admin` と `user` の両方のロールが与えられ、 `bob` - `user` のロールが与えられます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:198
#, fuzzy
msgid "Usernames, secrets and their roles can be customized with `quarkus.keycloak.devservices.users` (the map which contains usernames and secrets) and `quarkus.keycloak.devservices.roles` (the map which contains user names and comma separated role values)."
msgstr "ユーザー名、シークレット、およびその役割は、 `quarkus.keycloak.devservices.users` （ユーザー名とシークレットを含むマップ）および `quarkus.keycloak.devservices.roles` （ユーザー名とコンマで区切られた役割の値を含むマップ）でカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:200
#, fuzzy
msgid "For example:"
msgstr "例えば、以下のように。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:207
#, no-wrap
msgid ""
"%dev.quarkus.keycloak.devservices.users.duke=dukePassword\n"
"%dev.quarkus.keycloak.devservices.roles.duke=reader\n"
"%dev.quarkus.keycloak.devservices.users.john=johnPassword\n"
"%dev.quarkus.keycloak.devservices.roles.john=reader,writer\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:210
#, fuzzy
msgid "This configuration creates two users:"
msgstr "この設定では、2人のユーザーを作成します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:211
#, fuzzy
msgid "`duke` with a `dukePassword` password and a `reader` role"
msgstr "`duke` 、 `dukePassword` パスワードと `reader` ロールを持つ。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:212
#, fuzzy
msgid "`john` with a `johnPassword` password and `reader` and `writer` roles"
msgstr "`john` 、 `johnPassword` パスワードと `reader` および `writer` ロールを持つ人"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:214
#, fuzzy
msgid "`quarkus.oidc.client-id` and `quarkus.oidc.credentials.secret` can be used to customize the client id and secret."
msgstr "`quarkus.oidc.client-id` と `quarkus.oidc.credentials.secret` は、クライアントIDとシークレットをカスタマイズするために使用できます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:216
#, fuzzy
msgid "However it is likely your Keycloak configuration may be more complex and require setting more properties."
msgstr "しかし、あなたのKeycloakの構成はもっと複雑で、より多くのプロパティを設定する必要があるかもしれません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:218
#, fuzzy
msgid "This is why `quarkus.keycloak.devservices.realm-path` is always checked first before trying to initialize Keycloak with the default or configured realm, client, user and roles properties. If the realm file exists on the file system or classpath then only this realm will be used to initialize Keycloak."
msgstr "これが、デフォルトまたは構成されたレルム、クライアント、ユーザ、およびロールのプロパティでKeycloakを初期化しようとする前に、 `quarkus.keycloak.devservices.realm-path` が常に最初にチェックされる理由です。ファイルシステムまたはクラスパスにレルムファイルが存在する場合、このレルムのみがKeycloakの初期化に使用されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:220
#, fuzzy
msgid "Also the Keycloak page offers an option to `Sign In To Keycloak To Configure Realms` using a `Keycloak Admin` option in the right top corner:"
msgstr "また、Keycloakのページでは、右上の `Keycloak Admin` のオプションを使って、 `Sign In To Keycloak To Configure Realms` 。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:221
#, no-wrap
msgid "dev-ui-keycloak-admin.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:224
#, fuzzy
msgid "Sign in to Keycloak as `admin:admin` in order to further customize the realm properties, create or import a new realm, export the realm."
msgstr "Keycloakに `admin:admin` としてサインインすると、レルムのプロパティをさらにカスタマイズしたり、新しいレルムを作成してレルムをエクスポートし、再起動後にカスタムレルムでKeycloakを初期化することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:226
#, fuzzy
msgid "Note that even if you initialize Keycloak from a realm file, it is still needed to set `quarkus.keycloak.devservices.users` property if a `password` grant is used to acquire the tokens to test the OIDC `service` applications."
msgstr "なお、RealmファイルからKeycloakを初期化した場合でも、 `quarkus.oidc.auth-server-url` が正しく計算されるためには、 `quarkus.keycloak.devservices.realm-name` プロパティを設定する必要があります。 `quarkus.keycloak.devservices.users` プロパティの設定は、OIDC `service` アプリケーションをテストするために `password` グラントを使用してトークンを取得する場合に必要です。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:227
#, fuzzy, no-wrap
msgid "Disable Dev Services for Keycloak"
msgstr "KeycloakのDev Servicesを無効にする"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:230
#, fuzzy
msgid "`Dev Services For Keycloak` will not be activated if either `quarkus.oidc.auth-server-url` is already initialized or the default OIDC tenant is disabled with `quarkus.oidc.tenant.enabled=false`, irrespectively of whether you work with Keycloak or not."
msgstr "`Dev Services For Keycloak` は、 `quarkus.oidc.auth-server-url` がすでに初期化されているか、 `quarkus.oidc.tenant.enabled=false` で既定の OIDC テナントが無効になっている場合は、Keycloak を使用しているかどうかにかかわらず、有効になりません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:232
#, fuzzy
msgid "If you prefer not to have a `Dev Services for Keycloak` container started or do not work with Keycloak then you can also disable this feature with `quarkus.keycloak.devservices.enabled=false` - it will only be necessary if you expect to start `quarkus:dev` without `quarkus.oidc.auth-server-url`."
msgstr "`Dev Services for Keycloak` のコンテナを起動させたくない場合や、Keycloak を使用しない場合は、 `quarkus.keycloak.devservices.enabled=false` でこの機能を無効にすることもできます - `quarkus.oidc.auth-server-url` なしで `quarkus:dev` を起動する場合にのみ必要です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:235
#, fuzzy
msgid "The main Dev UI page will include an empty `OpenID Connect Card` when `Dev Services for Keycloak` is disabled and the `quarkus.oidc.auth-server-url` property has not been initialized:"
msgstr "`Dev Services for Keycloak` が無効の場合、メインの Dev UI ページには空の `OpenId Connect Card` が表示されます。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:236
#, no-wrap
msgid "dev-ui-oidc-card.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:239
#, fuzzy
msgid "If `quarkus.oidc.auth-server-url` is already set then a generic OpenID Connect Dev Console which can be used with all OpenID Connect providers may be activated, please see <<dev-ui-all-oidc-providers,Dev UI for all OpenID Connect Providers>> for more information."
msgstr "`quarkus.oidc.auth-server-url` がすでに設定されている場合は、すべての OpenId Connect プロバイダーで使用できる汎用の OpenId Connect Dev Console を有効にすることができます。詳細は、 link:#dev-ui-all-oidc-providers[すべての OpenId Connect プロバイダーの Dev UI]を参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:241
#, fuzzy, no-wrap
msgid "Dev UI for all OpenID Connect Providers"
msgstr "開発サービス 他のOpenId Connect Providersへの対応"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:244
#, fuzzy
msgid "If `quarkus.oidc.auth-server-url` points to an already started OpenID Connect provider (which can be Keycloak or other provider), `quarkus.oidc.auth-server-url` is set to `service` (which is a default value) and at least `quarkus.oidc.client-id` is set then `Dev UI for all OpenID Connect Providers` will be activated."
msgstr "`quarkus.oidc.auth-server-url` が既に起動している OpenId Connect プロバイダ（Keycloak または他のプロバイダでも可）を指しており、 `quarkus.oidc.auth-server-url` が `service` （これはデフォルト値）に設定されており、少なくとも `quarkus.oidc.client-id` が設定されていれば、 `Dev UI for all OpenId Connect Providers` が起動します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:246
#, fuzzy
msgid "Setting `quarkus.oidc.credentials.secret` will mostly likely be required for Keycloak and other providers for the authorization code flow initiated from Dev UI to complete, unless the client identified with `quarkus.oidc.client-id` is configured as a public client in your OpenID Connect provider's administration console."
msgstr "OpenId Connectプロバイダの管理コンソールで、 `quarkus.oidc.client-id` で識別されたクライアントがパブリッククライアントとして設定されていない限り、Dev UIから開始された認証コードフローが完了するために、Keycloakや他のプロバイダではほとんどの場合、 `quarkus.oidc.credentials.secret` の設定が必要になります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:248
#, fuzzy
msgid "Run `mvn`quarkus:dev` and you will see the following message:"
msgstr "`mvn`quarkus:dev` を実行すると、以下のメッセージが表示されます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:254
#, no-wrap
msgid ""
"$ mvn quarkus:dev\n"
"...\n"
"2021-09-07 15:53:42,697 INFO  [io.qua.oid.dep.dev.OidcDevConsoleProcessor] (build-41) OIDC Dev Console: discovering the provider metadata at http://localhost:8180/auth/realms/quarkus/.well-known/openid-configuration\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:257
#, fuzzy
msgid "If the provider metadata discovery has been successful then, after you open the main link:http://localhost:8080/q/dev[Dev UI page], you will see the `OpenID Connect Card` page linking to `Dev Console`:"
msgstr "次にメインのDev UIページを開くと、 `OpenId Connect Card` が `Keycloak` ページにリンクしているのがわかります。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/security-openid-connect-dev-services.adoc:258
#, fuzzy, no-wrap
msgid "Generic"
msgstr "ジェネリック"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:258
#, no-wrap
msgid "dev-ui-oidc-devconsole-card.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:261
#, fuzzy
msgid "Follow the link and you'll be able log in to your provider, get the tokens and test the application. The experience will be the same as described in the <<keycloak-authorization-code-grant,Authorization Code Grant for Keycloak>> section, where `Dev Services for Keycloak` container has been started, especially if you work with Keycloak (please also pay attention to a `redirect_uri` note in that section)."
msgstr "リンクをたどると、プロバイダーにログインしてトークンを取得し、アプリケーションをテストすることができます。特にKeycloakと連携している場合は、 `Dev Services for Keycloak` コンテナが開始されている「 link:#keycloak-authorization-code-grant[Keycloakの認証コード付与]」のセクションで説明されているのと同じ体験ができるでしょう（そのセクションの `redirect_uri` の注意事項にも注意してください）。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:263
#, fuzzy
msgid "If you work with other providers then a Dev UI experience described in the <<keycloak-authorization-code-grant,Authorization Code Grant for Keycloak>> section might differ slightly. For example, an access token may not be in a JWT format so it won't be possible to show its internal content, though all providers should return an ID Token as JWT."
msgstr "他のプロバイダを使用している場合、「 link:#keycloak-authorization-code-grant[Keycloakの認証コード付与]」のセクションで説明されているDev UIエクスペリエンスは若干異なる可能性があります。例えば、アクセストークンはJWT形式ではないかもしれませんので、内部コンテンツを表示することはできませんが、すべてのプロバイダーはIDトークンをJWTとして返すはずです。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:267
#, fuzzy
msgid "The current access token is used by default to test the service with `Swagger UI` or `GrapghQL UI`. If the provider (other than Keycloak) returns a binary access token then it will be used with `Swagger UI` or `GrapghQL UI` only if this provider has a token introspection endpoint otherwise an `IdToken` which is always in a JWT format will be passed to `Swagger UI` or `GrapghQL UI`. In such cases you can verify with the manual Dev UI test that `401` will always be returned for the current binary access token. Also note that using `IdToken` as a fallback with either of these UIs is only possible with the authorization code flow."
msgstr "現在のアクセストークンは、 `Swagger UI` または `GrapghQL UI` でサービスをテストするためにデフォルトで使用されます。プロバイダ（Keycloak以外）がバイナリアクセストークンを返す場合、そのプロバイダがトークンイントロスペクションエンドポイントを持っている場合に限り、 `Swagger UI` または `GrapghQL UI` で使用されます。そうでない場合は、常にJWT形式である `IdToken` が `Swagger UI` または `GrapghQL UI` に渡されます。このような場合には、マニュアルのDev UIテストで、現在のバイナリアクセストークンに対して常に `401` が返されることを確認できます。また、これらのUIのいずれかで `IdToken` をフォールバックとして使用することは、認可コードフローでのみ可能であることに注意してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:270
#, fuzzy
msgid "Some providers such as `Auth0` do not support a standard RP initiated logout so the provider specific logout properties will have to be confogured for a logout option be visible, please see xref:security-openid-connect-web-authentication.adoc#user-initiated-logout[OpenID Connect User-Initiated Logout] for more information."
msgstr "`Auth0` のような一部のプロバイダーは、標準的な RP によるログアウトをサポートしていないため、ログアウトオプションを表示するには、プロバイダー固有のログアウトプロパティを設定する必要があります。詳細については、 link:security-openid-connect-web-authentication.html#user-initiated-logout[OpenId Connect User-Initiated Logout]を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:272
#, fuzzy
msgid "Similarly, if you'd like to use a `password` or `client_credentials` grant for Dev UI to acquire the tokens then you may have to configure some extra provider specific properties, for example:"
msgstr "同様に、 `password` または `client_credentials` のグラントを使用して Dev UI がトークンを取得する場合は、例えばプロバイダ固有のプロパティを追加で構成する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:277
#, no-wrap
msgid ""
"quarkus.oidc.devui.grant.type=password\n"
"quarkus.oidc.devui.grant-options.password.audience=http://localhost:8080\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:279
#, fuzzy, no-wrap
msgid "Dev Services and UI Support for other OpenID Connect Providers"
msgstr "開発サービス 他のOpenId Connect Providersへの対応"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:282
#, fuzzy
msgid "Your custom extension would need to extend `quarkus-oidc` and add the dependencies required to support your provider to the extension's `deployment` module only."
msgstr "あなたのカスタムエクステンションは、 `quarkus-oidc` のみを拡張し、あなたのプロバイダをサポートするために必要な依存関係を、エクステンションの `deployment` モジュールのみに追加する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:284
#, fuzzy
msgid "The build step dealing with the `Dev Services` should additionally register two runtime properties into the \"io.quarkus.quarkus-oidc\" namespace: `oidcProviderName` (for example, `Google`) and `oidcProviderUrlBase` (for example: `mycompany.devservices-google`) for the `OpenID Connect Card` to link to the Dev UI page representing your provider, for example:"
msgstr "`Dev Services` を扱う構築ステップでは、さらに 2 つのランタイム・プロパティを \"io.quarkus.quarkus-oidc\" 名前空間に登録する必要があります。 `oidcProviderName` (例: `Google`) および `oidcProviderUrlBase` (例: `mycompany.devservices-google`) は、 `OpenId Connect Card` がプロバイダを表す Dev UI ページにリンクするためのものです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:288
#, no-wrap
msgid "package io.quarkus.oidc.okta.runtime;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:290
#, no-wrap
msgid "import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:292
#, no-wrap
msgid "import io.quarkus.runtime.annotations.Recorder;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:296
#, no-wrap
msgid ""
"// This simple recorder is the only code which will be located in the extension's `runtime` module\n"
"@Recorder\n"
"public class OktaDevServicesRecorder {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:299
#, no-wrap
msgid ""
"    public Supplier<String> getProviderName() {\n"
"        return new Supplier<String>() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:306
#, no-wrap
msgid ""
"            @Override\n"
"            public String get() {\n"
"                return \"OKTA\";\n"
"            }\n"
"        };\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:309
#, no-wrap
msgid ""
"    public Supplier<String> getProviderUrlBase() {\n"
"        return new Supplier<String>() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:317
#, no-wrap
msgid ""
"            @Override\n"
"            public String get() {\n"
"                return \"io.quarkus\" + \".\" + \"quarkus-oidc-okta\";\n"
"            }\n"
"        };\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:320
#, no-wrap
msgid "package io.quarkus.oidc.okta.deployment.devservices;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:322
#, no-wrap
msgid "import static io.quarkus.deployment.annotations.ExecutionTime.RUNTIME_INIT;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:324
#, no-wrap
msgid "import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:333
#, no-wrap
msgid ""
"import io.quarkus.deployment.IsDevelopment;\n"
"import io.quarkus.deployment.annotations.BuildProducer;\n"
"import io.quarkus.deployment.annotations.BuildStep;\n"
"import io.quarkus.deployment.annotations.Consume;\n"
"import io.quarkus.deployment.annotations.Record;\n"
"import io.quarkus.deployment.builditem.RuntimeConfigSetupCompleteBuildItem;\n"
"import io.quarkus.devconsole.spi.DevConsoleRouteBuildItem;\n"
"import io.quarkus.devconsole.spi.DevConsoleRuntimeTemplateInfoBuildItem;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:335
#, no-wrap
msgid "public class OktaDevConsoleProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:349
#, no-wrap
msgid ""
"    @BuildStep(onlyIf = IsDevelopment.class)\n"
"    @Record(value = RUNTIME_INIT)\n"
"    public void setOidcProviderProperties(BuildProducer<DevConsoleRuntimeTemplateInfoBuildItem> provider,\n"
"            OktaDevServicesRecorder recorder,\n"
"            Optional<DevServicesConfigBuildItem> configProps) {\n"
"        if (configProps.isPresent()) {\n"
"            provider.produce(new DevConsoleRuntimeTemplateInfoBuildItem(\"io.quarkus\", \"quarkus-oidc\", \"oidcProviderName\",\n"
"                    recorder.getProviderName()));\n"
"            provider.produce(new DevConsoleRuntimeTemplateInfoBuildItem(\"io.quarkus\", \"quarkus-oidc\", \"oidcProviderUrlBase\",\n"
"                    recorder.getProviderUrlBase()));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:353
#, fuzzy
msgid "Additionally, the extension should produce a `io.quarkus.oidc.deployment.devservices.OidcProviderBuildItem` to disable the default `Dev Services for Keycloak`, instead of the users having to type `quarkus.keycloak.devservices.enabled=false`."
msgstr "さらに、エクステンションでは、ユーザーが `quarkus.keycloak.devservices.enabled=false` と入力する代わりに、デフォルトの `Dev Services for Keycloak` を無効にする `io.quarkus.oidc.deployment.devservices.OidcProviderBuildItem` を生成する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:355
#, fuzzy
msgid "Please follow the xref:dev-ui.adoc[Dev UI] tutorial as well as check the `extensions/oidc/deployment` sources for more ideas."
msgstr "link:dev-ui[Dev UIの]チュートリアルに従うとともに、 `extensions/oidc/deployment` のソースをチェックしてアイデアを増やしてください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:356
#, fuzzy, no-wrap
msgid "Non Application Root Path Considerations"
msgstr "非アプリケーションのルートパスに関する考察"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:359
#, fuzzy
msgid "This document refers to the `http://localhost:8080/q/dev` Dev UI URL in several places where `q` is a default non application root path. If you customize `quarkus.http.root-path` and/or `quarkus.http.non-application-root-path` properties then replace `q` accordingly, please see https://quarkus.io/blog/path-resolution-in-quarkus/[Path Resolution in Quarkus] for more information."
msgstr "このドキュメントでは `&lt;a href=\"http://localhost:8080/q/dev\" class=\"bare\"&gt;http://localhost:8080/q/dev&lt;/a&gt;`このドキュメントでは、いくつかの箇所でDev UIのURLを参照していますが、そこでは `q` がアプリケーション以外のデフォルトのルートパスになっています。 `quarkus.http.root-path` や `quarkus.http.non-application-root-path` のプロパティをカスタマイズしている場合は、 `q` を適宜置き換えてください。詳しくは、 link:https://quarkus.io/blog/path-resolution-in-quarkus/[QuarkusのPath Resolution]をご覧ください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:360
#, fuzzy, no-wrap
msgid "References"
msgstr "リファレンス"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:363
#, fuzzy
msgid "xref:dev-ui.adoc[Dev UI]"
msgstr "link:dev-ui[Dev UI]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:364
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloak ドキュメント]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:365
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:366
#, fuzzy
msgid "xref:security-openid-connect.adoc[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr "link:security-openid-connect[Quarkus - OpenID Connectを使用したベアラートークン認証によるサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:367
#, fuzzy
msgid "xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr "link:security-openid-connect-web-authentication[Quarkus - OpenID Connectを使用した認証コードフローによるWebアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:367
#, fuzzy
msgid "xref:security.adoc[Quarkus Security]"
msgstr "link:security[Quarkus Security]"

#, fuzzy
#~ msgid "Note that at the moment, if you use a `Keycloak-X` image then auto-importing a custom realm file does not work - for now use a `Keycloak Admin` Dev UI option to import a custom realm if required. In this case you may also want to set `quarkus.keycloak.devservices.create-realm=false` for `Dev Services for Keycloak` to avoid creating a default realm."
#~ msgstr "現時点では、 `Keycloak-X` イメージを使用すると、カスタム・レルムファイルの自動インポートが機能しないことに注意してください。今のところ、必要に応じてカスタム・レルムをインポートするには、 `Keycloak Admin` Dev UI オプションを使用してください。この場合、デフォルトのレルムを作成しないように、 `Dev Services for Keycloak` に `quarkus.keycloak.devservices.create-realm=false` を設定することもできます。"

#, fuzzy
#~ msgid "Some providers such as `Auth0` do not support a standard RP initiated logout so a logout option will also be hidden."
#~ msgstr "`Auth0` のような一部のプロバイダーは、標準的な RP によるログアウトをサポートしていないため、ログアウトオプションも非表示になります。"

#, fuzzy
#~ msgid "At the moment `Dev UI for all OpenId Connect Providers` only supports an authorization code grant. More grants may be supported in the future, similarly to how it is done with `Dev Services for Keycloak`."
#~ msgstr "現時点では、 `Dev UI for all OpenId Connect Providers` は認証コードの付与のみをサポートしています。将来的には、 `Dev Services for Keycloak` と同様に、より多くのグラントをサポートするかもしれません。"

#, fuzzy
#~ msgid "The `quay.io/keycloak/keycloak:14.0.0` Keycloak image is used by default to start a container. `quarkus.keycloak.devservices.image-name` can be used to change the Keycloak image used."
#~ msgstr "コンテナの起動には、デフォルトで `quay.io/keycloak/keycloak:14.0.0` の Keycloak イメージが使用されます。使用する Keycloak イメージを変更するには、 `quarkus.keycloak.devservices.image-name` を使用します。"

#, fuzzy
#~ msgid "Enter a registered user name, a relative service endpoint path, click on `Test Service` and you will see a status code such as `200`, `403`, `401` or `404` printed."
#~ msgstr "登録されているユーザー名、サービスエンドポイントの相対パスを入力し、 `Test Service` をクリックすると、 `200` 、 `403` 、 `401` 、 `404` などのステータスコードが表示されます。"

#, fuzzy
#~ msgid "You do not need to configure `quarkus-oidc-keycloak` to start developing your Quarkus Keycloak `OIDC` applications with the only exception being that `quarkus.oidc.application-type=web-app` has to be set in `application.properties` to give the `Keycloak` page a hint it needs to show an option to `Sign In To Service`."
#~ msgstr "Quarkus Keycloak `OIDC` アプリケーションの開発を始めるにあたり、 `quarkus-oidc-keycloak` を設定する必要はありません。唯一の例外は、 `Keycloak` ページに `Sign In To Service` へのオプション表示に必要なヒントを与えるために、 `application.properties` で `quarkus.oidc.application-type=web-app` を設定する必要があることです。"

#, fuzzy
#~ msgid "Here you can test the service with either the access token or ID token (note that the ID token will be sent as a regular bearer token)."
#~ msgstr "ここでは、アクセストークンまたはIDトークンのいずれかを使ってサービスをテストすることができます（IDトークンは通常のベアラートークンとして送信されることに注意してください）。"

#, fuzzy
#~ msgid "image::dev-ui-keycloak-sign-in-to-spa.png[alt=Dev UI OpenId Connect Keycloak Page - Log into Single Page Application,role=\"center\"]."
#~ msgstr "image::dev-ui-keycloak-sign-in-to-spa.png[alt=Dev UI OpenId Connect Keycloak Page - Log into Single Page Application,role=\"center\"]."

#, fuzzy
#~ msgid "image::dev-ui-keycloak-test-service-from-spa.png[alt=Dev UI OpenId Connect Keycloak Single Page Application,role=\"center\"]."
#~ msgstr "image::dev-ui-keycloak-test-service-from-spa.png[alt=Dev UI OpenId Connect Keycloak Single Page Application,role=\"center\"]."

#, fuzzy
#~ msgid "image::dev-ui-keycloak-client-credentials-grant.png[alt=Dev UI OpenId Connect Keycloak Page - Client Credentials Grant,role=\"center\"]."
#~ msgstr "image::dev-ui-keycloak-client-credentials-grant.png[alt=Dev UI OpenId Connect Keycloak Page - Client Credentials Grant,role=\"center\"]."

#, fuzzy
#~ msgid "image::dev-ui-keycloak-admin.png[alt=Dev UI OpenId Connect Keycloak Page - Keycloak Admin,role=\"center\"]."
#~ msgstr "image::dev-ui-keycloak-admin.png[alt=Dev UI OpenId Connect Keycloak Page - Keycloak Admin,role=\"center\"]."
