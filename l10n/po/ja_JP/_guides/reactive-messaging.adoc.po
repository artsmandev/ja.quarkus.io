# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-05 12:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/reactive-messaging.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus - Asynchronous messages between beans"
msgstr "Quarkus - Bean間の非同期メッセージ"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:13
#, fuzzy
msgid "Quarkus allows different beans to interact using asynchronous messages, enforcing loose-coupling.  The messages are sent to _virtual addresses_.  It offers 3 types of delivery mechanism:"
msgstr "Quarkusでは、異なるBeanが非同期メッセージを使用して相互作用することができ、ルーズカップリングが強制されます。メッセージは _仮想アドレス_ に送信されます。3種類の配信メカニズムを提供しています。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:15
#, fuzzy
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round robin is applied;"
msgstr "point-to-point - メッセージを送信し、1 つのコンシューマがそれを受信します。複数の消費者がアドレスを聞いている場合、ラウンドロビンが適用されます。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:16
#, fuzzy
msgid "publish/subscribe - publish a message, all the consumers listening to the address are receiving the message;"
msgstr "publish/subscribe - メッセージを公開し、アドレスを聞いているすべての消費者がメッセージを受信します。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:17
#, fuzzy
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous-fashion"
msgstr "request/reply - メッセージを送信し、応答を期待します。受信者は非同期的にメッセージに応答することができます。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:19
#, fuzzy
msgid "All these delivery mechanism are non-blocking, and are providing one of the fundamental brick to build reactive applications."
msgstr "これらの配信メカニズムはすべてノンブロッキングであり、反応型アプリケーションを構築するための基本的なレンガの1つを提供しています。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:22
#, fuzzy
msgid "The asynchronous message passing feature allows replying to messages which is not supported by Reactive Messaging.  However, it is limited to single-event behavior (no stream) and to local messages."
msgstr "非同期メッセージパッシング機能は、Reactive Messagingではサポートされていないメッセージへの返信を可能にします。ただし、シングルイベント動作(ストリームなし)とローカルメッセージに限定されます。"

#. type: Title ==
#: upstream/_guides/reactive-messaging.adoc:23
#, fuzzy, no-wrap
msgid "Installing"
msgstr "インストール"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:27
#, fuzzy
msgid "This mechanism uses the Vert.x EventBus, so you need to enable the `vertx` extension to use this feature.  If you are creating a new project, set the `extensions` parameter are follows:"
msgstr "この仕組みはVert.x EventBusを利用しているので、この機能を利用するには `vertx` エクステンションを有効にする必要があります。新規プロジェクトを作成する場合は、 `extensions` パラメーターを以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:35
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vertx-quickstart \\\n"
"    -Dextensions=\"vertx\"\n"
"cd vertx-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:39
#, fuzzy
msgid "If you have an already created project, the `vertx` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr "すでに作成済みのプロジェクトがある場合は、 `vertx` エクステンションを既存のQuarkusプロジェクトに `add-extension` コマンドで追加することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:43
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"vertx\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:46
#, fuzzy
msgid "Otherwise, you can manually add this to the dependencies section of your `pom.xml` file:"
msgstr "そうでなければ、 `pom.xml` ファイルの依存関係セクションに手動で追加することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:53
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vertx</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-messaging.adoc:55
#, fuzzy, no-wrap
msgid "Consuming events"
msgstr "消費イベント"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:58
#, fuzzy
msgid "To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr "イベントを消費するには、 `io.quarkus.vertx.ConsumeEvent` アノテーションを使用します。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:62
#: upstream/_guides/reactive-messaging.adoc:98
#: upstream/_guides/reactive-messaging.adoc:209
#: upstream/_guides/reactive-messaging.adoc:282
#: upstream/_guides/reactive-messaging.adoc:319
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:64
#: upstream/_guides/reactive-messaging.adoc:100
#: upstream/_guides/reactive-messaging.adoc:321
#, no-wrap
msgid "import io.quarkus.vertx.ConsumeEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:66
#: upstream/_guides/reactive-messaging.adoc:323
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:69
#: upstream/_guides/reactive-messaging.adoc:108
#: upstream/_guides/reactive-messaging.adoc:326
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:75
#, no-wrap
msgid ""
"    @ConsumeEvent                           // <1>\n"
"    public String consume(String name) {    // <2>\n"
"        return name.toUpperCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:77
#, fuzzy
msgid "If not set, the address is the fully qualified name of the bean, for instance, in this snippet it's `org.acme.vertx.GreetingService`."
msgstr "設定されていない場合、アドレスはBeanの完全修飾名となり、例えばこのスニペットでは `org.acme.vertx.GreetingService` ."

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:78
#, fuzzy
msgid "The method parameter is the message body. If the method returns _something_ it's the message response."
msgstr "メソッドのパラメーターはメッセージ本体です。メソッドが _何かを_ 返す場合は、それがメッセージのレスポンスになります。"

#. type: delimited block =
#: upstream/_guides/reactive-messaging.adoc:83
#, fuzzy
msgid "By default, the code consuming the event must be _non-blocking_, as it's called on the Vert.x event loop.  If your processing is blocking, use the `blocking` attribute:"
msgstr "デフォルトでは、Vert.x イベントループで呼び出されるため、イベントを消費するコードは _ノン_ ブロッキングでなければなりません。処理がブロッキングされている場合は、 `blocking` 属性を使用してください。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:90
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\", blocking = true)\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-messaging.adoc:94
#, fuzzy
msgid "Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr "`io.smallrye.mutiny.Uni` または `java.util.concurrent.CompletionStage` .NET のどちらかを返すことで、非同期処理も可能です。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:105
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.concurrent.CompletionStage;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:114
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public CompletionStage<String> consume(String name) {\n"
"        // return a CompletionStage completed when the processing is finished.\n"
"        // You can also fail the CompletionStage explicitly\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:121
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public Uni<String> process(String name) {\n"
"        // return an Uni completed when the processing is finished.\n"
"        // You can also fail the Uni explicitly\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/reactive-messaging.adoc:124
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_guides/reactive-messaging.adoc:127
#, fuzzy
msgid "The previous example uses Mutiny reactive types, if you're not familiar with them, we recommend reading the link:getting-started-reactive#mutiny[Getting Started with Reactive guide]."
msgstr "前の例では Mutiny リアクティブタイプを使用していますが、もしよく知らないのであれば、 link:getting-started-reactive#mutiny[Reactive の入門ガイド] を読むことをお勧めします。"

#. type: Title ===
#: upstream/_guides/reactive-messaging.adoc:129
#, fuzzy, no-wrap
msgid "Configuring the address"
msgstr "アドレスの設定"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:132
#, fuzzy
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "`@ConsumeEvent` アノテーションでアドレスを設定することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:139
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")               // <1>\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:141
#, fuzzy
msgid "Receive the messages sent to the `greeting` address"
msgstr "`greeting` アドレスに送信されたメッセージを受信する"

#. type: Title ===
#: upstream/_guides/reactive-messaging.adoc:142
#, fuzzy, no-wrap
msgid "Replying"
msgstr "返事をする"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:146
#, fuzzy
msgid "The _return_ value of a method annotated with `@ConsumeEvent` is used as response to the incoming message.  For instance, in the following snippet, the returned `String` is the response."
msgstr "`@ConsumeEvent` でアノテーションされたメソッドの _戻り_ 値が、着信メッセージに対するレスポンスとして使用されます。例えば、次のスニペットでは、 `String` がレスポンスとして返されます。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:153
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:156
#, fuzzy
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "また、 `Uni<T>` や `CompletionStage<T>` を返すことで、非同期返信を処理することもできます。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:163
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public Uni<String> consume2(String name) {\n"
"    return Uni.createFrom().item(() -> name.toUpperCase()).emitOn(executor);\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-messaging.adoc:168
#, fuzzy
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "Context Propagation エクステンションを使えば、 `executor` を注入することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:171
#, no-wrap
msgid "@Inject Executor executor;\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-messaging.adoc:174
#, fuzzy, no-wrap
msgid "Implementing fire and forget interactions"
msgstr "fire and forgetインタラクションの実装"

#. type: delimited block =
#: upstream/_guides/reactive-messaging.adoc:179
#, fuzzy
msgid "You don't have to reply to received messages.  Typically for a _fire and forget_ interaction, the messages are consumed and the sender does not need to know about it.  To implement this, your consumer method just returns `void`"
msgstr "受信したメッセージに返信する必要はありません。通常、 _fire and forget_ インタラクションでは、メッセージは消費され、送信者はそれについて知る必要はありません。これを実装するには、 consumer メソッドは `void`"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:186
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(String event) {\n"
"    // Do something with the event\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-messaging.adoc:188
#, fuzzy, no-wrap
msgid "Dealing with messages"
msgstr "メッセージへの対応"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:191
#, fuzzy
msgid "As said above, this mechanism is based on the Vert.x event bus. So, you can also use `Message` directly:"
msgstr "上でも述べたように、この仕組みはVert.xイベントバスをベースにしています。なので、直接 `Message` を使うこともできます。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:199
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(Message<String> msg) {\n"
"    System.out.println(msg.address());\n"
"    System.out.println(msg.body());\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-messaging.adoc:201
#, fuzzy, no-wrap
msgid "Sending messages"
msgstr "メッセージの送信"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:205
#, fuzzy
msgid "Ok, we have seen how to receive messages, let's now switch to the _other side_: the sender.  Sending and publishing messages use the Vert.x event bus:"
msgstr "さて、メッセージを受信する方法を見てきましたが、次は送信者 _側_ に切り替えましょう。メッセージの送信と公開は Vert.x イベントバスを使います。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:214
#: upstream/_guides/reactive-messaging.adoc:287
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.eventbus.EventBus;\n"
"import io.vertx.mutiny.core.eventbus.Message;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:220
#: upstream/_guides/reactive-messaging.adoc:293
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:223
#: upstream/_guides/reactive-messaging.adoc:296
#, no-wrap
msgid ""
"@Path(\"/async\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:226
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;                                       // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:235
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(@PathParam String name) {\n"
"        return bus.<String>request(\"greeting\", name)        // <2>\n"
"                .onItem().apply(Message::body);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:237
#, fuzzy
msgid "Inject the Event bus"
msgstr "イベントバスのインジェクト"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:238
#, fuzzy
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "アドレス `greeting` にメッセージを送信してください。メッセージのペイロードは `name`"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:240
#, fuzzy
msgid "The `EventBus` object provides methods to:"
msgstr "`EventBus` オブジェクトは、以下のメソッドを提供します。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:242
#, fuzzy
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` 特定のアドレスへのメッセージ - 一人の消費者がメッセージを受信する。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:243
#, fuzzy
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` 特定のアドレスにメッセージを送る - すべての消費者がメッセージを受け取る。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:244
#, fuzzy
msgid "`send` a message and expect reply"
msgstr "`send` メッセージを送って返信を期待する"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:254
#, no-wrap
msgid ""
"// Case 1\n"
"bus.sendAndForget(\"greeting\", name)\n"
"// Case 2\n"
"bus.publish(\"greeting\", name)\n"
"// Case 3\n"
"Uni<String> response = bus.<String>request(\"address\", \"hello, how are you?\")\n"
"        .onItem().apply(Message::body);\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-messaging.adoc:256
#, fuzzy, no-wrap
msgid "Putting things together - bridging HTTP and messages"
msgstr "物事をまとめる - HTTPとメッセージのブリッジング"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:262
#, fuzzy
msgid "Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.  It uses the request/reply dispatching mechanism.  Instead of implementing the business logic inside the JAX-RS endpoint, we are sending a message.  This message is consumed by another bean and the response is sent using the _reply_ mechanism."
msgstr "挨拶HTTPエンドポイントを再訪し、非同期メッセージパッシングを使用して分離されたBeanに呼び出しを委譲してみましょう。リクエスト/レスポンスディスパッチの仕組みを利用しています。JAX-RSエンドポイント内にビジネスロジックを実装する代わりに、メッセージを送信しています。このメッセージは別のBeanによって消費され、応答は _応答_ 機構を使用して送信されます。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:264
#, fuzzy
msgid "First create a new project using:"
msgstr "まず、新しいプロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:272
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vertx-http-quickstart \\\n"
"    -Dextensions=\"vertx\"\n"
"cd vertx-http-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:275
#, fuzzy
msgid "You can already start the application in _dev mode_ using `./mvnw compile quarkus:dev`."
msgstr "`./mvnw compile quarkus:dev` を使用して、すでに _開発者モード_ でアプリケーションを起動することができます。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:277
#, fuzzy
msgid "Then, creates a new JAX-RS resource with the following content:"
msgstr "そして、以下の内容のJAX-RSリソースを新規に作成します。"

#. type: Block title
#: upstream/_guides/reactive-messaging.adoc:279
#, fuzzy, no-wrap
msgid "src/main/java/org/acme/vertx/EventResource.java"
msgstr "src/main/java/org/acme/vertx/ventResource.java"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:299
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:308
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(@PathParam String name) {\n"
"        return bus.<String>request(\"greeting\", name)            // <1>\n"
"                .onItem().apply(Message::body);            // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:310
#, fuzzy
msgid "send the `name` to the `greeting` address and request a response"
msgstr "`name` `greeting` を送信し、回答を求める。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:311
#, fuzzy
msgid "when we get the response, extract the body and send it to the user"
msgstr "レスポンスを取得したら、本文を抽出してユーザーに送信します。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:314
#, fuzzy
msgid "If you call this endpoint, you will wait and get a timeout. Indeed, no one is listening.  So, we need a consumer listening on the `greeting` address. Create a `GreetingService` bean with the following content:"
msgstr "このエンドポイントを呼び出すと、待っていてタイムアウトになります。確かに、誰も聞いていません。そこで、 `greeting` アドレスでリスニングしているコンシューマーが必要です。以下の内容の `GreetingService` Beanを作成します。"

#. type: Block title
#: upstream/_guides/reactive-messaging.adoc:316
#, fuzzy, no-wrap
msgid "src/main/java/org/acme/vertx/GreetingService.java"
msgstr "src/main/java/org/acme/vertx/GreetingService.java"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:331
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greeting\")\n"
"    public String greeting(String name) {\n"
"        return \"Hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:333
#, no-wrap
msgid "}\n"
msgstr "}"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:336
#, fuzzy
msgid "This bean receives the name, and returns the greeting message."
msgstr "このBeanは名前を受け取り,挨拶メッセージを返します."

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:338
#, fuzzy
msgid "Now, open your browser to http://localhost:8080/async/Quarkus, and you should see:"
msgstr "さて、ブラウザを開いて http://localhost:8080/async/Quarkus 。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:342
#, no-wrap
msgid "Hello Quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:345
#, fuzzy
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "より理解しやすくするために、HTTPリクエスト/レスポンスがどのように処理されたかを詳しく見てみましょう。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:347
#, fuzzy
msgid "The request is received by the `hello` method"
msgstr "リクエストは `hello` メソッドで受信します。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:348
#, fuzzy
msgid "a message containing the _name_ is sent to the event bus"
msgstr "_名前を_ 含むメッセージがイベントバスに送信されます。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:349
#, fuzzy
msgid "Another bean receives this message and computes the response"
msgstr "別のBeanはこのメッセージを受信して,応答を計算します."

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:350
#, fuzzy
msgid "This response is sent back using the reply mechanism"
msgstr "この応答は、リプライ機構を使用して返信されます。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:351
#, fuzzy
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "送信者が返信を受信すると、HTTPレスポンスに内容が書き込まれます。"

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:353
#, fuzzy
msgid "This application can be packaged using:"
msgstr "このアプリケーションは、以下の方法でパッケージ化することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:357
#, no-wrap
msgid "./mvnw clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-messaging.adoc:360
#, fuzzy
msgid "You can also compile it as a native executable with:"
msgstr "でネイティブ実行ファイルとしてコンパイルすることもできます。"

#. type: delimited block -
#: upstream/_guides/reactive-messaging.adoc:364
#, no-wrap
msgid "./mvnw clean package -Pnative\n"
msgstr ""
