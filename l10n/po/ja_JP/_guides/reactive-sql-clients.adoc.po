# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-30 14:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/reactive-sql-clients.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus - Reactive SQL Clients"
msgstr "Quarkus - リアクティブSQLクライアント"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:13
#, fuzzy
msgid "The Reactive SQL Clients have a straightforward API focusing on scalability and low-overhead.  Currently, the following database servers are supported:"
msgstr "Reactive SQL クライアントは、スケーラビリティと低オーバーヘッドに焦点を当てたシンプルな API を持っています。現在、以下のデータベースサーバーがサポートされています。"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:15
#: upstream/_guides/reactive-sql-clients.adoc:475
#: upstream/_guides/reactive-sql-clients.adoc:662
#, fuzzy, no-wrap
msgid "DB2"
msgstr "ディービーツー"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:16
#: upstream/_guides/reactive-sql-clients.adoc:483
#: upstream/_guides/reactive-sql-clients.adoc:588
#: upstream/_guides/reactive-sql-clients.adoc:670
#, fuzzy, no-wrap
msgid "PostgreSQL"
msgstr "ポストジェスチル"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:17
#: upstream/_guides/reactive-sql-clients.adoc:479
#: upstream/_guides/reactive-sql-clients.adoc:606
#: upstream/_guides/reactive-sql-clients.adoc:666
#, fuzzy, no-wrap
msgid "MariaDB/MySQL"
msgstr "MariaDB/MySQL"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:19
#, fuzzy
msgid "In this guide, you will learn how to implement a simple CRUD application exposing data stored in *PostgreSQL* over a RESTful API."
msgstr "このガイドでは、 *PostgreSQL* に格納されたデータをRESTful APIで公開するシンプルなCRUDアプリケーションの実装方法を学びます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:21
#, fuzzy
msgid "Extension and connection pool class names for each client can be found at the bottom of this document."
msgstr "各クライアントのエクステンションと接続プールのクラス名は、このドキュメントの下部に記載されています。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:23
#, fuzzy
msgid "If you are not familiar with the Quarkus Vert.x extension, consider reading the link:vertx[Using Eclipse Vert.x] guide first."
msgstr "Quarkus Vert.xエクステンションに慣れていない場合は、まず link:vertx[Using Eclipse Vert.x] ガイドを読むことを検討してください。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:25
#, fuzzy
msgid "The application shall manage fruit entities:"
msgstr "アプリケーションは、果実の実体を管理するものとする。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:29
#, no-wrap
msgid "public class Fruit {\n"
msgstr "public class Fruit {\n"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:31
#, no-wrap
msgid "    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:33
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:36
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""
"    public Fruit() {\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:40
#, no-wrap
msgid ""
"    public Fruit(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:46
#, no-wrap
msgid ""
"    public Fruit(Long id, String name) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-sql-clients.adoc:51
#, fuzzy
msgid "Do you need a ready-to-use PostgreSQL server to try out the examples?"
msgstr "実例を試すためにすぐに使えるPostgreSQLサーバーは必要ですか?"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:55
#, no-wrap
msgid "docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:10.5\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:58
#, fuzzy, no-wrap
msgid "Installing"
msgstr "インストール"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:60
#, fuzzy, no-wrap
msgid "Reactive PostgreSQL Client extension"
msgstr "Reactive PostgreSQLクライアント拡張"

#. type: delimited block =
#: upstream/_guides/reactive-sql-clients.adoc:64
#, fuzzy
msgid "First, make sure your project has the `quarkus-reactive-pg-client` extension enabled.  If you are creating a new project, set the `extensions` parameter as follows:"
msgstr "まず、プロジェクトで `quarkus-reactive-pg-client` のエクステンションが有効になっていることを確認します。新しいプロジェクトを作成する場合は、 `extensions` パラメーターを以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:74
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=reactive-pg-client-quickstart \\\n"
"    -DclassName=\"org.acme.vertx.FruitResource\" \\\n"
"    -Dpath=\"/fruits\" \\\n"
"    -Dextensions=\"resteasy,reactive-pg-client,resteasy-mutiny\"\n"
"cd reactive-pg-client-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:77
#, fuzzy
msgid "If you have an already created project, the `reactive-pg-client` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr "すでに作成済みのプロジェクトがある場合は、 `reactive-pg-client` エクステンションを既存のQuarkusプロジェクトに追加するには、 `add-extension` コマンドを使用します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:81
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"reactive-pg-client\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:84
#, fuzzy
msgid "Otherwise, you can manually add this to the dependencies section of your `pom.xml` file:"
msgstr "そうでなければ、 `pom.xml` ファイルの依存関係セクションに手動で追加することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:91
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:93
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:96
#, fuzzy
msgid "Reactive REST endpoints in your application that return Uni or Multi need `Mutiny support for RESTEasy` extension (`io.quarkus:quarkus-resteasy-mutiny`) to work properly:"
msgstr "アプリケーション内で Uni または Multi を返す Reactive REST エンドポイントが正しく動作するには `Mutiny support for RESTEasy` エクステンション ( `io.quarkus:quarkus-resteasy-mutiny` ) が必要です。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:100
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"resteasy-mutiny\"\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-sql-clients.adoc:106
#, fuzzy
msgid "In this guide, we will use the Mutiny API of the Reactive PostgreSQL Client.  If you're not familiar with Mutiny reactive types, read the link:getting-started-reactive#mutiny[Getting Started with Reactive guide] first."
msgstr "このガイドでは、Reactive PostgreSQLクライアントのMutiny APIを使用します。Mutinyのリアクティブ型に慣れていない場合は、まず link:getting-started-reactive#mutiny[Getting Started with Reactiveガイド] を読んでください。"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:108
#, fuzzy, no-wrap
msgid "JSON Binding"
msgstr "JSON バインディング"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:112
#, fuzzy
msgid "We will expose `Fruit` instances over HTTP in the JSON format.  Consequently, you also need to add the `quarkus-resteasy-jackson` extension:"
msgstr "JSON 形式で HTTP 経由で `Fruit` インスタンスを公開します。その結果、 `quarkus-resteasy-jackson` のエクステンションも追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:116
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"resteasy-jackson\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:119
#, fuzzy
msgid "If you prefer not to use the command line, manually add this to the dependencies section of your `pom.xml` file:"
msgstr "コマンドラインを使いたくない場合は、 `pom.xml` ファイルの依存関係セクションに手動で追加してください。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:126
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:129
#, fuzzy
msgid "Of course, this is only a requirement for this guide, not any application using the Reactive PostgreSQL Client."
msgstr "もちろん、これはこのガイドの要件に過ぎず、Reactive PostgreSQLクライアントを使用したアプリケーションではありません。"

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:130
#, fuzzy, no-wrap
msgid "Configuring"
msgstr "設定"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:133
#, fuzzy
msgid "The Reactive PostgreSQL Client can be configured with standard Quarkus datasource properties and a reactive URL:"
msgstr "Reactive PostgreSQLクライアントは、Quarkusの標準的なデータソースプロパティーと反応性のあるURLを使用して設定することができます。"

#. type: Block title
#: upstream/_guides/reactive-sql-clients.adoc:135
#, fuzzy, no-wrap
msgid "src/main/resources/application.properties"
msgstr "src/main/resources/application.properties"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:141
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:144
#, fuzzy
msgid "With that you may create your `FruitResource` skeleton and `@Inject` a `io.vertx.mutiny.pgclient.PgPool` instance:"
msgstr "これで `FruitResource` スケルトンと `@Inject` `io.vertx.mutiny.pgclient.PgPool` インスタンスを作成することができます。"

#. type: Block title
#: upstream/_guides/reactive-sql-clients.adoc:146
#: upstream/_guides/reactive-sql-clients.adoc:165
#: upstream/_guides/reactive-sql-clients.adoc:262
#: upstream/_guides/reactive-sql-clients.adoc:314
#: upstream/_guides/reactive-sql-clients.adoc:341
#: upstream/_guides/reactive-sql-clients.adoc:373
#, fuzzy, no-wrap
msgid "src/main/java/org/acme/vertx/FruitResource.java"
msgstr "src/main/java/org/acme/vertx/FruitResource.java"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:150
#, no-wrap
msgid ""
"@Path(\"fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:154
#, no-wrap
msgid ""
"    @Inject\n"
"    io.vertx.mutiny.pgclient.PgPool client;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:156
#, fuzzy, no-wrap
msgid "Database schema and seed data"
msgstr "データベーススキーマとシードデータ"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:160
#, fuzzy
msgid "Before we implement the REST endpoint and data management code, we need to setup the database schema.  It would also be convenient to have some data inserted upfront."
msgstr "RESTエンドポイントとデータ管理コードを実装する前に、データベーススキーマを設定する必要があります。また、いくつかのデータを前もって挿入しておくと便利です。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:163
#, fuzzy
msgid "For production we would recommend to use something like the link:flyway[Flyway database migration tool].  But for development we can simply drop and create the tables on startup, and then insert a few fruits."
msgstr "本番環境では、 link:flyway[Flywayデータベース移行ツール] のようなものを使用することをお勧めします。しかし、開発のためには、単に起動時にテーブルをドロップして作成し、いくつかのフルーツを挿入することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:170
#, no-wrap
msgid ""
"@Inject\n"
"@ConfigProperty(name = \"myapp.schema.create\", defaultValue = \"true\") // <1>\n"
"boolean schemaCreate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:177
#, no-wrap
msgid ""
"@PostConstruct\n"
"void config() {\n"
"    if (schemaCreate) {\n"
"        initdb();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:181
#, no-wrap
msgid ""
"private void initdb() {\n"
"    // TODO\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:184
#, fuzzy
msgid "You may override the default value of the `myapp.schema.create` property in the `application.properties` file."
msgstr "`application.properties` ファイルの `myapp.schema.create` プロパティーのデフォルト値を上書きすることができます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:188
#, fuzzy
msgid "Almost ready! To initialize the DB in development mode, we will use the client simple `query` method.  It returns a `Uni` and thus can be composed to execute queries sequentially:"
msgstr "もう少しで準備完了!開発モードでDBを初期化するには、クライアントのシンプルな `query` メソッドを使用します。これは `Uni` を返すので、順次クエリを実行するように構成することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:197
#, no-wrap
msgid ""
"client.query(\"DROP TABLE IF EXISTS fruits\").execute()\n"
"    .flatMap(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\").execute())\n"
"    .await().indefinitely();\n"
msgstr ""

#. type: Block title
#: upstream/_guides/reactive-sql-clients.adoc:200
#, fuzzy, no-wrap
msgid "Breaking Change in Quarkus 1.5"
msgstr "Quarkus 1.5での変更点の修正"

#. type: delimited block =
#: upstream/_guides/reactive-sql-clients.adoc:204
#, fuzzy
msgid "Vert.x 3.9, integrated in Quarkus 1.5, introduces a breaking change regarding the `query` methods.  To retrieve the result you need to call `.execute()`."
msgstr "Vert.x 3.9は、Quarkus 1.5に統合され、 `query` メソッドに関する画期的な変更が導入されました。結果を取得するには、 `.execute()` を呼び出す必要があります。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:209
#, fuzzy
msgid "Wondering why we need block until the latest query is completed? This code is part of a `@PostConstruct` method and Quarkus invokes it synchronously.  As a consequence, returning prematurely could lead to serving requests while the database is not ready yet."
msgstr "なぜ最新のクエリが完了するまでブロックする必要があるのでしょうか?このコードは `@PostConstruct` メソッドの一部であり、Quarkus はこれを同期的に呼び出します。結果的に、早期に返すと、データベースの準備ができていない状態でリクエストを処理することになる可能性があります。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:213
#, fuzzy
msgid "That's it! So far we have seen how to configure a pooled client and execute simple queries.  We are now ready to develop the data management code and implement our RESTful endpoint."
msgstr "これで終わりです。ここまでで、プールされたクライアントを設定し、簡単なクエリを実行する方法を見てきました。これで、データ管理コードを開発し、RESTful エンドポイントを実装する準備が整いました。"

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:214
#, fuzzy, no-wrap
msgid "Using"
msgstr "を使用しています。"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:216
#, fuzzy, no-wrap
msgid "Query results traversal"
msgstr "クエリ結果のトラバーサル"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:220
#, fuzzy
msgid "In development mode, the database is set up with a few rows in the `fruits` table.  To retrieve all the data, we will use the `query` method again:"
msgstr "開発モードでは、データベースは `fruits` テーブルに数行設定されています。すべてのデータを取得するには、再度 `query` メソッドを使用します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:224
#, no-wrap
msgid "Uni<RowSet<Row>> rowSet = client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\").execute();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:228
#, fuzzy
msgid "When the operation completes, we will get a `RowSet` that has all the rows buffered in memory.  A `RowSet` is an `java.lang.Iterable<Row>` and thus can be converted to a `Multi`:"
msgstr "操作が完了すると、メモリーにすべての行がバッファリングされた `RowSet` が得られます。 `RowSet` は `java.lang.Iterable<Row>` であるため、 `Multi` に変換することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:234
#, no-wrap
msgid ""
"Multi<Fruit> fruits = rowSet\n"
"  .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"  .onItem().transform(Fruit::from);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:238
#, fuzzy
msgid "The `Fruit#from` method converts a `Row` instance to a `Fruit` instance.  It is extracted as a convenience for the implementation of the other data management methods:"
msgstr "`Fruit#from` メソッドは、 `Row` インスタンスを `Fruit` インスタンスに変換します。他のデータ管理メソッドを実装する際の利便性として抽出しています。"

#. type: Block title
#: upstream/_guides/reactive-sql-clients.adoc:240
#: upstream/_guides/reactive-sql-clients.adoc:250
#: upstream/_guides/reactive-sql-clients.adoc:299
#: upstream/_guides/reactive-sql-clients.adoc:330
#: upstream/_guides/reactive-sql-clients.adoc:361
#, fuzzy, no-wrap
msgid "src/main/java/org/acme/vertx/Fruit.java"
msgstr "src/main/java/org/acme/vertx/Fruit.java"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:245
#, no-wrap
msgid ""
"private static Fruit from(Row row) {\n"
"    return new Fruit(row.getLong(\"id\"), row.getString(\"name\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:248
#, fuzzy
msgid "Putting it all together, the `Fruit.findAll` method looks like:"
msgstr "まとめてみると、 `Fruit.findAll` の方法は次のようになります。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:257
#, no-wrap
msgid ""
"public static Multi<Fruit> findAll(PgPool client) {\n"
"    return client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\").execute()\n"
"            .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"            .onItem().transform(Fruit::from);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:260
#, fuzzy
msgid "And the endpoint to get all fruits from the backend:"
msgstr "そして、バックエンドからすべてのフルーツを取得するためのエンドポイント。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:268
#, no-wrap
msgid ""
"@GET\n"
"public Multi<Fruit> get() {\n"
"    return Fruit.findAll(client);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:271
#, fuzzy
msgid "Now start Quarkus in `dev` mode with:"
msgstr "ここで、 `dev` モードでQuarkusを起動します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:275
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr "./mvnw compile quarkus:dev\n"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:278
#, fuzzy
msgid "Lastly, open your browser and navigate to http://localhost:8080/fruits, you should see:"
msgstr "最後に、ブラウザを開いて http://localhost:8080/fruits に移動してください。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:282
#, no-wrap
msgid "[{\"id\":3,\"name\":\"Apple\"},{\"id\":1,\"name\":\"Orange\"},{\"id\":2,\"name\":\"Pear\"}]\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:284
#, fuzzy, no-wrap
msgid "Prepared queries"
msgstr "準備されたクエリ"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:287
#, fuzzy
msgid "The Reactive PostgreSQL Client can also prepare queries and take parameters that are replaced in the SQL statement at execution time:"
msgstr "Reactive PostgreSQLクライアントは、クエリを準備し、実行時にSQL文の中で置換されるパラメーターを取ることもできます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:291
#, no-wrap
msgid "client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\").execute(Tuple.of(id))\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:294
#, fuzzy
msgid "The SQL string can refer to parameters by position, using $1, $2, ...etc."
msgstr "SQL文字列は、$1, $2, ...などを使用して、位置ごとにパラメーターを参照することができます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:297
#, fuzzy
msgid "Similar to the simple `query` method, `preparedQuery` returns an instance of `PreparedQuery<RowSet<Row>>`.  Equipped with this tooling, we are able to safely use an `id` provided by the user to get the details of a particular fruit:"
msgstr "単純な `query` メソッドと同様に、 `preparedQuery` は `PreparedQuery<RowSet<Row>>` のインスタンスを返します。このツールを使用することで、ユーザーが提供した `id` を安全に使用して、特定の果物の詳細を取得することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:306
#, no-wrap
msgid ""
"public static Uni<Fruit> findById(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\").execute(Tuple.of(id)) // <1>\n"
"            .onItem().transform(RowSet::iterator) // <2>\n"
"            .onItem().transform(iterator -> iterator.hasNext() ? from(iterator.next()) : null); // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:308
#, fuzzy
msgid "Create a `Tuple` to hold the prepared query parameters."
msgstr "用意されたクエリパラメーターを保持するために `Tuple` を作成します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:309
#, fuzzy
msgid "Get an `Iterator` for the `RowSet` result."
msgstr "`RowSet` の結果は `Iterator` を取得してください。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:310
#, fuzzy
msgid "Create a `Fruit` instance from the `Row` if an entity was found."
msgstr "エンティティーが見つかった場合は、 `Row` から `Fruit` インスタンスを作成します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:312
#, fuzzy
msgid "And in the JAX-RS resource:"
msgstr "そして、JAX-RSリソースの中に"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:323
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"{id}\")\n"
"public Uni<Response> getSingle(@PathParam Long id) {\n"
"    return Fruit.findById(client, id)\n"
"            .onItem().transform(fruit -> fruit != null ? Response.ok(fruit) : Response.status(Status.NOT_FOUND)) // <1>\n"
"            .onItem().transform(ResponseBuilder::build); // <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:325
#, fuzzy
msgid "Prepare a JAX-RS response with either the `Fruit` instance if found or the `404` status code."
msgstr "`Fruit` インスタンスが見つかった場合は インスタンス、または `404` ステータスコードのいずれかを含む JAX-RS レスポンスを準備します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:326
#, fuzzy
msgid "Build and send the response."
msgstr "レスポンスを構築して送信します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:328
#, fuzzy
msgid "The same logic applies when saving a `Fruit`:"
msgstr "`Fruit` ."

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:336
#, no-wrap
msgid ""
"public Uni<Long> save(PgPool client) {\n"
"    return client.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\").execute(Tuple.of(name))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.iterator().next().getLong(\"id\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:339
#, fuzzy
msgid "And in the web resource we handle the `POST` request:"
msgstr "そして、ウェブリソースでは `POST` のリクエストを処理します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:349
#, no-wrap
msgid ""
"@POST\n"
"public Uni<Response> create(Fruit fruit) {\n"
"    return fruit.save(client)\n"
"            .onItem().transform(id -> URI.create(\"/fruits/\" + id))\n"
"            .onItem().transform(uri -> Response.created(uri).build());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:351
#, fuzzy, no-wrap
msgid "Result metadata"
msgstr "結果のメタデータ"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:354
#, fuzzy
msgid "A `RowSet` does not only hold your data in memory, it also gives you some information about the data itself, such as:"
msgstr "`RowSet` はメモリーにデータを保持しているだけでなく、データそのものについての情報が得られるなど、ある程度の情報が得られます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:356
#, fuzzy
msgid "the number of rows affected by the query (inserted/deleted/updated/retrieved depending on the query type),"
msgstr "クエリによって影響を受ける行の数 (クエリの種類に応じて、挿入/削除/更新/再取得)。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:357
#, fuzzy
msgid "the column names."
msgstr "カラム名を指定します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:359
#, fuzzy
msgid "Let's use this to support removal of fruits in the database:"
msgstr "これを利用して、データベース内の果物の除去をサポートしてみましょう。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:367
#, no-wrap
msgid ""
"public static Uni<Boolean> delete(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"DELETE FROM fruits WHERE id = $1\").execute(Tuple.of(id))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.rowCount() == 1); // <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:369
#, fuzzy
msgid "Inspect metadata to determine if a fruit has been actually deleted."
msgstr "メタデータを検査して、果物が実際に削除されたかどうかを判断します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:371
#, fuzzy
msgid "And to handle the HTTP `DELETE` method in the web resource:"
msgstr "そして、ウェブリソース内のHTTP `DELETE` メソッドを処理する。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:382
#, no-wrap
msgid ""
"@DELETE\n"
"@Path(\"{id}\")\n"
"public Uni<Response> delete(@PathParam Long id) {\n"
"    return Fruit.delete(client, id)\n"
"            .onItem().transform(deleted -> deleted ? Status.NO_CONTENT : Status.NOT_FOUND)\n"
"            .onItem().transform(status -> Response.status(status).build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:386
#, fuzzy
msgid "With `GET`, `POST` and `DELETE` methods implemented, we may now create a minimal web page to try the RESTful application out.  We will use https://jquery.com/[jQuery] to simplify interactions with the backend:"
msgstr "`GET` 、 `POST` 、 `DELETE` メソッドが実装されたので、RESTful アプリケーションを試すための最小限のウェブページを作成することができます。バックエンドとのインタラクションを簡素化するために link:https://jquery.com/[jQuery を] 使用します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:399
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>Reactive PostgreSQL Client - Quarkus</title>\n"
"    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n"
"            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n"
"    <script type=\"application/javascript\" src=\"fruits.js\"></script>\n"
"</head>\n"
"<body>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:401
#, no-wrap
msgid "<h1>Fruits API Testing</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:404
#, no-wrap
msgid ""
"<h2>All fruits</h2>\n"
"<div id=\"all-fruits\"></div>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:409
#, no-wrap
msgid ""
"<h2>Create Fruit</h2>\n"
"<input id=\"fruit-name\" type=\"text\">\n"
"<button id=\"create-fruit-button\" type=\"button\">Create</button>\n"
"<div id=\"create-fruit\"></div>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:412
#, no-wrap
msgid ""
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:415
#, fuzzy
msgid "In the Javascript code, we need a function to refresh the list of fruits when:"
msgstr "Javascriptのコードでは、果物のリストを更新する関数が必要です。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:417
#, fuzzy
msgid "the page is loaded, or"
msgstr "ページが読み込まれているか"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:418
#, fuzzy
msgid "a fruit is added, or"
msgstr "果実が追加されたり"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:419
#, fuzzy
msgid "a fruit is deleted."
msgstr "果実が削除されます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:444
#, no-wrap
msgid ""
"function refresh() {\n"
"    $.get('/fruits', function (fruits) {\n"
"        var list = '';\n"
"        (fruits || []).forEach(function (fruit) { // <1>\n"
"            list = list\n"
"                + '<tr>'\n"
"                + '<td>' + fruit.id + '</td>'\n"
"                + '<td>' + fruit.name + '</td>'\n"
"                + '<td><a href=\"#\" onclick=\"deleteFruit(' + fruit.id + ')\">Delete</a></td>'\n"
"                + '</tr>'\n"
"        });\n"
"        if (list.length > 0) {\n"
"            list = ''\n"
"                + '<table><thead><th>Id</th><th>Name</th><th></th></thead>'\n"
"                + list\n"
"                + '</table>';\n"
"        } else {\n"
"            list = \"No fruits in database\"\n"
"        }\n"
"        $('#all-fruits').html(list);\n"
"    });\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:448
#, no-wrap
msgid ""
"function deleteFruit(id) {\n"
"    $.ajax('/fruits/' + id, {method: 'DELETE'}).then(refresh);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:450
#, no-wrap
msgid "$(document).ready(function () {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:459
#, no-wrap
msgid ""
"    $('#create-fruit-button').click(function () {\n"
"        var fruitName = $('#fruit-name').val();\n"
"        $.post({\n"
"            url: '/fruits',\n"
"            contentType: 'application/json',\n"
"            data: JSON.stringify({name: fruitName})\n"
"        }).then(refresh);\n"
"    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:462
#, no-wrap
msgid ""
"    refresh();\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:464
#, fuzzy
msgid "The `fruits` parameter is not defined when the database is empty."
msgstr "データベースが空の場合、 `fruits` パラメーターは定義されません。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:467
#, fuzzy
msgid "All done! Navigate to http://localhost:8080/fruits.html and read/create/delete some fruits."
msgstr "全て完了しました。 http://localhost:8080/fruits.html に移動して、いくつかの果物を読む/作成/削除します。"

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:468
#, fuzzy, no-wrap
msgid "Database Clients details"
msgstr "データベースクライアントの詳細"

#. type: Table
#: upstream/_guides/reactive-sql-clients.adoc:472
#, fuzzy, no-wrap
msgid "Database"
msgstr "データベース"

#. type: Table
#: upstream/_guides/reactive-sql-clients.adoc:472
#, fuzzy, no-wrap
msgid "Extension name"
msgstr "エクステンション名"

#. type: Table
#: upstream/_guides/reactive-sql-clients.adoc:474
#, fuzzy, no-wrap
msgid "Pool class name"
msgstr "プールクラス名"

#. type: Table
#: upstream/_guides/reactive-sql-clients.adoc:476
#, fuzzy, no-wrap
msgid "`quarkus-reactive-db2-client`"
msgstr "`quarkus-reactive-db2-client`"

#. type: Table
#: upstream/_guides/reactive-sql-clients.adoc:478
#, fuzzy, no-wrap
msgid "`io.vertx.mutiny.db2client.DB2Pool`"
msgstr "`io.vertx.mutiny.db2client.DB2Pool`"

#. type: Table
#: upstream/_guides/reactive-sql-clients.adoc:480
#, fuzzy, no-wrap
msgid "`quarkus-reactive-mysql-client`"
msgstr "`quarkus-reactive-mysql-client`"

#. type: Table
#: upstream/_guides/reactive-sql-clients.adoc:482
#, fuzzy, no-wrap
msgid "`io.vertx.mutiny.mysqlclient.MySQLPool`"
msgstr "`io.vertx.mutiny.mysqlclient.MySQLPool`"

#. type: Table
#: upstream/_guides/reactive-sql-clients.adoc:484
#, fuzzy, no-wrap
msgid "`quarkus-reactive-pg-client`"
msgstr "`quarkus-reactive-pg-client`"

#. type: Table
#: upstream/_guides/reactive-sql-clients.adoc:485
#, fuzzy, no-wrap
msgid "`io.vertx.mutiny.pgclient.PgPool`"
msgstr "`io.vertx.mutiny.pgclient.PgPool`"

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:487
#, fuzzy, no-wrap
msgid "Transactions"
msgstr "取引"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:492
#, fuzzy
msgid "The reactive SQL clients support transactions.  A transaction is started with `client.begin()` and terminated with either `tx.commit()` or `tx.rollback()`.  All these operations are asynchronous:"
msgstr "リアクティブ SQL クライアントはトランザクションをサポートしています。トランザクションは `client.begin()` で開始され、 `tx.commit()` または `tx.rollback()` で終了します。これらの操作はすべて非同期です。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:494
#, fuzzy
msgid "`client.begin()` returns a `Uni<Transaction>`"
msgstr "`client.begin()` は `Uni<Transaction>`"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:495
#, fuzzy
msgid "`client.commit()` and `client.rollback()` return `Uni<Void>`"
msgstr "`client.commit()` と `client.rollback()` のリターン `Uni<Void>`"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:498
#, fuzzy
msgid "Managing transactions in the reactive programming world can be cumbersome.  Instead of writing repetitive and complex (thus error-prone!) code, you can use the `io.vertx.mutiny.sqlclient.SqlClientHelper`."
msgstr "リアクティブプログラミングの世界でトランザクションを管理するのは面倒です。反復的で複雑な(したがってエラーが発生しやすい!)コードを書く代わりに、 `io.vertx.mutiny.sqlclient.SqlClientHelper` ."

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:500
#, fuzzy
msgid "The following snippet shows how to run 2 insertions in the same transaction:"
msgstr "次のスニペットは、同じトランザクション内で2つの挿入を実行する方法を示しています。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:509
#, no-wrap
msgid ""
"public static Uni<Void> insertTwoFruits(PgPool client, Fruit fruit1, Fruit fruit2) {\n"
"    return SqlClientHelper.inTransactionUni(client, tx -> {\n"
"        Uni<RowSet<Row>> insertOne = tx.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit1.name));\n"
"        Uni<RowSet<Row>> insertTwo = tx.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit2.name));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:515
#, no-wrap
msgid ""
"        return insertOne.and(insertTwo)\n"
"                // Ignore the results (the two ids)\n"
"                .onItem().ignore().andContinueWithNull();\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:518
#, fuzzy
msgid "In this example, the transaction is automatically committed on success or rolled back on failure."
msgstr "この例では、トランザクションは成功時には自動的にコミットされ、失敗時にはロールバックされます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:520
#, fuzzy
msgid "You can also create dependent actions as follows:"
msgstr "また、以下のように依存アクションを作成することもできます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:524
#, no-wrap
msgid "return SqlClientHelper.inTransactionUni(client, tx -> tx\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:527
#, no-wrap
msgid ""
"        .preparedQuery(\"INSERT INTO person (firstname,lastname) VALUES ($1,$2) RETURNING id\")\n"
"                .execute(Tuple.of(person.getFirstName(), person.getLastName()))\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:530
#, no-wrap
msgid ""
"        .onItem().transformToUni(id -> tx.preparedQuery(\"INSERT INTO addr (person_id,addrline1) VALUES ($1,$2)\")\n"
"                .execute(Tuple.of(id.iterator().next().getLong(\"id\"), person.getLastName())))\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:532
#, no-wrap
msgid "        .onItem().ignore().andContinueWithNull());\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:534
#, fuzzy, no-wrap
msgid "Multiple Datasources"
msgstr "複数のデータソース"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:537
#, fuzzy
msgid "The reactive SQL clients support defining several datasources."
msgstr "リアクティブ SQL クライアントは、複数のデータソースの定義をサポートしています。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:539
#, fuzzy
msgid "A typical configuration with several datasources would look like:"
msgstr "複数のデータソースを使用した典型的な構成は以下のようになります。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:546
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql <1>\n"
"quarkus.datasource.username=user-default\n"
"quarkus.datasource.password=password-default\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/default\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:551
#, no-wrap
msgid ""
"quarkus.datasource.\"additional1\".db-kind=postgresql <2>\n"
"quarkus.datasource.\"additional1\".username=user-additional1\n"
"quarkus.datasource.\"additional1\".password=password-additional1\n"
"quarkus.datasource.\"additional1\".reactive.url=postgresql://localhost:5432/additional1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:556
#, no-wrap
msgid ""
"quarkus.datasource.\"additional2\".db-kind=mysql <3>\n"
"quarkus.datasource.\"additional2\".username=user-additional2\n"
"quarkus.datasource.\"additional2\".password=password-additional2\n"
"quarkus.datasource.\"additional2\".reactive.url=mysql://localhost:3306/additional2\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:558
#, fuzzy
msgid "The default datasource - using PostgreSQL."
msgstr "デフォルトのデータソース - PostgreSQLを使用しています。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:559
#, fuzzy
msgid "A named datasource called `additional1` - using PostgreSQL."
msgstr "`additional1` という名前のデータソース - PostgreSQL を使用しています。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:560
#, fuzzy
msgid "A named datasource called `additional2` - using MySQL."
msgstr "`additional2` という名前のデータソース - MySQL を使用しています。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:562
#, fuzzy
msgid "You can then inject the clients as follows:"
msgstr "そして、以下のようにクライアントを注入します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:567
#, no-wrap
msgid ""
"@Inject <1>\n"
"PgPool defaultClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:571
#, no-wrap
msgid ""
"@Inject\n"
"@ReactiveDataSource(\"additional1\") <2>\n"
"PgPool additional1Client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:575
#, no-wrap
msgid ""
"@Inject\n"
"@ReactiveDataSource(\"additional2\")\n"
"MySQLPool additional2Client;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:577
#, fuzzy
msgid "Injecting the client for the default datasource does not require anything special."
msgstr "デフォルトのデータソースに対してクライアントを注入することは、特別なことを必要としません。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:578
#, fuzzy
msgid "For a named datasource, you use the `@ReactiveDataSource` CDI qualifier with the datasource name as its value."
msgstr "名前付きデータソースの場合は、データソース名を値として `@ReactiveDataSource` CDI修飾子を使用します。"

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:579
#, fuzzy, no-wrap
msgid "UNIX Domain Socket connections"
msgstr "UNIXドメインソケット接続"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:582
#, fuzzy
msgid "The PostgreSQL and MariaDB/MySQL clients can be configured to connect to the server through a UNIX domain socket."
msgstr "PostgreSQLおよびMariaDB/MySQLクライアントは、UNIXドメインソケットを介してサーバーに接続するように設定することができます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:584
#, fuzzy
msgid "First make sure that link:vertx#native-transport[native transport support] is enabled."
msgstr "まず、 link:https://quarkus.io/guides/vertx#native-transport[ネイティブトランスポートのサポートが] 有効になっていることを確認します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:587
#, fuzzy
msgid "Then configure the database connection url.  This step depends on the database type."
msgstr "次に、データベース接続のURLを設定します。このステップはデータベースの種類によって異なります。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:591
#, fuzzy
msgid "PostgresSQL domain socket paths have the following form: `<directory>/.s.PGSQL.<port>`"
msgstr "PostgresSQLドメインのソケットパスは、以下のような形式になっています。 `<directory>/.s.PGSQL.<port>`"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:593
#, fuzzy
msgid "The database connection url must be configured so that:"
msgstr "データベース接続のURLは、そのように設定する必要があります。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:595
#, fuzzy
msgid "the `host` is the `directory` in the socket path"
msgstr "`host` はソケットパスの `directory` です。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:596
#, fuzzy
msgid "the `port` is the `port` in the socket path"
msgstr "`port` はソケットパスの `port` です。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:598
#, fuzzy
msgid "Consider the following socket path: `/var/run/postgresql/.s.PGSQL.5432`."
msgstr "以下のソケットパスを考えてみましょう: `/var/run/postgresql/.s.PGSQL.5432` ."

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:600
#: upstream/_guides/reactive-sql-clients.adoc:613
#, fuzzy
msgid "In `application.properties` add:"
msgstr "`application.properties` で追加します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:604
#, no-wrap
msgid "quarkus.datasource.reactive.url=postgresql://:5432/quarkus_test?host=/var/run/postgresql\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:609
#, fuzzy
msgid "The database connection url must be configured so that the `host` is the socket path."
msgstr "データベース接続URLは、 `host` がソケットパスになるように設定する必要があります。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:611
#, fuzzy
msgid "Consider the following socket path: `/var/run/mysqld/mysqld.sock`."
msgstr "以下のソケットパスを考えてみましょう: `/var/run/mysqld/mysqld.sock` ."

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:617
#, no-wrap
msgid "quarkus.datasource.reactive.url=mysql:///quarkus_test?host=/var/run/mysqld/mysqld.sock\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:619
#, fuzzy, no-wrap
msgid "TCP Connection `idle-timeout`"
msgstr "TCP接続 `idle-timeout`"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:622
#, fuzzy
msgid "Reactive datasources can be configured with an `idle-timeout` (in milliseconds) that applies at the TCP connection level."
msgstr "リアクティブなデータソースは、TCP 接続レベルで適用される `idle-timeout` (ミリ秒単位) を使用して構成することができます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:624
#, fuzzy
msgid "The `idle-timeout` is disabled by default."
msgstr "`idle-timeout` はデフォルトでは無効になっています。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:626
#, fuzzy
msgid "For example, you could expire idle connections after 60 minutes:"
msgstr "例えば、アイドル状態の接続を60分後に失効させることができます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:630
#, no-wrap
msgid "quarkus.datasource.reactive.idle-timeout=PT60M\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-sql-clients.adoc:635
#, fuzzy
msgid "This timeout does not apply to the pool, but to the TCP connection."
msgstr "このタイムアウトはプールには適用されず、TCP 接続にも適用されます。"

#. type: delimited block =
#: upstream/_guides/reactive-sql-clients.adoc:637
#, fuzzy
msgid "If it expires while the connection is idle in the pool, the connection is closed and removed from the pool."
msgstr "プール内で接続がアイドル状態の間に有効期限が切れた場合、接続は閉じられ、プールから削除されます。"

#. type: delimited block =
#: upstream/_guides/reactive-sql-clients.adoc:639
#, fuzzy
msgid "If it expires immediately after your borrowed the connection from the pool and before you execute a query, you will get an error."
msgstr "プールから接続を借りた直後で、クエリを実行する前に期限切れになった場合は、エラーが発生します。"

#. type: delimited block =
#: upstream/_guides/reactive-sql-clients.adoc:642
#, fuzzy
msgid "While this is unlikely to happen, you must be prepared for such eventuality:"
msgstr "このようなことが起こる可能性は低いですが、そのような不測の事態に備えて準備をしておく必要があります。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:649
#, no-wrap
msgid ""
"// Run a query, retry at most 3 times if it fails\n"
"Uni<RowSet<Row>> rowSet = client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\")\n"
"                            .execute()\n"
"                            .onFailure().retry().atMost(3);\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:652
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:654
#, fuzzy, no-wrap
msgid "Common Datasource"
msgstr "共通データソース"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:658
#, fuzzy, no-wrap
msgid "Reactive Datasource"
msgstr "リアクティブデータソース"
