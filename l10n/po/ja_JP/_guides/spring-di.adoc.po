# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-12-22 15:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/spring-di.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus Extension for Spring DI API"
msgstr "Quarkus - Spring DI API用のQuarkusエクステンション"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:11
#, fuzzy
msgid "While users are encouraged to use CDI annotations for injection, Quarkus provides a compatibility layer for Spring dependency injection in the form of the `spring-di` extension."
msgstr "ユーザーはインジェクションにCDIアノテーションを使用することが推奨されていますが、Quarkusは、 `spring-di` エクステンションの形でSpring依存性インジェクション用の互換性レイヤーを提供しています。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:13
#, fuzzy
msgid "This guide explains how a Quarkus application can leverage the well known Dependency Injection annotations included in the Spring Framework."
msgstr "このガイドでは、QuarkusアプリケーションがSpring Frameworkに含まれるよく知られた依存性インジェクションアノテーションを活用する方法を説明します。"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:14
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:17
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:19
msgid "less than 15 minutes"
msgstr "15分未満"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:20
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:21
#, fuzzy
#| msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:22
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:24
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:28
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:30
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:32
#, fuzzy
msgid "The solution is located in the `spring-di-quickstart` {quickstarts-tree-url}/spring-di-quickstart[directory]."
msgstr "ソリューションは `spring-di-quickstart` {quickstarts-tree-url}/spring-di-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:33
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:36
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:46
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=spring-di-quickstart \\\n"
"    -DclassName=\"org.acme.spring.di.GreeterResource\" \\\n"
"    -Dpath=\"/greeting\" \\\n"
"    -Dextensions=\"resteasy,spring-di\"\n"
"cd spring-di-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:49
#, fuzzy
msgid "This command generates a Maven project with a REST endpoint and imports the `spring-di` extension."
msgstr "このコマンドは、RESTエンドポイントを持つMavenプロジェクトを生成し、 `spring-di` エクステンションをインポートします。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:52
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `spring-di` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `spring-di` エクステンションを追加することができます。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:56
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"spring-di\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:59
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:66
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-spring-di</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-di.adoc:68
#, fuzzy, no-wrap
msgid "Add beans using Spring annotations"
msgstr "Springアノテーションを使ってBeanを追加する"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:71
#, fuzzy
msgid "Let's proceed to create some beans using various Spring annotations."
msgstr "それでは、様々なSpringアノテーションを使ってBeanを作っていきましょう。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:74
#, fuzzy
msgid "First we will create a `StringFunction` interface that some of our beans will implement and which will be injected into another bean later on.  Create a `src/main/java/org/acme/spring/di/StringFunction.java` file and set the following content:"
msgstr "最初に、いくつかのBeanが実装し、後で別のBeanに注入される `StringFunction` インターフェイスを作成します。 `src/main/java/org/acme/spring/di/StringFunction.java` ファイルを作成し、以下の内容を設定します。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:78 upstream/_guides/spring-di.adoc:93
#: upstream/_guides/spring-di.adoc:116 upstream/_guides/spring-di.adoc:144
#: upstream/_guides/spring-di.adoc:166 upstream/_guides/spring-di.adoc:210
#, no-wrap
msgid "package org.acme.spring.di;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:80
#, no-wrap
msgid "import java.util.function.Function;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:82
#, no-wrap
msgid "public interface StringFunction extends Function<String, String> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:84 upstream/_guides/spring-di.adoc:259
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:89
#, fuzzy
msgid "With the interface in place, we will add an `AppConfiguration` class which will use the Spring's Java Config style for defining a bean.  It will be used to create a `StringFunction` bean that will capitalize the text passed as parameter.  Create a `src/main/java/org/acme/spring/di/AppConfiguration.java` file with the following content:"
msgstr "インターフェースを用意したので、SpringのJava Configスタイルを使ってBeanを定義する `AppConfiguration` クラスを追加します。これは、パラメーターとして渡されたテキストを大文字にする `StringFunction` Beanを作成するために使用されます。以下の内容の `src/main/java/org/acme/spring/di/AppConfiguration.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:96
#, no-wrap
msgid ""
"import org.springframework.context.annotation.Bean;\n"
"import org.springframework.context.annotation.Configuration;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:99
#, no-wrap
msgid ""
"@Configuration\n"
"public class AppConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:105
#, no-wrap
msgid ""
"    @Bean(name = \"capitalizeFunction\")\n"
"    public StringFunction capitalizer() {\n"
"        return String::toUpperCase;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:108
#, fuzzy
msgid "As a Spring developer, you might be tempted to add the `@ComponentScan` annotation in order to define specific packages to scan for additional beans. Do note that `@ComponentScan` is entirely unnecessary since Quarkus performs xref:cdi-reference.adoc#bean_discovery[bean discovery] only in `annotated` mode with no visibility boundaries. Moreover, note that the bean discovery in Quarkus happens at build time.  In the same vein, Quarkus does not support the Spring `@Import` annotation."
msgstr "Springの開発者であれば、追加のBeanをスキャンする特定のパッケージを定義するために、 `@ComponentScan` アノテーションを追加したくなるかもしれません。 `@ComponentScan` は全く不要であることに注意してください。なぜなら、Quarkusは可視性の境界線のない `annotated` モードでのみ link:https://quarkus.io/guides/cdi-reference#bean_discovery[Bean]の検出を実行するからです。さらに、QuarkusでのBeanの検出は、ビルド時に行われることに注意してください。同様に、QuarkusはSpring `@Import` アノテーションをサポートしていません。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:112
#, fuzzy
msgid "Now we define another bean that will implement `StringFunction` using Spring's stereotype annotation style.  This bean will effectively be a no-op bean that simply returns the input as is.  Create a `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` file and set the following content:"
msgstr "ここで、Springのステレオタイプアノテーションスタイルを使って `StringFunction` を実装する別のBeanを定義します。このBeanは、事実上、入力をそのまま返すノー・オープン・Beanになります。 `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` ファイルを作成し、以下の内容を設定します。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:118
#, no-wrap
msgid "import org.springframework.stereotype.Component;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:121
#, no-wrap
msgid ""
"@Component(\"noopFunction\")\n"
"public class NoOpSingleStringFunction implements StringFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:127
#, no-wrap
msgid ""
"    @Override\n"
"    public String apply(String s) {\n"
"        return s;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:131
#, fuzzy
msgid "Quarkus also provides support for injecting configuration values using Spring's `@Value` annotation.  To see that in action, first edit the `src/main/resources/application.properties` with the following content:"
msgstr "Quarkusでは、Springの `@Value` アノテーションを使用した設定値の注入もサポートしています。実際にそれを確認するには、まず `src/main/resources/application.properties` を以下の内容で編集します。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:136
#, no-wrap
msgid ""
"# Your configuration properties\n"
"greeting.message = hello\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:139
#, fuzzy
msgid "Next create a new Spring bean in `src/main/java/org/acme/spring/di/MessageProducer.java` with the following content:"
msgstr "次に、 `src/main/java/org/acme/spring/di/MessageProducer.java` に以下の内容の新しい Spring Bean を作成します。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:147
#, no-wrap
msgid ""
"import org.springframework.beans.factory.annotation.Value;\n"
"import org.springframework.stereotype.Service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:150
#, no-wrap
msgid ""
"@Service\n"
"public class MessageProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:153
#, no-wrap
msgid ""
"    @Value(\"${greeting.message}\")\n"
"    String message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:158
#, no-wrap
msgid ""
"    public String getPrefix() {\n"
"        return message;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:162
#, fuzzy
msgid "The final bean we will create ties together all the previous beans.  Create a `src/main/java/org/acme/spring/di/GreeterBean.java` file and copy the following content:"
msgstr "最終的に作成するBeanは、前のBeanをすべてつなぎ合わせます。 `src/main/java/org/acme/spring/di/GreeterBean.java` ファイルを作成し、以下の内容をコピーします。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:171
#, no-wrap
msgid ""
"import org.springframework.beans.factory.annotation.Autowired;\n"
"import org.springframework.beans.factory.annotation.Qualifier;\n"
"import org.springframework.beans.factory.annotation.Value;\n"
"import org.springframework.stereotype.Component;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:174
#, no-wrap
msgid ""
"@Component\n"
"public class GreeterBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:176
#, no-wrap
msgid "    private final MessageProducer messageProducer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:180
#, no-wrap
msgid ""
"    @Autowired\n"
"    @Qualifier(\"noopFunction\")\n"
"    StringFunction noopStringFunction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:184
#, no-wrap
msgid ""
"    @Autowired\n"
"    @Qualifier(\"capitalizeFunction\")\n"
"    StringFunction capitalizerStringFunction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:187
#, no-wrap
msgid ""
"    @Value(\"${greeting.suffix:!}\")\n"
"    String suffix;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:191
#, no-wrap
msgid ""
"    public GreeterBean(MessageProducer messageProducer) {\n"
"        this.messageProducer = messageProducer;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:197
#, no-wrap
msgid ""
"    public String greet(String name) {\n"
"        final String initialValue = messageProducer.getPrefix() + \" \" + name + suffix;\n"
"        return noopStringFunction.andThen(capitalizerStringFunction).apply(initialValue);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:201
#, fuzzy
msgid "In the code above, we see that both field injection and constructor injection are being used (note that constructor injection does not need the `@Autowired` annotation since there is a single constructor).  Furthermore, the `@Value` annotation on `suffix` has also a default value defined, which in this case will be used since we have not defined `greeting.suffix` in `application.properties`."
msgstr "上のコードでは、フィールドインジェクションとコンストラクタインジェクションの両方が使用されていることがわかります (コンストラクタインジェクションは単一のコンストラクタがあるので `@Autowired` アノテーションは必要ないことに注意してください)。さらに、 `suffix` の `@Value` アノテーションにはデフォルト値も定義されていますが、 `application.properties` で `greeting.suffix` を定義していないので、この場合はこれが使用されます。"

#. type: Title ===
#: upstream/_guides/spring-di.adoc:203
#, fuzzy, no-wrap
msgid "Update the JAX-RS resource"
msgstr "JAX-RSリソースの更新"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:206
#, fuzzy
msgid "Open the `src/main/java/org/acme/spring/di/GreeterResource.java` file and update it with the following content:"
msgstr "`src/main/java/org/acme/spring/di/GreeterResource.java` ファイルを開き、以下の内容で更新してください。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:212
#, no-wrap
msgid "import org.springframework.beans.factory.annotation.Autowired;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:217
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:220
#, no-wrap
msgid ""
"@Path(\"/greeting\")\n"
"public class GreeterResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:223
#, no-wrap
msgid ""
"    @Autowired\n"
"    GreeterBean greeterBean;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:230
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return greeterBean.greet(\"world\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-di.adoc:232
#, fuzzy, no-wrap
msgid "Update the test"
msgstr "テストの更新"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:236
#, fuzzy
msgid "We also need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/spring/di/GreetingResourceTest.java` file and change the content of the `testHelloEndpoint` method to:"
msgstr "また、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。 `src/test/java/org/acme/spring/di/GreetingResourceTest.java` ファイルを編集し、 `testHelloEndpoint` メソッドの内容を変更します。"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:242
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:245
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:248
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:257
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"            .when().get(\"/greeting\")\n"
"            .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"HELLO WORLD!\"));\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-di.adoc:261
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:265
#, fuzzy
msgid "Run the application with: `./mvnw compile quarkus:dev`.  Open your browser to http://localhost:8080/greeting."
msgstr "アプリケーションを実行するには、次の手順を実行します: `./mvnw compile quarkus:dev` .ブラウザを http://localhost:8080/greeting に開きます。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:267
#, fuzzy
msgid "The result should be: `HELLO WORLD!`."
msgstr "結果は `HELLO WORLD!` ."

#. type: Title ==
#: upstream/_guides/spring-di.adoc:268
#, fuzzy, no-wrap
msgid "Run the application as a native"
msgstr "アプリケーションをネイティブとして実行する"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:271
#, fuzzy
msgid "You can of course create a native image using instructions similar to xref:building-native-image.adoc[this] guide."
msgstr "もちろん、 link:building-native-image[この] ガイドと同様の手順でネイティブ画像を作成することができます。"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:272
#, fuzzy, no-wrap
msgid "Important Technical Note"
msgstr "重要な技術的注意事項"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:280
#, fuzzy
msgid "Please note that the Spring support in Quarkus does not start a Spring Application Context nor are any Spring infrastructure classes run.  Spring classes and annotations are only used for reading metadata and / or are used as user code method return types or parameter types.  What that means for end users, is that adding arbitrary Spring libraries will not have any effect. Moreover Spring infrastructure classes (like `org.springframework.beans.factory.config.BeanPostProcessor` , `org.springframework.context.ApplicationContext` for example) will not be executed.  Regarding the dependency injection in particular, Quarkus uses a Dependency Injection mechanism (called ArC) based on the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0] specification. If you want to learn more about it we recommend you to read the xref:cdi.adoc[Quarkus introduction to CDI] and the xref:cdi-reference.adoc#arc-configuration-reference[CDI reference guide] The various Spring Boot test features are not supported by Quarkus. For testing purposes, please, check the xref:getting-started-testing.adoc[Quarkus testing guide]."
msgstr "QuarkusのSpringサポートは、Springアプリケーションコンテキストを起動したり、Springインフラストラクチャクラスを実行したりしないことに注意してください。Springクラスやアノテーションは、メタデータの読み込みや、ユーザーコードのメソッドの戻り値の型やパラメータの型として使用されるだけです。これはエンドユーザーにとって何を意味するかというと、任意のSpringライブラリを追加しても何の効果もないということです。また、Springのインフラストラクチャクラス（例えば、 `org.springframework.beans.factory.config.BeanPostProcessor`, `org.springframework.context.ApplicationContext` ）は実行されません。特に依存性インジェクションに関しては、Quarkusは link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0]仕様に基づいた依存性インジェクションメカニズム（ArCと呼ばれる）を使用しています。これについて詳しく知りたい場合は、 link:https://quarkus.io/guides/cdi[QuarkusのCDI入門]と link:https://quarkus.io/guides/cdi-reference#arc-configuration-reference[CDIリファレンスガイド]を読むことをお勧めします。 様々なSpring Bootテスト機能はQuarkusではサポートされていません。テストを目的とする場合は、Quark link:https://quarkus.io/guides/getting-started-testing[usのテストガイド]をご確認ください。"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:281
#, fuzzy, no-wrap
msgid "Conversion Table"
msgstr "変換テーブル"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:284
#, fuzzy
msgid "The following table shows how Spring DI annotations can be converted to CDI and / or MicroProfile annotations."
msgstr "次の表は、Spring DI アノテーションを CDI および / または MicroProfile アノテーションに変換する方法を示しています。"

#. type: Table
#: upstream/_guides/spring-di.adoc:286
#, fuzzy, no-wrap
msgid "Spring"
msgstr "春"

#. type: Table
#: upstream/_guides/spring-di.adoc:286
#, fuzzy, no-wrap
msgid "CDI / MicroProfile"
msgstr "CDI / マイクロプロファイル"

#. type: Table
#: upstream/_guides/spring-di.adoc:288
#, fuzzy, no-wrap
msgid "Comments"
msgstr "コメント"

#. type: Table
#: upstream/_guides/spring-di.adoc:289
#, fuzzy, no-wrap
msgid "@Autowired"
msgstr "オートワイヤード"

#. type: Table
#: upstream/_guides/spring-di.adoc:290
#, fuzzy, no-wrap
msgid "@Inject"
msgstr "インジェクション"

#. type: Table
#: upstream/_guides/spring-di.adoc:293
#, fuzzy, no-wrap
msgid "@Qualifier"
msgstr "クオリファイアー"

#. type: Table
#: upstream/_guides/spring-di.adoc:294
#, fuzzy, no-wrap
msgid "@Named"
msgstr "名前付き"

#. type: Table
#: upstream/_guides/spring-di.adoc:297
#, fuzzy, no-wrap
msgid "@Value"
msgstr "値"

#. type: Table
#: upstream/_guides/spring-di.adoc:298
#, fuzzy, no-wrap
msgid "@ConfigProperty"
msgstr "コンフィグプロパティー"

#. type: Table
#: upstream/_guides/spring-di.adoc:300
#, fuzzy, no-wrap
msgid "@ConfigProperty doesn't support an expression language the way @Value does, but makes the typical use cases much easier to handle"
msgstr "値のように@ConfigPropertyは式言語をサポートしていませんが、典型的なユースケースをより簡単に扱うことができるようになります。"

#. type: Table
#: upstream/_guides/spring-di.adoc:301
#, fuzzy, no-wrap
msgid "@Component"
msgstr "コンポーネント"

#. type: Table
#: upstream/_guides/spring-di.adoc:302 upstream/_guides/spring-di.adoc:306
#: upstream/_guides/spring-di.adoc:310
#, fuzzy, no-wrap
msgid "@Singleton"
msgstr "シングルトン"

#. type: Table
#: upstream/_guides/spring-di.adoc:304 upstream/_guides/spring-di.adoc:308
#: upstream/_guides/spring-di.adoc:312
#, fuzzy, no-wrap
msgid "By default Spring stereotype annotations are singleton beans"
msgstr "デフォルトでは、SpringステレオタイプアノテーションはシングルトンBeanです。"

#. type: Table
#: upstream/_guides/spring-di.adoc:305
#, fuzzy, no-wrap
msgid "@Service"
msgstr "サービス"

#. type: Table
#: upstream/_guides/spring-di.adoc:309
#, fuzzy, no-wrap
msgid "@Repository"
msgstr "保存場所"

#. type: Table
#: upstream/_guides/spring-di.adoc:313
#, fuzzy, no-wrap
msgid "@Configuration"
msgstr "コンフィグレーション"

#. type: Table
#: upstream/_guides/spring-di.adoc:314
#, fuzzy, no-wrap
msgid "@ApplicationScoped"
msgstr "アプリケーションスコープ"

#. type: Table
#: upstream/_guides/spring-di.adoc:316
#, fuzzy, no-wrap
msgid "In CDI a producer bean isn't limited to the application scope, it could just as well be @Singleton or @Dependent"
msgstr "CDIでは、プロデューサBeanはアプリケーションスコープに制限されていません。"

#. type: Table
#: upstream/_guides/spring-di.adoc:317
#, fuzzy, no-wrap
msgid "@Bean"
msgstr "@Bean"

#. type: Table
#: upstream/_guides/spring-di.adoc:318
#, fuzzy, no-wrap
msgid "@Produces"
msgstr "@Produces"

#. type: Table
#: upstream/_guides/spring-di.adoc:321
#, fuzzy, no-wrap
msgid "@Scope"
msgstr "@Scope"

#. type: Table
#: upstream/_guides/spring-di.adoc:324
#, fuzzy, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation. Depending on the value of @Scope, one of the @Singleton, @ApplicationScoped, @SessionScoped, @RequestScoped, @Dependent could be used"
msgstr "CDI アノテーションへの 1 対 1 マッピングはありません。Scope の値に応じて、@Singleton, @ApplicationScoped, @SessionScoped, @RequestScoped, @Dependent のいずれかを使用することができます。"

#. type: Table
#: upstream/_guides/spring-di.adoc:325
#, fuzzy, no-wrap
msgid "@ComponentScan"
msgstr "コンポーネント"

#. type: Table
#: upstream/_guides/spring-di.adoc:328
#, fuzzy, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation. It is not used in Quarkus because Quarkus does all classpath scanning at build time."
msgstr "CDIアノテーションへの1対1のマッピングはありません。Quarkusはビルド時にすべてのクラスパスのスキャンを行うため、Quarkusでは使用されません。"

#. type: Table
#: upstream/_guides/spring-di.adoc:329
#, fuzzy, no-wrap
msgid "@Import"
msgstr "インポート"

#. type: Table
#: upstream/_guides/spring-di.adoc:331
#, fuzzy, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation."
msgstr "CDIアノテーションへの一対一のマッピングを持っていません。"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:333
#, fuzzy, no-wrap
msgid "More Spring guides"
msgstr "その他のスプリングガイド"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:336
#, fuzzy
msgid "Quarkus has more Spring compatibility features. See the following guides for more details:"
msgstr "Quarkusには、より多くのSpring互換機能があります。詳細については、以下のガイドを参照してください。"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:338
#, fuzzy
msgid "xref:spring-web.adoc[Quarkus - Extension for Spring Web]"
msgstr "link:spring-web[Quarkus - Spring Web用のエクステンション]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:339
#, fuzzy
msgid "xref:spring-data-jpa.adoc[Quarkus - Extension for Spring Data JPA]"
msgstr "link:spring-data-jpa[Quarkus - Spring Data JPAのエクステンション]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:340
#, fuzzy
msgid "xref:spring-data-rest.adoc[Quarkus - Extension for Spring Data REST]"
msgstr "link:spring-data-rest[Quarkus - Spring Data RESTのエクステンション]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:341
#, fuzzy
msgid "xref:spring-security.adoc[Quarkus - Extension for Spring Security]"
msgstr "link:spring-security[Quarkus - Spring Securityのためのエクステンション]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:342
#, fuzzy
msgid "xref:spring-cloud-config-client.adoc[Quarkus - Reading properties from Spring Cloud Config Server]"
msgstr "link:spring-cloud-config-client[Quarkus - Spring Cloud Config Serverからプロパティーを読み込む]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:343
#, fuzzy
msgid "xref:spring-boot-properties.adoc[Quarkus - Extension for Spring Boot properties]"
msgstr "link:spring-boot-properties[Quarkus - Spring Bootプロパティーのエクステンション]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:344
#, fuzzy
msgid "xref:spring-cache.adoc[Quarkus - Extension for Spring Cache]"
msgstr "link:spring-cache[Quarkus - Spring Cacheのエクステンション]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:344
#, fuzzy
msgid "xref:spring-scheduled.adoc[Quarkus - Extension for Spring Scheduled]"
msgstr "link:spring-scheduled[Quarkus - Spring Scheduledのためのエクステンション]"
