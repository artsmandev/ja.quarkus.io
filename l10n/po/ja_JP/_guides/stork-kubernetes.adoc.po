# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-08-02 09:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/stork-kubernetes.adoc:6
#, fuzzy, no-wrap
msgid "Using Stork with Kubernetes"
msgstr "KubernetesでStorkを使用する"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:12
#, fuzzy
msgid "This guide explains how to use Stork with Kubernetes for service discovery and load balancing."
msgstr "このガイドでは、KubernetesでStorkを使用して、サービスの検出とロードバランシングを行う方法を説明します。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:14
#, fuzzy
msgid "If you are new to Stork, please read the xref:stork.adoc[Stork Getting Started Guide]."
msgstr "Storkを初めてご利用になる方は、 link:stork.html[Stork Getting Started Guideを] お読みください。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:22
msgid "Access to a Kubernetes cluster (Minikube is a viable option)"
msgstr "Kubernetesクラスターへのアクセス（Minikubeは有効な選択肢です）"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:23
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:26
#, fuzzy
msgid "In this guide, we will work with a few components deployed in a Kubernetes cluster:"
msgstr "このガイドでは、Kubernetesクラスターにデプロイされたいくつかのコンポーネントを扱うことにします。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:28
#, fuzzy
msgid "A simple blue service."
msgstr "シンプルなブルーのサービス。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:29
#, fuzzy
msgid "A simple red service."
msgstr "シンプルな赤いサービスです。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:30
#, fuzzy
msgid "The `color-service` is the Kubernetes service which is the entry point to the Blue and Red instances."
msgstr " `color-service` 、BlueとRedのインスタンスへの入り口となるKubernetesサービスです。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:31
#, fuzzy
msgid "A client service using a REST client to call the blue or the red service. Service discovery and selection are delegated to Stork."
msgstr "RESTクライアントを使用して、青または赤のサービスを呼び出すクライアントサービスです。サービスの発見と選択はStorkに委ねられる。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/stork-kubernetes.adoc:32
#, no-wrap
msgid "Architecture of the application"
msgstr "アプリケーションのアーキテクチャ"

#. type: Target for macro image
#: upstream/_guides/stork-kubernetes.adoc:32
#, no-wrap
msgid "stork-kubernetes-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:35
#, fuzzy
msgid "For the sake of simplicity, everything will be deployed in the same namespace of the Kubernetes cluster."
msgstr "簡略化のため、すべてKubernetesクラスタの同じ名前空間にデプロイされます。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:36
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:40
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the applications step by step.  However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、ステップバイステップでアプリケーションを作成することをお勧めします。しかし、完成した例にすぐに進むこともできます。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:42
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:44
#, fuzzy
msgid "The solution is located in the `stork-kubernetes-quickstart` {quickstarts-tree-url}/stork-kubernetes-quickstart[directory]."
msgstr "ソリューションは、 `stork-kubernetes-quickstart` {quickstarts-tree-url}/stork-kubernetes-quickstart[ディレクトリ]にあります。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:45
#, no-wrap
msgid "Discovery and selection"
msgstr "ディスカバリーとセレクション"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:48
#, fuzzy
msgid "Before going further, we need to discuss discovery vs. selection."
msgstr "先に進む前に、ディスカバリーとセレクションについて説明する必要があります。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:51
#, fuzzy
msgid "Service discovery is the process of locating service instances.  It produces a list of service instances that is potentially empty (if no service matches the request) or contains multiple service instances."
msgstr "サービスディスカバリーは、サービスインスタンスを探すプロセスである。サービスインスタンスのリストが生成されるが、そのリストは空の可能性もあり（リクエストにマッチするサービスがない場合）、複数のサービスインスタンスを含んでいることもある。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:54
#, fuzzy
msgid "Service selection, also called load-balancing, chooses the best instance from the list returned by the discovery process.  The result is a single service instance or an exception when no suitable instance can be found."
msgstr "サービス選択は、ロードバランスとも呼ばれ、ディスカバリープロセスによって返されたリストから最適なインスタンスを選択する。その結果、1つのサービスインスタンス、または適切なインスタンスが見つからない場合は例外が発生します。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:58
#, fuzzy
msgid "Stork handles both discovery and selection.  However, it does not handle the communication with the service but only provides a service instance.  The various integrations in Quarkus extract the location of the service from that service instance."
msgstr "Storkは、発見と選択の両方を処理する。しかし、サービスとの通信は処理せず、サービスインスタンスを提供するだけです。Quarkusのさまざまなインテグレーションは、そのサービスインスタンスからサービスの場所を抽出します。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:60
#, no-wrap
msgid "Bootstrapping the project"
msgstr "プロジェクトのブートストラップ"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:63
msgid "Create a Quarkus project importing the quarkus-rest-client-reactive and quarkus-resteasy-reactive extensions using your favorite approach:"
msgstr "quarkus-rest-client-reactiveおよびquarkus-resteasy-reactiveエクステンションをインポートして、好きなアプローチでQuarkusプロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:69
msgid "In the generated project, also add the following dependencies:"
msgstr "生成されたプロジェクトに、以下の依存関係を追加します:"

#. type: Block title
#: upstream/_guides/stork-kubernetes.adoc:71
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:93
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye.stork</groupId>\n"
"    <artifactId>stork-service-discovery-kubernetes</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"      <groupId>io.smallrye.stork</groupId>\n"
"      <artifactId>stork-load-balancer-random</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-container-image-jib</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/stork-kubernetes.adoc:96
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:103
#, no-wrap
msgid ""
"implementation(\"io.smallrye.stork:stork-service-discovery-kubernetes\")\n"
"implementation(\"io.smallrye.stork:stork-load-balancer-random\")\n"
"implementation(\"io.quarkus:quarkus-kubernetes\")\n"
"implementation(\"io.quarkus:quarkus-kubernetes-client\")\n"
"implementation(\"io.quarkus:quarkus-container-image-jib\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:106
#, fuzzy
msgid "`stork-service-discovery-kubernetes` provides an implementation of service discovery for Kubernetes. `stork-load-balancer-random` provides an implementation of random load balancer. `quarkus-kubernetes` enables the generation of Kubernetes manifests each time we perform a build. The `quarkuks-kubernetes-client` extension enables the use of the Fabric8 Kubernetes Client in native mode. And `quarkus-container-image-jib` enables the build of a container image using https://github.com/GoogleContainerTools/jib[Jib]."
msgstr " `stork-service-discovery-kubernetes` `stork-load-balancer-random` はランダムロードバランサーの実装を提供します。 はビルドを実行するたびに Kubernetes マニフェストを生成することを可能にします。 拡張により、Fabric8 Kubernetes Client のネイティブモードでの利用が可能になります。そして、 は、 `quarkus-kubernetes` `quarkuks-kubernetes-client` `quarkus-container-image-jib` link:https://github.com/GoogleContainerTools/jib[Jibを] 使ったコンテナイメージのビルドを可能にしています。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:107
#, fuzzy, no-wrap
msgid "The Blue and Red services"
msgstr "ブルーとレッドのサービス"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:110
#, fuzzy
msgid "Let's start with the very beginning: the service we will discover, select and call."
msgstr "まずは、一番最初に、発見し、選択し、呼び出すサービスから始めましょう。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:112
#, fuzzy
msgid "The Red and Blue are two simple REST services serving an endpoint responding `Hello from Red!` and `Hello from Blue!` respectively. The code of both applications has been developed following the https://quarkus.io/guides/getting-started[Getting Started Guide]."
msgstr "Red と Blue は、それぞれ `Hello from Red!` と `Hello from Blue!` を応答するエンドポイントを提供する 2 つのシンプルな REST サービスです。両方のアプリケーションのコードは、 link:https://quarkus.io/guides/getting-started[Getting Started Guide] に従って開発されています。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:114
#, fuzzy
msgid "As the goal of this guide is to show how to use Stork Kubernetes service discovery, we won't provide the specifics steps for the Red and Blue services. Their container images are already built and available in a public registry:"
msgstr "このガイドの目的はStork Kubernetesサービスディスカバリーの使い方を示すことなので、RedとBlueのサービスに関する具体的な手順は説明しないことにします。彼らのコンテナイメージはすでにビルドされており、パブリックレジストリで利用可能です。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:116
#, fuzzy
msgid "https://quay.io/repository/quarkus/blue-service[Blue service container image]"
msgstr "link:https://quay.io/repository/quarkus/blue-service[ブルーサービスコンテナイメージ]"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:117
#, fuzzy
msgid "https://quay.io/repository/quarkus/red-service[Red service container image]"
msgstr "link:https://quay.io/repository/quarkus/red-service[レッドサービスコンテナイメージ]"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:119
#, fuzzy, no-wrap
msgid "Deploy the Blue and Red services in Kubernetes"
msgstr "KubernetesでBlueとRedのサービスをデプロイする"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:122
#, fuzzy
msgid "Now that we have our service container images available in a public registry, we need to deploy them into the Kubernetes cluster."
msgstr "さて、公開レジストリでサービスコンテナイメージが利用できるようになったので、それらをKubernetesクラスタにデプロイする必要があります。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:124
#, fuzzy
msgid "The following file contains all the Kubernetes resources needed to deploy the Blue and Red services in the cluster and make them accessible:"
msgstr "以下のファイルには、BlueとRedのサービスをクラスターにデプロイし、アクセス可能にするために必要なKubernetesリソースがすべて含まれています。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:136
#, no-wrap
msgid ""
"kind: Role\n"
"apiVersion: rbac.authorization.k8s.io/v1\n"
"metadata:\n"
"  namespace: development\n"
"  name: endpoints-reader\n"
"rules:\n"
"  - apiGroups: [\"\"] # \"\" indicates the core API group\n"
"    resources: [\"endpoints\", \"pods\"]\n"
"    verbs: [\"get\", \"list\"]\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:152
#, no-wrap
msgid ""
"apiVersion: rbac.authorization.k8s.io/v1\n"
"kind: RoleBinding\n"
"metadata:\n"
"  name: stork-rb\n"
"  namespace: development\n"
"subjects:\n"
"  - kind: ServiceAccount\n"
"    # Reference to upper's `metadata.name`\n"
"    name: default\n"
"    # Reference to upper's `metadata.namespace`\n"
"    namespace: development\n"
"roleRef:\n"
"  kind: Role\n"
"  name: endpoints-reader\n"
"  apiGroup: rbac.authorization.k8s.io\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:172
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: Service\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: f747f359406bedfb1a39c57392a5b5a9eaefec56\n"
"    app.quarkus.io/build-timestamp: 2022-03-31 - 10:36:56 +0000\n"
"  labels:\n"
"    app.kubernetes.io/name: color-service\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"  name: color-service //<1>\n"
"spec:\n"
"  ports:\n"
"    - name: http\n"
"      port: 80\n"
"      targetPort: 8080\n"
"  selector:\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"    type: color-service\n"
"  type: ClusterIP\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:215
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: f747f359406bedfb1a39c57392a5b5a9eaefec56\n"
"    app.quarkus.io/build-timestamp: 2022-03-31 - 10:36:56 +0000\n"
"  labels:\n"
"    color: blue\n"
"    type: color-service\n"
"    app.kubernetes.io/name: blue-service\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"  name: blue-service //<2>\n"
"spec:\n"
"  replicas: 1\n"
"  selector:\n"
"    matchLabels:\n"
"      app.kubernetes.io/name: blue-service\n"
"      app.kubernetes.io/version: \"1.0\"\n"
"  template:\n"
"    metadata:\n"
"      annotations:\n"
"        app.quarkus.io/commit-id: f747f359406bedfb1a39c57392a5b5a9eaefec56\n"
"        app.quarkus.io/build-timestamp: 2022-03-31 - 10:36:56 +0000\n"
"      labels:\n"
"        color: blue\n"
"        type: color-service\n"
"        app.kubernetes.io/name: blue-service\n"
"        app.kubernetes.io/version: \"1.0\"\n"
"    spec:\n"
"      containers:\n"
"        - env:\n"
"            - name: KUBERNETES_NAMESPACE\n"
"              valueFrom:\n"
"                fieldRef:\n"
"                  fieldPath: metadata.namespace\n"
"          image: quay.io/quarkus/blue-service:1.0\n"
"          imagePullPolicy: Always\n"
"          name: blue-service\n"
"          ports:\n"
"            - containerPort: 8080\n"
"              name: http\n"
"              protocol: TCP\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:258
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: 27be03414510f776ca70d70d859b33e134570443\n"
"    app.quarkus.io/build-timestamp: 2022-03-31 - 10:38:54 +0000\n"
"  labels:\n"
"    color: red\n"
"    type: color-service\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"    app.kubernetes.io/name: red-service\n"
"  name: red-service //<2>\n"
"spec:\n"
"  replicas: 1\n"
"  selector:\n"
"    matchLabels:\n"
"      app.kubernetes.io/version: \"1.0\"\n"
"      app.kubernetes.io/name: red-service\n"
"  template:\n"
"    metadata:\n"
"      annotations:\n"
"        app.quarkus.io/commit-id: 27be03414510f776ca70d70d859b33e134570443\n"
"        app.quarkus.io/build-timestamp: 2022-03-31 - 10:38:54 +0000\n"
"      labels:\n"
"        color: red\n"
"        type: color-service\n"
"        app.kubernetes.io/version: \"1.0\"\n"
"        app.kubernetes.io/name: red-service\n"
"    spec:\n"
"      containers:\n"
"        - env:\n"
"            - name: KUBERNETES_NAMESPACE\n"
"              valueFrom:\n"
"                fieldRef:\n"
"                  fieldPath: metadata.namespace\n"
"          image: quay.io/quarkus/red-service:1.0\n"
"          imagePullPolicy: Always\n"
"          name: red-service\n"
"          ports:\n"
"            - containerPort: 8080\n"
"              name: http\n"
"              protocol: TCP\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:283
#, no-wrap
msgid ""
"apiVersion: networking.k8s.io/v1\n"
"kind: Ingress //<3>\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: f747f359406bedfb1a39c57392a5b5a9eaefec56\n"
"    app.quarkus.io/build-timestamp: 2022-03-31 - 10:46:19 +0000\n"
"  labels:\n"
"    app.kubernetes.io/name: color-service\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"    color: blue\n"
"    type: color-service\n"
"  name: color-service\n"
"spec:\n"
"  rules:\n"
"    - host: color-service.127.0.0.1.nip.io\n"
"      http:\n"
"        paths:\n"
"          - backend:\n"
"              service:\n"
"                name: color-service\n"
"                port:\n"
"                  name: http\n"
"            path: /\n"
"            pathType: Prefix\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:287
#, fuzzy
msgid "There are a few interesting parts in this listing:"
msgstr "このリストには、いくつか興味深い部分がある。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:289
#, fuzzy
msgid "The Kubernetes Service resource, `color-service`, that Stork will discover."
msgstr "Storkが発見するKubernetes Serviceリソース、 `color-service` 、です。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:290
#, fuzzy
msgid "The Red and Blue service instances behind the `color-service` Kubernetes service."
msgstr " `color-service` Kubernetesサービスの背後にあるRedとBlueのサービスインスタンス。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:291
#, fuzzy
msgid "A Kubernetes Ingress resource making the `color-service` accessible from the outside of the cluster at the `color-service.127.0.0.1.nip.io` url. Not that the Ingress is not needed for Stork however, it helps to check that the architecture is in place."
msgstr "KubernetesのIngressリソースで、クラスタの外から `color-service` 、 `color-service.127.0.0.1.nip.io` urlでアクセスできるようにします。StorkにIngressが必要ないわけではありませんが、アーキテクチャが整っていることを確認するのに役立ちます。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:293
#, fuzzy
msgid "Create a file named `kubernetes-setup.yml` with the content above at the root of the project and run the following commands to deploy all the resources in the Kubernetes cluster. Don't forget to create a dedicated namespace:"
msgstr "プロジェクトのルートに上記の内容で `kubernetes-setup.yml` というファイルを作成し、以下のコマンドを実行してKubernetesクラスタにすべてのリソースをデプロイします。専用のネームスペースを作成するのを忘れないようにしましょう。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:298
#, no-wrap
msgid ""
"kubectl create namespace development\n"
"kubectl apply -f kubernetes-setup.yml -n=development\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:301
#, fuzzy
msgid "If everything went well the Color service is accessible on http://color-service.127.0.0.1.nip.io. You should have `Hello from Red!` and `Hello from Blue!` response randomly."
msgstr "すべてがうまくいった場合、Color サービスは http://color-service.127.0.0.1.nip.io  でアクセスできます。 `Hello from Red!` と `Hello from Blue!` がランダムに応答するはずです。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:303
#, fuzzy
msgid "Stork is not limited to Kubernetes and integrates with other service discovery mechanisms."
msgstr "StorkはKubernetesに限らず、他のサービス発見メカニズムとも統合されています。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:305
#, fuzzy, no-wrap
msgid "The REST Client interface and the front end API"
msgstr "RESTクライアントインターフェースとフロントエンドAPI"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:308
#, fuzzy
msgid "So far, we didn't use Stork; we just deployed the services we will be discovering, selecting, and calling."
msgstr "ここまではStorkを使わず、これから発見し、選択し、呼び出すサービスをデプロイしただけです。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:311
#, fuzzy
msgid "We will call the services using the Reactive REST Client.  Create the `src/main/java/org/acme/MyService.java` file with the following content:"
msgstr "Reactive REST Client を使ってサービスを呼び出すことにします．以下の内容で、 `src/main/java/org/acme/MyService.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:315
#: upstream/_guides/stork-kubernetes.adoc:348
#, no-wrap
msgid "package org.acme;\n"
msgstr "package org.acme;\n"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:317
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:321
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:331
#, no-wrap
msgid ""
"/**\n"
" * The REST Client interface.\n"
" *\n"
" * Notice the `baseUri`. It uses `stork://` as URL scheme indicating that the called service uses Stork to locate and\n"
" * select the service instance. The `my-service` part is the service name. This is used to configure Stork discovery\n"
" * and selection in the `application.properties` file.\n"
" */\n"
"@RegisterRestClient(baseUri = \"stork://my-service\")\n"
"public interface MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:336
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String get();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:339
#, fuzzy
msgid "It's a straightforward REST client interface containing a single method. However, note the `baseUri` attribute:"
msgstr "これは、単一のメソッドを含むストレートなRESTクライアントインターフェイスです。しかし、 `baseUri` 属性に注意してください。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:340
#, fuzzy
msgid "the `stork://` suffix instructs the REST client to delegate the discovery and selection of the service instances to Stork,"
msgstr " `stork://` というサフィックスは、RESTクライアントがStorkにサービスインスタンスの発見と選択を委任することを指示します。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:341
#, fuzzy
msgid "the `my-service` part of the URI is the service name we will be using in the application configuration."
msgstr "URIの `my-service` の部分は、アプリケーションの設定で使用する予定のサービス名です。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:344
#, fuzzy
msgid "It does not change how the REST client is used.  Create the `src/main/java/org/acme/FrontendApi.java` file with the following content:"
msgstr "RESTクライアントの使用方法は変わりません。以下の内容で、 `src/main/java/org/acme/FrontendApi.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:350
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:355
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:361
#, no-wrap
msgid ""
"/**\n"
" * A frontend API using our REST Client (which uses Stork to locate and select the service instance on each call).\n"
" */\n"
"@Path(\"/api\")\n"
"public class FrontendApi {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:363
#, no-wrap
msgid "    @RestClient MyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:369
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String invoke() {\n"
"        return service.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:371
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:374
#, fuzzy
msgid "It injects and uses the REST client as usual."
msgstr "通常通りRESTクライアントをインジェクションして使用します。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:375
#, fuzzy, no-wrap
msgid "Stork configuration"
msgstr "コウノトリの構成"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:378
#, fuzzy
msgid "Now we need to configure Stork for using Kubernetes to discover the red and blue instances of the service."
msgstr "次に、StorkがKubernetesを使用してサービスの赤と青のインスタンスを検出するように設定する必要があります。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:380
#, fuzzy
msgid "In the `src/main/resources/application.properties`, add:"
msgstr " `src/main/resources/application.properties` 、加えてください。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:387
#, no-wrap
msgid ""
"quarkus.stork.my-service.service-discovery.type=kubernetes\n"
"quarkus.stork.my-service.service-discovery.k8s-namespace=development\n"
"quarkus.stork.my-service.service-discovery.application=color-service\n"
"quarkus.stork.my-service.load-balancer.type=random\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:394
#, fuzzy
msgid "`stork.my-service.service-discovery` indicates which type of service discovery we will be using to locate the `my-service` service.  In our case, it's `kubernetes`.  If your access to the Kubernetes cluster is configured via Kube config file, you don't need to configure the access to it. Otherwise, set the proper Kubernetes url using the `quarkus.stork.my-service.service-discovery.k8s-host` property.  `quarkus.stork.my-service.service-discovery.application` contains the name of the Kubernetes service Stork is going to ask for. In our case, this is the `color-service` corresponding to the kubernetes service backed by the Red and Blue instances.  Finally, `quarkus.stork.my-service.load-balancer.type` configures the service selection. In our case, we use a `random` Load Balancer."
msgstr " `stork.my-service.service-discovery` は、 サービスの場所を特定するために、どのタイプのサービスディスカバリーを使用するかを示します。私たちの場合は、 。 KubernetesクラスタへのアクセスがKube設定ファイル経由で設定されている場合は、アクセスに関する設定は必要ありません。そうでない場合は、 プロパティを使って適切な Kubernetes の url を設定します。 には Stork が問い合わせようとしている Kubernetes サービス名が入ります。今回の場合、RedとBlueのインスタンスにバックアップされているkubernetesサービスに対応する 。最後に、 は、サービスの選択を設定します。我々の場合、 ロードバランサーを使用しています。 `my-service` `kubernetes` `quarkus.stork.my-service.service-discovery.k8s-host` `quarkus.stork.my-service.service-discovery.application` `color-service` `quarkus.stork.my-service.load-balancer.type` `random` "

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:395
#, fuzzy, no-wrap
msgid "Deploy the REST Client interface and the front end API in the Kubernetes cluster"
msgstr "REST ClientインターフェースとフロントエンドAPIをKubernetesクラスタにデプロイします。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:399
#, fuzzy
msgid "The system is almost complete. We only need to deploy the REST Client interface and the client service to the cluster.  In the `src/main/resources/application.properties`, add:"
msgstr "システムはほぼ完成しています。あとは、REST Clientインターフェースとクライアントサービスをクラスタにデプロイするだけです。 `src/main/resources/application.properties` に 、追加してください。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:406
#, no-wrap
msgid ""
"quarkus.container-image.registry=<public registry>\n"
"quarkus.kubernetes-client.trust-certs=true\n"
"quarkus.kubernetes.ingress.expose=true\n"
"quarkus.kubernetes.ingress.host=my-service.127.0.0.1.nip.io\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:411
#, fuzzy
msgid "The `quarkus.container-image.registry` contains the container registry to use.  The `quarkus.kubernetes.ingress.expose` indicates that the service will be accessible from the outside of the cluster.  The `quarkus.kubernetes.ingress.host` contains the url to access the service. We are using https://nip.io/[nip.io] wildcard for IP address mappings."
msgstr " `quarkus.container-image.registry` には、使用するコンテナレジストリが含まれています。 `quarkus.kubernetes.ingress.expose` は、クラスタの外側からサービスにアクセスできることを示します。 `quarkus.kubernetes.ingress.host` には、サービスにアクセスするための URL が含まれています。IPアドレスのマッピングには、 link:https://nip.io/[nip.ioの] ワイルドカードを使用しています。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:413
#, fuzzy
msgid "For a more customized configuration you can check the https://quarkus.io/guides/deploying-to-kubernetes[Deploying to Kubernetes guide]"
msgstr "よりカスタマイズされた構成については、 link:https://quarkus.io/guides/deploying-to-kubernetes[Kubernetesへのデプロイガイドを] 確認することができます。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:414
#, fuzzy, no-wrap
msgid "Build and push the container image"
msgstr "コンテナイメージのビルドとプッシュ"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:417
#, fuzzy
msgid "Thanks to the extensions we are using, we can perform the build of a container image using Jib and also enabling the generation of Kubernetes manifests while building the application. For example, the following command will generate a Kubernetes manifest in the `target/kubernetes/` directory and also build and push a container image for the project:"
msgstr "今回使用する拡張機能のおかげで、Jibを使用してコンテナイメージのビルドを実行し、アプリケーションのビルド中にKubernetesマニフェストの生成も可能になります。例えば、以下のコマンドは `target/kubernetes/` ディレクトリに Kubernetes マニフェストを生成し、さらにプロジェクト用のコンテナイメージをビルドしてプッシュします。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:421
#, no-wrap
msgid "./mvnw package -Dquarkus.container-image.build=true -Dquarkus.container-image.push=true\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:423
#, fuzzy, no-wrap
msgid "Deploy client service to the Kubernetes cluster"
msgstr "Kubernetesクラスタにクライアントサービスをデプロイする"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:426
#, fuzzy
msgid "The generated manifest can be applied to the cluster from the project root using kubectl:"
msgstr "生成されたマニフェストは、プロジェクトルートからkubectlを使用してクラスタに適用することができます。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:430
#, no-wrap
msgid "kubectl apply -f target/kubernetes/kubernetes.yml -n=development\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/stork-kubernetes.adoc:436
#, fuzzy
msgid "Please note that if you use Elliptic Curve keys with Stork and are getting exceptions like `java.lang.ClassNotFoundException: org.bouncycastle.jce.provider.BouncyCastleProvider`, then adding a BouncyCastle PKIX dependency (`org.bouncycastle:bcpkix-jdk15on`) is required."
msgstr "StorkでElliptic Curveキーを使用していて、 `java.lang.ClassNotFoundException: org.bouncycastle.jce.provider.BouncyCastleProvider` のような例外が発生する場合、BouncyCastle PKIX依存関係( `org.bouncycastle:bcpkix-jdk15on` )を追加する必要があることに注意してください。"

#. type: delimited block =
#: upstream/_guides/stork-kubernetes.adoc:438
#, fuzzy
msgid "Note that internally an `org.bouncycastle.jce.provider.BouncyCastleProvider` provider will be registered if it has not already been registered."
msgstr "なお、内部的には `org.bouncycastle.jce.provider.BouncyCastleProvider` のプロバイダが登録されていない場合は、登録される。"

#. type: delimited block =
#: upstream/_guides/stork-kubernetes.adoc:440
#, fuzzy
msgid "You can have this provider registered as described in the xref:security-customization.adoc#bouncy-castle[BouncyCastle] or xref:security-customization.adoc#bouncy-castle-fips[BouncyCastle FIPS] sections."
msgstr "link:security-customization.html#bouncy-castle[BouncyCastle] または link:security-customization.html#bouncy-castle-fips[BouncyCastle FIPSの] セクションで説明したように、このプロバイダを登録させることができます。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:444
#, fuzzy
msgid "We're done! So, let's see if it works."
msgstr "完了です!では、動作確認をしてみましょう。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:446
#, fuzzy
msgid "Open a browser and navigate to http://my-service.127.0.0.1.nip.io/api."
msgstr "ブラウザを起動し、 http://my-service.127.0.0.1.nip.io/api  にアクセスします。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:448
#, fuzzy
msgid "Or if you prefer, in another terminal, run:"
msgstr "あるいは、別のターミナルで、実行します。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:457
#, no-wrap
msgid ""
"> curl http://my-service.127.0.0.1.nip.io/api\n"
"...\n"
"> curl http://my-service.127.0.0.1.nip.io/api\n"
"...\n"
"> curl http://my-service.127.0.0.1.nip.io/api\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:460
#, fuzzy
msgid "The responses should alternate randomly between `Hello from Red!` and `Hello from Blue!`."
msgstr "回答は、 `Hello from Red!` と `Hello from Blue!` をランダムに交互に表示すること。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:462
#, fuzzy
msgid "You can compile this application into a native executable:"
msgstr "このアプリケーションは、ネイティブの実行ファイルにコンパイルすることができます。"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:466
#, fuzzy
msgid "Then, you need to build a container image based on the native executable. For this use the corresponding Dockerfile:"
msgstr "次に、ネイティブの実行ファイルに基づいてコンテナイメージを構築する必要があります。これには、対応するDockerfileを使用します。"

#. type: delimited block -
#: upstream/_guides/stork-kubernetes.adoc:470
#, no-wrap
msgid "> docker build -f src/main/docker/Dockerfile.native -t quarkus/stork-kubernetes-quickstart .\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:473
#, fuzzy
msgid "After publishing the new image to the container registry. You can redeploy the Kubernetes manifest to the cluster."
msgstr "新しいイメージをコンテナレジストリに公開した後。Kubernetesマニフェストをクラスターに再デプロイすることができます。"

#. type: Title ==
#: upstream/_guides/stork-kubernetes.adoc:474
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:478
msgid "This guide has shown how to use SmallRye Stork to discover and select your services.  You can find more about Stork in:"
msgstr "このガイドでは、SmallRye Storkを使ってサービスを発見し、選択する方法を紹介しました。Storkについては、以下のページで詳しく紹介しています:"

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:480
msgid "the xref:stork-reference.adoc[Stork reference guide],"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:481
msgid "the xref:stork.adoc[Stork with Consul reference guide],"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-kubernetes.adoc:481
msgid "the https://smallrye.io/smallrye-stork[SmallRye Stork website]."
msgstr "the https://smallrye.io/smallrye-stork[SmallRye Stork website]."

#, fuzzy
#~ msgid "Getting Started with SmallRye Stork"
#~ msgstr "SmallRye Storkを使い始める"

#~ msgid "The essence of distributed systems resides in the interaction between services.  In modern architecture, you often have multiple instances of your service to share the load or improve the resilience by redundancy.  But how do you select the best instance of your service? That's where https://smallrye.io/smallrye-stork[SmallRye Stork] helps.  Stork is going to choose the most appropriate instance.  It offers:"
#~ msgstr "分散システムの本質は、サービス間の相互作用にあります。現代のアーキテクチャでは、負荷を共有したり、冗長性によって回復力を高めたりするために、サービスの複数のインスタンスを持つことがよくあります。しかし、サービスの最適なインスタンスをどのように選択すればよいのでしょうか？そこで、 link:https://smallrye.io/smallrye-stork[SmallRye Stork]がお役に立ちます。Storkが最適なインスタンスを選択してくれます。次の機能を提供します:"

#~ msgid "Extensible service discovery mechanisms"
#~ msgstr "拡張可能なサービスディスカバリーメカニズム"

#, fuzzy
#~ msgid "Built-in support for Consul and Kubernetes"
#~ msgstr "ConsulとKubernetesのビルトインサポート"

#~ msgid "Customizable client load-balancing strategies"
#~ msgstr "カスタマイズ可能なクライアントロードバランシング戦略"
