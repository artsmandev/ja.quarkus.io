# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2023-03-05 08:14+0000\n"
"PO-Revision-Date: 2023-04-08 22:01+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#. type: Title =
#: upstream/_guides/security-overview-concept.adoc:2
#, no-wrap
msgid "Quarkus Security overview"
msgstr "Quarkus Securityの概要"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:7
msgid "Quarkus Security is a framework that provides the architecture, multiple authentication and authorization mechanisms, and other tools for you to build secure and production-quality Java applications."
msgstr "Quarkus Securityでは、開発者がQuarkusアプリケーションの商用品質のセキュリティーを構築するためのアーキテクチャ、複数の認証および認可メカニズム、その他のツールを提供しているフレームワークです。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:8
#, no-wrap
msgid "Getting started with Quarkus Security"
msgstr "Quarkus セキュリティー入門"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:11
#, fuzzy
msgid "Before you start building security into your Quarkus applications, review the overview information to learn about the Quarkus Security architecture and the different authentication and authorization mechanisms that Quarkus supports."
msgstr "Quarkusアプリケーションにセキュリティを組み込む前に、概要情報を確認し、Quarkusのセキュリティアーキテクチャと、Quarkusがサポートするさまざまな認証および認可メカニズムについて学んでください。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:15
#, fuzzy
msgid "To get started with security in Quarkus, we recommend that you first combine the Quarkus built-in xref:security-basic-authentication-concept.adoc[Basic HTTP authentication] with the JPA identity provider to enable role-based access control (RBAC).  Complete the steps in the xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication] tutorial.  After you have successfully secured your Quarkus application with basic HTTP authentication, you can increase the security further by adding more advanced authentication mechanisms, for example, OpenID Connect (OIDC) authentication."
msgstr "Quarkusでセキュリティを始めるには、まず、Quarkusに組み込まれている link:security-basic-authentication-concept.html[Basic HTTP認証と] JPA IDプロバイダーを組み合わせて、ロールベースのアクセス制御（RBAC）を有効にすることをお勧めします。 link:security-basic-authentication-tutorial.html[基本認証でQuarkusアプリケーションを保護] するチュートリアルのステップを完了します。基本HTTP認証でQuarkusアプリケーションのセキュリティ確保に成功したら、OpenID Connect（OIDC）認証など、より高度な認証メカニズムを追加して、セキュリティをさらに向上させることができます。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:16
#, no-wrap
msgid "Security architecture"
msgstr "セキュリティ・アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:19
#, fuzzy
msgid "The `HttpAuthenticationMechanism` interface is the main entry mechanism for securing HTTP applications in Quarkus."
msgstr " `HttpAuthenticationMechanism` インターフェースは、Quarkus で HTTP アプリケーションを保護するための主要なエントリ メカニズムです。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:22
#, fuzzy
msgid "Quarkus Security uses `HttpAuthenticationMechanism` to extract the authentication credentials from the HTTP request and delegates them to `IdentityProvider` to convert the credentials to `SecurityIdentity`.  For example, the credentials can come from the `Authorization` header, client HTTPS certificates, or cookies."
msgstr "Quarkus Security は `HttpAuthenticationMechanism` を使用して HTTP 要求から認証クレデンシャルを抽出し、そのクレデンシャルを `SecurityIdentity` に変換するために `IdentityProvider` に委譲します。たとえば、認証情報は、 `Authorization` ヘッダー、クライアントの HTTPS 証明書、または Cookie から取得することができます。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:24
#, fuzzy
msgid "`IdentityProvider` verifies the authentication credentials and maps them to `SecurityIdentity`, which has the username, roles, original authentication credentials, and other attributes."
msgstr " `IdentityProvider` は認証情報を検証し、ユーザー名、ロール、元の認証情報、およびその他の属性を持つ にマップします。 `SecurityIdentity` "

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:26
msgid "For every authenticated resource, you can inject a `SecurityIdentity` instance to get the authenticated identity information."
msgstr "認証済みリソースごとに、 `SecurityIdentity`  インスタンスを注入して、認証済みの ID 情報を取得することができます。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:29
#, fuzzy
msgid "In other contexts, it is possible to have other parallel representations of the same information or parts of it, for example, `SecurityContext` for JAX-RS or `JsonWebToken` for JSON Web Tokens (JWT)."
msgstr "他のコンテキストでは、同じ情報またはその一部の他の並列表現、例えばJAX-RSの `SecurityContext` 、JSON Web Tokens（JWT）の `JsonWebToken` が可能である。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:30
#, no-wrap
msgid "Authentication mechanisms"
msgstr "認証メカニズム"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:33
msgid "Quarkus supports multiple authentication mechanisms"
msgstr "Quarkusは複数の認証メカニズムをサポートしています。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:34
#, no-wrap
msgid "Basic and Form HTTP authentication"
msgstr "HTTPのBasic認証とフォームHTTP認証"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:37
#, fuzzy
msgid "xref:security-basic-authentication-concept.adoc[Basic HTTP Authentication] and xref:security-built-in-authentication-support-concept.adoc#form-auth[Form HTTP authentication] are the core authentication mechanisms supported in Quarkus."
msgstr "link:security-basic-authentication-concept.html[Basic HTTP認証と] link:security-built-in-authentication-support-concept.html#form-auth[Form HTTP認証は] 、Quarkusでサポートされている中核的な認証メカニズムです。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:38
#, no-wrap
msgid "WebAuthn authentication"
msgstr "WebAuthn認証"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:43
#, fuzzy
msgid "https://webauthn.guide/[WebAuthn] is an authentication mechanism that replaces passwords.  When you write a service for registering new users, or logging them in, instead of asking for a password, you can use WebAuthn, which replaces the password.  For more information, see xref:security-webauthn.adoc[Secure a Quarkus application by using the WebAuthn authentication mechanism]."
msgstr "link:https://webauthn.guide/[WebAuthnは] 、パスワードに代わる認証機構です。新しいユーザーを登録したり、ログインしたりするサービスを作成する場合、パスワードを要求する代わりに、WebAuthnを使用して、パスワードを置き換えることができます。詳細については、「 link:security-webauthn.html[WebAuthn認証メカニズムを使用したQuarkusアプリケーションのセキュリティ] 確保」を参照してください。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:44
#, no-wrap
msgid "Mutual TLS (mTLS) authentication"
msgstr "Mutual TLS（mTLS）認証"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:48
#, fuzzy
msgid "Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates.  For more information, see xref:security-built-in-authentication-support-concept.adoc#mutual-tls[mutual TLS authentication]."
msgstr "Quarkusには相互TLS（mTLS）認証があり、X.509証明書に基づいてユーザーを認証することができます。詳細については、相互 link:security-built-in-authentication-support-concept.html#mutual-tls[TLS] 認証を参照してください。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:49
#, no-wrap
msgid "OpenID Connect authentication"
msgstr "OpenID Connect認証"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:52
#, fuzzy
msgid "OpenID Connect (OIDC) is an identity layer that works on top of the OAuth 2.0 protocol. OIDC enables client applications to verify the identity of a user based on the authentication performed by the OIDC provider and to retrieve basic information about that user."
msgstr "OpenID Connect (OIDC) は、OAuth 2.0 プロトコルの上で動作する ID レイヤです。OIDCは、クライアントアプリケーションが、OIDCプロバイダによって実行された認証に基づいてユーザーの身元を確認し、そのユーザーに関する基本情報を取得することを可能にします。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:57
#, fuzzy
msgid "The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer Token and Authorization Code Flow authentication mechanisms.  The Bearer Token mechanism extracts the token from the HTTP Authorization header.  The Authorization Code Flow mechanism redirects the user to an OIDC provider to authenticate the identity of the user.  After the user is redirected back to Quarkus, the mechanism completes the authentication process by exchanging the provided code that was granted for the ID, access, and refresh tokens."
msgstr "Quarkus `quarkus-oidc` 拡張により、反応性、相互運用性、マルチテナント対応のOIDCアダプタが提供され、ベアラトークンと認証コードフロー認証メカニズムがサポートされます。Bearer Tokenメカニズムは、HTTP Authorizationヘッダーからトークンを抽出します。Authorization Code Flowメカニズムは、ユーザーをOIDCプロバイダーにリダイレクトし、ユーザーのアイデンティティを認証します。ユーザーがQuarkusにリダイレクトされた後、このメカニズムでは、ID、アクセス、およびリフレッシュトークンに対して付与されたコードを交換することによって、認証プロセスが完了します。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:60
#, fuzzy
msgid "You can verify ID and access JWT tokens by using the refreshable JSON Web Key (JWK) set or you can introspect them remotely.  However, opaque (binary) tokens can only be introspected remotely."
msgstr "リフレッシュ可能なJSON Web Key（JWK）セットを使用してIDおよびアクセスJWTトークンを検証するか、リモートでそれらをイントロスペクトすることができます。ただし、不透明（バイナリ）トークンは、リモートでイントロスペクトすることしかできません。"

#. type: delimited block =
#: upstream/_guides/security-overview-concept.adoc:64
#, fuzzy
msgid "Using the Quarkus OIDC extension, both Bearer Token and Authorization Code Flow mechanisms use <<smallrye-jwt, SmallRye JWT>> to represent JWT tokens as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "Quarkus OIDCエクステンションを使用すると、ベアラートークンと認証コードフローの両方のメカニズムで link:#smallrye-jwt[SmallRye JWTを] 使用して、JWTトークンをMicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken` として表現することができます。"

#. type: Title ====
#: upstream/_guides/security-overview-concept.adoc:66
#, fuzzy, no-wrap
msgid "Additional Quarkus resources for OIDC authentication"
msgstr "OIDC認証のためのQuarkusの追加リソース"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:69
#, fuzzy
msgid "For more information about OIDC authentication and authorization methods you can use to secure your Quarkus applications, see the following detailed resources:"
msgstr "Quarkusアプリケーションのセキュリティ確保に使用できるOIDC認証および認可方法の詳細については、次の詳細なリソースを参照してください。"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:72
#, no-wrap
msgid "OIDC topic"
msgstr "OIDCトピック"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:73
#, fuzzy, no-wrap
msgid "Quarkus information resource"
msgstr "Quarkusの情報リソース"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:73
#, no-wrap
msgid "Bearer Token authentication mechanis"
msgstr "ベアラートークン認証の仕組"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:74
#, fuzzy, no-wrap
msgid "xref:security-openid-connect.adoc[Using OpenID Connect (OIDC) to protect service applications using Bearer Token authorization]"
msgstr "link:security-openid-connect.html[OpenID Connect（OIDC）を利用したBearer Token認証によるサービスアプリケーションの保護]"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:74
#, no-wrap
msgid "Authorization Code Flow authentication mechanis"
msgstr "認可コードフロー認証の仕組"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:75
#, no-wrap
msgid "xref:security-openid-connect-web-authentication.adoc[OpenID Connect (OIDC) authorization code flow mechanism]"
msgstr "xref:security-openid-connect-web-authentication.adoc[OpenID Connect (OIDC)認可コードフロー機構]"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:75
#, fuzzy, no-wrap
msgid "Multiple tenants that can support Bearer Token or Authorization Code Flow mechanism"
msgstr "Bearer TokenまたはAuthorization Code Flowメカニズムに対応可能な複数のテナント"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:76
#, fuzzy, no-wrap
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect (OIDC) multi-tenancy]"
msgstr "link:security-openid-connect-multitenancy.html[OpenID Connect（OIDC）のマルチテナンシーを利用する]"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:76
#, no-wrap
msgid "Using Keycloak to centralize authorization"
msgstr "Keycloakを使用した認可の一元化"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:77
#, fuzzy, no-wrap
msgid "xref:security-keycloak-authorization.adoc[Using OpenID Connect (OIDC) and Keycloak to centralize authorization]"
msgstr "link:security-keycloak-authorization.html[OpenID Connect (OIDC)とKeycloakを使った一元的な認証の実現]"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:77
#, no-wrap
msgid "Configuring Keycloak programmatically"
msgstr "Keycloakのプログラムによる設定"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:78
#, fuzzy, no-wrap
msgid "xref:security-keycloak-admin-client.adoc[Using the Keycloak admin client]"
msgstr "link:security-keycloak-admin-client.html[Keycloak管理者クライアントを使用する]"

#. type: delimited block =
#: upstream/_guides/security-overview-concept.adoc:84
#, fuzzy
msgid "If you need to enable the Quarkus OIDC extension at runtime, set `quarkus.oidc.tenant-enabled=false` at build time and then re-enable it at runtime by using a system property.  For more information about managing the individual tenant configurations in multitenant OIDC deployments, see the _Disabling tenant configurations_ section in the xref:security-openid-connect-multitenancy.adoc#disable-tenant[Using OpenID Connect (OIDC) multi-tenancy] guide."
msgstr "Quarkus OIDCエクステンションを実行時に有効にする必要がある場合は、ビルド時に `quarkus.oidc.tenant-enabled=false` 、システムプロパティを使用して実行時に再有効化します。マルチテナントOIDC展開における個々のテナント構成の管理の詳細については、『 link:security-openid-connect-multitenancy.html#disable-tenant[Using OpenID Connect（OIDC）マルチテナンシーガイド] 』の「 _テナント構成の無効_ 化」のセクションを参照してください。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:86
#, no-wrap
msgid "OpenID Connect client and filters"
msgstr "OpenID Connectクライアントとフィルター"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:89
msgid "The `quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers that support the following token grants:"
msgstr "`quarkus-oidc-client` エクステンションは、以下のトークングラントをサポートする OpenID Connect および OAuth2 プロバイダからアクセストークンを取得し、リフレッシュするための `OidcClient` を提供します。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:90
msgid "`client-credentials`"
msgstr "`client-credentials`"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:91
msgid "`password`"
msgstr "`password`"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:92
msgid "`refresh_token`"
msgstr "`refresh_token`"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:96
msgid "The `quarkus-oidc-client-filter` extension requires the `quarkus-oidc-client` extension and provides JAX-RS `OidcClientRequestFilter`, which sets the access token acquired by `OidcClient` as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, but it is not related to the authentication requirements of this service endpoint.  For example, it can be a public endpoint, or it can be protected with mTLS."
msgstr "`quarkus-oidc-client-filter` エクステンションは、 `quarkus-oidc-client` エクステンションを必要とし、JAX-RS `OidcClientRequestFilter` を提供します。これは、 `OidcClient` で取得したアクセストークンを HTTP `Authorization` ヘッダの `Bearer` スキーム値として設定するものです。このフィルタは、現在のQuarkusエンドポイントに注入されるMP RestClient実装に登録できますが、このサービスエンドポイントの認証要件には関係しません。たとえば、公開エンドポイントにすることも、mTLSで保護することもできます。"

#. type: delimited block =
#: upstream/_guides/security-overview-concept.adoc:100
#, fuzzy
msgid "In this scenario, you do not need to protect your Quarkus endpoint by using the Quarkus OpenID Connect adapter."
msgstr "このシナリオでは、Quarkus OpenID Connectアダプターを使用して、Quarkusエンドポイントを保護する必要はありません。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:105
#, fuzzy
msgid "The `quarkus-oidc-token-propagation` extension requires the `quarkus-oidc` extension and provides JAX-RS `TokenCredentialRequestFilter`, which sets the OpenID Connect Bearer or Authorization Code Flow access token as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, which in turn must be protected by using the Quarkus OpenID Connect adapter.  This filter can be used to propagate the access token to the downstream services."
msgstr " `quarkus-oidc-token-propagation` 拡張は、 `quarkus-oidc` 拡張を必要とし、JAX-RS `TokenCredentialRequestFilter` を提供します。HTTP `Authorization` ヘッダーの `Bearer` スキーム値として OpenID Connect Bearer または Authorization Code Flow アクセストークンが設定されます。このフィルターは、現在のQuarkusエンドポイントに注入されたMP RestClient実装に登録することができ、Quarkus OpenID Connectアダプターを使用して保護される必要があります。このフィルターは、アクセストークンを下流のサービスに伝達するために使用できます。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:107
#, fuzzy
msgid "For more information, see the xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart] and xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference] guides."
msgstr "詳細については、 link:security-openid-connect-client.html[OpenID Connectクライアントおよびトークン伝搬クイックスタート] 、 link:security-openid-connect-client-reference.html[OpenID Connect（OIDC）およびOAuth2クライアントおよびフィルタのリファレンス] ガイドを参照してください。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:109
#, fuzzy, no-wrap
msgid "SmallRye JWT authentication"
msgstr "SmallRye JWT認証"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:112
#, fuzzy
msgid "The `quarkus-smallrye-jwt` extension provides a MicroProfile JSON Web Token (JWT) 1.2.1 implementation and multiple options to verify signed and encrypted `JWT` tokens and represents them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr " `quarkus-smallrye-jwt` 拡張は、MicroProfile JSON Web Token (JWT) 1.2.1 の実装と、署名および暗号化された `JWT` トークンを検証する複数のオプションを提供し、それらを `org.eclipse.microprofile.jwt.JsonWebToken` として表現しています。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:115
#, fuzzy
msgid "`quarkus-smallrye-jwt` is an alternative to the `quarkus-oidc` Bearer Token authentication mechanism, and verifies only `JWT` tokens by using either PEM keys or the refreshable `JWK` key set.  `quarkus-smallrye-jwt` also provides the JWT generation API, which you can use to easily create `signed`, `inner-signed`, and `encrypted` `JWT` tokens."
msgstr " `quarkus-smallrye-jwt` は ベアラトークンによる認証機構の代替で、PEMキーまたはリフレッシュ可能な キーセットを使用して トークンだけを検証します。 は JWT 生成 API も提供しており、これを使用して , ,  トークンを簡単に作成することが可能です。 `quarkus-oidc` `JWK` `JWT` `quarkus-smallrye-jwt` `signed` `inner-signed` `encrypted` `JWT` "

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:117
#, fuzzy
msgid "For more information, see xref:security-jwt.adoc[Using SmallRye JWT role-based access control]."
msgstr "詳細については、「 link:security-jwt.html[SmallRye JWTロールベース・アクセス・コントロールの使用] 」を参照してください。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:118
#, no-wrap
msgid "OAuth2 authentication"
msgstr "OAuth2 認証"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:122
#, fuzzy
msgid "`quarkus-elytron-security-oauth2` provides an alternative to the `quarkus-oidc` Bearer Token authentication mechanism. `quarkus-elytron-security-oauth2` is based on `Elytron` and is primarily intended for introspecting opaque tokens remotely.  For more information, see xref:security-oauth2.adoc[Using OAuth2]."
msgstr " `quarkus-elytron-security-oauth2` は、 ベアラトークンによる認証メカニズムの代替手段を提供します。 は に基づいており、主にリモートで不透明なトークンをイントロスペクトすることを目的としています。詳細については、 `quarkus-oidc` `quarkus-elytron-security-oauth2` `Elytron` link:security-oauth2.html[OAuth] 2の利用を参照してください。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:124
#, fuzzy, no-wrap
msgid "Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms"
msgstr "OpenID Connect、SmallRye JWT、OAuth2の3つの認証機構から選択する。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:127
#, fuzzy
msgid "Use the following information to help you to decide which authentication mechanism to use to secure your Quarkus applications:"
msgstr "Quarkus アプリケーションのセキュリティを確保するためにどの認証メカニズムを使用するかを決定する際に、次の情報を参考にしてください。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:130
#, fuzzy
msgid "`quarkus-oidc` requires an OpenID Connect provider such as Keycloak, which can be used to verify the Bearer tokens or authenticate the end users with the Authorization Code flow.  In both cases, `quarkus-oidc` requires a connection to the specified OpenID Connect provider."
msgstr " `quarkus-oidc` には、Keycloak などの OpenID Connect プロバイダが必要で、これを使用して Bearer トークンを検証したり、Authorization Code フローでエンドユーザを認証したりすることができます。どちらの場合も、 、指定されたOpenID Connectプロバイダへの接続が必要です。 `quarkus-oidc` "

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:133
#, fuzzy
msgid "If the user authentication requires Authorization Code flow or you need to support multiple tenants, use `quarkus-oidc`.  `quarkus-oidc` can also request user information by using both Authorization Code Flow and Bearer access tokens."
msgstr "ユーザー認証にAuthorization Code Flowが必要な場合や、複数のテナントに対応する必要がある場合は、 `quarkus-oidc` 。 `quarkus-oidc` では、Authorization Code FlowとBearerアクセストークンの両方を使用して、ユーザー情報を要求することもできます。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:135
#, fuzzy
msgid "If your Bearer tokens must be verified, use `quarkus-oidc`, `quarkus-smallrye-jwt`, or `quarkus-elytron-security-oauth2`."
msgstr "ベアラートークンの検証が必要な場合は、 `quarkus-oidc` , `quarkus-smallrye-jwt` , または `quarkus-elytron-security-oauth2` を使用してください。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:138
#, fuzzy
msgid "If your Bearer tokens are in a JWT format, you can use either of the three extensions. Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the JsonWebKey (JWK) set when the OpenID Connect provider rotates the keys.  Therefore, if remote token introspection must be avoided or is unsupported by the providers, use `quarkus-oidc` or `quarkus-smallrye-jwt` for verifying JWT tokens."
msgstr "Bearer トークンが JWT 形式である場合は、3 つの拡張モジュールのいずれかを使用できます。 `quarkus-oidc` と `quarkus-smallrye-jwt` のどちらも、OpenID Connect プロバイダがキーをローテーションする際に JsonWebKey (JWK) セットをリフレッシュすることをサポートしています。したがって、リモートでのトークンのイントロスペクションを避けなければならない場合や、プロバイダがサポートしていない場合は、JWT トークンの検証に `quarkus-oidc` または `quarkus-smallrye-jwt` を使用してください。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:141
#, fuzzy
msgid "If you need to introspect the JWT tokens remotely, you can use either `quarkus-oidc` or `quarkus-elytron-security-oauth2` because they support the verification of the opaque or binary tokens by using remote introspection.  `quarkus-smallrye-jwt` does not support the remote introspection of both opaque or JWT tokens but instead relies on the locally available keys that are usually retrieved from the OpenID Connect provider."
msgstr "JWT トークンをリモートでイントロスペクトする必要がある場合は、 `quarkus-oidc` または `quarkus-elytron-security-oauth2` のいずれかを使用できます。これらはリモートイントロスペクションを使用して、不透明またはバイナリートークンの検証をサポートしています。 `quarkus-smallrye-jwt` は不透明または JWT トークンのリモートイントロスペクションをサポートしていませんが、通常は OpenID Connect プロバイダから取得されるローカルで利用できるキーに依存しています。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:144
#, fuzzy
msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` support the injecting of JWT and opaque tokens into the endpoint code.  Injected JWT tokens provide more information about the user. All extensions can have the tokens injected as `Principal`."
msgstr " `quarkus-oidc` と は、エンドポイント・コードへの JWT トークンおよび opaque トークンの注入をサポートしています。注入された JWT トークンは、ユーザーに関するより多くの情報を提供します。すべての拡張は、 として注入されたトークンを持つことができます。 `quarkus-smallrye-jwt` `Principal` "

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:146
#, fuzzy
msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`. `quarkus-oidc` uses only the JWK-formatted keys that are part of a JWK set, whereas `quarkus-smallrye-jwt` supports PEM keys."
msgstr " `quarkus-smallrye-jwt` `quarkus-oidc` `quarkus-oidc` はJWKセットの一部であるJWK形式の鍵のみを使用するのに対し、 はPEMの鍵をサポートしています。 `quarkus-smallrye-jwt` "

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:149
#, fuzzy
msgid "`quarkus-smallrye-jwt` handles locally signed, inner-signed-and-encrypted, and encrypted tokens.  While `quarkus-oidc` and `quarkus-elytron-security-oauth2` can also verify such tokens but treats them as opaque tokens and verifies them through remote introspection."
msgstr " `quarkus-smallrye-jwt` は、ローカル署名付きトークン、内部署名付き暗号化トークン、および暗号化トークンを扱います。 と はこのようなトークンを検証することもできますが、不透明なトークンとして扱い、リモートイントロスペクションによって検証します。 `quarkus-oidc` `quarkus-elytron-security-oauth2` "

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:151
#, fuzzy
msgid "If you need a lightweight library for the remote introspection of opaque or JWT tokens, use `quarkus-elytron-security-oauth2`."
msgstr "opaqueやJWTトークンのリモートイントロスペクションのための軽量なライブラリが必要な場合は、 `quarkus-elytron-security-oauth2` を使用してください。"

#. type: delimited block =
#: upstream/_guides/security-overview-concept.adoc:158
#, fuzzy
msgid "Your decision to choose whether to use opaque or JWT token format will be driven by architectural considerations.  Opaque tokens tend to be much shorter than JWT tokens but need most of the token-associated state to be maintained in the provider database.  Opaque tokens are effectively database pointers.  JWT tokens are significantly longer than the opaque tokens but the providers are effectively delegating storing most of the token-associated state to the client by storing it as the token claims and either signing or encrypting them."
msgstr "不透明トークンとJWTトークンのどちらの形式を使用するかは、アーキテクチャの考慮事項によって決定されます。不透明トークンはJWTトークンよりもはるかに短い傾向がありますが、トークンに関連する状態のほとんどをプロバイダのデータベースで維持する必要があります。不透明トークンは、事実上データベース・ポインタです。JWTトークンは不透明トークンよりかなり長いですが、プロバイダはトークン関連状態のほとんどをトークン請求として保存し、署名または暗号化することにより、実質的にクライアントに保存を委ねることになります。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:161
#, fuzzy
msgid "The following table provides a summary of the options for each authentication mechanism:"
msgstr "次の表は、各認証メカニズムのオプションの概要を示しています。"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:163
#, no-wrap
msgid "quarkus-oidc"
msgstr "quarkus-oidc"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:163
#, no-wrap
msgid "quarkus-smallrye-jwt"
msgstr "quarkus-smallrye-jwt"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:165
#, no-wrap
msgid "quarkus-elytron-security-oauth2"
msgstr "quarkus-elytron-security-oauth2"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:166
#, fuzzy, no-wrap
msgid "Requires Bearer JWT verification"
msgstr "ベアラJWTの検証を必要とする"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:167
#, fuzzy, no-wrap
msgid "Local verification or introspection"
msgstr "現地での検証またはイントロスペクション"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:168
#: upstream/_guides/security-overview-concept.adoc:208
#, no-wrap
msgid "Local verification"
msgstr "ローカル検証"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:169
#: upstream/_guides/security-overview-concept.adoc:171
#: upstream/_guides/security-overview-concept.adoc:173
#: upstream/_guides/security-overview-concept.adoc:207
#: upstream/_guides/security-overview-concept.adoc:209
#, no-wrap
msgid "Introspection"
msgstr "イントロスペクション"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:170
#, fuzzy, no-wrap
msgid "Requires Bearer opaque token verification"
msgstr "Bearer不透明トークン検証を必要とする"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:172
#: upstream/_guides/security-overview-concept.adoc:177
#: upstream/_guides/security-overview-concept.adoc:185
#: upstream/_guides/security-overview-concept.adoc:188
#: upstream/_guides/security-overview-concept.adoc:189
#: upstream/_guides/security-overview-concept.adoc:192
#: upstream/_guides/security-overview-concept.adoc:193
#: upstream/_guides/security-overview-concept.adoc:196
#: upstream/_guides/security-overview-concept.adoc:197
#: upstream/_guides/security-overview-concept.adoc:199
#: upstream/_guides/security-overview-concept.adoc:201
#: upstream/_guides/security-overview-concept.adoc:203
#: upstream/_guides/security-overview-concept.adoc:205
#: upstream/_guides/security-overview-concept.adoc:211
#: upstream/_guides/security-overview-concept.adoc:213
#: upstream/_guides/security-overview-concept.adoc:215
#: upstream/_guides/security-overview-concept.adoc:217
#, no-wrap
msgid "No"
msgstr "No"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:174
#, fuzzy, no-wrap
msgid "Refreshing `JsonWebKey` set for verifying JWT tokens"
msgstr "JWTトークンを検証するための `JsonWebKey` セットをリフレッシュする。"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:175
#: upstream/_guides/security-overview-concept.adoc:176
#: upstream/_guides/security-overview-concept.adoc:179
#: upstream/_guides/security-overview-concept.adoc:180
#: upstream/_guides/security-overview-concept.adoc:181
#: upstream/_guides/security-overview-concept.adoc:183
#: upstream/_guides/security-overview-concept.adoc:184
#: upstream/_guides/security-overview-concept.adoc:187
#: upstream/_guides/security-overview-concept.adoc:191
#: upstream/_guides/security-overview-concept.adoc:195
#: upstream/_guides/security-overview-concept.adoc:200
#: upstream/_guides/security-overview-concept.adoc:216
#, no-wrap
msgid "Yes"
msgstr "Yes"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:178
#, fuzzy, no-wrap
msgid "Represent token as `Principal`"
msgstr "トークンを以下のように表現します。 `Principal` "

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:182
#, fuzzy, no-wrap
msgid "Inject JWT as MP JSON Web Token (JWT)"
msgstr "MP JSON Web Token (JWT)としてJWTをインジェクトする。"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:186
#, no-wrap
msgid "Authorization Code Flow"
msgstr "認可コードフロー"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:190
#, no-wrap
msgid "Multi-tenancy"
msgstr "マルチテナンシー"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:194
#, fuzzy, no-wrap
msgid "User info support"
msgstr "ユーザー情報対応"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:198
#, fuzzy, no-wrap
msgid "PEM key format support"
msgstr "PEMキーフォーマット対応"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:202
#, no-wrap
msgid "SecretKey support"
msgstr "SecretKeyサポート"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:204
#, fuzzy, no-wrap
msgid "In JSON Web Key (JWK) format"
msgstr "JSON Web Key (JWK) 形式で。"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:206
#, fuzzy, no-wrap
msgid "Inner-signed and encrypted or encrypted tokens"
msgstr "内部署名され暗号化された、または暗号化されたトークン"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:210
#, no-wrap
msgid "Custom token verification"
msgstr "カスタムトークン検証"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:212
#, fuzzy, no-wrap
msgid "With injected JWT parser"
msgstr "インジェクションされたJWTパーサーを使用する場合"

#. type: Table
#: upstream/_guides/security-overview-concept.adoc:214
#, fuzzy, no-wrap
msgid "Accept JWT as a cookie"
msgstr "JWTをCookieとして受け入れる"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:220
#, no-wrap
msgid "Identity providers"
msgstr "アイデンティティ・プロバイダー"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:224
#, fuzzy
msgid "The JPA `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
msgstr "JPA `IdentityProvider` は、 `SecurityIdentity` インスタンスを作成します。このインスタンスは、ユーザー認証時に使用され、アクセス要求を検証および承認して、Quarkus アプリケーションをセキュアにします。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:227
#, fuzzy
msgid "`IdentityProvider` converts the authentication credentials provided by `HttpAuthenticationMechanism` to a `SecurityIdentity` instance."
msgstr " `IdentityProvider` は、 から提供された認証情報を のインスタンスに変換します。 `HttpAuthenticationMechanism` `SecurityIdentity` "

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:230
#, fuzzy
msgid "Some extensions, for example, `OIDC`, `OAuth2`, and `SmallRye JWT` have inline `IdentityProvider` implementations specific to the supported authentication flow.  For example, `quarkus-oidc` uses its own `IdentityProvider` to convert a token to a `SecurityIdentity` instance."
msgstr "一部の拡張、たとえば `OIDC` 、 `OAuth2` 、および `SmallRye JWT` は、対応する認証フローに固有のインラインの `IdentityProvider` 実装を持つ。たとえば、 `quarkus-oidc` は独自の `IdentityProvider` を使用して、トークンを `SecurityIdentity` インスタンスに変換しています。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:232
#, fuzzy
msgid "If you use `Basic` or `Form` HTTP-based authentication then you must add an `IdentityProvider` instance that can convert a username and password to a `SecurityIdentity` instance."
msgstr " `Basic` または `Form` HTTP ベースの認証を使用する場合は、ユーザー名とパスワードを変換できる `IdentityProvider` インスタンスを追加する必要があります `SecurityIdentity` インスタンスに。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:234
#, fuzzy
msgid "For more information about `Basic` or `Form` HTTP-based authentication, see the following resources:"
msgstr " `Basic` または `Form` HTTPベースの認証の詳細については、次のリソースを参照してください。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:235
#, fuzzy
msgid "xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication]"
msgstr "link:security-basic-authentication-tutorial.html[基本認証によるQuarkusアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:236
#, fuzzy
msgid "xref:security-jdbc.adoc[Using security with JDBC]"
msgstr "link:security-jdbc.html[JDBCでのセキュリティの使用]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:237
#, fuzzy
msgid "xref:security-ldap.adoc[Using security with an LDAP realm]"
msgstr "link:security-ldap.html[LDAPレルムでセキュリティを使用する]"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:238
#, no-wrap
msgid "Authorization"
msgstr "認可"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:242
#, fuzzy
msgid "Quarkus also supports role-based access control (RBAC).  For more information about RBAC and other authorization options in Quarkus, see xref:security-authorize-web-endpoints-reference.adoc[Security authorization]."
msgstr "Quarkusは、ロールベースのアクセス制御（RBAC）もサポートしています。QuarkusのRBACとその他の認証オプションの詳細については、「 link:security-authorization-of-web-endpoints-reference.html[セキュリティ認証] 」を参照してください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:243
#, fuzzy, no-wrap
msgid "Quarkus Security customization"
msgstr "Quarkusセキュリティのカスタマイズ"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:246
#, fuzzy
msgid "Quarkus Security is highly customizable. You can customize the following core security components of Quarkus:"
msgstr "Quarkusのセキュリティは高度にカスタマイズ可能です。Quarkusの次のコアセキュリティコンポーネントをカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:248
msgid "`HttpAuthenticationMechanism`"
msgstr "`HttpAuthenticationMechanism`"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:249
msgid "`IdentityProvider`"
msgstr "`IdentityProvider`"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:250
msgid "`SecurityidentityAugmentor`"
msgstr "`SecurityidentityAugmentor`"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:252
#, fuzzy
msgid "For more information about customizing Quarkus Security including reactive security, and how to register a security provider, see xref:security-customization.adoc[Security customization]."
msgstr "リアクティブセキュリティを含むQuarkus Securityのカスタマイズや、セキュリティプロバイダーの登録方法について詳しくは、 link:security-customization.html[セキュリティのカスタマイズを] 参照してください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:253
#, fuzzy, no-wrap
msgid "Combining authentication mechanisms"
msgstr "認証機構の組み合わせ"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:257
#, fuzzy
msgid "If the user credentials are provided by different sources, you can combine authentication mechanisms.  For example, you can combine built-in `Basic` and `quarkus-oidc` `Bearer` authentication mechanisms."
msgstr "ユーザー認証情報が異なるソースから提供される場合、認証メカニズムを組み合わせることができます。たとえば、組み込みの `Basic` と `quarkus-oidc` `Bearer` 認証メカニズムを組み合わせることができます。"

#. type: delimited block =
#: upstream/_guides/security-overview-concept.adoc:261
#, fuzzy
msgid "You cannot combine the `quarkus-oidc` `Bearer` and `smallrye-jwt` authentication mechanisms because both mechanisms attempt to verify the token extracted from the HTTP `Authorization Bearer` scheme."
msgstr " `quarkus-oidc` `Bearer` と `smallrye-jwt` の認証メカニズムは、どちらも HTTP `Authorization Bearer` スキームから抽出されたトークンを検証しようとするため、組み合わせることはできません。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:263
#, fuzzy, no-wrap
msgid "Path-specific authentication mechanisms"
msgstr "パス固有の認証メカニズム"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:266
#, fuzzy
msgid "The following configuration example demonstrates how you can enforce a single selectable authentication mechanism for a given request path:"
msgstr "次の設定例は、指定されたリクエストパスに対して、選択可能な単一の認証メカニズムを強制する方法を示しています。"

#. type: delimited block -
#: upstream/_guides/security-overview-concept.adoc:271
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic-or-bearer.paths=/service\n"
"quarkus.http.auth.permission.basic-or-bearer.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-overview-concept.adoc:275
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic.paths=/basic-only\n"
"quarkus.http.auth.permission.basic.policy=authenticated\n"
"quarkus.http.auth.permission.basic.auth-mechanism=basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-overview-concept.adoc:279
#, no-wrap
msgid ""
"quarkus.http.auth.permission.bearer.paths=/bearer-only\n"
"quarkus.http.auth.permission.bearer.policy=authenticated\n"
"quarkus.http.auth.permission.bearer.auth-mechanism=bearer\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:282
#, fuzzy
msgid "Ensure that the value of the `auth-mechanism` property matches the authentication scheme supported by `HttpAuthenticationMechanism`, for example, `basic`, `bearer`, or `form`."
msgstr " `auth-mechanism` プロパティの値が、 `HttpAuthenticationMechanism` がサポートする認証スキーム（例： `basic` 、 `bearer` 、 `form` ）と一致していることを確認する。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:283
#, no-wrap
msgid "Proactive authentication"
msgstr "プロアクティブ認証"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:287
#, fuzzy
msgid "By default, Quarkus does proactive authentication, which means that all incoming requests with credentials are authenticated regardless of whether the target page requires authentication.  For more information, see xref:security-built-in-authentication-support-concept.adoc#proactive-authentication[Proactive authentication]."
msgstr "デフォルトでは、Quarkusはプロアクティブ認証を行います。つまり、ターゲットページで認証が必要かどうかに関係なく、資格情報を持つすべての着信要求が認証されることになります。詳細は、 link:security-built-in-authentication-support-concept.html#proactive-authentication[Proactive authentication（プロアクティブ認証] ）を参照してください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:288
#, no-wrap
msgid "Secure connections with SSL/TLS"
msgstr "SSL/TLSによるセキュアな接続"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:291
#, fuzzy
msgid "For more information about how Quarkus supports secure connections with SSL/TLS, see the xref:http-reference.adoc#ssl[HTTP reference] information."
msgstr "QuarkusがSSL/TLSによるセキュアな接続をサポートする方法の詳細については、 link:http-reference.html#ssl[HTTPのリファレンス] 情報を参照してください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:292
#, fuzzy, no-wrap
msgid "Cross-origin resource sharing"
msgstr "クロスオリジンリソース共有"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:296
#, fuzzy
msgid "To make your Quarkus application accessible to another application running on a different domain, you need to configure cross-origin resource sharing (CORS).  For more information about the CORS filter that is provided by Quarkus, see the xref:http-reference.adoc#cors-filter[HTTP reference] information."
msgstr "Quarkusアプリケーションを、別のドメインで実行されている別のアプリケーションからアクセスできるようにするには、CORS（cross-origin resource sharing）を設定する必要があります。Quarkusで提供されているCORSフィルタの詳細は、『 link:http-reference.html#cors-filter[HTTP reference] information』を参照してください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:297
#, fuzzy, no-wrap
msgid "Cross-site Request Forgery (CSRF) prevention"
msgstr "クロスサイトリクエストフォージェリ（CSRF）対策"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:301
#, fuzzy
msgid "Quarkus Security provides a RESTEasy Reactive filter that can protect your applications against a https://owasp.org/www-community/attacks/csrf[Cross-Site Request Forgery] attack.  For more information, see xref:security-csrf-prevention.adoc[Cross-Site Request Forgery Prevention]."
msgstr "Quarkus Securityは、 link:https://owasp.org/www-community/attacks/csrf[Cross-Site Request Forgery] 攻撃からアプリケーションを保護できるRESTEasy Reactiveフィルタを提供しています。詳細については、「 link:security-csrf-prevention.html[Cross-Site Request Forgeryの防止] 」を参照してください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:302
#, no-wrap
msgid "SameSite cookies"
msgstr "SameSiteクッキー"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:306
#, fuzzy
msgid "You can add a https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies set by a Quarkus endpoint.  For more information, see xref:http-reference.adoc#same-site-cookie[SameSite cookies]."
msgstr "Quarkus のエンドポイントによって設定される Cookie のいずれかに、 link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] Cookie プロパティを追加することができます。詳細については、「 link:http-reference.html#same-site-cookie[SameSite cookie] 」を参照してください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:307
#, fuzzy, no-wrap
msgid "Secret engines"
msgstr "シークレットエンジン"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:309
#, fuzzy
msgid "Secrets engines are components that store, generate, or encrypt data."
msgstr "シークレットエンジンは、データを保存、生成、暗号化するコンポーネントである。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:312
#, fuzzy
msgid "Quarkus provides comprehensive HashiCorp Vault support.  For more information, see the link:{vault-guide}[Quarkus and HashiCorp Vault] documentation."
msgstr "Quarkusは、HashiCorp Vaultを包括的にサポートします。詳細については、 link:{vault-guide}[QuarkusおよびHashiCorp Vaultの] ドキュメントを参照してください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:313
#, no-wrap
msgid "Secure serialization"
msgstr "セキュア・シリアライゼーション"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:317
#, fuzzy
msgid "If your Quarkus Security architecture includes RESTEasy Reactive and Jackson, Quarkus can limit the fields that are included in JSON serialization based on the configured security.  For more information, see xref:resteasy-reactive.adoc#secure-serialization[Writing REST services with RESTEasy Reactive]."
msgstr "Quarkus SecurityアーキテクチャにRESTEasy ReactiveとJacksonが含まれている場合、設定されたセキュリティに基づいて、JSONシリアライゼーションに含まれるフィールドを制限することができます。詳細については、「 link:resteasy-reactive.html#secure-serialization[RESTEasy Reactiveを使用したRESTサービスの記述] 」を参照してください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:318
#, fuzzy, no-wrap
msgid "Secure auto-generated resources by REST Data with Panache"
msgstr "REST Dataで自動生成されたリソースをPanacheで保護する"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:322
#, fuzzy
msgid "If you're using the REST Data with Panache extension to auto-generate your resources, you can still use the Security annotations within the package `javax.annotation.security`.  For more information, see xref:rest-data-panache.adoc#securing-endpoints[Securing auto-generated resources]."
msgstr "REST Data with Panache エクステンションを使用してリソースを自動生成している場合でも、パッケージ内の Security アノテーションを使用することができます `javax.annotation.security` .詳細については、 link:rest-data-panache.html#securing-endpoints[自動生成されたリソースの保護] を参照してください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:323
#, no-wrap
msgid "National Vulnerability Database"
msgstr "National Vulnerability Database"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:327
#, fuzzy
msgid "Most of the Quarkus tags are registered in the US link:https://nvd.nist.gov[National Vulnerability Database] (NVD) in Common Platform Enumeration (CPE) name format.  To view the registered Quarkus CPE names, use link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[this search query]."
msgstr "Quarkusのタグのほとんどは、CPE（Common Platform Enumeration）名の形式で、米国 link:https://nvd.nist.gov[国家脆弱性データベース] （NVD）に登録されています。登録されているQuarkusのCPE名を表示するには、 link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[この検索クエリを] 使用します。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:329
#, fuzzy
msgid "If the NVE database flags a CVE against a Quarkus tag, a link that provides more details about the CVE is added to the given CPE name entry."
msgstr "NVEデータベースがQuarkusタグに対してCVEフラグを立てた場合、そのCVEに関する詳細情報を提供するリンクが所定のCPE名エントリに追加されます。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:331
#, fuzzy
msgid "The NVD CPE team updates the list regularly, but if you encounter a false positive, report the details by creating an issue in the link:https://github.com/quarkusio/quarkus/issues/2611[quarkusio] repository."
msgstr "NVD CPEチームは定期的にリストを更新していますが、誤検出があった場合は、 link:https://github.com/quarkusio/quarkus/issues/2611[quarkusio] リポジトリにissueを作成して詳細を報告してください。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:333
#, fuzzy
msgid "You can detect the vulnerabilities at the application build time with an NVD feed by using the Maven link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency check plugin]."
msgstr "Maven link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency checkプラグイン] を使用することで、NVDフィードによるアプリケーションビルド時に脆弱性を検出することができます。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:336
#, fuzzy
msgid "To add the OWASP Dependency check plugin to your Quarkus Maven project, add the following XML configuration to the `pom.xml` file:"
msgstr "OWASP Dependency checkプラグインをQuarkus Mavenプロジェクトに追加するには、次のXML構成を `pom.xml` 。"

#. type: delimited block -
#: upstream/_guides/security-overview-concept.adoc:344
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.owasp</groupId>\n"
"    <artifactId>dependency-check-maven</artifactId>\n"
"    <version>${owasp-dependency-check-plugin.version}</version>\n"
"</plugin>\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-overview-concept.adoc:349
#, fuzzy
msgid "Set the `owasp-dependency-check-plugin.version` value to `7.4.4` or later."
msgstr " `owasp-dependency-check-plugin.version` の値を `7.1.1` 以降に設定してください。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:352
#, fuzzy
msgid "Next, configure the plugin as follows:"
msgstr "次に、以下のようにプラグインを設定します。"

#. type: delimited block -
#: upstream/_guides/security-overview-concept.adoc:367
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.owasp</groupId>\n"
"    <artifactId>dependency-check-maven</artifactId>\n"
"    <version>${owasp-dependency-check-plugin.version}</version>\n"
"    <configuration>\n"
"        <!-- Fail only when detecting High Vulnerability issues -->\n"
"        <failBuildOnCVSS>7</failBuildOnCVSS>\n"
"        <suppressionFiles>\n"
"            <suppressionFile>${project.basedir}/dependency-cpe-suppression.xml</suppressionFile>\n"
"        </suppressionFiles>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:370
#, fuzzy
msgid "To detect less severe issues, adjust the value of `failBuildOnCVSS` to suppress the false positives, as demonstrated in the following code sample:"
msgstr "あまり深刻でない問題を検出するには、次のコードサンプルで示すように、 `failBuildOnCVSS` の値を調整して誤検出を抑制してください。"

#. type: delimited block -
#: upstream/_guides/security-overview-concept.adoc:433
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<suppressions xmlns=\"https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.2.xsd\">\n"
"    <!--\n"
"        This is a CPE suppression file for the maven dependency check plugin.\n"
"        Each CPE that is found by error (false positive) needs to be suppressed for a specific jar using its' GAV.\n"
"        See https://jeremylong.github.io/DependencyCheck/general/suppression.html\n"
"     -->\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for netty-tcnative-classes to netty\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.netty:netty-tcnative-classes.*:.*$</gav>\n"
"        <cpe>cpe:/a:netty:netty</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Quarkus Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.quarkus:quarkus-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:smallrye-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:vertx-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for graal-sdk to GraalVM (the JVM distribution)\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^org\\.graalvm\\.sdk:g like this\n"
"    </suppress>\n"
"</suppressions>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:437
#, fuzzy
msgid "Ensure that you review and update the suppression list regularly to ensure that the results are up to date.  You can optionally apply a time limit to individual suppressions by adding an expiry attribute, as outlined in the following example:"
msgstr "抑制リストを定期的に見直し、更新して、結果が最新であることを確認してください。次の例に示すように、expiry属性を追加することによって、オプションで個々の抑制に時間制限を適用することができます。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:440
#, fuzzy
msgid "`<suppress until=\"2022-01-01Z\">...</suppress>` You can adjust the expiry date if you need to."
msgstr " `<suppress until=\"2022-01-01Z\">…​</suppress>` 必要であれば、有効期限を調整することができます。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:441
#, fuzzy, no-wrap
msgid "Quarkus Security testing"
msgstr "Quarkusのセキュリティテスト"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:444
#, fuzzy
msgid "When testing Quarkus security, ensure that your `IdentityProvider` is already set with usernames, passwords, and roles in `application.properties`.  For more information about testing Quarkus Security, see xref:security-testing.adoc#configuring-user-information[Configuring user information]."
msgstr "Quarkusのセキュリティをテストする場合、 `IdentityProvider` 、ユーザー名、パスワード、ロールが既に設定されていることを確認します。 `application.properties` 。Quarkusセキュリティのテストの詳細については、 link:security-testing.html#configuring-user-information[ユーザー情報の設定を] 参照してください。"
