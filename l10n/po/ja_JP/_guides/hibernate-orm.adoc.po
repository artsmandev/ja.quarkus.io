# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-04-14 17:20+0000\n"
"PO-Revision-Date: 2021-04-25 22:56+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/hibernate-orm.adoc:6
#, no-wrap
msgid "Quarkus - Using Hibernate ORM and JPA"
msgstr "Quarkus - Hibernate ORMとJPAの使用"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:13
msgid "Hibernate ORM is the de facto standard JPA implementation and offers you the full breadth of an Object Relational Mapper.  It works beautifully in Quarkus."
msgstr "Hibernate ORMは、デファクトスタンダートなJPA実装であり、オブジェクトリレーショナルマッパーの全幅を提供します。これはQuarkusで美しく動作します。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:14
#, no-wrap
msgid "Setting up and configuring Hibernate ORM"
msgstr "Hibernate ORMのセットアップと設定"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:17
msgid "When using Hibernate ORM in Quarkus, you don't need to have a `persistence.xml` resource to configure it."
msgstr "QuarkusでHibernate ORMを使用する場合は、 設定の為に `persistence.xml` リソースは必要ありません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:20
msgid "Using such a classic configuration file is an option, but unnecessary unless you have specific advanced needs; so we'll see first how Hibernate ORM can be configured without a `persistence.xml` resource."
msgstr "このような古典的な設定ファイルを使用することは選択肢として存在しますが、特定の高度なニーズがない限り不要です。そのため、まずはHibernate ORMを `persistence.xml` リソース無しで設定できることをみていきましょう。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:22
msgid "In Quarkus, you just need to:"
msgstr "Quarkusでは、以下を実施するだけです:"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:24
msgid "add your configuration settings in `{config-file}`"
msgstr "`{config-file}` に設定を追加します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:25
msgid "annotate your entities with `@Entity` and any other mapping annotation as usual"
msgstr "エンティティーに `@Entity` やその他のマッピングアノテーションを通常通りにアノテーションします。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:27
msgid "Other configuration needs have been automated: Quarkus will make some opinionated choices and educated guesses."
msgstr "その他の設定の必要性は自動化されています。Quarkusは、いくつかの定見に基づいた選択と経験に基づいた推測を行います。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:29
msgid "Add the following dependencies to your project:"
msgstr "以下の依存関係をプロジェクトに追加してください:"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:31
msgid "the Hibernate ORM extension: `io.quarkus:quarkus-hibernate-orm`"
msgstr "Hibernate ORM エクステンション: `io.quarkus:quarkus-hibernate-orm`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:32
msgid "your JDBC driver extension; the following options are available:"
msgstr "JDBC ドライバーエクステンション。以下のオプションを使用できます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:33
msgid "`quarkus-jdbc-db2` for link:https://www.ibm.com/products/db2-database[IBM DB2]"
msgstr "link:https://www.ibm.com/products/db2-database[IBM DB2の] ための `quarkus-jdbc-db2`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:34
msgid "`quarkus-jdbc-derby` for link:https://db.apache.org/derby/[Apache Derby]"
msgstr "link:https://db.apache.org/derby/[アパッチダービー] のための `quarkus-jdbc-derby`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:35
msgid "`quarkus-jdbc-h2` for link:https://www.h2database.com/html/main.html[H2]"
msgstr "link:https://www.h2database.com/html/main.html[H2] のための `quarkus-jdbc-h2`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:36
msgid "`quarkus-jdbc-mariadb` for link:https://mariadb.com/[MariaDB]"
msgstr "link:https://mariadb.com/[MariaDB] のための `quarkus-jdbc-mariadb`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:37
msgid "`quarkus-jdbc-mssql` for link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server]"
msgstr "link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server] のための `quarkus-jdbc-mssql`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:38
msgid "`quarkus-jdbc-mysql` for link:https://www.mysql.com/[MySQL]"
msgstr "link:https://www.mysql.com/[MySQL] のための `quarkus-jdbc-mysql`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:39
msgid "`quarkus-jdbc-oracle` for link:https://www.oracle.com/database/[Oracle Database]"
msgstr "link:https://www.oracle.com/database/[Oracle Database] のための `quarkus-jdbc-oracle`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:40
msgid "`quarkus-jdbc-postgresql` for link:https://www.postgresql.org/[PostgreSQL]"
msgstr "link:https://www.postgresql.org/[PostgreSQL] のための `quarkus-jdbc-postgresql`"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:43
#, no-wrap
msgid "Example dependencies using Maven"
msgstr "Mavenを使った依存関係の例"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:51
#, no-wrap
msgid ""
"<dependencies>\n"
"    <!-- Hibernate ORM specific dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-hibernate-orm</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:58
#, no-wrap
msgid ""
"    <!-- JDBC driver dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""
"    <!-- JDBC driver dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:62
msgid "Annotate your persistent objects with `@Entity`, then add the relevant configuration properties in `{config-file}`."
msgstr "persistent オブジェクトに`@Entity` アノテーションを付けてから、 `{config-file}` で関連する設定プロパティーを追加します。"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:64
#, no-wrap
msgid "Example `{config-file}`"
msgstr "例 `{config-file}`"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:71
#, no-wrap
msgid ""
"# datasource configuration\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = hibernate\n"
"quarkus.datasource.password = hibernate\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/hibernate_db\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:74
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:78
#, fuzzy
msgid "Note that these configuration properties are not the same ones as in your typical Hibernate ORM configuration file.  They will often map to Hibernate ORM configuration properties but could have different names and don't necessarily map 1:1 to each other."
msgstr "これらの設定プロパティーは、通常のHibernate ORM設定ファイルと同じものではないことに注意してください。これらはしばしばHibernate ORMの設定プロパティーにマップされますが、異なる名前を持つ可能性があり、必ずしもお互いに1:1でマップされるとは限りません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:80
#, fuzzy
msgid "Also, Quarkus will set many Hibernate ORM configuration settings automatically, and will often use more modern defaults."
msgstr "また、Quarkusは多くのHibernate ORM設定を自動的に設定します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:82
#, fuzzy
msgid "Please see below section <<hibernate-configuration-properties, Hibernate ORM configuration properties>> for the list of properties you can set in `{config-file}`."
msgstr "`{config-file}` で設定できるプロパティーのリストは、以下の link:#hibernate-configuration-properties[Hibernate ORM 設定プロパティーの] セクションを参照してください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:84
#, fuzzy
msgid "An `EntityManagerFactory` will be created based on the Quarkus `datasource` configuration as long as the Hibernate ORM extension is listed among your project dependencies."
msgstr "プロジェクトの依存関係の中にHibernate ORMエクステンションがリストされている限り、Quarkus `datasource` の設定に基づいて `EntityManagerFactory` が作成されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:86
#, fuzzy
msgid "The dialect will be selected based on the JDBC driver - unless you set one explicitly."
msgstr "方言は、明示的に設定しない限り、JDBC ドライバーに基づいて選択されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:88
#, fuzzy
msgid "You can then happily inject your `EntityManager`:"
msgstr "その後、あなたは喜んであなたの `EntityManager` ."

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:90
#, no-wrap
msgid "Example application bean using Hibernate"
msgstr "Hibernateを使用したアプリケーションBeanの例"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:96
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SantaClausService {\n"
"    @Inject\n"
"    EntityManager em; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:104
#, no-wrap
msgid ""
"    @Transactional <2>\n"
"    public void createGift(String giftDescription) {\n"
"        Gift gift = new Gift();\n"
"        gift.setName(giftDescription);\n"
"        em.persist(gift);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:107
msgid "Inject your entity manager and have fun"
msgstr "エンティティーマネージャーを注入して楽しむ"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:108
#, fuzzy
msgid "Mark your CDI bean method as `@Transactional` and the `EntityManager` will enlist and flush at commit."
msgstr "CDI Beanメソッドを `@Transactional` としてマークし、 `EntityManager` はコミット時にエンリストしてフラッシュします。"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:110
#, no-wrap
msgid "Example Entity"
msgstr "エンティティーの例"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:116
#, no-wrap
msgid ""
"@Entity\n"
"public class Gift {\n"
"    private Long id;\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:123
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(name = \"giftSeq\", sequenceName = \"gift_id_seq\", allocationSize = 1, initialValue = 1)\n"
"    @GeneratedValue(generator = \"giftSeq\")\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:127
#, no-wrap
msgid ""
"    public void setId(Long id) {\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:131
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:136
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:141
msgid "To load SQL statements when Hibernate ORM starts, add an `import.sql` file to the root of your resources directory.  This script can contain any SQL DML statements.  Make sure to terminate each statement with a semicolon."
msgstr "Hibernate ORMの起動時にSQL文をロードするには、 `import.sql` ファイルをresourcesディレクトリーのルートに追加します。このスクリプトには、任意のSQL DML文を含めることができます。各ステートメントは必ずセミコロンで終了させてください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:143
msgid "This is useful to have a data set ready for your tests or demos."
msgstr "テストやデモ用のデータセットを用意しておくと便利です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:147
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr "データベースを変更するメソッド (例: `entity.persist()` ) をトランザクション内でラップするようにしてください。CDI Beanメソッド `@Transactional` をマークすることで、それを実現出来、そのメソッドをトランザクションの境界に出来ます。REST エンドポイントコントローラーのように、アプリケーションのエントリーポイントの境界でこれを行うことをお勧めします。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:149
#, no-wrap
msgid "Hibernate ORM configuration properties"
msgstr "Hibernate ORMの設定プロパティー"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:152
#, fuzzy
msgid "There are various optional properties useful to refine your `EntityManagerFactory` or guide guesses of Quarkus."
msgstr "あなたの `EntityManagerFactory` やQuarkusのガイド推測を洗練させるのに便利な様々なオプションのプロパティーがあります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:154
#, fuzzy
msgid "There are no required properties, as long as a default datasource is configured."
msgstr "デフォルトのデータソースが設定されている限り、必須のプロパティーはありません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:157
#, fuzzy
msgid "When no property is set, Quarkus can typically infer everything it needs to setup Hibernate ORM and will have it use the default datasource."
msgstr "プロパティーが設定されていない場合、Quarkusは通常、Hibernate ORMのセットアップに必要なすべてを推論し、デフォルトのデータソースを使用させます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:159
msgid "The configuration properties listed here allow you to override such defaults, and customize and tune various aspects."
msgstr "ここに記載されている設定プロパティーでは、このようなデフォルトを上書きしたり、様々な面をカスタマイズしたり調整したりすることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:167
#, fuzzy
msgid "Do not mix `persistence.xml` and `quarkus.hibernate-orm.*` properties in `{config-file}`.  Quarkus will raise an exception.  Make up your mind on which approach you want to use."
msgstr "`{config-file}` で `persistence.xml` と `quarkus.hibernate-orm.*` のプロパティーを混在させないでください。Quarkusは例外を発生させます。どちらのアプローチを使用するかを決めてください。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:172
#, fuzzy
msgid "Want to start a PostgreSQL server on the side with Docker?"
msgstr "DockerでPostgreSQLサーバーをサイドで立ち上げてみませんか?"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:178
#, no-wrap
msgid ""
"docker run --rm=true --name postgres-quarkus-hibernate -e POSTGRES_USER=hibernate \\\n"
"           -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=hibernate_db \\\n"
"           -p 5432:5432 postgres:13.1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:181
msgid "This will start a non-durable empty database: ideal for a quick experiment!"
msgstr "これは、永続化されない空のデータベースを起動します。簡単な実験に最適です!"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:184
#, no-wrap
msgid "Multiple persistence units"
msgstr "複数の永続性ユニット"

#. type: Title ====
#: upstream/_guides/hibernate-orm.adoc:186
#, no-wrap
msgid "Setting up multiple persistence units"
msgstr "複数の永続化ユニットの設定"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:189
msgid "It is possible to define multiple persistence units using the Quarkus configuration properties."
msgstr "Quarkusの設定プロパティーを使用して、複数の永続化ユニットを定義することができます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:192
#, fuzzy
msgid "The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.  For instance, the following snippet defines a default datasource and a default persistence unit:"
msgstr "`quarkus.hibernate-orm.` ネームスペースのルートにあるプロパティーは、既定の永続化ユニットを定義します。たとえば、次のスニペットは、既定のデータソースと既定の永続化ユニットを定義します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:197
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=h2\n"
"quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:200
#, no-wrap
msgid ""
"quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:203
#, fuzzy
msgid "Using a map based approach, it is possible to define named persistence units:"
msgstr "マップベースのアプローチを使用して、名前付き永続化ユニットを定義することができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:208
#, no-wrap
msgid ""
"quarkus.datasource.\"users\".db-kind=h2 <1>\n"
"quarkus.datasource.\"users\".jdbc.url=jdbc:h2:mem:users;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:211
#, no-wrap
msgid ""
"quarkus.datasource.\"inventory\".db-kind=h2 <2>\n"
"quarkus.datasource.\"inventory\".jdbc.url=jdbc:h2:mem:inventory;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:215
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"users\".database.generation=drop-and-create <3>\n"
"quarkus.hibernate-orm.\"users\".datasource=users <4>\n"
"quarkus.hibernate-orm.\"users\".packages=org.acme.model.user <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:219
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"inventory\".database.generation=drop-and-create <6>\n"
"quarkus.hibernate-orm.\"inventory\".datasource=inventory\n"
"quarkus.hibernate-orm.\"inventory\".packages=org.acme.model.inventory\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:221
msgid "Define a datasource named `users`."
msgstr "`users` という名前のデータソースを定義します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:222
msgid "Define a datasource named `inventory`."
msgstr "`inventory` という名前のデータソースを定義します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:223
msgid "Define a persistence unit called `users`."
msgstr "`users` という永続化ユニットを定義します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:224
msgid "Define the datasource used by the persistence unit."
msgstr "永続性ユニットが使用するデータソースを定義します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:225
msgid "This configuration property is important but we will discuss it a bit later."
msgstr "この設定プロパティーは重要ですが、後ほど少し説明します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:226
#, fuzzy
msgid "Define a persistence unit called `inventory` pointing to the `inventory` datasource."
msgstr "`inventory` データソースを指す `inventory` という永続化ユニットを定義します。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:230
#, fuzzy
msgid "You can mix the default datasource and named datasources or only have one or the other."
msgstr "デフォルトのデータソースと名前付きのデータソースを混在させたり、どちらか一方だけにしたり、もう一方だけにしたりすることができます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:238
#, fuzzy
msgid "The default persistence unit points to the default datasource by default.  For named persistence units, the `datasource` property is mandatory.  You can point your persistence unit to the default datasource by setting it to `<default>` (which is the internal name of the default datasource)."
msgstr "デフォルトの永続化ユニットは、デフォルトではデフォルトのデータソースを指します。名前付き永続化ユニットの場合、 `datasource` プロパティーは必須です。パーシスタンス・ユニットを `<default>` (デフォルト・データソースの内部名)に設定することで、デフォルト・データソースを指すようにすることができます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:240
#, fuzzy
msgid "It is perfectly valid to have several persistence units pointing to the same datasource."
msgstr "同じデータソースを指す複数の永続化ユニットを持つことは完全に有効です。"

#. type: Title ====
#: upstream/_guides/hibernate-orm.adoc:243
#, no-wrap
msgid "Attaching model classes to persistence units"
msgstr "モデルクラスを永続化ユニットにアタッチする"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:246
msgid "There are two ways to attach model classes to persistence units, and they should not be mixed:"
msgstr "モデルクラスを永続化ユニットにアタッチする方法は2つあり、混在してはいけません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:248
msgid "Via the `packages` configuration property;"
msgstr "`packages` 設定プロパティーを使用します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:249
#, fuzzy
msgid "Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation."
msgstr "`@io.quarkus.hibernate.orm.PersistenceUnit` パッケージレベルのアノテーションを経由しています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:251
#, fuzzy
msgid "If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account."
msgstr "両方が混在している場合は、アノテーションは無視され、 `packages` 設定プロパティーのみが考慮されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:253
#, fuzzy
msgid "Using the `packages` configuration property is simple:"
msgstr "`packages` 設定プロパティーを使うのは簡単です。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:258
#, no-wrap
msgid ""
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
"quarkus.hibernate-orm.packages=org.acme.model.defaultpu\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:262
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"users\".database.generation=drop-and-create\n"
"quarkus.hibernate-orm.\"users\".datasource=users\n"
"quarkus.hibernate-orm.\"users\".packages=org.acme.model.user\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:265
msgid "This configuration snippet will create two persistence units:"
msgstr "この設定スニペットは、2つの永続化ユニットを作成します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:267
#, fuzzy
msgid "The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included."
msgstr "`org.acme.model.defaultpu` パッケージの下にあるすべてのモデルクラスを含むデフォルトのもので、サブパッケージも含まれます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:268
#, fuzzy
msgid "A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included."
msgstr "`users` という名前の永続化ユニットで、 `org.acme.model.user` パッケージの下にあるすべてのモデルクラスを含み、サブパッケージも含まれます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:270
#, fuzzy
msgid "You can attach several packages to a persistence unit:"
msgstr "永続性ユニットに複数のパッケージをアタッチすることができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:274
#, no-wrap
msgid "quarkus.hibernate-orm.\"users\".packages=org.acme.model.shared,org.acme.model.user\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:277
#, fuzzy
msgid "All the model classes under the `org.acme.model.shared` and `org.acme.model.user` packages will be attached to the `users` persistence unit."
msgstr "`org.acme.model.shared` と `org.acme.model.user` パッケージの下のすべてのモデルクラスは、 `users` 永続性ユニットに添付されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:279
#, fuzzy
msgid "It is also supported to attach a given model class to several persistence units."
msgstr "また、与えられたモデルクラスを複数の永続化ユニットにアタッチすることもサポートされています。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:285
#, fuzzy
msgid "Model classes need to be consistently added to a given persistence unit.  That meant that all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.  As we are dealing with the persistence unit at the package level, it should be simple enough."
msgstr "モデル・クラスは、与えられた永続化ユニットに一貫して追加される必要があります。つまり、あるエンティティーのすべての依存モデルクラス(マッピングされたスーパークラス、エンベッダブル...)を永続化ユニットに追加する必要があるということです。パッケージレベルで永続化ユニットを扱っているので、それは十分にシンプルなものになるはずです。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:290
msgid "Panache entities can be attached to only one persistence unit."
msgstr "Panacheエンティティーは、1つの永続化ユニットにのみアタッチできます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:293
#, fuzzy
msgid "For entities attached to several persistence units, you cannot use Panache.  You can mix the two approaches though and mix Panache entities and traditional entities where multiple persistence units are required."
msgstr "複数の永続化ユニットにアタッチされたエンティティーの場合、Panacheを使用することはできません。しかし、複数の永続化ユニットが必要な場合は、Panacheエンティティーと従来のエンティティーを混在させることができます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:296
#, fuzzy
msgid "If you have a use case for that and clever ideas about how to implement it without cluttering the simplified Panache approach, contact us on the link:{quarkus-mailing-list-index}[quarkus-dev mailing list]."
msgstr "もし、そのためのユースケースや、簡素化された Panache アプローチを乱雑にせずに実装する方法についての賢いアイデアがあれば、 link:{quarkus-mailing-list-index}[quarkus-dev メーリングリスト] に連絡してください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:300
#, fuzzy
msgid "The second approach to attach model classes to a persistence unit is to use package-level `@io.quarkus.hibernate.orm.PersistenceUnit` annotations.  Again, the two approaches cannot be mixed."
msgstr "モデルクラスを永続化ユニットにアタッチする2つ目のアプローチは、パッケージレベルの `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用することです。ここでも、この2つのアプローチを混在させることはできません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:302
#, fuzzy
msgid "To obtain a configuration similar to the one above with the `packages` configuration property, create a `package-info.java` file with the following content:"
msgstr "`packages` 設定プロパティーで上記と同様の設定を取得するには、以下の内容の `package-info.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:307
#, no-wrap
msgid ""
"@PersistenceUnit(\"users\") <1>\n"
"package org.acme.model.user;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:309
#, no-wrap
msgid "import io.quarkus.hibernate.orm.PersistenceUnit;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:311
#, fuzzy
msgid "Be careful, use the `@io.quarkus.hibernate.orm.PersistenceUnit` annotation, not the JPA one."
msgstr "注意してほしいのは、JPAのアノテーションではなく、 `@io.quarkus.hibernate.orm.PersistenceUnit` のアノテーションを使うことです。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:316
#, fuzzy
msgid "We only support defining the `@PersistenceUnit` for model classes at the package level, using the `@PersistenceUnit` annotation at the class level is not supported in this case."
msgstr "モデルクラスの `@PersistenceUnit` の定義はパッケージレベルでのみサポートしており、クラスレベルでの `@PersistenceUnit` アノテーションの使用はこの場合サポートされていません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:319
#, fuzzy
msgid "Note that, similarly to what we do with the configuration property, we take into account the annotated package but also all its subpackages."
msgstr "設定プロパティーで行うのと同様に、注釈付きパッケージだけでなく、そのすべてのサブパッケージも考慮に入れていることに注意してください。"

#. type: Title ====
#: upstream/_guides/hibernate-orm.adoc:320
#, no-wrap
msgid "CDI integration"
msgstr "CDI統合"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:323
#, fuzzy
msgid "If you are familiar with using Hibernate ORM in Quarkus, you probably already have injected the `EntityManager` using CDI:"
msgstr "QuarkusでHibernate ORMを使い慣れている方は、CDIを使って `EntityManager` を注入したことがあるのではないでしょうか。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:328
#, no-wrap
msgid ""
"@Inject\n"
"EntityManager entityManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:331
msgid "This will inject the `EntityManager` of the default persistence unit."
msgstr "これは、デフォルトの永続化ユニットの `EntityManager` を注入します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:333
#, fuzzy
msgid "Injecting the `EntityManager` of a named persistence unit (`users` in our example) is as simple as:"
msgstr "名前付き永続化ユニット(この例では `users` )の `EntityManager` を注入するのは簡単です。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:339
#, no-wrap
msgid ""
"@Inject\n"
"@PersistenceUnit(\"users\") <1>\n"
"EntityManager entityManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:341
#, fuzzy
msgid "Here again, we use the same `@io.quarkus.hibernate.orm.PersistenceUnit` annotation."
msgstr "ここでも、同じ `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用しています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:343
#, fuzzy
msgid "You can inject the `EntityManagerFactory` of a named persistence unit using the exact same mechanism:"
msgstr "全く同じメカニズムを使って、名前付き永続化ユニットの `EntityManagerFactory` を注入することができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:349
#, no-wrap
msgid ""
"@Inject\n"
"@PersistenceUnit(\"users\")\n"
"EntityManagerFactory entityManagerFactory;\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:351
#, fuzzy, no-wrap
msgid "Setting up and configuring Hibernate ORM with a `persistence.xml`"
msgstr "でのHibernate ORMの設定と設定 `persistence.xml`"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:355
#, fuzzy
msgid "Alternatively, you can use a `META-INF/persistence.xml` to set up Hibernate ORM.  This is useful for:"
msgstr "あるいは、 `META-INF/persistence.xml` で Hibernate ORM を設定することもできます。に便利です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:357
msgid "migrating existing code"
msgstr "既存コードの移行"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:358
#, fuzzy
msgid "when you have relatively complex settings requiring the full flexibility of the configuration"
msgstr "比較的複雑な設定で、設定の柔軟性を完全に必要とする場合には"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:359
#, fuzzy
msgid "or if you like it the good old way"
msgstr "それとも古き良き方法がお好きなら"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:364
#, fuzzy
msgid "If you have a `persistence.xml`, then you cannot use the `quarkus.hibernate-orm.*` properties and only persistence units defined in `persistence.xml` will be taken into account."
msgstr "`persistence.xml` を持っている場合、 `quarkus.hibernate-orm.*` プロパティーは使用できず、 `persistence.xml` で定義された永続化ユニットのみが考慮されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:368
#, fuzzy
msgid "Your `pom.xml` dependencies as well as your Java code would be identical to the precedent example. The only difference is that you would specify your Hibernate ORM configuration in `META-INF/persistence.xml`:"
msgstr "`pom.xml` の依存関係や Java コードは前例と同じです。唯一の違いは、 `META-INF/persistence.xml` で Hibernate ORM の設定を指定することです。"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:370
#, fuzzy, no-wrap
msgid "Example persistence.xml resource"
msgstr "persistence.xmlリソースの例"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:377
#, no-wrap
msgid ""
"<persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n"
"             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"             xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n"
"             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\n"
"             version=\"2.1\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:379
#, no-wrap
msgid "    <persistence-unit name=\"CustomerPU\" transaction-type=\"JTA\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:381
#, no-wrap
msgid "        <description>My customer entities</description>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:385
#, no-wrap
msgid ""
"        <properties>\n"
"            <!-- Connection specific -->\n"
"            <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.PostgreSQL95Dialect\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:388
#, no-wrap
msgid ""
"            <property name=\"hibernate.show_sql\" value=\"true\"/>\n"
"            <property name=\"hibernate.format_sql\" value=\"true\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:394
#, no-wrap
msgid ""
"            <!--\n"
"                Optimistically create the tables;\n"
"                will cause background errors being logged if they already exist,\n"
"                but is practical to retain existing data across runs (or create as needed) -->\n"
"            <property name=\"javax.persistence.schema-generation.database.action\" value=\"drop-and-create\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:397
#, no-wrap
msgid ""
"            <property name=\"javax.persistence.validation.mode\" value=\"NONE\"/>\n"
"        </properties>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:400
#, no-wrap
msgid ""
"    </persistence-unit>\n"
"</persistence>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:404
#, fuzzy
msgid "When using the `persistence.xml` configuration you are configuring Hibernate ORM directly, so in this case the appropriate reference is the link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#configurations[documentation on hibernate.org]."
msgstr "`persistence.xml` の設定を使用する場合、Hibernate ORM を直接設定しているので、この場合の適切な参照先は link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#configurations[hibernate.org のドキュメント] です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:407
#, fuzzy
msgid "Please remember these are not the same property names as the ones used in the Quarkus `{config-file}`, nor will the same defaults be applied."
msgstr "これらは、Quarkusで使用されているものと同じプロパティー名ではないことを覚えておいてください `{config-file}` , また、同じデフォルトが適用されることもありません。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:408
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:412
msgid "Hibernate ORM in Quarkus relies on compile-time bytecode enhancements to your entities. If you define your entities in the same project where you build your Quarkus application, everything will work fine."
msgstr "QuarkusのHibernate ORMは、エンティティーに対するコンパイル時のバイトコード強化に依存しています。Quarkusアプリケーションを構築するのと同じプロジェクトでエンティティーを定義すれば、すべてがうまく動作します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:415
msgid "If the entities come from external projects or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr "エンティティーが外部のプロジェクトやジャーから来ている場合は、空の `META-INF/beans.xml` ファイルを追加することで、jarがQuarkusアプリケーションライブラリのように扱われるようにすることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:417
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr "これにより、Quarkusは、エンティティーが現在のプロジェクトの内部にあるかのようにインデックスを作成し、強化することができます。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:419
#, no-wrap
msgid "Hibernate ORM in development mode"
msgstr "開発モードでのHibernate ORM"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:422
#, fuzzy
msgid "Quarkus development mode is really useful for applications that mix front end or services and database access."
msgstr "Quarkusの開発モードは、フロントエンドやサービスとデータベースアクセスが混在するアプリケーションに本当に便利です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:424
#, fuzzy
msgid "There are a few common approaches to make the best of it."
msgstr "それを最大限に活かすためには、いくつかの一般的なアプローチがあります。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:426
#, fuzzy
msgid "The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`."
msgstr "最初の選択は、 `quarkus.hibernate-orm.database.generation=drop-and-create` と連携して `import.sql` ."

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:431
#, fuzzy
msgid "That way for every change to your app and in particular to your entities, the database schema will be properly recreated and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.  This is best to perfectly control your environment and works magic with Quarkus live reload mode: your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr "このようにして、アプリ、特にエンティティーに変更があるたびに、データベーススキーマが適切に再作成され、データフィクスチャ( `import.sql` に格納されている)が使用されて、ゼロから再配置されます。これは、環境を完全にコントロールするのに最適で、Quarkusのライブリロードモードで魔法のように機能します。エンティティーの変更や `import.sql` への変更は、アプリケーションを再起動することなくすぐにピックアップされ、スキーマが更新されます。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:436
#, fuzzy
msgid "By default in `dev` and `test` modes, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).  You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr "デフォルトでは、 `dev` と `test` モードでは、Hibernate ORM は起動時に `/import.sql` ファイル内の SQL 文を読み込んで実行します (存在する場合)。 `application.properties` のプロパティー `quarkus.hibernate-orm.sql-load-script` を変更することで、ファイル名を変更することができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:446
#, fuzzy
msgid "The second approach is to use `quarkus.hibernate-orm.database.generation=update`.  This approach is best when you do many entity changes but still need to work on a copy of the production data or if you want to reproduce a bug that is based on specific database entries.  `update` is a best effort from Hibernate ORM and will fail in specific situations including altering your database structure which could lead to data loss.  For example if you change structures which violate a foreign key constraint, Hibernate ORM might have to bail out.  But for development, these limitations are acceptable."
msgstr "2つ目の方法は、 `quarkus.hibernate-orm.database.generation=update` を使用することです。 `update` は、Hibernate ORM の最善の努力ですが、データベース構造を変更してデータの損失につながる可能性があるなど、特定の状況では失敗します。例えば、外部キー制約に違反した構造を変更した場合、Hibernate ORMは救済しなければならないかもしれません。しかし、開発のためには、これらの制限は許容できるものです。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:450
#, fuzzy
msgid "The third approach is to use `quarkus.hibernate-orm.database.generation=none`.  This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.  Or if you use a database schema migration tool like link:flyway[Flyway]."
msgstr "3つ目のアプローチは `quarkus.hibernate-orm.database.generation=none` を使用することです。このアプローチは、本番データのコピーで作業しているが、スキーマの進化を完全に制御したい場合に最適です。または、 link:https://quarkus.io/guides/flyway[Flyway] のようなデータベーススキーマ移行ツールを使用する場合。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:453
#, fuzzy
msgid "With this approach when making changes to an entity, make sure to adapt the database schema accordingly; you could also use `validate` to have Hibernate verify the schema matches its expectations."
msgstr "また、 `validate` を使用して、Hibernate にスキーマが期待しているものと一致しているかどうかを検証させることもできます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:455
#, fuzzy
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment."
msgstr "本番環境では、 `quarkus.hibernate-orm.database.generation` `drop-and-create` 、 `update` を使用しないでください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:461
#, fuzzy
msgid "These approaches become really powerful when combined with Quarkus configuration profiles.  You can define different link:config#configuration-profiles[configuration profiles] to select different behaviors depending on your environment.  This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr "これらのアプローチは、Quarkusの設定プロファイルと組み合わせると非常に強力になります。異なる link:https://quarkus.io/guides/config#configuration-profiles[設定プロファイル] を定義して、環境に応じて異なる動作を選択することができます。現在必要としている開発スタイルに合ったHibernate ORMプロパティーのさまざまな組み合わせを定義できるので、これは素晴らしいことです。"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:463
#: upstream/_guides/hibernate-orm.adoc:498
#, no-wrap
msgid "application.properties"
msgstr "application.properties"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:467
#, no-wrap
msgid ""
"%dev.quarkus.hibernate-orm.database.generation = drop-and-create\n"
"%dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:470
#, no-wrap
msgid ""
"%dev-with-data.quarkus.hibernate-orm.database.generation = update\n"
"%dev-with-data.quarkus.hibernate-orm.sql-load-script = no-file\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:473
#: upstream/_guides/hibernate-orm.adoc:502
#, no-wrap
msgid ""
"%prod.quarkus.hibernate-orm.database.generation = none\n"
"%prod.quarkus.hibernate-orm.sql-load-script = no-file\n"
msgstr ""

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:476
#, fuzzy, no-wrap
msgid "Start \"dev mode\" using a custom profile via Maven"
msgstr "Maven経由でカスタムプロファイルを使用して\"devモード\"を開始する"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:479
#, no-wrap
msgid "./mvnw compile quarkus:dev -Dquarkus.profile=dev-with-data\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:481
#, no-wrap
msgid "Hibernate ORM in production mode"
msgstr "本番モードでのHibernate ORM"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:485
msgid "Quarkus comes with default profiles (`dev`, `test` and `prod`).  And you can add your own custom profiles to describe various environments (`staging`, `prod-us`, etc)."
msgstr "Quarkusにはデフォルトのプロファイルが付属しています ( `dev` , `test` と `prod` )。また、様々な環境を記述するために独自のカスタムプロファイルを追加することができます ( `staging` , `prod-us` , など )。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:487
msgid "The Hibernate ORM Quarkus extension sets some default configurations differently in dev and test modes than in other environments."
msgstr "Hibernate ORM Quarkusエクステンションでは、いくつかのデフォルト設定が、開発モードとテストモードで他の環境とは異なるように設定されています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:489
msgid "`quarkus.hibernate-orm.sql-load-script` is set to `no-file` for all profiles except the `dev` and `test` ones."
msgstr "`dev` と `test` 以外のプロフィールは `quarkus.hibernate-orm.sql-load-script` が `no-file` に設定されています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:493
msgid "You can override it in your `application.properties` explicitly (e.g. `%prod.quarkus.hibernate-orm.sql-load-script = import.sql`)  but we wanted you to avoid overriding your database by accident in prod :)"
msgstr "ユーザーが `application.properties` で明示的にオーバーライドすることもできますが (例: `%prod.quarkus.hibernate-orm.sql-load-script = import.sql` )、prod で誤ってデータベースをオーバーライドしないようにしたいと思いました :)"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:496
msgid "Speaking of, make sure to not drop your database schema in production! Add the following in your properties file."
msgstr "そういえば、本番ではデータベーススキーマを落とさないようにしましょう!プロパティーファイルに以下を追加します。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:505
#, no-wrap
msgid "Caching"
msgstr "キャッシング"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:508
#, fuzzy
msgid "Applications that frequently read the same entities can see their performance improved when the Hibernate ORM second-level cache is enabled."
msgstr "同じエンティティーを頻繁に読むアプリケーションは、Hibernate ORMの第2レベルキャッシュを有効にすると、パフォーマンスが向上することがわかります。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:509
#, no-wrap
msgid "Caching of entities"
msgstr "エンティティーのキャッシュ"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:512
msgid "To enable second-level cache, mark the entities that you want cached with `@javax.persistence.Cacheable`:"
msgstr "第 2 レベルのキャッシュを有効にするには、キャッシュしたいエンティティーを `@javax.persistence.Cacheable` でマークします。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:521
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Country {\n"
"    int dialInCode;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:524
msgid "When an entity is annotated with `@Cacheable`, all its field values are cached except for collections and relations to other entities."
msgstr "エンティティーが `@Cacheable` でアノテーションされているときは、コレクションと他のエンティティーとの関係を除いて、そのすべてのフィールド値がキャッシュされます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:526
#, fuzzy
msgid "This means the entity can be loaded without querying the database, but be careful as it implies the loaded entity might not reflect recent changes in the database."
msgstr "これは、データベースを照会せずにエンティティーをロードできることを意味しますが、ロードされたエンティティーがデータベースの最近の変更を反映していない可能性があることを示唆しているので注意が必要です。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:527
#, no-wrap
msgid "Caching of collections and relations"
msgstr "コレクションとリレーションのキャッシング"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:530
#, fuzzy
msgid "Collections and relations need to be individually annotated to be cached; in this case the Hibernate specific `@org.hibernate.annotations.Cache` should be used, which requires also to specify the `CacheConcurrencyStrategy`:"
msgstr "この場合、Hibernate固有の `@org.hibernate.annotations.Cache` を使用する必要がありますが、これには `CacheConcurrencyStrategy` ."

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:534
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:539
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Country {\n"
"    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:543
#, no-wrap
msgid ""
"    @OneToMany\n"
"    @Cache(usage = CacheConcurrencyStrategy.READ_ONLY)\n"
"    List<City> cities;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:546
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:548
#, no-wrap
msgid "Caching of queries"
msgstr "クエリのキャッシュ"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:551
msgid "Queries can also benefit from second-level caching. Cached query results can be returned immediately to the caller, avoiding to run the query on the database."
msgstr "クエリは、第二レベルのキャッシュの恩恵を受けることもできます。キャッシュされたクエリの結果は即座に呼び出し元に返すことができるので、データベース上でクエリを実行する必要がありません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:553
msgid "Be careful as this implies the results might not reflect recent changes."
msgstr "最近の変化を反映していない可能性があることを含意しているので注意が必要です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:555
msgid "To cache a query, mark it as cacheable on the `Query` instance:"
msgstr "クエリをキャッシュするには、 `Query` インスタンス上でキャッシュ可能なものとしてマークします。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:560
#, no-wrap
msgid ""
"Query query = ...\n"
"query.setHint(\"org.hibernate.cacheable\", Boolean.TRUE);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:563
#, fuzzy
msgid "If you have a `NamedQuery` then you can enable caching directly on its definition, which will usually be on an entity:"
msgstr "`NamedQuery` を持っている場合は、その定義に対して直接キャッシングを有効にすることができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:572
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQuery(name = \"Fruits.findAll\",\n"
"      query = \"SELECT f FROM Fruit f ORDER BY f.name\",\n"
"      hints = @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\") )\n"
"public class Fruit {\n"
"   ...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:575
#, fuzzy
msgid "That's all! Caching technology is already integrated and enabled by default in Quarkus, so it's enough to set which ones are safe to be cached."
msgstr "以上です。キャッシング技術はQuarkusではすでに統合されており、デフォルトで有効になっているので、どれが安全にキャッシュされるかを設定するだけで十分です。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:576
#, no-wrap
msgid "Tuning of Cache Regions"
msgstr "キャッシュ領域の調整"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:579
#, fuzzy
msgid "Caches store the data in separate regions to isolate different portions of data; such regions are assigned a name, which is useful for configuring each region independently, or to monitor their statistics."
msgstr "キャッシュは、データの異なる部分を分離するためにデータを別々の領域に保存します。そのような領域には名前が割り当てられており、各領域を独立して設定したり、統計情報を監視したりするのに便利です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:581
#, fuzzy
msgid "By default entities are cached in regions named after their fully qualified name, e.g. `org.acme.Country`."
msgstr "`org.acme.Country` デフォルトでは、エンティティーは完全修飾名にちなんだリージョンにキャッシュされます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:583
#, fuzzy
msgid "Collections are cached in regions named after the fully qualified name of their owner entity and collection field name, separated by `#` character, e.g. `org.acme.Country#cities`."
msgstr "`org.acme.Country#cities` コレクションは、所有者のエンティティーの完全修飾名とコレクションフィールド名を `#` 文字で区切って名付けられたリージョンにキャッシュされます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:585
#, fuzzy
msgid "All cached queries are by default kept in a single region dedicated to them called `default-query-results-region`."
msgstr "すべてのキャッシュされたクエリは、デフォルトでは `default-query-results-region` と呼ばれる専用の単一のリージョンに保持されます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:587
#, fuzzy
msgid "All regions are bounded by size and time by default. The defaults are `10000` max entries, and `100` seconds as maximum idle time."
msgstr "すべてのリージョンは、デフォルトではサイズと時間に縛られています。デフォルトは `10000` の最大エントリー数と `100` の最大アイドル時間の秒数です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:589
#, fuzzy
msgid "The size of each region can be customized via the `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` property (Replace _<region_name>_ with the actual region name)."
msgstr "各リージョンのサイズは `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` プロパティーでカスタマイズできます( _<region_name>を_ 実際のリージョン名 _に_ 置き換えてください)。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:591
#, fuzzy
msgid "To set the maximum idle time, provide the duration (see note on duration's format below) via the `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` property (Replace _<region_name>_ with the actual region name)."
msgstr "最大アイドル時間を設定するには、 `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` プロパティーを介して duration を指定します (下記の duration のフォーマットに関する注意事項を参照 _) (<region_name> を_ 実際のリージョン名 _に_ 置き換えてください)。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:595
#, fuzzy
msgid "The double quotes are mandatory if your region name contains a dot. For instance:"
msgstr "リージョン名にドットが含まれている場合は、二重引用符は必須です。例えば、以下のようになります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:599
#, no-wrap
msgid "quarkus.hibernate-orm.cache.\"org.acme.MyEntity\".memory.object-count=1000\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:605
#, no-wrap
msgid "Limitations of Caching"
msgstr "キャッシングの制限"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:608
msgid "The caching technology provided within Quarkus is currently quite rudimentary and limited."
msgstr "Quarkusで提供されているキャッシング技術は、現在のところ非常に初歩的で限られています。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:610
#, fuzzy
msgid "The team thought it was better to have _some_ caching capability to start with, than having nothing; you can expect better caching solution to be integrated in future releases, and any help and feedback in this area is very welcome."
msgstr "将来のリリースでは、より良いキャッシングソリューションが統合されることを期待できますし、この分野での助けやフィードバックは大歓迎です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:614
#, fuzzy
msgid "These caches are kept locally, so they are not invalidated or updated when changes are made to the persistent store by other applications."
msgstr "これらのキャッシュはローカルに保持されるため、他のアプリケーションによって永続ストアに変更が加えられても、無効になったり更新されたりすることはありません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:616
#, fuzzy
msgid "Also, when running multiple copies of the same application (in a cluster, for example on Kubernetes/OpenShift), caches in separate copies of the application aren't synchronized."
msgstr "また、同じアプリケーションの複数のコピーを実行している場合(クラスター内、例えばKubernetes/OpenShift上など)、アプリケーションの別々のコピーのキャッシュは同期されません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:618
#, fuzzy
msgid "For these reasons, enabling caching is only suitable when certain assumptions can be made: we strongly recommend that only entities, collections and queries which never change are cached. Or at most, that when indeed such an entity is mutated and allowed to be read out of date (stale) this has no impact on the expectations of the application."
msgstr "これらの理由から、キャッシングを有効にすることは、ある仮定ができる場合にのみ適しています。あるいは、実際にそのようなエンティティーが突然変異して、古くなった (stale) エンティティーの読み取りを許可されても、アプリケーションの期待には何の影響も与えないことを強く推奨します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:620
#, fuzzy
msgid "Following this advice guarantees applications get the best performance out of the second-level cache and yet avoid unexpected behaviour."
msgstr "このアドバイスに従うことで、アプリケーションは第 2 レベルのキャッシュから最高のパフォーマンスを得ることができ、予期せぬ動作を避けることができます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:625
#, fuzzy, no-wrap
msgid ""
"On top of immutable data, in certain contexts it might be acceptable to enable caching also on mutable data; this could be a necessary tradeoff on selected\n"
" entities which are read frequently and for which some degree of staleness is acceptable; this \" acceptable degree of staleness\" can be tuned by setting eviction properties.\n"
" This is however not recommended and should be done with extreme care, as it might\n"
" produce unexpected and unforeseen effects on the data.\n"
msgstr "これは、頻繁に読み込まれ、ある程度のスタールネスが許容される選択されたエンティティーに対して必要なトレードオフであるかもしれません。この「許容されるスタールネスの程度」は、退避プロパティーを設定することで調整することができます。しかし、これは推奨されませんし、データに予期せぬ不測の影響を与える可能性があるため、細心の注意を払って行うべきです。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:627
#, fuzzy
msgid "Rather than enabling caching on mutable data, ideally a better solution would be to use a clustered cache; however at this time Quarkus doesn't provide any such implementation: feel free to get in touch and let this need known so that the team can take this into account."
msgstr "しかし、現時点ではQuarkusはそのような実装を提供していません。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:630
#, fuzzy
msgid "Finally, the second-level cache can be disabled globally by setting `hibernate.cache.use_second_level_cache` to `false`; this is a setting that needs to be specified in the `persistence.xml` configuration file."
msgstr "最後に、第二レベルキャッシュは `hibernate.cache.use_second_level_cache` を `false` に設定することでグローバルに無効にすることができます。これは `persistence.xml` 設定ファイルで指定する必要があります。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:632
#, fuzzy
msgid "When second-level cache is disabled, all cache annotations are ignored and all queries are run ignoring caches; this is generally useful only to diagnose issues."
msgstr "第二レベルキャッシュが無効になっている場合、すべてのキャッシュアノテーションは無視され、すべてのクエリはキャッシュを無視して実行されます。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:634
#, no-wrap
msgid "Hibernate Envers"
msgstr "Hibernate Envers"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:636
msgid "The Envers extension to Hibernate ORM aims to provide an easy auditing / versioning solution for entity classes."
msgstr "Hibernate ORMのEnversエクステンションは、エンティティークラスのための簡単な監査/バージョン管理ソリューションを提供することを目的としています。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:638
msgid "In Quarkus, Envers has a dedicated Quarkus Extension `io.quarkus:quarkus-hibernate-envers`; you just need to add this to your project to start using it."
msgstr "Quarkusでは、Enversには専用のQuarkus Extensionがあります。 `io.quarkus:quarkus-hibernate-envers` ; これをプロジェクトに追加して使用を開始する必要があります。"

#. type: Block title
#: upstream/_guides/hibernate-orm.adoc:640
#, no-wrap
msgid "Additional dependency to enable Hibernate Envers"
msgstr "Hibernate Enversを有効にするための追加の依存関係"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:647
#, no-wrap
msgid ""
"    <!-- Add the Hibernate Envers extension -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-hibernate-envers</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:650
#, fuzzy
msgid "At this point the extension does not expose additional configuration properties."
msgstr "この時点では、エクステンションは追加の設定プロパティーを公開していません。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:652
#, fuzzy
msgid "For more information about Hibernate Envers, see link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/]."
msgstr "Hibernate Enversの詳細については、 link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/] を参照してください。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:654
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:659
msgid "Either link:micrometer[Micrometer] or link:microprofile-metrics[SmallRye Metrics] are capable of exposing metrics that Hibernate ORM collects at runtime. To enable exposure of Hibernate metrics on the `/q/metrics` endpoint, make sure your project depends on a metrics extension and set the configuration property `quarkus.hibernate-orm.metrics.enabled` to `true`.  When using link:microprofile-metrics[SmallRye Metrics], metrics will be available under the `vendor` scope."
msgstr "link:micrometer[Micrometer] または link:microprofile-metrics[SmallRye Metrics] は、Hibernate ORM が実行時に収集するメトリクスを公開することができます。 `/q/metrics` エンドポイントで Hibernate メトリクスを公開できるようにするには、プロジェクトがメトリクスエクステンションに依存していることを確認し、設定プロパティー `quarkus.hibernate-orm.metrics.enabled` を `true` に設定します。 link:microprofile-metrics[SmallRye Metrics] を使用すると、メトリクスは `vendor` スコープの下で利用可能になります。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:660
#, no-wrap
msgid "Limitations and other things you should know"
msgstr "制限事項など知っておくべきこと"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:664
msgid "Quarkus does not modify the libraries it uses; this rule applies to Hibernate ORM as well: when using this extension you will mostly have the same experience as using the original library."
msgstr "Quarkusは使用するライブラリを変更しません。このルールはHibernate ORMにも適用されます。このエクステンションを使用すると、元のライブラリを使用した場合とほとんど同じエクスペリエンスが得られます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:668
#, fuzzy
msgid "But while they share the same code, Quarkus does configure some components automatically and injects custom implementations for some extension points; this should be transparent and useful but if you're an expert of Hibernate you might want to know what is being done."
msgstr "しかし、これらは同じコードを共有していますが、Quarkusはいくつかのコンポーネントを自動的に設定し、いくつかの拡張ポイントに対してカスタムの実装を注入します; これは透明で便利なはずですが、Hibernateの専門家であれば、何が行われているかを知りたいかもしれません。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:669
#, no-wrap
msgid "Automatic build time enhancement"
msgstr "自動ビルド時間の強化"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:673
#, fuzzy
msgid "Hibernate ORM can use build time enhanced entities; normally this is not mandatory but it's useful and will have your applications perform better."
msgstr "通常は必須ではありませんが、これは有用であり、アプリケーションのパフォーマンスを向上させます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:676
#, fuzzy
msgid "Typically you would need to adapt your build scripts to include the Hibernate Enhancement plugins; in Quarkus this is not necessary as the enhancement step is integrated in the build and analysis of the Quarkus application."
msgstr "通常、Hibernateエンハンスメントプラグインを含むようにビルドスクリプトを調整する必要があります。Quarkusでは、エンハンスメントステップはQuarkusアプリケーションのビルドと分析に統合されているため、この必要はありません。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:681
#, fuzzy
msgid "Due to the usage of enhancement, using the `clone()` method on entities is currently not supported as it will also clone some enhancement-specific fields that are specific to the entity."
msgstr "エンハンスメントの使用法のため、エンティティーで `clone()` メソッドを使用すると、エンティティーに固有の一部のエンハンスメント固有のフィールドがクローンされてしまうため、現在のところサポートされていません。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:683
msgid "This limitation might be removed in the future."
msgstr "この制限は将来的に削除される可能性があります。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:685
#, no-wrap
msgid "Automatic integration"
msgstr "自動統合"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:687
#, no-wrap
msgid "Transaction Manager integration"
msgstr "トランザクション・マネージャーの統合"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:691
#, fuzzy
msgid "You don't need to set this up, Quarkus automatically injects the reference to the Narayana Transaction Manager.  The dependency is included automatically as a transitive dependency of the Hibernate ORM extension.  All configuration is optional; for more details see link:transaction[Using Transactions in Quarkus]."
msgstr "これを設定しなくても、Quarkusが自動的にNarayana Transaction Managerへの参照を注入してくれます。この依存関係は、Hibernate ORMエクステンションの遷移依存関係として自動的に含まれます。すべての設定はオプションです。詳細については、 link:transaction[Quarkusでのトランザクションの使用] を参照してください。"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:692
#, no-wrap
msgid "Connection pool"
msgstr "接続プール"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:696
#, fuzzy
msgid "Don't need to choose one either. Quarkus automatically includes the Agroal connection pool; just configure your datasource as in the above examples and it will setup Hibernate ORM to use Agroal.  More details about this connection pool can be found in link:datasource[Quarkus - Datasources]."
msgstr "どちらかを選択する必要はありません。上記の例のようにデータソースを設定するだけで、Hibernate ORMがAgroalを使用するように設定されます。この接続プールの詳細については、Quark link:datasource[us - データソース] を参照してください。"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:697
#, no-wrap
msgid "Second Level Cache"
msgstr "セカンドレベルキャッシュ"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:700
#, fuzzy
msgid "as explained above in section <<caching,Caching>>, you don't need to pick an implementation.  A suitable implementation based on technologies from link:https://infinispan.org/[Infinispan] and link:https://github.com/ben-manes/caffeine[Caffeine] is included as a transitive dependency of the Hibernate ORM extension, and automatically integrated during the build."
msgstr "上で説明したように、 link:#caching[キャッシング] では実装を選択する必要はありません。 link:https://infinispan.org/[Infinispan] と link:https://github.com/ben-manes/caffeine[Caffeine] の技術に基づいた適切な実装は、Hibernate ORM エクステンションの透過的な依存関係として含まれており、ビルド中に自動的に統合されます。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:701
#, no-wrap
msgid "Limitations"
msgstr "制約事項"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:703
#, no-wrap
msgid "XML mapping"
msgstr "XMLマッピング"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:707
#, fuzzy
msgid "Hibernate ORM allows to map entities using XML files; this capability isn't enabled in Quarkus: use annotations instead as Quarkus can handle them very efficiently.  This limitation could be lifted in the future, if there's a compelling need for it and if someone contributes it."
msgstr "Hibernate ORMでは、XMLファイルを使用してエンティティーをマッピングすることができます。この機能はQuarkusでは有効になっていません。この制限は、やむを得ない必要性があり、誰かが貢献すれば、将来的に解除される可能性があります。"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:708
#, no-wrap
msgid "JMX"
msgstr "JMX"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:713
#, fuzzy
msgid "Management beans are not working in GraalVM native images; therefore Hibernate's capability to register statistics and management operations with the JMX bean is disabled when compiling into a native image.  This limitation is likely permanent, as it's not a goal for native images to implement support for JMX. All such metrics can be accessed in other ways."
msgstr "管理BeanはGraalVMネイティブイメージでは動作しません。そのため、ネイティブイメージにコンパイルする際に、統計情報や管理操作をJMXBeanに登録するHibernateの機能は無効になっています。ネイティブイメージではJMXのサポートを実装することが目標ではないため、この制限は永久的なものになる可能性が高いです。そのようなメトリクスはすべて他の方法でアクセスできます。"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:714
#, no-wrap
msgid "JACC Integration"
msgstr "JACCの統合"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:717
#, fuzzy
msgid "Hibernate ORM's capability to integrate with JACC is disabled when building GraalVM native images, as JACC is not available - nor useful - in native mode."
msgstr "GraalVMネイティブイメージを構築する際に、JACCと統合するHibernate ORMの機能は、ネイティブモードではJACCが利用できず、また有用ではないため、無効になっています。"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:718
#, no-wrap
msgid "Binding the Session to ThreadLocal context"
msgstr "セッションをThreadLocalコンテキストにバインドする"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:723
#, fuzzy
msgid "Essentially using the `ThreadLocalSessionContext` helper of Hibernate ORM is not implemented.  The team believes this isn't a big deal as it's trivial to inject the Session via CDI instead, or handling the binding into a ThreadLocal yourself, making this a legacy feature.  This limitation might be resolved in the future, if someone opens a ticket for it and provides a reasonable use case to justify the need."
msgstr "基本的に、Hibernate ORM の `ThreadLocalSessionContext` ヘルパーを使用することは実装されていません。CDI経由でSessionを注入したり、スレッドローカルへのバインディングを自分で処理したりするのは簡単なので、これは大したことではないとチームは考えています。誰かがチケットを開き、その必要性を正当化するための合理的なユースケースを提供してくれれば、この制限は将来的に解決されるかもしれません。"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:724
#, no-wrap
msgid "JPA Callbacks"
msgstr "JPA コールバック"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:727
#, fuzzy
msgid "Annotations allowing for application callbacks on entity lifecycle events defined by JPA such as `@javax.persistence.PostUpdate`, `@javax.persistence.PostLoad`, `@javax.persistence.PostPersist`, etc... are currently not processed.  This limitation could be resolved in a future version, depending on user demand."
msgstr "`@javax.persistence.PostUpdate` , `@javax.persistence.PostLoad` , `@javax.persistence.PostPersist` , , などのようなJPAで定義されたエンティティーのライフサイクルイベントに対するアプリケーションコールバックを可能にするアノテーションは、現在のところ処理されません。この制限は、ユーザーの要求に応じて、将来のバージョンで解決される可能性があります。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:728
#, no-wrap
msgid "Other notable differences"
msgstr "その他の特記すべき相違点"

#. type: Labeled list
#: upstream/_guides/hibernate-orm.adoc:730
#, no-wrap
msgid "Format of `import.sql`"
msgstr "`import.sql` のフォーマット"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:734
#, fuzzy
msgid "When importing a `import.sql` to setup your database, keep in mind that Quarkus reconfigures Hibernate ORM so to require a semicolon (';') to terminate each statement.  The default in Hibernate is to have a statement per line, without requiring a terminator other than newline: remember to convert your scripts to use the ';' terminator character if you're reusing existing scripts.  This is useful so to allow multi-line statements and human friendly formatting."
msgstr "`import.sql` をインポートしてデータベースを設定する場合、QuarkusはHibernate ORMを再設定しているため、各ステートメントの終了にセミコロン(';')を必要とすることに注意してください。Hibernateのデフォルトでは、改行以外の終端文字を必要とせず、1行に1つのステートメントを持つようになっています。既存のスクリプトを再利用する場合は、';'終端文字を使用するようにスクリプトを変換することを忘れないでください。これは、複数行のステートメントを可能にしたり、人間に優しいフォーマットを可能にするために便利です。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:735
#, fuzzy, no-wrap
msgid "Simplifying Hibernate ORM with Panache"
msgstr "PanacheでHibernate ORMを簡素化する"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:738
#, fuzzy
msgid "The link:hibernate-orm-panache[Hibernate ORM with Panache] extension facilitates the usage of Hibernate ORM by providing active record style entities (and repositories) and focuses on making your entities trivial and fun to write in Quarkus."
msgstr "link:hibernate-orm-panache[Hibernate ORM with Panache] エクステンションは、アクティブなレコードスタイルのエンティティー(およびリポジトリ)を提供することでHibernate ORMの使用を容易にし、エンティティーをQuarkusで書くのが簡単で楽しいものにすることに焦点を当てています。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:739
#, no-wrap
msgid "Configure your datasource"
msgstr "データソースの設定"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:743
msgid "Datasource configuration is extremely simple, but is covered in a different guide as technically it's implemented by the Agroal connection pool extension for Quarkus."
msgstr "データソースの設定は非常にシンプルですが、技術的にはQuarkus用のAgroal接続プールエクステンションによって実装されているため、別のガイドで説明します。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:745
msgid "Jump over to link:datasource[Quarkus - Datasources] for all details."
msgstr "すべての詳細については、 link:datasource[Quarkus - データソース] にジャンプしてください。"

#. type: Title ==
#: upstream/_guides/hibernate-orm.adoc:747
#, no-wrap
msgid "Multitenancy"
msgstr "マルチテナンシー"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:750
msgid "\"The term multitenancy, in general, is applied to software development to indicate an architecture in which a single running instance of an application simultaneously serves multiple clients (tenants). This is highly common in SaaS solutions. Isolating information (data, customizations, etc.) pertaining to the various tenants is a particular challenge in these systems. This includes the data owned by each tenant stored in the database\" (link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy[Hibernate User Guide])."
msgstr "\"マルチテナンシーという用語は、一般的にソフトウェア開発に適用され、アプリケーションの単一の実行中のインスタンスが同時に複数のクライアント(テナント)にサービスを提供するアーキテクチャを示しています。これはSaaSソリューションでは非常に一般的です。様々なテナントに関連する情報(データ、カスタマイズなど)を分離することは、これらのシステムでは特別な課題です。これには、データベースに格納されている各テナントが所有するデータも含まれます。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:752
msgid "Quarkus currently supports the link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy-separate-database[separate database] and the link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy-separate-schema[separate schema] approach."
msgstr "Quarkusは現在、 link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy-separate-database[分離型データベース] と link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy-separate-schema[分離型スキーマ] アプローチをサポートしています。"

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:753
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:756
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "まずは `/{tenant}` エンドポイントを実装してみましょう。下のソースコードを見るとわかるように、これは通常の JAX-RS リソースです。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:764
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.persistence.EntityManager;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:768
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Path(\"/{tenant}\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:771
#, no-wrap
msgid ""
"    @Inject\n"
"    EntityManager entityManager;\n"
msgstr ""
"    @Inject\n"
"    EntityManager entityManager;\n"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:778
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"fruits\")\n"
"    public Fruit[] getFruits() {\n"
"        return entityManager.createNamedQuery(\"Fruits.findAll\", Fruit.class)\n"
"                .getResultList().toArray(new Fruit[0]);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:780
#: upstream/_guides/hibernate-orm.adoc:816
#: upstream/_guides/hibernate-orm.adoc:840
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:783
#, fuzzy
msgid "In order to resolve the tenant from incoming requests and map it to a specific tenant configuration, you need to create an implementation for the `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` interface."
msgstr "受信リクエストからテナントを解決し、特定のテナント設定にマッピングするには、 `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` インターフェイス用の実装を作成する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:787
#: upstream/_guides/hibernate-orm.adoc:828
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:790
#: upstream/_guides/hibernate-orm.adoc:852
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.runtime.tenant.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:793
#, no-wrap
msgid ""
"@RequestScoped <1>\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:796
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:801
#, no-wrap
msgid ""
"    @Override\n"
"    public String getDefaultTenantId() {\n"
"        return \"base\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:806
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolveTenantId() {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:811
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant config\n"
"            return getDefaultTenantId();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:814
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:818
#, fuzzy
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr "テナントの解決は着信リクエストに依存するので、Beanは `@RequestScoped` にしています。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:820
#, fuzzy
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, the default tenant identifier is returned."
msgstr "上記の実装から、リクエストパスからテナントを解決し、テナントが推測できなかった場合には、デフォルトのテナント識別子を返すようにしています。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:824
#, fuzzy
msgid "If <<multiple-persistence-units,named persistence units>> are used, you need to qualify the `TenantResolver` with the persistence unit name:"
msgstr "link:#multiple-persistence-units[名前付き永続化ユニットを] 使用する場合は、 `TenantResolver` を永続化ユニット名で修飾する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:832
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.PersistenceUnit;\n"
"import io.quarkus.hibernate.orm.runtime.tenant.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:836
#, no-wrap
msgid ""
"@PersistenceUnit(\"name-of-persistence-unit\") <1>\n"
"@RequestScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:838
#, no-wrap
msgid "   // ...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:842
#, fuzzy
msgid "Make sure to use the `@io.quarkus.hibernate.orm.PersistenceUnit` annotation, not the JPA one."
msgstr "必ずJPAアノテーションではなく、 `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用してください。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:847
#, fuzzy
msgid "If you also use link:security-openid-connect-multitenancy[OIDC multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr "link:security-openid-connect-multitenancy[OIDCマルチテナンシー] も使用していて、OIDCとHibernate ORMの両方のテナントIDが同じで、Vert.x `RoutingContext` から抽出しなければならない場合は、OIDCテナントリゾルバからHibernate ORMテナントリゾルバにテナントIDを `RoutingContext` 属性として渡すことができます。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:855
#, no-wrap
msgid ""
"@RequestScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:865
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
"    ...\n"
"    @Override\n"
"    public String resolveTenantId() {\n"
"        // OIDC TenantResolver has already calculated the tenant id and saved it as a RoutingContext `tenantId` attribute:\n"
"        return context.get(\"tenantId\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:868
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:873
#, fuzzy
msgid "In general it is not possible to use the Hibernate ORM database generation feature in conjunction with a multitenancy setup.  Therefore you have to disable it and you need to make sure that the tables are created per schema.  The following setup will use the link:flyway[Flyway] extension to achieve this goal."
msgstr "一般的に、マルチテナンシー設定と組み合わせてHibernate ORMデータベース生成機能を使用することはできません。したがって、それを無効にして、テーブルがスキーマごとに作成されることを確認する必要があります。以下のセットアップでは、この目標を達成するために link:https://quarkus.io/guides/flyway[Flyway] エクステンションを使用します。"

#. type: Title ====
#: upstream/_guides/hibernate-orm.adoc:874
#, no-wrap
msgid "SCHEMA approach"
msgstr "SCHEMAアプローチ"

#. type: delimited block =
#: upstream/_guides/hibernate-orm.adoc:878
#, fuzzy
msgid "The same data source will be used for all tenants and a schema has to be created for every tenant inside that data source.  CAUTION: Some databases like MariaDB/MySQL do not support database schemas. In these cases you have to use the DATABASE approach below."
msgstr "すべてのテナントに同じデータ ソースが使用され、そのデータ ソース内のすべてのテナントに対してスキーマを作成する必要があります。注意:MariaDB/MySQL のような一部のデータベースは、データベース スキーマをサポートしていません。これらのケースでは、以下のDATABASEアプローチを使用する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:883
#: upstream/_guides/hibernate-orm.adoc:938
#, no-wrap
msgid ""
"# Disable generation\n"
"quarkus.hibernate-orm.database.generation=none\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:888
#, no-wrap
msgid ""
"# Enable SCHEMA approach and use default datasource\n"
"quarkus.hibernate-orm.multitenant=SCHEMA\n"
"# You could use a non-default datasource by using the following setting \n"
"# quarkus.hibernate-orm.multitenant-schema-datasource=other\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:894
#, no-wrap
msgid ""
"# The default data source used for all tenant schemas\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:899
#, no-wrap
msgid ""
"# Enable Flyway configuration to create schemas\n"
"quarkus.flyway.schemas=base,mycompany\n"
"quarkus.flyway.locations=classpath:schema\n"
"quarkus.flyway.migrate-at-start=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:902
msgid "Here is an example of the Flyway SQL (`V1.0.0__create_fruits.sql`) to be created in the configured folder `src/main/resources/schema`."
msgstr "ここでは、設定されたフォルダー `src/main/resources/schema` に作成される Flyway SQL ( `V1.0.0__create_fruits.sql` ) の例を示します。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:915
#, no-wrap
msgid ""
"CREATE SEQUENCE base.known_fruits_id_seq;\n"
"SELECT setval('base.\"known_fruits_id_seq\"', 3);\n"
"CREATE TABLE base.known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO base.known_fruits(id, name) VALUES (1, 'Cherry');\n"
"INSERT INTO base.known_fruits(id, name) VALUES (2, 'Apple');\n"
"INSERT INTO base.known_fruits(id, name) VALUES (3, 'Banana');\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:926
#, no-wrap
msgid ""
"CREATE SEQUENCE mycompany.known_fruits_id_seq;\n"
"SELECT setval('mycompany.\"known_fruits_id_seq\"', 3);\n"
"CREATE TABLE mycompany.known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (1, 'Avocado');\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (2, 'Apricots');\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (3, 'Blackberries');\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/hibernate-orm.adoc:930
#, no-wrap
msgid "DATABASE approach"
msgstr "データベースアプローチ"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:933
msgid "For every tenant you need to create a named data source with the same identifier that is returned by the `TenantResolver`."
msgstr "すべてのテナントに対して、 `TenantResolver` が返すのと同じ識別子を持つ名前付きデータソースを作成する必要があります。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:941
#, no-wrap
msgid ""
"# Enable DATABASE approach\n"
"quarkus.hibernate-orm.multitenant=DATABASE\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:947
#, no-wrap
msgid ""
"# Default tenant 'base'\n"
"quarkus.datasource.base.db-kind=postgresql\n"
"quarkus.datasource.base.username=quarkus_test\n"
"quarkus.datasource.base.password=quarkus_test\n"
"quarkus.datasource.base.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:953
#, no-wrap
msgid ""
"# Tenant 'mycompany'\n"
"quarkus.datasource.mycompany.db-kind=postgresql\n"
"quarkus.datasource.mycompany.username=mycompany\n"
"quarkus.datasource.mycompany.password=mycompany\n"
"quarkus.datasource.mycompany.jdbc.url=jdbc:postgresql://localhost:5433/mycompany\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:957
#, no-wrap
msgid ""
"# Flyway configuration for the default datasource\n"
"quarkus.flyway.locations=classpath:database/default\n"
"quarkus.flyway.migrate-at-start=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:961
#, no-wrap
msgid ""
"# Flyway configuration for the mycompany datasource\n"
"quarkus.flyway.mycompany.locations=classpath:database/mycompany\n"
"quarkus.flyway.mycompany.migrate-at-start=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:964
msgid "Following are examples of the Flyway SQL files to be created in the configured folder `src/main/resources/database`."
msgstr "以下は、設定されたフォルダー `src/main/resources/database` に作成する Flyway SQL ファイルの例です。"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:966
msgid "Default schema (`src/main/resources/database/default/V1.0.0__create_fruits.sql`):"
msgstr "デフォルトスキーマ ( `src/main/resources/database/default/V1.0.0__create_fruits.sql` )。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:979
#, no-wrap
msgid ""
"CREATE SEQUENCE known_fruits_id_seq;\n"
"SELECT setval('known_fruits_id_seq', 3);\n"
"CREATE TABLE known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO known_fruits(id, name) VALUES (1, 'Cherry');\n"
"INSERT INTO known_fruits(id, name) VALUES (2, 'Apple');\n"
"INSERT INTO known_fruits(id, name) VALUES (3, 'Banana');\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:982
msgid "Mycompany schema (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"
msgstr "Mycompany schema (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"

#. type: delimited block -
#: upstream/_guides/hibernate-orm.adoc:995
#, no-wrap
msgid ""
"CREATE SEQUENCE known_fruits_id_seq;\n"
"SELECT setval('known_fruits_id_seq', 3);\n"
"CREATE TABLE known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO known_fruits(id, name) VALUES (1, 'Avocado');\n"
"INSERT INTO known_fruits(id, name) VALUES (2, 'Apricots');\n"
"INSERT INTO known_fruits(id, name) VALUES (3, 'Blackberries');\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm.adoc:997
#, no-wrap
msgid "Programmatically Resolving Tenants Connections"
msgstr "テナント接続をプログラムで解決"

#. type: Plain text
#: upstream/_guides/hibernate-orm.adoc:999
#, fuzzy
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver` interface to implement your own logic for retrieving a connection. Creating an application scoped bean that implements this interface will replace the current Quarkus default implementation `io.quarkus.hibernate.orm.runtime.tenant.DataSourceTenantConnectionResolver`. Your custom connection resolver would allow for example to read tenant information from a database and create a connection per tenant at runtime based on it."
msgstr "サポートしたいさまざまなテナントに対して、より動的な設定が必要で、設定ファイルに複数のエントリーがある状態で終わらせたくない場合は、 `io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver` インターフェイスを使用して、接続を取得するための独自のロジックを実装することができます。このインターフェイスを実装したアプリケーションスコープ付きBeanを作成すると、現在のQuarkusのデフォルト実装 `io.quarkus.hibernate.orm.runtime.tenant.DataSourceTenantConnectionResolver` を置き換えることができます。カスタムの接続リゾルバを使用すると、例えば、データベースからテナント情報を読み取り、それに基づいて実行時にテナントごとに接続を作成することができます。"
