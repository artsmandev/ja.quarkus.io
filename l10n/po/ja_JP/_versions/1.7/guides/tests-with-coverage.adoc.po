# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-08-31 10:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus - Measuring the coverage of your tests"
msgstr "Quarkus - テストのカバレッジを測定する"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:22
msgid "Learn how to measure the test coverage of your application. This guide covers:"
msgstr "アプリケーションのテストカバレッジを測定する方法をご紹介します。このガイドでは、以下の内容をカバーしています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:24
msgid "Measuring the coverage of your Unit Tests"
msgstr "ユニットテストのカバレッジを測定する"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:25
msgid "Measuring the coverage of your Integration Tests"
msgstr "統合テストのカバレッジを測定する"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:26
msgid "Separating the execution of your Unit Tests and Integration Tests"
msgstr "ユニットテストと統合テストの実行を分離する"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:27
msgid "Consolidating the coverage for all your tests"
msgstr "すべてのテストのカバレッジを統合"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:29
msgid "Please note that code coverage is not supported in native mode."
msgstr "ネイティブモードではコードカバレッジはサポートされていませんのでご注意ください。"

#. type: Title ==
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:30
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:33
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:35
#, fuzzy
msgid "less than 15 minutes"
msgstr "15分以内"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:36
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:37
#, fuzzy
msgid "JDK 1.8+ installed with JAVA_HOME configured appropriately"
msgstr "JAVA_HOME が適切に設定され、JDK 1.8+ がインストールされていること。"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:38
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:39
msgid "Having completed the link:getting-started-testing[Testing your application guide]"
msgstr "link:https://quarkus.io/guides/getting-started-testing[アプリケーションガイドのテスト] が完了済であること"

#. type: Title ==
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:40
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:44
msgid "The application built in this guide is just a JAX-RS endpoint (hello world) that relies on dependency injection to use a service.  The service will be tested with JUnit 5 and the endpoint will be annotated via a `@QuarkusTest` annotation."
msgstr "このガイドで構築されたアプリケーションは、サービスを使用するために依存性インジェクションに依存した JAX-RS エンドポイント (hello world) に過ぎません。サービスは JUnit 5 でテストされ、エンドポイントには `@QuarkusTest` のアノテーションが付けられます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:45
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:49
msgid "We recommend that you follow the instructions in the next sections and create the application step by step. However, you can go right to the completed example.  Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。しかし、完成した例にすぐに進むことができます。Git リポジトリをクローンします: `git clone {quickstarts-clone-url}` 、または {quickstarts-archive-url}[archive] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:51
msgid "The solution is located in the `tests-with-coverage-quickstart` {quickstarts-tree-url}/tests-with-coverage-quickstart[directory]."
msgstr "ソリューションは `tests-with-coverage-quickstart` {quickstarts-tree-url}/tests-with-coverage-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:52
#, no-wrap
msgid "Starting from a simple project and two tests"
msgstr "簡単なプロジェクトと2つのテストから始める"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:55
msgid "Let's start from an empty application created with the Quarkus Maven plugin:"
msgstr "Quarkus Mavenプラグインで作成した空のアプリケーションから始めてみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:62
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=tests-with-coverage-quickstart\n"
"cd tests-with-coverage-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:65
msgid "Now we'll be adding all the elements necessary to have an application that is properly covered with tests."
msgstr "ここで、アプリケーションをテストで適切にカバーするために必要な要素をすべて追加していきます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:67
msgid "First, an application serving a hello endpoint:"
msgstr "まず、helloエンドポイントを提供するアプリケーション:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:71
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:109
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:127
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:146
#, no-wrap
msgid "package org.acme.testcoverage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:78
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:81
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:83
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:402
#, no-wrap
msgid "    private final GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:88
#, no-wrap
msgid ""
"    @Inject\n"
"    public GreetingResource(GreetingService service) {\n"
"        this.service = service;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:95
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:383
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    public String greeting(@PathParam(\"name\") String name) {\n"
"        return service.greeting(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:102
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:390
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:105
msgid "This endpoint uses a greeting service:"
msgstr "このエンドポイントは、グリーティングサービスを利用しています。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:111
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:114
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:118
#, no-wrap
msgid ""
"    public String greeting(String name) {\n"
"        return \"hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:120
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:123
#, fuzzy
msgid "The project will also need some tests. First a simple JUnit:"
msgstr "このプロジェクトには、いくつかのテストも必要です。まずはシンプルなJUnit："

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:130
#, no-wrap
msgid ""
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:132
#, no-wrap
msgid "public class GreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:139
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingService() {\n"
"        GreetingService service = new GreetingService();\n"
"        Assertions.assertEquals(\"hello Quarkus\", service.greeting(\"Quarkus\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:142
#, fuzzy
msgid "But also a `@QuarkusTest`:"
msgstr "しかし、同時に `@QuarkusTest` ："

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:150
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Tag;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:152
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:155
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:159
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@Tag(\"integration\")\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:168
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)  \n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:180
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:183
#, fuzzy
msgid "The first one will be our example of a Unit Test and the second one will be our example of Integration Test."
msgstr "最初のものはユニットテストの例で、2番目のものはインテグレーションテストの例です。"

#. type: Title ==
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:184
#, fuzzy, no-wrap
msgid "Separating executions of Unit Tests and Integration Tests"
msgstr "単体テストと結合テストの実行を分ける"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:188
#, fuzzy
msgid "You may want to consider that JUnits and QuarkusTests are two different kind of tests and that they deserve to be separated. This way you could run them separately, in different cases or some more often than the others.  In order to do so, we'll use a feature of JUnit 5 that allows us to tag some tests. Let's tag `GreetingResourceTest.java` and specify that it is an Integration Test:"
msgstr "JUnitsとQuarkusTestsは2つの異なる種類のテストであり、分離することが望ましいと考えるかもしれません。このように、JUnitとQuarkusTestsを別々に実行することで、異なるケースや他のテストよりも頻繁に実行することができます。そのために、JUnit 5 の機能である、テストにタグを付ける機能を使います。ここでは、 `GreetingResourceTest.java` というタグを付けて、統合テストであることを指定しましょう："

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:193
#, no-wrap
msgid ""
"import org.junit.jupiter.api.Tag;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:199
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@Tag(\"integration\")\n"
"public class GreetingResourceTest {\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:202
#, fuzzy
msgid "We're now able to distinguish unit tests and integration tests. Now, let's bind them to different Maven lifecycle phases. Let's use surefire to bind unit tests to the *test* phase and the integration tests to the *integration-test* phase."
msgstr "これで、ユニットテストと統合テストを区別できるようになりました。では、それらを異なるMavenライフサイクルフェーズにバインドしてみましょう。surefireを使って、ユニットテストを *test *フェーズに、統合テストを *integration-test *フェーズにバインドしてみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:237
#, no-wrap
msgid ""
"<project>\n"
"    ...\n"
"    <build>\n"
"        <plugins>\n"
"            <plugin>\n"
"                <artifactId>maven-surefire-plugin</artifactId>\n"
"                <version>${surefire-plugin.version}</version>\n"
"                <configuration>\n"
"                    <excludedGroups>integration</excludedGroups>\n"
"                    <systemPropertyVariables>\n"
"                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                        <maven.home>${maven.home}</maven.home>\n"
"                    </systemPropertyVariables>\n"
"                </configuration>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>integration-tests</id>\n"
"                        <phase>integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>test</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <excludedGroups>!integration</excludedGroups>\n"
"                            <groups>integration</groups>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"    ...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:241
#, fuzzy
msgid "This way, the `QuarkusTest` instances will be executed as part of the `integration-test` build phase while the other JUnit tests will still be ran during the `test` phase.  You can run all the tests with the command `./mvnw clean verify` (and you will notice that two tests are ran in different phases)."
msgstr "こうすることで、 `QuarkusTest` インスタンスは `integration-test` ビルドフェーズの一部として実行され、他の JUnit テストは `test` フェーズで引き続き実行されることになります。 `./mvnw clean verify` というコマンドですべてのテストを実行できます（2つのテストが異なるフェーズで実行されることに気づくでしょう）。"

#. type: Title ==
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:242
#, fuzzy, no-wrap
msgid "Measuring the coverage of JUnit tests using JaCoCo"
msgstr "JaCoCoを使ってJUnitテストのカバレッジを測定する。"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:245
#, fuzzy
msgid "It is now time to introduce JaCoCo to measure the coverage. The straightforward way to add JaCoCo to your build is to reference the plugin in your `pom.xml`."
msgstr "さて、いよいよカバレッジを測定するためにJaCoCoを導入します。JaCoCoをビルドに追加する簡単な方法は、 `pom.xml` でプラグインを参照することである。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:252
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:296
#, no-wrap
msgid ""
"    <properties>\n"
"    ...\n"
"        <jacoco.version>0.8.4</jacoco.version>\n"
"    </properties>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:281
#, no-wrap
msgid ""
"    <build>\n"
"        <plugins>\n"
"        ...\n"
"            <plugin>\n"
"                <groupId>org.jacoco</groupId>\n"
"                <artifactId>jacoco-maven-plugin</artifactId>\n"
"                <version>${jacoco.version}</version>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>default-prepare-agent</id>\n"
"                        <goals>\n"
"                            <goal>prepare-agent</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>default-report</id>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:284
#, fuzzy
msgid "If you run `./mvnw clean test` the coverage information will be collected during the execution of the unit tests in the file `jacoco.exec`."
msgstr "`./mvnw clean test` を実行すると、ユニットテストの実行中にカバレッジ情報がファイル `jacoco.exec` に収集されます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:285
#, no-wrap
msgid "Measuring separately the coverage of each test type"
msgstr "各テストタイプのカバレッジを個別に測定"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:289
#, fuzzy
msgid "It is not strictly necessary, but let's distinguish the coverage brought by each test type. To do so, we`ll just output the coverage info in two different files, one in `jacoco-ut.exec` and one in `jacoco-it.exec`.  We also need to generate a separate report for each test execution. Let's adjust the Jacoco configuration for that:"
msgstr "厳密には必要ありませんが、各テストタイプによってもたらされるカバレッジを区別してみましょう。そのために、カバレッジ情報を `jacoco-ut.exec` と `jacoco-it.exec` の2つのファイルに出力します。また、各テスト実行に対して別々のレポートを作成する必要があります。そのためにJacocoのコンフィギュレーションを調整しましょう："

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:349
#, no-wrap
msgid ""
"    <build>\n"
"        <plugins>\n"
"        ...\n"
"            <plugin>\n"
"                <groupId>org.jacoco</groupId>\n"
"                <artifactId>jacoco-maven-plugin</artifactId>\n"
"                <version>${jacoco.version}</version>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>prepare-agent-ut</id>\n"
"                        <goals>\n"
"                            <goal>prepare-agent</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <destFile>${project.build.directory}/jacoco-ut.exec</destFile>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>prepare-agent-it</id>\n"
"                        <phase>pre-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>prepare-agent</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <destFile>${project.build.directory}/jacoco-it.exec</destFile>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>report-ut</id>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco-ut.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>report-it</id>\n"
"                        <phase>post-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco-it.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:351
#, no-wrap
msgid "The coverage does not seem to correspond to the reality"
msgstr "カバレッジが現実と一致していないように見える"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:354
#, fuzzy
msgid "You can now run the tests: `./mvnw clean verify` As explained earlier, it will run the unit tests first, then the integration tests. And finally, it will generate two separate reports. First a report of the coverage of the unit tests in `target/site/jacoco-ut` then a report of the coverage of the integration tests in `target/site/jacoco-it`."
msgstr "これで、テストを実行することができます： `./mvnw clean verify` 先に説明したように、まずユニットテストが実行され、次に統合テストが実行されます。そして最後に、2つの別々のレポートを作成します。まず、 `target/site/jacoco-ut` にユニットテストのカバレッジのレポートが、次に `target/site/jacoco-it` に統合テストのカバレッジのレポートがあります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:356
#, fuzzy
msgid "Given the content of `GreetingResourceTest`, `GreetingResource` should have been covered. But when we open the report `target/site/jacoco-it/index.html`, the class `GreetingResource` is reported with 0% of coverage. But the fact that `GreetingService` is reported as covered shows that the test execution was actually recorded. How come?"
msgstr "`GreetingResourceTest` の内容を考えると、 `GreetingResource` はカバーされているはずです。しかし、レポート `target/site/jacoco-it/index.html` を開くと、 `GreetingResource` のクラスがカバー率0%でレポートされています。しかし、 `GreetingService` がカバーされていると報告されていることから、テスト実行が実際に記録されたことがわかります。どうしてでしょうか？"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:358
msgid "During the report generation, you may have noticed a warning:"
msgstr "レポート生成中に警告が表示されることがあります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:363
#, no-wrap
msgid ""
"[WARNING] Classes in bundle '***' do no match with execution data. For report generation the same class files must be used as at runtime.\n"
"[WARNING] Execution data for class org/acme/testcoverage/GreetingResource does not match.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:367
#, fuzzy
msgid "It seems that Quarkus and JaCoCo step on each other's toes. What happens is that Quarkus transforms the JAX-RS resources (and also the Panache files).  You may have noticed that `GreetingResource` was not written in the simplest way like:"
msgstr "QuarkusとJaCoCoが互いに踏みつけ合っているようです。何が起こるかというと、QuarkusがJAX-RSリソース（とPanacheファイル）を変換するのです。 `GreetingResource` のような最も単純な方法で書かれていないことにお気づきかもしれません："

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:373
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:400
#, no-wrap
msgid ""
"...\n"
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:376
#, no-wrap
msgid ""
"    @Inject\n"
"    GreetingService service;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:394
#, fuzzy
msgid "Above, the constructor is implicit and we use injection to have an instance of `GreetingService`. Note that, with this code relying on an implicit constructor, the coverage would have been reported properly by JaCoCo.  Instead, we introduced a constructor based injection:"
msgstr "上記では、コンストラクタは暗黙的であり、注入を使って `GreetingService` のインスタンスを持っています。 なお、このコードが暗黙的コンストラクタに依存している場合、カバレッジはJaCoCoによって適切に報告されていたでしょう。その代わりに、コンストラクタに基づくインジェクションを導入しました："

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:409
#, no-wrap
msgid ""
"    @Inject\n"
"    public GreetingResource(GreetingService service) {\n"
"        this.service = service;\n"
"    }\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:413
#, fuzzy
msgid "Some might say that this approach is preferable since the field can be *final* like this. Anyway, in some cases you might need an explicit constructor. And, in that case, the coverage is not reported properly by JaCoCo.  This is because Quarkus generates a constructor without any parameter and does some bycode manipulations in order to add it to the class. That is what happened here, just before the execution of the integration tests:"
msgstr "このようにフィールドを *finalに *することができるので、この方法が望ましいと言う人もいるかもしれません。しかし、場合によっては、明示的なコンストラクタが必要になることもある。そして、その場合、JaCoCoはカバレッジを正しく報告しません。これは、Quarkusがパラメータなしでコンストラクタを生成し、それをクラスに追加するためにバイコード操作を行うためです。これは、統合テストを実行する直前に起こったことです："

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:419
#, no-wrap
msgid ""
"[INFO] --- quarkus-maven-plugin:0.16.0:build (default) @ getting-started-testing ---\n"
"[INFO] [io.quarkus.deployment.QuarkusAugmentor] Beginning quarkus augmentation\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:422
#, fuzzy
msgid "As a consequence, JaCoCo does not recognize the classes when it wants to create its report. But wait... there is a solution."
msgstr "その結果、JaCoCoがレポートを作成しようとしたときに、クラスを認識することができないのです。しかし、ちょっと待ってください...解決策があります。"

#. type: Title ==
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:423
#, fuzzy, no-wrap
msgid "Instrumenting the classes instead"
msgstr "代わりにクラスをインストゥルメント化する"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:427
#, fuzzy
msgid "JaCoCo has two modes. The first one is based on an agent and instruments classes on-the-fly. Unfortunately, this is incompatible with the dynamic classfile transformations that Quarkus does. The second mode is called link:https://www.eclemma.org/jacoco/trunk/doc/offline.html[offline instrumentation]. Classes are pre-instrumented in advance via the *jacoco:instrument* Maven goal and during their usage (when the tests are ran), *jacocoagent.jar* must be added to the classpath.  Once the tests have been executed, it is recommended to restore the original classes using the *jacoco:restore-instrumented-classes* Maven goal."
msgstr "JaCoCoには2つのモードがあります。最初のものは、エージェントに基づき、オンザフライでクラスをインストルメントするものです。残念ながら、これはQuarkusが行う動的なクラスファイルの変換と互換性がありません。2つ目のモードは、 link:https://www.eclemma.org/jacoco/trunk/doc/offline.html[オフラインインストルメンテーションと] 呼ばれるものです。クラスは、 *jacoco:instrument *Mavenゴールによって事前にインストルメント化され、その使用中（テストの実行時）には、 *jacocoagent.jarを *クラスパスに追加する必要があります。テストが実行されたら、 *jacoco:restore-instrumented-classes *Mavenゴールを使って元のクラスを復元することが推奨されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:429
#, fuzzy
msgid "Let's first add the dependency on *jacocoagent.jar*:"
msgstr "まず、 *jacocoagent.jarの *依存関係を追加してみましょう："

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:445
#, no-wrap
msgid ""
"<project>\n"
"    ...\n"
"    <dependencies>\n"
"        ...\n"
"        <dependency>\n"
"            <groupId>org.jacoco</groupId>\n"
"            <artifactId>org.jacoco.agent</artifactId>\n"
"            <classifier>runtime</classifier>\n"
"            <scope>test</scope>\n"
"            <version>${jacoco.version}</version>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:448
#, fuzzy
msgid "Then let's configure three jacoco plugin goals for unit tests:"
msgstr "続いて、ユニットテスト用に3つのjacocoプラグインゴールを設定しましょう："

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:450
#, fuzzy
msgid "One to instrument the classes during the *process-classes* phase"
msgstr "*プロセス・クラスの *フェーズでクラスをインストゥルメントするためのもの"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:451
#, fuzzy
msgid "One to restore the original classes during the *prepare-package* phase (after the tests are ran)"
msgstr "1つは、 *パッケージの準備 *段階（テスト実行後）で元のクラスを復元することです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:452
#, fuzzy
msgid "One to generate the report during the *verify* phase (the report generation requires the original classes to have been restored)"
msgstr "*検証 *フェーズでレポートを作成するためのもの（レポート作成には、元のクラスが復元されている必要があります）"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:454
#, fuzzy
msgid "and a similar setup for the integration tests too:"
msgstr "と、統合テストでも同様の設定をしています："

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:519
#, no-wrap
msgid ""
"<project>\n"
"    ...\n"
"    <build>\n"
"        <plugins>\n"
"            ...\n"
"            <plugin>\n"
"                <groupId>org.jacoco</groupId>\n"
"                <artifactId>jacoco-maven-plugin</artifactId>\n"
"                <version>${jacoco.version}</version>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>instrument-ut</id>\n"
"                        <goals>\n"
"                            <goal>instrument</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>restore-ut</id>\n"
"                        <goals>\n"
"                            <goal>restore-instrumented-classes</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>report-ut</id>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco-ut.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>instrument-it</id>\n"
"                        <phase>pre-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>instrument</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>restore-it</id>\n"
"                        <phase>post-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>restore-instrumented-classes</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>report-it</id>\n"
"                        <phase>post-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco-it.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:522
msgid "It also requires a small change in the Surefire configuration. Note below that we specified `jacoco-agent.destfile` as a system property in the default case (unit tests) and for the integration tests."
msgstr "また、Surefireの設定を少し変更する必要があります。デフォルトの場合(ユニットテスト)と統合テストでは、システムのプロパティーとして `jacoco-agent.destfile` を指定していることに注意してください。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:561
#, no-wrap
msgid ""
"<project>\n"
"    ...\n"
"    <build>\n"
"        <plugins>\n"
"            ...\n"
"            <plugin>\n"
"                <artifactId>maven-surefire-plugin</artifactId>\n"
"                <version>${surefire-plugin.version}</version>\n"
"                <configuration>\n"
"                    <excludedGroups>integration</excludedGroups>\n"
"                    <systemPropertyVariables>\n"
"                        <jacoco-agent.destfile>${project.build.directory}/jacoco-ut.exec</jacoco-agent.destfile>\n"
"                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                        <maven.home>${maven.home}</maven.home>\n"
"                    </systemPropertyVariables>\n"
"                </configuration>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>integration-tests</id>\n"
"                        <phase>integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>test</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <excludedGroups>!integration</excludedGroups>\n"
"                            <groups>integration</groups>\n"
"                            <systemPropertyVariables>\n"
"                                <jacoco-agent.destfile>${project.build.directory}/jacoco-it.exec</jacoco-agent.destfile>\n"
"                            </systemPropertyVariables>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:564
#, fuzzy
msgid "Let's now check the generated report that can be found in `target/site/jacoco-it/index.html`. The report now shows that `GreetingResource` is actually properly covered! Yay!"
msgstr "それでは、 `target/site/jacoco-it/index.html` にある生成レポートを確認してみましょう。このレポートでは、 `GreetingResource` が実際に適切にカバーされていることが示されています！やったー！"

#. type: Title ==
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:565
#, fuzzy, no-wrap
msgid "Bonus: Building a consolidated report for Unit Tests and Integration Tests"
msgstr "ボーナス：ユニットテストとインテグレーションテストの統合レポートの構築"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:568
#, fuzzy
msgid "So, finally, let's improve the setup even further and let's merge the two execution files (*jacoco-ut.exec* and *jacoco-it.exec*) into one consolidated report and generate a consolidated report that will show the coverage of all your tests combined."
msgstr "では最後に、この設定をさらに改良して、2つの実行可能ファイル *（jacoco-ut.execと* *jacoco-it.exec *）を1つに統合して、すべてのテストのカバレッジを合算して表示する統合レポートを生成してみようか。"

#. type: Plain text
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:570
#, fuzzy
msgid "You should end up with something like this (note the addition of the `merge-results` and `post-merge-report` executions):"
msgstr "最終的には以下のようになるはずです（ `merge-results` と `post-merge-report` の実行が追加されていることに注意してください）："

#. type: delimited block -
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:703
#, no-wrap
msgid ""
"<project>\n"
"    ...\n"
"    <build>\n"
"        <plugins>\n"
"            <plugin>\n"
"                <artifactId>maven-surefire-plugin</artifactId>\n"
"                <version>${surefire-plugin.version}</version>\n"
"                <configuration>\n"
"                    <excludedGroups>integration</excludedGroups>\n"
"                    <systemPropertyVariables>\n"
"                        <jacoco-agent.destfile>${project.build.directory}/jacoco-ut.exec</jacoco-agent.destfile>\n"
"                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                        <maven.home>${maven.home}</maven.home>\n"
"                    </systemPropertyVariables>\n"
"                </configuration>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>integration-tests</id>\n"
"                        <phase>integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>test</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <excludedGroups>!integration</excludedGroups>\n"
"                            <groups>integration</groups>\n"
"                            <systemPropertyVariables>\n"
"                                <jacoco-agent.destfile>${project.build.directory}/jacoco-it.exec</jacoco-agent.destfile>\n"
"                            </systemPropertyVariables>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"            ...\n"
"            <plugin>\n"
"                <groupId>org.jacoco</groupId>\n"
"                <artifactId>jacoco-maven-plugin</artifactId>\n"
"                <version>${jacoco.version}</version>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>instrument-ut</id>\n"
"                        <goals>\n"
"                            <goal>instrument</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>restore-ut</id>\n"
"                        <goals>\n"
"                            <goal>restore-instrumented-classes</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>report-ut</id>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco-ut.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>instrument-it</id>\n"
"                        <phase>pre-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>instrument</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>restore-it</id>\n"
"                        <phase>post-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>restore-instrumented-classes</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>report-it</id>\n"
"                        <phase>post-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco-it.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>merge-results</id>\n"
"                        <phase>verify</phase>\n"
"                        <goals>\n"
"                            <goal>merge</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <fileSets>\n"
"                                <fileSet>\n"
"                                    <directory>${project.build.directory}</directory>\n"
"                                    <includes>\n"
"                                        <include>*.exec</include>\n"
"                                    </includes>\n"
"                                </fileSet>\n"
"                            </fileSets>\n"
"                            <destFile>${project.build.directory}/jacoco.exec</destFile>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>post-merge-report</id>\n"
"                        <phase>verify</phase>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"    ...\n"
"    <dependencies>\n"
"        ...\n"
"        <dependency>\n"
"            <groupId>org.jacoco</groupId>\n"
"            <artifactId>org.jacoco.agent</artifactId>\n"
"            <classifier>runtime</classifier>\n"
"            <scope>test</scope>\n"
"            <version>${jacoco.version}</version>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</project>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/tests-with-coverage.adoc:705
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"
