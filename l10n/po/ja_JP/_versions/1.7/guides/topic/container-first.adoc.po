# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-06-17 13:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/container-first.adoc:1
#: upstream/_versions/1.7/guides/topic/container-first.adoc:5
#, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/container-first.adoc:4
#, fuzzy
msgid "layout: vision permalink: /vision/container-first"
msgstr ""
"layout: vision\n"
"permalink: /vision/container-first\n"
"---\n"

#. type: Title =
#: upstream/_versions/1.7/guides/topic/container-first.adoc:8
#, no-wrap
msgid "Container-First & Kubernate-Native"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/container-first.adoc:12
#, fuzzy
msgid "From the outset, {project-name} has been designed around a container-first philosophy.  What this means in concrete terms is that {project-name} applications are optimised for low memory usage and fast startup times in the following ways:"
msgstr "最初から {project-name} はコンテナーファーストの哲学に基づいて設計されています。これが実際に意味することは、{project-name} は以下の方法でメモリー使用量を抑え、起動時間を短縮するように最適化されているということです。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/1.7/guides/topic/container-first.adoc:13
#, no-wrap
msgid "Quarkus"
msgstr "Quarkus"

#. type: Target for macro image
#: upstream/_versions/1.7/guides/topic/container-first.adoc:13
#, no-wrap
msgid "../../guides/images/build-time-principle.png"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/topic/container-first.adoc:15
#, fuzzy, no-wrap
msgid "Build Time Processing"
msgstr "ビルドタイムメタデータ処理"

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/container-first.adoc:17
msgid "The central idea behind {project-name} is to do at build-time what traditional frameworks do at runtime: configuration parsing, classpath scanning, feature toggle based on classloading, and so on."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/container-first.adoc:23
#, fuzzy
msgid "As much processing as possible is done at build time; thus, your application only contains the classes used at runtime.  In traditional frameworks, all the classes required to perform the initial application deployment hang around for the application's life, even though they are only used once.  With {project-name}, they are not even loaded into the production JVM! {project-name} does not stop here.  During the build-time processing, it prepares the initialization of all components used by your application.  It results in less memory usage and faster startup time as all metadata processing has already been done."
msgstr "可能な限り多くの処理はビルド時に行われるので、アプリケーションは実行時に実際に必要とされるクラスだけを含みます。従来のモデルでは、最初のアプリケーションのデプロイメントを実行するために必要なすべてのクラスは、一度しか使用されないにもかかわらず、アプリケーションの寿命の間、ぶら下がっています。project-name}では、それらのクラスは本番環境のJVMにロードされません。その結果、メモリー使用量が少なくなり、すべてのメタデータ処理がすでに行われているため、起動時間も速くなります。"

#. type: Title ==
#: upstream/_versions/1.7/guides/topic/container-first.adoc:24
#, no-wrap
msgid "Reduction in Reflection Usage"
msgstr "リフレクション使用量の削減"

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/container-first.adoc:28
msgid "As much as possible {project-name} tries to avoid reflection, reducing startup time and memory usage.  During the built-time processing, extensions can analyze the application code and the classes available on the classpath and replace reflection calls with regular invocations.  The usage of dynamic proxies is also prevented by using generating custom proxy at build time."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/container-first.adoc:30
msgid "Arc, the dependency injection framework used by {project-name}, eliminates all the reflection calls and deduces the injection graph at build time. So, when the application starts, no expensive lookups; it's done already!"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/topic/container-first.adoc:31
#, no-wrap
msgid "First-Class Support for GraalVM Native Images"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/container-first.adoc:38
#, fuzzy
msgid "GraalVM Native Executable support has been an essential part of the design for {project-name} from the beginning.  When an application is compiled down to a native executable, it starts much faster and can run with a much smaller heap than a standard JVM.  The native compiler uses aggressive dead-code elimination techniques to only embed the parts of the JVM and classes that are absolutely required by your application.  {project-name} makes building optimized native executables plain easy.  The build-time approach allows {project-name} to collect enough metadata on your application to fine-tune the compilation.  No `-H:+ReportUnsupportedElementsAtRuntime` flag, no fallback, no compromise!"
msgstr "サブストレートのサポートは、最初から {project-name} の設計の重要な部分でした。アプリケーションがネイティブイメージにコンパイルされると、標準的なJVMよりもはるかに高速に起動し、より小さなヒープで実行することができます。project-name} はすべて Substrate でテストされており、 `-H:+ReportUnsupportedElementsAtRuntime` フラグなしで実行することができます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/topic/container-first.adoc:39
#, fuzzy, no-wrap
msgid "Native Image Pre-Boot"
msgstr "ネイティブイメージのプリブート"

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/container-first.adoc:42
#, fuzzy
msgid "We pre-boot as many of the frameworks as possible during the native compilation of a {project-name} application.  It means that the resulting native executable has already run most of the startup code and serialized the result into the executable: even faster startup!"
msgstr "ネイティブイメージで {project-name}を実行する場合、ネイティブイメージのビルドプロセスの間に、フレームワークの可能な限りの部分をプリブートします。これは、結果として得られるネイティブイメージがすでにほとんどのスタートアップコードを実行し、その結果を実行ファイルにシリアライズしていることを意味し、より高速なスタートアップを実現します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/topic/container-first.adoc:43
#, no-wrap
msgid "Kubernetes, but also bare metal"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/container-first.adoc:46
msgid "All the techniques allowing reducing the memory usage and provide faster startup times are not only advantageous in containers.  Even on bare metal, it would reduce your memory pressure, and it's always pleasant to not have to wait 10 seconds to see your application running."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/container-first.adoc:52
msgid "When {project-name} was designed, we didn't focus only on containers but also on deploying {project-name} applications on container orchestrators such as Kubernetes.  {project-name} build-time processing also generates the Kubernetes metadata, so your application is ready to be deployed on Kubernetes.  Runtime capabilities such as health checks and metrics are exposed out of the box.  {project-name} collects all the required metadata at build time to create the Kubernetes deployment descriptor and produce a container image.  A single command line can deploy your application onto your Kubernetes cluster."
msgstr ""

#~ msgid "As much as possible {project-name} tries to avoid reflection, reducing startup time and memory usage."
#~ msgstr "{project-name}は可能な限り反射を避け、起動時間とメモリー使用量を減らすようにしています。"
