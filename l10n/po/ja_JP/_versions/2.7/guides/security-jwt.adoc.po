msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"This guide explains how your Quarkus application can utilize https://github.com/smallrye/smallrye-jwt/[SmallRye JWT]\n"
"to verify https://tools.ietf.org/html/rfc7519[JSON Web Token]s, represent them as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken`\n"
"and provide secured access to the Quarkus HTTP endpoints using Bearer Token Authorization and https://en.wikipedia.org/wiki/Role-based_access_control[Role-Based Access Control]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"Quarkus OpenID Connect `quarkus-oidc` extension also supports Bearer Token Authorization and uses `smallrye-jwt` to represent the bearer tokens as `JsonWebToken`, please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide for more information.\n"
"OpenID Connect extension has to be used if the Quarkus application needs to authenticate the users using OIDC Authorization Code Flow, please read xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide for more information."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can skip right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-jwt` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"We have not provided any JWT in our request, so we would not expect that there is any security state seen by the endpoint, and\n"
"the response is consistent with that:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"@RolesAllowed is a JSR 250 common security annotation that indicates that the given endpoint is accessible by a caller if\n"
"they have either a \"User\" or \"Admin\" role assigned."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"The https://tools.ietf.org/html/rfc7519[JWT specification] defines various levels of security of JWTs that one can use.\n"
"The {mp-jwt} specification requires that JWTs that are signed with the RSA-256 signature algorithm. This in\n"
"turn requires a RSA public key pair. On the REST endpoint server side, you need to configure the location of the RSA public\n"
"key to use to verify the JWT sent along with requests. The `mp.jwt.verify.publickey.location=publicKey.pem` setting configured\n"
"previously expects that the public key is available on the classpath as `publicKey.pem`. To accomplish this, copy the following\n"
"content to a `security-jwt-quickstart/src/main/resources/publicKey.pem` file."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"The `iss` claim is the issuer of the JWT. This needs to match the server side `mp.jwt.verify.issuer`.\n"
"in order for the token to be accepted as valid."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"The `upn` claim is defined by the {mp-jwt} spec as preferred claim to use for the\n"
"`Principal` seen via the container security APIs."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"The JWT string is the Base64 URL encoded string that has 3 parts separated by '.' characters.\n"
"First part - JWT headers, second part - JWT claims, third part - JWT signature."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"Now that we can generate a JWT to access our secured REST endpoints, let's see what more we can do with the `JsonWebToken`\n"
"interface and the JWT claims. The `org.eclipse.microprofile.jwt.JsonWebToken` interface extends the `java.security.Principal`\n"
"interface, and is in fact the type of the object that is returned by the `javax.ws.rs.core.SecurityContext#getUserPrincipal()` call we\n"
"used previously. This means that code that does not use CDI but does have access to the REST container `SecurityContext` can get\n"
"hold of the caller `JsonWebToken` interface by casting the `SecurityContext#getUserPrincipal()`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"The `JsonWebToken` interface defines methods for accessing claims in the underlying JWT. It provides accessors for common\n"
"claims that are required by the {mp-jwt} specification as well as arbitrary claims that may exist in the JWT."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"All the JWT claims can also be injected. Let's expand our `TokenSecuredResource` with another endpoint /secured/roles-allowed-admin which uses the injected `birthdate` claim\n"
"(as opposed to getting it from `JsonWebToken`):"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"The solution repository located in the `security-jwt-quickstart` {quickstarts-tree-url}/security-jwt-quickstart[directory] contains all of the versions we have\n"
"worked through in this quickstart guide as well as some additional endpoints that illustrate subresources with injection\n"
"of ``JsonWebToken``s and their claims into those using the CDI APIs. We suggest that you check out the quickstart solutions and\n"
"explore the `security-jwt-quickstart` directory to learn more about the {extension-name} extension features."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"Public Keys may be formatted in any of the following formats, specified in order of\n"
"precedence:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"This secret key JWK will also need to be referred to with `smallrye.jwt.verify.key.location`.\n"
"`smallrye.jwt.verify.algorithm` should be set to `HS256`/`HS384`/`HS512`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"If your application needs to accept the tokens with the encrypted claims or with the encrypted inner signed claims then all you have to do is to set\n"
"`smallrye.jwt.decrypt.key.location` pointing to the decryption key."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"If this is the only key property which is set then the incoming token is expected to contain the encrypted claims only.\n"
"If either `mp.jwt.verify.publickey` or `mp.jwt.verify.publickey.location` verification properties are also set then the incoming token is expected to contain\n"
"the encrypted inner-signed token."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"`io.smallrye.jwt.auth.principal.DefaultJWTCallerPrincipalFactory` is used by default to parse and verify JWT tokens and convert them to `JsonWebToken` principals.\n"
"It uses `MP JWT` and `smallrye-jwt` properties listed in the `Configuration` section to verify and customize JWT tokens."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid ""
"Note that `@TestSecurity` annotation must always be used and its `user` property is returned as `JsonWebToken.getName()` and `roles` property - as `JsonWebToken.getGroups()`.\n"
"`@JwtSecurity` annotation is optional and can be used to set the additional token claims."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "Property Name"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "none"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "mp.jwt.verify.publickey.algorithm"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "mp.jwt.verify.audiences"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "mp.jwt.token.cookie"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.verify.algorithm"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "false"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.token.cookie"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.token.schemes"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.token.kid"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.time-to-live"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.require.named-principal"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.path.groups"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.claims.groups"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.jwks.refresh-interval"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.jwks.forced-refresh-interval"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.expiration.grace"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.verify.aud"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.required.claims"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.decrypt.algorithm"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jwt.adoc
msgid "smallrye.jwt.token.decryption.kid"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/security-jwt.adoc:6
#, no-wrap
msgid "Using JWT RBAC"
msgstr "JWT RBAC の使用"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt.adoc:23
#, no-wrap
msgid "Quickstart"
msgstr "クイックスタート"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:25
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:31
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:33
msgid "The solution is located in the `security-jwt-quickstart` {quickstarts-tree-url}/security-jwt-quickstart[directory]."
msgstr "ソリューションは `security-jwt-quickstart` {quickstarts-tree-url}/security-jwt-quickstart[directory] にあります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:34
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:37
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:43
msgid "This command generates the Maven project and imports the `smallrye-jwt` extension, which includes the {mp-jwt} support."
msgstr "このコマンドは、RESTエンドポイントを持つMavenプロジェクトを生成し、{mp-jwt}サポートを含む `smallrye-jwt` エクステンションをインポートします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:51
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:53
#: upstream/_versions/2.7/guides/security-jwt.adoc:838
#: upstream/_versions/2.7/guides/security-jwt.adoc:943
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:66
#: upstream/_versions/2.7/guides/security-jwt.adoc:848
#: upstream/_versions/2.7/guides/security-jwt.adoc:952
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:72
#, no-wrap
msgid "Examine the JAX-RS resource"
msgstr "JAX-RSのリソース調査"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:75
msgid "Create a REST endpoint in `src/main/java/org/acme/security/jwt/TokenSecuredResource.java` with the following content:"
msgstr "RESTエンドポイントを`src/main/java/org/acme/security/jwt/TokenSecuredResource.java` に以下の内容で作成します。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:76
#, no-wrap
msgid "REST Endpoint V1"
msgstr "REST エンドポイント V1"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:132
msgid "Here we inject the JsonWebToken interface, an extension of the java.security.Principal interface that provides access to the claims associated with the current authenticated token."
msgstr "ここでは、現在認証されているトークンに関連付けられたクレームへのアクセスを提供する java.security.Principal インターフェイスのエクステンションである JsonWebToken インターフェイスを挿入します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:133
msgid "@PermitAll is a JSR 250 common security annotation that indicates that the given endpoint is accessible by any caller, authenticated or not."
msgstr "@PermitAll は、JSR 250 の一般的なセキュリティーアノテーションであり、認証されているかどうかに関係なく、特定のエンドポイントにすべての呼び出し元がアクセスできることを示します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:134
msgid "Here we inject the JAX-RS SecurityContext to inspect the security state of the call and use a `getResponseString()` function to populate a response string."
msgstr "ここでは、JAX-RS SecurityContext を挿入して呼び出しのセキュリティー状態を検査し、`getResponseString()` 関数を使用してレスポンス文字列を入力します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:135
msgid "Here we check if the call is insecure by checking the request user/caller `Principal` against null."
msgstr "ここでは、リクエストのユーザー/呼び出し元の `Principal` を null と照合して、呼び出しが安全でないかどうかを確認します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:136
msgid "Here we check that the Principal and JsonWebToken have the same name since JsonWebToken does represent the current Principal."
msgstr "ここでは、JsonWebToken が現在の Principal を表しているため、Principal と JsonWebToken が同じ名前であることを確認します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:137
msgid "Here we get the Principal name."
msgstr "ここで、Principal の名前を取得します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:138
msgid "The reply we build up makes use of the caller name, the `isSecure()` and `getAuthenticationScheme()` states of the request `SecurityContext`, and whether a non-null `JsonWebToken` was injected."
msgstr "構築した応答では、呼び出し元の名前、リクエスト `SecurityContext` の `isSecure()` と `getAuthenticationScheme()` の状態、null 以外の `JsonWebToken` が挿入されたかどうかを利用します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:139
#, no-wrap
msgid "Run the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:142
msgid "Now we are ready to run our application. Use:"
msgstr "これで、アプリケーションを実行する準備が整いました。以下を使用してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:146
msgid "and you should see output similar to:"
msgstr "次のような出力が得られるはずです。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:147
#, no-wrap
msgid "quarkus:dev Output"
msgstr "quarkus:dev 出力"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:163
msgid "Now that the REST endpoint is running, we can access it using a command line tool like curl:"
msgstr "REST エンドポイントが実行されているので、curl のようなコマンドラインツールを使ってアクセスすることができます。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:164
#, no-wrap
msgid "curl command for /secured/permit-all"
msgstr " /secured/permit-all に対するcurl コマンド"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:175
msgid "user name is anonymous"
msgstr "ユーザー名は anonymous (匿名) です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:176
msgid "isHttps is false as https is not used"
msgstr "isHttps は https を使用しないので false です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:177
msgid "authScheme is null"
msgstr "authScheme は null です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:178
msgid "hasJWT is false"
msgstr "hasJWTは false です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:180
msgid "Use Ctrl-C to stop the Quarkus server."
msgstr "Ctrl-Cを使用してQuarkusサーバーを停止します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:182
msgid "So now let's actually secure something. Take a look at the new endpoint method `helloRolesAllowed` in the following:"
msgstr "では実際に何かをセキュア化してみましょう。下記の新しいエンドポイントメソッド `helloRolesAllowed` を見てみましょう。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:183
#, no-wrap
msgid "REST Endpoint V2"
msgstr "REST エンドポイント V2"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:247
msgid "Here we inject `JsonWebToken`"
msgstr "ここでは、`JsonWebToken` を挿入します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:248
msgid "This new endpoint will be located at /secured/roles-allowed"
msgstr "この新しいエンドポイントは /secured/roles-allowed に存在します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:251
msgid "Here we build the reply the same way as in the `hello` method but also add a value of the JWT `birthdate` claim by directly calling the injected `JsonWebToken`."
msgstr "ここでは、`hello` メソッドと同じ方法で応答を作成しますが、挿入された `JsonWebToken` を直接呼び出すことで JWT `birthdate` クレームの値を追加します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:253
msgid "After you make this addition to your `TokenSecuredResource`, rerun the `./mvnw compile quarkus:dev` command, and then try `curl -v http://127.0.0.1:8080/secured/roles-allowed; echo` to attempt to access the new endpoint. Your output should be:"
msgstr "`TokenSecuredResource` にこの追加を行った後、`./mvnw compile quarkus:dev` コマンドを再実行してから、`curl -v http://127.0.0.1:8080/secured/roles-allowed; echo` を試行して新規エンドポイントへのアクセスを試みてください。出力は次のようになります。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:254
#, no-wrap
msgid "curl command for /secured/roles-allowed"
msgstr "/secured/roles-allowed の curl コマンド"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:277
msgid "Excellent, we have not provided any JWT in the request, so we should not be able to access the endpoint, and we were not. Instead we received an HTTP 401 Unauthorized error. We need to obtain and pass in a valid JWT to access that endpoint. There are two steps to this, 1) configuring our {extension-name} extension with information on how to validate a JWT, and 2) generating a matching JWT with the appropriate claims."
msgstr "素晴らしいですね。リクエストに JWT トークンを提供していないため、エンドポイントにはアクセスできないはずであり、実際にアクセスできませんでした。代わりに HTTP 401 Unauthorized エラーを受け取りました。エンドポイントにアクセスするためには、有効な JWT を取得して渡す必要があります。これには 2 つのステップがあります。1) {extension-name} エクステンションに JWT の検証方法に関する情報を設定し、2) 適切なクレームを持つ適合する JWT を生成します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:278
#, no-wrap
msgid "Configuring the {extension-name} Extension Security Information"
msgstr "{extension-name} エクステンションセキュリティー情報の設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:281
msgid "Create a `security-jwt-quickstart/src/main/resources/application.properties` with the following content:"
msgstr "次の内容で `security-jwt-quickstart/src/main/resources/application.properties` を作成します。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:282
#, no-wrap
msgid "application.properties for TokenSecuredResource"
msgstr "TokenSecuredResource の application.properties"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:291
msgid "We are setting public key location to point to a classpath publicKey.pem location. We will add this key in part B, <<Adding a Public Key>>."
msgstr "クラスパス publicKey.pem の場所を指すように公開鍵の場所を設定しています。この鍵はパート B <<Adding a Public Key>> で追加します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:292
msgid "We are setting the issuer to the URL string `https://example.com/issuer`."
msgstr "発行者を URL 文字列 `https://example.com/issuer` に設定しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:293
msgid "We are including the public key as a resource in the native executable."
msgstr "ネイティブ実行可能ファイルのリソースとして公開鍵を含めています。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:294
#, no-wrap
msgid "Adding a Public Key"
msgstr "公開鍵の追加"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:303
#, no-wrap
msgid "RSA Public Key PEM Content"
msgstr "RSA 公開鍵 PEM コンテンツ"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:317
#, no-wrap
msgid "Generating a JWT"
msgstr "JWT の生成"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:320
msgid "Often one obtains a JWT from an identity manager like https://www.keycloak.org/[Keycloak], but for this quickstart we will generate our own using the JWT generation API provided by `smallrye-jwt` (see xref:smallrye-jwt-build.adoc[Generate JWT tokens with SmallRye JWT] for more information)."
msgstr "多くの場合、https://www.keycloak.org/[Keycloak] などの ID マネージャーから JWT を取得しますが、このクイックスタートでは、`smallrye-jwt` が提供する JWT 生成 API を使用して独自の JWT を生成します (詳細は xref:smallrye-jwt-build.adoc[SmallRye JWT を使用した JWT トークンの生成] を参照してください)。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:322
#, fuzzy
msgid "Take the code from the following listing and place into `security-jwt-quickstart/src/main/java/org/acme/security/jwt/GenerateToken.java`:"
msgstr "次のリストにあるコードを、 `security-jwt-quickstart/src/main/java/org/acme/security/jwt/GenerateToken.java` に記述してください:"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:323
#, no-wrap
msgid "GenerateToken main Driver Class"
msgstr "GenerateToken メインドライバークラス"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:356
msgid "The `group` claim provides the groups and top-level roles associated with the JWT bearer."
msgstr "`group` クレームは、JWT ベアラーに関連付けられたグループとトップレベルのロールを提供します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:357
msgid "The `birthday` claim. It can be considered to be a sensitive claim so you may want to consider encrypting the claims, see xref:smallrye-jwt-build.adoc[Generate JWT tokens with SmallRye JWT]."
msgstr "`birthday` クレームです。機密性の高いクレームと見なすことができるため、クレームの暗号化を検討することをお勧めします。xref:smallrye-jwt-build.adoc[SmallRye JWT を使用した JWT トークンの生成] を参照してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:359
msgid "Note for this code to work we need the content of the RSA private key that corresponds to the public key we have in the TokenSecuredResource application. Take the following PEM content and place it into `security-jwt-quickstart/src/test/resources/privateKey.pem`:"
msgstr "このコードが機能するには、TokenSecuredResource アプリケーションにある公開鍵に対応する RSA 秘密鍵のコンテンツが必要であることに注意してください。次の PEM コンテンツを取得し、`security-jwt-quickstart/src/test/resources/privateKey.pem` に配置します。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:360
#, no-wrap
msgid "RSA Private Key PEM Content"
msgstr "RSA 秘密鍵 PEM コンテンツ"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:394
msgid "We will use a `smallrye.jwt.sign.key.location` property to point to this private signing key."
msgstr "`smallrye.jwt.sign.key.location` プロパティーを使用して、この秘密署名鍵を指します。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:396
#, no-wrap
msgid "Generating Keys with OpenSSL"
msgstr "OpenSSL を使用した鍵の生成"

#. type: delimited block =
#: upstream/_versions/2.7/guides/security-jwt.adoc:399
msgid "It is also possible to generate a public and private key pair using the OpenSSL command line tool."
msgstr "OpenSSL コマンドラインツールを使用して、公開鍵と秘密鍵のペアを生成することもできます。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:400
#, no-wrap
msgid "openssl commands for generating keys"
msgstr "鍵を生成するための openssl コマンド"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:408
msgid "An additional step is needed for generating the private key for converting it into the PKCS#8 format."
msgstr "秘密鍵を生成して PKCS#8 形式に変換するには、追加の手順が必要です。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:409
#, no-wrap
msgid "openssl command for converting private key"
msgstr "秘密鍵を変換するための openssl コマンド"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:416
msgid "You can use the generated pair of keys instead of the keys used in this quickstart."
msgstr "このクイックスタートで使用される鍵の代わりに、生成された鍵のペアを使用できます。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/security-jwt.adoc:419
msgid "Now we can generate a JWT to use with `TokenSecuredResource` endpoint. To do this, run the following command:"
msgstr "これで、`TokenSecuredResource` エンドポイントで使用する JWT を生成できます。これを行うには、次のコマンドを実行します。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:422
#, no-wrap
msgid "Sample JWT Generation Output"
msgstr "JWT 生成出力のサンプル"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:433
#, no-wrap
msgid "Finally, Secured Access to /secured/roles-allowed"
msgstr "/secured/roles-allowed へのセキュリティーで保護されたアクセス"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:435
msgid "Now let's use this to make a secured request to the /secured/roles-allowed endpoint. Make sure you have the Quarkus server still running in dev mode, and then run the following command, making sure to use your version of the generated JWT from the previous step:"
msgstr "これを使用して、/secured/roles-allowed エンドポイントにセキュリティーで保護されたリクエストを作成しましょう。Quarkus サーバーが引き続き開発モードで実行されていることを確認してから、次のコマンドを実行し、前の手順で生成された自分の JWT バージョンを使用していることを確認します。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:441
#, no-wrap
msgid "curl Command for /secured/roles-allowed With JWT"
msgstr "JWT を含む /secured/roles-allowed の curl コマンド"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:449
msgid "Success! We now have:"
msgstr "成功! これで、以下が得られます"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:451
msgid "a non-anonymous caller name of jdoe@quarkus.io"
msgstr "jdoe@quarkus.io という非匿名の発信者名"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:452
msgid "an authentication scheme of Bearer"
msgstr "ベアラーの認証スキーム"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:453
msgid "a non-null JsonWebToken"
msgstr "非 null の JsonWebToken"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:454
msgid "birthdate claim value"
msgstr "birthdate クレームの値"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:455
#, no-wrap
msgid "Using the JsonWebToken and Claim Injection"
msgstr "JsonWebToken とクレーム挿入の使用"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:545
msgid "Here we inject the JsonWebToken."
msgstr "ここでは、JsonWebToken を挿入します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:546
msgid "Here we inject the `birthday` claim as `String` - this is why the `@RequestScoped` scope is now required."
msgstr "ここでは、`birthday` クレームを `String` として挿入します。これが `@RequestScoped` スコープが必要になった理由です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:547
msgid "Here we use the injected `birthday` claim to build the final reply."
msgstr "ここでは、挿入された `birthday` クレームを使用して、最終的な応答を作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:549
msgid "Now generate the token again and run:"
msgstr "次に、トークンを再度生成して実行します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:561
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:564
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:568
msgid "And executed using `java -jar target/quarkus-app/quarkus-run.jar`:"
msgstr "そして、`java -jar target/quarkus-app/quarkus-run.jar` を使って実行されます。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:569
#, no-wrap
msgid "Runner jar Example"
msgstr "ランナー jar の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:578
msgid "You can also generate the native executable with:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます。"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt.adoc:581
#, no-wrap
msgid "Native Executable Example"
msgstr "ネイティブ実行可能ファイル例"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:606
#, no-wrap
msgid "Explore the Solution"
msgstr "ソリューションの探索"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt.adoc:613
#, no-wrap
msgid "Reference Guide"
msgstr "リファレンスガイド"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:616
#, no-wrap
msgid "Supported Injection Scopes"
msgstr "サポートされている注入スコープ"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:619
msgid "`@ApplicationScoped`, `@Singleton` and `@RequestScoped` outer bean injection scopes are all supported when an `org.eclipse.microprofile.jwt.JsonWebToken` is injected, with the `@RequestScoped` scoping for `JsonWebToken` enforced to ensure the current token is represented."
msgstr "`org.eclipse.microprofile.jwt.JsonWebToken` が注入される場合、`@ApplicationScoped`、`@Singleton`、および `@RequestScoped` の外部 Bean 注入スコープがすべてサポートされます。また、現在のトークンが示されていることを確認するために、`JsonWebToken` の `@RequestScoped` スコープが適用されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:621
msgid "However, `@RequestScoped` must be used when the individual token claims are injected as simple types such as `String`, for example:"
msgstr "ただし、個々のトークンクレームが `String` などの単純な型として挿入される場合は、`@RequestScoped` を使用する必要があります。以下はその例です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:641
msgid "Note you can also use the injected `JsonWebToken` to access the individual claims in which case setting `@RequestScoped` is not necessary."
msgstr "注入された `JsonWebToken` を使用して個々のクレームにアクセスすることもできます。その場合、`@RequestScoped` を設定する必要はありません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:643
msgid "Please see link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.html#_cdi_injection_requirements[MP JWT CDI Injection Requirements] for more details."
msgstr "詳細については、 link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.html#_cdi_injection_requirements[MP JWT CDI 注入要件] を参照してください。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:644
#, no-wrap
msgid "Supported Public Key Formats"
msgstr "サポートされている公開鍵形式"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:650
msgid "Public Key Cryptography Standards #8 (PKCS#8) PEM"
msgstr "Public Key Cryptography Standards #8 (PKCS#8) PEM"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:651
msgid "JSON Web Key (JWK)"
msgstr "JSON Web Key (JWK)"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:652
msgid "JSON Web Key Set (JWKS)"
msgstr "JSON Web Key Set (JWKS)"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:653
msgid "JSON Web Key (JWK) Base64 URL encoded"
msgstr "JSON Web Key (JWK) Base64 URL エンコード"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:654
msgid "JSON Web Key Set (JWKS) Base64 URL encoded"
msgstr "JSON Web Key Set (JWKS) Base64 URL エンコード"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:655
#, no-wrap
msgid "Dealing with the verification keys"
msgstr "検証鍵の処理"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:658
msgid "If you need to verify the token signature using the assymetric RSA or Elliptic Curve (EC) key then use the `mp.jwt.verify.publickey.location` property to refer to the local or remote verification key."
msgstr "非対称 RSA または楕円曲線 (EC) 鍵を使用してトークンの署名を検証する必要がある場合は、`mp.jwt.verify.publickey.location` プロパティーを使用してローカルまたはリモートの検証鍵を参照します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:660
msgid "Use `mp.jwt.verify.publickey.algorithm` to customize the verification algorithm (default is `RS256`), for example, set it to `ES256` when working with the EC keys."
msgstr "`mp.jwt.verify.publickey.algorithm` を使用して検証アルゴリズムをカスタマイズします (デフォルトは `RS256`)。たとえば、EC 鍵を操作する場合は `ES256` に設定します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:662
msgid "If you need to verify the token signature using the symmetric secret key then either a `JSON Web Key` (JWK) or `JSON Web Key Set` (JWK Set) format must be used to represent this secret key, for example:"
msgstr "対称秘密鍵を使用してトークン署名を検証する必要がある場合は、JSON Web 鍵 (JWK) または JSON Web 鍵セット (JWK セット) 形式のいずれかを使用して、この秘密鍵を表す必要があります。以下はその例です。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:679
#, no-wrap
msgid "Parse and Verify JsonWebToken with JWTParser"
msgstr "JWTParser を使用した JsonWebToken の解析と検証"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:682
msgid "If the JWT token can not be injected, for example, if it is embedded in the service request payload or the service endpoint acquires it out of band, then one can use `JWTParser`:"
msgstr "JWT トークンを挿入できない場合、たとえば、サービスリクエストペイロードに埋め込まれていたり、サービスエンドポイントが帯域外でトークンを取得する場合、`JWTParser` を使用できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:697
msgid "You can also use it to customize the way the token is verified or decrypted. For example, one can supply a local `SecretKey`:"
msgstr "これを使用して、トークンの検証または復号化の方法をカスタマイズすることもできます。たとえば、ローカルの `SecretKey` を指定できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:734
msgid "Please also see the <<add-smallrye-jwt, How to Add SmallRye JWT directly>> section about using `JWTParser` without the `HTTP` support provided by `quarkus-smallrye-jwt`."
msgstr "<<add-smallrye-jwt, How to Add SmallRye JWT directly>> セクションで、`quarkus-smallrye-jwt` によって提供される `HTTP` サポートなしで `JWTParser` を使用する方法についても参照してください。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:735
#, no-wrap
msgid "Token Decryption"
msgstr "トークン復号化"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:745
msgid "See xref:smallrye-jwt-build.adoc[Generate JWT tokens with SmallRye JWT] and learn how to generate the encrypted or inner-signed and then encrypted tokens fast."
msgstr "xref:smallrye-jwt-build.adoc[Generate JWT tokens with SmallRye JWT を使用した JWT トークンの生成] を参照し、暗号化または内部署名されてから暗号化されたトークンを迅速に生成する方法を確認してください。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:746
#, no-wrap
msgid "Custom Factories"
msgstr "カスタムファクトリー"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:752
msgid "If you need to provide your own factory, for example, to avoid verifying the tokens again which have already been verified by the firewall, then you can either use a `ServiceLoader` mechanism by providing a `META-INF/services/io.smallrye.jwt.auth.principal.JWTCallerPrincipalFactory` resource or simply have an `Alternative` CDI bean implementation like this one:"
msgstr "たとえば、ファイアウォールによってすでに検証されているトークンの再検証を回避するために独自のファクトリーを提供する必要がある場合は、`META-INF/services/io.smallrye.jwt.auth.principal.JWTCallerPrincipalFactory` リソースを提供すして `ServiceLoader` メカニズムを使用するか、単純に次のような `Alternative` CDI Bean 実装を持つことができます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:786
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:789
msgid "Please see xref:security-openid-connect-client.adoc#token-propagation[Token Propagation] section about the Bearer access token propagation to the downstream services."
msgstr "下流サービスへのベアラアクセストークンの伝播については、xref:security-openid-connect-client.adoc#token-propagation[トークン伝播] の項を参照してください。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:791
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Title ====
#: upstream/_versions/2.7/guides/security-jwt.adoc:794
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:797
msgid "If you configure `mp.jwt.verify.publickey.location` to point to HTTPS or HTTP based JsonWebKey (JWK) set then you can use the same approach as described in the xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] `Wiremock` section but only change the `application.properties` to use MP JWT configuration properties instead:"
msgstr "HTTPS または HTTP ベースの JsonWebKey (JWK) セットを指すように `mp.jwt.verify.publickey.location` を設定する場合は、xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer トークン統合テスト] の `Wiremock` セクションで説明したのと同じアプローチを使用できますが、その場合は代わりに MPJWT 設定プロパティーを使用するように `application.properties` を変更します。"

#. type: Title ====
#: upstream/_versions/2.7/guides/security-jwt.adoc:806
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:809
#, fuzzy
msgid "If you work with Keycloak and configure `mp.jwt.verify.publickey.location` to point to HTTPS or HTTP based JsonWebKey (JWK) set then you can use the same approach as described in the xref:security-openid-connect.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] `Keycloak` section but only change the `application.properties` to use MP JWT configuration properties instead:"
msgstr "Keycloakを使用し、 `mp.jwt.verify.publickey.location` 、HTTPSまたはHTTPベースのJsonWebKey（JWK）セットを指すように設定する場合、OpenID Connect xref:security-openid-connect.adoc#integration-testing-keycloak[Bearer Token Integration testing] `Keycloak` のセクションで説明したのと同じ方法を使用できますが、代わりにMP JWT設定プロパティを使用するように `application.properties` を変更するだけです:"

#. type: Title ====
#: upstream/_versions/2.7/guides/security-jwt.adoc:818
#, no-wrap
msgid "Local Public Key"
msgstr "ローカル公開鍵"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:821
msgid "You can use the same approach as described in the xref:security-openid-connect#integration-testing.adoc[OpenID Connect Bearer Token Integration testing] `Local Public Key` section but only change the `application.properties` to use MP JWT configuration properties instead:"
msgstr "xref:security-openid-connect#integration-testing.adoc[OpenID Connect Bearer トークン統合テスト] の `Local Public Key` セクションで説明したのと同じアプローチを使用できますが、その場合は代わりに MPJWT 設定プロパティーを使用するように `application.properties` を変更します。"

#. type: Title ====
#: upstream/_versions/2.7/guides/security-jwt.adoc:833
#, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity アノテーション"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:836
msgid "Add the following dependency:"
msgstr "次の依存関係を追加します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:854
msgid "and write a test code like this one:"
msgstr "次のようなテストコードを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:891
msgid "where `ProtectedResource` class may look like this:"
msgstr "ここで、`ProtectedResource` クラスは次のようになります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:919
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:922
msgid "Please enable `io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator` `TRACE` level logging to see more details about the token verification or decryption errors:"
msgstr "トークンの検証または復号化エラーの詳細を確認するには、`io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator` `TRACE` レベルのログを有効にしてください。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:929
#, no-wrap
msgid "Proactive Authentication"
msgstr "プロアクティブ認証"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:932
msgid "If you'd like to skip the token verification when the public endpoint methods are invoked then please disable the xref:security-built-in-authentication.adoc#proactive-authentication[proactive authentication]."
msgstr "パブリックエンドポイントメソッドが呼び出されたときにトークンの検証をスキップする場合は、xref:security-built-in-authentication.adoc#proactive-authentication[プロアクティブ認証] を無効にしてください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:934
msgid "Note that you can't access the injected `JsonWebToken` in the public methods if the token verification has not been done."
msgstr "トークンの検証が実行されていない場合、パブリックメソッドで挿入された `JsonWebToken` にアクセスできないことに注意してください。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:936
#, no-wrap
msgid "How to Add SmallRye JWT directly"
msgstr "SmallRye JWT を直接追加する方法"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:939
msgid "If you work with Quarkus extensions which do not support `HTTP` (for example, `Quarkus GRPC`) or provide their own extension specific `HTTP` support conflicting with the one offered by `quarkus-smallrye-jwt` and `Vert.x HTTP` (example, `Quarkus Amazon Lambda`) and you would like to <<jwt-parser, Parse and Verify JsonWebToken with JWTParser>> then please use `smallrye-jwt` directly instead of `quarkus-smallrye-jwt`."
msgstr "`HTTP` をサポートしない Quarkus エクステンション (たとえば `Quarkus GRPC`) を使用する、または `quarkus-smallrye-jwt` や `Vert.x HTTP` によって提供されるものと競合する独自のエクステンション固有の `HTTP` サポート (たとえば `Quarkus Amazon Lambda`) を提供する場合で、<<jwt-parser, Parse and Verify JsonWebToken with JWTParser>> を行う場合、`quarkus-smallrye-jwt` の代わりに `smallrye-jwt` を直接使用してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:941
msgid "Add this dependency:"
msgstr "次の依存関係を追加します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:958
msgid "and update `application.properties` to get all the CDI producers provided by `smallrye-jwt` included as follows:"
msgstr "さらに、`application.properties` を更新して、`smallrye-jwt` によって提供されるすべての CDI プロデューサーを次のように含めます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt.adoc:966
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:968
#, no-wrap
msgid "Quarkus configuration"
msgstr "Quarkus の設定"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:972
#, no-wrap
msgid "MicroProfile JWT configuration"
msgstr "MicroProfile JWT の設定"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:976
#: upstream/_versions/2.7/guides/security-jwt.adoc:993
#, no-wrap
msgid "Default"
msgstr "デフォルト"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:977
#: upstream/_versions/2.7/guides/security-jwt.adoc:994
#, no-wrap
msgid "Description"
msgstr "説明"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:977
#, no-wrap
msgid "mp.jwt.verify.publickey"
msgstr "mp.jwt.verify.publickey"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:978
#, no-wrap
msgid "The `mp.jwt.verify.publickey` config property allows the Public Key text itself to be supplied as a string.  The Public Key will be parsed from the supplied string in the order defined in section <<Supported Public Key Formats>>."
msgstr "`mp.jwt.verify.publickey` 設定プロパティーを使用すると、公開鍵テキスト自体を文字列として提供できます。公開鍵は、<<Supported Public Key Formats>> セクションで定義された順序で、提供された文字列から解析されます。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:978
#, no-wrap
msgid "mp.jwt.verify.publickey.location"
msgstr "mp.jwt.verify.publickey.location"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:979
#, no-wrap
msgid "Config property allows for an external or internal location of Public Key to be specified.  The value may be a relative path or a URL. If the value points to an HTTPS based JWK set then, for it to work in native mode, the `quarkus.ssl.native` property must also be set to `true`, see xref:native-and-ssl.adoc[Using SSL With Native Executables] for more details."
msgstr "Config プロパティーを使用すると、公開鍵の外部または内部の場所を指定できます。値は相対パスまたは URL の場合があります。値が HTTPS ベースの JWK セットを指している場合、ネイティブモードで機能するには、`quarkus.ssl.native` プロパティーも `true` に設定する必要があります。詳細については xref:native-and-ssl.adoc[ネイティブ実行可能ファイルで SSL を使用する場合] を参照してください。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:979
#, no-wrap
msgid "`RS256`"
msgstr "`RS256`"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:980
#, no-wrap
msgid "Signature algorithm. Set it to `ES256` to support the Elliptic Curve signature algorithm."
msgstr "署名アルゴリズム。 `ES256` に設定して、楕円曲線署名アルゴリズムをサポートします。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:980
#, no-wrap
msgid "mp.jwt.decrypt.key.location"
msgstr "mp.jwt.decrypt.key.location"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:981
#, no-wrap
msgid "Config property allows for an external or internal location of Private Decryption Key to be specified."
msgstr "Config プロパティーを使用すると、秘密復号化鍵の外部または内部の場所を指定できます。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:981
#, no-wrap
msgid "mp.jwt.verify.issuer"
msgstr "mp.jwt.verify.issuer"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:982
#, no-wrap
msgid "Config property specifies the value of the `iss` (issuer) claim of the JWT that the server will accept as valid."
msgstr "Config プロパティーは、サーバーが有効として受け入れる JWT の `iss` (発行者) クレームの値を指定します。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:983
#, no-wrap
msgid "Comma separated list of the audiences that a token `aud` claim may contain."
msgstr "トークン `aud` クレームに含まれる可能性のあるオーディエンスのコンマ区切りリスト。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:983
#, no-wrap
msgid "mp.jwt.token.header"
msgstr "mp.jwt.token.header"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:983
#: upstream/_versions/2.7/guides/security-jwt.adoc:999
#, no-wrap
msgid "`Authorization`"
msgstr "`Authorization`"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:984
#, no-wrap
msgid "Set this property if another header such as `Cookie` is used to pass the token."
msgstr "`Cookie` などの別のヘッダーを使用してトークンを渡す場合は、このプロパティーを設定します。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:985
#, no-wrap
msgid "Name of the cookie containing a token. This property will be effective only if `mp.jwt.token.header` is set to `Cookie`."
msgstr "トークンを含む Cookie の名前。このプロパティーは、`mp.jwt.token.header` が `Cookie` に設定されている場合にのみ有効になります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jwt.adoc:987
#, no-wrap
msgid "Additional SmallRye JWT configuration"
msgstr "追加の SmallRye JWT 設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:990
msgid "SmallRye JWT provides more properties which can be used to customize the token processing:"
msgstr "SmallRye JWTには、トークン処理をカスタマイズするために使用できる、より多くのプロパティーが用意されています。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:994
#, no-wrap
msgid "smallrye.jwt.verify.key.location"
msgstr "smallrye.jwt.verify.key.location"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:994
#, no-wrap
msgid "NONE"
msgstr "NONE"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:995
#, no-wrap
msgid "Location of the verification key which can point to both public and secret keys. Secret keys can only be in the JWK format. Note that 'mp.jwt.verify.publickey.location' will be ignored if this property is set."
msgstr "公開鍵と秘密鍵の両方を指すことができる検証鍵の場所。秘密鍵は JWK 形式でのみ使用できます。このプロパティーが設定されている場合、'mp.jwt.verify.publickey.location' は無視されることに注意してください。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:996
#, no-wrap
msgid "Signature algorithm. This property should only be used for setting a required symmetric algorithm such as `HS256`. It is deprecated for setting asymmetric algorithms such as `ES256` - use 'mp.jwt.verify.publickey.algorithm' instead."
msgstr "署名アルゴリズム。このプロパティーは、`HS256` などの必要な対称アルゴリズムを設定するためにのみ使用する必要があります。`ES256` などの非対称アルゴリズムの設定に使用することは推奨されません。代わりに 'mp.jwt.verify.publickey.algorithm' を使用してください。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:996
#, no-wrap
msgid "smallrye.jwt.verify.key-format"
msgstr "smallrye.jwt.verify.key-format"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:996
#, no-wrap
msgid "`ANY`"
msgstr "`ANY`"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:997
#, no-wrap
msgid "Set this property to a specific key format such as `PEM_KEY`, `PEM_CERTIFICATE`, `JWK` or `JWK_BASE64URL` to optimize the way the verification key is loaded."
msgstr "このプロパティーを `PEM_KEY`、`PEM_CERTIFICATE`、`JWK`、`JWK_BASE64URL` などの特定のキー鍵形式に設定して、検証鍵のロード方法を最適化します。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:997
#, no-wrap
msgid "smallrye.jwt.verify.relax-key-validation"
msgstr "smallrye.jwt.verify.relax-key-validation"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:998
#, no-wrap
msgid "Relax the validation of the verification keys, setting this property to `true` will allow public RSA keys with the length less than 2048 bit."
msgstr "検証鍵の検証を緩和します。このプロパティーを `true` に設定すると、2048 ビット未満の長さの公開 RSA 鍵が許可されます。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:998
#, no-wrap
msgid "smallrye.jwt.verify.certificate-thumbprint"
msgstr "smallrye.jwt.verify.certificate-thumbprint"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:999
#, no-wrap
msgid "If this property is enabled then a signed token must contain either 'x5t' or 'x5t#S256' X509Certificate thumbprint headers. Verification keys can only be in JWK or PEM Certificate key formats in this case. JWK keys must have a 'x5c' (Base64-encoded X509Certificate) property set."
msgstr "このプロパティーが有効になっている場合、署名されたトークンには 'x5t' または 'x5t#S256' X509Certificatex5t 拇印ヘッダーが含まれている必要があります。この場合、検証鍵は JWK または PEM 証明書鍵形式でのみ使用できます。JWK 鍵には、'x5c' (Base64 でエンコードされた X509Certificate) プロパティーが設定されている必要があります。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:999
#, no-wrap
msgid "smallrye.jwt.token.header"
msgstr "smallrye.jwt.token.header"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1000
#, no-wrap
msgid "Set this property if another header such as `Cookie` is used to pass the token. This property is deprecated - use 'mp.jwt.token.header'."
msgstr "`Cookie` などの別のヘッダーを使用してトークンを渡す場合は、このプロパティーを設定します。このプロパティーは推奨されていません。'mp.jwt.token.header' を使用してください。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1001
#, no-wrap
msgid "Name of the cookie containing a token. This property will be effective only if `smallrye.jwt.token.header` is set to `Cookie`. This property is deprecated - use 'mp.jwt.token.cookie`."
msgstr "トークンを含む Cookie の名前。このプロパティーは、`smallrye.jwt.token.header` が `Cookie` に設定されている場合にのみ有効になります。このプロパティーは推奨されていません。'mp.jwt.token.cookie` を使用してください。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1001
#, no-wrap
msgid "smallrye.jwt.always-check-authorization"
msgstr "smallrye.jwt.always-check-authorization"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1002
#, no-wrap
msgid "Set this property to `true` for `Authorization` header be checked even if the `smallrye.jwt.token.header` is set to `Cookie` but no cookie with a `smallrye.jwt.token.cookie` name exists."
msgstr "`smallrye.jwt.token.header` が `Cookie` に設定されていても、名前が `smallrye.jwt.token.cookie` の Cookie が存在しない場合、`Authorization` ヘッダーがチェックされるようにこのプロパティーを `true` に設定します。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1002
#, no-wrap
msgid "`Bearer`"
msgstr "`Bearer`"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1003
#, no-wrap
msgid "Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`."
msgstr "`DPoP` などの単一または複数の代替スキームを含むコンマ区切りのリスト。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1004
#, no-wrap
msgid "Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching `kid` header."
msgstr "鍵の識別子。設定されている場合、検証 JWK 鍵とすべての JWT トークンには、一致する `kid` ヘッダーが必要です。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1005
#, no-wrap
msgid "The maximum number of seconds that a JWT may be issued for use. Effectively, the difference between the expiration date of the JWT and the issued at date must not exceed this value. Setting this property to a non-positive value relaxes the requirement for the token to have a valid 'iat' (issued at) claim."
msgstr "JWT を使用するために発行できる最大秒数。事実上、JWT の有効期限と発行日との差はこの値を超えてはなりません。このプロパティーを正でない値に設定すると、トークンが有効な 'iat' (で発行された) クレームを持つための要件が緩和されます。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1005
#, no-wrap
msgid "`true`"
msgstr "`true`"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1006
#, no-wrap
msgid "If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in SmallRye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name."
msgstr "アプリケーションが名前を返す `java.security.Principal` に依存している場合、トークンには `upn` または `preferred_username` または `sub` クレームが設定されている必要があります。このプロパティーを設定すると、アプリケーションコードが null 以外の `Principal` 名を確実に処理するためにこれらのクレームのいずれも使用できない場合に、SmallRye JWT は例外を出力します。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1006
#, no-wrap
msgid "smallrye.jwt.path.sub"
msgstr "smallrye.jwt.path.sub"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1007
#, no-wrap
msgid "Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims."
msgstr "件名を含むクレームへのパス。これはトップレベルの JSON オブジェクトから始まり、複数のセグメントを含めることができます。各セグメントは JSON オブジェクト名のみを表します (例: `realms/subject`)。このプロパティーは、トークンに sub クレームがないが、サブジェクトが別のクレームに設定されている場合に使用できます。namespace で修飾されたクレームには二重引用符を使用します。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1007
#, no-wrap
msgid "smallrye.jwt.claims.sub"
msgstr "smallrye.jwt.claims.sub"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1008
#, no-wrap
msgid "This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set."
msgstr "現在のトークンに使用可能な標準またはカスタムの `sub` クレームがない場合に、このプロパティーを使用して、デフォルトのサブクレーム値を設定できます。事実上、このプロパティーを使用して、`upn`、`preferred_username`、`sub`クレームが設定されていない場合に `java.security.Principal` 名をカスタマイズできます。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1009
#, no-wrap
msgid "Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims."
msgstr "グループを含むクレームへのパス。これはトップレベルの JSON オブジェクトから始まり、複数のセグメントを含めることができます。各セグメントは JSON オブジェクト名のみを表します (例: `realm/groups`)。このプロパティーは、トークンに 'groups' クレームがないが、グループが別のクレームに設定されている場合に使用できます。namespace で修飾されたクレームには二重引用符を使用します。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1009
#, no-wrap
msgid "smallrye.jwt.groups-separator"
msgstr "smallrye.jwt.groups-separator"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1009
#, no-wrap
msgid "' '"
msgstr "' '"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1010
#, no-wrap
msgid "Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence."
msgstr "複数のグループ値を含む可能性のある文字列を分割するためのセパレーター。これは、`smallrye.jwt.path.groups` プロパティーが値が文字列のカスタムクレームを指している場合にのみ使用されます。標準の OAuth2 `scope` クレームにはスペースで区切られたシーケンスが含まれている可能性があるため、デフォルト値はスペース 1 個です。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1011
#, no-wrap
msgid "This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available."
msgstr "このプロパティーを使用して、現在のトークンに使用可能な標準またはカスタムのグループクレームがない場合に、デフォルトのグループクレーム値を設定できます。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1011
#: upstream/_versions/2.7/guides/security-jwt.adoc:1013
#, no-wrap
msgid "60"
msgstr "60"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1012
#, no-wrap
msgid "JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTP or HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint."
msgstr "JWK キャッシュの更新間隔 (分単位)。`mp.jwt.verify.publickey.location` が HTTP または HTTPS URL ベースの JWK セットを指し、正の `max-age` パラメーター値を持つ HTTP `Cache-Control` レスポンスヘッダーが JWK HTTPS エンドポイントから返されない限り無視されます。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1012
#, no-wrap
msgid "30"
msgstr "30"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1013
#, no-wrap
msgid "Forced JWK cache refresh interval in minutes which is used to restrict the frequency of the forced refresh attempts which may happen when the token verification fails due to the cache having no JWK key with a `kid` property matching the current token's `kid` header. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTP or HTTPS URL based JWK set."
msgstr "強制 JWK キャッシュ更新間隔 (分単位)。現在のトークンの `kid` ヘッダーと一致する `kid` プロパティーを持つ JWK キーがキャッシュにないためにトークンの検証が失敗した場合に発生する可能性がある強制更新の試行頻度を制限するために使用されます。`mp.jwt.verify.publickey.location` が HTTP または HTTPS URL ベースの JWK セットを指していない限り、無視されます。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1014
#, no-wrap
msgid "Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time."
msgstr "有効期限の猶予 (秒単位)。デフォルトでは、現在の時刻がトークンの有効期限から 1 分以内であれば、期限切れのトークンは引き続き受け入れられます。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1015
#, no-wrap
msgid "Comma separated list of the audiences that a token `aud` claim may contain. This property is deprecated - use `mp.jwt.verify.audiences`."
msgstr "トークン `aud` クレームに含まれる可能性のあるオーディエンスのコンマ区切りリスト。このプロパティーは推奨されません。`mp.jwt.verify.audiences` を使用してください。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1016
#, no-wrap
msgid "Comma separated list of the claims that a token must contain."
msgstr "トークンに含める必要のあるクレームのコンマ区切りリスト。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1016
#, no-wrap
msgid "smallrye.jwt.decrypt.key.location"
msgstr "smallrye.jwt.decrypt.key.location"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1017
#, no-wrap
msgid "Config property allows for an external or internal location of Private Decryption Key to be specified. This property is deprecated - use 'mp.jwt.decrypt.key.location'."
msgstr "Config プロパティーを使用すると、秘密復号化鍵の外部または内部の場所を指定できます。このプロパティーは推奨されません。'mp.jwt.decrypt.key.location' を使用してください。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1017
#, no-wrap
msgid "`RSA_OAEP`"
msgstr "`RSA_OAEP`"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1018
#, no-wrap
msgid "Decryption algorithm."
msgstr "復号化アルゴリズム。"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt.adoc:1019
#, no-wrap
msgid "Decryption Key identifier. If it is set then the decryption JWK key as well every JWT token must have a matching `kid` header."
msgstr "復号化キー識別子。設定されている場合、復号化 JWK キーとすべての JWT トークンには、一致する `kid` ヘッダーが必要です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt.adoc:1021
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:1024
msgid "link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.html[MP JWT 1.2 HTML]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.html[MP JWT 1.2 HTML]"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:1025
msgid "link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.pdf[MP JWT 1.2 PDF]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.pdf[MP JWT 1.2 PDF]"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:1026
msgid "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"
msgstr "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:1027
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:1028
msgid "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"
msgstr "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:1029
msgid "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"
msgstr "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:1030
msgid "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"
msgstr "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:1031
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:1032
msgid "xref:security.adoc#oidc-jwt-oauth2-comparison[Summary of Quarkus OIDC, JWT and OAuth2 features]"
msgstr "xref:security.adoc#oidc-jwt-oauth2-comparison[Summary of Quarkus OIDC, JWT and OAuth2 features]"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt.adoc:1032
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"
