msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"Quarkus comes with a Transaction Manager and uses it to coordinate and expose transactions to your applications.\n"
"Each extension dealing with persistence will integrate with it for you.\n"
"And you will explicitly interact with transactions via CDI.\n"
"This guide will walk you through all that."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"You don't need to worry about setting it up most of the time as extensions needing it will simply add it as a dependency.\n"
"Hibernate ORM for example will include the transaction manager and set it up properly."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"You might need to add it as a dependency explicitly if you are using transactions directly without Hibernate ORM for example.\n"
"Add the following to your build file:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"`@Transactional` can be used to control transaction boundaries on any CDI bean at the method level or at the class level to ensure every method is transactional.\n"
"That includes REST endpoints."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"`REQUIRED` or `NOT_SUPPORTED` are probably the most useful ones.\n"
"This is how you decide whether a method is to be running within or outside a transaction.\n"
"Make sure to check the JavaDoc for the precise semantic."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"The transaction context is propagated to all calls nested in the `@Transactional` method as you would expect (in this example `childDAO.addToGiftList()` and `santaDAO.addToSantaTodoList()`).\n"
"The transaction will commit unless a runtime exception crosses the method boundary.\n"
"You can override whether an exception forces the rollback or not by using `@Transactional(dontRollbackOn=SomeException.class)` (or `rollbackOn`)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"You can also programmatically ask for a transaction to be marked for rollback.\n"
"Inject a `TransactionManager` for this."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"This annotation may only be placed on the top level method delineating the transaction.\n"
"Annotated nested methods once a transaction has started will throw an exception."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"If defined on a class, it is equivalent to defining it on all the methods of the class marked with `@Transactional`.\n"
"The configuration defined on a method takes precedence over the configuration defined on a class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid "`Publisher` (from  Reactive-Streams)"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"then the behaviour is a bit different, because the transaction will not be terminated until the\n"
"returned reactive value is terminated. In effect, the returned reactive value will be listened to\n"
"and if it terminates exceptionally the transaction will be marked for rollback, and will be committed\n"
"or rolled-back only at termination of the reactive value."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"This allows your reactive methods to keep on working on the transaction asynchronously until their\n"
"work is really done, and not just until the reactive method returns."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"If you need to propagate your transaction context across your reactive pipeline, please see the\n"
"xref:context-propagation.adoc[Context Propagation guide]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"Narayana, as the underlying transaction manager, has a concept of a unique node identifier.\n"
"This is important if you consider using XA transactions that involve multiple resources."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"The node name identifier plays a crucial part in the identification of a transaction.\n"
"The node name identifier is forged into the transaction id when the transaction is created.\n"
"Based on the node name identifier, the transaction manager is capable of recognizing the XA transaction\n"
"counterparts created in database or JMS broker. The identifier makes possible for the transaction manager\n"
"to roll back the transaction counterparts during recovery."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"The node name identifier needs to be unique per transaction manager deployment.\n"
"And the node identifier needs to be stable over the transaction manager restarts."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"Yep, it works in your Quarkus application, in your IDE, in your tests, because all of these are Quarkus applications.\n"
"JTA has some bad press for some people.\n"
"I don't know why.\n"
"Let's just say that this is not your grandpa's JTA implementation.\n"
"What we have is perfectly embeddable and lean."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"No, this is an old folk tale.\n"
"Let's assume it essentially comes for free and let you scale to more complex cases involving several datasources as needed."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"Wrong. +\n"
"First off, just disable the transaction by marking your transaction boundary with `@Transactional(NOT_SUPPORTED)` (or `NEVER` or `SUPPORTS` depending on the semantic you want). +\n"
"Second, it's again fairy tale that not using transaction is faster.\n"
"The answer is, it depends on your DB and how many SQL SELECTs you are making.\n"
"No transaction means the DB does have a single operation transaction context anyways. +\n"
"Third, when you do several SELECTs, it's better to wrap them in a single transaction because they will all be consistent with one another.\n"
"Say your DB represents your car dashboard, you can see the number of kilometers remaining and the fuel gauge level.\n"
"By reading it in one transaction, they will be consistent.\n"
"If you read one and the other from two different transactions, then they can be inconsistent.\n"
"It can be more dramatic if you read data related to rights and access management for example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"Managing the transactions manually via `entityManager.getTransaction().begin()` and friends lead to a butt ugly code with tons of try catch finally that people get wrong.\n"
"Transactions are also about JMS and other database access, so one API makes more sense."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/transaction.adoc
msgid ""
"It's not a mess in Quarkus :)\n"
"Resource-level was introduced to support JPA in a non managed environment.\n"
"But Quarkus is both lean and a managed environment so we can safely always assume we are in JTA mode.\n"
"The end result is that the difficulties of running Hibernate ORM + CDI + a transaction manager in Java SE mode are solved by Quarkus."
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/transaction.adoc:6
#, no-wrap
msgid "Using Transactions in Quarkus"
msgstr "Quarkusでのトランザクションの使用"

#. type: Title ==
#: upstream/_versions/2.7/guides/transaction.adoc:15
#, no-wrap
msgid "Setting it up"
msgstr "設定"

#. type: Block title
#: upstream/_versions/2.7/guides/transaction.adoc:24
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.7/guides/transaction.adoc:33
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.7/guides/transaction.adoc:38
#, no-wrap
msgid "Starting and stopping transactions: defining your boundaries"
msgstr "トランザクションの開始と停止:境界線の定義"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:41
msgid "You can define your transaction boundaries the easy way, or the less easy way :)"
msgstr "トランザクションの境界を定義するには、簡単な方法と比較的簡単ではない方法があります :)"

#. type: Title ===
#: upstream/_versions/2.7/guides/transaction.adoc:42
#, no-wrap
msgid "Declarative approach"
msgstr "宣言的アプローチ"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:45
msgid "The easiest way to define your transaction boundaries is to use the `@Transactional` annotation on your entry method (`javax.transaction.Transactional`)."
msgstr "トランザクションの境界を定義する最も簡単な方法は、エントリーメソッド ( `javax.transaction.Transactional` ) で `@Transactional` アノテーションを使用することです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:69
msgid "This annotation defines your transaction boundaries and will wrap this call within a transaction."
msgstr "このアノテーションは、トランザクションの境界を定義し、トランザクション内でこの呼び出しをラップします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:70
msgid "A `RuntimeException` crossing the transaction boundaries will rollback the transaction."
msgstr "`RuntimeException` がトランザクションの境界を越えると、トランザクションがロールバックされます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:75
msgid "You can control whether and how the transaction is started with parameters on `@Transactional`:"
msgstr "`@Transactional` のパラメーターを使用して、トランザクションを開始するかどうか、どのように開始するかを制御することができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:77
msgid "`@Transactional(REQUIRED)` (default): starts a transaction if none was started, stays with the existing one otherwise."
msgstr "`@Transactional(REQUIRED)` (デフォルト): 何も開始されていない場合はトランザクションを開始し、そうでない場合は既存のトランザクションを維持します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:78
msgid "`@Transactional(REQUIRES_NEW)`: starts a transaction if none was started ; if an existing one was started, suspends it and starts a new one for the boundary of that method."
msgstr "`@Transactional(REQUIRES_NEW)` : 何も開始されていない場合はトランザクションを開始し、既存のトランザクションが開始されている場合はそれを一時停止し、そのメソッドの境界で新しいトランザクションを開始します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:79
msgid "`@Transactional(MANDATORY)`: fails if no transaction was started ; works within the existing transaction otherwise."
msgstr "`@Transactional(MANDATORY)` : トランザクションが開始されていない場合は失敗し、そうでない場合は既存のトランザクション内で動作します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:80
msgid "`@Transactional(SUPPORTS)`: if a transaction was started, joins it ; otherwise works with no transaction."
msgstr "`@Transactional(SUPPORTS)` : トランザクションが開始されている場合、それに参加します。開始されていない場合はトランザクションなしで動作します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:81
msgid "`@Transactional(NOT_SUPPORTED)`: if a transaction was started, suspends it and works with no transaction for the boundary of the method ; otherwise works with no transaction."
msgstr "`@Transactional(NOT_SUPPORTED)` : トランザクションが開始されている場合、それを一時停止し、メソッドの境界ではトランザクションなしで動作します。開始されていない場合は、トランザクションなしで動作します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:82
msgid "`@Transactional(NEVER)`: if a transaction was started, raises an exception ; otherwise works with no transaction."
msgstr "`@Transactional(NEVER)` : トランザクションが開始されている場合は例外を発生させます。開始されていない場合はトランザクションなしで動作します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:118
msgid "Inject the `TransactionManager` to be able to activate `setRollbackOnly` semantic."
msgstr "`setRollbackOnly` のセマンティックを有効にするために、 `TransactionManager` をインジェクトします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:119
msgid "Programmatically decide to set the transaction for rollback."
msgstr "プログラムにより、トランザクションをロールバックするように設定します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/transaction.adoc:121
#, no-wrap
msgid "Transaction Configuration"
msgstr "トランザクション設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:124
msgid "Advanced configuration of the transaction is possible with the use of the `@TransactionConfiguration` annotation that is set in addition to the standard `@Transactional` annotation on your entry method or at the class level."
msgstr "トランザクションの高度な設定は、エントリメソッドまたはクラスレベルで標準の `@Transactional` アノテーションに加えて設定される `@TransactionConfiguration` アノテーションを使用することで可能です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:126
msgid "The `@TransactionConfiguration` annotation allows to set a timeout property, in seconds, that applies to transactions created within the annotated method."
msgstr "`@TransactionConfiguration` アノテーションでは、タイムアウトのプロパティを秒単位で設定できます。それは、アノテーションされたメソッド内で作成されたトランザクションに適用されます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/transaction.adoc:133
#, no-wrap
msgid "Reactive extensions"
msgstr "リアクティブエクステンション"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:136
msgid "If your `@Transactional`-annotated method returns a reactive value, such as:"
msgstr "もし, `@Transactional` アノテーション付与されたメソッドが、次のようなリアクティブな値を返す場合:"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:138
msgid "`CompletionStage` (from the JDK)"
msgstr "`CompletionStage` （JDKから）"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:140
msgid "Any type which can be converted to one of the two previous types using Reactive Type Converters"
msgstr "リアクティブ型コンバータを使用して、前の2つの型のうちの1つに変換できる任意の型"

#. type: Title ===
#: upstream/_versions/2.7/guides/transaction.adoc:152
#, fuzzy, no-wrap
msgid "API approach"
msgstr "APIアプローチ"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:155
msgid "The less easy way is to inject a `UserTransaction` and use the various transaction demarcation methods."
msgstr "あまり簡単ではない方法としては、 `UserTransaction` を注入し、様々なトランザクション・デマケーションのメソッドを使用します。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/transaction.adoc:184
msgid "You cannot use `UserTransaction` in a method having a transaction started by a `@Transactional` call."
msgstr "`@Transactional` によって呼び出されたトランザクションと持つメソッドでは、 `UserTransaction`  を使用できません。"

#. type: Title ==
#: upstream/_versions/2.7/guides/transaction.adoc:186
#, no-wrap
msgid "Configuring the transaction timeout"
msgstr "トランザクションタイムアウトの設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:188
msgid "You can configure the default transaction timeout, the timeout that applies to all transactions managed by the transaction manager, via the property `quarkus.transaction-manager.default-transaction-timeout`, specified as a duration."
msgstr "デフォルトのトランザクション・タイムアウト、つまりトランザクション・マネージャーによって管理されるすべてのトランザクションに適用されるタイムアウトを、プロパティー `quarkus.transaction-manager.default-transaction-timeout` を使用して、期間として指定して構成することができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:192
msgid "The default value is 60 seconds."
msgstr "デフォルト値は60秒です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/transaction.adoc:193
#, no-wrap
msgid "Configuring transaction node name identifier"
msgstr "トランザクションノード名識別子の設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/transaction.adoc:208
msgid "The node name identifier may be configured via the property `quarkus.transaction-manager.node-name`."
msgstr "ノード名識別子は、プロパティー `quarkus.transaction-manager.node-name` を通じて設定することができます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/transaction.adoc:209
#, no-wrap
msgid "Why always having a transaction manager?"
msgstr "なぜ常にトランザクションマネージャーを持っているのか?"

#. type: Labeled list
#: upstream/_versions/2.7/guides/transaction.adoc:211
#, no-wrap
msgid "Does it work everywhere I want to?"
msgstr "使いたいところなら、どこでも使えるのでしょうか？"

#. type: Labeled list
#: upstream/_versions/2.7/guides/transaction.adoc:219
#, no-wrap
msgid "Does it do 2 Phase Commit and slow down my app?"
msgstr "それは2フェーズコミットを行い、私のアプリの速度を遅くしますか?"

#. type: Labeled list
#: upstream/_versions/2.7/guides/transaction.adoc:224
#, no-wrap
msgid "I don't need transaction when I do read only operations, it's faster."
msgstr "読み込み専用の操作をするときにはトランザクションはいらないので、その方が早いですね。"

#. type: Labeled list
#: upstream/_versions/2.7/guides/transaction.adoc:237
#, no-wrap
msgid "Why do you prefer JTA vs Hibernate's transaction management API"
msgstr "Hibernateのトランザクション管理APIではなくJTAを好む理由"

#. type: Labeled list
#: upstream/_versions/2.7/guides/transaction.adoc:242
#, no-wrap
msgid "It's a mess because I don't know if my JPA persistence unit is using `JTA` or `Resource-level` Transaction"
msgstr "私のJPA永続化ユニットが `JTA` を使っているのか `Resource-level` トランザクションを使っているのかわからないので、めちゃくちゃです。"
