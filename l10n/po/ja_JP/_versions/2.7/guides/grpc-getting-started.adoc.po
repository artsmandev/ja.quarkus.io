msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"This page explains how to start using gRPC in your Quarkus application.\n"
"While this page describes how to configure it with Maven, it is also possible to use Gradle."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].\n"
"The default configuration is enough, but you can also select some extensions if you want."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"By default the `quarkus-grpc` extension relies on reactive programming model, in this guide we will follow reactive approach.\n"
"Under the dependencies section of your `pom.xml` file replace the `quarkus-resteasy` dependency with:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"Make sure you have `generate-code` goal of `quarkus-maven-plugin` enabled in your `pom.xml`.\n"
"If you wish to generate code from different `proto` files for tests, also add the `generate-code-tests` goal.\n"
"Please note that no additional task/goal is required for the Gradle plugin."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"With this configuration, you can put your service and message definitions in the `src/main/proto` directory.\n"
"`quarkus-maven-plugin` will generate Java files from your `proto` files."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"`quarkus-maven-plugin` retrieves a version of `protoc` (the protobuf compiler) from Maven repositories. The retrieved version matches your operating system and CPU architecture.\n"
"If this retrieved version does not work in your context, you can either force to use a different OS classifier with\n"
"`-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` (e.g. `osx-x86_64`).\n"
"You can also download the suitable binary and specify the location via\n"
"`-Dquarkus.grpc.protoc-path=/path/to/protoc`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"Let's start with a simple _Hello_ service.\n"
"Create the `src/main/proto/helloworld.proto` file with the following content:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"Before coding, we need to generate the classes used to implement and consume gRPC services.\n"
"In a terminal, run:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"Protocol Buffers specification provides a way to import `proto` files.\n"
"The Quarkus code generation mechanism lets you control the scope of dependencies to scan for possible imports by setting the `quarkus.generate-code.grpc.scan-for-imports` property to one of the following:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"If not specified, the property is set to `com.google.protobuf:protobuf-java`.\n"
"To override it, set the `quarkus.generate-code.grpc.scan-for-imports` property in your application.properties to the desired value, e.g."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"With Quarkus, implementing a service requires to implement the generated service interface based on Mutiny, a Reactive Programming API integrated in Quarkus, and expose it as a CDI bean.\n"
"Learn more about Mutiny on the xref:mutiny-primer.adoc[Mutiny guide].\n"
"The service class must be annotated with the `@io.quarkus.grpc.GrpcService` annotation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"If your service implementation logic is blocking (use blocking I/O for example), annotate your method with\n"
"`@Blocking`.\n"
"The `io.smallrye.common.annotation.Blocking` annotation instructs the framework to invoke the\n"
"annotated method on a worker thread instead of the I/O thread (event-loop)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"The services are _served_ by a _server_.\n"
"Available services (_CDI beans_) are automatically registered and exposed."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS) when\n"
"running normally, and `localhost:9001` for tests."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"In this section, we are going to consume the service we expose.\n"
"To simplify, we are going to consume the service from the same application, which in the real world, does not make sense."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"We need to configure the application to indicate where the `hello` service is found.\n"
"In the `src/main/resources/application.properties` file, add the following property:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"Like any other Quarkus applications, you can package it with: `mvn package`.\n"
"You can also package the application into a native executable with: `mvn package -Pnative`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"Alternatively to using Quarkus code generation to generate stubs for `proto` files, you can also use\n"
"`protobuf-maven-plugin`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"The class generation uses a tool named `protoc`, which is OS-specific.\n"
"That's why we use the `os-maven-plugin` to target the executable compatible with the operating system."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-getting-started.adoc
msgid ""
"When gRPC classes - the classes generated from `proto` files - are in a dependency of the application, then the dependency needs a Jandex index.\n"
"The `jandex-maven-plugin` can be used to create a Jandex index. More information on this topic can be found in the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:6
#, no-wrap
msgid "Getting Started with gRPC"
msgstr "gRPC入門"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:16
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:22
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:24
msgid "The solution is located in the `grpc-plain-text-quickstart` {quickstarts-tree-url}/grpc-plain-text-quickstart[directory]."
msgstr "このソリューションは `grpc-plain-text-quickstart` {quickstarts-tree-url}/grpc-plain-text-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:25
#, no-wrap
msgid "Configuring your project"
msgstr "プロジェクトの設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:28
msgid "Edit the `pom.xml` file to add the Quarkus gRPC extension dependency (just under `<dependencies>`):"
msgstr "`pom.xml` ファイルを編集して、Quarkus gRPCエクステンションの依存関係を追加します( `<dependencies>` のすぐ下)。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:86
msgid "Alternatively to using the `generate-code` goal of the `quarkus-maven-plugin`, you can use `protobuf-maven-plugin` to generate these files, more in <<Generating Java files from proto with protobuf-maven-plugin>>"
msgstr "`quarkus-maven-plugin` の `generate-code` ゴールを使用する代わりに、 `protobuf-maven-plugin` を使用してこれらのファイルを生成することができます。詳細は <<protoファイルからprotobuf-maven-pluginでJavaファイルを生成する>> を参照してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:118
msgid "This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message)."
msgstr "この `proto` ファイルは、単一のメソッド ( `SayHello` ) と交換されたメッセージ (名前を含む `HelloRequest` と挨拶メッセージを含む `HelloReply` ) を持つシンプルなサービスインターフェースを定義しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:128
msgid "Once generated, you can look at the `target/generated-sources/grpc` directory:"
msgstr "生成されたら、 `target/generated-sources/grpc` ディレクトリーを見てみましょう。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:148
msgid "These are the classes we are going to use."
msgstr "これらは、これから使うクラスファイルです。"

#. type: Title ===
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:150
#, no-wrap
msgid "`proto` files with imports"
msgstr "`proto` ファイルのインポート"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:156
msgid "`all` - scan all the dependencies"
msgstr "`all` - すべての依存関係をスキャンする"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:157
msgid "`none` - don't scan the dependencies, use only what is defined in the `src/main/proto` or `src/test/proto`"
msgstr "`none` - 依存関係をスキャンしないで、 `src/main/proto` または `src/test/proto` のみで定義されたものを利用する"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:158
msgid "`groupId1:artifactId1,groupId2:artifactId2` - scan only the dependencies with group id and artifact id in the list."
msgstr "`groupId1:artifactId1,groupId2:artifactId2` - リスト内のグループIDとアーティファクトIDを持つ依存関係のみをスキャンする"

#. type: Title ===
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:167
#, no-wrap
msgid "`proto` files from dependencies"
msgstr "依存関係にある `proto` ファイル"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:169
msgid "In some cases, you may want to use `proto` files from a different project to generate the gRPC stubs. In this case:"
msgstr "場合によっては、gRPC スタブを生成するために別のプロジェクトの `proto` ファイルを使いたいかもしれません。この場合は、"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:171
msgid "Add a dependency on the artifact that contains the proto file to your project"
msgstr "protoファイルを含むアーティファクトへの依存関係をプロジェクトに追加する。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:172
msgid "In `application.properties`, specify the dependencies you want to scan for proto files."
msgstr "`application.properties` で、proto ファイルをスキャンしたい依存関係を指定します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:178
msgid "The value of the property may be `none`, which is the default value, or a comma separated list of `groupId:artifactId` coordinates."
msgstr "プロパティの値は、デフォルト値である `none` 、または `groupId:artifactId` 座標のコンマ区切りリストとなります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:179
#, no-wrap
msgid "Implementing a gRPC service"
msgstr "gRPCサービスの実装"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:182
msgid "Now that we have the generated classes let's implement our _hello_ service."
msgstr "生成されたクラスができたので、 _hello_ サービスを実装してみましょう。"

#. type: Title ===
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:187
#, no-wrap
msgid "Implementing a service"
msgstr "サービスの実装"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:190
msgid "Create the `src/main/java/org/acme/HelloService.java` file with the following content:"
msgstr "以下の内容の `src/main/java/org/acme/HelloService.java` ファイルを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:214
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:242
msgid "Expose your implementation as a bean."
msgstr "実装をBeanとして公開します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:215
msgid "Implement the generated service interface."
msgstr "生成されたサービスインターフェースを実装する。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:216
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:244
msgid "Implement the methods defined in the service definition (here we have a single method)."
msgstr "サービス定義で定義されたメソッドを実装します(ここでは1つのメソッドを使用しています)。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:218
msgid "You can also use the default gRPC API instead of Mutiny:"
msgstr "また、Mutinyの代わりにデフォルトのgRPC APIを使用することもできます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:243
msgid "Extends the `ImplBase` class. This is a generated class."
msgstr "`ImplBase` クラスを拡張します。生成されたクラスです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:245
msgid "Build and send the response."
msgstr "レスポンスを構築して送信します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:246
msgid "Close the response."
msgstr "レスポンスを閉じます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:252
#, no-wrap
msgid "The gRPC server"
msgstr "gRPCサーバー"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:261
msgid "Run the application using: `mvn quarkus:dev`."
msgstr "`mvn quarkus:dev` を使用してアプリケーションを実行します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:262
#, no-wrap
msgid "Consuming a gRPC service"
msgstr "gRPCサービスを消費する"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:268
msgid "Open the existing `org.acme.ExampleResource` class, and edit the content to become:"
msgstr "既存の `org.acme.ExampleResource` クラスを開き、内容を編集してこのようになります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:305
msgid "Inject the service and configure its name. The name is used in the application configuration. If not specified then the field name is used instead: `hello` in this particular case."
msgstr "サービスをインジェクトし、その名前を設定します。この名前は、アプリケーションの設定で使用されます。指定しない場合、フィールド名が代わりに使用されます : このケースでは `hello` です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:306
msgid "Use the generated service interface based on Mutiny API."
msgstr "Mutiny APIに基づいて生成されたサービスインターフェースを使用します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:307
msgid "Invoke the service."
msgstr "サービスを起動します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:317
msgid "`hello` is the name used in the `@GrpcClient` annotation."
msgstr "`hello` は `@GrpcClient` アノテーションで使用される名前です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:318
msgid "`host` configures the service host (here it's localhost)."
msgstr "`host` はサービスホストを設定します (ここでは localhost)。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:320
msgid "Then, open http://localhost:8080/hello/quarkus in a browser, and you should get `Hello quarkus`!"
msgstr "そして、ブラウザで http://localhost:8080/hello/quarkus を開くと、 `Hello quarkus` と表示されるはずです!"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:321
#, no-wrap
msgid "Packaging the application"
msgstr "アプリケーションのパッケージング"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:326
#, no-wrap
msgid "Generating Java files from proto with protobuf-maven-plugin"
msgstr "protoファイルからprotobuf-maven-pluginでJavaファイルを生成する"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:332
msgid "To do it, first define the 2 following properties in the `<properties>` section:"
msgstr "そのためには、まず `<properties>` セクションで以下の 2 つのプロパティーを定義します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:340
msgid "They configure the gRPC version and the `protoc` version."
msgstr "これらは gRPC のバージョンと `protoc` のバージョンを設定します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:342
msgid "Then, add to the `build` section the `os-maven-plugin` extension and the `protobuf-maven-plugin` configuration."
msgstr "そして、 `build` セクションに `os-maven-plugin` のエクステンションと `protobuf-maven-plugin` の設定を追加します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:396
msgid "The `protobuf-maven-plugin` that generates stub classes from your gRPC service definition (`proto` files)."
msgstr "gRPCサービス定義( `proto` ファイル)からスタブクラスを生成する `protobuf-maven-plugin`"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:400
msgid "This configuration instructs the `protobuf-maven-plugin` to generate the default gRPC classes and classes using Mutiny to fit with the Quarkus development experience."
msgstr "この設定は、Quarkusの開発経験に合わせてMutinyを使用してデフォルトのgRPCクラスとクラスを生成するように、 `protobuf-maven-plugin` に指示します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:402
msgid "When using `protobuf-maven-plugin`, instead of the `quarkus-maven-plugin`, every time you update the `proto` files, you need to re-generate the classes (using `mvn compile`)."
msgstr "`quarkus-maven-plugin` の代わりに `protobuf-maven-plugin` を利用する場合、 `proto` ファイルを更新するたびに、( `mvn compile` を使用して) クラスを再生成する必要があります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:404
#, no-wrap
msgid "gRPC classes from dependencies"
msgstr "依存関係にあるgRPCクラス"
