msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"One of the challenges brought by the distributed nature of microservices is that communication with external systems is\n"
"inherently unreliable. This increases demand on resiliency of applications. To simplify making more resilient\n"
"applications, Quarkus provides https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance] an\n"
"implementation of the https://github.com/eclipse/microprofile-fault-tolerance/[MicroProfile Fault Tolerance]\n"
"specification."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"In this guide, we demonstrate usage of MicroProfile Fault Tolerance annotations such as `@Timeout`, `@Fallback`,\n"
"`@Retry` and `@CircuitBreaker`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"The application built in this guide simulates a simple backend for a gourmet coffee e-shop. It implements a REST\n"
"endpoint providing information about coffee samples we have on store."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"Let's imagine, although it's not implemented as such, that some of the methods in our endpoint require communication\n"
"to external services like a database or an external microservice, which introduces a factor of unreliability."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-fault-tolerance` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"In this section we create a skeleton of our application, so that we have something that we can extend and to which\n"
"we can add fault tolerance features later on."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"At this point, we expose a single REST method that will show a list of coffee samples in a JSON format. Note\n"
"that we introduced some fault making code in our `CoffeeResource#maybeFail()` method, which is going to cause failures\n"
"in the `CoffeeResource#coffees()` endpoint method in about 50 % of requests."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"and open `http://localhost:8080/coffee` in your browser. Make couple of requests (remember, some of them we expect\n"
"to fail). At least some of the requests should show us the list of our coffee samples in JSON, the rest will fail\n"
"with a `RuntimeException` thrown in `CoffeeResource#maybeFail()`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"Let the Quarkus development server running and in your IDE add the `@Retry` annotation to the `CoffeeResource#coffees()`\n"
"method as follows and save the file:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"Hit refresh in your browser. The Quarkus development server will automatically detect the changes\n"
"and recompile the app for you, so there's no need to restart it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"You can hit refresh couple more times. Practically all requests should now be succeeding. The `CoffeeResource#coffees()`\n"
"method is still in fact failing in about 50 % of time, but every time it happens, the platform will automatically retry\n"
"the call!"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"To see that that the failures still happen, check the output of the development server. The log messages should be\n"
"similar to these:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"You can see that every time an invocation fails, it's immediately followed by another invocation, until one succeeds.\n"
"Since we allowed 4 retries, it would require 5 invocations to fail in a row, in order for the user to be actually exposed\n"
"to a failure. Which is fairly unlikely to happen."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"Add following two methods to our `CoffeeResource` endpoint. Again, no need to restart the server, just paste the code\n"
"and save the file."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"We added some new functionality. We want to be able to recommend some related coffees based on a coffee that a user\n"
"is currently looking at. It's not a critical functionality, it's a nice-to-have. When the system is overloaded and the\n"
"logic behind obtaining recommendations takes too long to execute, we would rather time out and render the UI without\n"
"recommendations."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"Note that the timeout was configured to 250 ms, and a random artificial delay between 0 to 500 ms was introduced\n"
"into the `CoffeeResource#recommendations()` method."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"You should see some requests time out with `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException`.\n"
"Requests that do not time out should show two recommended coffee samples in JSON."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"Let's make our recommendations feature even better by providing a fallback (and presumably faster) way of getting related\n"
"coffees."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"Add a fallback method to `CoffeeResource` and a `@Fallback` annotation to `CoffeeResource#recommendations()` method\n"
"as follows:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"Hit refresh several times on `http://localhost:8080/coffee/2/recommendations`.\n"
"The `TimeoutException` should not appear anymore. Instead, in case of a timeout, the page will\n"
"display a single recommendation that we hardcoded in our fallback method `fallbackRecommendations()`, rather than\n"
"two recommendations returned by the original method."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"A circuit breaker is useful for limiting number of failures happening in the system, when part of the system becomes\n"
"temporarily unstable. The circuit breaker records successful and failed invocations of a method, and when the ratio\n"
"of failed invocations reaches the specified threshold, the circuit breaker _opens_ and blocks all further invocations\n"
"of that method for a given time."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"We added another functionality - the application can return the amount of remaining packages of given coffee on our store\n"
"(just a random number)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"This time an artificial failure was introduced in the CDI bean: the `CoffeeRepositoryService#getAvailability()` method is\n"
"going to alternate between two successful and two failed invocations."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"We also added a `@CircuitBreaker` annotation with `requestVolumeThreshold = 4`. `CircuitBreaker.failureRatio` is\n"
"by default 0.5, and `CircuitBreaker.delay` is by default 5 seconds. That means that a circuit breaker will open\n"
"when 2 of the last 4 invocations failed and it will stay open for 5 seconds."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"Refresh two more times. Both times you should see text \"RuntimeException: Service failed.\", which is the exception\n"
"thrown by `CoffeeRepositoryService#getAvailability()`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"Refresh a couple more times. Unless you waited too long, you should again see exception, but this time it's\n"
"\"CircuitBreakerOpenException: getAvailability\". This exception indicates that the circuit breaker opened\n"
"and the `CoffeeRepositoryService#getAvailability()` method is not being called anymore."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"Give it 5 seconds during which circuit breaker should close and you should be able to make two successful requests\n"
"again."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"The format is `fully-qualified-class-name/method-name/annotation-name/property-name=value`.\n"
"You can also configure a property for all the annotation via `annotation-name/property-name=value`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"SmallRye Fault Tolerance allows to improve resiliency of your application, without having an impact on the complexity\n"
"of our business logic."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid "CLI"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid "Maven"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid "Gradle"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"SmallRye Fault Tolerance has more features than shown here.\n"
"Please check the link:https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/index.html[SmallRye Fault Tolerance documentation] to learn about them."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"This also applies to the CDI request context: if it is active on the original thread, it is propagated to the new thread, but if it's not, then the new thread won't have it either.\n"
"This is contrary to MicroProfile Fault Tolerance specification, which states that the request context must be active during the `@Asynchronous` method invocation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"We believe that in presence of MicroProfile Context Propagation, this requirement should not apply.\n"
"The entire point of context propagation is to make sure the new thread has the same contexts as the original thread."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/smallrye-fault-tolerance.adoc
msgid ""
"This mode is not compatible with the MicroProfile Fault Tolerance specification, albeit the incompatibility is very small.\n"
"To restore full compatibility, add this configuration property:"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:6
#, no-wrap
msgid "SmallRye Fault Tolerance"
msgstr "SmallRyeのフォールト・トレランス"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:23
#, no-wrap
msgid "The Scenario"
msgstr "シナリオ"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:31
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:37
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:39
msgid "The solution is located in the `microprofile-fault-tolerance-quickstart` {quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[directory]."
msgstr "ソリューションは `microprofile-fault-tolerance-quickstart` {quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:40
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:43
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:49
#, fuzzy
msgid "This command generates a project, importing the extensions for RESTEasy/JAX-RS and SmallRye Fault Tolerance."
msgstr "このコマンドは、RESTEasy/JAX-RSとSmallRye Fault Toleranceのエクステンションをインポートして、プロジェクトを生成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:57
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:59
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:487
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:68
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:496
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:73
#, no-wrap
msgid "Preparing an Application: REST Endpoint and CDI Bean"
msgstr "アプリケーションの準備: RESTエンドポイントとCDI Bean"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:79
msgid "First, create a simple entity representing a coffee sample in our store:"
msgstr "まず、店舗内のコーヒーサンプルを表すシンプルなエンティティーを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:104
msgid "Let's continue with a simple CDI bean, that would work as a repository of our coffee samples."
msgstr "コーヒーサンプルのリポジトリとして機能するシンプルな CDI Beanを続けてみましょう。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:149
msgid "Finally, create the `org.acme.microprofile.faulttolerance.CoffeeResource` class as follows:"
msgstr "最後に、 `org.acme.microprofile.faulttolerance.CoffeeResource` クラスを以下のように作成します。 :"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:197
msgid "Why not check that our application works? Run the Quarkus development server with:"
msgstr "アプリケーションが動作することを確認してみませんか? Quarkus開発サーバーを以下のコマンドで実行します:"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:205
msgid "Congratulations, you've just made a working (although somewhat unreliable) Quarkus application!"
msgstr "おめでとうございます。（いくらか不安定ですが）動作するQuarkus アプリケーションが出来ました!"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:206
#, no-wrap
msgid "Adding Resiliency: Retries"
msgstr "レジリエンスの追加: 再試行"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:250
#, no-wrap
msgid "Adding Resiliency: Timeouts"
msgstr "レジリエンスの追加: タイムアウト"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:253
msgid "So what else have we got in MicroProfile Fault Tolerance? Let's look into timeouts."
msgstr "では、MicroProfile の耐障害性には他に何があるのでしょうか?タイムアウトについて見てみましょう。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:297
msgid "In your browser, go to `http://localhost:8080/coffee/2/recommendations` and hit refresh a couple of times."
msgstr "お使いのブラウザで `http://localhost:8080/coffee/2/recommendations` にアクセスして、2、3回更新してください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:301
#, no-wrap
msgid "Adding Resiliency: Fallbacks"
msgstr "レジリエンスの追加: フォールバック"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:338
msgid "Check the server output to see that fallback is really happening:"
msgstr "フォールバックが本当に行われているかどうか、サーバーの出力を確認してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:347
msgid "The fallback method is required to have the same parameters as the original method."
msgstr "フォールバックメソッドには、元のメソッドと同じパラメータが必要です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:348
#, no-wrap
msgid "Adding Resiliency: Circuit Breaker"
msgstr "レジリエンスの追加: サーキットブレーカー"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:356
msgid "Add the following code into the `CoffeeRepositoryService` bean, so that we can demonstrate a circuit breaker in action:"
msgstr "次のコードを `CoffeeRepositoryService` ビーンに追加して、サーキットブレーカーの動作をデモできるようにします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:385
msgid "And inject the code below into the `CoffeeResource` endpoint:"
msgstr "そして、以下のコードを `CoffeeResource` のエンドポイントに注入します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:429
msgid "To test this out, do the following:"
msgstr "これを試すには、次のようにします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:431
msgid "Go to `http://localhost:8080/coffee/2/availability` in your browser. You should see a number being returned."
msgstr " `http://localhost:8080/coffee/2/availability` をブラウザで開いて下さい。数字が返ってくるのが見えるでしょう。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:432
msgid "Hit refresh, this second request should again be successful and return a number."
msgstr "リフレッシュすると、この2回目のリクエストが再び成功し、数字が返ってくるはずです。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:440
#, no-wrap
msgid "Runtime configuration"
msgstr "ランタイム設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:443
msgid "You can override the annotations parameters at runtime inside your `application.properties` file."
msgstr "`application.properties` ファイルの中で、実行時にアノテーションパラメータをオーバーライドすることができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:445
msgid "If we take the retry example that we already saw:"
msgstr "先ほどのリトライの例で言えば"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:465
msgid "We can override the `maxRetries` parameter with 6 retries instead of 4 by the following configuration item:"
msgstr "以下の設定項目により、 `maxRetries` パラメータをオーバーライドして、リトライ回数を4回から6回に変更することができます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:473
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:479
msgid "All that is needed to enable the fault tolerance features in Quarkus is:"
msgstr "Quarkusのフォールトトレランス機能を有効にするために必要なのは"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:482
msgid "adding the `smallrye-fault-tolerance` Quarkus extension to your project using the `quarkus-maven-plugin`:"
msgstr "`quarkus-maven-plugin` で `smallrye-fault-tolerance` Quarkus エクステンションをプロジェクトに追加することです :"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:485
msgid "or simply adding the following Maven dependency:"
msgstr "または、以下のMavenの依存関係を単純に追加することもできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:502
#, no-wrap
msgid "Additional resources"
msgstr "その他のリソース"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:508
msgid "In Quarkus, you can use the SmallRye Fault Tolerance optional features out of the box."
msgstr "Quarkusでは、SmallRye Fault Toleranceのオプション機能をすぐに使用することができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:510
msgid "Support for Mutiny is present, so your asynchronous methods can return `Uni` in addition to `CompletionStage`."
msgstr "Mutinyがサポートされているので、非同期のメソッドは `CompletionStage` だけでなく `Uni` を返すことができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:512
msgid "MicroProfile Context Propagation is integrated with Fault Tolerance, so existing contexts are automatically propagated to your asynchronous methods."
msgstr "MicroProfile Context PropagationはFault Toleranceと統合されているので、既存のコンテキストは自動的に非同期メソッドに伝搬されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:523
#, fuzzy
msgid "Non-compatible mode is enabled by default, so methods that return `CompletionStage` (or `Uni`) have asynchronous fault tolerance applied without any `@Asynchronous`, `@Blocking` or `@NonBlocking` annotation."
msgstr "非互換モードはデフォルトで有効なので、 `CompletionStage` (または `Uni` ) を返すメソッドには、 `@Asynchronous` , `@Blocking` , `@NonBlocking` のアノテーションがなくても非同期フォールトトレランスが適用されます。"
