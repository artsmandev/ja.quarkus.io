msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.3.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Security Tips and Tricks"
msgstr "セキュリティに関するヒントとコツ"

#. type: Title ==
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Quarkus Security Dependency"
msgstr "Quarkus Security依存関係"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "`io.quarkus:quarkus-security` module contains the core Quarkus security classes."
msgstr "`io.quarkus:quarkus-security` モジュールには、Quarkusの中核となるセキュリティクラスが含まれています。"

#: _versions/2.7/guides/security-customization.adoc
msgid ""
"In most cases, it does not have to be added directly to your project's build file as it is already provided by all of the security extensions.\n"
"However, if you need to write your own custom security code (for example, register a <<jaxrs-security-context, Custom JAX-RS SecurityContext>>) or use <<bouncy-castle, BouncyCastle>> libraries, then please make sure it is included:"
msgstr ""
"ほとんどの場合、すべてのセキュリティエクステンションですでに提供されているので、プロジェクトのビルドファイルに直接追加する必要はありません。\n"
"しかし、独自のセキュリティコード（例えば、 xref:jaxrs-security-context[Custom JAX-RS SecurityContext] を登録）を書いたり、 xref:bouncy-castle[BouncyCastle] のライブラリを使用する必要がある場合は、必ずインクルードしてください："

#. type: Block title
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "HttpAuthenticationMechanism Customization"
msgstr "HttpAuthenticationMechanism のカスタマイズ"

#: _versions/2.7/guides/security-customization.adoc
msgid ""
"One can customize `HttpAuthenticationMechanism` by registering a CDI implementation bean.\n"
"In the example below the custom authenticator delegates to `JWTAuthMechanism` provided by `quarkus-smallrye-jwt`:"
msgstr "CDI実装Beanを登録することで、 `HttpAuthenticationMechanism` をカスタマイズすることができます。以下の例では、カスタム認証機能は `quarkus-smallrye-jwt` によって提供される `JWTAuthMechanism` にデリゲートします。"

#. type: Title ==
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Security Identity Customization"
msgstr "セキュリティー・アイデンティティのカスタマイズ"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "Internally, the identity providers create and update an instance of the `io.quarkus.security.identity.SecurityIdentity` class which holds the principal, roles, credentials which were used to authenticate the client (user) and other security attributes. An easy option to customize `SecurityIdentity` is to register a custom `SecurityIdentityAugmentor`. For example, the augmentor below adds an addition role:"
msgstr "内部的には、アイデンティティ・プロバイダは、プリンシパル、役割、クライアント(ユーザー)の認証に使用されたクレデンシャル、 およびその他のセキュリティー属性を保持する `io.quarkus.security.identity.SecurityIdentity` クラスのインスタンスを作成して更新します。 `SecurityIdentity` をカスタマイズする簡単なオプションは、カスタム `SecurityIdentityAugmentor` を登録することです。例えば、以下のエクステンションは、追加のロールを追加します。"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "Here is another example showing how to use the client certificate available in the current xref:security-built-in-authentication.adoc#mutual-tls[Mutual TLS] request to add more roles:"
msgstr "ここでは、現在の link:security-built-in-authentication.html#mutual-tls[相互TLS]リクエストで利用可能なクライアント証明書を使用して、さらにロールを追加する方法を示す別の例を示します。 :"

#: _versions/2.7/guides/security-customization.adoc
msgid ""
"If more than one custom `SecurityIdentityAugmentor` is registered then they will be considered equal candidates and invoked in random order.\n"
"You can enforce the order by implementing a default `SecurityIdentityAugmentor#priority` method. Augmentors with higher priorities will be invoked first."
msgstr "複数のカスタム `SecurityIdentityAugmentor` が登録されている場合、それらは同等の候補とみなされ、ランダムな順序で呼び出されます。デフォルトの `SecurityIdentityAugmentor#priority` メソッドを実装することで順番を強制することができます。優先度の高いAugmentors が最初に起動されます。"

#. type: Title ==
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Custom JAX-RS SecurityContext"
msgstr "カスタム JAX-RS SecurityContext"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "If you use JAX-RS `ContainerRequestFilter` to set a custom JAX-RS `SecurityContext` then make sure `ContainerRequestFilter` runs in the JAX-RS pre-match phase by adding a `@PreMatching` annotation to it for this custom security context to be linked with Quarkus `SecurityIdentity`, for example:"
msgstr "JAX-RS `ContainerRequestFilter` を使用してカスタム JAX-RS `SecurityContext` を設定する場合は、 `ContainerRequestFilter` が JAX-RS のプレマッチフェーズで実行されていることを確認し、このカスタムセキュリティーコンテキストが Quarkus `SecurityIdentity` とリンクされるように `@PreMatching` アノテーションを追加します。例:"

#. type: Title ==
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Disabling Authorization"
msgstr "認可の無効化"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "If you have a good reason to disable the authorization (for example, when testing) then you can register a custom `AuthorizationController`:"
msgstr "認可を無効にする正当な理由がある場合(テスト時など)は、カスタムの `AuthorizationController` を登録してください。"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "Please also see xref:security-testing.adoc#testing-security[TestingSecurity Annotation] section on how to disable the security checks using `TestSecurity` annotation."
msgstr "また、 `TestSecurity` アノテーションを使ってセキュリティチェックを無効にする方法については、 link:security-testing.html#testing-security[TestingSecurity Annotation]の項を参照してください。"

#. type: Title ==
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Registering Security Providers"
msgstr "セキュリティー プロバイダの登録"

#. type: Title ===
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Default providers"
msgstr "デフォルトのプロバイダ"

#: _versions/2.7/guides/security-customization.adoc
msgid ""
"When running in native mode, the default behavior for GraalVM native executable generation is to only include the main \"SUN\" provider\n"
"unless you have enabled SSL, in which case all security providers are registered. If you are not using SSL, then you can selectively\n"
"register security providers by name using the `quarkus.security.security-providers` property. The following example illustrates\n"
"configuration to register the \"SunRsaSign\" and \"SunJCE\" security providers:"
msgstr "ネイティブモードで実行している場合、GraalVMネイティブ実行可能ファイル生成のデフォルトの動作は、SSLを有効にしていない限り、メインの「SUN」プロバイダのみを含めるようになっています。SSLを有効にしている場合は、すべてのセキュリティープロバイダが登録されます。SSLを使用していない場合は、 `quarkus.security.security-providers` プロパティーを使用して、セキュリティープロバイダを名前で選択的に登録することができます。以下の例では、「SunRsaSign」と「SunJCE」のセキュリティープロバイダを登録するための設定を説明します。"

#. type: Block title
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Example Security Providers Configuration"
msgstr "セキュリティー プロバイダの設定例"

#. type: Title ===
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "BouncyCastle"
msgstr "BouncyCastle"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jce.provider.BouncyCastleProvider` JCE provider then please set a `BC` provider name:"
msgstr "`org.bouncycastle.jce.provider.BouncyCastleProvider` JCE プロバイダを登録する必要がある場合は、 `BC` プロバイダ名を設定してください。"

#. type: Block title
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Example Security Providers BouncyCastle Configuration"
msgstr "セキュリティープロバイダの例 BouncyCastleの設定"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "and add the BouncyCastle provider dependency:"
msgstr "そして、BouncyCastleプロバイダ依存関係を追加します。"

#. type: Title ===
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "BouncyCastle JSSE"
msgstr "BouncyCastle JSSE"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it instead of the default SunJSSE provider then please set a `BCJSSE` provider name:"
msgstr "`org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE プロバイダを登録して、デフォルトの SunJSSE プロバイダの代わりに使用する必要がある場合は、 `BCJSSE` プロバイダ名を設定してください。"

#. type: Block title
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Example Security Providers BouncyCastle JSSE Configuration"
msgstr "セキュリティープロバイダの例 BouncyCastle JSSE設定"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "and add the BouncyCastle TLS dependency:"
msgstr "そして、BouncyCastleのTLS依存関係を追加します。"

#. type: Title ===
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "BouncyCastle FIPS"
msgstr "BouncyCastle FIPS"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE provider then please set a `BCFIPS` provider name:"
msgstr "`org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE プロバイダを登録する必要がある場合は、 `BCFIPS` プロバイダ名を設定してください。"

#. type: Block title
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Example Security Providers BouncyCastle FIPS Configuration"
msgstr "セキュリティープロバイダの例 BouncyCastleのFIPS設定"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "and add the BouncyCastle FIPS provider dependency:"
msgstr "そして、BouncyCastle FIPSプロバイダの依存関係を追加します。"

#: _versions/2.7/guides/security-customization.adoc
msgid ""
"`BCFIPS` provider option is supported in native image but the algorithm self-tests which rely on `java.security.SecureRandom` to verify the generated keys have been removed for these tests to pass. The following classes have been affected:\n"
"- `org.bouncycastle.crypto.general.DSA`\n"
"- `org.bouncycastle.crypto.general.DSTU4145`\n"
"- `org.bouncycastle.crypto.general.ECGOST3410`\n"
"- `org.bouncycastle.crypto.general.GOST3410`\n"
"- `org.bouncycastle.crypto.fips.FipsDSA`\n"
"- `org.bouncycastle.crypto.fips.FipsEC`\n"
"- `org.bouncycastle.crypto.fips.FipsRSA`"
msgstr ""
"`BCFIPS` プロバイダー・オプションはネイティブ・イメージでサポートされていますが、生成されたキーを検証するために に依存していたアルゴリズムのセルフテストは、これらのテストに合格するために削除されました。以下のクラスが影響を受けています:\n"
"- `org.bouncycastle.crypto.general.DSA`\n"
"- `org.bouncycastle.crypto.general.DSTU4145`\n"
"- `org.bouncycastle.crypto.general.ECGOST3410`\n"
"- `org.bouncycastle.crypto.general.GOST3410`\n"
"- `org.bouncycastle.crypto.fips.FipsDSA`\n"
"- `org.bouncycastle.crypto.fips.FipsEC`\n"
"- `org.bouncycastle.crypto.fips.FipsRSA`"

#. type: Title ===
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "BouncyCastle JSSE FIPS"
msgstr "BouncyCastle JSSE FIPS"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it in combination with `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` instead of the default SunJSSE provider then please set a `BCFIPSJSSE` provider name:"
msgstr "デフォルトのSunJSSEプロバイダではなく、 `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSEプロバイダを登録して、 `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` と組み合わせて使用する必要がある場合は、 `BCFIPSJSSE` プロバイダ名を設定してください。"

#. type: Block title
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Example Security Providers BouncyCastle FIPS JSSE Configuration"
msgstr "セキュリティープロバイダの例 BouncyCastle FIPS JSSE設定"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "and the BouncyCastle TLS dependency optimized for using the BouncyCastle FIPS provider:"
msgstr "そして、BouncyCastle FIPSプロバイダを使用するために最適化されたBouncyCastle TLS依存関係:"

#: _versions/2.7/guides/security-customization.adoc
msgid ""
"Note that the keystore and truststore type and provider are set to `BCFKS` and `BCFIPS`.\n"
"One can generate a keystore with this type and provider like this:"
msgstr "keystore と truststore のタイプとプロバイダが `BCFKS` と `BCFIPS` に設定されていることに注意してください。このタイプとプロバイダでは、以下のようにキーストアを生成することができます。"

#. type: delimited block =
#: _versions/2.7/guides/security-customization.adoc
msgid "`BCFIPSJSSE` provider option is currently not supported in native image."
msgstr "`BCFIPSJSSE` プロバイダーオプションは、現在ネイティブイメージではサポートされていません。"

#. type: Title ==
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "Reactive Security"
msgstr "Reactive Security"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "If you are going to use security in a reactive environment, you will likely need SmallRye Context Propagation:"
msgstr "リアクティブな環境でセキュリティーを使用する場合は、SmallRye Context Propagationが必要になるでしょう。"

#: _versions/2.7/guides/security-customization.adoc
msgid ""
"This will allow you to propagate the identity throughout the reactive callbacks. You also need to make sure you\n"
"are using an executor that is capable of propagating the identity (e.g. no `CompletableFuture.supplyAsync`),\n"
"to make sure that Quarkus can propagate it. For more information see the\n"
"xref:context-propagation.adoc[Context Propagation Guide]."
msgstr "これにより、リアクティブコールバック全体にアイデンティティを伝搬させることができます。また、Quarkusがアイデンティティを伝搬できることを確かにするために、アイデンティティを伝搬できるエグゼキューターを使用していることを確認する必要があります（例:  `CompletableFuture.supplyAsync`  を使用しない場合）。詳細については、 link:context-propagation.html[Context Propagation Guide]を参照してください。"

#. type: Title ==
#: _versions/2.7/guides/security-customization.adoc
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: _versions/2.7/guides/security-customization.adoc
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"
