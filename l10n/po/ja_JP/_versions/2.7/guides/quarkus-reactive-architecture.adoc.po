msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Quarkus is reactive.\n"
"It's even more than this: Quarkus unifies reactive and imperative programming.\n"
"You don't even have to choose: you can implement reactive components and imperative components then combine them inside the very **same** application.\n"
"No need to use different stacks, tooling or APIs; Quarkus bridges both worlds."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"This page will explain what we mean by _Reactive_ and how Quarkus enables it.\n"
"We will also discuss execution and programming models.\n"
"Finally, we will list the Quarkus extensions offering reactive facets."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"The _Reactive_ word is overloaded and associated with many concepts such as back-pressure, monads, or event-driven architecture.\n"
"So, let's clarify what we mean by _Reactive_."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"_Reactive_ is a set of principles and guidelines to build responsive distributed systems and applications.\n"
"The https://www.reactivemanifesto.org/[Reactive Manifesto] characterizes _Reactive Systems_ as distributed systems having four characteristics:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Reactive System is an architectural style that can be summarized by: distributed systems done right.\n"
"Relying on asynchronous message passing helps enforce the loose coupling (both in terms of space and time) between the different components.\n"
"You send messages to virtual destinations. The receiver can be located anywhere, or even not yet exist at the time of the message dispatch.\n"
"The elasticity pillar allows scaling up and down individual components according to the load.\n"
"Elasticity also provides redundancy, which helps with the resilience pillar.\n"
"Failures are inevitable.\n"
"Components forming a reactive system must handle them gracefully, avoid cascading failures, and self-adapt themselves."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"A responsive system can continue to handle the request while facing failures and under fluctuating load.\n"
"Quarkus has been tailored for that.\n"
"It provides features that will help you design, implement and operate reactive systems."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Quarkus is not only going to help you build reactive systems.\n"
"It's also going to make sure that each constituent enforces the reactive principles and is highly efficient."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Efficiency is essential, especially in the Cloud and in containerized environments.\n"
"Resources, such as CPU and memory, are shared among multiple applications.\n"
"Greedy applications that consume lots of memory are inefficient and put penalties on sibling applications.\n"
"You may need to request more memory, CPU, or bigger virtual machines.\n"
"It either increases your monthly Cloud bill or decreases your deployment density."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"I/O is an essential part of almost any modern system.\n"
"Whether it is to call a remote service, interact with a database, or send messages to a broker, there are all I/O-based operations.\n"
"Efficiently handling them is critical to avoid greedy applications.\n"
"For this reason, Quarkus uses non-blocking I/O, which allows a low number of OS threads to manage many concurrent I/Os.\n"
"As a result, Quarkus applications allow for higher concurrency, use less memory, and improve the deployment density."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Under the hood, Quarkus has a reactive engine.\n"
"This engine, powered by Eclipse Vert.x and Netty, handles the non-blocking I/O interactions."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"While using non-blocking I/O has tremendous benefits, it does not come for free.\n"
"Indeed, it introduces a new execution model quite different from the one used by classical frameworks."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Traditional applications use blocking I/O and an imperative (sequential) execution model.\n"
"So, in an application exposing an HTTP endpoint, each HTTP request is associated with a thread.\n"
"In general, that thread is going to process the whole request and the thread is tied up serving only that request for the duration of that request.\n"
"When the processing requires interacting with a remote service, it uses blocking I/O.\n"
"The thread is blocked, waiting for the result of the I/O.\n"
"While that model is simple to develop with (as everything is sequential), it has a few drawbacks.\n"
"To handle concurrent requests, you need multiple threads, so, you need to introduce a worker thread pool.\n"
"The size of this pool constrains the concurrency of the application.\n"
"In addition, each thread has a cost in terms of memory and CPU.\n"
"Large thread pools result in greedy applications."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"As we have seen above, non-blocking I/O avoids that problem.\n"
"A few threads can handle many concurrent I/O.\n"
"If we go back to the HTTP endpoint example, the request processing is executed on one of these I/O threads.\n"
"Because there are only a few of them, you need to use them wisely.\n"
"When the request processing needs to call a remote service, you can't block the thread anymore.\n"
"You schedule the I/O and pass a continuation, i.e., the code to execute once the I/O completes."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"The Quarkus architecture, based on non-blocking I/O and message passing, allows multiple supporting reactive development models that are all different in how they express continuations.\n"
"The two main ways to write reactive code with Quarkus are:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"First, https://smallrye.io/smallrye-mutiny[Mutiny] is an intuitive, event-driven reactive programming library.\n"
"With Mutiny, you write event-driven code.\n"
"Your code is a pipeline receiving events and processing them.\n"
"Each stage in your pipeline can be seen as a continuation, as Mutiny invokes them when the upstream part of the pipeline emits an event."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"The Mutiny API has been tailored to improve the readability and maintenance of the codebase.\n"
"Mutiny provides everything you need to orchestrate asynchronous actions, including concurrent execution.\n"
"It also offers a large set of operators to manipulate individual events and streams of events."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Co-routines are a way to write asynchronous code sequentially.\n"
"It suspends the execution of the code during I/O and registers the rest of the code as the continuation.\n"
"Kotlin coroutines are great when developing in Kotlin and only need to express sequential compositions (chain of co-dependent asynchronous tasks)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Changing your development model is not simple.\n"
"It requires relearning and restructuring code in a non-blocking fashion.\n"
"Fortunately, you don't have to do it!"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Quarkus is inherently reactive thanks to its reactive engine.\n"
"But, you, as an application developer, don't have to write reactive code.\n"
"Quarkus unifies reactive and imperative.\n"
"It means that you can write traditional blocking applications on Quarkus.\n"
"But how do you avoid blocking the I/O threads?\n"
"Quarkus implements a https://en.wikipedia.org/wiki/Proactor_pattern[proactor pattern] that switches to worker thread when needed."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Thanks to hints in your code (such as the `@Blocking` and `@NonBlocking` annotations), Quarkus extensions can decide when the application logic is blocking or non-blocking.\n"
"If we go back to the HTTP endpoint example from above, the HTTP request is always received on an I/O thread.\n"
"Then, the extension dispatching that request to your code decides whether to call it on the I/O thread, avoiding thread switches, or on a worker thread.\n"
"This decision depends on the extension.\n"
"For example, the RESTEasy Reactive extension uses the `@Blocking` annotation to determine if the method needs to be invoked using a worker thread, or if it can be invoked using the I/O thread."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Quarkus is pragmatic and versatile.\n"
"You decide how to develop and execute your application.\n"
"You can use the imperative way, the reactive way, or mix them, using reactive on the parts of the application under high concurrency."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Quarkus offers a large set of reactive APIs and features.\n"
"This section lists the most important, but it's not an exhaustive list.\n"
"Quarkus adds new features in every release, and the https://github.com/quarkiverse[Quarkiverse] proposes many extensions enabling _Reactive_."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"RESTEasy Reactive: an implementation of JAX-RS tailored for the Quarkus architecture.\n"
"It follows a reactive-first approach but allows imperative code using the `@Blocking` annotation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Reactive Rest Client: allows consuming HTTP endpoints.\n"
"Under the hood, it uses the non-blocking I/O features from Quarkus."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"gRPC: implement and consume gRPC services.\n"
"Offer reactive and imperative programming interfaces."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/quarkus-reactive-architecture.adoc
msgid ""
"Vert.x : the underlying reactive engine of Quarkus.\n"
"The extension allows accessing to the managed Vert.x instance, as well as its Mutiny variant (exposing the Vert.x API using Mutiny types)"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:6
#, no-wrap
msgid "Quarkus Reactive Architecture"
msgstr "Quarkus リアクティブアーキテクチャ"

#. type: Title ==
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:19
#, no-wrap
msgid "What is _Reactive_?"
msgstr "_リアクティブ_ とは？"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:28
msgid "Responsive - they must respond in a timely fashion"
msgstr "応答性 (Responsive) - タイムリーに対応してくれること"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:29
msgid "Elastic - they adapt themselves to the fluctuating load"
msgstr "伸縮性 (Elastic) - 変動する負荷に適応すること"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:30
msgid "Resilient - they handle failures gracefully"
msgstr "回復性 (Resilient) - 障害をグレースフルに処理すること"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:31
msgid "Asynchronous message passing - the component of a reactive system interact using messages"
msgstr "非同期メッセージパッシング (Asynchronous message passing) - リアクティブシステムのコンポーネントがメッセージで相互作用すること"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:35
msgid "In addition to this, the https://principles.reactive.foundation/[Reactive Principles white paper] lists a set of rules and patterns to help the construction of reactive systems."
msgstr "これに加えて、 link:https://principles.reactive.foundation/[リアクティブ原則ホワイトペーパー]には、リアクティブシステムの構築に役立つ一連のルールとパターンが記載されています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:36
#, no-wrap
msgid "Reactive Systems and Quarkus"
msgstr "リアクティブシステムとQuarkus"

#. type: Title ==
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:50
#, no-wrap
msgid "Reactive Applications"
msgstr "リアクティブ・アプリケーション"

#. type: Title ==
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:67
#, no-wrap
msgid "How does Quarkus enable Reactive?"
msgstr "Quarkusはどのようにしてリアクティブを実現するのですか？"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:75
msgid "Quarkus extensions and the application code can use this engine to orchestrate I/O interactions, interact with databases, send and receive messages, and so on."
msgstr "Quarkusのエクステンションとアプリケーションコードは、このエンジンを使用して、I/Oインタラクションのオーケストレーション、データベースとのインタラクション、メッセージの送受信などを行うことができます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:76
#, no-wrap
msgid "Reactive execution model"
msgstr "リアクティブ実行モデル"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:104
msgid "This model is much more efficient, but we need a way to write code to express these continuations."
msgstr "このモデルははるかに効率的ですが、これらの継続性を表現するためのコードを書く方法が必要です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:105
#, no-wrap
msgid "Reactive Programming Models"
msgstr "リアクティブ・プログラミング・モデル"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:111
msgid "Reactive Programming with https://smallrye.io/smallrye-mutiny[Mutiny], and"
msgstr "link:https://smallrye.io/smallrye-mutiny[Mutiny]を用いたリアクティブ・プログラミング、および"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:112
msgid "Coroutines with Kotlin"
msgstr "Kotlinのコルーチン"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:124
msgid "Find more info about Mutiny and its usage in Quarkus on xref:mutiny-primer.adoc[Mutiny support documentation]."
msgstr "Mutinyと、Quarkusでの使用に関する詳細は、 link:mutiny-primer.html[Mutinyサポートドキュメント]を参照してください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:129
#, no-wrap
msgid "Unification of Imperative and Reactive"
msgstr "命令型とリアクティブ型の統一"

#. type: Title ==
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:155
#, no-wrap
msgid "Quarkus Extensions enabling Reactive"
msgstr "リアクティブを可能にするQuarkusエクステンション"

#. type: Title ===
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:161
#, no-wrap
msgid "HTTP"
msgstr "HTTP"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:166
msgid "Reactive Routes: a declarative way to register HTTP routes directly on the Vert.x router used by Quarkus to route HTTP requests to methods."
msgstr "Reactive Routes: HTTPリクエストをメソッドにルーティングするためにQuarkusが使用するVert.xルーターに直接HTTPルートを登録する宣言的な方法です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:169
msgid "Qute - the Qute template engine exposes a reactive API to render templates in a non-blocking manner."
msgstr "Qute - Quteテンプレートエンジンは、テンプレートをノンブロッキングでレンダリングするリアクティブAPIを公開しています。"

#. type: Title ===
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:170
#, no-wrap
msgid "Data"
msgstr "データ"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:173
msgid "Hibernate Reactive: a version of Hibernate ORM using asynchronous and non-blocking clients to interact with the database."
msgstr "Hibernate Reactive: Hibernate ORMの、非同期、ノンブロッキングのクライアントを使用してデータベースと対話するバージョンです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:174
msgid "Hibernate Reactive with Panache: provide active record and repository support on top of Hibernate Reactive."
msgstr "Hibernate Reactive with Panache: Hibernate Reactiveの上でアクティブレコードとリポジトリのサポートを提供します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:175
msgid "Reactive PostgreSQL client: an asynchronous and non-blocking client interacting with a PostgreSQL database, allowing high concurrency."
msgstr "リアクティブPostgreSQLクライアント：PostgreSQLデータベースと対話する非同期かつノンブロッキングなクライアントで、高い並行性を実現します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:176
msgid "Reactive MySQL client: an asynchronous and non-blocking client interacting with a MySQL database"
msgstr "リアクティブ MySQL クライアント: MySQL データベースと対話する非同期かつノンブロッキングなクライアント"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:177
msgid "The MongoDB extension: exposes an imperative and reactive (Mutiny) APIs to interact with MongoDB."
msgstr "MongoDBエクステンション: MongoDBと対話するための命令型およびリアクティブ型（Mutiny）のAPIを公開しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:178
msgid "Mongo with Panache offers active record support for both the imperative and reactive APIs."
msgstr "Mongo with Panacheは、命令型APIとリアクティブ型APIの両方でアクティブレコードサポートを提供します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:179
msgid "The Cassandra extension: exposes an imperative and reactive (Mutiny) APIs to interact with Cassandra"
msgstr "Cassandraエクステンション: Cassandraと対話するための命令型およびリアクティブ型（Mutiny）のAPIを公開しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:180
msgid "The Redis extension: exposes an imperative and reactive (Mutiny) APIs to store and retrieve data from a Redis key-value store."
msgstr "Redisエクステンション: Redisキーバリューストアからデータを保存・取得するための命令型およびリアクティブ型（Mutiny）のAPIを公開しています。"

#. type: Title ===
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:181
#, no-wrap
msgid "Event-Driven Architecture"
msgstr "イベント駆動型アーキテクチャ"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:184
msgid "Reactive Messaging: allows implementing event-driven applications using reactive and imperative code."
msgstr "リアクティブ・メッセージング: リアクティブ型のコードと命令型のコードを使って、イベントドリブンなアプリケーションを実装することができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:185
msgid "Kafka Connector for Reactive Messaging: allows implementing applications consuming and writing Kafka records"
msgstr "Kafka Connector for Reactive Messaging: Kafkaのレコードを消費したり書いたりするアプリケーションを実装できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:186
msgid "AMQP 1.0 Connector for Reactive Message: allows implementing applications sending and receiving AMQP messages."
msgstr "AMQP 1.0 Connector for Reactive Message: AMQPメッセージを送受信するアプリケーションを実装できます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:187
#, no-wrap
msgid "Network Protocols and Utilities"
msgstr "ネットワークプロトコルとユーティリティ"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:192
msgid "GraphQL: implement and query (client) data store using GraphQL. Offers Mutiny APIs and subscriptions as event streams."
msgstr "GraphQL: GraphQLを使用して（クライアント）データストアを実装し、クエリを実行します。Mutiny APIとイベントストリームとしてサブスクリプションを提供します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:193
msgid "Fault Tolerance: provide retry, fallback, circuit breakers abilities to your application.It can be used with Mutiny types."
msgstr "フォールトトレランス: リトライ、フォールバック、サーキットブレーカーなどの機能をアプリケーションに提供します。Mutiny型と一緒に利用出来ます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:195
#, no-wrap
msgid "Engine"
msgstr "エンジン"

#. type: Plain text
#: upstream/_versions/2.7/guides/quarkus-reactive-architecture.adoc:199
msgid "Context Propagation: capture and propagate contextual objects (transaction, principal…) in a reactive pipeline"
msgstr "Context Propagation: リアクティブ・パイプラインでコンテキスト・オブジェクト（トランザクション、プリンシパル...）を捕捉し、伝搬させます。"
