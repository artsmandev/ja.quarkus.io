msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/kotlin.adoc
msgid ""
"When adding `kotlin` to the extensions list, the Maven plugin will generate a project that is properly\n"
"configured to work with Kotlin. Furthermore  the `org.acme.ReactiveGreetingResource` class is implemented as Kotlin source code (as is the case with the generated tests).\n"
"The addition of `resteasy-reactive-jackson` in the extension list results in importing the RESTEasy Reactive and Jackson extensions."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/kotlin.adoc
msgid ""
"The important thing to note is the use of the https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin[all-open] Kotlin compiler plugin.\n"
"In order to understand why this plugin is needed, first we need to note that by default all the classes generated from the Kotlin compiler are marked as `final`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/kotlin.adoc
msgid ""
"Thus, the `all-open` Kotlin compiler plugin allows us to configure the compiler to *not* mark as `final` classes that have certain annotations. In the snippet above,\n"
"we have specified that classes annotated with `javax.ws.rs.Path` should not be `final`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/kotlin.adoc
msgid ""
"If your application contains classes annotated with `javax.enterprise.context.ApplicationScoped`\n"
"for example, then `<option>all-open:annotation=javax.enterprise.context.ApplicationScoped</option>` needs to be added as well. Same goes for any class that needs to have a dynamic proxy created at runtime."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/kotlin.adoc
msgid ""
"Quarkus provides support for live reloading changes made to source code. This support is also available to Kotlin, meaning that developers can update their Kotlin source\n"
"code and immediately see their changes reflected."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/kotlin.adoc
msgid ""
"If the `com.fasterxml.jackson.module:jackson-module-kotlin` dependency and the `quarkus-jackson` extension (or one of the `quarkus-resteasy-jackson` or `quarkus-resteasy-reactive-jackson` extensions) have been added to the project,\n"
"then Quarkus automatically registers the `KotlinModule` to the `ObjectMapper` bean (see xref:rest-json.adoc#jackson[this] guide for more details)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/kotlin.adoc
msgid ""
"Kotlin coroutines provide a imperative programming model that actually gets executed in an asynchronous, reactive manner.\n"
"To simplify the interoperation between Mutiny and Kotlin there is the module `io.smallrye.reactive:mutiny-kotlin`, described link:https://smallrye.io/smallrye-mutiny/guides/kotlin[here]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/kotlin.adoc
msgid ""
"Kotlin reflection annotation processing differs from Java.  You may experience an error when using CDI @Inject such as:\n"
"\"kotlin.UninitializedPropertyAccessException: lateinit property xxx has not been initialized\""
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/kotlin.adoc:6
#, no-wrap
msgid "Using Kotlin"
msgstr "Kotlinの使用"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:12
msgid "https://kotlinlang.org/[Kotlin] is a very popular programming language that targets the JVM (amongst other environments). Kotlin has experienced a surge in popularity the last few years making it the most popular JVM language, except for Java of course."
msgstr "link:https://kotlinlang.org/[Kotlin] は、JVMをターゲットにした(他の環境を含めても)非常に人気のあるプログラミング言語です。Kotlinはここ数年で人気が急上昇し、Javaを除いて最も人気のあるJVM言語となっています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:14
msgid "Quarkus provides first class support for using Kotlin as will be explained in this guide."
msgstr "このガイドで説明するように、QuarkusはKotlinを使用するためのファーストクラスのサポートを提供しています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/kotlin.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:22
msgid "NB: For Gradle project setup please see below, and for further reference consult the guide in the xref:gradle-tooling.adoc[Gradle setup page]."
msgstr "注：Gradleプロジェクトのセットアップについては、以下を参照してください。また、詳細については、 link:gradle-tooling.html[Gradleセットアップページ]のガイドを参照してください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/kotlin.adoc:23
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:26
msgid "First, we need a new Kotlin project. This can be done using the following command:"
msgstr "まず、新しいKotlinプロジェクトが必要です。これは以下のコマンドで行うことができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:37
msgid "`ReactiveGreetingResource.kt` looks like this:"
msgstr "`ReactiveGreetingResource.kt` はこんな感じです。"

#. type: Title ===
#: upstream/_versions/2.7/guides/kotlin.adoc:56
#, no-wrap
msgid "Update code"
msgstr "コードの更新"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:59
msgid "In order to show a more practical example of Kotlin usage we will add a simple link:https://kotlinlang.org/docs/reference/data-classes.html[data class] called `Greeting.kt` like so:"
msgstr "Kotlin のより実用的な使用例を示すために、 `Greeting.kt` というシンプルな link:https://kotlinlang.org/docs/reference/data-classes.html[データクラス] を追加してみましょう。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:68
msgid "We also update the `ReactiveGreetingResource.kt` like so:"
msgstr "また、 `ReactiveGreetingResource.kt` を次のように更新しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:84
msgid "With these changes in place the `/hello` endpoint will reply with a JSON object instead of a simple String."
msgstr "これらの変更により、 `/hello` エンドポイントは、単純な文字列ではなくJSONオブジェクトで応答するようになりました。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:86
msgid "To make the test pass, we also need to update `ReactiveGreetingResourceTest.kt` like so:"
msgstr "テストをパスするためには、 `ReactiveGreetingResourceTest.kt` を次のように更新する必要があります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/kotlin.adoc:106
#, no-wrap
msgid "Important Maven configuration points"
msgstr "重要なMavenの設定ポイント"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:109
msgid "The generated `pom.xml` contains the following modifications compared to its counterpart when Kotlin is not selected:"
msgstr "生成された `pom.xml` には、Kotlin が選択されていない場合と比較して、以下の修正が含まれています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:111
#: upstream/_versions/2.7/guides/kotlin.adoc:174
msgid "The `quarkus-kotlin` artifact is added to the dependencies. This artifact provides support for Kotlin in the live reload mode (more about this later on)"
msgstr "`quarkus-kotlin` アーティファクトが依存関係に追加されています。このアーティファクトはライブリロードモードでの Kotlin のサポートを提供します (これについては後ほど説明します)。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:112
#: upstream/_versions/2.7/guides/kotlin.adoc:175
msgid "The `kotlin-stdlib-jdk8` is also added as a dependency."
msgstr "`kotlin-stdlib-jdk8` も依存関係として追加されています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:113
msgid "Maven's `sourceDirectory` and `testSourceDirectory` build properties are configured to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr "Maven の `sourceDirectory` と `testSourceDirectory` ビルドプロパティーは、Kotlin ソースを指すように設定されています (それぞれ `src/main/kotlin` と `src/test/kotlin` )。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:114
msgid "The `kotlin-maven-plugin` is configured as follows:"
msgstr "`kotlin-maven-plugin` は以下のように設定されています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:160
msgid "Having `final` classes however does not work well with various frameworks that need to create https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[Dynamic Proxies]."
msgstr "しかし、 `final` クラスであることは、 link:https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[ダイナミックプロキシー] を作成する必要がある様々なフレームワークではうまく機能しません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:168
msgid "Future versions of Quarkus will configure the Kotlin compiler plugin in a way that will make it unnecessary to alter this configuration."
msgstr "Quarkusの将来のバージョンでは、この設定を変更する必要がないようにKotlinコンパイラプラグインを設定するようになる予定です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/kotlin.adoc:169
#, no-wrap
msgid "Important Gradle configuration points"
msgstr "重要なGradle設定ポイント"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:172
msgid "Similar to the Maven configuration, when using Gradle, the following modifications are required when Kotlin is selected:"
msgstr "Mavenの設定と同様、Gradleを使用する場合、Kotlinを選択すると以下のような修正が必要になります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:176
msgid "The Kotlin plugin is activated, which implicitly adds `sourceDirectory` and `testSourceDirectory` build properties to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr "Kotlin プラグインが有効になり、暗黙のうちに `sourceDirectory` と `testSourceDirectory` のビルドプロパティーが追加され、Kotlin ソース (それぞれ `src/main/kotlin` と `src/test/kotlin` ) を指すようになります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:177
msgid "The all-open Kotlin plugin tells the compiler not to mark as final, those classes with the annotations highlighted (customize as required)"
msgstr "all-open Kotlinプラグインは、アノテーションがハイライトされているクラスを最終的なものとしてマークしないようにコンパイラに指示します (必要に応じてカスタマイズしてください)"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:178
msgid "When using native-image, the use of http (or https) protocol(s) must be declared"
msgstr "ネイティブイメージを使用する場合は、http (または https) プロトコルの使用を宣言しなければなりません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:179
msgid "An example configuration follows:"
msgstr "以下に設定例を示します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:233
#: upstream/_versions/2.7/guides/kotlin.adoc:298
msgid "The Kotlin plugin version needs to be specified."
msgstr "Kotlinプラグインのバージョンを指定する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:234
#: upstream/_versions/2.7/guides/kotlin.adoc:299
msgid "The all-open configuration required, as per Maven guide above"
msgstr "上記のMavenガイドにあるように、オールオープン構成が必要です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:236
msgid "or, if you use the Gradle Kotlin DSL:"
msgstr "または、GradleのKotlin DSLを使用している場合:"

#. type: Title ==
#: upstream/_versions/2.7/guides/kotlin.adoc:302
#, no-wrap
msgid "Live reload"
msgstr "ライブ・リロード"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:308
msgid "To see this feature in action, first execute:"
msgstr "この機能の動作を確認するには、まず次のコマンドを実行します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:312
msgid "When executing an HTTP GET request against `http://localhost:8080/hello`, you see a JSON message with the value `hello` as its `message` field."
msgstr "`http://localhost:8080/hello` に対してHTTP GETリクエストを実行すると、 `message` フィールドに `hello` という値を持つJSONメッセージが表示されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:314
msgid "Now using your favorite editor or IDE, update `ReactiveGreetingResource.kt` and change the `hello` method to the following:"
msgstr "ここで、お好きなエディタやIDEを使って、 `ReactiveGreetingResource.kt` をアップデートし、 `hello` のメソッドを以下のように変更します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:321
msgid "When you now execute an HTTP GET request against `http://localhost:8080/hello`, you should see a JSON message with the value `hi` as its `message` field."
msgstr "`http://localhost:8080/hello` に対してHTTP GETリクエストを実行すると、 `message` フィールドに `hi` という値を持つJSONメッセージが表示されるはずです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:323
msgid "One thing to note is that the live reload feature is not available when making changes to both Java and Kotlin source that have dependencies on each other. We hope to alleviate this limitation in the future."
msgstr "注意点としては、お互いに依存関係にあるJavaとKotlinの両方のソースに変更を加えた場合、ライブリロード機能が利用できないということです。将来的にはこの制限を緩和したいと考えています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/kotlin.adoc:324
#, no-wrap
msgid "Packaging the application"
msgstr "アプリケーションのパッケージング"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:327
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:331
msgid "and executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして次のコマンドで実行できます。 `java -jar target/quarkus-app/quarkus-run.jar`."

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:333
msgid "You can also build the native executable using:"
msgstr "ネイティブ実行可能ファイルを次のようにビルドすることもできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/kotlin.adoc:336
#, no-wrap
msgid "Kotlin and Jackson"
msgstr "Kotlin と Jackson"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:342
msgid "When using Kotlin data classes with `native-image` you may experience serialization errors that do not occur with the `JVM` version, despite the Kotlin Jackson Module being registered. This is especially so if you have a more complex JSON hierarchy, where an issue on a lower node causes a serialization failure. The error message displayed is a catch-all and typically displays an issue with the root object, which may not necessarily be the case."
msgstr "Kotlin のデータクラスを `native-image` で使用すると、Kotlin Jackson Module が登録されているにもかかわらず、 `JVM` バージョンでは発生しないシリアライズエラーが発生することがあります。これは、より複雑なJSON階層を持っている場合に特に見られる現象で、下位のノードで問題が発生するとシリアライズに失敗します。表示されるエラーメッセージはキャッチオールで、通常はルートオブジェクトの問題を表示しますが、必ずしもそうではない場合もあります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:349
msgid "To ensure full-compability with `native-image`, it is recommended to apply the Jackson `@field:JsonProperty(\"fieldName\")` annotation, and set a nullable default, as illustrated below. You can automate the generation of Kotlin data classes for your sample JSON using Intellij plugins (such as JSON to Kotlin Class), and easily enable the Jackson annotation and select nullable parameters as part of the auto-code generation."
msgstr "`native-image` との完全な互換性を確保するためには、Jackson `@field:JsonProperty(\"fieldName\")` アノテーションを適用し、以下の図のように nullable のデフォルトを設定することをお勧めします。Intellijのプラグイン（JSON to Kotlin Classなど）を使用して、サンプルのJSONに対するKotlinデータクラスの生成を自動化し、Jacksonアノテーションを有効にして、自動コード生成の一部としてnullableパラメータを選択することができます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/kotlin.adoc:381
#, no-wrap
msgid "Kotlin and the Kubernetes Client"
msgstr "KotlinとKubernetesクライアント"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:384
msgid "When working with the `quarkus-kubernetes` extension and have Kotlin classes bound to CustomResource definitions (like you do for building operators), you need to be aware that the underlying Fabric8 Kubernetes Client uses its own static Jackson `ObjectMapper` s, which can be configured as follows with the `KotlinModule`:"
msgstr "`quarkus-kubernetes` エクステンションを使用して、Kotlin クラスを CustomResource 定義にバインドする場合（オペレーターを構築する場合など）、基盤となる Fabric8 Kubernetes Client が独自の静的な Jackson `ObjectMapper` を使用することに注意する必要があります。これは `KotlinModule` を使用して以下のように設定できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:397
msgid "_Please test this carefully on compilation to native images and fallback to Java-compatible Jackson bindings if you experience problems._"
msgstr "_ネイティブイメージへのコンパイル時には慎重にテストし、問題が発生した場合はJava互換のJacksonバインディングにフォールバックしてください。_"

#. type: Title ==
#: upstream/_versions/2.7/guides/kotlin.adoc:398
#, no-wrap
msgid "Kotlin coroutines and Mutiny"
msgstr "Kotlin coroutines と Mutiny"

#. type: Title ==
#: upstream/_versions/2.7/guides/kotlin.adoc:403
#, fuzzy, no-wrap
msgid "RESTEasy Reactive and Coroutines"
msgstr "RESTEasyリアクティブとコルーチン"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:406
#, fuzzy
msgid "The `quarkus-resteasy-reactive` extension supports Kotlin `suspend fun` ctions in combination with `quarkus-kotlin` as well:"
msgstr "`quarkus-resteasy-reactive` エクステンションは、 `quarkus-kotlin` との組み合わせで Kotlin `suspend fun` ctions もサポートしています:"

#. type: Title ==
#: upstream/_versions/2.7/guides/kotlin.adoc:418
#, no-wrap
msgid "CDI @Inject with Kotlin"
msgstr "Kotlinでの CDI @Inject"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:424
msgid "In the example below, this can be easily solved by adapting the annotation, adding @field: Default, to handle the lack of a @Target on the Kotlin reflection annotation definition."
msgstr "以下の例では、アノテーションに @field を追加することで、Kotlin のリフレクションアノテーション定義に @Target がない場合に対応し、問題を簡単に解決できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:465
msgid "Kotlin requires a @field: xxx qualifier as it has no @Target on the annotation definition. Add @field: xxx in this example. @Default is used as the qualifier, explicitly specifying the use of the default bean."
msgstr "Kotlinでは、アノテーション定義に@Targetがないため、@field: xxx修飾子が必要です。この例では @field: xxx を追加します。@Defaultが修飾子として使用され、デフォルトBeanの使用を明示的に指定します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/kotlin.adoc:467
msgid "Alternatively, prefer the use of constructor injection which works without modification of the Java examples, increases testability and complies best to a Kotlin programming style."
msgstr "あるいは、Javaの例を変更せずに動作し、テスト性が高く、Kotlinのプログラミングスタイルに最も適しているコンストラクタ・インジェクションの使用をお勧めします。"
