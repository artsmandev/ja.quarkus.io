msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"Implementing a gRPC service requires the gRPC classes to be generated.\n"
"Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"To implement a gRPC service using the Mutiny API, create a class that implements the service interface.\n"
"Then, implement the methods defined in the service interface.\n"
"If you don't want to implement a service method just throw an `java.lang.UnsupportedOperationException` from the method body (the exception will be automatically converted to the appropriate gRPC exception).\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"To implement a gRPC service using the default gRPC API, create a class that extends the default implementation base.\n"
"Then, override the methods defined in the service interface.\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"By default, all the methods from a gRPC service run on the event loop.\n"
"As a consequence, you must **not** block.\n"
"If your service logic must block, annotate the method with `io.smallrye.common.annotation.Blocking`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"Clients can specify the fully qualified service name to get the health status of a specific service\n"
"or skip specifying the service name to get the general status of the gRPC server."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"For more details, check out the\n"
"https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC documentation]"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"Additionally, if Quarkus SmallRye Health is added to the application, a readiness check for\n"
"the state of the gRPC services will be added to the MicroProfile Health endpoint response, that is `/q/health`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"Quarkus gRPC Server implements the https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[reflection service].\n"
"This service allows tools like https://github.com/fullstorydev/grpcurl[grpcurl] or https://github.com/gusaul/grpcox[grpcox] to interact with your services."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"The reflection service is enabled by default in _dev_ mode.\n"
"In test or production mode, you need to enable it explicitly by setting `quarkus.grpc.server.enable-reflection-service` to `true`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"Note that all paths in the configuration may either specify a resource on the classpath\n"
"(typically from `src/main/resources` or its subfolder) or an external file."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"To apply an interceptor to all exposed services, annotate it with `@io.quarkus.grpc.GlobalInterceptor`.\n"
"To apply an interceptor to a single service, register it on the service with `@io.quarkus.grpc.RegisterInterceptor`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"When you have multiple server interceptors, you can order them by implementing the `javax.enterprise.inject.spi.Prioritized` interface. Please note that all the global interceptors are invoked before the service-specific\n"
"interceptors."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"Interceptors with the highest priority are called first.\n"
"The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"The easiest way to test a gRPC service is to use a gRPC client as described\n"
"in xref:grpc-service-consumption.adoc[Consuming a gRPC Service]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"Please note that in the case of using a client to test an exposed service that does not use TLS,\n"
"there is no need to provide any configuration. E.g. to test the `HelloService`\n"
"defined above, one could create the following test:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"In the dev mode, you can try out your gRPC services in the Quarkus Dev UI.\n"
"Just go to http://localhost:8080/q/dev and click on _Services_ under the gRPC tile."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/grpc-service-implementation.adoc
msgid ""
"gRPC server metrics are automatically enabled when the application also uses the xref:micrometer.adoc[`quarkus-micrometer`] extension.\n"
"Micrometer collects the metrics of all the gRPC services implemented by the application."
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:6
#, no-wrap
msgid "Implementing a gRPC Service"
msgstr "gRPCサービスの実装"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:11
msgid "gRPC service implementations exposed as CDI beans are automatically registered and served by quarkus-grpc."
msgstr "CDI Beanとして公開されたgRPCサービスの実装は、quarkus-grpcによって自動的に登録、提供されます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:15
#, no-wrap
msgid "Generated Code"
msgstr "生成されたコード"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:18
msgid "Quarkus generates a few implementation classes for services declared in the `proto` file:"
msgstr "Quarkusは、 `proto` ファイルで宣言されたサービスに対して、いくつかの実装クラスを生成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:20
msgid "A _service interface_ using the Mutiny API"
msgstr "Mutiny APIを使用した _サービスインターフェース_"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:21
msgid "the class name is `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}`"
msgstr "クラス名は `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}` "

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:22
msgid "An _implementation base_ class using the gRPC API"
msgstr "gRPC APIを利用した _実装のベース_ のクラス"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:23
msgid "the class name is structured as follows: `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`"
msgstr "クラス名は以下のように構成されています。 `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` "

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:25
msgid "For example, if you use the following `proto` file snippet:"
msgstr "例えば、以下の `proto` ファイルスニペットを使用した場合は、"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:35
msgid "`hello` is the java package for the generated classes."
msgstr "`hello` は、生成されたクラスのjavaパッケージです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:36
msgid "`Greeter` is the service name."
msgstr "`Greeter` はサービス名です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:38
msgid "Then the service interface is `hello.Greeter` and the implementation base is the abstract static nested class: `hello.GreeterGrpc.GreeterImplBase`."
msgstr "サービス・インターフェースは `hello.Greeter` であり、実装ベースは `hello.GreeterGrpc.GreeterImplBase` という抽象的な静的ネストクラスです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:40
msgid "You'll need to implement the _service interface_ or extend the _base class_ with your service implementation bean as described in the following sections."
msgstr "以下のセクションで説明するように、 _サービスインターフェース_ を実装するか、 _ベースクラス_ をサービス実装Beanで拡張する必要があります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:41
#, no-wrap
msgid "Implementing a Service with the Mutiny API"
msgstr "Mutiny APIによるサービスの実装"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:65
msgid "A gRPC service implementation bean must be annotated with the `@GrpcService` annotation and should not declare any other CDI qualifier. All gRPC services have the `javax.inject.Singleton` scope. Additionally, the request context is always active during a service call."
msgstr "gRPCサービス実装Beanは、 `@GrpcService` アノテーションを付加されなければならず、他のCDI修飾子を宣言してはいけません。すべてのgRPCサービスは、 `javax.inject.Singleton` スコープを持ちます。また、サービスコール中は常にリクエストコンテキストが有効になります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:66
msgid "`hello.Greeter` is the generated service interface."
msgstr "`hello.Greeter` は、生成されたサービスインターフェースです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:68
msgid "The service implementation bean can also extend the Mutiny implementation base, where the class name is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`."
msgstr "サービス実装Beanは、Mutinyの実装ベースを拡張することもでき、その場合、クラス名は以下のように構成されます。 `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` "

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:69
#, no-wrap
msgid "Implementing a Service with the default gRPC API"
msgstr "デフォルトのgRPC APIでのサービス実装"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:92
#, no-wrap
msgid "Blocking Service Implementation"
msgstr "ブロッキングサービスの実装"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:107
#, no-wrap
msgid "Handling Streams"
msgstr "ストリームの処理"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:110
msgid "gRPC allows receiving and returning streams:"
msgstr "gRPCでは、ストリームを受信して返すことができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:121
msgid "Using Mutiny, you can implement these as follows:"
msgstr "Mutinyを使うと、以下のように実装できます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:160
#, no-wrap
msgid "Health Check"
msgstr "ヘルスチェック"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:162
msgid "For the implemented services, Quarkus gRPC exposes health information in the following format:"
msgstr "実装されたサービスでは、Quarkus gRPCは以下の形式でヘルスチェックを公開しています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:197
#, no-wrap
msgid "Reflection Service"
msgstr "リフレクションサービス"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:205
#, no-wrap
msgid "Scaling"
msgstr "スケーリング"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:207
msgid "By default, quarkus-grpc starts a single gRPC server running on a single event loop."
msgstr "デフォルトでは、quarkus-grpcは単一のイベントループ上で動作する単一のgRPCサーバーを起動します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:209
msgid "If you wish to scale your server, you can set the number of server instances by setting `quarkus.grpc.server.instances`."
msgstr "サーバーをスケールさせたい場合は、 `quarkus.grpc.server.instances` を設定することで、サーバーのインスタンス数をセットできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:210
#, no-wrap
msgid "Server Configuration"
msgstr "サーバー構成"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:214
#, no-wrap
msgid "Example of Configuration"
msgstr "構成の例"

#. type: Title ===
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:216
#, no-wrap
msgid "Enabling TLS"
msgstr "TLSを有効にする"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:219
msgid "To enable TLS, use the following configuration."
msgstr "TLSを有効にするには、以下の設定を使用します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:230
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr "SSL/TLSを設定すると、 `plain-text` は自動的に無効になります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:231
#, no-wrap
msgid "TLS with Mutual Auth"
msgstr "相互認証付きTLS"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:234
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr "相互認証付きのTLSを使用するには、以下の設定を使用します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:244
#, no-wrap
msgid "Server Interceptors"
msgstr "サーバーインターセプター"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:247
msgid "gRPC server interceptors let you perform logic, such as authentication, before your service is invoked."
msgstr "gRPCサーバーのインターセプターでは、サービスが呼び出される前に、認証などのロジックを実行することができるようになります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:249
msgid "You can implement a gRPC server interceptor by creating an `@ApplicationScoped` bean implementing `io.grpc.ServerInterceptor`:"
msgstr "`io.grpc.ServerInterceptor` を実装した `@ApplicationScoped` Beanを作成することで、gRPC サーバーのインターセプターを実装できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:265
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] to properly implement your interceptor."
msgstr "link:https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] をチェックして、インターセプターを適切に実装してください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:305
#, no-wrap
msgid "Testing your services"
msgstr "サービスのテスト"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:331
#, no-wrap
msgid "Trying out your services manually"
msgstr "手動でサービスを試す"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:336
msgid "Please note that your application needs to expose the \"normal\" HTTP port for the Dev UI to be accessible. If your application does not expose any HTTP endpoints, you can create a dedicated profile with a dependency on `quarkus-vertx-http`:"
msgstr "Dev UIにアクセスするには、アプリケーションが ”通常の” HTTPポートを公開する必要があることに注意してください。アプリケーションがHTTPエンドポイントを公開していない場合は、 `quarkus-vertx-http` に依存する専用のプロファイルを作成することができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:351
msgid "Having it, you can run the dev mode with: `mvn quarkus:dev -Pdevelopment`."
msgstr "これがあれば、次のようにしてDevモードを実行できます： `mvn quarkus:dev -Pdevelopment` "

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:353
msgid "If you use Gradle, you can simply add a dependency for the `quarkusDev` task:"
msgstr "Gradleを使用している場合は、 `quarkusDev` タスクの依存関係を追加するだけです。"

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:361
#, no-wrap
msgid "gRPC Server metrics"
msgstr "gRPCサーバーのメトリクス"

#. type: Title ===
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:363
#, no-wrap
msgid "Enabling metrics collection"
msgstr "メトリクス収集の有効化"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:369
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr "例えば、メトリクスをPrometheusにエクスポートすると、以下のように取得できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:388
msgid "The service name, method and type can be found in the _tags_."
msgstr "サービス名、メソッド、タイプは _tags_ で確認できます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:389
#, no-wrap
msgid "Disabling metrics collection"
msgstr "メトリクス収集の無効化"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-service-implementation.adoc:392
msgid "To disable the gRPC server metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr "`quarkus-micrometer` を使用しているときに gRPC サーバーメトリクスを無効にするには、アプリケーションの設定に以下のプロパティを追加します。"
