msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"This guide walks you through the process of creating a Quarkus application\n"
"with https://www.optaplanner.org/[OptaPlanner]'s constraint solving Artificial Intelligence (AI)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Your service will assign `Lesson` instances to `Timeslot` and `Room` instances automatically\n"
"by using AI to adhere to hard and soft scheduling _constraints_, such as the following examples:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Mathematically speaking, school timetabling is an _NP-hard_ problem.\n"
"This means it is difficult to scale.\n"
"Simply brute force iterating through all possible combinations takes millions of years\n"
"for a non-trivial dataset, even on a supercomputer.\n"
"Luckily, AI constraint solvers such as OptaPlanner have advanced algorithms\n"
"that deliver a near-optimal solution in a reasonable amount of time."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Use https://code.quarkus.io/[code.quarkus.io] to generate an application\n"
"with the following extensions, for Maven or Gradle:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Your goal is to assign each lesson to a time slot and a room.\n"
"You will create these classes:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"The `Timeslot` class represents a time interval when lessons are taught,\n"
"for example, `Monday 10:30 - 11:30` or `Tuesday 13:30 - 14:30`.\n"
"For simplicity's sake, all time slots have the same duration\n"
"and there are no time slots during lunch or other breaks."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"A time slot has no date, because a high school schedule just repeats every week.\n"
"So there is no need for https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#continuousPlanning[continuous planning]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Because no `Timeslot` instances change during solving, a `Timeslot` is called a _problem fact_.\n"
"Such classes do not require any OptaPlanner specific annotations."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Notice the `toString()` method keeps the output short,\n"
"so it is easier to read OptaPlanner's `DEBUG` or `TRACE` log, as shown later."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"The `Room` class represents a location where lessons are taught,\n"
"for example, `Room A` or `Room B`.\n"
"For simplicity's sake, all rooms are without capacity limits\n"
"and they can accommodate all lessons."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"During a lesson, represented by the `Lesson` class,\n"
"a teacher teaches a subject to a group of students,\n"
"for example, `Math by A.Turing for 9th grade` or `Chemistry by M.Curie for 10th grade`.\n"
"If a subject is taught multiple times per week by the same teacher to the same student group,\n"
"there are multiple `Lesson` instances that are only distinguishable by `id`.\n"
"For example, the 9th grade has six math lessons a week."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"During solving, OptaPlanner changes the `timeslot` and `room` fields of the `Lesson` class,\n"
"to assign each lesson to a time slot and a room.\n"
"Because OptaPlanner changes these fields, `Lesson` is a _planning entity_:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Most of the fields in the previous diagram contain input data, except for the orange fields:\n"
"A lesson's `timeslot` and `room` fields are unassigned (`null`) in the input data\n"
"and assigned (not `null`) in the output data.\n"
"OptaPlanner changes these fields during solving.\n"
"Such fields are called planning variables.\n"
"In order for OptaPlanner to recognize them,\n"
"both the `timeslot` and `room` fields require an `@PlanningVariable` annotation.\n"
"Their containing class, `Lesson`, requires an `@PlanningEntity` annotation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"The `Lesson` class has an `@PlanningEntity` annotation,\n"
"so OptaPlanner knows that this class changes during solving\n"
"because it contains one or more planning variables."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"The `timeslot` field has an `@PlanningVariable` annotation,\n"
"so OptaPlanner knows that it can change its value.\n"
"In order to find potential `Timeslot` instances to assign to this field,\n"
"OptaPlanner uses the `valueRangeProviderRefs` property to connect to a value range provider\n"
"(explained later) that provides a `List<Timeslot>` to pick from."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Determining the `@PlanningVariable` fields for an arbitrary constraint solving use case\n"
"is often challenging the first time.\n"
"Read https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#domainModelingGuide[the domain modeling guidelines]\n"
"to avoid common pitfalls."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"A _score_ represents the quality of a specific solution.\n"
"The higher the better.\n"
"OptaPlanner looks for the best solution, which is the solution with the highest score found in the available time.\n"
"It might be the _optimal_ solution."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Because this use case has hard and soft constraints,\n"
"use the `HardSoftScore` class to represent the score:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Hard constraints are weighted against other hard constraints.\n"
"Soft constraints are weighted too, against other soft constraints.\n"
"*Hard constraints always outweigh soft constraints*, regardless of their respective weights."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Unfortunately **that does not scale well**, because it is non-incremental:\n"
"every time a lesson is assigned to a different time slot or room,\n"
"all lessons are re-evaluated to calculate the new score."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Instead, create a `src/main/java/org/acme/optaplanner/solver/TimeTableConstraintProvider.java` class\n"
"to perform incremental score calculation.\n"
"It uses OptaPlanner's ConstraintStream API which is inspired by Java Streams and SQL:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"A `TimeTable` wraps all `Timeslot`, `Room`, and `Lesson` instances of a single dataset.\n"
"Furthermore, because it contains all lessons, each with a specific planning variable state,\n"
"it is a _planning solution_ and it has a score:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"If lessons are still unassigned, then it is an _uninitialized_ solution,\n"
"for example, a solution with the score `-4init/0hard/0soft`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"If it breaks hard constraints, then it is an _infeasible_ solution,\n"
"for example, a solution with the score `-2hard/-3soft`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"If it adheres to all hard constraints, then it is a _feasible_ solution,\n"
"for example, a solution with the score `0hard/-7soft`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"The `TimeTable` class has an `@PlanningSolution` annotation,\n"
"so OptaPlanner knows that this class contains all of the input and output data."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"The values of the `timeslot` and `room` fields are typically still `null`, so unassigned.\n"
"They are planning variables."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"The other fields, such as `subject`, `teacher` and `studentGroup`, are filled in.\n"
"These fields are problem properties."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"The `timeslotList` field is a value range provider.\n"
"It holds the `Timeslot` instances which OptaPlanner can pick from to assign to the `timeslot` field of `Lesson` instances.\n"
"The `timeslotList` field has an `@ValueRangeProvider` annotation to connect the `@PlanningVariable` with the `@ValueRangeProvider`,\n"
"by matching the value of the `id` property with the value of the `valueRangeProviderRefs` property of the `@PlanningVariable` annotation in the `Lesson` class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Furthermore, OptaPlanner needs to know which `Lesson` instances it can change\n"
"as well as how to retrieve the `Timeslot` and `Room` instances used for score calculation\n"
"by your `TimeTableConstraintProvider`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"The `timeslotList` and `roomList` fields have an `@ProblemFactCollectionProperty` annotation,\n"
"so your `TimeTableConstraintProvider` can select _from_ those instances."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"The `lessonList` has an `@PlanningEntityCollectionProperty` annotation,\n"
"so OptaPlanner can change them during solving\n"
"and your `TimeTableConstraintProvider` can select _from_ those too."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Now you are ready to put everything together and create a REST service.\n"
"But solving planning problems on REST threads causes HTTP timeout issues.\n"
"Therefore, the Quarkus extension injects a `SolverManager` instance,\n"
"which runs solvers in a separate thread pool\n"
"and can solve multiple datasets in parallel."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"For simplicity's sake, this initial implementation waits for the solver to finish,\n"
"which can still cause an HTTP timeout.\n"
"The _complete_ implementation avoids HTTP timeouts much more elegantly."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Without a termination setting or a termination event, the solver runs forever.\n"
"To avoid that, limit the solving time to five seconds.\n"
"That is short enough to avoid the HTTP timeout."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Now that the application is running, you can test the REST service.\n"
"You can use any REST client you wish.\n"
"The following example uses the Linux command `curl` to send a POST request:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"After about five seconds, according to the termination spent time defined in your `application.properties`,\n"
"the service returns an output similar to the following example:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Notice that your application assigned all four lessons to one of the two time slots and one of the two rooms.\n"
"Also notice that it conforms to all hard constraints.\n"
"For example, M. Curie's two lessons are in different time slots."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"To test each constraint in isolation, use a `ConstraintVerifier` in unit tests.\n"
"It tests each constraint's corner cases in isolation from the other tests,\n"
"which lowers maintenance when adding a new constraint with proper test coverage."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"This test verifies that the constraint `TimeTableConstraintProvider::roomConflict`,\n"
"when given three lessons in the same room, where two lessons have the same timeslot,\n"
"it penalizes with a  match weight of `1`.\n"
"So with a constraint weight of `10hard` it would reduce the score by `-10hard`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Notice how `ConstraintVerifier` ignores the constraint weight during testing - even\n"
"if those constraint weights are hard coded in the `ConstraintProvider` - because\n"
"constraints weights change regularly before going into production.\n"
"This way, constraint weight tweaking does not break the unit tests."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"This test verifies that after solving, all lessons are assigned to a time slot and a room.\n"
"It also verifies that it found a feasible solution (no hard constraints broken)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Normally, the solver finds a feasible solution in less than 200 milliseconds.\n"
"Notice how the `application.properties` overwrites the solver termination during tests\n"
"to terminate as soon as a feasible solution (`0hard/*soft`) is found.\n"
"This avoids hard coding a solver time, because the unit test might run on arbitrary hardware.\n"
"This approach ensures that the test runs long enough to find a feasible solution, even on slow machines.\n"
"But it does not run a millisecond longer than it strictly must, even on fast machines."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"When adding constraints in your `ConstraintProvider`,\n"
"keep an eye on the _score calculation speed_ in the `info` log,\n"
"after solving for the same amount of time, to assess the performance impact:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"To understand how OptaPlanner is solving your problem internally,\n"
"change the logging in the `application.properties` file or with a `-D` system property:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Congratulations!\n"
"You have just developed a Quarkus application with https://www.optaplanner.org/[OptaPlanner]!"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Adjust the `TimeTableResource` to read and write a `TimeTable` instance in a single transaction\n"
"and use those accordingly:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"For simplicity's sake, this code handles only one `TimeTable` instance,\n"
"but it is straightforward to enable multi-tenancy and handle multiple `TimeTable` instances of different high schools in parallel."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"The `getTimeTable()` method returns the latest timetable from the database.\n"
"It uses the `ScoreManager` (which is automatically injected)\n"
"to calculate the score of that timetable, so the UI can show the score."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"The `solve()` method starts a job to solve the current timetable and store the time slot and room assignments in the database.\n"
"It uses the `SolverManager.solveAndListen()` method to listen to intermediate best solutions\n"
"and update the database accordingly.\n"
"This enables the UI to show progress while the backend is still solving."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/optaplanner.adoc
msgid ""
"Adjust the `TimeTableResourceTest` instance accordingly, now that the `solve()` method returns immediately.\n"
"Poll for the latest solution until the solver finishes solving:"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/optaplanner.adoc:6
#, no-wrap
msgid "OptaPlanner - Using AI to optimize a schedule with OptaPlanner"
msgstr "OptaPlanner - OptaPlanner での AI を使用したスケジュールの最適化"

#. type: Title ==
#: upstream/_versions/2.7/guides/optaplanner.adoc:14
#, no-wrap
msgid "What you will build"
msgstr "何を構築するか"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:17
msgid "You will build a REST application that optimizes a school timetable for students and teachers:"
msgstr "生徒と教師の時間割を最適化する REST アプリケーションを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:24
msgid "A room can have at most one lesson at the same time."
msgstr "教室は同時に最大 1 つのレッスンを持つことができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:25
msgid "A teacher can teach at most one lesson at the same time."
msgstr "教師は同時に最大 1 つのレッスンを教えることができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:26
msgid "A student can attend at most one lesson at the same time."
msgstr "生徒は同時に最大 1 つのレッスンに参加できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:27
msgid "A teacher prefers to teach all lessons in the same room."
msgstr "教師はすべてのレッスンを同じ教室で教えることを好みます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:28
msgid "A teacher prefers to teach sequential lessons and dislikes gaps between lessons."
msgstr "教師は連続してレッスンを教えることを好み、レッスン間に空き時間があることを嫌います。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:29
msgid "A student dislikes sequential lessons on the same subject."
msgstr "生徒は連続して同じテーマのレッスンに出席することを嫌います。"

#. type: Title ==
#: upstream/_versions/2.7/guides/optaplanner.adoc:38
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:44
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:46
msgid "The solution is located in {quickstarts-tree-url}/optaplanner-quickstart[the `optaplanner-quickstart` directory]."
msgstr "ソリューションは、 {quickstarts-tree-url}/optaplanner-quickstart[`optaplanner-quickstart` ディレクトリー] にあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/optaplanner.adoc:47
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/2.7/guides/optaplanner.adoc:53
#, no-wrap
msgid "The build file and the dependencies"
msgstr "ビルドファイルと依存関係"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:59
#, fuzzy
msgid "RESTEasy JAX-RS (`quarkus-resteasy`)"
msgstr "RESTEasy JAX-RS ( `quarkus-resteasy` )"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:60
#, fuzzy
msgid "RESTEasy Jackson (`quarkus-resteasy-jackson`)"
msgstr "RESTEasy Jackson ( `quarkus-resteasy-jackson` )"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:61
msgid "OptaPlanner (`optaplanner-quarkus`)"
msgstr "OptaPlanner (`optaplanner-quarkus`)"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:62
msgid "OptaPlanner Jackson (`optaplanner-quarkus-jackson`)"
msgstr "OptaPlanner Jackson (`optaplanner-quarkus-jackson`)"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:64
msgid "Alternatively, generate it from the command line:"
msgstr "または、コマンドラインから生成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:70
msgid "This will include the following dependencies in your build file:"
msgstr "これには、ビルドファイルの次の依存関係が含まれます。"

#. type: Block title
#: upstream/_versions/2.7/guides/optaplanner.adoc:72
#: upstream/_versions/2.7/guides/optaplanner.adoc:726
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.7/guides/optaplanner.adoc:119
#: upstream/_versions/2.7/guides/optaplanner.adoc:736
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.7/guides/optaplanner.adoc:133
#, no-wrap
msgid "Model the domain objects"
msgstr "ドメインオブジェクトのモデル化"

#. type: Title ===
#: upstream/_versions/2.7/guides/optaplanner.adoc:140
#, no-wrap
msgid "Timeslot"
msgstr "タイムスロット"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:151
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Timeslot.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/domain/Timeslot.java` クラスを作成します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/optaplanner.adoc:200
#, no-wrap
msgid "Room"
msgstr "教室"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:208
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Room.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/domain/Room.java` クラスを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:237
msgid "`Room` instances do not change during solving, so `Room` is also a _problem fact_."
msgstr "解決の間、`Room` インスタンスは変更されないため、`Room`も_問題の事実_です。"

#. type: Title ===
#: upstream/_versions/2.7/guides/optaplanner.adoc:238
#, no-wrap
msgid "Lesson"
msgstr "レッスン"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:263
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Lesson.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/domain/Lesson.java` クラスを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:348
msgid "The `room` field also has an `@PlanningVariable` annotation, for the same reasons."
msgstr "同じ理由で、`room` フィールドにも `@PlanningVariable` アノテーションがあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/optaplanner.adoc:357
#, no-wrap
msgid "Define the constraints and calculate the score"
msgstr "制約の定義とスコアの計算"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:368
msgid "Hard constraints must not be broken. For example: _A room can have at most one lesson at the same time._"
msgstr "ハード制約を破ってはいけません。例: _教室は同時に最大 1 つのレッスンを持つことができます。_"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:369
msgid "Soft constraints should not be broken. For example: _A teacher prefers to teach in a single room._"
msgstr "ソフト制約を破ってはいけません。例: _教師は 1 つの教室で教えることを好みます。_"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:375
msgid "To calculate the score, you could implement an `EasyScoreCalculator` class:"
msgstr "スコアを計算するには、`EasyScoreCalculator` クラスを実装します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:485
msgid "The `ConstraintProvider` scales an order of magnitude better than the `EasyScoreCalculator`: __O__(n) instead of __O__(n²)."
msgstr "`ConstraintProvider` は、のスケーリングは `EasyScoreCalculator` より桁違いに優れており、__O__(n²) ではなく __O __(n) です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/optaplanner.adoc:486
#, no-wrap
msgid "Gather the domain objects in a planning solution"
msgstr "プランニングソリューションでドメインオブジェクトを収集します"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:500
msgid "Create the `src/main/java/org/acme/optaplanner/domain/TimeTable.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/domain/TimeTable.java` クラスを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:561
msgid "Specifically, this class is the input of the problem:"
msgstr "具体的には、このクラスは問題の入力です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:563
msgid "A `timeslotList` field with all time slots"
msgstr "すべてのタイムスロットを含む `timeslotList` フィールド"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:564
#: upstream/_versions/2.7/guides/optaplanner.adoc:566
msgid "This is a list of problem facts, because they do not change during solving."
msgstr "解決中に変更されないため、これは問題の事実のリストです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:565
msgid "A `roomList` field with all rooms"
msgstr "すべての教室を含む `roomList` フィールド"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:567
msgid "A `lessonList` field with all lessons"
msgstr "すべてのレッスンを含む `lessonList` フィールド"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:568
msgid "This is a list of planning entities, because they change during solving."
msgstr "解決中に変更されるため、これはプランニングエンティティーのリストです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:569
msgid "Of each `Lesson`:"
msgstr "各 `レッスン` の:"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:575
msgid "However, this class is also the output of the solution:"
msgstr "ただし、このクラスはソリューションの出力でもあります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:577
msgid "A `lessonList` field for which each `Lesson` instance has non-null `timeslot` and `room` fields after solving"
msgstr "解決した後、各 `Lesson` インスタンスに null 以外の `timeslot` フィールドと `room` フィールドがある `lessonList` フィールド"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:578
msgid "A `score` field that represents the quality of the output solution, for example, `0hard/-5soft`"
msgstr "出力ソリューションの品質を表す `score` フィールド (例: `0hard/-5soft`)"

#. type: Title ===
#: upstream/_versions/2.7/guides/optaplanner.adoc:579
#, no-wrap
msgid "The value range providers"
msgstr "値の範囲プロバイダー"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:587
msgid "Following the same logic, the `roomList` field also has an `@ValueRangeProvider` annotation."
msgstr "同じロジックに従って、`roomList` フィールドにも `@ValueRangeProvider` アノテーションがあります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/optaplanner.adoc:588
#, no-wrap
msgid "The problem fact and planning entity properties"
msgstr "問題の事実とプランニングエンティティーのプロパティー"

#. type: Title ==
#: upstream/_versions/2.7/guides/optaplanner.adoc:601
#, no-wrap
msgid "Create the solver service"
msgstr "ソルバーサービスの作成"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:610
msgid "Create the `src/main/java/org/acme/optaplanner/rest/TimeTableResource.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/rest/TimeTableResource.java` クラスを作成します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/optaplanner.adoc:654
#, no-wrap
msgid "Set the termination time"
msgstr "終了時刻の設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:661
msgid "Create the `src/main/resources/application.properties` file:"
msgstr "`src/main/resources/application.properties` ファイルを作成します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/optaplanner.adoc:670
#, no-wrap
msgid "Run the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:673
msgid "First start the application:"
msgstr "最初にアプリケーションを起動します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/optaplanner.adoc:676
#, no-wrap
msgid "Try the application"
msgstr "アプリケーションの試行"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:704
msgid "On the server side, the `info` log show what OptaPlanner did in those five seconds:"
msgstr "サーバー側では、`info` ログに OptaPlanner が 5 秒間で何をしたかが示されます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/optaplanner.adoc:713
#, no-wrap
msgid "Test the application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:716
msgid "A good application includes test coverage."
msgstr "優れたアプリケーションには、テストカバレッジが含まれます。"

#. type: Title ====
#: upstream/_versions/2.7/guides/optaplanner.adoc:717
#, no-wrap
msgid "Test the constraints"
msgstr "制約のテスト"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:724
msgid "Add a `optaplanner-test` dependency in your build file:"
msgstr "ビルドファイルに `optaplanner-test` 依存関係を追加します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:742
msgid "Create the `src/test/java/org/acme/optaplanner/solver/TimeTableConstraintProviderTest.java` class:"
msgstr "`src/test/java/org/acme/optaplanner/solutioner/TimeTableConstraintProviderTest.java` クラスを作成します。"

#. type: Title ====
#: upstream/_versions/2.7/guides/optaplanner.adoc:803
#, no-wrap
msgid "Test the solver"
msgstr "ソルバーのテスト"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:806
msgid "In a JUnit test, generate a test dataset and send it to the `TimeTableResource` to solve."
msgstr "JUnit テストでは、テストデータセットを生成し、それを `TimeTableResource` に送信して解決します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:808
msgid "Create the `src/test/java/org/acme/optaplanner/rest/TimeTableResourceTest.java` class:"
msgstr "`src/test/java/org/acme/optaplanner/rest/TimeTableResourceTest.java` クラスを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:887
msgid "Add test properties to the `src/main/resources/application.properties` file:"
msgstr "テストプロパティーを `src/main/resources/application.properties` ファイルに追加します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/optaplanner.adoc:904
#, no-wrap
msgid "Logging"
msgstr "ロギング"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:924
msgid "Use `debug` logging to show every _step_:"
msgstr "`debug` ロギングを使用して、すべての _ステップ_ を表示します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:934
msgid "Use `trace` logging to show every _step_ and every _move_ per step."
msgstr "`trace` ロギングを使用して、すべての _ステップ_ と、ステップごとのすべての _動き_ を表示します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/optaplanner.adoc:935
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Title ==
#: upstream/_versions/2.7/guides/optaplanner.adoc:940
#, no-wrap
msgid "Further improvements: Database and UI integration"
msgstr "さらなる改善: データベースと UI の統合"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:943
msgid "Now try adding database and UI integration:"
msgstr "次に、データベースと UI の統合を追加しましょう。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:945
msgid "Store `Timeslot`, `Room`, and `Lesson` in the database with xref:hibernate-orm-panache.adoc[Hibernate and Panache]."
msgstr "`Timeslot`、`Room`、`Lesson` を xref:hibernate-orm-panache.adoc[Hibernate および Panache] を使用してデータベースに保存します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:947
msgid "xref:rest-json.adoc[Expose them through REST]."
msgstr "xref:rest-json.adoc[Expose them through REST]."

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:1098
msgid "Build an attractive web UI on top of these REST methods to visualize the timetable."
msgstr "これらの REST メソッドに魅力的な Web UI を構築して、タイムテーブルを視覚化します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/optaplanner.adoc:1099
msgid "Take a look at {quickstarts-tree-url}/optaplanner-quickstart[the quickstart source code] to see how this all turns out."
msgstr "{quickstarts-tree-url}/optaplanner-quickstart[クイックスタートソースコード] で、どのように表示されるか確認します。"
