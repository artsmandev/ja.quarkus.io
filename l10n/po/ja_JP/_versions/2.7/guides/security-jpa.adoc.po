msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"This guide demonstrates how your Quarkus application can use a database to store your user identities with\n"
"xref:hibernate-orm.adoc[Hibernate ORM] or xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"The `/api/public` endpoint can be accessed anonymously.\n"
"The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.\n"
"The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `user` role can access. As a response, it returns a JSON document with details about the user."
msgstr "`/api/public` エンドポイントは匿名でアクセスできます。 `/api/admin` エンドポイントは RBAC (Role-Based Access Control) で保護されており、 `admin` の役割を与えられたユーザーのみがアクセスできます。このエンドポイントでは、 `@RolesAllowed` アノテーションを使用して、アクセス制約を宣言的に強制します。 `/api/users/me` エンドポイントも RBAC (Role-Based Access Control) で保護されており、 `user` ロールで付与されたユーザーのみがアクセスできます。レスポンスとして、ユーザーに関する詳細を含むJSONドキュメントを返します。"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"This command generates a Maven project, importing the `security-jpa` extension\n"
"which allows you to map your security source to JPA entities."
msgstr "このコマンドは、セキュリティー ソースを JPA エンティティーにマップできる `security-jpa` エクステンションをインポートして、Maven プロジェクトを生成します。"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `security-jpa` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `security-jpa` エクステンションを追加することができます:"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `user` role.\n"
"We are using `SecurityContext` to get access to the current authenticated Principal and we return the user's name. This information is loaded from the database."
msgstr "最後に、 `/api/users/me` エンドポイントを考えてみましょう。下のソースコードを見ればわかるように、 `user` の役割を持つユーザのみを信頼しています。現在認証されているプリンシパルへのアクセスを得るために `SecurityContext` を使用しており、ユーザーの名前を返します。この情報はデータベースから読み込まれます。"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"In our context, we are using PostgreSQL as identity store. The database schema is created by Hibernate ORM automatically\n"
"on startup (change this in production) and we initialize the database with users and roles in the `Startup` class:"
msgstr "私たちのコンテキストでは、IDストアとしてPostgreSQLを使用しています。データベーススキーマはHibernate ORMによって起動時に自動的に作成され(本番ではこれを変更します)、 `Startup` クラスのユーザーとロールでデータベースを初期化します。"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"It is probably useless but we kindly remind you that you must not store clear-text passwords in production environments ;-).\n"
"As a result, the `security-jpa` defaults to using bcrypt-hashed passwords."
msgstr "おそらく役に立たないと思いますが、本番環境ではクリアテキストのパスワードを保存してはいけないことをご注意ください。)その結果、 `security-jpa` はデフォルトで bcrypt でハッシュ化されたパスワードを使用するようになりました。"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"The application is now protected and the identities are provided by our database.\n"
"The very first thing to check is to ensure the anonymous access works."
msgstr "アプリケーションが保護され、アイデンティティがデータベースから提供されるようになりました。非常に最初に確認しなければならないことは、匿名アクセスが機能することを確認することです。"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"By providing the `admin:admin` credentials, the extension authenticated the user and loaded their roles.\n"
"The `admin` user is authorized to access to the protected resources."
msgstr "`admin:admin` 資格情報を提供することで、エクステンションはユーザーを認証し、そのロールをロードしました。 `admin` ユーザーは、保護されたリソースへのアクセスを許可されています。"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"By default, we consider passwords to be stored hashed with https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the\n"
"https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF)."
msgstr "デフォルトでは、パスワードは MCF ( link:https://en.wikipedia.org/wiki/Crypt_©[Modular Crypt Format]) の下で link:https://en.wikipedia.org/wiki/Bcrypt[bcrypt]でハッシュ化されて保存されると考えています。"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"When you need to create such a hashed password we provide the convenient `String BcryptUtil.bcryptHash(String password)`\n"
"function, which defaults to creating a random salt and hashing in 10 iterations (though you can specify the iterations and salt\n"
"too)."
msgstr "このようなハッシュ化されたパスワードを作成する必要がある場合は、便利な `String BcryptUtil.bcryptHash(String password)` 関数を用意しています。デフォルトでは、ランダムなソルトを作成して 10 回の繰り返しでハッシュ化します (繰り返しとソルトも指定できます)。"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"with MCF you don't need dedicated columns to store the hashing algorithm, the iterations count or the salt because\n"
"they're all stored in the hashed value."
msgstr "MCF を使うと、ハッシュアルゴリズムや反復回数、 ソルトを格納するための専用のカラムは必要ありません。"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/security-jpa.adoc
msgid ""
"WARN: you can also store passwords in clear text with `@Password(PasswordType.CLEAR)` but we strongly recommend against\n"
"it in production."
msgstr "警告: `@Password(PasswordType.CLEAR)` を使ってパスワードをクリアテキストで保存することもできますが、本番では絶対にしないことを強くお勧めします。"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/security-jpa.adoc:6
#, no-wrap
msgid "Using Security with JPA"
msgstr "JPAと共にSecurityを使用"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jpa.adoc:14
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jpa.adoc:18
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:21
msgid "In this example, we build a very simple microservice which offers three endpoints:"
msgstr "この例では、3つのエンドポイントを提供する非常にシンプルなマイクロサービスを構築します:"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:23
msgid "`/api/public`"
msgstr "`/api/public`"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:24
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:25
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jpa.adoc:30
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:36
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:38
msgid "The solution is located in the `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory]."
msgstr "ソリューションは `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jpa.adoc:39
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:42
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/security-jpa.adoc:50
msgid "Don't forget to add the database connector library of choice. Here we are using PostgreSQL as identity store."
msgstr "選択したデータベースコネクタライブラリを追加することを忘れないでください。ここでは、PostgreSQLをIDストアとして使用しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:62
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jpa.adoc:64
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jpa.adoc:73
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jpa.adoc:78
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:81
msgid "Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular JAX-RS resource:"
msgstr "`/api/public` エンドポイントの実装から始めましょう。以下のソースコードから分かるように、通常のJAX-RSリソースです:"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:105
msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
msgstr "`/api/admin` エンドポイントのソースコードも非常にシンプルです。ここでの主な違いは、 `admin` ロールで付与されたユーザーだけがエンドポイントにアクセスできるように `@RolesAllowed` アノテーションを使用していることです:"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jpa.adoc:155
#, no-wrap
msgid "Defining our user entity"
msgstr "ユーザーエンティティーの定義"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:158
msgid "We can now describe how our security information is stored in our model by adding a few annotations to our `User` entity:"
msgstr "これで、 `User` エンティティーにいくつかのアノテーションを追加することで、セキュリティー情報がモデルにどのように保存されているかを説明することができます:"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:202
msgid "The `security-jpa` extension is only initialized if there is a single entity annotated with `@UserDefinition`."
msgstr "`security-jpa` エクステンションは、 `@UserDefinition` でアノテーションされた単一のエンティティーがある場合にのみ初期化されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:204
msgid "This annotation must be present on a single entity. It can be a regular Hibernate ORM entity or a Hibernate ORM with Panache entity as in this example."
msgstr "このアノテーションは、単一のエンティティーに存在しなければなりません。この例のように、通常のHibernate ORMエンティティーまたはHibernate ORM with Panacheエンティティーにすることができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:205
msgid "This indicates the field used for the user name."
msgstr "これは、ユーザー名に使用されるフィールドを示します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:206
msgid "This indicates the field used for the password. This defaults to using bcrypt hashed passwords, but you can also configure it for clear text passwords or custom passwords."
msgstr "これは、パスワードに使用するフィールドを示します。これはデフォルトでは bcrypt ハッシュ化されたパスワードを使用するように設定されていますが、クリアテキストパスワードやカスタムパスワード用に設定することもできます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:207
msgid "This indicates the comma-separated list of roles added to the target Principal representation attributes."
msgstr "これは、対象のプリンシパル表現属性に追加されたロールのコンマ区切りリストを示します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:208
msgid "This method allows us to add users while hashing the password with the proper bcrypt hash."
msgstr "この方法では、パスワードを適切なbcryptハッシュでハッシュしながらユーザーを追加することができます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jpa.adoc:209
#, no-wrap
msgid "Configuring the Application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:212
msgid "The `security-jpa` extension requires at least one datasource to access to your database."
msgstr "`security-jpa` エクステンションは、データベースにアクセスするために少なくとも一つのデータソースが必要です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jpa.adoc:255
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:258
msgid "You can start the application in dev mode as follows:"
msgstr "開発モードでアプリケーションを起動するには、次のようにします:"

#. type: delimited block =
#: upstream/_versions/2.7/guides/security-jpa.adoc:264
msgid "In the following tests we use the basic authentication mechanism, you can enable it by setting `quarkus.http.auth.basic=true` in the `application.properties` file."
msgstr "以下のテストでは、基本的な認証メカニズムを使用していますが、 `application.properties` ファイルに `quarkus.http.auth.basic=true` を設定することで有効にすることができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:280
msgid "Now, let's try a to hit a protected resource anonymously."
msgstr "では、匿名で保護されたリソースを攻撃してみましょう。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:292
msgid "So far so good, now let's try with an allowed user."
msgstr "ここまでは順調ですが、今度は許可されたユーザーで試してみましょう。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:306
msgid "The user `admin` should be forbidden to access a resource protected with `@RolesAllowed(\"user\")` because it doesn't have this role."
msgstr "ユーザー `admin` は、この役割を持っていないので、 `@RolesAllowed(\"user\")` で保護されたリソースへのアクセスを禁止する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:318
msgid "Finally, using the user `user` works and the security context contains the principal details (username for instance)."
msgstr "最後に、ユーザー `user` を使用すると動作し、セキュリティーコンテキストには主要な詳細(例えばユーザー名)が含まれています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jpa.adoc:329
#, no-wrap
msgid "Supported model types"
msgstr "サポートされているモデルの種類"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:332
msgid "The `@UserDefinition` class must be a JPA entity (with Panache or not)."
msgstr "`@UserDefinition` クラスは JPA エンティティーである必要があります(Panache を使用しているかどうかは問いません)。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:333
msgid "The `@Username` and `@Password` field types must be of type `String`."
msgstr "`@Username` と `@Password` フィールドの型は `String` でなければなりません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:334
msgid "The `@Roles` field must either be of type `String` or `Collection<String>` or alternately a `Collection<X>` where `X` is an entity class with one `String` field annotated with the `@RolesValue` annotation."
msgstr "`@Roles` フィールドは `String` か `Collection&amp;lt;String>` のいずれかのタイプであるか、または `Collection&amp;lt;X>` である必要があります。 `X` はエンティティークラスで、 `@RolesValue` アノテーションが付与された `String` フィールドが 1 つあります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:335
msgid "Each `String` role element type will be parsed as a comma-separated list of roles."
msgstr "各 `String` role 要素の型は、カンマで区切られたロールのリストとして解析されます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jpa.adoc:336
#, no-wrap
msgid "Storing roles in another entity"
msgstr "別のエンティティーにロールを格納する"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:339
msgid "You can also store roles in another entity:"
msgstr "また、別のエンティティーにロールを格納することもできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jpa.adoc:368
#, no-wrap
msgid "Password storage and hashing"
msgstr "パスワードの保存とハッシュ化"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:381
msgid "You also have the possibility to store password using different hashing algorithm `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)`:"
msgstr "また、異なるハッシュアルゴリズム（ `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)` ）を使用してパスワードを保存することもできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jpa.adoc:416
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jpa.adoc:418
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"
