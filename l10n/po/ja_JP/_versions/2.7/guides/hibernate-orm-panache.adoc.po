msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate ORM is the de facto JPA implementation and offers you the full breadth of an Object Relational Mapper.\n"
"It makes complex mappings possible, but it does not make simple and common mappings trivial.\n"
"Hibernate ORM with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"You have noticed how much more compact and readable the code is?\n"
"Does this look interesting? Read on!"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your\n"
"columns as public fields:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"You can put all your JPA column annotations on the public fields. If you need a field to not be persisted, use the\n"
"`@Transient` annotation on it. If you need to write accessors, you can:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor,\n"
"and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"The `stream` methods require a transaction to work. +\n"
"As they perform I/O operations, they should be closed via the `close()` method or via a try-with-resource to close the underlying `ResultSet`.\n"
"If not, you will see warnings from Agroal that will close the underlying `ResultSet` for you."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n"
"Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheRepository`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Be careful to use the `@Transactional` annotation on the operations that modify the database,\n"
"you can add the annotation at the class level for simplicity purpose."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"You should only use `list` and `stream` methods if your table contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements\n"
"at the end."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"You can also write your queries in plain\n"
"link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Named queries can only be defined inside your JPA entity classes (being the Panache entity class, or the repository parameterized type),\n"
"or on one of its super classes."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n"
"This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide:\n"
"link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to\n"
"instantiate the projection DTO instead of using the entity class. This class must have a matching constructor with all the class attributes as parameters."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query,\n"
"so the compiler must be configured to store parameter names inside the compiled class.\n"
"This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your `pom.xml`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a\n"
"CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing\n"
"so at your application entry point boundaries like your REST endpoint controllers."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"JPA batches changes you make to your entities and sends changes (it's called flush) at the end of the transaction or before a query.\n"
"This is usually a good thing as it's more efficient.\n"
"But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when JPA send those changes to the database.\n"
"Remember, this is less efficient so don't abuse it.\n"
"And your transaction still has to be committed."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we\n"
"have you covered."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then\n"
"you just declare whatever ID you want as a public field:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"When it comes to writing Hibernate ORM entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really\n"
"relevant to your model."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires a split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object Oriented architecture, where state and methods\n"
"are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository\n"
"where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're\n"
"writing to set up an injection point before coming back to use it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our\n"
"model usage."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Use public fields. Get rid of dumb getter and setters. Hibernate ORM w/o Panache also doesn't require you to use getters and setters,\n"
"but Panache will additionally generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses. This implies that from the Hibernate perspective you're using accessors via getters and setters even while it looks like field accessors."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better\n"
"`Person.find(\"name\", \"stef\")`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"It attempts to identify archives with Panache entities (and consumers of Panache entities)\n"
"by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an\n"
"annotation processor that will automatically create this file in archives that depend on\n"
"Panache (even indirectly). If you have disabled annotation processors you may need to create\n"
"this file manually in some cases."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"If you include the jpa-modelgen annotation processor this will exclude the Panache\n"
"annotation processor by default. If you do this you should either create the marker file\n"
"yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:6
#, no-wrap
msgid "Simplified Hibernate ORM with Panache"
msgstr "シンプルになったHibernate ORM with Panache"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:15
#, no-wrap
msgid "First: an example"
msgstr "最初に:例"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:18
msgid "What we're doing in Panache is to allow you to write your Hibernate ORM entities like this:"
msgstr "Panacheでやっていることは、Hibernate ORMエンティティをこのように書けるようにすることです:"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:50
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "`list()` メソッドには、最初は驚くかもしれません。これは HQL (JP-QL) クエリの断片を取り、残りの部分をコンテキスト化します。これにより、非常に簡潔でありながら読みやすいコードになっています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:54
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:60
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:62
msgid "The solution is located in the `hibernate-orm-panache-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-quickstart[directory]."
msgstr "ソリューションは `hibernate-orm-panache-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:64
#, no-wrap
msgid "Setting up and configuring Hibernate ORM with Panache"
msgstr "PanacheによるHibernate ORMのセットアップと設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:67
msgid "To get started:"
msgstr "始めるには"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:69
msgid "add your settings in `{config-file}`"
msgstr "`{config-file}` に設定を追加します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:70
msgid "annotate your entities with `@Entity`"
msgstr "エンティティに `@Entity` アノテーションを付けます"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:71
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "エンティティが `PanacheEntity` を拡張するようにする（リポジトリパターンを使用している場合は非必須です）"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:73
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "すべての設定は、xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernateセットアップガイド]を確認してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:75
msgid "In your build file, add the following dependencies:"
msgstr "以下をビルドファイルに追加してください:"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:77
msgid "the Hibernate ORM with Panache extension"
msgstr "Hibernate ORM with Panache エクステンション"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:78
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr "お使いの JDBC ドライバーエクステンション ( `quarkus-jdbc-postgresql` , `quarkus-jdbc-h2` , `quarkus-jdbc-mariadb` , ...)"

#. type: Block title
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:80
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:96
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:106
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "次に、関連する設定プロパティを `{config-file}` に追加します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:119
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解決策1:アクティブレコードパターンを使用する"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:121
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:267
#, no-wrap
msgid "Defining your entity"
msgstr "エンティティの定義"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:163
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:350
#, no-wrap
msgid "Most useful operations"
msgstr "最も便利な操作"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:166
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "エンティティーを記述したら、ここでは実行できる最も一般的な操作を紹介します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:221
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:408
msgid "All `list` methods have equivalent `stream` versions."
msgstr "すべての `list` メソッドは、同等の `stream` バージョンがあります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:236
#, no-wrap
msgid "Adding entity methods"
msgstr "エンティティメソッドの追加"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:264
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解決策2：リポジトリパターンの使用"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:270
msgid "When using the repository pattern, you can define your entities as regular JPA entities."
msgstr "リポジトリパターンを使用する場合、エンティティーを通常のJPAエンティティーとして定義することができます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:310
#, no-wrap
msgid "Defining your repository"
msgstr "リポジトリの定義"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:353
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "リポジトリを書くことで実行可能な最も一般的な操作は以下の通りです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:419
msgid "The `stream` methods require a transaction to work."
msgstr "`stream` メソッドが動作するにはトランザクションが必要です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:424
#, no-wrap
msgid "Writing a JAX-RS resource"
msgstr "JAX-RS リソースの書き方"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:427
#, fuzzy
msgid "First, include one of the RESTEasy extensions to enable JAX-RS endpoints, for example, add the `io.quarkus:quarkus-resteasy-jackson` dependency for JAX-RS and JSON support."
msgstr "まず、JAX-RSエンドポイントを有効にするためにRESTEasyエクステンションの1つを組み込みます。例えば、JAX-RSとJSONをサポートするために `io.quarkus:quarkus-resteasy-jackson` の依存関係を追加します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:429
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "そして、次のようなリソースを作成することで、Personエンティティの作成/読み取り/更新/削除が可能になります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:498
#, no-wrap
msgid "Advanced Query"
msgstr "アドバンスドクエリー"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:500
#, no-wrap
msgid "Paging"
msgstr "ページング"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:536
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 型には、ページングやリターンストリームを処理するための他の多くのメソッドがあります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:537
#, no-wrap
msgid "Using a range instead of pages"
msgstr "ページではなく範囲を使用する"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:540
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` では、範囲ベースのクエリも可能です。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:562
#, no-wrap
msgid "Sorting"
msgstr "ソート"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:565
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "クエリー文字列を受け付けるすべてのメソッドは、以下の簡略化されたクエリ形式も受け付けます:"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:572
#, fuzzy
msgid "But these methods also accept an optional `Sort` parameter, which allows your to abstract your sorting:"
msgstr "しかし、これらのメソッドはオプションで `Sort` パラメータを受け付けるので、ソートを抽象化することができます:"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:582
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` クラスには、列を追加したり、ソート方向を指定したりするメソッドが豊富に用意されています。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:583
#, no-wrap
msgid "Simplified queries"
msgstr "シンプルなクエリ"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:589
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "選択クエリーが `from` で始まらない場合は、以下の追加の形式をサポートしています:"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:591
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by ...` は `from EntityName order by ...` に展開されます"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:592
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` （およびシングルパラメータ は `from EntityName where <singleColumnName> = ?` に展開されます"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:593
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` は `from EntityName where <query>` に展開されます"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:595
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "更新クエリが `update` で始まらない場合は、以下の追加の形式をサポートしています:"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:597
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr "`from EntityName ...` は `update from EntityName ...` に展開されます"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:598
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr "`set? <singleColumnName>` （およびシングルパラメータ） は `update from EntityName set <singleColumnName> = ?` に展開されます"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:599
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr "`set? <update-query>` は `update from EntityName set <update-query>` に展開されます"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:601
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "削除クエリが `delete` で始まらない場合は、以下の追加の形式をサポートしています:"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:603
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName …​` は `delete from EntityName ...` に展開されます"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:604
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` （およびシングルパラメータ）は `delete from EntityName where <singleColumnName> = ?` に展開されます"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:605
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`<query>` は `delete from EntityName where <query>` に展開されます"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:615
#, no-wrap
msgid "Named queries"
msgstr "名前付きクエリー"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:618
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "名前付きのクエリーは、その名前の前に「#」文字を付けることで、（簡易）HQLクエリの代わりに参照することができます。また、名前付きのクエリは、カウント、更新、削除のクエリにも使用できます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:658
#, no-wrap
msgid "Query parameters"
msgstr "クエリパラメーター"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:661
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "以下のように、インデックス（1ベース）でクエリーパラメーターを渡すことができます:"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:668
msgid "Or by name using a `Map`:"
msgstr "または、 `Map` を使った名前で、"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:678
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "または便利なクラスである `Parameters` をそのまま使用するか、 `Map` を構築する。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:691
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "すべてのクエリ操作は、インデックス( `Object…​`)または名前( `Map<String,Object>` または `Parameters`)でパラメータを渡すことができます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:692
#, no-wrap
msgid "Query projection"
msgstr "クエリの投影"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:695
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "クエリの投影は、 `find()` のメソッドが返す `PanacheQuery` オブジェクトに対して `project(Class)` のメソッドで行うことができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:697
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "これを使って、データベースから返されるフィールドを制限することができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:724
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "ここではパブリックフィールドを使用していますが、必要に応じてプライベートフィールドやゲッター/セッターを使用することもできます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:725
msgid "This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters."
msgstr "このコンストラクタはHibernate によって使用されます。このコンストラクタはクラス内の唯一のコンストラクタであり、パラメータとしてクラスのすべての属性を持つ必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:735
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "DTO射影のオブジェクトから参照されるエンティティのフィールドがある場合、 `@ProjectedFieldName` アノテーションを使用してSELECT文のパスを提供することができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:760
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "`ownerName` DTOコンストラクタのパラメータは `owner.name` HQLプロパティから読み込まれます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:761
#, no-wrap
msgid "Multiple Persistence Units"
msgstr "複数の永続性ユニット"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:764
msgid "The support for multiple persistence units is described in detail in xref:hibernate-orm.adoc#multiple-persistence-units[the Hibernate ORM guide]."
msgstr "複数の永続化ユニットのサポートについては link:hibernate-orm.html#multiple-persistence-units[Hibernate ORMガイド]で詳しく説明されています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:766
msgid "When using Panache, things are simple:"
msgstr "Panacheの使い方は簡単です:"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:768
msgid "A given Panache entity can be attached to only a single persistence unit."
msgstr "1つのPanacheエンティティは、1つの永続化ユニットにしかアタッチできません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:769
msgid "Given that, Panache already provides the necessary plumbing to transparently find the appropriate `EntityManager` associated to a Panache entity."
msgstr "そう考えると、Panacheはすでに、Panacheエンティティに関連する適切な `EntityManager` を透過的に見つけるために必要な導線を提供しています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:770
#, no-wrap
msgid "Transactions"
msgstr "トランザクション"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:783
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "ここでは `PersistenceException` が発生した場合に特定の動作を行えるようにするための flush メソッドの使用例を示します:"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:799
#, no-wrap
msgid "Lock management"
msgstr "ロック管理"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:802
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panacheは `findById(Object, LockModeType)` や `find().withLock(LockModeType)` を使用してエンティティ/リポジトリでデータベースロックを直接サポートします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:804
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "以下の例はアクティブレコードパターンの場合ですが、リポジトリでも同じように使用できます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:805
#, no-wrap
msgid "First: Locking using findById()."
msgstr "1つ目: findById()を使ってロックする。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:822
#, no-wrap
msgid "Second: Locking in a find()."
msgstr "2つ目: find()でロックする。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:840
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be annotated with the `@Transactional` annotation."
msgstr "トランザクションが終了するとロックが解放されるため、ロッククエリーを呼び出すメソッドには `@Transactional` アノテーションを付ける必要があります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:841
#, no-wrap
msgid "Custom IDs"
msgstr "カスタムID"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:878
#, no-wrap
msgid "Mocking"
msgstr "モック"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:880
#, no-wrap
msgid "Using the active record pattern"
msgstr "アクティブレコードパターンの使用"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:887
msgid "Add this dependency to your `pom.xml`:"
msgstr "この依存関係を `pom.xml` に追加してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:899
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:1038
msgid "Given this simple entity:"
msgstr "このシンプルなエンティティがある場合に"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:914
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:1065
msgid "You can write your mocking test like this:"
msgstr "モッキングテストはこのように書くことができます。"

#. type: Title ====
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:991
#, no-wrap
msgid "Mocking `EntityManager`, `Session` and entity instance methods"
msgstr "`EntityManager` 、 `Session` とエンティティインスタンスのメソッドのモック化"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:994
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate ORM `Session` object:"
msgstr "`persist()` のようなエンティティインスタンスのメソッドをモックにする必要がある場合は、Hibernate ORMの `Session` オブジェクトをモック化することで実現できます:"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:1023
#, no-wrap
msgid "Using the repository pattern"
msgstr "リポジトリパターンの使用"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:1053
msgid "And this repository:"
msgstr "そしてこのリポジトリ。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:1114
#, no-wrap
msgid "How and why we simplify Hibernate ORM mappings"
msgstr "Hibernate ORMマッピングを単純化する方法と理由"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:1133
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Panacheでは、これらの問題に対して、定見に基づいたアプローチをとりました。"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:1147
msgid "That's all there is to it: with Panache, Hibernate ORM has never looked so trim and neat."
msgstr "以上、Panacheを使えばHibernate ORMがこれほどまでにすっきりするのかということでした。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:1148
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#. type: Plain text
#: upstream/_versions/2.7/guides/hibernate-orm-panache.adoc:1151
msgid "Hibernate ORM with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "Hibernate ORM with Panacheは、コンパイル時のエンティティーに対するバイトコード強化に依存しています。"
