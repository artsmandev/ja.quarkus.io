# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-20 11:31+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:6
#, no-wrap
msgid "Reactive SQL Clients"
msgstr "リアクティブ SQL クライアント"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:13
msgid "The Reactive SQL Clients have a straightforward API focusing on scalability and low-overhead.  Currently, the following database servers are supported:"
msgstr "Reactive SQL クライアントは、スケーラビリティと低オーバーヘッドに焦点を当てたシンプルな API を持っています。現在、以下のデータベースサーバーがサポートされています。"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:15
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:478
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:717
#, no-wrap
msgid "IBM Db2"
msgstr "IBM Db2"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:16
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:498
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:662
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:733
#, no-wrap
msgid "PostgreSQL"
msgstr "PostgreSQL"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:17
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:483
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:680
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:721
#, no-wrap
msgid "MariaDB/MySQL"
msgstr "MariaDB/MySQL"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:18
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:488
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:725
#, no-wrap
msgid "Microsoft SQL Server"
msgstr "Microsoft SQL Server"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:19
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:493
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:729
#, no-wrap
msgid "Oracle"
msgstr "Oracle"

#. type: delimited block =
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:23
msgid "The Reactive SQL Client for Oracle is considered _tech preview_."
msgstr "Reactive SQL Client for Oracle は、_techpreview_ と見なされます。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:27
msgid "In _tech preview_ mode, early feedback is requested to mature the idea.  There is no guarantee of stability in the platform until the solution matures.  Feedback is welcome on our https://groups.google.com/d/forum/quarkus-dev[mailing list] or as issues in our https://github.com/quarkusio/quarkus/issues[GitHub issue tracker]."
msgstr "_tech preview_ モードでは、アイデアを成熟させるために早期のフィードバックが求められます。ソリューションが成熟するまでの間、プラットフォームの安定性を保証するものではありません。フィードバックは https://groups.google.com/d/forum/quarkus-dev[mailing list] や https://github.com/quarkusio/quarkus/issues[GitHub issue tracker] で受け付けています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:30
msgid "In this guide, you will learn how to implement a simple CRUD application exposing data stored in *PostgreSQL* over a RESTful API."
msgstr "このガイドでは、 *PostgreSQL* に格納されたデータをRESTful APIで公開するシンプルなCRUDアプリケーションの実装方法を学びます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:32
msgid "Extension and connection pool class names for each client can be found at the bottom of this document."
msgstr "各クライアントのエクステンションと接続プールのクラス名は、このドキュメントの下部に記載されています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:34
msgid "If you are not familiar with the Quarkus Vert.x extension, consider reading the xref:vertx.adoc[Using Eclipse Vert.x] guide first."
msgstr "Quarkus Vert.x エクステンションに慣れていない場合は、まず xref:vertx.adoc[Using Eclipse Vert.x] ガイドを読むことを検討してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:36
msgid "The application shall manage fruit entities:"
msgstr "アプリケーションは、フルーツのエンティティを管理するものとします。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:40
#, no-wrap
msgid "public class Fruit {\n"
msgstr "public class Fruit {\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:42
#, no-wrap
msgid "    public Long id;\n"
msgstr "    public Long id;\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:44
#, no-wrap
msgid "    public String name;\n"
msgstr "    public String name;\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:47
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""
"    public Fruit() {\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:51
#, no-wrap
msgid ""
"    public Fruit(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""
"    public Fruit(String name) {\n"
"        this.name = name;\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:57
#, no-wrap
msgid ""
"    public Fruit(Long id, String name) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""
"    public Fruit(Long id, String name) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"    }\n"
"}\n"

#. type: delimited block =
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:62
msgid "Do you need a ready-to-use PostgreSQL server to try out the examples?"
msgstr "サンプルを試すためにすぐに使えるPostgreSQLサーバーが必要ですか?"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:66
#, no-wrap
msgid "docker run -it --rm=true --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:14.1\n"
msgstr "docker run -it --rm=true --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:14.1\n"

#. type: Title ==
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:69
#, no-wrap
msgid "Installing"
msgstr "インストール"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:71
#, no-wrap
msgid "Reactive PostgreSQL Client extension"
msgstr "リアクティブな PostgreSQL クライアントエクステンション"

#. type: delimited block =
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:75
msgid "First, make sure your project has the `quarkus-reactive-pg-client` extension enabled.  If you are creating a new project, use the following command:"
msgstr "まず、プロジェクトで `quarkus-reactive-pg-client` のエクステンションが有効になっていることを確認します。新しいプロジェクトを作成する場合は、次のコマンドを使用します。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:81
msgid "If you have an already created project, the `reactive-pg-client` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr "すでに作成済みのプロジェクトがある場合は、`add-extension` コマンドで既存のQuarkusプロジェクトに `reactive-pg-client` エクステンションを追加することが出来ます。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:86
msgid "Otherwise, you can manually add the dependency to your build file:"
msgstr "それ以外の場合は、ビルドファイルに依存関係を手動で追加できます。"

#. type: Block title
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:88
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:126
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:94
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"</dependency>\n"

#. type: Block title
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:97
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:135
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:100
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-reactive-pg-client\")\n"
msgstr "implementation(\"io.quarkus:quarkus-reactive-pg-client\")\n"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:102
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:105
msgid "Reactive REST endpoints in your application that return Uni or Multi need `Mutiny support for RESTEasy` extension (`io.quarkus:quarkus-resteasy-mutiny`) to work properly:"
msgstr "アプリケーション内で Uni または Multi を返す Reactive REST エンドポイントが正しく動作するには `Mutiny support for RESTEasy` エクステンション ( `io.quarkus:quarkus-resteasy-mutiny` ) が必要です。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:113
msgid "In this guide, we will use the Mutiny API of the Reactive PostgreSQL Client.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "このガイドでは、Reactive PostgreSQL Client の Mutiny API を使用します。Mutiny についてよく知らない方は、xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library] を参照してください。"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:115
#, no-wrap
msgid "JSON Binding"
msgstr "JSON バインディング"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:119
msgid "We will expose `Fruit` instances over HTTP in the JSON format.  Consequently, you also need to add the `quarkus-resteasy-jackson` extension:"
msgstr "JSON 形式で HTTP 経由で `Fruit` インスタンスを公開します。そのため、 `quarkus-resteasy-jackson` のエクステンションも追加する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:124
msgid "If you prefer not to use the command line, manually add the dependency to your build file:"
msgstr "コマンドラインを使用したくない場合は、ビルドファイルに依存関係を手動で追加します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:132
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:138
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n"
msgstr "implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:141
msgid "Of course, this is only a requirement for this guide, not any application using the Reactive PostgreSQL Client."
msgstr "もちろん、これはこのガイドの要件に過ぎず、Reactive PostgreSQLクライアントを使用したアプリケーションではありません。"

#. type: Title ==
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:142
#, no-wrap
msgid "Configuring"
msgstr "設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:145
msgid "The Reactive PostgreSQL Client can be configured with standard Quarkus datasource properties and a reactive URL:"
msgstr "Reactive PostgreSQLクライアントは、Quarkusの標準的なデータソースプロパティーとReactive URLを使用して設定することができます。"

#. type: Block title
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:147
#, no-wrap
msgid "src/main/resources/application.properties"
msgstr "src/main/resources/application.properties"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:153
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/quarkus_test\n"
msgstr ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/quarkus_test\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:156
msgid "With that you may create your `FruitResource` skeleton and `@Inject` a `io.vertx.mutiny.pgclient.PgPool` instance:"
msgstr "これで `FruitResource` スケルトンと `@Inject` `io.vertx.mutiny.pgclient.PgPool` インスタンスを作成することができます。"

#. type: Block title
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:158
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:177
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:266
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:316
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:343
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:375
#, no-wrap
msgid "src/main/java/org/acme/vertx/FruitResource.java"
msgstr "src/main/java/org/acme/vertx/FruitResource.java"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:162
#, no-wrap
msgid ""
"@Path(\"fruits\")\n"
"public class FruitResource {\n"
msgstr ""
"@Path(\"fruits\")\n"
"public class FruitResource {\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:166
#, no-wrap
msgid ""
"    @Inject\n"
"    io.vertx.mutiny.pgclient.PgPool client;\n"
"}\n"
msgstr ""
"    @Inject\n"
"    io.vertx.mutiny.pgclient.PgPool client;\n"
"}\n"

#. type: Title ==
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:168
#, no-wrap
msgid "Database schema and seed data"
msgstr "データベーススキーマとシードデータ"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:172
msgid "Before we implement the REST endpoint and data management code, we need to setup the database schema.  It would also be convenient to have some data inserted up-front."
msgstr "REST エンドポイントとデータ管理コードを実装する前に、データベーススキーマを設定する必要があります。また、いくつかのデータを前もって挿入しておくと便利です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:175
msgid "For production we would recommend to use something like the xref:flyway.adoc[Flyway database migration tool].  But for development we can simply drop and create the tables on startup, and then insert a few fruits."
msgstr "本番環境では、xref:flyway.adoc[Flyway database migration tool] のようなものを使用することをお勧めします。しかし、開発のためには、単に起動時にテーブルをドロップして作成し、いくつかの fruits を挿入することができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:182
#, no-wrap
msgid ""
"@Inject\n"
"@ConfigProperty(name = \"myapp.schema.create\", defaultValue = \"true\") // <1>\n"
"boolean schemaCreate;\n"
msgstr ""
"@Inject\n"
"@ConfigProperty(name = \"myapp.schema.create\", defaultValue = \"true\") // <1>\n"
"boolean schemaCreate;\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:188
#, no-wrap
msgid ""
"void config(@Observes StartupEvent ev) {\n"
"    if (schemaCreate) {\n"
"        initdb();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:192
#, no-wrap
msgid ""
"private void initdb() {\n"
"    // TODO\n"
"}\n"
msgstr ""
"private void initdb() {\n"
"    // TODO\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:195
msgid "You may override the default value of the `myapp.schema.create` property in the `application.properties` file."
msgstr "`application.properties` ファイルの `myapp.schema.create` プロパティーのデフォルト値を上書きできます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:199
msgid "Almost ready! To initialize the DB in development mode, we will use the client simple `query` method.  It returns a `Uni` and thus can be composed to execute queries sequentially:"
msgstr "ほとんど準備ができています! 開発モードで DB を初期化するには、クライアントの単純な `query` メソッドを使用します。`Uni` を返すため、クエリーを順番に実行するように設定できます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:208
#, no-wrap
msgid ""
"client.query(\"DROP TABLE IF EXISTS fruits\").execute()\n"
"    .flatMap(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\").execute())\n"
"    .await().indefinitely();\n"
msgstr ""
"client.query(\"DROP TABLE IF EXISTS fruits\").execute()\n"
"    .flatMap(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\").execute())\n"
"    .await().indefinitely();\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:213
msgid "Wondering why we need block until the latest query is completed? This code is part of a `@PostConstruct` method and Quarkus invokes it synchronously.  As a consequence, returning prematurely could lead to serving requests while the database is not ready yet."
msgstr "最新のクエリーが完了するまでブロックが必要なのはなぜですか? このコードは `@PostConstruct` メソッドの一部であり、Quarkus はそれを同期的に呼び出します。結果として、返すのが早すぎると、データベースの準備ができていないときにリクエストを処理する可能性があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:217
msgid "That's it! So far we have seen how to configure a pooled client and execute simple queries.  We are now ready to develop the data management code and implement our RESTful endpoint."
msgstr "以上です。これまで、プールされたクライアントを設定し、単純なクエリーを実行する方法を見てきました。これで、データ管理コードを開発し、RESTful エンドポイントを実装する準備が整いました。"

#. type: Title ==
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:218
#, no-wrap
msgid "Using"
msgstr "使用"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:220
#, no-wrap
msgid "Query results traversal"
msgstr "クエリー結果のトラバーサル"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:224
msgid "In development mode, the database is set up with a few rows in the `fruits` table.  To retrieve all the data, we will use the `query` method again:"
msgstr "開発モードでは、データベースは `fruits` テーブルのいくつかの行で設定されます。すべてのデータを取得するには、`query` メソッドを再度使用します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:228
#, no-wrap
msgid "Uni<RowSet<Row>> rowSet = client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\").execute();\n"
msgstr "Uni<RowSet<Row>> rowSet = client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\").execute();\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:232
msgid "When the operation completes, we will get a `RowSet` that has all the rows buffered in memory.  A `RowSet` is an `java.lang.Iterable<Row>` and thus can be converted to a `Multi`:"
msgstr "操作が完了すると、すべての行がメモリーにバッファーリングされた `RowSet` を取得します。`RowSet` は `java.lang.Iterable<Row>` です。したがって、 `Multi` に変換できます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:238
#, no-wrap
msgid ""
"Multi<Fruit> fruits = rowSet\n"
"  .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"  .onItem().transform(Fruit::from);\n"
msgstr ""
"Multi<Fruit> fruits = rowSet\n"
"  .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"  .onItem().transform(Fruit::from);\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:242
msgid "The `Fruit#from` method converts a `Row` instance to a `Fruit` instance.  It is extracted as a convenience for the implementation of the other data management methods:"
msgstr "`Fruit#from` メソッドは `Row` インスタンスを `Fruit` インスタンスに変換します。これは、他のデータ管理方法の実装の便宜のために展開されています。"

#. type: Block title
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:244
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:254
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:301
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:332
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:363
#, no-wrap
msgid "src/main/java/org/acme/vertx/Fruit.java"
msgstr "src/main/java/org/acme/vertx/Fruit.java"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:249
#, no-wrap
msgid ""
"private static Fruit from(Row row) {\n"
"    return new Fruit(row.getLong(\"id\"), row.getString(\"name\"));\n"
"}\n"
msgstr ""
"private static Fruit from(Row row) {\n"
"    return new Fruit(row.getLong(\"id\"), row.getString(\"name\"));\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:252
msgid "Putting it all together, the `Fruit.findAll` method looks like:"
msgstr "すべてをまとめると、`Fruit.findAll` メソッドは次のようになります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:261
#, no-wrap
msgid ""
"public static Multi<Fruit> findAll(PgPool client) {\n"
"    return client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\").execute()\n"
"            .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"            .onItem().transform(Fruit::from);\n"
"}\n"
msgstr ""
"public static Multi<Fruit> findAll(PgPool client) {\n"
"    return client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\").execute()\n"
"            .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"            .onItem().transform(Fruit::from);\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:264
msgid "And the endpoint to get all fruits from the backend:"
msgstr "そして、バックエンドからすべての fruits を取得するためのエンドポイント:"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:272
#, no-wrap
msgid ""
"@GET\n"
"public Multi<Fruit> get() {\n"
"    return Fruit.findAll(client);\n"
"}\n"
msgstr ""
"@GET\n"
"public Multi<Fruit> get() {\n"
"    return Fruit.findAll(client);\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:275
msgid "Now start Quarkus in dev mode with:"
msgstr "ここで、開発モードで Quarkus を起動します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:279
msgid "Lastly, open your browser and navigate to http://localhost:8080/fruits, you should see:"
msgstr "最後に、ブラウザーを開いて http://localhost:8080/fruits に移動します。次のように表示されます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:283
#, no-wrap
msgid "[{\"id\":3,\"name\":\"Apple\"},{\"id\":1,\"name\":\"Orange\"},{\"id\":2,\"name\":\"Pear\"}]\n"
msgstr "[{\"id\":3,\"name\":\"Apple\"},{\"id\":1,\"name\":\"Orange\"},{\"id\":2,\"name\":\"Pear\"}]\n"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:285
#, no-wrap
msgid "Prepared queries"
msgstr "準備されたクエリー"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:288
msgid "The Reactive PostgreSQL Client can also prepare queries and take parameters that are replaced in the SQL statement at execution time:"
msgstr "Reactive PostgreSQL Client は、クエリーを準備し、実行時に SQL ステートメントで置き換えられるパラメーターを取得することもできます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:292
#, no-wrap
msgid "client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\").execute(Tuple.of(id))\n"
msgstr "client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\").execute(Tuple.of(id))\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:296
msgid "For PostgreSQL, the SQL string can refer to parameters by position, using `$1`, `$2`, ...etc.  Please refer to the <<Database Clients details>> section for other databases."
msgstr "PostgreSQL の場合、SQL 文字列は `$1`、`$2` などのように位置でパラメーターを参照することができます。他のデータベースについては、<<Database Clients details>> のセクションを参照してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:299
msgid "Similar to the simple `query` method, `preparedQuery` returns an instance of `PreparedQuery<RowSet<Row>>`.  Equipped with this tooling, we are able to safely use an `id` provided by the user to get the details of a particular fruit:"
msgstr "単純な `query` メソッドと同様に、`preparedQuery` は `PreparedQuery<RowSet<Row>>` のインスタンスを返します。このツールを装備すると、ユーザーから提供された `id` を安全に使用して、特定の fruit の詳細を取得できます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:308
#, no-wrap
msgid ""
"public static Uni<Fruit> findById(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\").execute(Tuple.of(id)) // <1>\n"
"            .onItem().transform(RowSet::iterator) // <2>\n"
"            .onItem().transform(iterator -> iterator.hasNext() ? from(iterator.next()) : null); // <3>\n"
"}\n"
msgstr ""
"public static Uni<Fruit> findById(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\").execute(Tuple.of(id)) // <1>\n"
"            .onItem().transform(RowSet::iterator) // <2>\n"
"            .onItem().transform(iterator -> iterator.hasNext() ? from(iterator.next()) : null); // <3>\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:310
msgid "Create a `Tuple` to hold the prepared query parameters."
msgstr "準備されたクエリーパラメーターを保持するための `Tuple` を作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:311
msgid "Get an `Iterator` for the `RowSet` result."
msgstr "`RowSet` の結果に対して `Iterator` を取得します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:312
msgid "Create a `Fruit` instance from the `Row` if an entity was found."
msgstr "エンティティーが見つかった場合は、`Row` から `Fruit` インスタンスを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:314
msgid "And in the JAX-RS resource:"
msgstr "そして、JAX-RS リソースでは:"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:325
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"{id}\")\n"
"public Uni<Response> getSingle(@PathParam Long id) {\n"
"    return Fruit.findById(client, id)\n"
"            .onItem().transform(fruit -> fruit != null ? Response.ok(fruit) : Response.status(Status.NOT_FOUND)) // <1>\n"
"            .onItem().transform(ResponseBuilder::build); // <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:327
msgid "Prepare a JAX-RS response with either the `Fruit` instance if found or the `404` status code."
msgstr "見つかった場合は `Fruit` インスタンスまたは `404` ステータスコードのいずれかを使用して JAX-RS 応答を準備します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:328
msgid "Build and send the response."
msgstr "レスポンスを構築して送信します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:330
msgid "The same logic applies when saving a `Fruit`:"
msgstr "`Fruit` を保存するときに同じロジックが適用されます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:338
#, no-wrap
msgid ""
"public Uni<Long> save(PgPool client) {\n"
"    return client.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\").execute(Tuple.of(name))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.iterator().next().getLong(\"id\"));\n"
"}\n"
msgstr ""
"public Uni<Long> save(PgPool client) {\n"
"    return client.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\").execute(Tuple.of(name))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.iterator().next().getLong(\"id\"));\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:341
msgid "And in the web resource we handle the `POST` request:"
msgstr "また、Web リソースでは、`POST` リクエストを処理します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:351
#, no-wrap
msgid ""
"@POST\n"
"public Uni<Response> create(Fruit fruit) {\n"
"    return fruit.save(client)\n"
"            .onItem().transform(id -> URI.create(\"/fruits/\" + id))\n"
"            .onItem().transform(uri -> Response.created(uri).build());\n"
"}\n"
msgstr ""
"@POST\n"
"public Uni<Response> create(Fruit fruit) {\n"
"    return fruit.save(client)\n"
"            .onItem().transform(id -> URI.create(\"/fruits/\" + id))\n"
"            .onItem().transform(uri -> Response.created(uri).build());\n"
"}\n"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:353
#, no-wrap
msgid "Result metadata"
msgstr "結果のメタデータ"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:356
msgid "A `RowSet` does not only hold your data in memory, it also gives you some information about the data itself, such as:"
msgstr "`RowSet` はデータをメモリーに保持するだけでなく、次のようなデータ自体に関する情報も提供します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:358
msgid "the number of rows affected by the query (inserted/deleted/updated/retrieved depending on the query type),"
msgstr "クエリーの影響を受ける行数 (クエリータイプに応じて挿入/削除/更新/取得)、"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:359
msgid "the column names."
msgstr "列名。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:361
msgid "Let's use this to support removal of fruits in the database:"
msgstr "これを使用して、データベース内の fruits の削除をサポートしましょう。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:369
#, no-wrap
msgid ""
"public static Uni<Boolean> delete(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"DELETE FROM fruits WHERE id = $1\").execute(Tuple.of(id))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.rowCount() == 1); // <1>\n"
"}\n"
msgstr ""
"public static Uni<Boolean> delete(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"DELETE FROM fruits WHERE id = $1\").execute(Tuple.of(id))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.rowCount() == 1); // <1>\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:371
msgid "Inspect metadata to determine if a fruit has been actually deleted."
msgstr "メタデータを調べて、fruit が実際に削除されたかどうかを判断します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:373
msgid "And to handle the HTTP `DELETE` method in the web resource:"
msgstr "また、Web リソースで HTTP の `DELETE` メソッドを処理するには:"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:384
#, no-wrap
msgid ""
"@DELETE\n"
"@Path(\"{id}\")\n"
"public Uni<Response> delete(@PathParam Long id) {\n"
"    return Fruit.delete(client, id)\n"
"            .onItem().transform(deleted -> deleted ? Status.NO_CONTENT : Status.NOT_FOUND)\n"
"            .onItem().transform(status -> Response.status(status).build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:388
msgid "With `GET`, `POST` and `DELETE` methods implemented, we may now create a minimal web page to try the RESTful application out.  We will use https://jquery.com/[jQuery] to simplify interactions with the backend:"
msgstr "`GET`、`POST`、および `DELETE` メソッドが実装されたので、RESTful アプリケーションを試すための最小限の Web ページを作成できます。 https://jquery.com/[jQuery] を使用して、バックエンドとのやり取りを簡素化します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:401
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>Reactive PostgreSQL Client - Quarkus</title>\n"
"    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n"
"            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n"
"    <script type=\"application/javascript\" src=\"fruits.js\"></script>\n"
"</head>\n"
"<body>\n"
msgstr ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>Reactive PostgreSQL Client - Quarkus</title>\n"
"    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n"
"            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n"
"    <script type=\"application/javascript\" src=\"fruits.js\"></script>\n"
"</head>\n"
"<body>\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:403
#, no-wrap
msgid "<h1>Fruits API Testing</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:406
#, no-wrap
msgid ""
"<h2>All fruits</h2>\n"
"<div id=\"all-fruits\"></div>\n"
msgstr ""
"<h2>すべての fruits</h2>\n"
"<div id=\"all-fruits\"></div>\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:411
#, no-wrap
msgid ""
"<h2>Create Fruit</h2>\n"
"<input id=\"fruit-name\" type=\"text\">\n"
"<button id=\"create-fruit-button\" type=\"button\">Create</button>\n"
"<div id=\"create-fruit\"></div>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:414
#, no-wrap
msgid ""
"</body>\n"
"</html>\n"
msgstr ""
"</body>\n"
"</html>\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:417
msgid "In the Javascript code, we need a function to refresh the list of fruits when:"
msgstr "Javascript コードでは、次の場合に fruits のリストを更新する関数が必要です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:419
msgid "the page is loaded, or"
msgstr "ページが読み込まれる、または"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:420
msgid "a fruit is added, or"
msgstr "fruit が追加される、または"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:421
msgid "a fruit is deleted."
msgstr "fruit は削除される。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:446
#, no-wrap
msgid ""
"function refresh() {\n"
"    $.get('/fruits', function (fruits) {\n"
"        var list = '';\n"
"        (fruits || []).forEach(function (fruit) { // <1>\n"
"            list = list\n"
"                + '<tr>'\n"
"                + '<td>' + fruit.id + '</td>'\n"
"                + '<td>' + fruit.name + '</td>'\n"
"                + '<td><a href=\"#\" onclick=\"deleteFruit(' + fruit.id + ')\">Delete</a></td>'\n"
"                + '</tr>'\n"
"        });\n"
"        if (list.length > 0) {\n"
"            list = ''\n"
"                + '<table><thead><th>Id</th><th>Name</th><th></th></thead>'\n"
"                + list\n"
"                + '</table>';\n"
"        } else {\n"
"            list = \"No fruits in database\"\n"
"        }\n"
"        $('#all-fruits').html(list);\n"
"    });\n"
"}\n"
msgstr ""
"function refresh() {\n"
"    $.get('/fruits', function (fruits) {\n"
"        var list = '';\n"
"        (fruits || []).forEach(function (fruit) { // <1>\n"
"            list = list\n"
"                + '<tr>'\n"
"                + '<td>' + fruit.id + '</td>'\n"
"                + '<td>' + fruit.name + '</td>'\n"
"                + '<td><a href=\"#\" onclick=\"deleteFruit(' + fruit.id + ')\">Delete</a></td>'\n"
"                + '</tr>'\n"
"        });\n"
"        if (list.length > 0) {\n"
"            list = ''\n"
"                + '<table><thead><th>Id</th><th>Name</th><th></th></thead>'\n"
"                + list\n"
"                + '</table>';\n"
"        } else {\n"
"            list = \"No fruits in database\"\n"
"        }\n"
"        $('#all-fruits').html(list);\n"
"    });\n"
"}\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:450
#, no-wrap
msgid ""
"function deleteFruit(id) {\n"
"    $.ajax('/fruits/' + id, {method: 'DELETE'}).then(refresh);\n"
"}\n"
msgstr ""
"function deleteFruit(id) {\n"
"    $.ajax('/fruits/' + id, {method: 'DELETE'}).then(refresh);\n"
"}\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:452
#, no-wrap
msgid "$(document).ready(function () {\n"
msgstr "$(document).ready(function () {\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:461
#, no-wrap
msgid ""
"    $('#create-fruit-button').click(function () {\n"
"        var fruitName = $('#fruit-name').val();\n"
"        $.post({\n"
"            url: '/fruits',\n"
"            contentType: 'application/json',\n"
"            data: JSON.stringify({name: fruitName})\n"
"        }).then(refresh);\n"
"    });\n"
msgstr ""
"    $('#create-fruit-button').click(function () {\n"
"        var fruitName = $('#fruit-name').val();\n"
"        $.post({\n"
"            url: '/fruits',\n"
"            contentType: 'application/json',\n"
"            data: JSON.stringify({name: fruitName})\n"
"        }).then(refresh);\n"
"    });\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:464
#, no-wrap
msgid ""
"    refresh();\n"
"});\n"
msgstr ""
"    refresh();\n"
"});\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:466
msgid "The `fruits` parameter is not defined when the database is empty."
msgstr "データベースが空の場合、`fruits` パラメーターは定義されません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:469
msgid "All done! Navigate to http://localhost:8080/fruits.html and read/create/delete some fruits."
msgstr "すべて完了! http://localhost:8080/fruits.html に移動し、いくつかの fruits を読み取り/作成/削除します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:471
#, no-wrap
msgid "Database Clients details"
msgstr "データベースクライアントの詳細"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:475
#, no-wrap
msgid "Database"
msgstr "Database"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:475
#, no-wrap
msgid "Extension name"
msgstr "拡張子名"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:475
#, no-wrap
msgid "Pool class name"
msgstr "プールクラス名"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:477
#, no-wrap
msgid "Placeholders"
msgstr "プレースホルダー"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:479
#, no-wrap
msgid "`quarkus-reactive-db2-client`"
msgstr "`quarkus-reactive-db2-client`"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:480
#, no-wrap
msgid "`io.vertx.mutiny.db2client.DB2Pool`"
msgstr "`io.vertx.mutiny.db2client.DB2Pool`"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:482
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:487
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:497
#, no-wrap
msgid "`?`"
msgstr "`?`"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:484
#, no-wrap
msgid "`quarkus-reactive-mysql-client`"
msgstr "`quarkus-reactive-mysql-client`"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:485
#, no-wrap
msgid "`io.vertx.mutiny.mysqlclient.MySQLPool`"
msgstr "`io.vertx.mutiny.mysqlclient.MySQLPool`"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:489
#, no-wrap
msgid "`quarkus-reactive-mssql-client`"
msgstr "`quarkus-reactive-mssql-client`"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:490
#, no-wrap
msgid "`io.vertx.mutiny.mssqlclient.MSSQLPool`"
msgstr "`io.vertx.mutiny.mssqlclient.MSSQLPool`"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:492
#, no-wrap
msgid "`@p1`, `@p2`, etc."
msgstr "`@p1`, `@p2`, etc."

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:494
#, no-wrap
msgid "`quarkus-reactive-oracle-client`"
msgstr "`quarkus-reactive-oracle-client`"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:495
#, no-wrap
msgid "`io.vertx.mutiny.oracleclient.OraclePool`"
msgstr "`io.vertx.mutiny.oracleclient.OraclePool`"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:499
#, no-wrap
msgid "`quarkus-reactive-pg-client`"
msgstr "`quarkus-reactive-pg-client`"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:500
#, no-wrap
msgid "`io.vertx.mutiny.pgclient.PgPool`"
msgstr "`io.vertx.mutiny.pgclient.PgPool`"

#. type: Table
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:501
#, no-wrap
msgid "`$1`, `$2`, etc."
msgstr "$1`、`$2` など"

#. type: Title ==
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:503
#, no-wrap
msgid "Transactions"
msgstr "トランザクション"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:508
msgid "The reactive SQL clients support transactions.  A transaction is started with `io.vertx.mutiny.sqlclient.SqlConnection#begin` and terminated with either `io.vertx.mutiny.sqlclient.Transaction#commit` or `io.vertx.mutiny.sqlclient.Transaction#rollback`.  All these operations are asynchronous:"
msgstr "リアクティブ SQL クライアントはトランザクションをサポートします。トランザクションは `io.vertx.mutiny.sqlclient.SqlConnection#begin` で開始され、`io.vertx.mutiny.sqlclient.Transaction#commit` または `io.vertx.mutiny.sqlclient.Transaction#rollback` で終了します。これらの操作はすべて非同期です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:510
msgid "`connection.begin()` returns a `Uni<Transaction>`"
msgstr "`connection.begin()` returns a `Uni<Transaction>`"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:511
msgid "`transaction.commit()` and `transaction.rollback()` return `Uni<Void>`"
msgstr "`transaction.commit()` and `transaction.rollback()` return `Uni<Void>`"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:514
msgid "Managing transactions in the reactive programming world can be cumbersome.  Instead of writing repetitive and complex (thus error-prone!) code, you can use the `io.vertx.mutiny.sqlclient.Pool#withTransaction` helper method."
msgstr "リアクティブプログラミングの世界でトランザクションを管理するのは面倒な場合があります。反復的で複雑な (したがってエラーが発生しやすい) コードを記述する代わりに、`io.vertx.mutiny.sqlclient.Pool#withTransaction` ヘルパーメソッドを使用できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:516
msgid "The following snippet shows how to run 2 insertions in the same transaction:"
msgstr "次のスニペットは、同じトランザクションで 2 つの挿入を実行する方法を示しています。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:525
#, no-wrap
msgid ""
"public static Uni<Void> insertTwoFruits(PgPool client, Fruit fruit1, Fruit fruit2) {\n"
"    return client.withTransaction(conn -> {\n"
"        Uni<RowSet<Row>> insertOne = conn.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit1.name));\n"
"        Uni<RowSet<Row>> insertTwo = conn.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit2.name));\n"
msgstr ""
"public static Uni<Void> insertTwoFruits(PgPool client, Fruit fruit1, Fruit fruit2) {\n"
"    return client.withTransaction(conn -> {\n"
"        Uni<RowSet<Row>> insertOne = conn.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit1.name));\n"
"        Uni<RowSet<Row>> insertTwo = conn.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit2.name));\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:531
#, no-wrap
msgid ""
"        return Uni.combine().all().unis(insertOne, insertTwo)\n"
"                // Ignore the results (the two ids)\n"
"                .discardItems();\n"
"    });\n"
"}\n"
msgstr ""
"        return Uni.combine().all().unis(insertOne, insertTwo)\n"
"                // Ignore the results (the two ids)\n"
"                .discardItems();\n"
"    });\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:534
msgid "In this example, the transaction is automatically committed on success or rolled back on failure."
msgstr "この例では、トランザクションは成功時に自動的にコミットされるか、失敗時にロールバックされます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:536
msgid "You can also create dependent actions as follows:"
msgstr "次のように依存アクションを作成することもできます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:540
#, no-wrap
msgid "return client.withTransaction(conn -> conn\n"
msgstr "return client.withTransaction(conn -> conn\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:543
#, no-wrap
msgid ""
"        .preparedQuery(\"INSERT INTO person (firstname,lastname) VALUES ($1,$2) RETURNING id\")\n"
"        .execute(Tuple.of(person.getFirstName(), person.getLastName()))\n"
msgstr ""
"        .preparedQuery(\"INSERT INTO person (firstname,lastname) VALUES ($1,$2) RETURNING id\")\n"
"        .execute(Tuple.of(person.getFirstName(), person.getLastName()))\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:546
#, no-wrap
msgid ""
"        .onItem().transformToUni(id -> conn.preparedQuery(\"INSERT INTO addr (person_id,addrline1) VALUES ($1,$2)\")\n"
"                .execute(Tuple.of(id.iterator().next().getLong(\"id\"), person.getLastName())))\n"
msgstr ""
"        .onItem().transformToUni(id -> conn.preparedQuery(\"INSERT INTO addr (person_id,addrline1) VALUES ($1,$2)\")\n"
"                .execute(Tuple.of(id.iterator().next().getLong(\"id\"), person.getLastName())))\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:548
#, no-wrap
msgid "        .onItem().ignore().andContinueWithNull());\n"
msgstr "        .onItem().ignore().andContinueWithNull());\n"

#. type: Title ==
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:550
#, no-wrap
msgid "Working with batch query results"
msgstr "バッチクエリー結果の操作"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:554
msgid "When executing batch queries, reactive SQL clients return a `RowSet` that corresponds to the results of the first element in the batch.  To get the results of the following batch elements, you must invoke the `RowSet#next` method until it returns `null`."
msgstr "バッチクエリーを実行すると、リアクティブ SQL クライアントはバッチの最初の要素の結果に対応する `RowSet` を返します。次のバッチ要素の結果を取得するには、`null` が返されるまで `RowSet#next` メソッドを呼び出す必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:557
msgid "Let's say you want to update some rows and compute the total number of affected rows.  You must inspect each `RowSet`:"
msgstr "いくつかの行を更新し、影響を受ける行の総数を計算するとします。各 `RowSet` を検査する必要があります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:561
#, no-wrap
msgid "PreparedQuery<RowSet<Row>> preparedQuery = client.preparedQuery(\"UPDATE fruits SET name = $1 WHERE id = $2\");\n"
msgstr "PreparedQuery<RowSet<Row>> preparedQuery = client.preparedQuery(\"UPDATE fruits SET name = $1 WHERE id = $2\");\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:566
#, no-wrap
msgid ""
"Uni<RowSet<Row>> rowSet = preparedQuery.executeBatch(Arrays.asList(\n"
"        Tuple.of(\"Orange\", 1),\n"
"        Tuple.of(\"Pear\", 2),\n"
"        Tuple.of(\"Apple\", 3)));\n"
msgstr ""
"Uni<RowSet<Row>> rowSet = preparedQuery.executeBatch(Arrays.asList(\n"
"        Tuple.of(\"Orange\", 1),\n"
"        Tuple.of(\"Pear\", 2),\n"
"        Tuple.of(\"Apple\", 3)));\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:574
#, no-wrap
msgid ""
"Uni<Integer> totalAffected = rowSet.onItem().transform(res -> {\n"
"    int total = 0;\n"
"    do {\n"
"        total += res.rowCount(); // <1>\n"
"    } while ((res = res.next()) != null); // <2>\n"
"    return total;\n"
"});\n"
msgstr ""
"Uni<Integer> totalAffected = rowSet.onItem().transform(res -> {\n"
"    int total = 0;\n"
"    do {\n"
"        total += res.rowCount(); // <1>\n"
"    } while ((res = res.next()) != null); // <2>\n"
"    return total;\n"
"});\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:576
msgid "Compute the sum of `RowSet#rowCount`."
msgstr "`RowSet#rowCount` の合計を計算します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:577
msgid "Invoke `RowSet#next` until it returns `null`."
msgstr "`null` を返すまで `RowSet#next` を呼び出します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:579
msgid "As another example, if you want to load all the rows you just inserted, you must concatenate the contents of each `RowSet`:"
msgstr "別の例として、挿入したばかりのすべての行をロードする場合は、各 `RowSet` の内容を連結する必要があります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:583
#, no-wrap
msgid "PreparedQuery<RowSet<Row>> preparedQuery = client.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING *\");\n"
msgstr "PreparedQuery<RowSet<Row>> preparedQuery = client.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING *\");\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:588
#, no-wrap
msgid ""
"Uni<RowSet<Row>> rowSet = preparedQuery.executeBatch(Arrays.asList(\n"
"        Tuple.of(\"Orange\"),\n"
"        Tuple.of(\"Pear\"),\n"
"        Tuple.of(\"Apple\")));\n"
msgstr ""
"Uni<RowSet<Row>> rowSet = preparedQuery.executeBatch(Arrays.asList(\n"
"        Tuple.of(\"Orange\"),\n"
"        Tuple.of(\"Pear\"),\n"
"        Tuple.of(\"Apple\")));\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:603
#, no-wrap
msgid ""
"// Generate a Multi of RowSet items\n"
"Multi<RowSet<Row>> rowSets = rowSet.onItem().transformToMulti(res -> {\n"
"    return Multi.createFrom().generator(() -> res, (rs, emitter) -> {\n"
"        RowSet<Row> next = null;\n"
"        if (rs != null) {\n"
"            emitter.emit(rs);\n"
"            next = rs.next();\n"
"        }\n"
"        if (next == null) {\n"
"            emitter.complete();\n"
"        }\n"
"        return next;\n"
"    });\n"
"});\n"
msgstr ""
"// 複数の RowSet アイテムを生成します\n"
"Multi<RowSet<Row>> rowSets = rowSet.onItem().transformToMulti(res -> {\n"
"    return Multi.createFrom().generator(() -> res, (rs, emitter) -> {\n"
"        RowSet<Row> next = null;\n"
"        if (rs != null) {\n"
"            emitter.emit(rs);\n"
"            next = rs.next();\n"
"        }\n"
"        if (next == null) {\n"
"            emitter.complete();\n"
"        }\n"
"        return next;\n"
"    });\n"
"});\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:606
#, no-wrap
msgid ""
"// Transform each RowSet into Multi of Row items and Concatenate\n"
"Multi<Row> rows = rowSets.onItem().transformToMultiAndConcatenate(Multi.createFrom()::iterable);\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:608
#, no-wrap
msgid "Multiple Datasources"
msgstr "複数のデータソース"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:611
msgid "The reactive SQL clients support defining several datasources."
msgstr "Reactive SQL クライアントは、複数のデータソースの定義をサポートしています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:613
msgid "A typical configuration with several datasources would look like:"
msgstr "複数のデータソースを使用した典型的な構成は以下のようになります。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:620
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql <1>\n"
"quarkus.datasource.username=user-default\n"
"quarkus.datasource.password=password-default\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/default\n"
msgstr ""
"quarkus.datasource.db-kind=postgresql <1>\n"
"quarkus.datasource.username=user-default\n"
"quarkus.datasource.password=password-default\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/default\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:625
#, no-wrap
msgid ""
"quarkus.datasource.\"additional1\".db-kind=postgresql <2>\n"
"quarkus.datasource.\"additional1\".username=user-additional1\n"
"quarkus.datasource.\"additional1\".password=password-additional1\n"
"quarkus.datasource.\"additional1\".reactive.url=postgresql://localhost:5432/additional1\n"
msgstr ""
"quarkus.datasource.\"additional1\".db-kind=postgresql <2>\n"
"quarkus.datasource.\"additional1\".username=user-additional1\n"
"quarkus.datasource.\"additional1\".password=password-additional1\n"
"quarkus.datasource.\"additional1\".reactive.url=postgresql://localhost:5432/additional1\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:630
#, no-wrap
msgid ""
"quarkus.datasource.\"additional2\".db-kind=mysql <3>\n"
"quarkus.datasource.\"additional2\".username=user-additional2\n"
"quarkus.datasource.\"additional2\".password=password-additional2\n"
"quarkus.datasource.\"additional2\".reactive.url=mysql://localhost:3306/additional2\n"
msgstr ""
"quarkus.datasource.\"additional2\".db-kind=mysql <3>\n"
"quarkus.datasource.\"additional2\".username=user-additional2\n"
"quarkus.datasource.\"additional2\".password=password-additional2\n"
"quarkus.datasource.\"additional2\".reactive.url=mysql://localhost:3306/additional2\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:632
msgid "The default datasource - using PostgreSQL."
msgstr "デフォルトのデータソース - PostgreSQL を使用。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:633
msgid "A named datasource called `additional1` - using PostgreSQL."
msgstr "`additional1` と呼ばれる名前付きデータソース - PostgreSQL を使用。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:634
msgid "A named datasource called `additional2` - using MySQL."
msgstr "`additional2` と呼ばれる名前付きデータソース - MySQL を使用。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:636
msgid "You can then inject the clients as follows:"
msgstr "次に、次のようにクライアントを挿入できます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:641
#, no-wrap
msgid ""
"@Inject <1>\n"
"PgPool defaultClient;\n"
msgstr ""
"@Inject <1>\n"
"PgPool defaultClient;\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:645
#, no-wrap
msgid ""
"@Inject\n"
"@ReactiveDataSource(\"additional1\") <2>\n"
"PgPool additional1Client;\n"
msgstr ""
"@Inject\n"
"@ReactiveDataSource(\"additional1\") <2>\n"
"PgPool additional1Client;\n"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:649
#, no-wrap
msgid ""
"@Inject\n"
"@ReactiveDataSource(\"additional2\")\n"
"MySQLPool additional2Client;\n"
msgstr ""
"@Inject\n"
"@ReactiveDataSource(\"additional2\")\n"
"MySQLPool additional2Client;\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:651
msgid "Injecting the client for the default datasource does not require anything special."
msgstr "デフォルトのデータソースにクライアントを挿入するために特別なことは何も必要ありません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:652
msgid "For a named datasource, you use the `@ReactiveDataSource` CDI qualifier with the datasource name as its value."
msgstr "名前付きデータソースの場合、値としてデータソース名を指定して `@ReactiveDataSource` CDI 修飾子を使用します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:653
#, no-wrap
msgid "UNIX Domain Socket connections"
msgstr "UNIX ドメインソケット接続"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:656
msgid "The PostgreSQL and MariaDB/MySQL clients can be configured to connect to the server through a UNIX domain socket."
msgstr "PostgreSQL および MariaDB/MySQL クライアントは、UNIX ドメインソケットを介してサーバーに接続するように設定できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:658
msgid "First make sure that xref:vertx-reference.adoc#native-transport[native transport support] is enabled."
msgstr "まず、xref:vertx-reference.adoc#native-transport[native transport support] が有効になっていることを確認します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:661
msgid "Then configure the database connection url.  This step depends on the database type."
msgstr "次に、データベース接続の URL を設定します。この手順は、データベースのタイプによって異なります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:665
msgid "PostgresSQL domain socket paths have the following form: `<directory>/.s.PGSQL.<port>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:667
msgid "The database connection url must be configured so that:"
msgstr "データベース接続の URL は、次のように設定する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:669
msgid "the `host` is the `directory` in the socket path"
msgstr "`host` はソケットパスの `directory` です"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:670
msgid "the `port` is the `port` in the socket path"
msgstr "`port` はソケットパスの `port` です"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:672
msgid "Consider the following socket path: `/var/run/postgresql/.s.PGSQL.5432`."
msgstr "次のソケットパスを検討してください: `/var/run/postgresql/.s.PGSQL.5432`。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:674
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:687
msgid "In `application.properties` add:"
msgstr "`application.properties` で以下を追加します。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:678
#, no-wrap
msgid "quarkus.datasource.reactive.url=postgresql://:5432/quarkus_test?host=/var/run/postgresql\n"
msgstr "quarkus.datasource.reactive.url=postgresql://:5432/quarkus_test?host=/var/run/postgresql\n"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:683
msgid "The database connection url must be configured so that the `host` is the socket path."
msgstr "データベース接続 URL は、 `host` がソケットパスになるように設定する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:685
msgid "Consider the following socket path: `/var/run/mysqld/mysqld.sock`."
msgstr "次のソケットパスを検討してください: `/var/run/mysqld/mysqld.sock`。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:691
#, no-wrap
msgid "quarkus.datasource.reactive.url=mysql:///quarkus_test?host=/var/run/mysqld/mysqld.sock\n"
msgstr "quarkus.datasource.reactive.url=mysql:///quarkus_test?host=/var/run/mysqld/mysqld.sock\n"

#. type: Title ==
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:693
#, no-wrap
msgid "Pooled Connection `idle-timeout`"
msgstr "プールされた接続 `idle-timeout`"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:697
msgid "Reactive datasources can be configured with an `idle-timeout` (in milliseconds).  It is the maximum time a connection remains unused in the pool before it is closed."
msgstr "リアクティブデータソースは、`idle-timeout` (ミリ秒単位) で設定できます。これは、接続が閉じられる前に、接続がプール内で未使用のままである最大時間です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:699
msgid "The `idle-timeout` is disabled by default."
msgstr "`idle-timeout` はデフォルトで無効になっています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:701
msgid "For example, you could expire idle connections after 60 minutes:"
msgstr "たとえば、アイドル状態の接続を 60 分後に期限切れにすることができます。"

#. type: delimited block -
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:705
#, no-wrap
msgid "quarkus.datasource.reactive.idle-timeout=PT60M\n"
msgstr "quarkus.datasource.reactive.idle-timeout=PT60M\n"

#. type: Title ==
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:707
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:709
#, no-wrap
msgid "Common Datasource"
msgstr "共通のデータソース"

#. type: Title ===
#: upstream/_versions/2.7/guides/reactive-sql-clients.adoc:713
#, no-wrap
msgid "Reactive Datasource"
msgstr "リアクティブデータソース"
