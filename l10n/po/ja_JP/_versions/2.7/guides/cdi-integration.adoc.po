msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"ArC, the CDI container, is bootstrapped at build time.\n"
"The downside of this approach is that CDI Portable Extensions cannot be supported.\n"
"Nevertheless, the functionality can be achieved using the Quarkus-specific extensions API."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"The container is bootstrapped in multiple phases.\n"
"From a high level perspective these phases go as follows:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"In the _initialization_ phase the preparatory work is being carried out and custom contexts are registered.\n"
"_Bean discovery_ is then the process where the container analyzes all application classes, identifies beans and wires them all together based on the provided metadata.\n"
"Subsequently, the extensions can register _synthetic components_.\n"
"Attributes of these components are fully controlled by the extensions, i.e. are not derived from an existing class.\n"
"Finally, the _deployment is validated_.\n"
"For example, the container validates every injection point in the application and fails the build if there is no bean that satisfies the given required type and qualifiers."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"Quarkus build steps can produce and consume various build items and hook into each phase.\n"
"In the following sections we will describe all the relevant build items and common scenarios."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"Classes and annotations are the primary source of bean-level metadata.\n"
"The initial metadata are read from the _bean archive index_, an immutable https://github.com/wildfly/jandex[Jandex index, window=\"_blank\"] which is built from various sources during <<cdi-reference.adoc#bean_discovery,bean discovery>>.\n"
"However, extensions can add, remove or transform the metadata at certain stages of the bootstrap.\n"
"Moreover, extensions can also register <<synthetic_beans,synthetic components>>.\n"
"This is an important aspect to realize when integrating CDI components in Quarkus."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"This way, extensions can turn classes, that would be otherwise ignored, into beans and vice versa.\n"
"For example, a class that declares a `@Scheduled` method is always registered as a bean even if it is not annotated with a bean defining annotation and would be normally ignored."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"An `UnsatisfiedResolutionException` indicates a problem during <<cdi.adoc#typesafe_resolution,typesafe resolution>>.\n"
"Sometimes an injection point cannot be satisfied even if there is a class on the classpath that appears to be eligible for injection.\n"
"There are several reasons why a class is not recognized and also several ways to fix it.\n"
"In the first step we should identify the _reason_."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid "_Reason 1_: Class Is Not discovered"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"Quarkus has a <<cdi-reference.adoc#bean_discovery,simplified discovery>>.\n"
"It might happen that the class is not part of the application index.\n"
"For example, classes from the _runtime module_ of a Quarkus extension are not indexed automatically."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"_Solution_: Use the `AdditionalBeanBuildItem`.\n"
"This build item can be used to specify one or more additional classes to be analyzed during the discovery.\n"
"Additional bean classes are transparently added to the application index processed by the container."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"Bean classes added via `AdditionalBeanBuildItem` are _removable_ by default.\n"
"If the container considers them <<cdi-reference.adoc#remove_unused_beans,unused>>, they are just ignored.\n"
"However, you can use `AdditionalBeanBuildItem.Builder.setUnremovable()` method to instruct the container to never remove bean classes registered via this build item.\n"
"See also <<cdi-reference.adoc#remove_unused_beans,Removing Unused Beans>> and <<unremovable_builditem>> for more details."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"It is aso possible to set the default scope via `AdditionalBeanBuildItem.Builder#setDefaultScope()`.\n"
"The default scope is only used if there is no scope declared on the bean class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"In Quarkus, the application is represented by a single bean archive with the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#default_bean_discovery[bean discovery mode `annotated`, window=\"_blank\"].\n"
"Therefore, bean classes that don't have a https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#bean_defining_annotations[bean defining annotation, window=\"_blank\"] are ignored.\n"
"Bean defining annotations are declared on the class-level and include scopes, stereotypes and `@Interceptor`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"Bean classes added via `BeanDefiningAnnotationBuildItem` are _not removable_ by default, i.e. the resulting beans must not be removed even if they are considered unused.\n"
"However, you can change the default behavior.\n"
"See also <<cdi-reference.adoc#remove_unused_beans,Removing Unused Beans>> and <<unremovable_builditem>> for more details."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"It is also possible to specify the default scope.\n"
"The default scope is only used if there is no scope declared on the bean class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"The container attempts to <<cdi-reference.adoc#remove_unused_beans,remove all unused beans>> during the build by default.\n"
"This optimization allows for _framework-level dead code elimination_.\n"
"In few special cases, it's not possible to correctly identify an unused bean.\n"
"In particular, Quarkus is not able to detect the usage of the `CDI.current()` static method yet.\n"
"Extensions can eliminate possible false positives by producing an `UnremovableBeanBuildItem`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"It is likely that the annotation class is not part of the application index.\n"
"For example, classes from the _runtime module_ of a Quarkus extension are not indexed automatically."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"In some cases, it's useful to be able to modify the metadata.\n"
"Quarkus provides a powerful alternative to https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#process_annotated_type[`javax.enterprise.inject.spi.ProcessAnnotatedType`, window=\"_blank\"].\n"
"With an `AnnotationsTransformerBuildItem` it's possible to override the annotations that exist on bean classes."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"For example, you might want to add an interceptor binding to a specific bean class.\n"
"Here is how to do it:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"Consumers of `BeanDiscoveryFinishedBuildItem` can easily inspect all class-based beans, observers and injection points registered in the application.\n"
"However, synthetic beans and observers are _not included_ because this build item is produced _before_ the synthetic components are registered."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"Sometimes it is practical to be able to register a _synthetic bean_.\n"
"Bean attributes of a synthetic bean are not derived from a Java class, method or field.\n"
"Instead, all the attributes are defined by an extension.\n"
"In regular CDI, this could be achieved using the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#after_bean_discovery[`AfterBeanDiscovery.addBean()`, window=\"_blank\"] methods."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"The output of a bean configurator is recorded as bytecode.\n"
"Therefore, there are some limitations in how a synthetic bean instance is created at runtime.\n"
"You can:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"It is possible to mark a synthetic bean to be initialized during `RUNTIME_INIT`.\n"
"See the <<writing-extensions.adoc#bootstrap-three-phases,Three Phases of Bootstrap and Quarkus Philosophy>> for more information about the difference between `STATIC_INIT` and `RUNTIME_INIT`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"The output of a `ObserverConfigurator` is recorded as bytecode.\n"
"Therefore, there are some limitations in how a synthetic observer is invoked at runtime.\n"
"Currently, you must generate the bytecode of the method body directly."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"No problem.\n"
"You can generate the bytecode of a bean class manually and then all you need to do is to produce a `GeneratedBeanBuildItem` instead of `GeneratedClassBuildItem`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"In rare cases it might be handy to programmatically register an existing annotation that is not annotated with `@javax.interceptor.InterceptorBinding` as an interceptor binding.\n"
"This is similar to what CDI achieves through `BeforeBeanDiscovery#addInterceptorBinding()`.\n"
"We are going to use `InterceptorBindingRegistrarBuildItem` to get it done."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"Sometimes it might be useful to register an existing annotation that is not annotated with `@javax.inject.Qualifier` as a CDI qualifier.\n"
"This is similar to what CDI achieves through `BeforeBeanDiscovery#addQualifier()`.\n"
"We are going to use `QualifierRegistrarBuildItem` to get it done."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"Every now and then it is handy to be able to change the qualifiers of an injection point programmatically.\n"
"You can do just that with `InjectionPointTransformerBuildItem`.\n"
"The following sample shows how to apply transformation to injection points with type `Foo` that contain qualifier `MyQualifier`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"The `ResourceAnnotationBuildItem` can be used to specify resource annotations that make it possible to resolve non-CDI injection points, such as Jakarta EE resources.\n"
"An integrator must also provide a corresponding `io.quarkus.arc.ResourceReferenceProvider` service provider implementation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"Any of the above extensions that operates with `BuildExtension.BuildContext` can leverage certain build time metadata that are generated during build.\n"
"The built-in keys located in `io.quarkus.arc.processor.BuildExtension.Key` are:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/cdi-integration.adoc
msgid ""
"To get hold of these, simply query the extension context object for given key.\n"
"Note that these metadata are made available as build proceeds which means that extensions can only leverage metadata that were built before the extensions are invoked.\n"
"If your extension attempts to retrieve metadata that wasn't yet produced, `null` will be returned.\n"
"Here is a summary of which extensions can access which metadata:"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/cdi-integration.adoc:6
#, no-wrap
msgid "CDI Integration Guide"
msgstr "CDI 統合ガイド"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:21
msgid "Initialization"
msgstr "初期化"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:22
msgid "Bean discovery"
msgstr "Beanディスカバリ"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:23
msgid "Registration of synthetic components"
msgstr "合成コンポーネントの登録"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:24
msgid "Validation"
msgstr "バリデーション"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:33
msgid "You can see more information about the bootstrap by enabling additional logging. Simply run the Maven build with `-X` or `--debug` and grep the lines that contain `io.quarkus.arc`. In the <<cdi-reference.adoc#dev-mode,development mode>>, you can use `quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG` and two special endpoints are also registered automatically to provide some basic debug info in the JSON format."
msgstr "追加のロギングを有効にすることで、ブートストラップに関するより多くの情報を見ることができます。 `-X` または `--debug` で Maven ビルドを実行し、 `io.quarkus.arc` を含む行を grep するだけです。 link:cdi-reference.html#dev-mode[開発モード] では、 `quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG` を使用することができ、2つの特別なエンドポイントも自動的に登録され、JSON形式でいくつかの基本的なデバッグ情報を提供します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:37
#, no-wrap
msgid "Metadata Sources"
msgstr "メタデータソース"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:51
#, no-wrap
msgid "Use Case - My Class Is Not Recognized as a Bean"
msgstr "ユースケース - クラスがBeanとして認識されません"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:70
msgid "It is not possible to conditionally enable/disable additional beans via the `@IfBuildProfile`, `@UnlessBuildProfile`, `@IfBuildProperty` and `@UnlessBuildProperty` annotations as described in <<cdi-reference.adoc#enable_build_profile>> and <<cdi-reference.adoc#enable_build_properties>>. Extensions should inspect the configuration or the current profile and only produce an `AdditionalBeanBuildItem` if really needed."
msgstr "<<cdi-reference.adoc#enable_build_profile>>および <<cdi-reference.adoc#enable_build_properties>> で説明されているように、 `@IfBuildProfile`, `@UnlessBuildProfile`, `@IfBuildProperty` および `@UnlessBuildProperty` アノテーションを介して、条件付きで追加のBeanを有効化/無効化することはできません。エクステンションは、設定または現在のプロファイルを検査し、本当に必要な場合にのみ `AdditionalBeanBuildItem` を生成するべきです。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:71
#, no-wrap
msgid "`AdditionalBeanBuildItem` Example"
msgstr "`AdditionalBeanBuildItem` の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:80
msgid "`AdditionalBeanBuildItem.Builder` can be used for more complex use cases."
msgstr "`AdditionalBeanBuildItem.Builder` は、より複雑なユースケースに使用することができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:90
#: upstream/_versions/2.7/guides/cdi-integration.adoc:132
msgid "If no default scope is specified the `@Dependent` pseudo-scope is used."
msgstr "デフォルトスコープが指定されていない場合は `@Dependent` 擬似スコープが使用されます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/cdi-integration.adoc:91
#, no-wrap
msgid "_Reason 2_: Class Is Discovered but Has No Bean Defining Annotation"
msgstr "_理由2_ : クラスは発見されたが、Beanを定義するアノテーションがない"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:98
msgid "_Solution 1_: Use the `AutoAddScopeBuildItem`. This build item can be used to add a scope to a class that meets certain conditions."
msgstr "_解決策1_ : `AutoAddScopeBuildItem` の使用。このビルドアイテムを使用すると、特定の条件を満たすクラスにスコープを追加することができます。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:99
#, no-wrap
msgid "`AutoAddScopeBuildItem` Example"
msgstr "`AutoAddScopeBuildItem` の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:110
msgid "Find all classes annotated with `@Scheduled`."
msgstr "`@Scheduled` でアノテーションされたすべてのクラスを検索"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:111
msgid "Add `@Singleton` as default scope. Classes already annotated with a scope are skipped automatically."
msgstr "デフォルトのスコープとして `@Singleton` を追加。既にスコープでアノテーションされているクラスは自動的にスキップされます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:113
msgid "_Solution 2_: If you need to process classes annotated with a specific annotation then it's possible to extend the set of bean defining annotations via the `BeanDefiningAnnotationBuildItem`."
msgstr "_解決策2_: 特定のアノテーションが付けられたクラスを処理する必要がある場合は、`BeanDefiningAnnotationBuildItem` を介して Bean 定義アノテーションのセットを拡張することができます。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:114
#, no-wrap
msgid "`BeanDefiningAnnotationBuildItem` Example"
msgstr "`BeanDefiningAnnotationBuildItem` の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:123
msgid "Add `org.eclipse.microprofile.graphql.GraphQLApi` to the set of bean defining annotations."
msgstr "Bean 定義アノテーションのセットに `org.eclipse.microprofile.graphql.GraphQLApi` を追加します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/cdi-integration.adoc:134
#, no-wrap
msgid "_Reason 3_: Class Was Discovered and Has a Bean Defining Annotation but Was Removed"
msgstr "_理由3_: クラスが検出され、Bean 定義のアノテーションがあるが削除されている"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:142
#, no-wrap
msgid "`UnremovableBeanBuildItem` Example"
msgstr "`UnremovableBeanBuildItem` の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:151
msgid "Make all classes annotated with `@Startup` unremovable."
msgstr "`@Startup` でアノテーションされたすべてのクラスを削除できないようにする。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:152
#, no-wrap
msgid "Use Case - My Annotation Is Not Recognized as a Qualifier or an Interceptor Binding"
msgstr "ユースケース - アノテーションが修飾子またはインターセプターバインディングとして認識されない"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:158
msgid "_Solution_: Use the `AdditionalBeanBuildItem` as described in <<additional_bean_build_item>>."
msgstr "_解決策_: <<additional_bean_build_item>> で説明されているとおりに `AdditionalBeanBuildItem` を使用します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:160
#, no-wrap
msgid "Use Case - I Need To Transform Metadata"
msgstr "ユースケース - メタデータを変換する必要があります"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:169
#, no-wrap
msgid "`AnnotationsTransformerBuildItem` Example"
msgstr "`AnnotationsTransformerBuildItem` の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:189
msgid "The transformer is only applied to classes."
msgstr "トランスフォーマーはクラスにのみ適用されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:190
msgid "If the class name equals to `org.acme.Bar` then add `@MyInterceptorBinding`. Don't forget to invoke `Transformation#done()`."
msgstr "クラス名が `org.acme.Bar` と同じ場合は、`@MyInterceptorBinding` を追加します。`Transformation#done()` を呼び出すことを忘れないでください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:192
msgid "Keep in mind that annotation transformers must be produced _before_ the bean discovery starts."
msgstr "アノテーショントランスフォーマーは、Beanディスカバリが始まる _前に_ 生成されなければならないことを覚えておいてください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:194
msgid "Build steps can query the transformed annotations for a given annotation target via the `TransformedAnnotationsBuildItem`."
msgstr "ビルドステップでは、`TransformedAnnotationsBuildItem` を介して、特定のアノテーションターゲットの変換済みアノテーションをクエリーできます。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:195
#, no-wrap
msgid "`TransformedAnnotationsBuildItem` Example"
msgstr "`TransformedAnnotationsBuildItem` の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:207
msgid "`TransformedAnnotationsBuildItem.getAnnotations()` will return a possibly transformed set of annotations."
msgstr "`TransformedAnnotationsBuildItem.getAnnotations()` は、変換された可能性のあるアノテーションのセットを返します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:209
msgid "There are other build items specialized in transformation: <<additional_interceptor_bindings>> and <<injection_point_transformation>>."
msgstr "変換に特化した他のビルドアイテム (<<additional_interceptor_bindings>> および<<injection_point_transformation>>) もあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:211
#, no-wrap
msgid "Use Case - Inspect Beans, Observers and Injection Points"
msgstr "使用例 - Bean、オブザーバー、インジェクションポイントの検査"

#. type: Title ===
#: upstream/_versions/2.7/guides/cdi-integration.adoc:213
#, no-wrap
msgid "_Solution 1_: `BeanDiscoveryFinishedBuildItem`"
msgstr "_解決策1._ `BeanDiscoveryFinishedBuildItem`"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:219
msgid "Additionaly, the bean resolver returned from `BeanDiscoveryFinishedBuildItem#getBeanResolver()` can be used to apply the type-safe resolution rules, e.g. to find out whether there is a bean that would satisfy certain combination of required type and qualifiers."
msgstr "さらに、`BeanDiscoveryFinishedBuildItem#getBeanResolver()` から返された Bean リゾルバーを使用して、タイプセーフな解決ルールを適用できます。たとえば、必要なタイプと修飾子の特定の組み合わせを満たす Bean があるかどうかを確認できます。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:220
#, no-wrap
msgid "`BeanDiscoveryFinishedBuildItem` Example"
msgstr "`BeanDiscoveryFinishedBuildItem` の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:230
msgid "The resulting list will not contain `@Named` synthetic beans."
msgstr "結果のリストに `@Named` 合成 Bean は含まれません。"

#. type: Title ===
#: upstream/_versions/2.7/guides/cdi-integration.adoc:231
#, no-wrap
msgid "_Solution 2_: `SynthesisFinishedBuildItem`"
msgstr "_解決策2_ : `SynthesisFinishedBuildItem`"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:234
msgid "Consumers of `SynthesisFinishedBuildItem` can easily inspect all beans, observers and injection points registered in the application. Synthetic beans and observers are included because this build item is produced _after_ the synthetic components are registered."
msgstr "`SynthesisFinishedBuildItem` のコンシューマーは、アプリケーションに登録されているすべての Bean、オブザーバー、およびインジェクションポイントを簡単に検査できます。このビルドアイテムは合成コンポーネントが登録された _後_ に作成されるため、合成 Bean とオブザーバーも _含まれます_ 。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:236
msgid "Additionaly, the bean resolver returned from `SynthesisFinishedBuildItem#getBeanResolver()` can be used to apply the type-safe resolution rules, e.g. to find out whether there is a bean that would satisfy certain combination of required type and qualifiers."
msgstr "さらに、`SynthesisFinishedBuildItem#getBeanResolver()` から返された Bean リゾルバーを使用して、タイプセーフな解決ルールを適用できます。たとえば、必要なタイプと修飾子の特定の組み合わせを満たす Bean があるかどうかを確認できます。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:237
#, no-wrap
msgid "`SynthesisFinishedBuildItem` Example"
msgstr "`SynthesisFinishedBuildItem` の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:247
msgid "The resulting list will contain `@Named` synthetic beans."
msgstr "結果のリストには、`@Named` 合成 Bean が含まれます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:249
#, no-wrap
msgid "Use Case - The Need for Synthetic Beans"
msgstr "ユースケース - 合成 Bean の必要性"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:257
msgid "_Solution_: If you need to register a synthetic bean then use the `SyntheticBeanBuildItem`."
msgstr "_解決策_: 合成 Bean を登録する必要がある場合は、`SyntheticBeanBuildItem` を使用します。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:258
#, no-wrap
msgid "`SyntheticBeanBuildItem` Example 1"
msgstr "`SyntheticBeanBuildItem` の例 1"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:270
msgid "Generate the bytecode of the `javax.enterprise.context.spi.Contextual#create(CreationalContext<T>)` implementation."
msgstr "`javax.enterprise.context.spi.Contextual#create(CreationalContext<T>)` 実装の培土コードを生成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:276
msgid "Generate the bytecode of the `Contextual#create(CreationalContext<T>)` method directly via `ExtendedBeanConfigurator.creator(Consumer<MethodCreator>)`."
msgstr "`Contextual#create(CreationalContext<T>)` メソッドのバイトコードを、`ExtendedBeanConfigurator.creator(Consumer<MethodCreator>)` を介して直接生成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:277
msgid "Pass a `io.quarkus.arc.BeanCreator` implementation class via `ExtendedBeanConfigurator#creator(Class<? extends BeanCreator<U>>)`, and possibly specify some parameters via `ExtendedBeanConfigurator#param()`."
msgstr "`ExtendedBeanConfigurator#creator(Class<? extends BeanCreator<U>>)` を介して `io.quarkus.arc.BeanCreator` 実装クラスを渡し、可能であれば `ExtendedBeanConfigurator#param()` を介していくつかのパラメーターを指定します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:278
msgid "Produce the runtime instance through a proxy returned from a <<writing-extensions.adoc#bytecode-recording,`@Recorder` method>> and set it via `ExtendedBeanConfigurator#runtimeValue(RuntimeValue<?>)` or `ExtendedBeanConfigurator#supplier(Supplier<?>)`."
msgstr "<<writing-extensions.adoc#bytecode-recording,`@Recorder` メソッド>> から返されたプロキシー経由でランタイムインスタンスを生成し、それを `ExtendedBeanConfigurator#runtimeValue(RuntimeValue<?>)` または `ExtendedBeanConfigurator#supplier(Supplier<?>)` 経由で設定します。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:279
#, no-wrap
msgid "`SyntheticBeanBuildItem` Example 2"
msgstr "`SyntheticBeanBuildItem` の例 2"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:291
msgid "By default, a synthetic bean is initialized during `STATIC_INIT`."
msgstr "デフォルトでは、合成 Bean は `STATIC_INIT` の間に初期化されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:292
msgid "The bean instance is supplied by a value returned from a recorder method."
msgstr "Bean インスタンスは、レコーダーメソッドから返される値によって提供されます。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:296
#, no-wrap
msgid "`RUNTIME_INIT` `SyntheticBeanBuildItem` Example"
msgstr "`RUNTIME_INIT` `SyntheticBeanBuildItem` の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:309
msgid "The recorder must be executed in the `ExecutionTime.RUNTIME_INIT` phase."
msgstr "レコーダーは、`ExecutionTime.RUNTIME_INIT` フェーズで実行する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:310
msgid "The bean instance is initialized during `RUNTIME_INIT`."
msgstr "Bean インスタンスは、`RUNTIME_INIT` の間に初期化されます。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/cdi-integration.adoc:314
msgid "Synthetic beans initialized during `RUNTIME_INIT` must not be accessed during `STATIC_INIT`. `RUNTIME_INIT` build steps that access a runtime-init synthetic bean should consume the `SyntheticBeansRuntimeInitBuildItem`:"
msgstr "`RUNTIME_INIT` の間に初期化された合成 Bean は、`STATIC_INIT` の間にアクセスしてはいけません。runtime-init 合成 Bean にアクセスする `RUNTIME_INIT` ビルドステップは、`SyntheticBeansRuntimeInitBuildItem` を消費します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:325
msgid "This build step must be executed after `syntheticBean()` completes."
msgstr "このビルドステップは、`syntheticBean()` の完了後に実行する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:326
msgid "This recorder method results in an invocation upon the `Foo` bean instance and thus we need to make sure that the build step is executed after all synthetic beans are initialized."
msgstr "このレコーダーメソッドでは `Foo` Bean インスタンスが呼び出されるため、必ずすべての合成 Bean が初期化された後にビルドステップが実行されることを確認する必要があります。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/cdi-integration.adoc:329
msgid "It is also possible to use the `BeanRegistrationPhaseBuildItem` to register a synthetic bean. However, we recommend extension authors to stick with `SyntheticBeanBuildItem` which is more idiomatic for Quarkus."
msgstr "`BeanRegistrationPhaseBuildItem` を使用して合成 Bean を登録することもできます。ただし、エクステンション作成者においては、Quarkus にとってより慣用的な `SyntheticBeanBuildItem` を使用することをお勧めします。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:331
#, no-wrap
msgid "Use Case - Synthetic Observers"
msgstr "ユースケース - 合成オブザーバー"

#. type: delimited block =
#: upstream/_versions/2.7/guides/cdi-integration.adoc:334
msgid "Similar to <<synthetic_beans,synthetic beans>>, the attributes of a synthetic observer method are not derived from a Java method. Instead, all the attributes are defined by an extension."
msgstr "<<synthetic_beans,synthetic beans>> と同様に、合成オブザーバーメソッドの属性は Java メソッドから派生しません。代わりに、すべての属性がエクステンションによって定義されます。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/cdi-integration.adoc:336
msgid "_Solution_: If you need to register a synthetic observer, use the `ObserverRegistrationPhaseBuildItem`."
msgstr "_解決策_: 合成オブザーバーを登録する必要がある場合は、`ObserverRegistrationPhaseBuildItem` を使用します。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/cdi-integration.adoc:338
msgid "A build step that consumes the `ObserverRegistrationPhaseBuildItem` should always produce an `ObserverConfiguratorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase)."
msgstr "`ObserverRegistrationPhaseBuildItem` を消費するビルドステップでは、常に `ObserverConfiguratorBuildItem` を生成するか、少なくともこのビルドアイテムに `BuildProducer` を 挿入する必要があります。でなければ、無視されるか、間違ったタイミングで処理される可能性があります (例: 正しい CDI ブートストラップフェーズの後)。"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:339
#, no-wrap
msgid "`ObserverRegistrationPhaseBuildItem` Example"
msgstr "`ObserverRegistrationPhaseBuildItem` の例"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:362
#, no-wrap
msgid "Use Case - I Have a Generated Bean Class"
msgstr "ユースケース - 生成された Bean クラスがある"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:367
#, no-wrap
msgid "`GeneratedBeanBuildItem` Example"
msgstr "`GeneratedBeanBuildItem` の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:381
msgid "`io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor` makes it easy to produce ``GeneratedBeanBuildItem``s from Gizmo constructs."
msgstr "`io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor` を使用すると、Gizmo コンストラクトから ``GeneratedBeanBuildItem`` を簡単に作成できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:382
msgid "The resulting bean class is something like `public class @Singleton MyBean { }`."
msgstr "結果の Bean クラスは、次のようになります: `public class @Singleton MyBean { }`。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:383
#, no-wrap
msgid "Use Case - I Need to Validate the Deployment"
msgstr "ユースケース - デプロイメントを検証する必要がある"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:386
msgid "Sometimes extensions need to inspect the beans, observers and injection points, then perform additional validations and fail the build if something is wrong."
msgstr "エクステンションは、Bean、オブザーバー、およびインジェクションポイントを検査し、さらに追加の検証を実行して、何か問題がある場合はビルドを失敗にする必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:388
msgid "_Solution_: If an extension needs to validate the deployment it should use the `ValidationPhaseBuildItem`."
msgstr "_解決策_: エクステンションがデプロイメントを検証する必要がある場合、`ValidationPhaseBuildItem` を使用します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:390
msgid "A build step that consumes the `ValidationPhaseBuildItem` should always produce a `ValidationErrorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase)."
msgstr "`ValidationPhaseBuildItem` を消費するビルドステップでは、常に `ValidationErrorBuildItem` を生成するか、少なくともこのビルドアイテムに `BuildProducer` を 挿入する必要があります。でなければ、無視されるか、間違ったタイミングで処理される可能性があります (例: 正しい CDI ブートストラップフェーズの後)。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:405
msgid "You can easily filter all registered beans via the convenient `BeanStream` returned from the `ValidationPhaseBuildItem.getContext().beans()` method."
msgstr "`ValidationPhaseBuildItem.getContext().beans()` メソッドから返される便利な `BeanStream` を使用して、登録されているすべての Bean を簡単にフィルタリングできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:407
#, no-wrap
msgid "Use Case - Register a Custom CDI Context"
msgstr "ユースケース - カスタム CDI コンテキストの登録"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:410
msgid "Sometimes extensions need to extend the set of built-in CDI contexts."
msgstr "時々、エクステンションは組み込みCDI コンテキストのセットを拡張する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:412
msgid "_Solution_: If you need to register a custom context, use the `ContextRegistrationPhaseBuildItem`."
msgstr "_解決策_: カスタムコンテキストを登録する必要がある場合は、`ContextRegistrationPhaseBuildItem` を使用します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:414
msgid "A build step that consumes the `ContextRegistrationPhaseBuildItem` should always produce a `ContextConfiguratorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase)."
msgstr "`ContextRegistrationPhaseBuildItem` を消費するビルドステップでは、常に `ContextConfiguratorBuildItem` を生成するか、少なくともこのビルドアイテムに `BuildProducer`を 挿入する必要があります。でなければ、無視されるか、間違ったタイミングで処理される可能性があります (例: 正しい CDI ブートストラップフェーズの後)。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:416
msgid "`ContextRegistrationPhaseBuildItem` Example"
msgstr "`ContextRegistrationPhaseBuildItem` の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:425
msgid "Additionally, each extension that registers a custom CDI context via `ContextRegistrationPhaseBuildItem` should also produce the `CustomScopeBuildItem` in order to contribute the custom scope annotation name to the set of bean defining annotations."
msgstr "さらに、`ContextRegistrationPhaseBuildItem` を介してカスタム CDI コンテキストを登録する各エクステンションは、Bean 定義アノテーションのセットにカスタムスコープアノテーション名を提供するために、`CustomScopeBuildItem` も生成する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:427
msgid "`CustomScopeBuildItem` Example"
msgstr "`CustomScopeBuildItem` の例"

#. type: Title ===
#: upstream/_versions/2.7/guides/cdi-integration.adoc:435
#, no-wrap
msgid "What if I Need to Know All the Scopes Used in the Application?"
msgstr "アプリケーションで使用されているすべてのスコープを知る必要がある場合はどうなりますか?"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:438
msgid "_Solution_: You can inject the `CustomScopeAnnotationsBuildItem` in a build step and use the convenient methods such as `CustomScopeAnnotationsBuildItem.isScopeDeclaredOn()`."
msgstr "_ソリューション_: ビルドステップで `CustomScopeAnnotationsBuildItem` を挿入し、 `CustomScopeAnnotationsBuildItem.isScopeDeclaredOn()` などの便利なメソッドを使用できます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:440
#, no-wrap
msgid "Use Case - Additional Interceptor Bindings"
msgstr "ユースケース - 追加のインターセプターバインディング"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:446
#, no-wrap
msgid "`InterceptorBindingRegistrarBuildItem` Example"
msgstr "`InterceptorBindingRegistrarBuildItem` の例"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:460
#, no-wrap
msgid "Use Case - Additional Qualifiers"
msgstr "使用例 - 追加の修飾子"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:466
#, no-wrap
msgid "`QualifierRegistrarBuildItem` Example"
msgstr "`QualifierRegistrarBuildItem` の例"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:482
#, no-wrap
msgid "Use Case - Injection Point Transformation"
msgstr "ユースケース - インジェクションポイントの変換"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:488
#, no-wrap
msgid "`InjectionPointTransformerBuildItem` Example"
msgstr "`InjectionPointTransformerBuildItem` の例"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:513
msgid "In theory, you can use <<annotations_transformer_build_item,an `AnnotationsTransformer`>> to achieve the same goal. However, there are few differences that make `InjectionPointsTransformer` more suitable for this particular task: (1) annotation transformers are applied to all classes during bean discovery, whereas `InjectionPointsTransformer` is only applied to discovered injection points after bean discovery; (2) with `InjectionPointsTransformer` you don't need to handle various types of injection points (field, parameters of initializer methods, etc.)."
msgstr "理論的には、<<annotations_transformer_build_item,`AnnotationsTransformer`>> を使用して同じ目標を達成できます。ただし、次の多少の違いがあるため、このタスクには `InjectionPointsTransformer` の方が適しています。その違いとは次のとおりです。(1) アノテーショントランスフォーマーは Bean 検出中にすべてのクラスに適用されますが、`InjectionPointsTransformer` は Bean 検出後に検出されたインジェクションポイントにのみ適用されます。(2) `InjectionPointsTransformer` を使用すると、さまざまなタイプのインジェクションポイント (フィールド、初期化メソッドのパラメーターなど) を処理する必要がありません。"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:514
#, no-wrap
msgid "Use Case - Resource Annotations and Injection"
msgstr "ユースケース - リソースアノテーションとインジェクション"

#. type: Block title
#: upstream/_versions/2.7/guides/cdi-integration.adoc:519
#, no-wrap
msgid "`ResourceAnnotationBuildItem` Example"
msgstr "`ResourceAnnotationBuildItem` の例"

#. type: Title ==
#: upstream/_versions/2.7/guides/cdi-integration.adoc:531
#, no-wrap
msgid "Available Build Time Metadata"
msgstr "利用可能なビルドタイムメタデータ"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:536
#, no-wrap
msgid "ANNOTATION_STORE"
msgstr "ANNOTATION_STORE"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:537
msgid "Contains an `AnnotationStore` that keeps information about all `AnnotationTarget` annotations after application of annotation transformers"
msgstr "アノテーショントランスフォーマーを適用した後は、すべての`AnnotationTarget`アノテーションに関する情報を保持する `AnnotationStore` が含まれます"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:537
#, no-wrap
msgid "INJECTION_POINTS"
msgstr "INJECTION_POINTS"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:538
msgid "`Collection<InjectionPointInfo>` containing all injection points"
msgstr "すべてのインジェクションポイントを含む `Collection<InjectionPointInfo>`"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:538
#, no-wrap
msgid "BEANS"
msgstr "BEANS"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:539
msgid "`Collection<BeanInfo>` containing all beans"
msgstr "すべての Bean を含む `Collection<BeanInfo>`"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:539
#, no-wrap
msgid "REMOVED_BEANS"
msgstr "REMOVED_BEANS"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:540
msgid "`Collection<BeanInfo>` containing all the removed beans; see <<cdi-reference.adoc#remove_unused_beans,Removing unused beans>> for more information"
msgstr "`Collection<BeanInfo>` 削除されたすべての link:cdi-reference.html#remove_unused_beans[Bean] を含む"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:540
#, no-wrap
msgid "OBSERVERS"
msgstr "OBSERVERS"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:541
msgid "`Collection<ObserverInfo>` containing all observers"
msgstr "すべてのオブザーバーを含む `Collection<ObserverInfo>`"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:541
#, no-wrap
msgid "SCOPES"
msgstr "SCOPES"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:542
msgid "`Collection<ScopeInfo>` containing all scopes, including custom ones"
msgstr "カスタムスコープも含め、すべてのスコープを含む `Collection<ScopeInfo>`"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:542
#, no-wrap
msgid "QUALIFIERS"
msgstr "QUALIFIERS"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:543
msgid "`Map<DotName, ClassInfo>` containing all qualifiers"
msgstr "`Map<DotName, ClassInfo>` すべての修飾子を含む"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:543
#, no-wrap
msgid "INTERCEPTOR_BINDINGS"
msgstr "INTERCEPTOR_BINDINGS"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:544
msgid "`Map<DotName, ClassInfo>` containing all interceptor bindings"
msgstr "すべてのインターセプターバインディングを含む `Map<DotName, ClassInfo>`"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:544
#, no-wrap
msgid "STEREOTYPES"
msgstr "STEREOTYPES"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:545
msgid "`Map<DotName, StereotypeInfo>` containing all stereotypes"
msgstr "すべてのステレオタイプを含む `Map<DotName, StereotypeInfo>`"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:551
#, no-wrap
msgid "AnnotationsTransformer"
msgstr "AnnotationsTransformer"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:552
msgid "Shouldn't rely on any metadata as it could be used at any time in any phase of the bootstrap"
msgstr "ブートストラップのどのフェーズでもいつでも使えるので、メタデータに頼るべきではありません。"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:552
#, no-wrap
msgid "ContextRegistrar"
msgstr "ContextRegistrar"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:553
#: upstream/_versions/2.7/guides/cdi-integration.adoc:554
#: upstream/_versions/2.7/guides/cdi-integration.adoc:555
msgid "Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`"
msgstr "`ANNOTATION_STORE` , `QUALIFIERS` , `INTERCEPTOR_BINDINGS` . `STEREOTYPES` にアクセスできます。"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:553
#, no-wrap
msgid "InjectionPointsTransformer"
msgstr "InjectionPointsTransformer"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:554
#, no-wrap
msgid "ObserverTransformer"
msgstr "ObserverTransformer"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:555
#, no-wrap
msgid "BeanRegistrar"
msgstr "BeanRegistrar"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:556
msgid "Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS` (class-based beans only), `OBSERVERS` (class-based observers only), `INJECTION_POINTS`"
msgstr "`ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS` (class-based beans only), `OBSERVERS` (class-based observers only), `INJECTION_POINTS` にアクセスできます。"

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:556
#, no-wrap
msgid "ObserverRegistrar"
msgstr "ObserverRegistrar"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:557
msgid "Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS`, `OBSERVERS` (class-based observers only), `INJECTION_POINTS`"
msgstr "`ANNOTATION_STORE` , `QUALIFIERS` , `INTERCEPTOR_BINDINGS` , `STEREOTYPES` , `BEANS` , `OBSERVERS` (クラスベースのオブザーバーのみ), `INJECTION_POINTS` にアクセス可能です。 "

#. type: Labeled list
#: upstream/_versions/2.7/guides/cdi-integration.adoc:557
#, no-wrap
msgid "BeanDeploymentValidator"
msgstr "BeanDeploymentValidator"

#. type: Plain text
#: upstream/_versions/2.7/guides/cdi-integration.adoc:557
msgid "Has access to all build metadata"
msgstr "すべてのビルドメタデータにアクセスできます"
