msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"This command generates a Maven structure importing the RESTEasy Reactive Jackson and MongoDB Client extensions.\n"
"After this, the `quarkus-mongodb-client` extension has been added to your build file."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `mongodb-client` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"By default Quarkus will restrict the use of JNDI within an application, as a precaution to try and mitigate any future vulnerabilities similar to log4shell.\n"
"Because the `mongo+srv` protocol often used to connect to MongoDB requires JNDI, this protection is automatically disabled when using the MongoDB client extension."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"Quarkus supports a feature called Dev Services that allows you to create various datasources without any config. In the case of MongoDB this support extends to the default MongoDB connection.\n"
"What that means practically, is that if you have not configured `quarkus.mongodb.connection-string` Quarkus will automatically start a MongoDB container when running tests or dev-mode,\n"
"and automatically configure the connection."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"When running the production version of the application, the MongoDB connection need to be configured as normal, so if you want to include a production database config in your\n"
"`application.properties` and continue to use Dev Services we recommend that you use the `%prod.` profile to define your MongoDB settings."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"MongoDB allows you to configure multiple clients.\n"
"Using several clients works the same way as having a single client."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"Notice there's an extra bit in the key (the `users` and `inventory` segments).\n"
"The syntax is as follows: `quarkus.mongodb.[optional name.][mongo connection property]`.\n"
"If the name is omitted, it configures the default client."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"The use of multiple MongoDB clients enables multi-tenancy for MongoDB by allowing to connect to multiple MongoDB clusters. +\n"
"If you want to connect to multiple databases inside the same cluster,\n"
"multiple clients are **not** necessary as a single client is able to access all databases in the same cluster\n"
"(like a JDBC connection is able to access to multiple schemas inside the same database)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"When using multiple clients, each `MongoClient`, you can select the client to inject using the `io.quarkus.mongodb.MongoClientName` qualifier.\n"
"Using the above properties to configure three different clients, you can also inject each one as follows:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"Now let's add a simple web page to interact with our `FruitResource`.\n"
"Quarkus automatically serves static resources located under the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this {quickstarts-blob-url}/mongodb-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid "CLI"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid "Maven"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid "Gradle"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"add new fruits to the list via the form\n"
":!devtools-wrapped:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"A reactive MongoDB Client is included in Quarkus.\n"
"Using it is as easy as using the classic MongoDB Client.\n"
"You can rewrite the previous example to use it like the following."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"The `io.quarkus.mongodb.ReactiveMongoClient` client is deprecated and will be removed in the future.\n"
"It is recommended to switch to the `io.quarkus.mongodb.reactive.ReactiveMongoClient` client providing the `Mutiny` API."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"The MongoDB reactive client uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"First you need to create a Bson `Codec` that will tell Bson how to transform your entity to/from a MongoDB `Document`.\n"
"Here we use a `CollectibleCodec` as our object is retrievable from the database (it has a MongoDB identifier), if not we would have used a `Codec` instead.\n"
"More information in the codec documentation: https://mongodb.github.io/mongo-java-driver/3.10/bson/codecs."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"The link:http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos[POJO Codec] provides a set of annotations that enable the customization of\n"
"the way a POJO is mapped to a MongoDB collection and this codec is initialized automatically by Quarkus"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"One of these annotations is the `@BsonDiscriminator` annotation that allows to storage multiple Java types in a single MongoDB collection by adding\n"
"a discriminator field inside the document. It can be useful when working with abstract types or interfaces."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"The POJO Codec have enhanced generic support via `PropertyCodecProvider`,\n"
"Quarkus will automatically register any `PropertyCodecProvider` with the POJO Codec (these classes are automatically made CDI beans of `@Singleton` scope).\n"
"When building native executables and using generic types, you might need to register the type arguments for reflection."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"If you are using the `quarkus-smallrye-health` extension, `quarkus-mongodb-client` will automatically add a readiness health check\n"
"to validate the connection to the cluster."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"If you are using the `quarkus-micrometer` or `quarkus-smallrye-metrics` extension, `quarkus-mongodb-client` can provide metrics about the connection pools.\n"
"This behavior must first be enabled by setting the `quarkus.mongodb.metrics.enabled` property to `true` in your `application.properties`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"So when you access the `/q/metrics` endpoint of your application you will have information about the connection pool status.\n"
"When using xref:smallrye-metrics.adoc[SmallRye Metrics], connection pool metrics will be available under the `vendor` scope."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"If you are using the `quarkus-smallrye-opentracing` extension, `quarkus-mongodb-client` can register traces about the commands executed.\n"
"This behavior must be enabled by setting the `quarkus.mongodb.tracing.enabled` property to `true` in your `application.properties` and adding the dependency `io.opentracing.contrib:opentracing-mongo-common` to your pom.xml (for more info read the xref:opentracing.adoc#mongodb-client[OpenTracing - MongoDB client] section)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"We don't include the legacy MongoDB client by default. It contains the now retired MongoDB Java API (DB, DBCollection,... )\n"
"and the `com.mongodb.MongoClient` that is now superseded by `com.mongodb.client.MongoClient`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"If you encounter the following error when running your application in native mode: +\n"
"`Failed to encode 'MyObject'. Encoding 'myVariable' errored with: Can't find a codec for class org.acme.MyVariable.` +\n"
"This means that the `org.acme.MyVariable` class is not known to GraalVM, the remedy is to add the `@RegisterForReflection` annotation to your `MyVariable class`.\n"
"More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"`mongo+srv://` urls are supported out of the box in JVM mode.\n"
"However, in native, the default DNS resolver, provided by the MongoDB client, uses JNDI and does not work in native mode."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"If you need to use `mongo+srv://` in native mode, you can configure an alternative DNS resolver.\n"
"This feature is **experimental** and may introduce a difference between JVM applications and native applications."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/mongodb.adoc
msgid ""
"As indicated in the property name, it uses Vert.x to retrieve the DNS records.\n"
"By default, it tries to read the first `nameserver` from `/etc/resolv.conf`, if this file exists.\n"
"You can also configure your DNS server:"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/mongodb.adoc:6
#, no-wrap
msgid "Using the MongoDB Client"
msgstr "MongoDB クライアントの利用"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:10
msgid "MongoDB is a well known NoSQL Database that is widely used."
msgstr "MongoDBは広く使われているNoSQLデータベースとして知られています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:12
msgid "In this guide, we see how you can get your REST services to use the MongoDB database."
msgstr "このガイドでは、RESTサービスでMongoDBデータベースを使用する方法を見ていきます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:13
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:17
msgid "MongoDB installed or Docker installed"
msgstr "MongoDBがインストールされているか、Dockerがインストールされている"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:18
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:21
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "このガイドで開発するアプリケーションは非常にシンプルです: ユーザーはフォームを使用してリストに要素を追加することができ、リストが更新されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:23
msgid "All the information between the browser and the server is formatted as JSON."
msgstr "ブラウザとサーバー間の情報はすべてJSON形式になっています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:25
msgid "The elements are stored in MongoDB."
msgstr "要素はMongoDBに格納されています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:26
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:32
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:34
msgid "The solution is located in the `mongodb-quickstart` {quickstarts-tree-url}/mongodb-quickstart[directory]."
msgstr "ソリューションは `mongodb-quickstart` {quickstarts-tree-url}/mongodb-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:35
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:38
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:53
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/2.7/guides/mongodb.adoc:55
#: upstream/_versions/2.7/guides/mongodb.adoc:639
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.7/guides/mongodb.adoc:64
#: upstream/_versions/2.7/guides/mongodb.adoc:648
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:69
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr "初めてのJSON RESTサービスの作成"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:72
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "この例では、果物のリストを管理するアプリケーションを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:74
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "まず、以下のように `Fruit` Bean を作成してみましょう。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:138
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "派手なことは何もありません。注意すべき重要なことは、デフォルトのコンストラクタを持つことはJSONシリアライズレイヤーで必須であるということです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:140
msgid "Now create a `org.acme.mongodb.FruitService` that will be the business layer of our application and store/load the fruits from the mongoDB database."
msgstr "今、私たちのアプリケーションのビジネス層となる `org.acme.mongodb.FruitService` を作成し、mongoDB データベースからフルーツを保存/ロードします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:192
msgid "Now, create the `org.acme.mongodb.FruitResource` class as follows:"
msgstr "では、次のように `org.acme.mongodb.FruitResource` クラスを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:214
msgid "The implementation is pretty straightforward and you just need to define your endpoints using the JAX-RS annotations and use the `FruitService` to list/add new fruits."
msgstr "実装はとても簡単で、JAX-RSのアノテーションを使ってエンドポイントを定義し、 `FruitService` を使って新しいフルーツをリストアップ/追加するだけです。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:215
#, no-wrap
msgid "Configuring the MongoDB database"
msgstr "MongoDBデータベースの設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:217
msgid "The main property to configure is the URL to access to MongoDB, almost all configuration can be included in the connection URI so we advise you to do so, you can find more information in the MongoDB documentation: https://docs.mongodb.com/manual/reference/connection-string/"
msgstr "設定する主なプロパティーは MongoDB にアクセスするための URL です。ほとんどすべての設定は接続 URI に含めることができるので、そうすることをお勧めします : https://docs.mongodb.com/manual/reference/connection-string/"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:219
msgid "A sample configuration should look like this:"
msgstr "設定のサンプルは以下のようになります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:227
msgid "In this example, we are using a single instance running on localhost:"
msgstr "この例では、ローカルホスト上で実行されている単一のインスタンスを使用しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:235
msgid "If you need more configuration properties, there is a full list at the end of this guide."
msgstr "その他の設定プロパティーが必要な場合は、このガイドの最後に完全なリストがあります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/mongodb.adoc:240
#, no-wrap
msgid "Dev Services (Configuration Free Databases)"
msgstr "開発サービス（コンフィグレーション・フリー・データベース）"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:251
#, no-wrap
msgid "Multiple MongoDB Clients"
msgstr "複数のMongoDBクライアント"

#. type: Title ===
#: upstream/_versions/2.7/guides/mongodb.adoc:276
#, no-wrap
msgid "Named Mongo client Injection"
msgstr "名前付きMongoクライアントの注入"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:295
#, no-wrap
msgid "Running a MongoDB Database"
msgstr "MongoDB データベースの実行"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:297
msgid "As by default, `MongoClient` is configured to access a local MongoDB database on port 27017 (the default MongoDB port), if you have a local running database on this port, there is nothing more to do before being able to test it!"
msgstr "デフォルトでは、 `MongoClient` はポート 27017 (デフォルトの MongoDB ポート) でローカルの MongoDB データベースにアクセスするように設定されています。このポートで実行されているローカルのデータベースがある場合は、他に何もする必要はありません!"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:299
msgid "If you want to use Docker to run a MongoDB database, you can use the following command to launch one:"
msgstr "Dockerを使ってMongoDBデータベースを起動したい場合は、以下のコマンドで起動することができます。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/mongodb.adoc:307
msgid "If you use <<dev-services,Dev Services>>, launching the container manually is not necessary!"
msgstr "link:#dev-services[Dev Services]を使用している場合は、手動でコンテナを起動する必要はありません。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:310
#, no-wrap
msgid "Creating a frontend"
msgstr "フロントエンドの作成"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:317
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:320
msgid "start Quarkus with:"
msgstr "Quarkusを起動します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:323
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "ブラウザで `http://localhost:8080/fruits.html` を開きます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:327
#, no-wrap
msgid "Reactive MongoDB Client"
msgstr "リアクティブな MongoDB クライアント"

#. type: Block title
#: upstream/_versions/2.7/guides/mongodb.adoc:333
#, no-wrap
msgid "Deprecation"
msgstr "非推奨"

#. type: Block title
#: upstream/_versions/2.7/guides/mongodb.adoc:340
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:427
#, no-wrap
msgid "Simplifying MongoDB Client usage using BSON codec"
msgstr "BSON codecを使ってMongoDBクライアントの利用をシンプルにする"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:430
msgid "By using a Bson `Codec`, the MongoDB Client will take care of the transformation of your domain object to/from a MongoDB `Document` automatically."
msgstr "Bson `Codec` を使用することで、MongoDB クライアントは自動的に MongoDB `Document` への/からドメインオブジェクトの変換の世話をします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:508
msgid "Then you need to create a `CodecProvider` to link this `Codec` to the `Fruit` class."
msgstr "そして、この `Codec` を `Fruit` クラスにリンクさせるための `CodecProvider` を作成する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:531
msgid "Quarkus takes care of registering the `CodecProvider` for you as a CDI bean of `@Singleton` scope."
msgstr "Quarkusは、 `CodecProvider` を `@Singleton` スコープのCDIビーンとして登録する作業を行います。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:533
msgid "Finally, when getting the `MongoCollection` from the database you can use directly the `Fruit` class instead of the `Document` one, the codec will automatically map the `Document` to/from your `Fruit` class."
msgstr "最後に、データベースから `MongoCollection` を取得するとき、 `Document` の代わりに `Fruit` クラスを直接使用することができます。コーデックは自動的に `Document` を `Fruit` クラスにマッピングします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:535
msgid "Here is an example of using a `MongoCollection` with the `FruitCodec`."
msgstr "これが、 `MongoCollection` を `FruitCodec` と使用する例です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:578
#, no-wrap
msgid "The POJO Codec"
msgstr "POJO codec"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:587
msgid "Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` with the POJO codec."
msgstr "Quarkusは、 `@BsonDiscriminator` でアノテーションされたすべてのクラスをPOJOコーデックで自動的に登録します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:592
#, no-wrap
msgid "Simplifying MongoDB with Panache"
msgstr "PanacheでMongoDBをシンプルにする"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:595
msgid "The xref:mongodb-panache.adoc[MongoDB with Panache] extension facilitates the usage of MongoDB by providing active record style entities (and repositories) like you have in xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr "link:mongodb-panache.html[MongoDB with Panache]エクステンションは、 link:hibernate-orm-panache.html[Hibernate ORM with Panache]にあるようなアクティブレコードスタイルのエンティティ（およびリポジトリ）を提供することで、MongoDBの利用を促進し、Quarkusでエンティティを簡単に楽しく書けるようにすることに重点を置いています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:596
#, no-wrap
msgid "Connection Health Check"
msgstr "接続のヘルスチェック"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:602
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr "そのため、アプリケーションの `/q/health/ready` エンドポイントにアクセスすると、接続の検証状況に関する情報が表示されます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:604
msgid "This behavior can be disabled by setting the `quarkus.mongodb.health.enabled` property to `false` in your `application.properties`."
msgstr "この動作は、 `application.properties` で `quarkus.mongodb.health.enabled` プロパティーを `false` に設定することで無効にできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:605
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:613
#, no-wrap
msgid "Tracing"
msgstr "トレース"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:619
msgid "Read the xref:opentracing.adoc[OpenTracing] guide, for how to configure OpenTracing and how to use the Jaeger tracer."
msgstr "OpenTracingの設定方法やJaegerトレーサーの使用方法については、 link:opentracing.html[OpenTracing]ガイドをお読みください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:620
#, no-wrap
msgid "Testing helpers"
msgstr "テストヘルパー"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:623
msgid "To start a MongoDB database for your unit tests, Quarkus provides two `QuarkusTestResourceLifecycleManager` that relies on link:https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo[Flapdoodle embedded MongoDB]."
msgstr "ユニットテスト用にMongoDBデータベースを起動するために、Quarkusは link:https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo[Flapdoodle embedded MongoDB]に依存する2つの `QuarkusTestResourceLifecycleManager` を提供しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:625
msgid "`io.quarkus.test.mongodb.MongoTestResource` will start a single instance on port 27017."
msgstr "`io.quarkus.test.mongodb.MongoTestResource` は、ポート27017に単一のインスタンスを起動します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:626
msgid "`io.quarkus.test.mongodb.MongoReplicaSetTestResource` will start a replicaset with two instances, one on port 27017 and the other on port 27018."
msgstr "`io.quarkus.test.mongodb.MongoReplicaSetTestResource` は、ポート27017とポート27018にある2つのインスタンスでレプリカセットを開始します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:628
msgid "To use them, you need to add the `io.quarkus:quarkus-test-mongodb` dependency to your pom.xml."
msgstr "これらを使用するには、 `io.quarkus:quarkus-test-mongodb` の依存関係を pom.xml に追加する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:630
msgid "For more information about the usage of a `QuarkusTestResourceLifecycleManager` please read xref:getting-started-testing.adoc#quarkus-test-resource[Quarkus test resource]."
msgstr "`QuarkusTestResourceLifecycleManager` の使い方については、 link:getting-started-testing.html#quarkus-test-resource[Quarkusのテストリソース]をご覧ください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:631
#, no-wrap
msgid "The legacy client"
msgstr "レガシークライアント"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:637
msgid "If you want to use the legacy API, you need to add the following dependency to your build file:"
msgstr "レガシーAPIを使用したい場合は、次の依存関係をビルドファイルに追加する必要があります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:653
#, no-wrap
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:656
msgid "You can use the MongoDB client in a native executable."
msgstr "MongoDBクライアントをネイティブ実行可能ファイルで使うことができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:658
msgid "If you want to use SSL/TLS encryption, you need to add these properties in your `application.properties`:"
msgstr "SSL/TLS 暗号化を使用したい場合は、これらのプロパティを `application.properties` に追加する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:666
msgid "You can then build a native executable with the usual command:"
msgstr "その後、通常のコマンドでネイティブ実行可能ファイルをビルドすることができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:670
msgid "Running it is as simple as executing `./target/mongodb-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "実行は `./target/mongodb-quickstart-1.0-SNAPSHOT-runner` を実行するだけで簡単です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:672
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開いてアプリケーションを使用します。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/mongodb.adoc:676
msgid "Currently, Quarkus doesn't support link:https://docs.mongodb.com/manual/core/security-client-side-encryption/[Client-Side Field Level Encryption] in native mode."
msgstr "現在、Quarkusはネイティブモードでの link:https://docs.mongodb.com/manual/core/security-client-side-encryption/[Client-Side Field Level Encryption]をサポートしていません。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:686
#, no-wrap
msgid "Using mongo+srv:// urls"
msgstr "mongo+srv://のURLの使用"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:695
msgid "To enable the alternative DNS resolver, use:"
msgstr "代替のDNSリゾルバを有効にするには"

#. type: Plain text
#: upstream/_versions/2.7/guides/mongodb.adoc:713
msgid "Also, you can configure the lookup timeout using:"
msgstr "また、ルックアップのタイムアウトは、以下の方法で設定できます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/mongodb.adoc:720
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"
