msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"With Quarkus you can deploy your favorite Java HTTP frameworks as Amazon Lambda's using either the https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html[AWS Gateway HTTP API]\n"
"or https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html[AWS Gateway REST API].  This means that you can deploy your microservices written with RESTEasy (JAX-RS),\n"
"Undertow (servlet), Reactive Routes, xref:funqy-http.adoc[Funqy HTTP] or any other Quarkus HTTP framework as an AWS Lambda."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"You can deploy your Lambda as a pure Java jar, or you can compile your project to a native image and deploy that for a smaller\n"
"memory footprint and startup time.  Our integration also generates SAM deployment files that can be consumed by https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[Amazon's SAM framework]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"Quarkus has a different extension for each Gateway API.  The HTTP Gateway API is implemented within the `quarkus-amazon-lambda-http` extension.\n"
"The REST Gateway API is implemented within the `quarkus-amazon-lambda-rest` extension.  If you are confused on which Gateway product to use,\n"
"Amazon has a https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html[great guide] to help you navigate this decision."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"This guide walks you through generating an example Java project via a Maven archetype.  Later on it walks through the structure\n"
"of the project so you can adapt any existing projects you have to use Amazon Lambda."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps\n"
"for installing AWS SAM CLI."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"This will compile the code and run the unit tests included within the generated project.\n"
"Unit testing is the same as any other Java project and does not require running on Amazon.  Quarkus dev mode is also\n"
"available with this extension."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"If you want to build a native executable, make sure you have GraalVM installed correctly and just add a `native` property\n"
"to the build"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"If you are building on a non-Linux system, you will need to also pass in a property instructing quarkus to use a Docker build as Amazon\n"
"Lambda requires Linux binaries.  You can do this by passing `-Dquarkus.native.container-build=true` to your build command.\n"
"This requires you to have Docker installed locally, however."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"After you run the build, there are a few extra files generated by the Quarkus lambda extension you are using.  These files\n"
"are in the the build directory:  `target/` for Maven, `build/` for Gradle."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"In dev and test mode, Quarkus will start a mock AWS Lambda event server\n"
"that will convert HTTP requests to the corresponding API Gateway event types and post them to the underlying\n"
"Quarkus HTTP lambda environment for processing.  This simulates the AWS Lambda environment\n"
"as much as possible locally without requiring tools like Docker and SAM CLI."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"When using Quarkus Dev Mode just invoke HTTP requests on `http://localhost:8080`\n"
"as you normally would when testing your REST endpoints.  This request will hit the Mock Event Server and will\n"
"be converted to the API Gateway json message that is consumed by the Quarkus Lambda Poll loop."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"For testing, Quarkus starts up a separate Mock Event server under port 8081.  The default port for Rest Assured is\n"
"automatically set to 8081 by Quarkus, so you don't have to worry about setting this up."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"If you want to simulate more complex\n"
"API Gateway events in your tests, then manually do an HTTP POST to `http://localhost:8080/\\_lambda_` (port 8081 in test mode) with\n"
"the raw API Gateway json events.  These events will be placed directly on the Quarkus Lambda poll loop\n"
"for processing.  Here's an example of that:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"If you want to hand code raw events for the AWS HTTP API, the AWS Lambda library has the request event type which is\n"
"`com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent` and the response event type\n"
"of `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPResponse`.  This corresponds\n"
"to the `quarkus-amazon-lambda-http` extension and the AWS HTTP API."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"If you want to hand code raw events for the AWS REST API, Quarkus has its own implementation:  `io.quarkus.amazon.lambda.http.model.AwsProxyRequest`\n"
"and `io.quarkus.amazon.lambda.http.model.AwsProxyResponse`.  This corresponds\n"
"to `quarkus-amazon-lambda-rest` extension and the AWS REST API."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"The mock event server is also started for `@NativeImageTest` unit tests so will work\n"
"with native binaries too.  All this provides similar functionality to the SAM CLI local testing, without the overhead of Docker."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"Finally, if port 8080 or port 8081 is not available on your computer, you can modify the dev\n"
"and test mode ports with application.properties"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"The AWS SAM CLI allows you to run your lambda's locally on your laptop in a simulated Lambda environment.  This requires Docker to be installed.\n"
"After you have built your Maven project, execute this command:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"This will start a Docker container that mimics Amazon's Lambda's deployment environment. Once the environment\n"
"is started you can invoke the example lambda in your browser by going to:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"In the console you'll see startup messages from the lambda.  This particular deployment starts a JVM and loads your\n"
"lambda as pure Java."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"Answer all the questions and your lambda will be deployed and the necessary hooks to the API Gateway will be set up. If\n"
"everything deploys successfully, the root URL of your microservice will be output to the console.  Something like this:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"Key                 LambdaHttpApi\n"
"Description         URL for application\n"
"Value               https://234asdf234as.execute-api.us-east-1.amazonaws.com/"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"Responses for binary types will be automatically encoded with base64.  This is different than the behavior using\n"
"`quarkus:dev` which will return the raw bytes.  Amazon's API has additional restrictions requiring the base64 encoding.\n"
"In general, client code will automatically handle this encoding but in certain custom situations, you should be aware\n"
"you may need to manually manage that encoding."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda-http` extension\n"
"(if you are deploying an AWS Gateway HTTP API) or the `quarkus-amazon-lambda-rest` extension (if you are deploy an AWS Gateway REST API).\n"
"These extensions automatically generate everything you might need for your lambda deployment."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"Also, at least in the generated Maven archetype `pom.xml`, the `quarkus-resteasy`, `quarkus-reactive-routes`, and `quarkus-undertow`\n"
"dependencies are all optional.  Pick which HTTP framework(s) you want to use (JAX-RS, Reactive Routes, and/or Servlet) and\n"
"remove the other dependencies to shrink your deployment."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"The `sam.yaml` syntax is beyond the scope of this document.  There's a couple of things that must be highlighted just in case you are\n"
"going to craft your own custom `sam.yaml` deployment files."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"The first thing to note is that for pure Java lambda deployments require a specific handler class.\n"
"Do not change the Lambda handler name."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"If you want to go native, there's an environment variable that must be set for native GraalVM deployments.  If you look at `sam.native.yaml`\n"
"you'll see this:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"Finally, there is one specific thing for AWS Gateway REST API deployments.\n"
"That API assumes that HTTP response bodies are text unless you explicitly tell it which media types are\n"
"binary through configuration.  To make things easier, the Quarkus extension forces a binary (base 64) encoding of all\n"
"HTTP response messages and the `sam.yaml` file must configure the API Gateway to assume all media types are binary:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"If you are using RESTEasy and JAX-RS, you can inject various AWS Context variables into your JAX-RS resource classes\n"
"using the JAX-RS `@Context` annotation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"For the AWS HTTP API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and\n"
"`com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent`.  Here is an example:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"For the AWS REST API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and\n"
"`io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext`.  Here is an example:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda\n"
"you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray\n"
"library is not fully compatible with GraalVM so we had to do some integration work to make this work."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"When you invoke an HTTP request on the API Gateway, the Gateway turns that HTTP request into a JSON event document that is\n"
"forwarded to a Quarkus Lambda.  The Quarkus Lambda parses this json and converts in into an internal representation of an HTTP\n"
"request that can be consumed by any HTTP framework Quarkus supports (JAX-RS, servlet, Reactive Routes)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"API Gateway supports many different ways to securely invoke on your HTTP endpoints that are backed by Lambda and Quarkus.\n"
"If you enable it, Quarkus will automatically parse relevant parts of the https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html[event json document]\n"
"and look for security based metadata and register a `java.security.Principal` internally that can be looked up in JAX-RS\n"
"by injecting a `javax.ws.rs.core.SecurityContext`, via `HttpServletRequest.getUserPrincipal()` in servlet, and `RouteContext.user()` in Reactive Routes.\n"
"If you want more security information, the `Principal` object can be typecast to\n"
"a class that will give you more information."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid "quarkus.lambda-http.enable-security=true"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"The default support for AWS security only maps the principal name to Quarkus security\n"
"APIs and does nothing to map claims or roles or permissions.  You have can full control\n"
"how security metadata in the lambda HTTP event is mapped to Quarkus security APIs using\n"
"implementations of the `io.quarkus.amazon.lambda.http.LambdaIdentityProvider`\n"
"interface.  By implementing this interface, you can do things like define role mappings for your principal\n"
"or publish additional attributes provided by IAM or Cognito or your Custom Lambda security integration."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"For HTTP, the important method to override is `LambdaIdentityProvider.authenticate(APIGatewayV2HTTPEvent event)`.  From this\n"
"you will allocate a SecurityIdentity based on how you want to map security data from `APIGatewayV2HTTPEvent`"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"For REST, the important method to override is `LambdaIdentityProvider.authenticate(AwsProxyRequest event)`.  From this\n"
"you will allocate a SecurityIdentity based on how you want to map security data from `AwsProxyRequest`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"Quarkus should automatically discover this implementation and use it instead of the default implementation\n"
"discussed earlier."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda-http.adoc
msgid ""
"If you are testing your application with `sam local` you can\n"
"hardcode a principal name to use when your application runs by setting\n"
"the `QUARKUS_AWS_LAMBDA_FORCE_USER_NAME` environment variable"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:6
#, fuzzy, no-wrap
msgid "Amazon Lambda with RESTEasy, Undertow, or Reactive Routes"
msgstr "RESTEasy、undertow、またはReactive Routesを使用したAmazon Lambda。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:24
msgid "Like most Quarkus extensions, the Quarkus AWS Lambda HTTP/REST extensions support Live Coding."
msgstr "Quarkus AWS Lambda HTTP/REST エクステンションは、大概の Quarkus エクステンションと同様、ライブコーディングをサポートしています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:27
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:32
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr "https://aws.amazon.com[An Amazon AWS account]"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:33
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"
msgstr "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:34
#, no-wrap
msgid "Getting Started"
msgstr "はじめに"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:39
#, no-wrap
msgid "Installing AWS bits"
msgstr "AWS ビットのインストール"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:44
#, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr "デプロイ用のMavenプロジェクトを作成する"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:47
msgid "Create the Quarkus AWS Lambda Maven project using our Maven Archetype."
msgstr "Maven Archetype を使用して Quarkus AWS Lambda Maven プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:49
msgid "If you want to use the AWS Gateway HTTP API, generate your project with this script:"
msgstr "AWS Gateway HTTP APIを使用する場合は、このスクリプトでプロジェクトを生成します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:58
msgid "If you want to use the AWS Gateway REST API, generate your project with this script:"
msgstr "AWS Gateway REST APIを使用する場合は、このスクリプトでプロジェクトを生成します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:67
#, no-wrap
msgid "Build and Deploy"
msgstr "ビルドとデプロイ"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:70
msgid "Build the project:"
msgstr "プロジェクトをビルドします。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:88
#, no-wrap
msgid "Extra Build Generated Files"
msgstr "ビルド時に追加生成されるファイル"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:94
msgid "`function.zip` - lambda deployment file"
msgstr "`function.zip` - Lambda デプロイファイル"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:95
msgid "`sam.jvm.yaml` - sam cli deployment script"
msgstr "`sam.jvm.yaml` - SAM CLI デプロイメントスクリプト"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:96
msgid "`sam.native.yaml` - sam cli deployment script for native"
msgstr "`sam.native.yaml` - ネイティブ用の SAM CLI デプロイメントスクリプト"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:97
#, no-wrap
msgid "Live Coding and Simulating AWS Lambda Environment Locally"
msgstr "AWS Lambda 環境のローカルでのライブコーディングとシミュレーション"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:148
msgid "The above example simulates sending a Cognito principal with an HTTP request to your HTTP Lambda."
msgstr "上記の例は、HTTP リクエストを含む Cognito プリンシパルを HTTP Lambda に送信することをシミュレートしています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:172
#, no-wrap
msgid "Simulate Amazon Lambda Deployment with SAM CLI"
msgstr "SAM CLI を使用して Amazon Lambda のデプロイをシミュレートする"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:186
msgid "http://127.0.0.1:3000/hello"
msgstr "http://127.0.0.1:3000/hello"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:191
#, no-wrap
msgid "Deploy to AWS"
msgstr "AWS にデプロイする"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:208
msgid "The `Value` attribute is the root URL for your lambda. Copy it to your browser and add `hello` at the end."
msgstr "`Value` 属性は Lambda のルート URL です。これをブラウザにコピーして、最後に `hello` を追加します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:215
#, no-wrap
msgid "Deploying a native executable"
msgstr "ネイティブ実行可能ファイルのデプロイ"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:218
msgid "To deploy a native executable, you must build it with GraalVM."
msgstr "ネイティブ実行可能ファイルをデプロイするには、GraalVM を使用してビルドする必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:222
msgid "You can then test the executable locally with sam local"
msgstr "その後、ローカルで sam local を使って実行可能ファイルをテストすることができます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:229
msgid "To deploy to AWS Lambda:"
msgstr "AWS Lambda へのデプロイ"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:234
#, no-wrap
msgid "Examine the POM"
msgstr "POM を検証する"

#. type: Title ===
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:244
#, no-wrap
msgid "Examine sam.yaml"
msgstr "sam.yaml を調べる"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:260
msgid "This handler is a bridge between the lambda runtime and the Quarkus HTTP framework you are using (JAX-RS, Servlet, etc.)"
msgstr "このハンドラは、ラムダランタイムと、使用しているQuarkus HTTPフレームワーク（JAX-RS、Servletなど）との間のブリッジとなります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:272
msgid "This environment variable resolves some incompatibilities between Quarkus and the Amazon Lambda Custom Runtime environment."
msgstr "この環境変数は、QuarkusとAmazon Lambdaカスタムランタイム環境との間のいくつかの非互換性を解決します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:287
#, no-wrap
msgid "Injectable AWS Context Variables"
msgstr "注入可能なAWSコンテキスト変数"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:340
#, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr "AWS XRay と GraalVM を使用したトレース"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:346
#, no-wrap
msgid "Security Integration"
msgstr "セキュリティー統合"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:360
msgid "To enable this security feature, add this to your `application.properties` file:"
msgstr "このセキュリティー機能を有効にするには、これを `application.properties` ファイルに追加します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:366
msgid "Here's how its mapped:"
msgstr "マッピング方法は次のとおりです。"

#. type: Block title
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:367
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:396
#, no-wrap
msgid "HTTP `quarkus-amazon-lambda-http`"
msgstr "HTTP `quarkus-amazon-lambda-http`"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:370
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:380
#, no-wrap
msgid "Auth Type"
msgstr "認証タイプ"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:370
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:380
#, no-wrap
msgid "Principal Class"
msgstr "プリンシパルクラス"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:371
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:381
#, no-wrap
msgid "Json path of Principal Name"
msgstr "プリンシパル名の Json パス"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:371
#, no-wrap
msgid "Cognito JWT"
msgstr "Cognito JWT"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:371
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:381
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.CognitoPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.CognitoPrincipal`"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:372
#, no-wrap
msgid "`requestContext.authorizer.jwt.claims.cognito:username`"
msgstr "`requestContext.authorizer.jwt.claims.cognito:username`"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:372
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:382
#, no-wrap
msgid "IAM"
msgstr "IAM"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:372
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:382
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.IAMPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.IAMPrincipal`"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:373
#, no-wrap
msgid "`requestContext.authorizer.iam.userId`"
msgstr "`requestContext.authorizer.iam.userId`"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:373
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:383
#, no-wrap
msgid "Custom Lambda"
msgstr "カスタム Lambda"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:373
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:383
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.CustomPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.CustomPrincipal`"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:375
#, no-wrap
msgid "`requestContext.authorizer.lambda.principalId`"
msgstr "`requestContext.authorizer.lambda.principalId`"

#. type: Block title
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:377
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:437
#, no-wrap
msgid "REST `quarkus-amazon-lambda-rest`"
msgstr "REST `quarkus-amazon-lambda-rest`"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:381
#, no-wrap
msgid "Cognito"
msgstr "Cognito"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:382
#, no-wrap
msgid "`requestContext.authorizer.claims.cognito:username`"
msgstr "`requestContext.authorizer.claims.cognito:username`"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:383
#, no-wrap
msgid "`requestContext.identity.user`"
msgstr "`requestContext.identity.user`"

#. type: Table
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:385
#, no-wrap
msgid "`requestContext.authorizer.principalId`"
msgstr "`requestContext.authorizer.principalId`"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:387
#, no-wrap
msgid "Custom Security Integration"
msgstr "カスタムセキュリティーの統合"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:476
msgid "Your implemented provider must be a CDI bean.  Here's an example:"
msgstr "実装するプロバイダーは CDI Bean である必要があります。次に例を示します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:507
msgid "Here's the same example, but with the AWS Gateway REST API:"
msgstr "次も同じ例ですが、AWS Gateway REST API を使用しています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda-http.adoc:540
#, no-wrap
msgid "Simple SAM Local Principal"
msgstr "単純な SAM ローカルプリンシパル"
