msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/tests-with-coverage.adoc
msgid ""
"The application built in this guide is just a JAX-RS endpoint (hello world) that relies on dependency injection to use a service.\n"
"The service will be tested with JUnit 5 and the endpoint will be annotated via a `@QuarkusTest` annotation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/tests-with-coverage.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step. However, you can go right to the completed example.\n"
"Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/tests-with-coverage.adoc
msgid ""
"This Quarkus extension takes care of everything that would usually be done via the Jacoco Maven plugin, so no additional\n"
"config is required."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/tests-with-coverage.adoc
msgid ""
"Using both the extension and the plugin requires special configuration, if you add both you will get lots of errors about classes\n"
"already being instrumented. The configuration needed is detailed below."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/tests-with-coverage.adoc
msgid ""
"Run `mvn verify`, the tests will be run and the results will end up in `target/jacoco-reports`. This is all that is needed,\n"
"the `quarkus-jacoco` extension allows Jacoco to just work out of the box."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/tests-with-coverage.adoc
msgid ""
"The Quarkus automatic Jacoco config will only work for tests that are annotated with `@QuarkusTest`. If you want to check\n"
"the coverage of other tests as well then you will need to fall back to the Jacoco maven plugin."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/tests-with-coverage.adoc
msgid ""
"This config will only work if at least one `@QuarkusTest` is being run. If you are not using `@QuarkusTest` then\n"
"you can simply use the Jacoco plugin in the standard manner with no additional config."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/tests-with-coverage.adoc
msgid ""
"In the `pom.xml`, you can add the following plugin configuration for Jacoco. This will append integration test data into the same destination file as unit tests,\n"
"re-build the Jacoco report after the integration tests are complete, and thus produce a comprehensive code-coverage report."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/tests-with-coverage.adoc
msgid ""
"You can set thresholds for code coverage using the Jacoco Maven plugin. Note the element `<dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>`.\n"
"You must set it matching your choice for `quarkus.jacoco.data-file`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/tests-with-coverage.adoc
msgid ""
"You now have all the information you need to study the coverage of your tests!\n"
"But remember, some code that is not covered is certainly not well tested. But some code that is covered is not necessarily *well* tested. Make sure to write good tests!"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:7
#, no-wrap
msgid "Measuring the coverage of your tests"
msgstr "テストカバレッジの測定"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:23
msgid "Learn how to measure the test coverage of your application. This guide covers:"
msgstr "アプリケーションのテストカバレッジを測定する方法をご紹介します。このガイドでは、以下の内容をカバーしています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:25
msgid "Measuring the coverage of your Unit Tests"
msgstr "ユニットテストのカバレッジを測定する"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:26
msgid "Measuring the coverage of your Integration Tests"
msgstr "統合テストのカバレッジを測定する"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:27
msgid "Separating the execution of your Unit Tests and Integration Tests"
msgstr "ユニットテストと統合テストの実行を分離する"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:28
msgid "Consolidating the coverage for all your tests"
msgstr "すべてのテストのカバレッジを統合"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:30
msgid "Please note that code coverage is not supported in native mode."
msgstr "ネイティブモードではコードカバレッジはサポートされていませんのでご注意ください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:31
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:35
msgid "Having completed the xref:getting-started-testing.adoc[Testing your application guide]"
msgstr "link:https://quarkus.io/guides/getting-started-testing[アプリケーションのテストガイド] が完了済であること"

#. type: Title ==
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:36
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Title ==
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:41
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:47
msgid "The solution is located in the `tests-with-coverage-quickstart` {quickstarts-tree-url}/tests-with-coverage-quickstart[directory]."
msgstr "ソリューションは `tests-with-coverage-quickstart` {quickstarts-tree-url}/tests-with-coverage-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:48
#, no-wrap
msgid "Starting from a simple project and two tests"
msgstr "簡単なプロジェクトと2つのテストから始める"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:51
msgid "Let's start from an empty application created with the Quarkus Maven plugin:"
msgstr "Quarkus Mavenプラグインで作成した空のアプリケーションから始めてみましょう。"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:57
msgid "Now we'll be adding all the elements necessary to have an application that is properly covered with tests."
msgstr "ここで、アプリケーションをテストで適切にカバーするために必要な要素をすべて追加していきます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:59
msgid "First, a JAX-RS resource serving a hello endpoint:"
msgstr "まず、helloエンドポイントを提供するアプリケーション:"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:97
msgid "This endpoint uses a greeting service:"
msgstr "このエンドポイントは、グリーティングサービスを利用しています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:115
msgid "The project will also need a test:"
msgstr "プロジェクトにはテストも必要です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:154
#, fuzzy, no-wrap
msgid "Setting up Jacoco"
msgstr "ジャココのセットアップ"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:157
#, fuzzy
msgid "Now we need to add Jacoco to our project. To do this we need to add the following to the build file:"
msgstr "次に、Jacocoをプロジェクトに追加する必要があります。これを行うには、ビルドファイルに以下を追加する必要があります:"

#. type: Block title
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:159
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:197
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:360
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:169
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:242
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:410
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:180
#, no-wrap
msgid "Running the tests with coverage"
msgstr "カバレッジ付きテストの実行"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:186
msgid "There are some config options that affect this:"
msgstr "これにはいくつかの設定オプションがあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:189
#, no-wrap
msgid "Coverage for tests not using @QuarkusTest"
msgstr "QuarkusTestを使用していないテストのカバレッジ"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:195
msgid "In addition to including the `quarkus-jacoco` extension in your pom you will need the following config:"
msgstr "`quarkus-jacoco` エクステンションをpomに含めるのに加えて、以下のような設定が必要になります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:238
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:261
msgid "This config tells it to ignore `@QuarkusTest` related classes, as they are loaded by `QuarkusClassLoader`"
msgstr "この設定では、 `@QuarkusTest` 関連のクラスを無視するようになっています。これらのクラスは `QuarkusClassLoader` で読み込まれる為です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:239
msgid "This is only needed if you are using Failsafe to run integration tests"
msgstr "これは、Failsafeを使って統合テストを実行する場合にのみ必要です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:260
msgid "Add the `jacoco` gradle plugin"
msgstr "`jacoco` gradleプラグインの追加"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:262
msgid "Set this config to `false` if you are also using the `quarkus-jacoco` extension and have at least one `@QuarkusTest`.  The default `jacocoTestReport` task can be skipped since `quarkus-jacoco` will generate the combined report of regular unit tests and `@QuarkusTest` classes since the execution data is recorded in the same file."
msgstr "`quarkus-jacoco` エクステンションも使用していて、少なくとも 1 つの `@QuarkusTest` がある場合は、このコンフィグを `false` に設定します。デフォルトの `jacocoTestReport` タスクは省略できます。なぜなら `quarkus-jacoco` は通常のユニットテストと `@QuarkusTest` クラスの実行データが同じファイルに記録されているため、それらを組み合わせたレポートを生成するからです。"

#. type: Title ===
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:267
#, no-wrap
msgid "Coverage for Integration Tests"
msgstr "結合テストのカバレッジ"

#. type: delimited block *
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:270
#, fuzzy
msgid "To get code coverage data from integration tests, the following need to be requirements need to be met:"
msgstr "統合テストからコードカバレッジデータを取得するためには、以下のような要件を満たす必要があります:"

#. type: delimited block *
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:272
msgid "The built artifact is a jar (and not a container or native binary)."
msgstr "ビルドされたアーティファクトがjarであること（コンテナやネイティブバイナリではないこと）。"

#. type: delimited block *
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:273
#, fuzzy
msgid "Jacoco needs to be configured in your build tool."
msgstr "Jacocoは、ビルドツールで設定する必要があります。"

#. type: delimited block *
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:274
msgid "The application must have been built with `quarkus.package.write-transformed-bytecode-to-build-output` set to `true`"
msgstr "アプリケーションは、 `quarkus.package.write-transformed-bytecode-to-build-output` が `true` に設定してビルドされていること"

#. type: delimited block *
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:276
#, fuzzy
msgid "Setting `quarkus.package.write-transformed-bytecode-to-build-output=true` should be done with a caution and only if subsequent builds are done in a clean environment - i.e. the build tool's output directory has been completely cleaned."
msgstr "`quarkus.package.write-transformed-bytecode-to-build-output=true` の設定は慎重に行い、その後のビルドがクリーンな環境で行われる場合、つまりビルドツールの出力ディレクトリが完全にクリーンになっている場合にのみ行う必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:320
msgid "In order to run the integration tests as a jar with the Jacoco agent, add the following to your `pom.xml`."
msgstr "結合テストをjarとしてJacocoエージェントと共に実行するためには、 `pom.xml` に以下を追加します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:353
msgid "Sharing the same value for `quarkus.test.arg-line` might break integration test runs that test different types of Quarkus artifacts. In such cases, the use of maven profiles is advised."
msgstr "`quarkus.test.arg-line` で同じ値を共有すると、異なるタイプのQuarkusアーティファクトをテストする結合テストが壊れる可能性があります。このような場合には、mavenプロファイルの使用をお勧めします。"

#. type: Title ==
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:354
#, no-wrap
msgid "Setting coverage thresholds"
msgstr "カバレッジの閾値を設定"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:435
msgid "Excluding classes from the verification task can be configured as following:"
msgstr "検証タスクからクラスを除外するには、以下のように設定します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:449
msgid "`classDirectories` needs to be read after evaluation phase in Gradle"
msgstr "`classDirectories` は、Gradle の評価フェーズの後に読み込まれる必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:450
msgid "Currently, there is a bug in Gradle JaCoCo which requires the `excludes` to be specified in this manner - https://github.com/gradle/gradle/issues/14760.  Once this issue is fixed, excludes"
msgstr "現在、Gradle JaCoCoには、 `excludes` をこのように指定しなければならないというバグがあります https://github.com/gradle/gradle/issues/14760 。この問題が修正されれば、excludes"

#. type: Plain text
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:451
msgid "Exclude all classes in `org/example/package` package"
msgstr "`org/example/package` パッケージのすべてのクラスを除外します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/tests-with-coverage.adoc:453
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"
