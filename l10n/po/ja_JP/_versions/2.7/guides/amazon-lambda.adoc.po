msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"The `quarkus-amazon-lambda` extension allows you to use Quarkus to build your AWS Lambdas.\n"
"Your lambdas can use injection annotations from CDI or Spring and other Quarkus facilities as you need them."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"Quarkus lambdas can be deployed using the Amazon Java Runtime, or you can build a native executable and use\n"
"Amazon's Custom Runtime if you want a smaller memory footprint and faster cold boot startup time."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"Quarkus's integration with lambdas also supports Quarkus's Live Coding development cycle.  You an\n"
"bring up your Quarkus lambda project in dev or test mode and code on your project live."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps\n"
"for installing AWS CLI."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"If you prefer to use Gradle, you can quickly and easily generate a Gradle project via https://code.quarkus.io/[code.quarkus.io]\n"
"adding the `quarkus-amazon-lambda` extension as a dependency."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"The `quarkus-amazon-lambda` extension scans your project for a class that directly implements the Amazon `RequestHandler<?, ?>` or `RequestStreamHandler` interface.\n"
"It must find a class in your project that implements this interface or it will throw a build time failure.\n"
"If it finds more than one handler class, a build time exception will also be thrown."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"Sometimes, though, you might have a few related lambdas that share code and creating multiple maven modules is just\n"
"an overhead you don't want to do.  The `quarkus-amazon-lambda` extension allows you to bundle multiple lambdas in one\n"
"project and use configuration or an environment variable to pick the handler you want to deploy."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"The generated project has three lambdas within it.  Two that implement the `RequestHandler<?, ?>` interface, and one that implements the `RequestStreamHandler` interface. One that is used and two that are unused.  If you open up\n"
"`src/main/resources/application.properties` you'll see this:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"The `quarkus.lambda.handler` property tells Quarkus which lambda handler to deploy. This can be overridden\n"
"with an environment variable too."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"There are a few steps to get your lambda running on AWS.  The generated maven project contains a helpful script to\n"
"create, update, delete, and invoke your lambdas for pure Java and native deployments."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"View the https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] for deploying\n"
"a lambda with AWS CLI.  Specifically, make sure you have created an `Execution Role`.  You will need to define\n"
"a `LAMBDA_ROLE_ARN` environment variable in your profile or console window,  Alternatively, you can edit\n"
"the `manage.sh` script that is generated by the build and put the role value directly there:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"After you run the build, there are a few extra files generated by the `quarkus-amazon-lambda` extension.  These files\n"
"are in the the build directory:  `target/` for maven, `build/` for gradle."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"The `target/manage.sh` script is for managing your lambda using the AWS Lambda Java runtime.  This script is provided only for\n"
"your convenience. Examine the output of the `manage.sh` script if you want to learn what aws commands are executed\n"
"to create, delete, and update your lambdas."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid "`manage.sh` supports four operation:  `create`, `delete`, `update`, and `invoke`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"To verify your setup, that you have the AWS CLI installed, executed aws configure for the AWS access keys,\n"
"and setup the `LAMBDA_ROLE_ARN` environment variable (as described above), please execute `manage.sh` without any parameters.\n"
"A usage statement will be printed to guide you accordingly."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"Do not change the handler switch.  This must be hardcoded to `io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest`.  This\n"
"handler bootstraps Quarkus and wraps your actual handler so that injection can be performed."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"If there are any problems creating the function, you must delete it with the `delete` function before re-running\n"
"the `create` command."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"The example lambda takes input passed in via the `--payload` switch which points to a json file\n"
"in the root directory of the project."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"You can update the Java code as you see fit.  Once you've rebuilt, you can redeploy your lambda by executing the\n"
"`update` command."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"If you want a lower memory footprint and faster initialization times for your lambda, you can compile your Java\n"
"code to a native executable.  Just make sure to rebuild your project with the `-Pnative` switch."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"If you are building on a non-Linux system, you will need to also pass in a property instructing Quarkus to use a docker build as Amazon\n"
"Lambda requires linux binaries.  You can do this by passing this property to your build:\n"
"`-Dquarkus.native.container-build=true`. This requires you to have Docker installed locally, however."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"Either of these commands will compile and create a native executable image.  It also generates a zip file `target/function.zip`.\n"
"This zip file contains your native executable image renamed to `bootstrap`.  This is a requirement of the AWS Lambda\n"
"Custom (Provided) Runtime."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"The instructions here are exactly as above with one change:  you'll need to add `native` as the first parameter to the\n"
"`manage.sh` script:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"As above, commands can be stacked.  The only requirement is that `native` be the first parameter should you wish\n"
"to work with native image builds.  The script will take care of the rest of the details necessary to manage your native\n"
"image function deployments."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"Examine the output of the `manage.sh` script if you want to learn what aws commands are executed\n"
"to create, delete, and update your lambdas."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"One thing to note about the create command for native is that the `aws lambda create-function`\n"
"call must set a specific environment variable:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda` extension\n"
"as a dependency.  The extension automatically generates everything you might need for your lambda deployment."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"In previous versions of this extension you had to set up your pom or gradle\n"
"to zip up your executable for native deployments, but this is not the case anymore."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"Similarly for Gradle projects, you also just have to add the `quarkus-amazon-lambda` dependency.  The extension automatically generates everything you might need\n"
"for your lambda deployment."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"To mirror the AWS Lambda environment as closely as possible in a dev environment,\n"
"the Quarkus Amazon Lambda extension boots up a mock AWS Lambda event server in Quarkus Dev and Test mode.\n"
"This mock event server simulates a true AWS Lambda environment."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"While running in Quarkus Dev Mode, you can feed events to it by doing an HTTP POST to `http://localhost:8080`.\n"
"The mock event server will receive the events and your lambda will be invoked.  You can perform live coding on your lambda\n"
"and changes will automatically be recompiled and available the next invocation you make.  Here's an example:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"For your unit tests, you can also invoke on the mock event server using any HTTP client you want.  Here's an example\n"
"using rest-assured.  Quarkus starts up a separate Mock Event server under port 8081.\n"
"The default port for Rest Assured is automatically set to 8081 by Quarkus so you can invoke\n"
"on this endpoint."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"The mock event server is also started for `@NativeImageTest` unit tests so will work\n"
"with native binaries too.  All this provides similar functionality to the SAM CLI local testing, without the overhead of Docker."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"Finally, if port 8080 or port 8081 is not available on your computer, you can modify the dev\n"
"and test mode ports with application.properties"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"The https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]\n"
"allows you to run your lambdas locally on your laptop in a simulated Lambda environment.  This requires\n"
"https://www.docker.com/products/docker-desktop[docker] to be installed.  This is an optional approach should you choose\n"
"to take advantage of it.  Otherwise, the Quarkus JUnit integration should be sufficient for most of your needs."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"Run the following SAM CLI command to locally test your lambda function, passing the appropriate SAM `template`.\n"
"The `event` parameter takes any JSON file, in this case the sample `payload.json`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"The are times where you may have to add some additions to the `function.zip` lambda deployment that is generated\n"
"by the build.  To do this create a `zip.jvm` or `zip.native` directory within `src/main`.\n"
"Create `zip.jvm/` if you are doing a pure Java lambda.  `zip.native/` if you are doing a native deployment."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"There are times you may want to set a specific system properties or other arguments when lambda invokes\n"
"your native quarkus lambda deployment.  If you include a `bootstrap` script file within\n"
"`zip.native`, the quarkus extension will automatically rename the executable to `runner` within\n"
"`function.zip` and set the unix mode of the `bootstrap` script to executable."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda\n"
"you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray\n"
"library is not fully compatible with GraalVM so we had to do some integration work to make this work."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"AWS X-Ray does add many classes to your distribution, do ensure you are using at least the 256MB AWS Lambda memory size.\n"
"This is explicitly set in `manage.sh` `cmd_create()`. Whilst the native image potentially can always use a lower memory setting, it would be recommended to keep the setting the same, especially to help compare performance."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"If your code makes HTTPS calls, such as to a micro-service (or AWS service), you will need to add configuration to the native image,\n"
"as GraalVM will only include the dependencies when explicitly declared.  Quarkus, by default enables this functionality on extensions that implicitly require it.\n"
"For further information, please consult the xref:native-and-ssl.adoc[Quarkus SSL guide]"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"Quarkus now has extensions for DynamoDB, S3, SNS and SQS (more coming).\n"
"Please check link:{amazon-services-guide}[those guides] on how to use the various AWS Services with Quarkus, as opposed to wiring manually like below."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"With minimal integration, it is possible to leverage the AWS Java SDK v2,\n"
"which can be used to invoke services such as SQS, SNS, S3 and DynamoDB."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"For native image, however the URL Connection client must be preferred over the Apache HTTP Client\n"
"when using synchronous mode, due to issues in the GraalVM compilation (at present)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"You must also force your AWS service client for SQS, SNS, S3 et al, to use the URL Connection client,\n"
"which connects to AWS services over HTTPS, hence the inclusion of the SSL enabled property, as described in the <<https>> section above."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"if you see `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty` or similar SSL error, due to the current status of GraalVM,\n"
"there is some additional work to bundle the `function.zip`, as below.  For more information, please see the xref:native-and-ssl.adoc[Quarkus Native SSL Guide]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.7/guides/amazon-lambda.adoc
msgid ""
"To do this, first create a directory `src/main/zip.native/` with your build.  Next create a shell script file called `bootstrap`\n"
"within `src/main/zip.native/`, like below. An example is create automatically in your build folder (target or build), called `bootstrap-example.sh`"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:6
#, no-wrap
msgid "Amazon Lambda"
msgstr "Amazon Lambda"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:24
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr "https://aws.amazon.com[An Amazon AWS account]"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:25
msgid "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"
msgstr "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:26
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], for local testing"
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] 、ローカルテスト用"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:28
msgid "For Gradle projects please <<gradle,see below>>, or for further reference consult the guide in the xref:gradle-tooling.adoc[Gradle setup page]."
msgstr "Gradle プロジェクトの場合は <<gradle,下記を参照>> してください。詳細については、xref:gradle-tooling.adoc[Gradle setup page] セットアップページのガイドを参照してください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:29
#, no-wrap
msgid "Getting Started"
msgstr "はじめに"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:32
msgid "This guide walks you through generating an example Java project via a maven archetype and deploying it to AWS."
msgstr "このガイドでは、mavenのArchetypeを使用してJavaプロジェクトのサンプルを生成し、AWSにデプロイする方法を説明します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:33
#, no-wrap
msgid "Installing AWS bits"
msgstr "AWS ビットのインストール"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:38
#, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr "デプロイ用のMavenプロジェクトを作成する"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:41
msgid "Create the Quarkus AWS Lambda maven project using our Maven Archetype."
msgstr "Maven Archetypeを使用してQuarkus AWS Lambda mavenプロジェクトを作成します。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:57
msgid "Copy the build.gradle, gradle.properties and settings.gradle into the above generated Maven archetype project, to follow along with this guide."
msgstr "build.gradle、gradle.properties、settings.gradleを上記の生成されたMavenのアーキタイププロジェクトにコピーして、このガイドに従ってください。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:59
msgid "Execute: gradle wrapper to setup the gradle wrapper (recommended)."
msgstr "Execute: gradle wrapper を実行して gradle wrapper を設定します(推奨)。"

#. type: delimited block =
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:61
msgid "For full Gradle details <<gradle, see below>>."
msgstr "Gradleの詳細は link:#gradle[こちらを参照してください] 。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:64
#, no-wrap
msgid "Choose Your Lambda"
msgstr "使用する Lambda の選択"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:86
msgid "If you look at the three generated handler classes in the project, you'll see that they are `@Named` differently."
msgstr "プロジェクト内で生成された3つのハンドラークラスを見てみると、異なる `@Named` が指定されていることがわかります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:103
msgid "The CDI name of the handler class must match the value specified within the `quarkus.lambda.handler` property."
msgstr "ハンドラークラスのCDI名は、 `quarkus.lambda.handler` プロパティー内で指定された値と一致しなければなりません。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:105
#, no-wrap
msgid "Deploy to AWS Lambda Java Runtime"
msgstr "AWS Lambda Java Runtime へのデプロイ"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:110
#, no-wrap
msgid "Build and Deploy"
msgstr "ビルドとデプロイ"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:113
msgid "Build the project:"
msgstr "プロジェクトをビルドします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:117
msgid "This will compile and package your code."
msgstr "これでコードがコンパイルされ、パッケージ化されます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:118
#, no-wrap
msgid "Create an Execution Role"
msgstr "実行ロールの作成"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:130
#, no-wrap
msgid "Extra Build Generated Files"
msgstr "ビルド時に追加生成されるファイル"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:136
msgid "`function.zip` - lambda deployment file"
msgstr "`function.zip` - Lambda デプロイファイル"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:137
msgid "`manage.sh` - wrapper around aws lambda cli calls"
msgstr "`manage.sh` - aws Lambda CLI の呼び出しのラッパー"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:138
msgid "`bootstrap-example.sh` - example bootstrap script for native deployments"
msgstr "`bootstrap-example.sh` - ネイティブデプロイメント用のブートストラップスクリプトの例"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:139
msgid "`sam.jvm.yaml` - (optional) for use with sam cli and local testing"
msgstr "`sam.jvm.yaml` - (オプション) SAM CLI やローカル・テスト用"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:140
msgid "`sam.native.yaml` - (optional) for use with sam cli and native local testing"
msgstr "`sam.native.yaml` - (オプション) SAM CLI やネイティブ・ローカル・テスト用(オプション)"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:141
#, no-wrap
msgid "Create the function"
msgstr "関数を作成する"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:154
msgid "If using Gradle, the path to the binaries in the `manage.sh` must be changed from `target` to `build`"
msgstr "Gradleを使用している場合、 `manage.sh` のバイナリーへのパスを `target` から `build` に変更しなければなりません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:156
msgid "To see the `usage` statement, and validate AWS configuration:"
msgstr "`usage` を参照したり、AWS の設定を検証するためには次のようにします。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:162
msgid "You can `create` your function using the following command:"
msgstr "次のコマンドを使って、 Function を `create` します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:169
msgid "or if you do not have `LAMBDA_ROLE_ARN` already defined in this shell:"
msgstr "または、このシェルで既に `LAMBDA_ROLE_ARN` が定義されていない場合にはこうです。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:187
msgid "Commands may also be stacked:"
msgstr "コマンドはスタックすることもできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:192
#, no-wrap
msgid "Invoke the Lambda"
msgstr "Lambda の呼び出し"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:195
msgid "Use the `invoke` command to invoke your function."
msgstr "Function を呼び出すには `invoke` コマンドを使用します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:205
msgid "The lambda can also be invoked locally with the SAM CLI like this:"
msgstr "Lambda は、以下のようにSAM CLI によってローカルで呼び出すこともできます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:212
msgid "If you are working with your native image build, simply replace the template name with the native version:"
msgstr "ネイティブイメージのビルドで作業している場合は、テンプレート名をネイティブバージョンに置き換えてください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:218
#, no-wrap
msgid "Update the Lambda"
msgstr "Lambda の更新"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:228
#, no-wrap
msgid "Deploy to AWS Lambda Custom (native) Runtime"
msgstr "AWS Lambda カスタム (ネイティブ) ランタイムへのデプロイ"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:234
msgid "For Linux hosts, execute:"
msgstr "Linux ホストの場合は以下を実行します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:270
#, no-wrap
msgid "Examine the POM and Gradle build"
msgstr "POM と Gradle のビルドの検証"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:279
#, no-wrap
msgid "Gradle build"
msgstr "Gradle ビルド"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:285
msgid "Example Gradle dependencies:"
msgstr "Gradleの依存関係の例。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:299
#, no-wrap
msgid "Live Coding and Unit/Integration Testing"
msgstr "ライブコーディングおよび単体/統合テスト"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:362
#, no-wrap
msgid "Testing with the SAM CLI"
msgstr "SAM CLI を使用したテスト"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:364
msgid "If you do not want to use the mock event server, you can test your lambdas with SAM CLI."
msgstr "模擬イベントサーバーを使用しない場合は、SAM CLI を使用して Lambda をテストできます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:371
msgid "A starter template has been generated for both JVM and native execution modes."
msgstr "JVMとネイティブ実行モードの両方に対応したスターターテンプレートが生成されています。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:376
msgid "If using Gradle, the path to the binaries in the YAML templates must be changed from `target` to `build`"
msgstr "Gradle を使用している場合、YAML テンプレートのバイナリーへのパスを `target` から `build` に変更しなければなりません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:383
msgid "The native image can also be locally tested using the `sam.native.yaml` template:"
msgstr "ネイティブイメージは、 `sam.native.yaml` テンプレートを使ってローカルでテストすることもできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:389
#, no-wrap
msgid "Modifying `function.zip`"
msgstr "`function.zip` の修正"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:396
msgid "Any you files and directories you create under your zip directory will be included within `function.zip`"
msgstr "zipディレクトリーの下に作成したファイルやディレクトリーは、すべて `function.zip` に含まれます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:397
#, no-wrap
msgid "Custom `bootstrap` script"
msgstr "カスタム `bootstrap` スクリプト"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:405
msgid "The native executable must be referenced as `runner` if you include a custom `bootstrap` script."
msgstr "カスタム `bootstrap` スクリプトを含む場合は、ネイティブ実行可能ファイルを `runner` として参照する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:407
msgid "The extension generates an example script within `target/bootstrap-example.sh`."
msgstr "このエクステンションは、サンプルのスクリプト `target/bootstrap-example.sh` を生成します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:408
#, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr "AWS XRay と GraalVM を使用したトレース"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:415
msgid "In addition, remember to enable the AWS X-Ray tracing parameter in `manage.sh`, in the `cmd_create()` function.  This can also be set in the AWS Management Console."
msgstr "さらに、 `manage.sh` の `cmd_create()` 関数で AWS X-Ray tracing パラメーターを有効にすることを忘れないでください。これはAWSマネジメントコンソールでも設定できます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:421
msgid "For the sam template files, add the following to the YAML function Properties."
msgstr "SAM テンプレートファイルの場合は、YAML の Function Properties に以下を追加します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:430
#, no-wrap
msgid "Using HTTPS or SSL/TLS"
msgstr "HTTPS または SSL/TLS の使用"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:437
msgid "Open src/main/resources/application.properties and add the following line to enable SSL in your native image."
msgstr "src/main/resources/application.properties を開き、以下の行を追加してネイティブイメージでSSLを有効にします。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:444
#, no-wrap
msgid "Using the AWS Java SDK v2"
msgstr "AWS Java SDK v2 の使用"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:456
msgid "Add `quarkus-jaxb` as a dependency in your Maven `pom.xml`, or Gradle `build.gradle` file."
msgstr "`quarkus-jaxb` を依存関係として Maven `pom.xml` または Gradle `build.gradle` ファイルに追加します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:468
msgid "For Maven, add the following to your `pom.xml`."
msgstr "Mavenの場合は、 `pom.xml` に以下を追加します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:538
#, no-wrap
msgid "Additional requirements for client SSL"
msgstr "クライアントSSLの追加要件"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:541
msgid "The native executable requires some additional steps to enable client SSL that S3 and other AWS libraries need."
msgstr "ネイティブ実行可能ファイルは、S3 や他の aws ライブラリーが必要とするクライアント SSL を有効にするために、いくつかの追加の手順が必要です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:543
msgid "A custom `bootstrap` script"
msgstr "カスタム `bootstrap` スクリプト"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:544
msgid "`libsunec.so` must be added to `function.zip`"
msgstr "`function.zip` に `libsunec.so` を追加する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:545
msgid "`cacerts` must be added to `function.zip`"
msgstr "`function.zip` に `cacerts` を追加する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:557
msgid "Additional set `-Djavax.net.ssl.trustStorePassword=changeit` if your `cacerts` file is password protected."
msgstr "`cacerts` ファイルがパスワードで保護されている場合は、追加で `-Djavax.net.ssl.trustStorePassword=changeit` を設定してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:559
msgid "Next you must copy some files from your GraalVM distribution into `src/main/zip.native/`."
msgstr "次に、GraalVM ディストリビューションから `src/main/zip.native/` にいくつかのファイルをコピーする必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:561
msgid "GraalVM versions can have different paths for these files, and whether you using the Java 8 or 11 version. Adjust accordingly."
msgstr "Java 8 か 11 バージョンのいずれか、GraalVM バージョンによって、これらのファイルのパスが異なる場合があります。それに応じて調整してください。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:569
msgid "Now when you run the native build all these files will be included within `function.zip`"
msgstr "ネイティブビルドを実行すると、これらのファイルはすべて `function.zip` に含まれます。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:571
msgid "If you are using a Docker image to build, then you must extract these files from this image."
msgstr "Dockerイメージを使ってビルドする場合は、このイメージからこれらのファイルを抽出する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:573
msgid "To extract the required ssl, you must start up a Docker container in the background, and attach to that container to copy the artifacts."
msgstr "必要な SSL を抽出するには、バックグラウンドでDockerコンテナーを起動し、そのコンテナーにアタッチしてアーティファクトをコピーする必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:575
msgid "First, let's start the GraalVM container, noting the container id output."
msgstr "まず、GraalVMコンテナーを起動して、コンテナーIDの出力に注目してみましょう。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:584
msgid "First, libsunec.so, the C library used for the SSL implementation:"
msgstr "まず、SSLの実装に使用するC言語のライブラリである libsunec.so です。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:591
msgid "Second, cacerts, the certificate store.  You may need to periodically obtain an updated copy, also."
msgstr "2つ目は、cacerts(証明書ストア)です。また、定期的に更新されたコピーを取得する必要があるかもしれません。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:597
msgid "Your final archive will look like this:"
msgstr "最終的なアーカイブは以下のようになります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:607
#, no-wrap
msgid "Amazon Alexa Integration"
msgstr "Amazon Alexa 統合"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:610
msgid "To use Alexa with Quarkus native, you need to use the https://github.com/quarkiverse/quarkus-amazon-alexa[Quarkus Amazon Alexa extension hosted at the Quarkiverse Hub]."
msgstr "Quarkus ネイティブで Alexa を使用するには、 https://github.com/quarkiverse/quarkus-amazon-alexa[Quarkiverse Hub でホストされている Quarkus Amazon Alexa エクステンション] を使用する必要があります。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:620
msgid "Define the latest version of the extension in your POM file."
msgstr "POM ファイルでエクステンションの最新バージョンを定義します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:622
msgid "Create your Alexa handler, as normal, by sub-classing the abstract `com.amazon.ask.SkillStreamHandler`, and add your request handler implementation."
msgstr "通常通り、抽象クラス `com.amazon.ask.SkillStreamHandler` をサブクラス化して Alexa ハンドラーを作成し、リクエストハンドラーの実装を追加します。"

#. type: Plain text
#: upstream/_versions/2.7/guides/amazon-lambda.adoc:623
msgid "That's all there is to it!"
msgstr "それだけだよ!"
