# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-08-31 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/vertx.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus - Using Eclipse Vert.x"
msgstr "Quarkus - Eclipse Vert.xを使用する。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:13
msgid "Eclipse https://vertx.io[Vert.x] is a toolkit for building reactive applications.  It is designed to be lightweight and embeddable.  Vert.x defines a reactive execution model and provides a large ecosystem."
msgstr "Eclipse link:https://vertx.io[Vert.x] は、リアクティブなアプリケーションを構築するためのツールキットです。軽量で埋め込み可能なように設計されています。Vert.xはリアクティブ実行モデルを定義し、大規模なエコシステムを提供します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:18
msgid "Quarkus is based on Vert.x, and almost all network-related features rely on Vert.x.  While lots of reactive features from Quarkus don't _show_ Vert.x, it's used underneath.  Quarkus also integrates smoothly with the Vert.x event bus (to enable asynchronous messaging passing between application components) and some reactive clients.  You can also use various Vert.x APIs in your Quarkus application, such as deploying _verticles_, instantiating clients..."
msgstr "QuarkusはVert.xをベースにしており、ほとんどすべてのネットワーク関連機能はVert.xに依存しています。Quarkusのリアクティブ機能の多くはVert.xを _表に出して_ いませんが、その下で使用されています。また、Quarkusは、Vert.xイベントバス(アプリケーションコンポーネント間の非同期メッセージングの受け渡しを可能にするため)やいくつかのリアクティブクライアントとスムーズに統合されています。また、Quarkusアプリケーションでは、さまざまなVert.x APIを使用することができます(例えば、 _バーティクル_ のデプロイ、クライアントのインスタンス化など)。"

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:20
#, no-wrap
msgid "Installing"
msgstr "インストール"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:24
msgid "To access Vert.x, well, you need to enable the `vertx` extension to use this feature.  If you are creating a new project, set the `extensions` parameter are follows:"
msgstr "Vert.xにアクセスするに、この機能を利用するには、 `vertx` エクステンションを有効にする必要があります。新規プロジェクトを作成する場合は、 `extensions` パラメーターを以下のように設定します。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:34
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vertx-quickstart \\\n"
"    -DclassName=\"org.acme.vertx.GreetingResource\" \\\n"
"    -Dpath=\"/hello\" \\\n"
"    -Dextensions=\"resteasy,vertx\"\n"
"cd vertx-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:38
msgid "If you have an already created project, the `vertx` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr "すでに作成済みのプロジェクトがある場合は、 `vertx` エクステンションを既存のQuarkusプロジェクトに `add-extension` コマンドで追加することができます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:42
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"vertx\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:45
msgid "Otherwise, you can manually add this to the dependencies section of your `pom.xml` file:"
msgstr "そうでなければ、 `pom.xml` ファイルの依存関係セクションに手動で追加することができます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:52
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vertx</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:54
#, no-wrap
msgid "Native Transport"
msgstr "ネイティブトランスポート"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:60
#, fuzzy
msgid "Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports] which offers performance improvements on certain platforms. To enable them you must include the appropriate dependency for your platform. It's usually a good idea to include both to keep your application platform agnostic. Netty is smart enough to use the correct one, that includes none at all on unsupported platforms:"
msgstr "Vert.xは、 link:https://netty.io/wiki/native-transports.html[Nettyのネイティブトランスポートを] 使用することができ、特定のプラットフォームでパフォーマンスを向上させることができます。これを有効にするには、プラットフォームに応じて適切な依存関係を含める必要があります。通常、アプリケーションのプラットフォームに依存しないようにするために、両方を含めるのが良いアイデアです。Nettyは賢いので、サポートされていないプラットフォームでは全く使用しないなど、正しい方を使用します："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:68
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-epoll</artifactId>\n"
"  <classifier>linux-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:74
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-kqueue</artifactId>\n"
"  <classifier>osx-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:77
#, fuzzy
msgid "You will also have to explicitly configure Vert.x to use the native transport. In `application.properties` add:"
msgstr "また、ネイティブトランスポートを使用するようにVert.xを明示的に設定する必要があります。 `application.properties` に追加します："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:81
#, no-wrap
msgid "quarkus.vertx.prefer-native-transport=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:84
msgid "Or in `application.yml`:"
msgstr "あるいは、 `application.yml` で次のように設定します。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:90
#, no-wrap
msgid ""
"quarkus:\n"
"  vertx:\n"
"    prefer-native-transport: true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:93
msgid "If all is well quarkus will log:"
msgstr "すべてがうまくいけば、クァーカス以下のログ出力を行います。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:96
#, no-wrap
msgid "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vertx.adoc:98
#, no-wrap
msgid "Native Linux Transport"
msgstr "ネイティブLinuxトランスポート"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:101
msgid "On Linux you can enable the following socket options:"
msgstr "Linuxでは、以下のソケットオプションを有効にすることができます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:103
#: upstream/_versions/1.11/guides/vertx.adoc:124
msgid "SO_REUSEPORT"
msgstr "SOREUSEPORT"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:105
#: upstream/_versions/1.11/guides/vertx.adoc:126
#, no-wrap
msgid "quarkus.http.so-reuse-port=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:107
msgid "TCP_QUICKACK"
msgstr "TCP_QUICKACK"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:109
#, no-wrap
msgid "quarkus.http.tcp-quick-ack=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:111
msgid "TCP_CORK"
msgstr "TCP_CORK"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:113
#, no-wrap
msgid "quarkus.http.tcp-cork=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:115
msgid "TCP_FASTOPEN"
msgstr "TCP_FASTOPEN"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:117
#, no-wrap
msgid "quarkus.http.tcp-fast-open=true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vertx.adoc:119
#, no-wrap
msgid "Native MacOS Transport"
msgstr "ネイティブMacOSトランスポート"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:122
msgid "On MacOS Sierra and above you can enable the following socket options:"
msgstr "MacOS Sierra以上では、以下のソケットオプションを有効にすることができます。"

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:128
#, fuzzy, no-wrap
msgid "Accessing Vert.x"
msgstr "Vert.xにアクセスする"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:131
#, fuzzy
msgid "Once the extension has been added, you can access the _managed_ Vert.x instance using `@Inject`:"
msgstr "拡張機能を追加すると、 `@Inject` を使って _管理された _Vert.x インスタンスにアクセスすることができます："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:135
#: upstream/_versions/1.11/guides/vertx.adoc:601
#, no-wrap
msgid "@Inject Vertx vertx;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:139
#, fuzzy
msgid "If you are familiar with Vert.x, you know that Vert.x provides different API models.  For instance _bare_ Vert.x uses callbacks, the Mutiny variants uses `Uni` and `Multi`, the RX Java 2 version uses `Single`, `Maybe`, `Completable`, `Observable` and `Flowable`..."
msgstr "Vert.xに詳しい方なら、Vert.xがさまざまなAPIモデルを提供していることはご存知でしょう。例えば、 _素の _Vert.xはコールバックを使用し、Mutinyの亜種は `Uni` 、 `Multi` 、RX Java 2版は `Single` 、 `Maybe` 、 `Completable` 、 `Observable` 、 `Flowable `...を使用します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:141
#, fuzzy
msgid "Quarkus provides 4 Vert.x APIs:"
msgstr "Quarkusは、4つのVert.x APIを提供しています："

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:145
#, no-wrap
msgid "Name"
msgstr "名前"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:145
#, no-wrap
msgid "Code"
msgstr "コード"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:147
#, no-wrap
msgid "Description"
msgstr "説明"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:147
#, no-wrap
msgid "_bare_"
msgstr "_bare_"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:147
#, no-wrap
msgid "`@Inject io.vertx.core.Vertx vertx`"
msgstr "`@Inject io.vertx.core.Vertx vertx`"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:149
#, fuzzy, no-wrap
msgid "_bare_ Vert.x instance, the API uses callbacks."
msgstr "_bare _Vert.xのインスタンスでは、APIはコールバックを使用しています。"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:149
#, no-wrap
msgid "https://smallrye.io/smallrye-mutiny/[Mutiny]"
msgstr "https://smallrye.io/smallrye-mutiny/[Mutiny]"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:149
#, no-wrap
msgid "`@Inject io.vertx.mutiny.core.Vertx vertx`"
msgstr "`@Inject io.vertx.mutiny.core.Vertx vertx`"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:151
#, fuzzy, no-wrap
msgid "The Mutiny API for Vert.x."
msgstr "Vert.x用のMutiny APIです。"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:151
#, fuzzy, no-wrap
msgid "RX Java 2"
msgstr "RX Java 2"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:151
#, fuzzy, no-wrap
msgid "`@Inject io.vertx.reactivex.core.Vertx vertx`"
msgstr "`@Inject io.vertx.reactivex.core.Vertx vertx`"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:153
#, fuzzy, no-wrap
msgid "RX Java 2 Vert.x, the API uses RX Java 2 types (deprecated)."
msgstr "RX Java 2 Vert.xでは、APIはRX Java 2型（非推奨）を使用します。"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:153
#, fuzzy, no-wrap
msgid "_Axle_"
msgstr "_アクセル_"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:153
#, fuzzy, no-wrap
msgid "`@Inject io.vertx.axle.core.Vertx vertx`"
msgstr "`@Inject io.vertx.axle.core.Vertx vertx`"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:155
#, fuzzy, no-wrap
msgid "Axle Vert.x, the API uses `CompletionStage` and `Reactive Streams` (deprecated)."
msgstr "Axle Vert.xでは、APIは `CompletionStage` 、 `Reactive Streams` （非推奨）を使用します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:159
#, fuzzy
msgid "You may inject any of the 4 flavors of `Vertx` as well as the `EventBus` in your Quarkus application beans: `bare`, `Mutiny`, `Axle`, `RxJava2`.  They are just shims and rely on a single _managed_ Vert.x instance."
msgstr "Quarkusアプリケーションのビーンズには、 `EventBus` と同様に、 `Vertx` の4つのフレーバーのいずれかを注入することができます： `bare` `Mutiny `, `Axle `, `RxJava2` 。これらは単なるシムであり、 _管理された _1つのVert.xインスタンスに依存しています。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:161
#, fuzzy
msgid "You will pick one or the other depending on your use cases."
msgstr "ユースケースに応じて、どちらかを選ぶことになります。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:163
#, fuzzy
msgid "`bare`: for advanced usage or if you have existing Vert.x code you want to reuse in your Quarkus application"
msgstr "`bare `高度な使い方をする場合、または既存のVert.xコードをQuarkusアプリケーションで再利用する場合。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:164
#, fuzzy
msgid "`mutiny`: Mutiny is an event-driven reactive programming API. It uses 2 types: `Uni` and `Multi`. This is the recommended API."
msgstr "`mutiny `:Mutinyは、イベント駆動型のリアクティブプログラミングAPIです。 `Uni` と `Multi` の2種類を使用します。これは推奨APIです。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:165
#, fuzzy
msgid "`Axle`: works well with Quarkus and MicroProfile APIs (`CompletionStage` for single results and `Publisher` for streams) - deprecated, it is recommended to switch to Mutiny"
msgstr "`Axle `Quarkus および MicroProfile API（単一の結果については `CompletionStage` 、ストリームについては `Publisher` ）でうまく機能します - 非推奨です。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:166
#, fuzzy
msgid "`Rx Java 2`: when you need support for a wide range of data transformation operators on your streams - deprecated, it is recommended to switch to Mutiny"
msgstr "`Rx Java 2 `ストリームで様々なデータ変換演算子をサポートする必要がある場合 - 非推奨、Mutinyへの移行が推奨されます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:168
#, fuzzy
msgid "The following snippets illustrate the difference between these 4 APIs:"
msgstr "以下のスニペットは、これら4つのAPIの違いを説明するものです："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:179
#, no-wrap
msgid ""
"// Bare Vert.x:\n"
"vertx.fileSystem().readFile(\"lorem-ipsum.txt\", ar -> {\n"
"    if (ar.succeeded()) {\n"
"        System.out.println(\"Content:\" + ar.result().toString(\"UTF-8\"));\n"
"    } else {\n"
"        System.out.println(\"Cannot read the file: \" + ar.cause().getMessage());\n"
"    }\n"
"});\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:188
#, no-wrap
msgid ""
"// Mutiny Vert.x:\n"
"vertx.fileSystem().readFile(\"lorem-ipsum.txt\")\n"
"    .onItem().transform(buffer -> buffer.toString(\"UTF-8\"))\n"
"    .subscribe()\n"
"    .with(\n"
"            content -> System.out.println(\"Content: \" + content),\n"
"            err -> System.out.println(\"Cannot read the file: \" + err.getMessage())\n"
"    );\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:196
#, no-wrap
msgid ""
"// Rx Java 2 Vert.x\n"
"vertx.fileSystem().rxReadFile(\"lorem-ipsum.txt\")\n"
"    .map(buffer -> buffer.toString(\"UTF-8\"))\n"
"    .subscribe(\n"
"            content -> System.out.println(\"Content: \" + content),\n"
"            err -> System.out.println(\"Cannot read the file: \" + err.getMessage())\n"
"    );\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:207
#, no-wrap
msgid ""
"// Axle API:\n"
"vertx.fileSystem().readFile(\"lorem-ipsum.txt\")\n"
"    .thenApply(buffer -> buffer.toString(\"UTF-8\"))\n"
"    .whenComplete((content, err) -> {\n"
"        if (err != null) {\n"
"            System.out.println(\"Cannot read the file: \" + err.getMessage());\n"
"        } else {\n"
"            System.out.println(\"Content: \" + content);\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/vertx.adoc:210
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_versions/1.11/guides/vertx.adoc:213
#, fuzzy
msgid "If you're not familiar with Mutiny, we recommend to read the link:getting-started-reactive#mutiny[Getting Started with Reactive guide] first."
msgstr "Mutinyに慣れていない方は、まず「 link:getting-started-reactive#mutiny[Reactive入門」ガイドを] 読むことをお勧めします。"

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:215
#, fuzzy, no-wrap
msgid "Using Vert.x in Reactive JAX-RS resources"
msgstr "ReactiveなJAX-RSリソースでVert.xを使用する。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:218
#, fuzzy
msgid "Quarkus web resources support asynchronous processing and streaming results over https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events[server-sent events]."
msgstr "QuarkusのWebリソースは、非同期処理と、 link:https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events[サーバーから送信されたイベントに対する] 結果のストリーミングをサポートしています。"

#. type: Title ===
#: upstream/_versions/1.11/guides/vertx.adoc:219
#, no-wrap
msgid "Asynchronous processing"
msgstr "非同期処理"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:222
#, fuzzy
msgid "To asynchronously handle the HTTP request, the endpoint method must return a `java.util.concurrent.CompletionStage` or an `io.smallrye.mutiny.Uni` (requires the `quarkus-resteasy-mutiny` extension):"
msgstr "HTTPリクエストを非同期で処理するため、エンドポイントメソッドは `java.util.concurrent.CompletionStage` または `io.smallrye.mutiny.Uni` （ `quarkus-resteasy-mutiny` 拡張が必要）を返す必要があります："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:227
#: upstream/_versions/1.11/guides/vertx.adoc:265
#, no-wrap
msgid ""
"@Path(\"/lorem\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:237
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public Uni<String> doSomethingAsync() {\n"
"        // Mimic an asynchronous computation.\n"
"        return Uni.createFrom()\n"
"                .item(() -> \"Hello!\")\n"
"                .onItem().delayIt().by(Duration.ofMillis(10));\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:243
#: upstream/_versions/1.11/guides/vertx.adoc:564
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:246
#, fuzzy
msgid "Then, open your browser to http://localhost:8080/lorem and you should get the message."
msgstr "その後、ブラウザを開いて、 http://localhost:8080/lorem /lorem。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:249
#, fuzzy
msgid "So far so good.  Now let's use the Vert.x API instead of this artificial delay:"
msgstr "ここまでは順調です。では、この人工的な遅延の代わりに、Vert.x APIを使ってみましょう："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:253
#: upstream/_versions/1.11/guides/vertx.adoc:318
#: upstream/_versions/1.11/guides/vertx.adoc:502
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:256
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:262
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:268
#: upstream/_versions/1.11/guides/vertx.adoc:335
#: upstream/_versions/1.11/guides/vertx.adoc:524
#, no-wrap
msgid ""
"    @Inject\n"
"    Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:276
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public Uni<String> doSomethingAsync() {\n"
"        return vertx.fileSystem().readFile(\"/META-INF/resources/lorem.txt\")\n"
"                .onItem().transform(b -> b.toString(\"UTF-8\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:279
#, fuzzy
msgid "In this code, we inject the `vertx` instance (`io.vertx.mutiny.core.Vertx`) and read a file from the file system."
msgstr "このコードでは、 `vertx` インスタンス( `io.vertx.mutiny.core.Vertx `)をインジェクトし、ファイルシステムからファイルを読み込んでいます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:281
#, fuzzy
msgid "Create the `src/main/resources/META_INF/resources/lorem.txt` file with the following content:"
msgstr "以下の内容で `src/main/resources/META_INF/resources/lorem.txt` ファイルを作成します："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:285
#, no-wrap
msgid "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:288
#, fuzzy
msgid "Then, refresh the page, you should see the _lorem ipsum_ text."
msgstr "その後、ページを更新すると、 _lorem ipsumの _テキストが表示されるはずです。"

#. type: Title ===
#: upstream/_versions/1.11/guides/vertx.adoc:289
#, fuzzy, no-wrap
msgid "Streaming using Server-Sent Events"
msgstr "サーバー送信イベントを利用したストリーミング"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:292
#, fuzzy
msgid "Quarkus web resources that need to send content as https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events[server-sent events] must have a method:"
msgstr "link:https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events[サーバー送信イベントとして] コンテンツを送信する必要があるQuarkus Webリソースは、メソッドを持つ必要があります："

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:294
#, fuzzy
msgid "declaring the `text/event-stream` response content type"
msgstr "`text/event-stream` レスポンスのコンテンツタイプを宣言する"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:295
#, fuzzy
msgid "returning a https://www.reactive-streams.org/[Reactive Streams] `Publisher` or Mutiny `Multi` (requires the `quarkus-resteasy-mutiny` extension)"
msgstr "link:https://www.reactive-streams.org/[Reactive Streams] `Publisher` または Mutiny `Multi` を返す（ `quarkus-resteasy-mutiny` 拡張機能が必要です。）"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:297
#, fuzzy
msgid "In practice, a streaming greeting service would look like:"
msgstr "実際には、ストリーミンググリーティングサービスは次のようなものです："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:302
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class StreamingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:311
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @Path(\"/{name}\")\n"
"    public Multi<String> greeting(@PathParam String name) {\n"
"        // TODO: create a Reactive Streams publisher or a Mutiny Multi\n"
"        return publisher;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:314
#, fuzzy
msgid "Now we just need to return our `Publisher` or `Multi`:"
msgstr "あとは、 `Publisher` または `Multi` を返すだけです："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:322
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.vertx.mutiny.core.Vertx;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:329
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import java.util.Date;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:332
#, no-wrap
msgid ""
"@Path(\"/stream\")\n"
"public class StreamingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:344
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @Path(\"/{name}\")\n"
"    public Multi<String> greeting(@PathParam String name) {\n"
"        return vertx.periodicStream(2000).toMulti()\n"
"                .map(l -> String.format(\"Hello %s! (%s)%n\", name, new Date()));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:348
#, fuzzy
msgid "The server side is ready.  In order to see the result in the browser, we need a web page."
msgstr "サーバーサイドの準備が整いました。ブラウザで結果を見るためには、ウェブページが必要です。"

#. type: Block title
#: upstream/_versions/1.11/guides/vertx.adoc:350
#, fuzzy, no-wrap
msgid "META-INF/resources/streaming.html"
msgstr "META-INF/resources/streaming.html"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:363
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>SSE with Vert.x - Quarkus</title>\n"
"    <script type=\"application/javascript\" src=\"streaming.js\"></script>\n"
"</head>\n"
"<body>\n"
"<div id=\"container\"></div>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:367
#, fuzzy
msgid "Our web page just has an empty `<div>` container.  The magic, as always, lies in the Javascript code:"
msgstr "私たちのウェブページには、空の `<div>` コンテナがあるだけです。魔法は、いつものように、Javascriptのコードにあります："

#. type: Block title
#: upstream/_versions/1.11/guides/vertx.adoc:369
#, fuzzy, no-wrap
msgid "META-INF/resources/streaming.js"
msgstr "META-INF/resources/streaming.js"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:382
#, no-wrap
msgid ""
"if (!!window.EventSource) {\n"
"    var eventSource = new EventSource(\"/stream/Quarkus\");\n"
"    eventSource.onmessage = function (event) {\n"
"        var container = document.getElementById(\"container\");\n"
"        var paragraph = document.createElement(\"p\");\n"
"        paragraph.innerHTML = event.data;\n"
"        container.appendChild(paragraph);\n"
"    };\n"
"} else {\n"
"    window.alert(\"EventSource not available on this browser.\")\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:386
#, fuzzy
msgid "Most browsers support SSE but some don't.  More about this in Mozilla's https://developer.mozilla.org/en-US/docs/Web/API/EventSource#Browser_compatibility[SSE browser-compatibility list]."
msgstr "ほとんどのブラウザはSSEをサポートしていますが、一部サポートしていないブラウザもあります。これについては、Mozillaの link:https://developer.mozilla.org/en-US/docs/Web/API/EventSource#Browser_compatibility[SSEブラウザ互換性リストで] 詳しく説明しています。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:389
#, fuzzy
msgid "Navigate to http://localhost:8080/streaming.html.  A new greeting should show-up every 2 seconds."
msgstr " http://localhost:8080/streaming.html  に移動します。2秒ごとに新しい挨拶が表示されるはずです。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:393
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:13:55 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:395
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:13:57 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:397
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:13:59 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:399
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:14:01 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:401
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:14:03 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:403
#, no-wrap
msgid "...\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vertx.adoc:405
#, no-wrap
msgid "Using Vert.x JSON"
msgstr "Vert.x JSONの使用"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:409
#, fuzzy
msgid "Vert.x API heavily relies on JSON, namely the `io.vertx.core.json.JsonObject` and `io.vertx.core.json.JsonArray` types.  They are both supported as Quarkus web resource request and response bodies."
msgstr "Vert.x APIは、JSON、すなわち `io.vertx.core.json.JsonObject` と `io.vertx.core.json.JsonArray` のタイプに大きく依存しています。これらはどちらも、QuarkusのWebリソースリクエストおよびレスポンスボディとしてサポートされています。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:411
#, fuzzy
msgid "Consider these endpoints:"
msgstr "この終着点を考えてみましょう："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:417
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class VertxJsonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:423
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/object\")\n"
"    public JsonObject jsonObject(@PathParam String name) {\n"
"        return new JsonObject().put(\"Hello\", name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:430
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/array\")\n"
"    public JsonArray jsonArray(@PathParam String name) {\n"
"        return new JsonArray().add(\"Hello\").add(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:433
#, fuzzy
msgid "In your browser, navigate to http://localhost:8080/hello/Quarkus/object. You should see:"
msgstr "ブラウザで、 http://localhost:8080/hello/Quarkus/object  に移動します。表示されるはずです："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:437
#, no-wrap
msgid "{\"Hello\":\"Quarkus\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:440
#, fuzzy
msgid "Then, navigate to http://localhost:8080/hello/Quarkus/array:"
msgstr "次に、 http://localhost:8080/hello/Quarkus/array  に移動します："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:444
#, no-wrap
msgid "[\"Hello\",\"Quarkus\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:447
#, fuzzy
msgid "Needless to say, this works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr "もちろん、JSONコンテンツがリクエストボディであったり、 `Uni `, `Multi `, `CompletionStage `, `Publisher` でラップされている場合も同様に機能します。"

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:448
#, no-wrap
msgid "Using Vert.x Clients"
msgstr "Vert.x クライアントの使用"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:452
#, fuzzy
msgid "As you can inject a Vert.x instance, you can use Vert.x clients in a Quarkus application.  This section gives an example with the `WebClient`."
msgstr "Vert.x インスタンスを注入できるため、Quarkus アプリケーションで Vert.x クライアントを使用することができます。このセクションでは、 `WebClient` を使用した例を紹介します。"

#. type: Title ===
#: upstream/_versions/1.11/guides/vertx.adoc:453
#, fuzzy, no-wrap
msgid "Picking the right dependency"
msgstr "正しい依存関係を選ぶ"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:456
#, fuzzy
msgid "Depending on the API model you want to use you need to add the right dependency to your `pom.xml` file:"
msgstr "使用したいAPIモデルに応じて、適切な依存関係を `pom.xml` ファイルに追加する必要があります："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:464
#, no-wrap
msgid ""
"<!-- bare API -->\n"
"<dependency>\n"
"  <groupId>io.vertx</groupId>\n"
"  <artifactId>vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:470
#, no-wrap
msgid ""
"<!-- Mutiny API -->\n"
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:476
#, no-wrap
msgid ""
"<!-- Axle API -->\n"
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-axle-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:482
#, no-wrap
msgid ""
"<!-- RX Java 2 API -->\n"
"<dependency>\n"
"  <groupId>io.vertx</groupId>\n"
"  <artifactId>vertx-rx-java2</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:485
#, fuzzy
msgid "The `vertx-rx-java2` provides the RX Java 2 API for the whole Vert.x stack, not only the web client."
msgstr "`vertx-rx-java2` は、Web クライアントだけでなく、Vert.x スタック全体に対して RX Java 2 API を提供します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:487
#, fuzzy
msgid "In this guide, we are going to use the Mutiny API, so:"
msgstr "このガイドでは、Mutiny APIを使用することにしていますので："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:494
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:497
#, fuzzy
msgid "Now, create a new resource in your project with the following content:"
msgstr "では、プロジェクト内に以下の内容で新しいリソースを作成します："

#. type: Block title
#: upstream/_versions/1.11/guides/vertx.adoc:499
#, fuzzy, no-wrap
msgid "src/main/java/org/acme/vertx/ResourceUsingWebClient.java"
msgstr "src/main/java/org/acme/vertx/ResourceUsingWebClient.java"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:510
#, no-wrap
msgid ""
"import javax.annotation.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:513
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:518
#, no-wrap
msgid ""
"import io.vertx.mutiny.core.Vertx;\n"
"import io.vertx.mutiny.ext.web.client.WebClient;\n"
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.ext.web.client.WebClientOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:521
#, no-wrap
msgid ""
"@Path(\"/fruit-data\")\n"
"public class ResourceUsingWebClient {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:526
#, no-wrap
msgid "    private WebClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:533
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    void initialize() {\n"
"        this.client = WebClient.create(vertx,\n"
"                new WebClientOptions().setDefaultHost(\"fruityvice.com\")\n"
"                    .setDefaultPort(443).setSsl(true).setTrustAll(true));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:550
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Path(\"/{name}\")\n"
"    public Uni<JsonObject> getFruitData(@PathParam(\"name\") String name) {\n"
"        return client.get(\"/api/fruit/\" + name)\n"
"                .send()\n"
"                .onItem().transform(resp -> {\n"
"                    if (resp.statusCode() == 200) {\n"
"                        return resp.bodyAsJsonObject();\n"
"                    } else {\n"
"                        return new JsonObject()\n"
"                                .put(\"code\", resp.statusCode())\n"
"                                .put(\"message\", resp.bodyAsString());\n"
"                    }\n"
"                });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:552
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:558
#, fuzzy
msgid "This resource creates a `WebClient` and upon request use this client to invoke the _fruityvice_ API.  Depending on the result the response is forwarded as it's received, or a new JSON object is created with the status and body.  The `WebClient` is obviously asynchronous (and non-blocking), to the endpoint returns a `Uni`."
msgstr "このリソースは `WebClient` を作成し、リクエストに応じてこのクライアントを使用して _fruityvice _API を呼び出します。結果に応じて、レスポンスは受信したまま転送されるか、ステータスとボディを持つ新しいJSONオブジェクトが作成されます。 `WebClient` は明らかに非同期（かつノンブロッキング）であり、エンドポイントには `Uni` が返されます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:560
msgid "Run the application with:"
msgstr "アプリケーションを実行します:"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:567
#, fuzzy
msgid "And then, open a browser to: `http://localhost:8080/fruit-data/pear`. You should get some details about pears."
msgstr "そして、ブラウザを開いて `<a href=\"http://localhost:8080/fruit-data/pear\" class=\"bare\">http://localhost:8080/fruit-data/pear</a> `.梨に関する詳細が表示されるはずです。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:571
#, fuzzy
msgid "The application can also run as a native executable.  But, first, we need to instruct Quarkus to enable _ssl_.  Open the `src/main/resources/application.properties` and add:"
msgstr "アプリケーションは、ネイティブの実行ファイルとして実行することも可能です。しかし、その前に、Quarkusに _sslを _有効にするよう指示する必要があります。 `src/main/resources/application.properties` を開き、追加します："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:575
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:578
msgid "Then, create the native executable with:"
msgstr "そして、ネイティブ実行可能ファイルを作成します。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:582
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:584
#, no-wrap
msgid "Deploying verticles"
msgstr "verticleの展開"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:589
#, fuzzy
msgid "link:https://vertx.io/docs/vertx-core/java/#\\_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.  This model does not claim to be a strict actor-model implementation, but it does share similarities especially with respect to concurrency, scaling and deployment.  To use this model, you write and _deploy_ verticles, communicating with each other by sending messages on the event bus."
msgstr "link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticlesは] 、_Vert.x_が提供する「シンプルでスケーラブル、アクターライクなデプロイメントと並行性のモデル」です。このモデルは、厳密なアクターモデルの実装であるとは主張しませんが、特に同時実行、スケーリング、デプロイメントに関して類似性を持っています。このモデルを使用するには、イベントバスでメッセージを送信することによって相互に通信する、バーティクルを書いて _デプロイ _します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:592
msgid "You can deploy _verticles_ in Quarkus.  It supports:"
msgstr "Quarkusで _verticles_ をデプロイすることができます。次をサポートしています:"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:594
msgid "_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr "_生の_ verticle - `io.vertx.core.AbstractVerticle` を拡張するJavaクラス"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:595
msgid "_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`"
msgstr "_Mutiny_ verticle - `io.smallrye.mutiny.vertx.core.AbstractVerticle` を拡張するJavaクラス"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:597
#, fuzzy
msgid "To deploy verticles, use the regular Vert.x API:"
msgstr "バーティクルをデプロイするには、通常のVert.x APIを使用します："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:605
#, no-wrap
msgid ""
"// ...\n"
"vertx.deployVerticle(MyVerticle.class.getName(), ar -> { });\n"
"vertx.deployVerticle(new MyVerticle(), ar -> { });\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:608
#, fuzzy
msgid "You can also pass deployment options to configure the verticle as well as set the number of instances."
msgstr "また、デプロイオプションを渡すことで、インスタンス数の設定だけでなく、バーティクルを設定することも可能です。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:611
#, fuzzy
msgid "Verticles are not _beans_ by default.  However, you can implement them as _ApplicationScoped_ beans and get injection support:"
msgstr "バーティクルは、デフォルトでは _ビーンズでは _ありません。しかし、 _ApplicationScoped _Beanとして実装し、注入サポートを得ることができます："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:615
#: upstream/_versions/1.11/guides/vertx.adoc:643
#, no-wrap
msgid "package io.quarkus.vertx.verticles;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:619
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:621
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:624
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBeanVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:626
#, no-wrap
msgid "    @ConfigProperty(name = \"address\") String address;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:634
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(address)\n"
"                .handler(m -> m.replyAndForget(\"hello\"))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:637
#, fuzzy
msgid "You don't have to inject the `vertx` instance but instead leverage the instance stored in the protected field of `AbstractVerticle`."
msgstr "`vertx` のインスタンスを注入する必要はなく、 `AbstractVerticle` の保護フィールドに格納されているインスタンスを活用します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:639
#, fuzzy
msgid "Then, deploy the verticle instance with:"
msgstr "で、verticleインスタンスをデプロイします："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:646
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:649
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:652
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class VerticleDeployer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:657
#, no-wrap
msgid ""
"    public void init(@Observes StartupEvent e, Vertx vertx, MyBeanVerticle verticle) {\n"
"         vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:660
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr "露出しているすべての `AbstractVerticle` をデプロイしたい場合は、次のようにします。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:668
#, no-wrap
msgid ""
"public void init(@Observes StartupEvent e, Vertx vertx, Instance<AbstractVerticle> verticles) {\n"
"    for (AbstractVerticle verticle : verticles) {\n"
"        vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:670
#, no-wrap
msgid "Listening to a Unix Domain Socket"
msgstr "Unixドメインソケットのリスニング"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:676
msgid "Listening on a unix domain socket allows us to dispense with the overhead of TCP if the connection to the quarkus service is established from the same host. This can happen if access to the service goes through a proxy which is often the case if you're setting up a service mesh with a proxy like Envoy."
msgstr "unix ドメインソケットをリスンすることで、同じホストから quarkus サービスへの接続が確立されている場合、TCP のオーバーヘッドを省くことができます。これはサービスへのアクセスがプロキシーを経由している場合に起こる可能性があり、Envoyのようなプロキシーでサービスメッシュを設定している場合によく起こります。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:678
msgid "This will only work on platforms that support <<native-transport>>."
msgstr "これは、 link:#native-transport[[native-transport]] をサポートするプラットフォームでのみ動作します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:681
msgid "To setup please enable the appropriate <<native-transport>> and set the following environment property:"
msgstr "設定するには、適切な link:#native-transport[native-transport] を有効にし、以下の環境プロパティーを設定してください。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:685
#, no-wrap
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:689
msgid "By itself this will not disable the tcp socket which by default will open on `0.0.0.0:8080`. It can be explicitly disabled:"
msgstr "これだけでは、デフォルトで `0.0.0.0:8080` で開かれる tcp ソケットを無効にすることはできません。これは次のように明示的に無効にすることができます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:692
#, no-wrap
msgid "quarkus.http.host-enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:696
msgid "These properties can be set through Java's `-D` command line parameter or on `application.properties`."
msgstr "これらのプロパティは、Javaの `-D` コマンドライン・パラメータまたは `application.properties` で設定できます。"

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:697
#, no-wrap
msgid "Read only deployment environments"
msgstr "読み取り専用のデプロイメント環境"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:700
msgid "In environments with read only file systems you may receive errors of the form:"
msgstr "ファイルシステムが読み取り専用の環境では、次のようなエラーが発生することがあります。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:704
#, no-wrap
msgid "java.lang.IllegalStateException: Failed to create cache dir\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:707
msgid "Assuming `/tmp/` is writable this can be fixed by setting the `vertx.cacheDirBase` property to point to a directory in `/tmp/` for instance in OpenShift by creating an environment variable `JAVA_OPTS` with the value `-Dvertx.cacheDirBase=/tmp/vertx`."
msgstr "`/tmp/` が書き込み可能である場合、これは `vertx.cacheDirBase` プロパティが `/tmp/` のディレクトリを指すように設定することで修正できます。例えば、OpenShift では環境変数 `JAVA_OPTS` を作成して `-Dvertx.cacheDirBase=/tmp/vertx` という値を設定します。"

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:709
#, no-wrap
msgid "Running behind a reverse proxy"
msgstr "リバースプロキシーの背後での実行"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:715
msgid "Quarkus could be accessed through proxies that additionally generate headers (e.g. `X-Forwarded-Host`) to keep information from the client-facing side of the proxy servers that is altered or lost when they are involved.  In those scenarios, Quarkus can be configured to automatically update information like protocol, host, port and URI reflecting the values in these headers."
msgstr "Quarkus は、プロキシーサーバーが関与すると変更されたり失われたりするクライアント側の情報を保持するために、追加でヘッダー ( 例： `X-Forwarded-Host` ) を生成するプロキシーを介してアクセスされる可能性があります。このようなシナリオでは、 Quarkus は、これらのヘッダーの値を反映して、プロトコル、ホスト、ポート、 URI などの情報を自動的に更新するように設定することができます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:718
#, fuzzy
msgid "Activating this feature makes the server exposed to several security issues (i.e. information spoofing).  Consider activate it only when running behind a reverse proxy."
msgstr "この機能を有効にすると、サーバーがいくつかのセキュリティ問題（情報詐称など）にさらされます。リバースプロキシで動作させる場合のみ、この機能を有効にすることを検討してください。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:720
#, fuzzy
msgid "To setup this feature, please include the following lines in `src/main/resources/application.properties`:"
msgstr "この機能を設定するには、 `src/main/resources/application.properties` に以下の行を記述してください："

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:723
#, no-wrap
msgid "quarkus.http.proxy-address-forwarding=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:726
msgid "To consider only de-facto standard header (`Forwarded` header), please include the following lines in `src/main/resources/application.properties`:"
msgstr "デファクトスタンダードのヘッダー ( `Forwarded` header ) だけを考慮するためには、 `src/main/resources/application.properties` に以下の行を記述してください。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:729
#, no-wrap
msgid "quarkus.http.proxy.allow-forwarded=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:732
msgid "To consider only non-standard headers, please include the following lines instead in `src/main/resources/application.properties`:"
msgstr "非標準のヘッダーのみを考慮するには、代わりに以下の行を `src/main/resources/application.properties` に記述してください。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:738
#, no-wrap
msgid ""
"quarkus.http.proxy.proxy-address-forwarding=true\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.enable-forwarded-prefix=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:741
#, fuzzy
msgid "Both configurations related to standard and non-standard headers can be combined, although the standard headers configuration will have precedence."
msgstr "標準ヘッダーに関する設定と非標準ヘッダーに関する設定の両方を組み合わせることができますが、標準ヘッダーに関する設定が優先されます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:743
msgid "Supported forwarding address headers are:"
msgstr "サポートされている転送アドレスヘッダは以下の通りです。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:745
msgid "`Forwarded`"
msgstr "`Forwarded`"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:746
msgid "`X-Forwarded-Proto`"
msgstr "`X-Forwarded-Proto`"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:747
msgid "`X-Forwarded-Host`"
msgstr "`X-Forwarded-Host`"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:748
msgid "`X-Forwarded-Port`"
msgstr "`X-Forwarded-Port`"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:749
msgid "`X-Forwarded-Ssl`"
msgstr "`X-Forwarded-Ssl`"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:750
msgid "`X-Forwarded-Prefix`"
msgstr "`X-Forwarded-Prefix`"

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:752
#, no-wrap
msgid "SameSite cookies"
msgstr "SameSite クッキー"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:755
msgid "One can easily add a https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies set by a Quarkus endpoint by listing a cookie name and a `SameSite` attribute, for example:"
msgstr "例えば、クッキー名と `SameSite` 属性を記載することで、 Quarkus のエンドポイントによって設定された任意のクッキーに https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] クッキープロパティを簡単に追加することができます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:760
#, no-wrap
msgid ""
"quarkus.http.same-site-cookie.jwt.value=Lax\n"
"quarkus.http.same-site-cookie.session.value=Strict\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:763
msgid "Given this configuration, the `jwt` cookie will have a `SameSite=Lax` attribute and the `session` cookie will have a `SameSite=Strict` attribute."
msgstr "この設定では、 `jwt` クッキーは `SameSite=Lax` 属性を持ち、 `session` クッキーは `SameSite=Strict` 属性を持つことになります。"

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:764
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:767
#, fuzzy
msgid "There are many other facets of Quarkus using Vert.x underneath:"
msgstr "Quarkusの下には、Vert.xを使用した他の多くの側面があります："

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:771
#, fuzzy
msgid "The event bus is the connecting tissue of Vert.x applications.  Quarkus integrates it so different beans can interact with asynchronous messages.  This part is covered in the link:reactive-event-bus[event bus documentation]."
msgstr "イベントバスは、Vert.xアプリケーションの接続組織です。Quarkusはこれを統合して、異なるBeanが非同期メッセージで対話できるようにします。この部分については、 link:reactive-event-bus[イベントバスのドキュメントで] 説明されています。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:775
#, fuzzy
msgid "Data streaming and Apache Kafka are an important part of modern systems.  Quarkus integrates data streaming using Reactive Messaging.  More details on link:kafka[Interacting with Kafka]."
msgstr "データストリーミングとApache Kafkaは、現代のシステムで重要な役割を担っています。Quarkusでは、Reactive Messagingを使用してデータストリーミングを統合しています。詳細は「 link:kafka[Kafkaとの対話] 」をご覧ください。"

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:776
#, fuzzy
msgid "Learn how to implement highly performant, low-overhead database applications on Quarkus with the link:reactive-sql-clients[Reactive SQL Clients]."
msgstr "link:reactive-sql-clients[Reactive SQL Clientsを] 使用して、Quarkus上で高いパフォーマンスと低オーバーヘッドのデータベースアプリケーションを実装する方法について説明します。"
