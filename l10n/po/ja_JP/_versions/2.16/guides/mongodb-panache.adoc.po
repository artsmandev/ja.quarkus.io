msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"You have noticed how much more compact and readable the code is compared to using the MongoDB API?\n"
"Does this look interesting? Read on!"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"the `list()` method might be surprising at first. It takes fragments of PanacheQL queries (subset of JPQL) and contextualizes the rest.\n"
"That makes for very concise but yet readable code.\n"
"MongoDB native queries are also supported."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"MongoDB with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheMongoRepository`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"This command generates a Maven structure importing the RESTEasy Reactive Jackson and MongoDB with Panache extensions.\n"
"After this, the `quarkus-mongodb-panache` extension has been added to your build file."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"To define a Panache entity, simply extend `PanacheMongoEntity` and add your columns as public fields.\n"
"You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"You can define your entity as regular POJO.\n"
"You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"You can use public fields or private fields with getters/setters.\n"
"If you don't want to manage the ID by yourself, you can make your entity extends `PanacheMongoEntity`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"When using Repositories, you can get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheMongoRepository`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"All the operations that are defined on `PanacheMongoEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"You should only use `list` and `stream` methods if your collection contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"You can use them if you want, but we also support what we call **PanacheQL** that can be seen as a subset of link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (or link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]) and allows you to easily express a query.\n"
"MongoDB with Panache will then map it to a MongoDB native query."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"MongoDB queries must be valid JSON documents,\n"
"using the same field multiple times in a query is not allowed using PanacheQL as it would generate an invalid JSON\n"
"(see link:https://github.com/quarkusio/quarkus/issues/12086[this issue on GitHub])."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"We also handle some basic date type transformations: all fields of type `Date`, `LocalDate`, `LocalDateTime` or `Instant` will be mapped to the\n"
"link:https://docs.mongodb.com/manual/reference/bson-types/#date[BSON Date] using the `ISODate` type (UTC datetime).\n"
"The MongoDB POJO codec doesn't support `ZonedDateTime` and `OffsetDateTime` so you should convert them prior usage."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"MongoDB with Panache offers operations to update multiple documents based on an update document and a query :\n"
"`Person.update(\"foo = ?1 and bar = ?2\", fooName, barName).where(\"name = ?1\", name)`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"Both `findByNameWithPanacheQLQuery()` and `findByNameWithNativeQuery()` methods will return the same result but query written in PanacheQL\n"
"will use the entity field name: `name`, and native query will use the MongoDB field name: `lastname`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"You can use it to restrict which fields will be returned by the database,\n"
"the ID field will always be returned, but it's not mandatory to include it inside the projection class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"For this, you need to create a class (a POJO) that will only contain the projected fields.\n"
"This POJO needs to be annotated with `@ProjectionFor(Entity.class)` where `Entity` is the name of your entity class.\n"
"The field names, or getters, of the projection class will be used to restrict which properties will be loaded from the database."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider], with link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/#configure-the-driver-for-pojos[automatic POJO support],\n"
"to automatically convert your object to a BSON document."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"In case you encounter the `org.bson.codecs.configuration.CodecConfigurationException` exception, it means the codec is not able to\n"
"automatically convert your object.\n"
"This codec obeys the Java Bean standard, so it will successfully convert a POJO using public fields or getters/setters.\n"
"You can use `@BsonIgnore` to make a field, or a getter/setter, ignored by the codec."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"If your class doesn't obey these rules (for example by including a method that starts with `get` but is not a setter),\n"
"you could provide a custom codec for it.\n"
"Your custom codec will be automatically discovered and registered inside the codec registry.\n"
"See xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"In MongoDB, a transaction is only possible on a replicaset,\n"
"luckily our xref:mongodb.adoc#dev-services[Dev Services for MongoDB] setups a single node replicaset so it is compatible with transactions."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"IDs are often a touchy subject. In MongoDB, they are usually auto-generated by the database with an `ObjectId` type.\n"
"In MongoDB with Panache the ID are defined by a field named `id` of the `org.bson.types.ObjectId` type,\n"
"but if you want to customize them, once again we have you covered."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"You can specify your own ID strategy by extending `PanacheMongoEntityBase` instead of `PanacheMongoEntity`. Then\n"
"you just declare whatever ID you want as a public field by annotating it by `@BsonId`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"If you're using repositories, then you will want to extend `PanacheMongoRepositoryBase` instead of `PanacheMongoRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"When using `ObjectId`, MongoDB will automatically provide a value for you, but if you use a custom field type,\n"
"you need to provide the value by yourself."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"`ObjectId` can be difficult to use if you want to expose its value in your REST service.\n"
"So we created Jackson and JSON-B providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on either the RESTEasy Reactive Jackson extension or the RESTEasy Reactive JSON-B extension."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked as nullable,\n"
"and the generated constructor needs to have as parameters all the fields of the data class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"Therefore, if you want to use a data class as an entity class, you need a way to make Kotlin generate an empty constructor.\n"
"To do so, you need to provide default values for all the fields of your classes.\n"
"The following sentence from the Kotlin documentation explains it:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"First, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the `PojoCodecProvider`.\n"
"See this part of the documentation: xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"Another option is to use the `@BsonCreator` annotation to tell the `PojoCodecProvider` to use the Kotlin data class default constructor,\n"
"in this case all constructor parameters have to be annotated with `@BsonProperty`: see link:{mongodb-doc-root-url}/fundamentals/data-formats/pojo-customization/#pojos-without-no-argument-constructors[Supporting pojos without no args constructor]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"The last option is to the use the link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg] compiler plugin.\n"
"This plugin is configured with a list of annotations, and the end result is the generation of no-args constructor for each class annotated with them."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"MongoDB with Panache allows using reactive style implementation for both entities and repositories.\n"
"For this, you need to use the Reactive variants when defining your entities : `ReactivePanacheMongoEntity` or `ReactivePanacheMongoEntityBase`,\n"
"and when defining your repositories: `ReactivePanacheMongoRepository` or `ReactivePanacheMongoRepositoryBase`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"The reactive API of MongoDB with Panache uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"You will have access to the same functionalities of the _imperative_ variant inside the reactive one: bson annotations, custom ID, PanacheQL, ...\n"
"But the methods on your entities or repositories will all return reactive types."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid "The same query facility exists for the reactive types, but the `stream()` methods act differently: they return a `Multi` (which implement  a reactive stream `Publisher`) instead of a `Stream`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"If you are using the active-record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"Be sure to call your `verify` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"When it comes to writing MongoDB entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really\n"
"relevant to your model."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields,\n"
"then generate getters and setters for those fields, even if they don't actually do anything more than read/write\n"
"the fields."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"MongoDB queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"Make your entities extend `PanacheMongoEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheMongoEntityBase` instead and handle the ID yourself."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters\n"
"that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` or even better `Person.find(\"name\", \"Loïc\")`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/mongodb-panache.adoc
msgid ""
"It attempts to identity archives with Panache entities (and consumers of Panache entities)\n"
"by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an\n"
"annotation processor that will automatically create this file in archives that depend on\n"
"Panache (even indirectly). If you have disabled annotation processors you may need to create\n"
"this file manually in some cases."
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:6
#, no-wrap
msgid "Simplified MongoDB with Panache"
msgstr "シンプルになったMongoDB with Panache"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:14
msgid "MongoDB is a well known NoSQL Database that is widely used, but using its raw API can be cumbersome as you need to express your entities and your queries as a MongoDB link:{mongodb-doc-root-url}/fundamentals/data-formats/documents/#document[`Document`]."
msgstr "MongoDB は広く利用されている有名な NoSQL データベースですが、エンティティとクエリを MongoDB link:{mongodb-doc-root-url}/bson/documents/#document[`Document`] として表現する必要があるため、生のAPIを使用するのは面倒です。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:16
msgid "MongoDB with Panache provides active record style entities (and repositories) like you have in xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr "MongoDB with Panacheは、 link:hibernate-orm-panache.html[Hibernate ORM with Panache]にあるようなアクティブレコードスタイルのエンティティ（およびリポジトリ）を提供し、Quarkusでエンティティを簡単に楽しく書けるようにすることに重点を置いています。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:18
msgid "It is built on top of the xref:mongodb.adoc[MongoDB Client] extension."
msgstr "これは、 link:mongodb.html[MongoDB Client]エクステンションの上に構築されています。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:19
#, no-wrap
msgid "First: an example"
msgstr "最初に:例"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:22
msgid "Panache allows you to write your MongoDB entities like this:"
msgstr "Panacheでは、MongoDBのエンティティをこのように書くことができます。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:54
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:60
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:62
msgid "The solution is located in the `mongodb-panache-quickstart` {quickstarts-tree-url}/mongodb-panache-quickstart[directory]."
msgstr "ソリューションは `mongodb-panache-quickstart` {quickstarts-tree-url}/mongodb-panache-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:63
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:66
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:75
msgid "If you don't want to generate a new project, add the dependency in your build file:"
msgstr "新しいプロジェクトを生成したくない場合は、ビルドファイルに依存関係を追加してください。"

#. type: Block title
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:77
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:96
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1022
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1109
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:86
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:116
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1032
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1119
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:94
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr "プロジェクトがすでに他のアノテーションプロセッサーを使用するように設定されている場合、追加でPanacheアノテーションプロセッサーを追加する必要があります:"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:122
#, no-wrap
msgid "Setting up and configuring MongoDB with Panache"
msgstr "Panache による MongoDB のセットアップおよび設定"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:125
msgid "To get started:"
msgstr "始めるには"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:127
msgid "add your settings in `{config-file}`"
msgstr "`{config-file}` に設定を追加します。"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:128
msgid "Make your entities extend `PanacheMongoEntity` (optional if you are using the repository pattern)"
msgstr "エンティティが `PanacheMongoEntity` を継承するようにする（リポジトリパターンを使用している場合はオプション）。"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:129
msgid "Optionally, use the `@MongoEntity` annotation to specify the name of the collection, the name of the database or the name of the client."
msgstr "オプションとして、 `@MongoEntity` アノテーションを使用して、コレクションの名前、データベースの名前、またはクライアントの名前を指定します。"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:131
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "次に、関連する設定プロパティを `{config-file}` に追加します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:141
msgid "The `quarkus.mongodb.database` property will be used by MongoDB with Panache to determine the name of the database where your entities will be persisted (if not overridden by `@MongoEntity`)."
msgstr "`quarkus.mongodb.database` プロパティは、MongoDB with Panache でエンティティを永続化するデータベースの名前を決定するのに使われます（ `@MongoEntity` でオーバーライドされていない場合）。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:143
msgid "The `@MongoEntity` annotation allows configuring:"
msgstr "`@MongoEntity` のアノテーションでは次の設定が可能です。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:145
msgid "the name of the client for multi-tenant application, see xref:mongodb.adoc#multiple-mongodb-clients[Multiple MongoDB Clients]. Otherwise, the default client will be used."
msgstr "マルチテナントアプリケーション用のクライアントの名前を指定することもできます。 xref:mongodb.adoc#multiple-mongodb-clients[Multiple MongoDB Clients] を参照してください。それ以外の場合は、デフォルトのクライアントを使います。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:146
msgid "the name of the database, otherwise, the `quarkus.mongodb.database` property will be used."
msgstr "データベースの名前。そうでない場合は `quarkus.mongodb.database` プロパティが使用されます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:147
msgid "the name of the collection, otherwise the simple name of the class will be used."
msgstr "コレクションの名前。そうでない場合はクラスのシンプルな名前が使われます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:149
msgid "For advanced configuration of the MongoDB client, you can follow the xref:mongodb.adoc#configuring-the-mongodb-database[Configuring the MongoDB database guide]."
msgstr "MongoDBクライアントの高度な設定については、 link:mongodb.html#configuring-the-mongodb-database[Configuring the MongoDB database ガイド]に従ってください。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:150
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解決策1:アクティブレコードパターンを使用する"

#. type: Title ===
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:152
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:305
#, no-wrap
msgid "Defining your entity"
msgstr "エンティティの定義"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:172
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:322
msgid "Annotating with `@MongoEntity` is optional. Here the entity will be stored in the `ThePerson` collection instead of the default `Person` collection."
msgstr "`@MongoEntity` でのアノテーションはオプションです。ここでは、エンティティは、デフォルトの `Person` コレクションではなく、 `ThePerson` コレクションに保存されます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:174
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr "MongoDB with Panacheでは、link:{mongodb-doc-root-url}/bson/pojos/[PojoCodecProvider] を使用してエンティティを MongoDB `Document` に変換します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:176
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:326
msgid "You will be allowed to use the following annotations to customize this mapping:"
msgstr "このマッピングをカスタマイズするために、以下のアノテーションを使用することができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:178
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:328
msgid "`@BsonId`: allows you to customize the ID field, see <<custom-ids,Custom IDs>>."
msgstr "`@BsonId`: IDフィールドをカスタマイズすることができます。「 link:#custom-ids[カスタムID]」を参照してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:179
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:329
msgid "`@BsonProperty`: customize the serialized name of the field."
msgstr "`@BsonProperty`: フィールドのシリアル化された名前をカスタマイズします。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:180
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:330
msgid "`@BsonIgnore`: ignore a field during the serialization."
msgstr "`@BsonIgnore`: シリアル化の際にフィールドを無視することができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:182
msgid "If you need to write accessors, you can:"
msgstr "アクセサを書く必要がある場合は、以下のようにできます。"

#. type: Title ===
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:206
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:374
#, no-wrap
msgid "Most useful operations"
msgstr "最も便利な操作"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:209
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "エンティティーを記述したら、ここでは実行できる最も一般的な操作を紹介します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:264
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:432
msgid "All `list` methods have equivalent `stream` versions."
msgstr "すべての `list` メソッドは、同等の `stream` バージョンがあります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:275
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:443
msgid "A `persistOrUpdate()` method exist that persist or update an entity in the database, it uses the __upsert__ capability of MongoDB to do it in a single query."
msgstr "`persistOrUpdate()` メソッドは、データベース内のエンティティを永続化または更新するために存在し、MongoDB の _upsert_機能を使用して単一のクエリでそれを行います。"

#. type: Title ===
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:276
#, no-wrap
msgid "Adding entity methods"
msgstr "エンティティメソッドの追加"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:303
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解決策2：リポジトリパターンの使用"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:324
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr "MongoDB with Panacheでは、 link:{mongodb-doc-root-url}/bson/pojos/[PojoCodecProvider] を使用してエンティティを MongoDB `Document` に変換します。"

#. type: Title ===
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:334
#, no-wrap
msgid "Defining your repository"
msgstr "リポジトリの定義"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:377
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "リポジトリを書くことで実行可能な最も一般的な操作は以下の通りです。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:448
#, no-wrap
msgid "Writing a JAX-RS resource"
msgstr "JAX-RS リソースの書き方"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:451
msgid "First, include one of the RESTEasy extensions to enable JAX-RS endpoints, for example, add the `io.quarkus:quarkus-resteasy-reactive-jackson` dependency for JAX-RS and JSON support."
msgstr "まず、JAX-RSエンドポイントを有効にするために、RESTEasyのエクステンションの1つを含めます。例えば、JAX-RSとJSONのサポートのために、 `io.quarkus:quarkus-resteasy-reactive-jackson` の依存関係を追加します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:453
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "そして、次のようなリソースを作成することで、Personエンティティの作成/読み取り/更新/削除が可能になります。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:508
#, no-wrap
msgid "Advanced Query"
msgstr "アドバンスドクエリー"

#. type: Title ===
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:510
#, no-wrap
msgid "Paging"
msgstr "ページング"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:546
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 型には、ページングやリターンストリームを処理するための他の多くのメソッドがあります。"

#. type: Title ===
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:547
#, no-wrap
msgid "Using a range instead of pages"
msgstr "ページではなく範囲を使用する"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:550
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` では、範囲ベースのクエリも可能です。"

#. type: Title ===
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:572
#, no-wrap
msgid "Sorting"
msgstr "ソート"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:575
msgid "All methods accepting a query string also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "クエリ文字列を受け付けるすべてのメソッドは、オプションで `Sort` パラメータも受け付けるので、ソートを抽象化することができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:585
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` クラスには、列を追加したり、ソート方向を指定したりするメソッドが豊富に用意されています。"

#. type: Title ===
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:586
#, no-wrap
msgid "Simplified queries"
msgstr "シンプルなクエリ"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:589
msgid "Normally, MongoDB queries are of this form: `{'firstname': 'John', 'lastname':'Doe'}`, this is what we call MongoDB native queries."
msgstr "通常、MongoDB のクエリは次のような形式です。 `{'firstname': 'John', 'lastname':'Doe'}` 、これを MongoDB ネイティブクエリと呼んでいます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:594
msgid "If your query does not start with `{`, we will consider it a PanacheQL query:"
msgstr "`{` で始まらないクエリは、PanacheQL クエリとみなします。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:596
msgid "`<singlePropertyName>` (and single parameter) which will expand to `{'singleColumnName': '?1'}`"
msgstr "`<singlePropertyName>` (およびシングルパラメータ) は `{'singleColumnName': '?1'}`に展開されます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:597
msgid "`<query>` will expand to `{<query>}` where we will map the PanacheQL query to MongoDB native query form. We support the following operators that will be mapped to the corresponding MongoDB operators: 'and', 'or' ( mixing 'and' and 'or' is not currently supported), '=', '>', '>=', '<', '<=', '!=', 'is null', 'is not null', and 'like' that is mapped to the MongoDB `$regex` operator (both String and JavaScript patterns are supported)."
msgstr "`<query>` は `{<query>}` に展開され、PanacheQL のクエリを MongoDB のネイティブクエリ形式にマッピングします。以下の演算子をサポートしており、対応するMongoDBの演算子にマッピングされます。'and', 'or' ('and' と 'or' の混合は現在サポートされていません)、 '=', '&gt;', '&gt;=', '&lt;', '&lt;=', '!=', 'is null', 'is not null', そして MongoDB `$regex` 演算子にマッピングされる 'like' (String と JavaScript の両方のパターンをサポートしています)。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:599
msgid "Here are some query examples:"
msgstr "クエリの例を紹介します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:601
msgid "`firstname = ?1 and status = ?2` will be mapped to `{'firstname': ?1, 'status': ?2}`"
msgstr "`firstname = ?1 and status = ?2` は `{'firstname': ?1, 'status': ?2}`にマッピングされます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:602
msgid "`amount > ?1 and firstname != ?2` will be mapped to `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}`"
msgstr "`amount > ?1 and firstname != ?2` は `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}` にマッピングされます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:603
msgid "`lastname like ?1` will be mapped to `{'lastname': {'$regex': ?1}}`. Be careful that this will be link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB regex] support and not SQL like pattern."
msgstr "`lastname like ?1` は `{'lastname': {'$regex': ?1}}` にマッピングされます。これは link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB の正規表現]をサポートするもので、SQL のようなパターンではないことに注意しましょう。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:604
msgid "`lastname is not null` will be mapped to `{'lastname':{'$exists': true}}`"
msgstr "`lastname is not null` は `{'lastname':{'$exists': true}}` にマッピングされます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:605
msgid "`status in ?1` will be mapped to `{'status':{$in: [?1]}}`"
msgstr "`status in ?1` は `{'status':{$in: [?1]}}`にマッピングされます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:615
msgid "MongoDB with Panache also supports extended MongoDB queries by providing a `Document` query, this is supported by the find/list/stream/count/delete/update methods."
msgstr "MongoDB with Panacheは、 `Document` クエリを提供することでMongoDBの拡張クエリもサポートしています。これはfind/list/stream/count/deleteメソッドでサポートされています。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:620
msgid "For these operations, you can express the update document the same way you express your queries, here are some examples:"
msgstr "これらの操作では、クエリを表現するのと同じように、更新文書を表現することができます。以下に例を示します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:622
msgid "`<singlePropertyName>` (and single parameter) which will expand to the update document `{'$set' : {'singleColumnName': '?1'}}`"
msgstr "`<singlePropertyName>` (およびシングルパラメーター)で、更新ドキュメント `{'$set' : {'singleColumnName': '?1'}}` に展開します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:623
msgid "`firstname = ?1 and status = ?2` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr "`firstname = ?1 and status = ?2` は、更新ドキュメント `{'$set' : {'firstname': ?1, 'status': ?2}}` にマッピングされます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:624
msgid "`firstname = :firstname and status = :status` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr "`firstname = :firstname and status = :status` は、更新ドキュメント `{'$set' : {'firstname': :firstname, 'status': :status}}` にマッピングされます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:625
msgid "`{'firstname' : ?1 and 'status' : ?2}` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr "`{'firstname' : ?1 and 'status' : ?2}` は、更新ドキュメント `{'$set' : {'firstname': ?1, 'status': ?2}}` にマップされます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:626
#, fuzzy
msgid "`{'firstname' : :firstname and 'status' : :status}` ` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr "`{'firstname' : :firstname and 'status' : :status}` は更新ドキュメントにマッピングされる `{'$set' : {'firstname': :firstname, 'status': :status}}`"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:627
msgid "`{'$inc': {'cpt': ?1}}` will be used as-is"
msgstr "`{'$inc': {'cpt': ?1}}` はそのまま使用されます。"

#. type: Title ===
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:628
#, no-wrap
msgid "Query parameters"
msgstr "クエリパラメーター"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:631
msgid "You can pass query parameters, for both native and PanacheQL queries, by index (1-based) as shown below:"
msgstr "ネイティブクエリとPanacheQLクエリの両方で、以下のようにインデックス（1ベース）ごとにクエリパラメータを渡すことができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:639
msgid "Or by name using a `Map`:"
msgstr "または、 `Map` を使った名前で、"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:650
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "または便利なクラスである `Parameters` をそのまま使用するか、 `Map` を構築する。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:663
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "すべてのクエリ操作は、インデックス( `Object…​`)または名前( `Map<String,Object>` または `Parameters`)でパラメータを渡すことができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:665
msgid "When you use query parameters, be careful that PanacheQL queries will refer to the Object parameters name but native queries will refer to MongoDB field names."
msgstr "クエリパラメータを使う場合、PanacheQLのクエリはObjectパラメータ名を参照しますが、ネイティブのクエリはMongoDBのフィールド名を参照するので注意が必要です。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:667
msgid "Imagine the following entity:"
msgstr "次のようなエンティティを想像してみてください。"

#. type: Title ===
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:689
#, no-wrap
msgid "Query projection"
msgstr "クエリの投影"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:692
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "クエリの投影は、 `find()` のメソッドが返す `PanacheQuery` オブジェクトに対して `project(Class)` のメソッドで行うことができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:701
msgid "Projection can be done for both PanacheQL and native queries."
msgstr "投影は、PanacheQLとネイティブクエリの両方で行うことができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:734
msgid "Using `@BsonProperty` is not needed to define custom column mappings, as the mappings from the entity class will be used."
msgstr "エンティティクラスのマッピングが使用されるため、カスタムカラムマッピングを定義するために `@BsonProperty` を使用する必要はありません。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:736
msgid "You can have your projection class extends from another class. In this case, the parent class also needs to have use `@ProjectionFor` annotation."
msgstr "投影クラスが他のクラスを継承している場合があります。この場合、親クラスも `@ProjectionFor` アノテーションを持つ必要があります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:738
msgid "If you run Java 17+, records are a good fit for projection classes."
msgstr "Java 17+を実行する場合、レコード型は投影クラスと相性が良いです。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:739
#, no-wrap
msgid "Query debugging"
msgstr "クエリのデバッグ"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:742
msgid "As MongoDB with Panache allows writing simplified queries, it is sometimes handy to log the generated native queries for debugging purpose."
msgstr "MongoDB with Panacheではシンプルなクエリを書くことができますが、生成されたネイティブクエリをログに残しておくと、デバッグの際に便利なことがあります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:744
msgid "This can be achieved by setting to DEBUG the following log category inside your `application.properties`:"
msgstr "これは、 `application.properties` の中で以下のログカテゴリーを DEBUG に設定することで実現できます。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:750
#, no-wrap
msgid "The PojoCodecProvider: easy object to BSON document conversion."
msgstr "PojoCodecProvider: オブジェクトからBSONドキュメントへの変換を簡単に行うことができます。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:765
#, no-wrap
msgid "Transactions"
msgstr "トランザクション"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:768
msgid "MongoDB offers ACID transactions since version 4.0."
msgstr "MongoDBは、バージョン4.0からACIDトランザクションを提供しています。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:770
msgid "To use them with MongoDB with Panache you need to annotate the method that starts the transaction with the `@Transactional` annotation."
msgstr "MongoDB with Panacheでこれらを使うには、トランザクションを開始するメソッドに `@Transactional` アノテーションを付ける必要があります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:775
msgid "Transaction support inside MongoDB with Panache is still experimental."
msgstr "MongoDB with Panache内部のトランザクションサポートはまだ実験的なものです。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:776
#, no-wrap
msgid "Custom IDs"
msgstr "カスタムID"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:820
msgid "If you use the standard `ObjectId` ID type, don't forget to retrieve your entity by creating a new `ObjectId` when the identifier comes from a path parameter. For example:"
msgstr "標準の `ObjectId` ID型を使用する場合、識別子がパスパラメータから来ているときは、新しい `ObjectId` を作成してエンティティを取得することを忘れないでください。例えば以下のように行います。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:831
#, no-wrap
msgid "Working with Kotlin Data classes"
msgstr "Kotlin のデータクラスで作業する"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:834
msgid "Kotlin data classes are a very convenient way of defining data carrier classes, making them a great match to define an entity class."
msgstr "Kotlinのデータクラスは、データキャリアクラスを定義する非常に便利な方法であり、エンティティクラスを定義するのに適しています。"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:839
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider], a MongoDB codec which mandates the presence of a parameterless constructor."
msgstr "MongoDB with Panache は link:{mongodb-doc-root-url}/bson/pojos[PojoCodecProvider] を使用します。これは MongoDB のコーデックで、パラメータなしのコンストラクタの存在を義務付けています。"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:845
msgid "__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__"
msgstr "_JVMでは、生成されたクラスがパラメータレス・コンストラクタを持つ必要がある場合、すべてのプロパティのデフォルト値を指定する必要があります（「コンストラクタ」を参照）。_"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:847
msgid "If for whatever reason, the aforementioned solution is deemed unacceptable, there are alternatives."
msgstr "何らかの理由で前述の解決策が受け入れられないと判断された場合、代替手段があります。"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:855
msgid "This will only work when the entity extends `PanacheMongoEntityBase` and not `PanacheMongoEntity`, as the ID field also needs to be included in the constructor."
msgstr "これは、エンティティが  `PanacheMongoEntity` ではなく `PanacheMongoEntityBase` を拡張している場合にのみ機能します。なぜなら、ID フィールドもコンストラクタに含める必要があるからです。"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:857
msgid "An example of a `Person` class defined as a Kotlin data class would look like:"
msgstr "Kotlinのデータクラスとして定義された `Person` クラスの例は次のようになります。"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:871
msgid "Here we use `var` but note that `val` can also be used."
msgstr "ここでは、 `var` を使用していますが、 `val` も使用できることに注意してください。"

#. type: delimited block =
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:873
msgid "The `@BsonId` annotation is used instead of `@BsonProperty(\"_id\")` for brevity's sake, but use of either is valid."
msgstr "簡潔にするために `@BsonProperty(\"_id\")` の代わりに `@BsonId` のアノテーションを使用していますが、どちらを使用しても構いません。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:879
msgid "For MongoDB with Panache, you could use the `@MongoEntity` annotation on your data class for this:"
msgstr "MongoDB with Panache では、データクラスに `@MongoEntity` アノテーションを使用することができます。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:891
#, no-wrap
msgid "Reactive Entities and Repositories"
msgstr "リアクティブエンティティとレポジトリー"

#. type: Block title
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:898
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:905
msgid "The reactive variant of the `Person` class will be:"
msgstr "`Person` クラスのリアクティブ・バリアントは以下のようになります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:929
msgid "See the equivalent methods from the imperative example with the reactive variant:"
msgstr "リアクティブ バリアントを持つ命令型の例から、同等のメソッドを見てみましょう。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:985
msgid "If you use MongoDB with Panache in conjunction with RESTEasy Reactive, you can directly return a reactive type inside your JAX-RS resource endpoint."
msgstr "RESTEasyでMongoDB with Panacheを併用している場合、 `quarkus-resteasy-mutiny` エクステンションを含めれば、JAX-RSリソースエンドポイント内でリアクティブ型を直接返すことができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:989
msgid "It allows more advanced reactive use cases, for example, you can use it to send server-sent events (SSE) via RESTEasy Reactive:"
msgstr "これにより、より高度なリアクティブなユースケースが可能となり、例えば、RESTEasyを介してSSE（Server-Sent Event）を送信するために使用することができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1008
msgid "`@RestStreamElementType(MediaType.APPLICATION_JSON)` tells RESTEasy Reactive to serialize the object in JSON."
msgstr "`@SseElementType(MediaType.APPLICATION_JSON)` がRESTEasyにJSONでオブジェクトをシリアライズするように指示します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1010
msgid "Transactions are not supported for Reactive Entities and Repositories."
msgstr "トランザクションは、Reactive エンティティおよびRepositoryではサポートされていません。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1011
#, no-wrap
msgid "Mocking"
msgstr "モック"

#. type: Title ===
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1013
#, no-wrap
msgid "Using the active-record pattern"
msgstr "アクティブ・レコード・パターンの使用"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1020
msgid "Add this dependency to your `pom.xml`:"
msgstr "この依存関係を `pom.xml` に追加してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1038
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1125
msgid "Given this simple entity:"
msgstr "このシンプルなエンティティがある場合に"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1052
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1150
msgid "You can write your mocking test like this:"
msgstr "モッキングテストはこのように書くことができます。"

#. type: Title ===
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1103
#, no-wrap
msgid "Using the repository pattern"
msgstr "リポジトリパターンの使用"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1138
msgid "And this repository:"
msgstr "そしてこのリポジトリ。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1200
#, no-wrap
msgid "How and why we simplify MongoDB API"
msgstr "MongoDB の API をシンプルにする方法と理由"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1216
msgid "MongoDB queries are JSON based, so you will need some String manipulation or using the `Document` type, and it will need a lot of boilerplate code."
msgstr "MongoDB のクエリは JSON ベースなので、文字列の操作や `Document` 型を使う必要があり、多くのボイラープレートコードが必要になります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1218
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Panacheでは、これらの問題に対して、定見に基づいたアプローチをとりました。"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1231
msgid "That's all there is to it: with Panache, MongoDB has never looked so trim and neat."
msgstr "以上となります: Panacheを使えば、MongoDBがこれほどまでに整然としたものになるのです。"

#. type: Title ==
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1232
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#. type: Plain text
#: upstream/_versions/2.16/guides/mongodb-panache.adoc:1235
msgid "MongoDB with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "MongoDB with Panacheは、エンティティに対してコンパイル時にバイトコードを強化します。"
