msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"Quarkus provides form based authentication that works in a similar manner to traditional Servlet form based auth. Unlike\n"
"traditional form authentication, the authenticated user is not stored in an HTTP session, as Quarkus does not provide\n"
"clustered HTTP session support. Instead, the authentication information is stored in an encrypted cookie, which can\n"
"be read by all members of the cluster (provided they all share the same encryption key)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"The encryption key can be set using the `quarkus.http.auth.session.encryption-key` property, and it must be at least 16 characters\n"
"long. This key is hashed using SHA-256 and the resulting digest is used as a key for AES-256 encryption of the cookie\n"
"value. This cookie contains an expiry time as part of the encrypted value, so all nodes in the cluster must have their\n"
"clocks synchronized. At one minute intervals a new cookie will be generated with an updated expiry time if the session\n"
"is in use."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"Once your application is accepting secure connections, the next step is to configure a `quarkus.http.ssl.certificate.trust-store-file`\n"
"holding all the certificates that your application should trust as well as how your application should ask for certificates when\n"
"a client (e.g.: browser or another service) tries to access one of its protected resources."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"Defines that the server should *always* ask certificates from clients. You can relax this behavior by using `REQUEST` so\n"
"that the server should still accept requests without a certificate. Useful when you are also supporting authentication methods other than\n"
"mTLS."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"Once the incoming request matches a valid certificate in the truststore, your application should be able to obtain the subject by\n"
"just injecting a `SecurityIdentity` as follows:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"The information from the client certificate can be used to enhance Quarkus `SecurityIdentity`. For example, one can add new roles after checking a client certificate subject name, and so on.\n"
"Please see the xref:security-customization.adoc#security-identity-customization[SecurityIdentity Customization] section for more information about customizing Quarkus `SecurityIdentity`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"By default, Quarkus does what we call proactive authentication. This means that if an incoming request has a\n"
"credential then that request will always be authenticated (even if the target page does not require authentication)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"This means that requests with an invalid credential will always be rejected, even for public pages. You can change\n"
"this behavior and only authenticate when required by setting `quarkus.http.auth.proactive=false`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"If you disable proactive authentication then the authentication process will only be run when an identity is requested,\n"
"either because there are security rules that requires the user to be authenticated, or due to programmatic access to the\n"
"current identity."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"Note that if proactive authentication is in use accessing the `SecurityIdentity` is a blocking operation. This is because\n"
"authentication may not have happened yet, and accessing it may require calls to external systems such as databases that\n"
"may block. For blocking applications this is no problem, however if you have disabled authentication in a reactive\n"
"application this will fail (as you cannot do blocking operations on the IO thread). To work around this you need to\n"
"`@Inject` an instance of `io.quarkus.security.identity.CurrentIdentityAssociation`, and call the\n"
"`Uni<SecurityIdentity> getDeferredIdentity();` method. You can then subscribe to the resulting `Uni` and will be notified\n"
"when authentication is complete and the identity is available."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"It's still possible to access the `SecurityIdentity` synchronously with `public SecurityIdentity getIdentity()`\n"
"in the xref:resteasy-reactive.adoc[RESTEasy Reactive] from endpoints annotated with `@RolesAllowed`, `@Authenticated`,\n"
"or with respective configuration authorization checks as authentication has already happened. The same is also valid\n"
"for the xref:reactive-routes.adoc[Reactive routes] if a route response is synchronous."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"xref:security-authorization.adoc#standard-security-annotations[Standard security annotations] on CDI beans are not supported on IO thread if a non-void secured method returns a value synchronously and proactive authentication is disabled, as they need to access the `SecurityIdentity`.\n"
"In the example below, we have defined `HelloResource` and `HelloService`. It's easy to see that any GET request to `/hello` will run on IO thread and throw `BlockingOperationNotAllowedException` exception.\n"
"There is more than one way to fix the example:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc
msgid ""
"Some HTTP authentication mechanisms need to handle authentication exceptions themselves in order to create a correct authentication challenge.\n"
"For example, `io.quarkus.oidc.runtime.CodeAuthenticationMechanism` which manages OpenId Connect authorization code flow authentication, needs to build a correct redirect URL, cookies, etc.\n"
"For that reason, using custom exception mappers to customize authentication exceptions thrown by such mechanisms is not recommended.\n"
"In such cases, a safer way to customize authentication exceptions is to make sure the proactive authentication is not disabled and use Vert.x HTTP route failure handlers, as events come to the handler with the correct response status and headers.\n"
"To that end, the only thing that needs to be done is to customize the response like this:"
msgstr ""

#. type: Title =
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:7
#, no-wrap
msgid "Built-In Authentication Support"
msgstr "ビルトイン認証サポート"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:12
msgid "The following section describes the Quarkus built-in authentication mechanisms for HTTP based FORM, BASIC, and Mutual TLS authentication. Proactive authentication is also described."
msgstr "このドキュメントでは、HTTPベースのFORM認証、BASIC認証、相互TLS認証、およびプロアクティブ認証のためのQuarkusのビルトイン認証メカニズムについて説明します。また、プロアクティブ認証についても説明します。"

#. include::security-enabling-basic-auth-howto.adoc[leveloffset=+2]
#. How to I convert this how-to into a guide that appears alongside all the other guides?
#. type: Title ==
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:20
#, no-wrap
msgid "Form Based Authentication"
msgstr "フォームベース認証"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:34
msgid "Single Page Application (SPA) typically wants to avoid redirects, this can be done by removing default page paths:"
msgstr "シングルページアプリケーション（SPA）は通常、リダイレクトを避けたいものですが、これはデフォルトページパスを削除することによって実現できます:"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:46
msgid "The following properties can be used to configure form based auth:"
msgstr "以下のプロパティーを使用して、フォームベース認証を設定することができます。"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:50
#, no-wrap
msgid "Mutual TLS Authentication"
msgstr "相互TLS認証"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:53
msgid "Quarkus provides mTLS authentication so that you can authenticate users based on their X.509 certificates."
msgstr "QuarkusはmTLS認証を提供しているので、X.509証明書に基づいてユーザーを認証できます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:55
msgid "To use this authentication method, you should first enable SSL for your application. For more details, check the xref:http-reference.adoc#ssl[Supporting secure connections with SSL] guide."
msgstr "この認証方法を使用するには、まずアプリケーションでSSLを有効にする必要があります。詳しくは、 link:http-reference.html#ssl[「Supporting secure connections with SSL]」をご覧ください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:72
msgid "Configures a key store where the server's private key is located."
msgstr "サーバーの秘密鍵が置かれている鍵ストアを設定します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:73
msgid "Configures a trust store from where the trusted certificates are going to be loaded from."
msgstr "信頼された証明書がロードされるトラストストアを構成します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:77
msgid "Defines a policy where only authenticated users should have access to resources from your application."
msgstr "認証されたユーザーのみがアプリケーションからリソースにアクセスできるようにするポリシーを定義します。"

#. type: Block title
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:82
#, no-wrap
msgid "Obtaining the subject"
msgstr "subjectの取得"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:96
msgid "You should also be able to get the certificate as follows:"
msgstr "また、以下のように証明書を取得できるようにしておきましょう:"

#. type: Block title
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:98
#, no-wrap
msgid "Obtaining the certificate"
msgstr "証明書の取得"

#. type: Title ===
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:108
#, no-wrap
msgid "Authorization"
msgstr "認可"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:114
#, no-wrap
msgid "Proactive Authentication"
msgstr "プロアクティブ認証"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:144
msgid "switch to a worker thread (annotate `hello` endpoint with `@Blocking`)"
msgstr "ワーカスレッドに切り替える ( `hello` のエンドポイントに `@Blocking` のアノテーションを付ける)"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:145
msgid "change `sayHello` method return type (use reactive or asynchronous data type)"
msgstr "`sayHello` メソッドの戻り値の型を変更する（リアクティブまたは非同期データ型を使用する）。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:146
msgid "arguably the safest way is to move `@RolesAllowed` annotation to the endpoint, as accessing `SecurityIdentity` from endpoint methods is never the blocking operation"
msgstr "エンドポイントメソッドから `SecurityIdentity` へのアクセスはブロック操作にならないため、 `@RolesAllowed` のアノテーションをエンドポイントに移動させるのが最も安全な方法であることは間違いありません。"

#. type: Title ===
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:188
#, no-wrap
msgid "How to customize authentication exception responses"
msgstr "認証の例外応答をカスタマイズする方法"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:191
msgid "You can use JAX-RS `ExceptionMapper` to capture Quarkus Security authentication exceptions such as `io.quarkus.security.AuthenticationFailedException`, for example:"
msgstr "JAX-RS `ExceptionMapper` を使用すると、例えば `io.quarkus.security.AuthenticationFailedException` のような Quarkus Security の認証例外を捕捉できます。例:"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:254
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-built-in-authentication-support-concept.adoc:256
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"
