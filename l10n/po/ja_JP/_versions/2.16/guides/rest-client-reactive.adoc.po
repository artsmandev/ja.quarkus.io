msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"This guide explains how to use the REST Client Reactive in order to interact with REST APIs.\n"
"REST Client Reactive is the REST Client implementation compatible with RESTEasy Reactive."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"If your application uses a client and exposes REST endpoints, please use xref:resteasy-reactive.adoc[RESTEasy Reactive]\n"
"for the server part."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `rest-client-reactive-jackson` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.\n"
"Our first order of business is to set up the model we will be using, in the form of a `Extension` POJO."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for\n"
"CDI injection as a REST Client"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"When the `quarkus-rest-client-reactive-jackson` extension is installed, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.\n"
"It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"The `getById` method above is a blocking call. It should not be invoked on the event loop.\n"
"The <<async-support>> section describes how to make non-blocking calls."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"The easiest way to specify a query parameter is to annotate a client method parameter with the `@QueryParam` or the `@RestQuery`.\n"
"The `@RestQuery` is equivalent of the `@QueryParam`, but with optional name. Additionally, it can be also used to pass query parameters\n"
"as a `Map`, which is convenient if parameters are not known in advance."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"Another way to add query parameters to a request is to use `@io.quarkus.rest.client.reactive.ClientQueryParam` on either the REST client interface or a specific method of the interface.\n"
"The annotation can specify the query parameter name while the value can either be a constant, a configuration property or it can be determined by invoking a method."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"By placing `@ClientQueryParam` on the interface, we ensure that `my-param` will be added to all requests of the client.\n"
"Because we used the `${...}` syntax, the actual value of the parameter will be obtained using the `my.property-value` configuration property."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"Note that if an interface method contains an argument annotated with `@QueryParam`, that argument will take\n"
"priority over anything specified in any `@ClientQueryParam` annotation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of\n"
"(or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in the example below."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.\n"
"The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"Having this configuration means that all requests performed using `org.acme.rest.client.ExtensionsService` will use `https://stage.code.quarkus.io/api` as the base URL.\n"
"Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client-reactive` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client-reactive`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"Instead of annotating the client with `@RegisterRestClient`, and injecting\n"
"a client with `@RestClient`, you can also create REST Client programmatically.\n"
"You do that with `RestClientBuilder`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"Next, we need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the test to:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"To get the full power of the reactive nature of the client, you can use the non-blocking flavor of REST Client Reactive extension,\n"
"which comes with support for `CompletionStage` and `Uni`.\n"
"Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"Please note that since the invocation is now non-blocking, the `idAsync` method will be invoked on the event loop,\n"
"i.e. will not get offloaded to a worker pool thread and thus reducing hardware resource utilization.\n"
"See xref:resteasy-reactive.adoc#execution-model[Resteasy reactive execution model] for more details."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"The previous snippet uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"When returning a `Uni`, every _subscription_ invokes the remote service.\n"
"It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"If you use a `CompletionStage`, you would need to call the service's method to retry.\n"
"This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n"
"More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"When using Kotlin, if default methods are going to be leveraged, then the Kotlin compiler needs to be configured to use Java's default interface capabilities.\n"
"See link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[this] for more details."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by\n"
"annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"The `@RegisterClientHeaders` annotation can also be used without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used.\n"
"If you make a REST client call from a REST resource, this factory will propagate all the headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property from the resource request to the client request. Individual header names are comma-separated."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"`ResponseExceptionMapper` also defines the `getPriority` method which is used in order to determine the priority with which `ResponseExceptionMapper` implementations will be called (implementations with a lower value for `getPriority` will be invoked first).\n"
"If `toThrowable` returns an exception, then that exception will be thrown. If `null` is returned, the next implementation of `ResponseExceptionMapper` in the chain will be called (if there is any)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"The class as written above, would not be automatically be used by any REST Client. To make it available to every REST Client of the application, the class needs to be annotated with `@Provider` (as long as `quarkus.rest-client-reactive.provider-autodiscovery` is not set to `false`).\n"
"Alternatively, if the exception handling class should only apply to specific REST Client interfaces, you can either annotate the interfaces with `@RegisterProvider(MyResponseExceptionMapper.class)`, or register it using configuration using the `providers` property of the proper `quarkus.rest-client` configuration group."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"REST Client Reactive allows sending data as multipart forms. This way you can for example\n"
"send files efficiently."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"Parameters specified as `File`, `Path`, `byte[]` or `Buffer` are sent as files and default to the\n"
"`application/octet-stream` MIME type. Other `@RestForm` parameter types default to the `text/plain`\n"
"MIME type. You can override these defaults with the `@PartType` annotation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"Any `@RestForm` parameter of the type `File`, `Path`, `byte[]` or `Buffer`, as well as any\n"
"annotated with `@PartType` automatically imply a `@Consumes(MediaType.MULTIPART_FORM_DATA)`\n"
"on the method if there is no `@Consumes` present."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"If there are `@RestForm` parameters that are not multipart-implying, then\n"
"`@Consumes(MediaType.APPLICATION_FORM_URLENCODED)` is implied."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"There are a few modes in which the form data can be encoded. By default,\n"
"Rest Client Reactive uses RFC1738.\n"
"You can override it by specifying the mode either on the client level,\n"
"by setting `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder property\n"
"to the selected value of `HttpPostRequestEncoder.EncoderMode` or\n"
"by specifying `quarkus.rest-client.multipart-post-encoder-mode` in your\n"
"`application.properties`. Please note that the latter works only for\n"
"clients created with the `@RegisterRestClient` annotation.\n"
"All the available modes are described in the link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation]"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"REST Client Reactive also supports receiving multipart messages.\n"
"As with sending, to parse a multipart response, you need to create a class that describes the response data, e.g."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"REST Client Reactive supports sending requests through a proxy.\n"
"It honors the JVM settings for it but also allows to specify both:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"If `proxy-address` is not set for the client but is set on the global level, the client uses the global settings.\n"
"Otherwise, the client uses the JVM settings."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"REST Client Reactive can log the requests it sends and the responses it receives.\n"
"To enable logging, add the `quarkus.rest-client.logging.scope` property to your `application.properties` and set it to:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"If you use a client injected with the `@RestClient` annotation, you can easily mock it for tests.\n"
"You can do it with Mockito's `@InjectMock` or with `QuarkusMock`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"In some cases you may want to mock the remote endpoint - the HTTP server - instead of mocking the client itself.\n"
"This may be especially useful for native tests, or for programmatically created clients."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"You can easily mock an HTTP Server with Wiremock.\n"
"The xref:rest-client.adoc#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client]\n"
"describes how to set it up in detail."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"While the REST Client Reactive extension aims to be a drop-in replacement for the REST Client extension, there are some differences\n"
"and limitations:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/rest-client-reactive.adoc
msgid ""
"the default scope of the client for the new extension is `@ApplicationScoped` while the `quarkus-rest-client` defaults to `@Dependent`\n"
"To change this behavior, set the `quarkus.rest-client-reactive.scope` property to the fully qualified scope name."
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:6
#, no-wrap
msgid "Using the REST Client Reactive"
msgstr "REST Client Reactiveの使用"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:21
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:27
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:29
msgid "The solution is located in the `rest-client-reactive-quickstart` {quickstarts-tree-url}/rest-client-reactive-quickstart[directory]."
msgstr "ソリューションは `rest-client-reactive-quickstart` {quickstarts-tree-url}/rest-client-reactive-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:30
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:33
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:39
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr "このコマンドは、REST エンドポイントを持つ Maven プロジェクトを生成し、 `rest-client` と `resteasy-jackson` のエクステンションをインポートします。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:41
msgid "the `resteasy-reactive-jackson` extension for the REST server support. Use `resteasy-reactive` instead if you do not wish to use Jackson;"
msgstr "REST サーバーサポート用の `resteasy-reactive-jackson` エクステンション。Jacksonを使用したくない場合は、代わりに `resteasy-reactive` を使用してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:42
msgid "the `rest-client-reactive-jackson` extension for the REST client support. Use `rest-client-reactive` instead if you do not wish to use Jackson"
msgstr "REST クライアントサポート用の `rest-client-reactive-jackson` エクステンション。Jackson を使用したくない場合は、代わりに `rest-client-reactive` を使用してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:50
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:52
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1093
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:61
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1103
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:66
#, no-wrap
msgid "Setting up the model"
msgstr "モデルのセットアップ"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:72
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr "`src/main/java/org/acme/rest/client/Extension.java` ファイルを作成し、以下の内容を設定します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:90
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr "上記のモデルは、サービスによって提供されるフィールドのサブセットに過ぎませんが、このガイドの目的には十分です。"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:91
#, no-wrap
msgid "Create the interface"
msgstr "インターフェースの作成"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:94
msgid "Using the REST Client Reactive is as simple as creating an interface using the proper JAX-RS and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr "REST Client Reactive の使用は、適切な JAX-RS および MicroProfile アノテーションを使用してインターフェイスを作成するのと同じくらい簡単です。この場合、インターフェイスは `src/main/java/org/acme/rest/client/ExtensionsService.java` に作成され、次の内容が含まれている必要があります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:116
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr "`getById` メソッドは、私たちのコードに、Code Quarkus API からidを指定してエクステンションを問い合わせる機能を与えます。クライアントがすべてのネットワーキングとマーシャリングを処理してくれるので、このような技術的な詳細は一切ありません。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:118
msgid "The purpose of the annotations in the code above is the following:"
msgstr "上のコードのアノテーションの目的は以下の通りです。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:122
msgid "`@Path`, `@GET` and `@QueryParam` are the standard JAX-RS annotations used to define how to access the service"
msgstr "`@Path` と `@GET` 、 `@QueryParam` はサービスへのアクセス方法を定義するために使用される標準的な JAX-RS アノテーションです。"

#. type: Title ===
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:138
#, no-wrap
msgid "Query Parameters"
msgstr "クエリーパラメーター"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:177
msgid "Request query will include parameter with key `name`"
msgstr "リクエストクエリーには `name` をキーとするパラメーターが含まれます"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:178
msgid "Each `Map` entry represents exactly one query parameter"
msgstr "各 `Map` エントリは、ちょうど 1 つのクエリーパラメーターを表します"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:179
msgid "`MultivaluedMap` allows you to send array values"
msgstr "`MultivaluedMap` は配列の値を送信することができます"

#. type: Title ====
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:180
#, no-wrap
msgid "Using @ClientQueryParam"
msgstr "@ClientQueryParam を使用"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:186
msgid "The following example shows the various possible usages:"
msgstr "次の例では、さまざまな使い方を紹介します:"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:214
msgid "When `getWithOtherParam` is called, in addition to the `my-param` query parameter, `some-other-param` with the value of `other` will also be added."
msgstr "`getWithOtherParam` を呼び出すと、クエリーパラメータ `my-param` に加え、 `some-other-param` に `other` の値が追加されます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:215
msgid "when `getFromMethod` is called, in addition to the `my-param` query parameter, `param-from-method` with the value of `test` (because that's what the `withParam` method returns when invoked with `param-from-method`) will also be added."
msgstr "`getFromMethod` を呼び出すと、 `my-param` のクエリパラメータに加えて、 `param-from-method` に `test` の値 ( `withParam` のメソッドが `param-from-method` と呼び出されたときに返すため) が追加されます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:223
msgid "More information about this annotation can be found on the javadoc of"
msgstr "このアノテーションの詳細については、javadocに記載されています"

#. type: Title ===
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:224
#, no-wrap
msgid "Path Parameters"
msgstr "パスパラメーター"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:252
#, no-wrap
msgid "Create the configuration"
msgstr "コンフィグレーションの作成"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:267
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr "`org.acme.rest.client.ExtensionsService` は、前のセクションで作成した `ExtensionsService` インターフェイスの完全修飾名と _一致しなければならない_ ことに注意してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:269
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use different configuration root than the fully qualified name of your interface."
msgstr "設定を容易にするために、`@RegisterRestClient` `configKey` プロパティーを使用して、インターフェイスの完全修飾名とは別の設定ルートを使用することができます。"

#. type: Title ===
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:286
#, no-wrap
msgid "Disabling Hostname Verification"
msgstr "ホスト名の検証を無効にする"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:289
msgid "To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:"
msgstr "特定のRESTクライアントのSSLホスト名検証を無効にするには、次のプロパティーを構成に追加します。"

#. type: delimited block =
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:297
msgid "This setting should not be used in production as it will disable the SSL hostname verification."
msgstr "この設定は、SSLホスト名検証を無効にするため、本番運用では使用しないでください。"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:299
#, no-wrap
msgid "Create the JAX-RS resource"
msgstr "JAX-RSリソースの作成"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:302
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr "`src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを以下の内容で作成してください:"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:330
msgid "There are two interesting parts in this listing:"
msgstr "このリストには 2 つの興味深い部分があります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:332
msgid "the client stub is injected with the `@RestClient` annotation instead of the usual CDI `@Inject`"
msgstr "クライアントスタブには、通常の CDI `@Inject` ではなく、`@RestClient` アノテーションが挿入されます。"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:333
#, no-wrap
msgid "Programmatic client creation with RestClientBuilder"
msgstr "RestClientBuilder を使用したプログラムによるクライアントの作成"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:340
msgid "With this approach the client interface could look as follows:"
msgstr "このアプローチでは、クライアントインターフェイスは次のようになります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:359
msgid "And the service as follows:"
msgstr "そして、次のようなサービス:"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:389
#, no-wrap
msgid "Use Custom HTTP Options"
msgstr "カスタムHTTPオプションの使用"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:392
msgid "The REST Client Reactive internally uses https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[the Vert.x HTTP Client] to make the network connections. The REST Client Reactive extensions allows configuring some settings via properties, for example:"
msgstr "REST Client Reactive は、内部的に https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[Vert.x HTTP クライアント] を使用して、ネットワーク接続をします。REST Client Reactiveのエクステンションでは、プロパティを使っていくつか設定できます。例えば、"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:394
msgid "`quarkus.rest-client.client-prefix.connect-timeout` to configure the connect timeout in milliseconds."
msgstr "`quarkus.rest-client.client-prefix.connect-timeout` で、接続タイムアウトをミリ秒単位で設定します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:395
msgid "`quarkus.rest-client.client-prefix.max-redirects` to limit the number of redirects."
msgstr "`quarkus.rest-client.client-prefix.max-redirects`でリダイレクトの回数を制限できます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:397
msgid "However, there are many more options within the Vert.x HTTP Client to configure the connections. See all the options in the Vert.x HTTP Client Options API in https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[this link]."
msgstr "しかし、Vert.x HTTP Client 内には、接続を設定するための多くのオプションがあります。 https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[このリンク] のVert.x HTTP Client Options API ですべてのオプションを参照してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:399
msgid "To fully customize the Vert.x HTTP Client instance that the REST Client Reactive is internally using, you can provide your custom HTTP Client Options instance via CDI or when programmatically creating your client."
msgstr "REST Client Reactive が内部で使用している Vert.x HTTP Client インスタンスを完全にカスタマイズするには、 カスタム HTTP Client Options インスタンスを CDI 経由またはプログラムによるクライアント作成時に変更できます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:401
msgid "Let's see an example about how to provide the HTTP Client Options via CDI:"
msgstr "ここでは、CDIを使用してHTTPクライアントオプションを提供する方法について、例を挙げて説明します:"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:425
msgid "Now, all the REST Clients will be using your custom HTTP Client Options."
msgstr "これで、すべてのRESTクライアントが、あなたのカスタムHTTPクライアントオプションを使用するようになります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:427
msgid "Another approach is to provide the custom HTTP Client options when creating the client programmatically:"
msgstr "もう一つの方法は、コードを用いてでクライアントを作成する際に、カスタムHTTPクライアントオプションを提供することです。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:468
msgid "the client will use the registered HTTP Client options over the HTTP Client options provided via CDI if any."
msgstr "クライアントはCDI経由で提供されたHTTPクライアントオプションよりも、登録されたHTTPクライアントオプションを使用します。"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:469
#, no-wrap
msgid "Update the test"
msgstr "テストの更新"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:507
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr "上のコードでは、 link:http://rest-assured.io/[REST Assured] の link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] 機能を使用しています。"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:510
#, no-wrap
msgid "Async Support"
msgstr "非同期サポート"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:541
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr "`src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを開き、以下の内容で更新してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:580
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr "非同期メソッドをテストするには、`ExtensionsResourceTest` に以下のテストメソッドを追加します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:597
msgid "The `Uni` version is very similar:"
msgstr "`Uni` 版は非常に似ています。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:622
msgid "The `ExtensionsResource` becomes:"
msgstr "`ExtensionsResource` は次のようになります。"

#. type: Block title
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:652
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:676
#, no-wrap
msgid "Custom headers support"
msgstr "カスタムヘッダーのサポート"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:679
msgid "There are a few ways in which you can specify custom headers for your REST calls:"
msgstr "REST 呼び出しのカスタムヘッダーを指定する方法はいくつかあります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:681
msgid "by registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `@RegisterClientHeaders` annotation"
msgstr "`@RegisterClientHeaders` アノテーションを用いて `ClientHeadersFactory` または `ReactiveClientHeadersFactory` を登録する。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:682
msgid "by specifying the value of the header with `@ClientHeaderParam`"
msgstr "`@ClientHeaderParam` でヘッダーの値を指定する"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:683
msgid "by specifying the value of the header by `@HeaderParam`"
msgstr "`@HeaderParam` でヘッダーの値を指定する"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:685
msgid "The code below demonstrates how to use each of these techniques:"
msgstr "以下のコードは、これらの各手法の使用方法を示しています。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:714
msgid "There can be only one `ClientHeadersFactory` per class. With it, you can not only add custom headers, but you can also transform existing ones. See the `RequestUUIDHeaderFactory` class below for an example of the factory."
msgstr "クラスごとに存在できる `ClientHeadersFactory` は 1 つだけです。これを使用すると、カスタムヘッダーを追加できるだけでなく、既存のヘッダーを変換することもできます。ファクトリーの例については、以下の `RequestUUIDHeaderFactory` クラスを参照してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:715
msgid "`@ClientHeaderParam` can be used on the client interface and on methods. It can specify a constant header value..."
msgstr "`@ClientHeaderParam` は、クライアントインターフェイスとメソッドで使用できます。一定のヘッダー値を指定できます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:716
msgid "... and a name of a method that should compute the value of the header. It can either be a static method or a default method in this interface"
msgstr "そして、ヘッダーの値を計算するメソッドの名前を指定します。このインターフェイスでは、静的メソッドまたはデフォルトメソッドのいずれかです。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:717
msgid "... as well as a value from your application's configuration"
msgstr "また、アプリケーションの設定値も使用します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:718
msgid "... or as a normal JAX-RS `@HeaderParam` annotated argument"
msgstr "あるいは、通常の JAX-RS の `@HeaderParam` アノテーションされた引数として使用します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:726
msgid "A `ClientHeadersFactory` can look as follows:"
msgstr "`ClientHeadersFactory` は次のようになります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:754
msgid "To specify a value for `${header.value}`, simply put the following in your `application.properties`:"
msgstr "`${header.value}` に値を指定するには、`application.properties` に以下のように記述するだけです。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:761
msgid "Also, there is a reactive flavor of `ClientHeadersFactory` that allows doing blocking operations. For example:"
msgstr "また、ブロッキング操作を実行できる `ClientHeadersFactory` のリアクティブフレーバーがあります。例えば:"

#. type: Title ===
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:795
#, no-wrap
msgid "Default header factory"
msgstr "デフォルトのヘッダーファクトリー"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:819
#, no-wrap
msgid "Exception handling"
msgstr "例外処理"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:822
msgid "The MicroProfile REST Client specification introduces the `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` whose purpose is to convert an HTTP response to an exception."
msgstr "MicroProfile REST クライアント仕様では、HTTP 応答を例外に変換することを目的とした `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` が導入されています。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:824
msgid "A simple example of implementing such a `ResponseExceptionMapper` for the `ExtensionsService` discussed above, could be:"
msgstr "上記の `ExtensionsService` にこのような `ResponseExceptionMapper` を実装する簡単な例は、次のとおりです。"

#. type: Title ===
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:845
#, no-wrap
msgid "Using @ClientExceptionMapper"
msgstr "@ClientExceptionMapper を使用する"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:848
msgid "A simpler way to convert HTTP response codes of 400 or above is to use the `@ClientExceptionMapper` annotation."
msgstr "400 以上の HTTP 応答コードを変換する簡単な方法は、`@ClientExceptionMapper` アノテーションを使用することです。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:850
msgid "For the `ExtensionsService` REST Client interface defined above, an example use of `@ClientExceptionMapper` would be:"
msgstr "上記で定義された `ExtensionsService` REST クライアントインターフェイスの場合、`@ClientExceptionMapper` の使用例は次のようになります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:874
msgid "Naturally this handling is per REST Client. `@ClientExceptionMapper` uses the default priority if the `priority` attribute is not set and the normal rules of invoking all handlers in turn apply."
msgstr "当然、この処理は REST クライアントごとに行われます。`@ClientExceptionMapper` は、`priority` 属性が設定されておらず、すべてのハンドラーを呼び出す通常のルールが適用される場合、デフォルトの優先度を使用します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:876
msgid "Methods annotated with `@ClientExceptionMapper` can also take a `java.lang.reflect.Method` parameter which is useful if the exception mapping code needs to know the REST Client method that was invoked and caused the exception mapping code to engage."
msgstr "`@ClientExceptionMapper` でアノテーションされたメソッドは、 `java.lang.reflect.Method` パラメータを取れます。これは、例外対応のコードは、呼び出されて例外を発生したREST Client メソッドを知る場合に便利です。"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:878
#, no-wrap
msgid "Multipart Form support"
msgstr "マルチパートフォームのサポート"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:881
msgid "REST Client Reactive support multipart messages."
msgstr "REST Client Reactive はマルチパートメッセージをサポートします。"

#. type: Title ===
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:882
#, no-wrap
msgid "Sending Multipart messages"
msgstr "マルチパートメッセージの送信"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:888
msgid "To send data as a multipart form, you can just use the regular `@RestForm` (or `@FormParam`) annotations:"
msgstr "データをマルチパートフォームとして送信するには、通常の `@RestForm` (または `@FormParam` ) アノテーションを使用します:"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:901
msgid "Naturally, you can also group these parameters into a containing class:"
msgstr "当然ながら、これらのパラメータを含むクラスにまとめられます:"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:935
msgid "You can also send JSON multiparts by specifying the `@PartType` annotation:"
msgstr "また、 `@PartType` アノテーションを指定することで、JSON のマルチパートも送信できます。"

#. type: Title ===
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:948
#, no-wrap
msgid "Receiving Multipart Messages"
msgstr "マルチパートメッセージの受信"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:965
msgid "uses the shorthand `@RestForm` annotation to make a field as a part of a multipart form"
msgstr "省略形の `@RestForm` アノテーションを使用して、マルチパートフォームの一部としてフィールドを作成します"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:966
msgid "the standard `@FormParam` can also be used. It allows to override the name of the multipart part."
msgstr "標準の `@FormParam` も使用できます。マルチパートパートの名前を上書きできます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:968
msgid "Then, create an interface method that corresponds to the call and make it return the `FormDto`:"
msgstr "次に、呼び出しに対応するインターフェイスメソッドを作成し、`FormDto` を返すようにします。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:977
msgid "At the moment, multipart response support is subject to the following limitations:"
msgstr "現時点では、マルチパート応答のサポートには次の制限があります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:979
msgid "files sent in multipart responses can only be parsed to `File`, `Path` and `FileDownload`"
msgstr "マルチパート応答で送信されたファイルは、`File`、`Path`、および `FileDownload` にのみ解析できます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:980
msgid "each field of the response type has to be annotated with `@PartType` - fields without this annotation are ignored"
msgstr "応答タイプの各フィールドには `@PartType` アノテーションを付ける必要があります - このアノテーションのないフィールドは無視されます"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:982
msgid "REST Client Reactive needs to know the classes used as multipart return types upfront. If you have an interface method that produces `multipart/form-data`, the return type will be discovered automatically. However, if you intend to use the `ClientBuilder` API to parse a response as multipart, you need to annotate your DTO class with `@MultipartForm`."
msgstr "REST Client Reactive は、マルチパートリターンタイプとして使用されるクラスを事前に知っている必要があります。 `multipart/form-data` を生成するインターフェイスメソッドがある場合、戻り型は自動的に検出されます。ただし、`ClientBuilder` API を使用して応答をマルチパートとして解析する場合は、DTO クラスに `@MultipartForm` のアノテーションを付ける必要があります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:984
msgid "The files you download are not automatically removed and can take up a lot of disk space. Consider removing the files when you are done working with them."
msgstr "ダウンロードしたファイルは自動的に削除されず、多くのディスク領域を占有する可能性があります。作業が終わったら、ファイルを削除することを検討してください。"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:985
#, no-wrap
msgid "Proxy support"
msgstr "プロキシーサポート"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:990
msgid "global client proxy settings, with `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`"
msgstr "グローバルクライアントプロキシー設定、 `quarkus.rest-client.proxy-address`、`quarkus.rest-client.proxy-user`、`quarkus.rest-client.proxy-password`、`quarkus.rest-client.non-proxy-hosts`"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:992
msgid "per-client proxy settings, with `quarkus.rest-client.<my-client>.proxy-address`, etc. These are applied only to clients injected with CDI, that is the ones created with `@RegisterRestClient`"
msgstr "`quarkus.rest-client.<my-client>.proxy-address` などのクライアントごとのプロキシー設定です。これらは、CDI で挿入されたクライアント、つまり `@RegisterRestClient` で作成されたクライアントに対してのみ適用されます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:994
msgid "If `proxy-address` is set on the client level, the client uses its specific proxy settings. No proxy settings are propagated from the global configuration or JVM properties."
msgstr "`proxy-address` がクライアントレベルで設定されている場合、クライアントは特定のプロキシー設定を使用します。プロキシー設定は、グローバル設定または JVM プロパティーから伝播されません。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1000
msgid "An example configuration for setting proxy:"
msgstr "プロキシーを設定するための設定例:"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1017
msgid "MicroProfile REST Client specification does not allow setting proxy credentials. In order to specify proxy user and proxy password programmatically, you need to cast your `RestClientBuilder` to `RestClientBuilderImpl`."
msgstr "MicroProfile REST クライアント仕様では、プロキシー資格情報の設定は許可されていません。プログラムでプロキシーユーザーとプロキシーパスワードを指定するには、`RestClientBuilder` を `RestClientBuilderImpl` にキャストする必要があります。"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1018
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1021
msgid "Run the application with:"
msgstr "アプリケーションを実行します:"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1025
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client-reactive."
msgstr "ブラウザで http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client-reactive を開きます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1027
msgid "You should see a JSON object containing some basic information about this extension."
msgstr "このエクステンションに関する基本的な情報を含む JSON オブジェクトが表示されるはずです。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1029
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1033
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして、`java -jar target/quarkus-app/quarkus-run.jar` で実行されます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1035
msgid "You can also generate the native executable with:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます。"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1038
#, no-wrap
msgid "Logging traffic"
msgstr "トラフィックの記録"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1043
msgid "`request-response` to log the request and response contents, or"
msgstr "リクエストと応答の内容をログに記録する `request-response` 、または"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1044
msgid "`all` to also enable low level logging of the underlying libraries."
msgstr "`all` は、基礎となるライブラリーの低レベルのロギングも有効にします。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1046
msgid "As HTTP messages can have large bodies, we limit the amount of body characters logged. The default limit is `100`, you can change it by specifying `quarkus.rest-client.logging.body-limit`."
msgstr "HTTP メッセージには大きな本文が含まれる可能性があるため、ログに記録される本文の文字数を制限します。デフォルトの制限は `100` ですが、`quarkus.rest-client.logging.body-limit` を指定することで変更できます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1048
msgid "REST Client Reactive is logging the traffic with level DEBUG and does not alter logger properties. You may need to adjust your logger configuration to use this feature."
msgstr "REST Client Reactive は、レベル DEBUG でトラフィックをログに記録しており、ロガーのプロパティーを変更しません。この機能を使用するには、ロガー設定を調整する必要がある場合があります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1050
msgid "An example logging configuration:"
msgstr "ロギング設定の例:"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1059
#, no-wrap
msgid "Mocking the client for tests"
msgstr "テストのためのクライアントのモッキング"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1064
msgid "This section shows how to replace your client with a mock. If you would like to get a more in-depth understanding of how mocking works in Quarkus, see the blog post on https://quarkus.io/blog/mocking/[Mocking CDI beans]."
msgstr "このセクションでは、クライアントをモックに置き換える方法を示します。Quarkus でモッキングがどのように機能するかをより深く理解したい場合は、 https://quarkus.io/blog/mocking/[Mocking CDI beans] のブログ投稿を参照してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1066
msgid "Mocking does not work when using `@NativeImageTest` or `@QuarkusIntegrationTest`."
msgstr "`@NativeImageTest` または `@QuarkusIntegrationTest` を使用すると、モッキングは機能しません。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1068
msgid "Let's assume you have the following client:"
msgstr "次のクライアントがあると仮定します。"

#. type: Title ===
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1087
#, no-wrap
msgid "Mocking with InjectMock"
msgstr "InjectMock でモックする"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1089
msgid "The simplest approach to mock a client for tests is to use Mockito and `@InjectMock`."
msgstr "テスト用にクライアントをモックする最も簡単な方法は、Mockito と `@InjectMock` を使用することです。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1091
msgid "First, add the following dependency to your application:"
msgstr "まず、以下の依存関係をアプリケーションに追加します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1109
msgid "Then, in your test you can simply use `@InjectMock` to create and inject a mock:"
msgstr "次に、テストで `@InjectMock` を使用して、モックを作成して挿入できます。"

#. type: Title ===
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1142
#, no-wrap
msgid "Mocking with QuarkusMock"
msgstr "QuarkusMock でモックする"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1144
msgid "If Mockito doesn't meet your needs, you can create a mock programmatically using `QuarkusMock`, e.g.:"
msgstr "Mockito がニーズを満たさない場合は、`QuarkusMock` を使用してプログラムでモックを作成できます。例:"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1177
msgid "here we use a manually created implementation of the client interface to replace the actual Client"
msgstr "ここでは、手動で作成したクライアントインターフェイスの実装を使用して、実際のクライアントを置き換えます"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1178
msgid "note that `RestClient.LITERAL` has to be passed as the last argument of the `installMockForType` method"
msgstr "`RestClient.LITERAL` は `installMockForType` メソッドの最後の引数として渡される必要があることに注意してください"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1180
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr "テストにモックHTTPサーバーを使用する"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1188
#, no-wrap
msgid "Known limitations"
msgstr "既知の制限"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1195
msgid "it is not possible to set `HostnameVerifier` or `SSLContext`"
msgstr "`HostnameVerifier` または `SSLContext` を設定することができません"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1196
msgid "a few things that don't make sense for a non-blocking implementations, such as setting the `ExecutorService`, don't work"
msgstr "`ExecutorService` の設定など、非ブロッキング実装には意味をなさないいくつかのことが機能しません"

#. type: Title ==
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1199
#, no-wrap
msgid "Further reading"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_versions/2.16/guides/rest-client-reactive.adoc:1201
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
