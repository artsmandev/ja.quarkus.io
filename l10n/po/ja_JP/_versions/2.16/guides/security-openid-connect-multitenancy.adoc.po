msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `oidc` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.\n"
"Therefore, when working with multiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resource overhead."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Compilation will take a bit longer, so this step is disabled by default;\n"
"let's build again by enabling the native build:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"`Dev Services for Keycloak` will launch and initialize a test container: it will import configured realms and set a base Keycloak URL for `CustomTenantResolver` used in this quickstart to calculate a realm specific URL."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.\n"
"`HtmlUnit` is used for testing the `/{tenant}` endpoint and the authorization code flow."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path\n"
"defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though\n"
"user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"You can use the annotations and CDI interceptors for resolving the tenant identifiers as an alternative to using\n"
"`quarkus.oidc.TenantResolver`. This can be done by setting the value for the key `OidcUtils.TENANT_ID_ATTRIBUTE` on\n"
"the current `RoutingContext`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Assuming your application supports two OIDC tenants (`hr`, and default) first you need to define one\n"
"annotation per tenant ID other than default:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Proactive HTTP authentication needs to be disabled (`quarkus.http.auth.proactive=false`) for this to work. See\n"
"xref:security-built-in-authentication-support-concept.adoc#proactive-authentication[Proactive Authentication] section for further details."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Now all methods and classes carrying `@HrTenant` will be authenticated using the OIDC provider configured by\n"
"`quarkus.oidc.hr.auth-server-url`, while all other classes and methods will still be authenticated using the default\n"
"OIDC provider."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple\n"
"entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/security-openid-connect-multitenancy.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:6
#, no-wrap
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "OpenID Connect (OIDC) マルチテナンシーの使用"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:12
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr "このガイドでは、OpenID Connect (OIDC) アプリケーションがマルチテナンシーをサポートして、単一のアプリケーションから複数のテナントにサービスを提供する方法を説明します。テナントは、同じ OpenID プロバイダー内の個別のレルムまたはセキュリティードメイン、あるいは個別の OpenID プロバイダーです。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:14
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr "同じアプリケーション (例: SaaS) から複数の顧客にサービスを提供する場合、各顧客はテナントです。アプリケーションに対してマルチテナンシーサポートを有効にすることで、Keycloak や Google などのさまざまな OpenID プロバイダーに対する認証であっても、テナントごとに異なる認証ポリシーをサポートできます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:16
msgid "Please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr "Bearer Token Authorization を使用してテナントを承認する必要がある場合は、xref:security-openid-connect.adoc[OpenID Connect によるサービスアプリケーションの保護] ガイドを参照してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:18
msgid "Please read the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow."
msgstr "OpenID Connect Authorization Code Flow を使用してテナントの認証と認可を行う必要がある場合は、 xref:security-openid-connect-web-authentication.adoc[OpenID Connect を使用したウェブアプリケーションの保護] ガイドをお読みください。"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:24
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:25
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:28
msgid "In this example, we build a very simple application which supports two resource methods:"
msgstr "この例では、2つのリソースメソッドをサポートする非常にシンプルなアプリケーションを構築します:"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:30
msgid "`/{tenant}`"
msgstr "`/{tenant}`"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:32
msgid "This resource returns information obtained from the ID token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr "OpenID Providerが発行するIDトークンから取得した、認証されたユーザと現在のテナントに関する情報を返すリソースです。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:34
msgid "`/{tenant}`/bearer"
msgstr "`/{tenant}`/bearer"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:36
msgid "This resource returns information obtained from the Access token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr "OpenID Providerが発行するアクセストークンから取得した、認証されたユーザと現在のテナントに関する情報を返すリソースです。"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:37
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:43
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:45
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr "ソリューションは、`security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[ディレクトリー] にあります。"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:46
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:49
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:61
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:63
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:403
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:72
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:423
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:77
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:80
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "まずは `/{tenant}` エンドポイントを実装してみましょう。下のソースコードを見るとわかるように、これは通常の JAX-RS リソースです。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:150
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface which can be used to resolve the tenant configurations dynamically:"
msgstr "受信リクエストからテナントを解決し、application.propertiesで特定の `quarkus-oidc` テナント設定にマッピングするためには、テナント設定を動的に解決するために使用できる `io.quarkus.oidc.TenantConfigResolver` インターフェイスの実装を作成する必要があります："

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:192
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr "上記の実装から、テナントはリクエストパスから解決されるため、テナントを推測できなかった場合は、デフォルトのテナント設定を使用する必要があることを示すために null が返されます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:194
msgid "Note the `tenant-a` application type is `hybrid` - it can accept HTTP bearer tokens if provided, otherwise it will initiate an authorization code flow when the authentication is required."
msgstr "`tenant-a` アプリケーションタイプは `hybrid` であることに注意してください。HTTPベアラートークンが提供された場合はそれを受け入れることができますが、そうでない場合は認証が必要なときに認可コードフローが開始されます。"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:195
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:212
#, fuzzy
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. Note that a `%prod` profile prefix is used with `quarkus.oidc.auth-server-url` - it is done to support testing a multi-tenant application with `Dev Services For Keycloak`. This configuration is using a Keycloak instance to authenticate users."
msgstr "最初のコンフィギュレーションは、リクエストからテナントを推測できない場合に使用されるデフォルトのテナントコンフィギュレーションです。 `quarkus.oidc.auth-server-url` で `%prod` プロファイルプレフィックスが使用されていることに注意してください。これは `Dev Services For Keycloak` を使用したマルチテナント アプリケーションのテストをサポートするためです。この構成では、ユーザーを認証するためにKeycloakインスタンスを使用しています。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:214
msgid "The second configuration is provided by `TenantConfigResolver`, it is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr "2つ目の設定は `TenantConfigResolver` によって提供されます。これは、受信リクエストがテナント `tenant-a` にマッピングされるときに使用される設定です。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:216
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr "どちらの設定でも、異なる `realms` を使用しばら、同じ Keycloak サーバーインスタンスにマップされることに注意してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:218
msgid "Alternatively you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr "または、 `application.properties` で直接テナント `tenant-a` を設定することもできます："

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:237
msgid "and use a custom `TenantConfigResolver` to resolve it:"
msgstr "そして、カスタム `TenantConfigResolver` を使って解決します:"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:266
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr "設定ファイルで複数のテナントを定義できます。`TenantResolver` 実装からテナントを解決するときに適切にマップできるように、それらに一意のエイリアスがあることを確認してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:268
msgid "However, using a static tenant resolution (configuring tenants in `application.properties` and resolving them with `TenantResolver`) prevents testing the endpoint with `Dev Services for Keycloak` since `Dev Services for Keycloak` has no knowledge of how the requests will be mapped to individual tenants and can not dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values and therefore using `%prod` prefixes with the tenant-specific URLs in `application.properties` will not work in tests or devmode."
msgstr "しかし、静的なテナント解決（ `application.properties` でテナントを設定し、 `TenantResolver` で解決する）を使用すると、 `Dev Services for Keycloak` でエンドポイントをテストすることができません。 `Dev Services for Keycloak` は、リクエストが個々のテナントにどのようにマッピングされるかを知らないため、テナント固有の `quarkus.oidc.<tenant-id>.auth-server-url` 値を動的に提供できず、したがって `%prod` プレフィックスを使用して `application.properties` のテナントに固有の URL を使用するとテストや開発モードで動作しません。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:307
msgid "A similar technique can be used with `TenantConfigResolver` where a `tenant-id` provided in the context can be used to return `OidcTenantConfig` already prepared with the previous request."
msgstr "同様の手法は、 `TenantConfigResolver` でも使用できます。コンテキストで提供される `tenant-id` を使用して、前のリクエストで既に用意された `OidcTenantConfig` を返すことができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:312
msgid "If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr "xref:hibernate-orm.adoc#multitenancy[Hibernate ORM マルチテナンシー] も使用し、OIDC と Hibernate ORM の両方のテナント ID が同じであり、Vert.x の `RoutingContext` から抽出する必要がある場合は、OIDC テナントリゾルバーから Hibernate ORM テナントリゾルバーにテナント ID を `RoutingContext` として渡すことができます。以下はその例です。"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:327
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloak サーバーの起動と設定"

#. type: delimited block =
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:330
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:337
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、`keycloak.version` は `17.0.0` 以上に設定する必要があります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:339
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "http://localhost:8180[localhost:8180] で Keycloak サーバーにアクセスできるはずです。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:341
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:343
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr "さて、以下の手順に従って、2つのテナントのためのレルムをインポートします。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:345
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr "{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] をインポートし、デフォルトのレルムを作成します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:346
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr "{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] をインポートし、テナント `tenant-a` のレルムを作成します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:348
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "詳細は、 https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新規レルムの作成] 方法に関する Keycloak ドキュメントを参照してください。"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:349
#, no-wrap
msgid "Running and Using the Application"
msgstr "アプリケーションの実行と使用"

#. type: Title ===
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:351
#, no-wrap
msgid "Running in Developer Mode"
msgstr "デベロッパーモードでの実行"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:354
msgid "To run the microservice in dev mode, use:"
msgstr "マイクロサービスをdevモードで実行するには:"

#. type: Title ===
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:357
#, no-wrap
msgid "Running in JVM Mode"
msgstr "JVMモードでの動作"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:360
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr "「開発モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:362
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:366
msgid "Then run it:"
msgstr "次に、以下を実行してください。"

#. type: Title ===
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:372
#, no-wrap
msgid "Running in Native Mode"
msgstr "ネイティブモードでの実行"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:375
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:386
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:392
#, no-wrap
msgid "Test the Application"
msgstr "アプリケーションのテスト"

#. type: Title ===
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:394
#, no-wrap
msgid "Use Dev Services for Keycloak"
msgstr "Dev Services for Keycloakの使用"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:401
msgid "First you need to add the following dependencies:"
msgstr "まず、以下の依存関係を追加する必要があります:"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:434
msgid "Next, configure the required realms:"
msgstr "次に、必要なレルムを設定します:"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:452
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr "最後に、JVM モードで実行されるテストを作成します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:534
msgid "and in native mode:"
msgstr "および、ネイティブモードで以下を実行します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:547
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr "初期化および設定方法の詳細については、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] を参照してください。"

#. type: Title ===
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:548
#, no-wrap
msgid "Use Browser"
msgstr "ブラウザの使用"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:551
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "テストするには、ブラウザを開いて以下のURLにアクセスする必要があります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:553
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr "http://localhost:8080/default[http://localhost:8080/default]"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:558
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "アプリケーションを認証するためには、Keycloakのログインページで以下の認証情報を入力する必要があります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:560
msgid "Username: *alice*"
msgstr "Username: *alice*"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:561
msgid "Password: *alice*"
msgstr "Password: *alice*"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:563
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "`Login` ボタンをクリックすると、アプリケーションにリダイレクトされます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:565
msgid "If you try now to access the application at the following URL:"
msgstr "次の URL でアプリケーションにアクセスを試みます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:567
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:569
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr "Keycloak のログインページに再度リダイレクトされます。ただし、ここでは別の `realm` を使用して認証します。"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:573
#, no-wrap
msgid "Resolving Tenant Identifiers with Annotations"
msgstr "アノテーション付きテナント識別子の解決"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:599
msgid "Next, you'll need one interceptor for each of those annotations:"
msgstr "次に、これらのアノテーションごとに 1 つのインターセプターが必要になります。"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:621
#, no-wrap
msgid "Programmatically Resolving Tenants Configuration"
msgstr "テナントの設定をプログラムで解決"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:627
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "このインターフェイスを使用すると、実行時にテナント設定を動的に作成することができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:683
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr "このメソッドから返される `OidcTenantConfig` は、`application.properties` から `oidc` 名前空間設定を解析するために使用されるものと同じです。`quarkus-oidc` エクステンションでサポートされている任意の設定を使用してデータを入力できます。"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:684
#, no-wrap
msgid "Tenant Resolution for OIDC 'web-app' applications"
msgstr "OIDCの \"web-app\" アプリケーションのためのテナント解決"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:687
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr "`service` と `web-app` の両方の OIDC アプリケーションの現在の HTTP リクエストを保護するために使用する必要があるテナント設定を選択する際には、次のようないくつかのオプションを使用できます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:689
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr "URL パスを確認します。たとえば、\"/service\" パスには `tenant-service` 設定を使用する必要がありますが、 \"/management\" パスには `tenant-manage` 設定を使用する必要があります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:690
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help to select between the `tenant-service` and `tenant-manage` configurations"
msgstr "たとえば、URL パスが常に '/service' である HTTP ヘッダーを確認します。\"Realm: service\" や \"Realm: management\" などのヘッダーは、`tenant-service` 設定や `tenant-manage` 設定のいずれかを選択する場合に役立ちます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:691
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr "URL クエリーパラメーターを確認します。ヘッダーを使用してテナント設定を選択するのと同じように機能します"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:693
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr "これらのオプションはすべて、OIDC `service` アプリケーションのカスタムの `TenantResolver` 実装や `TenantConfigResolver` 実装を使用して簡単に実装できます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:695
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr "ただし、OIDC `web-app` アプリケーションのコード認証フローを完了するために HTTP リダイレクトが必要なため、次の理由により、このリダイレクトリクエストの前後に同じテナント設定を選択するためにカスタム HTTP Cookie が必要になる場合があります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:697
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the tenant configuration is resolved"
msgstr "単一のリダイレクト URL が OIDC プロバイダーに登録されている場合、リダイレクトリクエスト後の URL パスは同じではない可能性があります。元のリクエストパスは復元できますが、それはテナント設定が解決された後です。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:698
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr "元のリクエスト中に使用された HTTP ヘッダーは、リダイレクト後に使用できなくなります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:699
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr "カスタム URL クエリーパラメーターは、リダイレクト後、テナント設定が解決された後に復元されます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:701
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr "リダイレクトの前後に `web-app` アプリケーションのテナント設定を解決するための情報を確実に利用できるようにするための 1 つのオプションは、Cookie を使用することです。以下はその例です。"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:734
#, no-wrap
msgid "Disabling Tenant Configurations"
msgstr "テナント設定を無効にする"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:737
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "カスタムの `TenantResolver` および `TenantConfigResolver` の実装では、現在のリクエストからテナントを推測できず、デフォルトのテナント設定へのフォールバックが必要な場合は `null` を返すことがあります。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:739
msgid "If it is expected that the custom resolvers will always infer a tenant then the default tenant configuration is not needed. One can disable it with the `quarkus.oidc.tenant-enabled=false` setting."
msgstr "カスタムリゾルバが常にテナントを推論することが予想される場合、デフォルトのテナント設定は必要ありません。 `quarkus.oidc.tenant-enabled=false` の設定で無効にすることができます。"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:741
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "テナント固有の設定を無効にすることもできます。例: `quarkus.oidc.tenant-a.tenant-enabled=false`"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:742
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ==
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:746
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:749
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:750
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:751
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:752
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"

#. type: Plain text
#: upstream/_versions/2.16/guides/security-openid-connect-multitenancy.adoc:752
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"
