msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"This guide demonstrates how your Quarkus application can utilize the Micrometer metrics library for runtime and\n"
"application metrics."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Apart from application-specific metrics, which are described in this guide, you may also utilize built-in metrics\n"
"exposed by various Quarkus extensions. These are described in the guide for each particular extension that supports\n"
"built-in metrics."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer defines a core library providing a registration mechanism for Metrics, and core metric types (Counters,\n"
"Gauges, Timers, Distribution Summaries, etc.). These core types provide an abstraction layer that can be adapted to\n"
"different backend monitoring systems. In essence, your application (or a library) can `register` a `Counter`,\n"
"`Gauge`, `Timer`, or `DistributionSummary` with a `MeterRegistry`. Micrometer will then delegate that registration to\n"
"one or more implementations, where each implementation handles the unique considerations for the associated\n"
"monitoring stack."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer uses naming conventions to translate between registered Meters and the conventions used by various backend\n"
"registries. Meter names, for example, should be created and named using dots to separate segments, `a.name.like.this`.\n"
"Micrometer then translates that name into the format that the selected registry prefers. Prometheus\n"
"uses underscores, which means the previous name will appear as `a_name_like_this` in Prometheus-formatted metrics\n"
"output."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"You can skip right to the solution if you prefer. Either:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Quarkus Micrometer extensions are structured similarly to Micrometer itself: `quarkus-micrometer` provides core\n"
"micrometer support and runtime integration and other Quarkus and Quarkiverse extensions bring in additional\n"
"dependencies and requirements to support specific monitoring systems."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"This command generates a Maven project, that imports the `micrometer-registry-prometheus` extension as a dependency.\n"
"This extension will load the core `micrometer` extension as well as additional library dependencies required to support\n"
"prometheus."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `micrometer-registry-prometheus` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer provides an API that allows you to construct your own custom metrics. The most common types of\n"
"meters supported by monitoring systems are gauges, counters, and summaries. The following sections build\n"
"an example endpoint, and observes endpoint behavior using these basic meter types."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"To register meters, you need a reference to a `MeterRegistry`, which is configured and maintained by the Micrometer\n"
"extension. The `MeterRegistry` can be injected into your application as follows:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer maintains an internal mapping between unique metric identifier and tag combinations and specific meter\n"
"instances. Using `register`, `counter`,  or other methods to increment counters or record values does not create\n"
"a new instance of a meter unless that combination of identifier and tag/label values hasn't been seen before."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Gauges measure a value that can increase or decrease over time, like the speedometer on a car. Gauges can be\n"
"useful when monitoring the statistics for a cache or collection. Consider the following simple example that\n"
"observes the size of a list:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"It is important to note that gauges are sampled rather than set; there is no record of how the value associated with a\n"
"gauge might have changed between measurements. In this example, the size of the list is observed when the Prometheus\n"
"endpoint is visited."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer provides a few additional mechanisms for creating gauges. Note that Micrometer does not create strong\n"
"references to the objects it observes by default. Depending on the registry, Micrometer either omits gauges that observe\n"
"objects that have been garbage-collected entirely or uses `NaN` (not a number) as the observed value."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"When should you use a Gauge? Only if you can't use something else. Never gauge something you can count. Gauges can be\n"
"less straight-forward to use than counters. If what you are measuring can be counted (because the value always\n"
"increments), use a counter instead."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Counters are used to measure values that only increase. In the example below, you will count the number of times you\n"
"test a number to see if it is prime:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"It might be tempting to add a label or tag to the counter indicating what value was checked, but remember that each\n"
"unique combination of metric name (`example.prime.number`) and label value produces a unique time series. Using an\n"
"unbounded set of data as label values can lead to a \"cardinality explosion\", an exponential increase in the creation\n"
"of new time series."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Label and tag can be used interchangeably. You may also see \"attribute\" used in this context in some documentation.\n"
"The gist is each that each label or tag or attribute defines an additional bit of information associated with the\n"
"single numerical measurement that helps you classify, group, or aggregate the measured value later. The Micrometer API\n"
"uses `Tag` as the mechanism for specifying this additional data."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"It is possible to add a tag that would convey a little more information, however. Let's adjust our code, and move\n"
"the counter to add some tags to convey additional information."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Looking at the data produced by this counter, you can tell how often a negative number was checked, or the number one,\n"
"or an even number, and so on. Try the following sequence and look for `example_prime_number_total` in the plain text\n"
"output. Note that the `_total` suffix is added when Micrometer applies Prometheus naming conventions to\n"
"`example.prime.number`, the originally specified counter name."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"When should you use a counter? Only if you are doing something that can not be either timed (or summarized).\n"
"Counters only record a count, which may be all that is needed. However, if you want to understand more about how a\n"
"value is changing, a timer (when the base unit of measurement is time) or a distribution summary might be\n"
"more appropriate."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Timers and distribution summaries in Micrometer are very similar. Both allow you to record an observed value, which\n"
"will be aggregated with other recorded values and stored as a sum. Micrometer also increments a counter to indicate the\n"
"number of measurements that have been recorded and tracks the maximum observed value (within a decaying interval)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Distribution summaries are populated by calling the `record` method to record observed values, while timers provide\n"
"additional capabilities specific to working with time and measuring durations. For example, we can use a timer to\n"
"measure how long it takes to calculate prime numbers using one of the `record` methods that wraps the invocation of a\n"
"Supplier function:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer will apply Prometheus conventions when emitting metrics for this timer. Prometheus measures time in seconds.\n"
"Micrometer converts measured durations into seconds and includes the unit in the metric name, per convention. After\n"
"visiting the prime endpoint a few more times, look in the plain text output for the following three entries:\n"
"`example_prime_number_test_seconds_count`, `example_prime_number_test_seconds_sum`, and\n"
"`example_prime_number_test_seconds_max`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Both timers and distribution summaries can be configured to emit additional statistics, like histogram data,\n"
"precomputed percentiles, or service level objective (SLO) boundaries. Note that the count, sum, and histogram data\n"
"can be re-aggregated across dimensions (or across a series of instances), while precomputed percentile values cannot."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"The Micrometer extension automatically times HTTP server requests. Following Prometheus naming conventions for\n"
"timers, look for `http_server_requests_seconds_count`, `http_server_requests_seconds_sum`, and\n"
"`http_server_requests_seconds_max`. Dimensional labels have been added for the requested uri, the HTTP method\n"
"(GET, POST, etc.), the status code (200, 302, 404, etc.), and a more general outcome field."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Note that metrics appear lazily, you often won't see any data for your endpoint until\n"
"something tries to access it, etc."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"You can disable measurement of HTTP endpoints using the `quarkus.micrometer.binder.http-server.ignore-patterns`\n"
"property. This property accepts a comma-separated list of simple regex match patterns identifying URI paths that should\n"
"be ignored. For example, setting `quarkus.micrometer.binder.http-server.ignore-patterns=/example/prime/[0-9]+` will\n"
"ignore a request to `http://localhost:8080/example/prime/7919`. A request to `http://localhost:8080/example/gauge/7919`\n"
"would still be measured."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"The micrometer extension will make a best effort at representing URIs containing path parameters in templated form.\n"
"Using examples from above, a request to `http://localhost:8080/example/prime/7919` should appear as an attribute of\n"
"`http_server_requests_seconds_*` metrics with a value of `uri=/example/prime/{number}`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Use the `quarkus.micrometer.binder.http-server.match-patterns` property if the correct URL can not be determined. This\n"
"property accepts a comma-separated list defining an association between a simple regex match pattern and a replacement\n"
"string. For example, setting\n"
"`quarkus.micrometer.binder.http-server.match-patterns=/example/prime/[0-9]+=/example/{jellybeans}` would use the value\n"
"`/example/{jellybeans}` for the uri attribute any time the requested uri matches `/example/prime/[0-9]+`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"By default, the  metrics are exported using the Prometheus format `application/openmetrics-text`,\n"
"you can revert to the former format by specifying the `Accept` request header to `text/plain` (`curl -H \"Accept: text/plain\" localhost:8080/q/metrics/`)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer uses `MeterFilter` instances to customize the metrics emitted by `MeterRegistry` instances.\n"
"The Micrometer extension will detect `MeterFilter` CDI beans and use them when initializing `MeterRegistry`\n"
"instances."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"In this example, a singleton CDI bean will produce two different `MeterFilter` beans. One will be applied only to\n"
"Prometheus `MeterRegistry` instances (using the `@MeterFilterConstraint` qualifier), and another will be applied\n"
"to all `MeterRegistry` instances. An application configuration property is also injected and used as a tag value.\n"
"Additional examples of MeterFilters can be found in the\n"
"link:https://micrometer.io/docs/concepts[official documentation]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer does define two annotations, `@Counted` and `@Timed`, that can be added to methods. The `@Timed` annotation\n"
"will wrap the execution of a method and will emit the following tags in addition to any tags defined on the\n"
"annotation itself: class, method, and exception (either \"none\" or the simple class name of a detected exception)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Using annotations is limited, as you can't dynamically assign meaningful tag values. Also note that many methods, e.g.\n"
"REST endpoint methods or Vert.x Routes, are counted and timed by the micrometer extension out of the box."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"If you aren't using Prometheus, you have a few options. Some Micrometer registry implementations\n"
"have been wrapped in\n"
"https://github.com/quarkiverse/quarkiverse-micrometer-registry[Quarkiverse extensions].\n"
"To use the Micrometer StackDriver MeterRegistry, for example, you would use the\n"
"`quarkus-micrometer-registry-stackdriver` extension:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"If the Micrometer registry you would like to use does not yet have an associated extension,\n"
"use the `quarkus-micrometer` extension and bring in the packaged MeterRegistry dependency directly:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"You will then need to specify your own provider to configure and initialize the\n"
"MeterRegistry, as discussed in the next section."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"This example corresponds to the following instructions in the Micrometer documentation:\n"
"https://micrometer.io/docs/registry/statsD#_customizing_the_metrics_sink"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"Note that the method returns the specific type of `MeterRegistry` as a `@Singleton`. Use MicroProfile Config\n"
"to inject any configuration attributes you need to configure the registry. Most Micrometer registry extensions,\n"
"like `quarkus-micrometer-registry-statsd`, define a producer for registry-specific configuration objects\n"
"that are integrated with the Quarkus configuration model."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid ""
"If you use the MicroProfile Metrics API in your application, the Micrometer extension will create an adaptive\n"
"layer to map those metrics into the Micrometer registry. Note that naming conventions between the two\n"
"systems is different, so the metrics that are emitted when using MP Metrics with Micrometer will change.\n"
"You can use a `MeterFilter` to remap names or tags according to your conventions."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.16/guides/micrometer.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.16/guides/micrometer.adoc:6
#, no-wrap
msgid "Micrometer Metrics"
msgstr "Micrometerメトリクス"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:19
msgid "Micrometer is the recommended approach to metrics for Quarkus."
msgstr "Micrometerは、Quarkusのメトリクスとして推奨されるアプローチです。"

#. type: Title ==
#: upstream/_versions/2.16/guides/micrometer.adoc:20
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/2.16/guides/micrometer.adoc:24
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Title ==
#: upstream/_versions/2.16/guides/micrometer.adoc:39
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:45
msgid "Clone the git repository: `git clone {quickstarts-clone-url}`, or"
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:46
msgid "Download an {quickstarts-archive-url}[archive]."
msgstr "{quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:48
msgid "The solution is located in the `micrometer-quickstart` {quickstarts-tree-url}/micrometer-quickstart[directory]."
msgstr "ソリューションは `micrometer-quickstart` {quickstarts-tree-url}/micrometer-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/2.16/guides/micrometer.adoc:49
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:56
msgid "For this example, we'll use the Prometheus registry."
msgstr "この例では、Prometheus のレジストリーを使用します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:58
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:74
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/2.16/guides/micrometer.adoc:76
#: upstream/_versions/2.16/guides/micrometer.adoc:482
#: upstream/_versions/2.16/guides/micrometer.adoc:500
#: upstream/_versions/2.16/guides/micrometer.adoc:585
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.16/guides/micrometer.adoc:85
#: upstream/_versions/2.16/guides/micrometer.adoc:491
#: upstream/_versions/2.16/guides/micrometer.adoc:513
#: upstream/_versions/2.16/guides/micrometer.adoc:594
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.16/guides/micrometer.adoc:90
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Title ===
#: upstream/_versions/2.16/guides/micrometer.adoc:125
#, no-wrap
msgid "Gauges"
msgstr "ゲージ"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:160
msgid "Note that even numbers are added to the list, and odd numbers remove an element from the list."
msgstr "なお、偶数はリストに追加され、奇数はリストから要素を削除します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:162
msgid "Start your application in dev mode:"
msgstr "アプリケーションを開発モードで起動します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:166
msgid "Then try the following sequence and look for `example_list_size` in the plain text output:"
msgstr "次に、以下のシーケンスを試して、プレーンテキストの出力で `example_list_size` を確認してください。"

#. type: Title ===
#: upstream/_versions/2.16/guides/micrometer.adoc:191
#, no-wrap
msgid "Counters"
msgstr "カウンター"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:286
#: upstream/_versions/2.16/guides/micrometer.adoc:340
msgid "If you did not leave Quarkus running in dev mode, start it again:"
msgstr "Quarkusを開発モードで起動したままにしていない場合は、再度起動してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:290
#: upstream/_versions/2.16/guides/micrometer.adoc:344
msgid "Then execute the following sequence:"
msgstr "そして、以下のシーケンスを実行します。"

#. type: Title ===
#: upstream/_versions/2.16/guides/micrometer.adoc:307
#, no-wrap
msgid "Summaries and Timers"
msgstr "サマリーとタイマー"

#. type: Title ===
#: upstream/_versions/2.16/guides/micrometer.adoc:357
#, no-wrap
msgid "Review automatically generated metrics"
msgstr "自動生成されたメトリクスを確認する"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:360
msgid "To view metrics, execute `curl localhost:8080/q/metrics/`"
msgstr "メトリクスを表示するには、 `curl localhost:8080/q/metrics/` を実行します。"

#. type: Block title
#: upstream/_versions/2.16/guides/micrometer.adoc:381
#, no-wrap
msgid "Ignoring endpoints"
msgstr "エンドポイントの無視"

#. type: Block title
#: upstream/_versions/2.16/guides/micrometer.adoc:389
#, no-wrap
msgid "URI templates"
msgstr "URIテンプレート"

#. type: Block title
#: upstream/_versions/2.16/guides/micrometer.adoc:401
#, no-wrap
msgid "Exported metrics format"
msgstr "エクスポートされるメトリクスフォーマット"

#. type: Title ==
#: upstream/_versions/2.16/guides/micrometer.adoc:406
#, no-wrap
msgid "Using MeterFilter to configure metrics"
msgstr "MeterFilter を使ってメトリクスを設定する"

#. type: Title ==
#: upstream/_versions/2.16/guides/micrometer.adoc:464
#, no-wrap
msgid "Does Micrometer support annotations?"
msgstr "Micrometerはアノテーションをサポートしていますか？"

#. type: Title ==
#: upstream/_versions/2.16/guides/micrometer.adoc:473
#, no-wrap
msgid "Using other Registry implementations"
msgstr "他のレジストリー実装の使用"

#. type: Title ==
#: upstream/_versions/2.16/guides/micrometer.adoc:522
#, no-wrap
msgid "Creating a customized MeterRegistry"
msgstr "カスタマイズされたMeterRegistryの作成"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:525
msgid "Use a custom `@Produces` method to create and configure a customized `MeterRegistry` if you need to."
msgstr "必要に応じて、カスタム `@Produces` メソッドを使用して、カスタマイズされた `MeterRegistry` を作成して設定します。"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:527
msgid "The following example customizes the line format used for StatsD:"
msgstr "以下の例では、StatsDで使用される行フォーマットをカスタマイズしています。"

#. type: Title ==
#: upstream/_versions/2.16/guides/micrometer.adoc:552
#, no-wrap
msgid "Support for the MicroProfile Metrics API"
msgstr "MicroProfile Metrics API のサポート"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:583
msgid "Ensure the following dependency is present in your build file if you require the MicroProfile Metrics API:"
msgstr "MicroProfile Metrics APIを必要とする場合は、ビルドファイルに以下の依存関係が存在することを確認してください。"

#. type: Plain text
#: upstream/_versions/2.16/guides/micrometer.adoc:600
msgid "The MP Metrics API compatibility layer will be moved to a different extension in the future."
msgstr "MP Metrics API互換性レイヤは、将来的には別のエクステンションに移される予定です。"

#. type: Title ==
#: upstream/_versions/2.16/guides/micrometer.adoc:601
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"
