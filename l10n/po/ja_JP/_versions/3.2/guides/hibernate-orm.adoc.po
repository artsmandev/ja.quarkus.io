msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM is the de facto standard Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper.\n"
"It works beautifully in Quarkus."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Using such a classic configuration file is an option, but unnecessary unless you have specific advanced needs;\n"
"so we'll see first how Hibernate ORM can be configured without a `persistence.xml` resource."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Annotate your persistent objects with `@Entity`,\n"
"then add the relevant configuration properties in `{config-file}`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Note that these configuration properties are not the same ones as in your typical Hibernate ORM configuration file.\n"
"They will often map to Hibernate ORM configuration properties but could have different names and don't necessarily map 1:1 to each other."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"The dialect will be selected and configured automatically based on your datasource;\n"
"you may want to xref:hibernate-dialect[configure it to more precisely match your database]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"To load SQL statements when Hibernate ORM starts, add an `import.sql` file to the root of your `resources` directory.\n"
"This script can contain any SQL DML statements.\n"
"Make sure to terminate each statement with a semicolon."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a\n"
"CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing\n"
"so at your application entry point boundaries like your REST endpoint controllers."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"For xref:datasource.adoc#extensions-and-database-drivers-reference[supported databases],\n"
"the link:{hibernate-orm-docs-url}#database-dialect[Hibernate ORM dialect]\n"
"does not need to be set explicitly:\n"
"it is selected automatically based on the datasource."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"In order for Hibernate ORM to generate more efficient SQL,\n"
"to avoid workarounds and to take advantage of more database features,\n"
"you can set the database version explicitly:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"As a rule, the version set here should be as high as possible,\n"
"but must be lower than or equal to the version of any database your application will connect to."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"When a version is set explicitly,\n"
"Quarkus will try to check this version against the actual database version on startup,\n"
"leading to a startup failure when the actual version is lower."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"This is because Hibernate ORM may generate SQL that is invalid\n"
"for versions of the database older than what is configured,\n"
"which would lead to runtime exceptions."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"If xref:datasource.adoc#other-databases[your database does not have a corresponding Quarkus extension],\n"
"or if the defaults do not match your needs for some reason,\n"
"you will need to set the link:{hibernate-orm-docs-url}#database-dialect[Hibernate ORM dialect] explicitly:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"In that case, keep in mind that the JDBC driver or Hibernate ORM dialect\n"
"may not work properly in GraalVM native executables."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"As with xref:hibernate-dialect-supported-databases[supported databases],\n"
"you can configure the DB version explicitly to get the most out of Hibernate ORM:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Set the database version. The Hibernate ORM dialect will target that version.\n"
"Since we're targeting CockroachDB here, we're passing the CockroachDB version, not the PostgreSQL version."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"When no property is set, Quarkus can typically infer everything it needs to set up Hibernate ORM\n"
"and will have it use the default datasource."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Do not mix xref:persistence-xml[`persistence.xml`] and `quarkus.hibernate-orm.*` properties in `{config-file}`.\n"
"Quarkus will raise an exception.\n"
"Make up your mind on which approach you want to use."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"If your classpath contains a `persistence.xml` that you want to ignore,\n"
"set the following configuration property:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.\n"
"For instance, the following snippet defines a default datasource and a default persistence unit:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"The default persistence unit points to the default datasource by default.\n"
"For named persistence units, the `datasource` property is mandatory.\n"
"You can point your persistence unit to the default datasource by setting it to `<default>`\n"
"(which is the internal name of the default datasource)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Model classes need to be consistently added to a given persistence unit.\n"
"That meant that all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.\n"
"As we are dealing with the persistence unit at the package level, it should be simple enough."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"For entities attached to several persistence units, you cannot use Panache.\n"
"You can mix the two approaches though and mix Panache entities and traditional entities where multiple persistence units are required."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"If you have a use case for that and clever ideas about how to implement it without cluttering the simplified Panache approach,\n"
"contact us on the link:{quarkus-mailing-list-index}[quarkus-dev mailing list]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"The second approach to attach model classes to a persistence unit is to use package-level `@io.quarkus.hibernate.orm.PersistenceUnit` annotations.\n"
"Again, the two approaches cannot be mixed."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"We only support defining the `@PersistenceUnit` for model classes at the package level,\n"
"using the `@PersistenceUnit` annotation at the class level is not supported in this case."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Alternatively, you can use a `META-INF/persistence.xml` to set up Hibernate ORM.\n"
"This is useful for:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"If you use a `persistence.xml`, then you cannot use the `quarkus.hibernate-orm.*` properties\n"
"and only persistence units defined in `persistence.xml` will be taken into account."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Your `pom.xml` dependencies as well as your Java code would be identical to the precedent example. The only\n"
"difference is that you would specify your Hibernate ORM configuration in `META-INF/persistence.xml`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"When using the `persistence.xml` configuration you are configuring Hibernate ORM directly,\n"
"so in this case the appropriate reference is the link:{hibernate-orm-docs-url}#configurations[documentation on hibernate.org]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Please remember these are not the same property names as the ones used in the Quarkus `{config-file}`, nor will\n"
"the same defaults be applied."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM in Quarkus supports XML mapping.\n"
"You can add mapping files following\n"
"the https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-spec-3.0.html#a16944[`orm.xml` format (Jakarta Persistence)]\n"
"or the http://hibernate.org/dtd/hibernate-mapping-3.0.dtd[`hbm.xml` format (specific to Hibernate ORM, deprecated)]:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM in Quarkus relies on compile-time bytecode enhancements to your entities. If you define your entities in the\n"
"same project where you build your Quarkus application, everything will work fine."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"If the entities come from external projects\n"
"or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"That way for every change to your app and in particular to your entities, the database schema will be properly recreated\n"
"and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.\n"
"This is best to perfectly control your environment and works magic with Quarkus live reload mode:\n"
"your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"By default, in `dev` and `test` modes, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).\n"
"You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"The second approach is to use `quarkus.hibernate-orm.database.generation=update`.\n"
"This approach is best when you do many entity changes but\n"
"still need to work on a copy of the production data\n"
"or if you want to reproduce a bug that is based on specific database entries.\n"
"`update` is a best effort from Hibernate ORM and will fail in specific situations\n"
"including altering your database structure which could lead to data loss.\n"
"For example if you change structures which violate a foreign key constraint, Hibernate ORM might have to bail out.\n"
"But for development, these limitations are acceptable."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"The third approach is to use `quarkus.hibernate-orm.database.generation=none`.\n"
"This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.\n"
"Or if you use a database schema migration tool like xref:flyway.adoc[Flyway] or xref:liquibase.adoc[Liquibase]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"With this approach when making changes to an entity, make sure to adapt the database schema accordingly;\n"
"you could also use `validate` to have Hibernate verify the schema matches its expectations."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"These approaches become really powerful when combined with Quarkus configuration profiles.\n"
"You can define different xref:config-reference.adoc#profiles[configuration profiles]\n"
"to select different behaviors depending on your environment.\n"
"This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Quarkus comes with default profiles (`dev`, `test` and `prod`).\n"
"And you can add your own custom profiles to describe various environments (`staging`, `prod-us`, etc)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"You can override it in your `application.properties` explicitly\n"
"(e.g. `%prod.quarkus.hibernate-orm.sql-load-script = import.sql`)\n"
"but we wanted you to avoid overriding your database by accident in prod :)"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Speaking of, make sure to not drop your database schema in production!\n"
"Add the following in your properties file."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"If you have the xref:flyway.adoc[Flyway extension] installed when running in development mode, Quarkus provides a simple way to turn\n"
"your Hibernate ORM auto generated schema into a Flyway migration file. This is intended to make is easy to move from\n"
"the early development phase, where Hibernate can be used to quickly set up the schema, to the production phase, where\n"
"Flyway is used to manage schema changes."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"To use this feature simply open the Dev UI when the `quarkus-flyway` extension is installed and click in the `Datasources`\n"
"link in the Flyway pane. Hit the `Create Initial Migration` button and the following will happen:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"This button is simply a convenience to quickly get you started with Flyway, it is up to you to determine how you want to\n"
"manage your database schemas in production. In particular the `migrate-at-start` setting may not be right for all environments."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"On top of immutable data, in certain contexts it might be acceptable to enable caching also on mutable data; this could be a necessary tradeoff on selected\n"
" entities which are read frequently and for which some degree of staleness is acceptable; this \" acceptable degree of staleness\" can be tuned by setting eviction properties.\n"
" This is however not recommended and should be done with extreme care, as it might\n"
" produce unexpected and unforeseen effects on the data."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Either xref:telemetry-micrometer.adoc[Micrometer] or xref:microprofile-metrics.adoc[SmallRye Metrics] are\n"
"capable of exposing metrics that Hibernate ORM collects at runtime. To enable exposure of Hibernate metrics\n"
"on the `/q/metrics` endpoint, make sure your project depends on a metrics extension and set the configuration property `quarkus.hibernate-orm.metrics.enabled` to `true`.\n"
"When using link:microprofile-metrics[SmallRye Metrics], metrics will be available under the `vendor` scope."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Quarkus does not modify the libraries it uses; this rule applies to Hibernate ORM as well: when using\n"
"this extension you will mostly have the same experience as using the original library."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"But while they share the same code, Quarkus does configure some components automatically and injects custom implementations\n"
"for some extension points; this should be transparent and useful but if you're an expert of Hibernate you might want to\n"
"know what is being done."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM can use build time enhanced entities; normally this is not mandatory, but it's useful and will have your\n"
"applications perform better."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Typically, you would need to adapt your build scripts to include the Hibernate Enhancement plugins; in Quarkus this is\n"
"not necessary as the enhancement step is integrated in the build and analysis of the Quarkus application."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Due to the usage of enhancement, using the `clone()` method on entities is currently not supported\n"
"as it will also clone some enhancement-specific fields that are specific to the entity."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"You don't need to set this up, Quarkus automatically injects the reference to the Narayana Transaction Manager.\n"
"The dependency is included automatically as a transitive dependency of the Hibernate ORM extension.\n"
"All configuration is optional; for more details see xref:transaction.adoc[Using Transactions in Quarkus]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Don't need to choose one either. Quarkus automatically includes the Agroal connection pool;\n"
"configure your datasource as in the above examples and it will set up Hibernate ORM to use Agroal.\n"
"More details about this connection pool can be found in xref:datasource.adoc[Quarkus - Datasources]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"As explained earlier in the xref:caching[Caching section], you don't need to pick an implementation.\n"
"A suitable implementation based on technologies from link:https://infinispan.org/[Infinispan] and link:https://github.com/ben-manes/caffeine[Caffeine] is included as a transitive dependency of the Hibernate ORM extension, and automatically integrated during the build."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"In practice, it's only possible to have duplicate XML mapping files in the classpath in very specific scenarios.\n"
"For example, if two JARs include a `META-INF/orm.xml` file (with the exact same path but in different JARs),\n"
"then the mapping file path `META-INF/orm.xml` can only be referenced from a `persistence.xml`\n"
"**in the same JAR as the `META-INF/orm.xml` file**."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Management beans are not working in GraalVM native images;\n"
"therefore, Hibernate's capability to register statistics and management operations with the JMX bean is disabled when compiling into a native image.\n"
"This limitation is likely permanent, as it's not a goal for native images\n"
"to implement support for JMX. All such metrics can be accessed in other ways."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM's capability to integrate with JACC is disabled when building GraalVM native images,\n"
"as JACC is not available - nor useful - in native mode."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"It is impossible to use the `ThreadLocalSessionContext` helper of Hibernate ORM as support for it is not implemented.\n"
"Since Quarkus provides out-of-the-box CDI support, injection or programmatic CDI lookup is a better approach.\n"
"This feature also didn't integrate well with reactive components and more modern context propagation techniques, making us believe this legacy feature has no future.\n"
"If you badly need to bind it to a ThreadLocal, it should be trivial to implement in your own code."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"The JNDI technology is commonly used in other runtimes to integrate different components.\n"
"A common use case is Java Enterprise servers to bind the TransactionManager and the Datasource components to a name and then have Hibernate ORM configured to look these components up by name.\n"
"But in Quarkus, this use case doesn't apply as components are injected directly, making JNDI support an unnecessary legacy.\n"
"To avoid unexpected use of JNDI, full support for JNDI has been disabled in the Hibernate ORM extension for Quarkus.\n"
"This is both a security precaution and an optimization."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"When importing a `import.sql` to set up your database, keep in mind that Quarkus reconfigures Hibernate ORM so to require a semicolon (`;`) to terminate each statement.\n"
"The default in Hibernate is to have a statement per line, without requiring a terminator other than newline: remember to convert your scripts to use the `;` terminator character if you're reusing existing scripts.\n"
"This is useful so to allow multi-line statements and human friendly formatting."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Datasource configuration is extremely simple, but is covered in a different guide as technically\n"
"it's implemented by the Agroal connection pool extension for Quarkus."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Annotate the TenantResolver implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"In general, it is not possible to use the Hibernate ORM database generation feature in conjunction with a multitenancy setup.\n"
"Therefore, you have to disable it, and you need to make sure that the tables are created per schema.\n"
"The following setup will use the xref:flyway.adoc[Flyway] extension to achieve this goal."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"The same data source will be used for all tenants and a schema has to be created for every tenant inside that data source.\n"
"CAUTION: Some databases like MariaDB/MySQL do not support database schemas. In these cases you have to use the DATABASE approach below."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file,\n"
"you can use the `io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver` interface to implement your own logic for retrieving a connection.\n"
"Creating an application-scoped bean that implements this interface\n"
"and annotating it with `@PersistenceUnitExtension` (or `@PersistenceUnitExtension(\"nameOfYourPU\")` for a xref:multiple-persistence-units[named persistence unit])\n"
"will replace the current Quarkus default implementation `io.quarkus.hibernate.orm.runtime.tenant.DataSourceTenantConnectionResolver`.\n"
"Your custom connection resolver would allow for example to read tenant information from a database and create a connection per tenant at runtime based on it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"You can assign an link:{hibernate-orm-docs-url}#events-interceptors[`org.hibernate.Interceptor`]\n"
"to your `SessionFactory` by simply defining a CDI bean with the appropriate qualifier:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Annotate the interceptor implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"By default, interceptor beans annotated with `@PersistenceUnitExtension` are application-scoped,\n"
"which means only one interceptor instance will be created per application\n"
"and reused across all entity managers.\n"
"For this reason, the interceptor implementation must be thread-safe."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"In order to create one interceptor instance per entity manager instead,\n"
"annotate your bean with `@Dependent`.\n"
"In that case, the interceptor implementation doesn't need to be thread-safe."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Due to a limitation in Hibernate ORM itself,\n"
"`@PreDestroy` methods on `@Dependent`-scoped interceptors will never get called."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/hibernate-orm.adoc
msgid ""
"Annotate the statement inspector implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:6
#, no-wrap
msgid "Using Hibernate ORM and Jakarta Persistence"
msgstr "Hibernate ORMとJakarta Persistenceの使用"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:15
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:21
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:23
#, fuzzy
msgid "The solution is located in the `hibernate-orm-quickstart` link:{quickstarts-tree-url}/hibernate-orm-quickstart[directory]."
msgstr "ソリューションは `hibernate-orm-quickstart` link:{quickstarts-tree-url}/hibernate-orm-quickstart[ディレクトリに] あります。"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:24
#, no-wrap
msgid "Setting up and configuring Hibernate ORM"
msgstr "Hibernate ORMのセットアップと設定"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:27
msgid "When using Hibernate ORM in Quarkus, you don't need to have a `persistence.xml` resource to configure it."
msgstr "QuarkusでHibernate ORMを使用する場合は、 設定の為に `persistence.xml` リソースは必要ありません。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:32
msgid "In Quarkus, you only need to:"
msgstr "Quarkusでは、次のことを行うだけです:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:34
msgid "add your configuration settings in `{config-file}`"
msgstr "`{config-file}` に設定を追加します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:35
msgid "annotate your entities with `@Entity` and any other mapping annotation as usual"
msgstr "エンティティーに `@Entity` やその他のマッピングアノテーションを通常通りにアノテーションします。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:37
msgid "Other configuration needs have been automated: Quarkus will make some opinionated choices and educated guesses."
msgstr "その他の設定の必要性は自動化されています。Quarkusは、いくつかの定見に基づいた選択と経験に基づいた推測を行います。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:39
msgid "Add the following dependencies to your project:"
msgstr "以下の依存関係をプロジェクトに追加してください:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:41
msgid "the Hibernate ORM extension: `io.quarkus:quarkus-hibernate-orm`"
msgstr "Hibernate ORM エクステンション: `io.quarkus:quarkus-hibernate-orm`"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:42
msgid "your JDBC driver extension; the following options are available:"
msgstr "JDBC ドライバーエクステンション。以下のオプションを使用できます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:43
msgid "`quarkus-jdbc-db2` for link:https://www.ibm.com/products/db2-database[IBM DB2]"
msgstr "link:https://www.ibm.com/products/db2-database[IBM DB2の] ための `quarkus-jdbc-db2`"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:44
msgid "`quarkus-jdbc-derby` for link:https://db.apache.org/derby/[Apache Derby]"
msgstr "link:https://db.apache.org/derby/[アパッチダービー] のための `quarkus-jdbc-derby`"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:45
msgid "`quarkus-jdbc-h2` for link:https://www.h2database.com/html/main.html[H2]"
msgstr "link:https://www.h2database.com/html/main.html[H2] のための `quarkus-jdbc-h2`"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:46
msgid "`quarkus-jdbc-mariadb` for link:https://mariadb.com/[MariaDB]"
msgstr "link:https://mariadb.com/[MariaDB] のための `quarkus-jdbc-mariadb`"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:47
msgid "`quarkus-jdbc-mssql` for link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server]"
msgstr "link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server] のための `quarkus-jdbc-mssql`"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:48
msgid "`quarkus-jdbc-mysql` for link:https://www.mysql.com/[MySQL]"
msgstr "link:https://www.mysql.com/[MySQL] のための `quarkus-jdbc-mysql`"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:49
msgid "`quarkus-jdbc-oracle` for link:https://www.oracle.com/database/[Oracle Database]"
msgstr "link:https://www.oracle.com/database/[Oracle Database] のための `quarkus-jdbc-oracle`"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:50
msgid "`quarkus-jdbc-postgresql` for link:https://www.postgresql.org/[PostgreSQL]"
msgstr "link:https://www.postgresql.org/[PostgreSQL] のための `quarkus-jdbc-postgresql`"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:52
msgid "For instance:"
msgstr "例えば"

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:54
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:70
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:83
#, no-wrap
msgid "Example `{config-file}`"
msgstr "例 `{config-file}`"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:99
msgid "Also, Quarkus will set many Hibernate ORM configuration settings automatically, and will often use more modern defaults."
msgstr "また、Quarkusは多くのHibernate ORMの設定を自動的に設定し、多くの場合、より現代的なデフォルト値を使用します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:101
msgid "For a list of the items that you can set in `{config-file}`, see xref:hibernate-configuration-properties[Hibernate ORM configuration properties]."
msgstr "`{config-file}` で設定できる項目の一覧は、 xref:hibernate-configuration-properties[Hibernate ORM設定プロパティ] を参照してください。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:103
msgid "An `EntityManagerFactory` will be created based on the Quarkus `datasource` configuration as long as the Hibernate ORM extension is listed among your project dependencies."
msgstr "Hibernate ORM エクステンションがプロジェクトの依存関係の中に入っていればQuarkus の `datasource` の設定に基づいて `EntityManagerFactory` が作成されます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:108
msgid "You can then happily inject your `EntityManager`:"
msgstr "その後、 `EntityManager` をうまくインジェクションすることができます:"

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:110
#, no-wrap
msgid "Example application bean using Hibernate"
msgstr "Hibernateを使用したアプリケーションBeanの例"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:127
msgid "Inject your entity manager and have fun"
msgstr "エンティティーマネージャーを注入して楽しむ"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:128
msgid "Mark your CDI bean method as `@Transactional` and the `EntityManager` will enlist and flush at commit."
msgstr "CDI Beanメソッドに `@Transactional` を付けると `EntityManager` がトランザクション境界内に入りコミット時にフラッシュします。"

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:130
#, no-wrap
msgid "Example Entity"
msgstr "エンティティーの例"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:163
msgid "This is useful to have a data set ready for your tests or demos."
msgstr "テストやデモ用のデータセットを用意しておくと便利です。"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:169
#, no-wrap
msgid "Dialect"
msgstr "Dialect"

#. type: Title ====
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:172
#, no-wrap
msgid "Supported databases"
msgstr "サポートされるデータベース"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:180
msgid "By default, the dialect is configured to target the minimum supported version of the database."
msgstr "デフォルトでは、データベースの最小サポートバージョンをターゲットとするようにdialectが設定されています。"

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:186
#, no-wrap
msgid "`{config-file}` with an explicit `db-version`"
msgstr "`db-version` を明示した `{config-file}`"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:195
msgid "Set the database version. The Hibernate ORM dialect will target that version."
msgstr "データベースのバージョンを設定します。Hibernate ORM dialectはそのバージョンをターゲットにします。"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:210
msgid "If the database cannot be reached, a warning will be logged but startup will proceed."
msgstr "データベースに到達できない場合、警告が記録されますが、起動は続行されます。"

#. type: Title ====
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:213
#, no-wrap
msgid "Other databases"
msgstr "その他のデータベース"

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:220
#, no-wrap
msgid "`{config-file}` with an explicit `dialect`"
msgstr "`dialect` を明示した `{config-file}`"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:230
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:254
msgid "Set the Hibernate ORM dialect."
msgstr "Hibernate ORM dialectを設定します。"

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:241
#, no-wrap
msgid "`{config-file}` with an explicit `dialect` and `db-version`"
msgstr "`dialect` と `db-version` を明示した `{config-file}`"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:256
#, no-wrap
msgid "Hibernate ORM configuration properties"
msgstr "Hibernate ORMの設定プロパティ"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:259
msgid "There are various optional properties useful to refine your `EntityManagerFactory` or guide guesses of Quarkus."
msgstr "`EntityManagerFactory` を改良したり、Quarkusの推測を導くのに便利な様々なオプションのプロパティがあります。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:261
msgid "There are no required properties, as long as a default datasource is configured."
msgstr "デフォルトのデータソースが設定されていれば、それ以外に必須のプロパティはありません。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:266
msgid "The configuration properties listed here allow you to override such defaults, and customize and tune various aspects."
msgstr "ここに記載されている設定プロパティーでは、このようなデフォルトを上書きしたり、様々な面をカスタマイズしたり調整したりすることができます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:287
msgid "Want to start a PostgreSQL server on the side with Docker?"
msgstr "PostgreSQLサーバをDockerで起動したいですか？"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:296
msgid "This will start a non-durable empty database: ideal for a quick experiment!"
msgstr "これは、永続化されない空のデータベースを起動します。簡単な実験に最適です!"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:299
#, no-wrap
msgid "Multiple persistence units"
msgstr "複数の永続化ユニット"

#. type: Title ====
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:301
#, no-wrap
msgid "Setting up multiple persistence units"
msgstr "複数の永続化ユニットの設定"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:304
msgid "It is possible to define multiple persistence units using the Quarkus configuration properties."
msgstr "Quarkusの設定プロパティを使用して複数の永続化ユニットを定義することができます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:317
msgid "Using a map based approach, it is possible to define named persistence units:"
msgstr "マップをベースにした方法で名前付きの永続化ユニットを定義することができます:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:335
msgid "Define a datasource named `users`."
msgstr "`users` という名前のデータソースを定義します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:336
msgid "Define a datasource named `inventory`."
msgstr "`inventory` という名前のデータソースを定義します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:337
msgid "Define a persistence unit called `users`."
msgstr "`users` という永続化ユニットを定義します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:338
msgid "Define the datasource used by the persistence unit."
msgstr "永続化ユニットが使用するデータソースを定義します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:339
msgid "This configuration property is important, but we will discuss it a bit later."
msgstr "この設定プロパティは重要ですが、説明は少し後になります。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:340
msgid "Define a persistence unit called `inventory` pointing to the `inventory` datasource."
msgstr "`users` という永続化ユニットを定義します。"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:344
msgid "You can mix the default datasource and named datasources or only have one or the other."
msgstr "デフォルトデータソースと名前付きデータソースを混在させることも、どちらか一方だけにすることもできます。"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:354
msgid "It is perfectly valid to have several persistence units pointing to the same datasource."
msgstr "複数の永続化ユニットが同じデータソースを使用することもできます。"

#. type: Title ====
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:357
#, no-wrap
msgid "Attaching model classes to persistence units"
msgstr "モデルクラスを永続化ユニットにアタッチする"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:360
msgid "There are two ways to attach model classes to persistence units, and they should not be mixed:"
msgstr "モデルクラスを永続化ユニットにアタッチする方法は2つあり、混在できません:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:362
msgid "Via the `packages` configuration property;"
msgstr "`packages` 設定プロパティを使用します;"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:363
msgid "Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation."
msgstr "`@io.quarkus.hibernate.orm.PersistenceUnit` パッケージレベルのアノテーションを使用します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:365
msgid "If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account."
msgstr "両方が混在している場合はアノテーションが無視され、 `packages` の設定プロパティのみが考慮されます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:367
msgid "Using the `packages` configuration property is simple:"
msgstr "`packages` 設定プロパティは簡単です:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:379
msgid "This configuration snippet will create two persistence units:"
msgstr "この設定スニペットは2つの永続化ユニットを作成します:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:381
msgid "The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included."
msgstr "デフォルトでは、 `org.acme.model.defaultpu` パッケージのすべてのモデルクラスが含まれ、サブパッケージも含まれます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:382
msgid "A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included."
msgstr "`users` という名前の永続化ユニットで、 `org.acme.model.user` パッケージのすべてのモデルクラスを含み、サブパッケージも含まれています。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:384
msgid "You can attach several packages to a persistence unit:"
msgstr "複数のpackageを永続化ユニットにアタッチできます:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:391
msgid "All the model classes under the `org.acme.model.shared` and `org.acme.model.user` packages will be attached to the `users` persistence unit."
msgstr "`org.acme.model.shared` と `org.acme.model.user` パッケージの下にあるすべてのモデル・クラスは、 `users` 永続化ユニットにアタッチされます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:393
msgid "It is also supported to attach a given model class to several persistence units."
msgstr "モデルクラスを複数の永続化ユニットにアタッチすることもサポートされます。"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:404
msgid "Panache entities can be attached to only one persistence unit."
msgstr "Panacheエンティティは1つの永続化ユニットにのみアタッチできます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:416
msgid "To obtain a configuration similar to the one above with the `packages` configuration property, create a `package-info.java` file with the following content:"
msgstr "上記のような構成を `packages` の設定プロパティで取得するには、以下の内容の `package-info.java` ファイルを作成します:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:425
msgid "Be careful, use the `@io.quarkus.hibernate.orm.PersistenceUnit` annotation, not the Jakarta Persistence one."
msgstr "Jakarta Persistenceのアノテーションではなく、 `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用することに注意してください。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:433
msgid "Note that, similarly to what we do with the configuration property, we take into account the annotated package but also all its subpackages."
msgstr "設定プロパティで行うのと同様で、アノテーションのつけられたパッケージだけでなく、そのすべてのサブパッケージも入れていることに注意してください。"

#. type: Title ====
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:434
#, no-wrap
msgid "CDI integration"
msgstr "CDI統合"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:437
msgid "If you are familiar with using Hibernate ORM in Quarkus, you probably already have injected the `EntityManager` using CDI:"
msgstr "QuarkusでHibernate ORMを使用することに慣れている方は、CDIを使用して `EntityManager` をインジェクションしたことがあると思います:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:445
msgid "This will inject the `EntityManager` of the default persistence unit."
msgstr "これは、デフォルトの永続化ユニットの `EntityManager` を注入します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:447
msgid "Injecting the `EntityManager` of a named persistence unit (`users` in our example) is as simple as:"
msgstr "名前付き永続化ユニット ( この例では `users` ) の `EntityManager` をインジェクトするのは簡単です:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:455
msgid "Here again, we use the same `@io.quarkus.hibernate.orm.PersistenceUnit` annotation."
msgstr "ここでも同じ `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用しています。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:457
msgid "You can inject the `EntityManagerFactory` of a named persistence unit using the exact same mechanism:"
msgstr "全く同じ仕組みで名前付き永続化ユニットの `EntityManagerFactory` をインジェクトすることができます:"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:466
#, no-wrap
msgid "Setting up and configuring Hibernate ORM with a `persistence.xml`"
msgstr "`persistence.xml` を使用した場合のHibernate ORMのセットアップと設定"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:472
msgid "migrating existing code"
msgstr "既存コードの移行"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:473
msgid "when you have relatively complex settings requiring the full flexibility of the configuration"
msgstr "比較的複雑な設定をしていて、設定の柔軟性が必要な場合"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:474
msgid "or if you like it the good old way"
msgstr "または、昔ながらの方法が好みの場合"

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:493
#, no-wrap
msgid "Example persistence.xml resource"
msgstr "persistence.xml リソースの例"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:532
#, no-wrap
msgid "XML mapping"
msgstr "XMLマッピング"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:540
msgid "in `application.properties` through the (build-time) link:#quarkus-hibernate-orm_quarkus.hibernate-orm.mapping-files[`quarkus.hibernate-orm.mapping-files`] property."
msgstr "`application.properties` で（ビルド時の） link:#quarkus-hibernate-orm_quarkus.hibernate-orm.mapping-files[`quarkus.hibernate-orm.mapping-files`]プロパティを使用して。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:541
msgid "in xref:persistence-xml[`persistence.xml`] through the `<mapping-file>` element."
msgstr "xref:persistence-xml[persistence.xml] の `<mapping-file>` 要素経由。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:543
msgid "XML mapping files are parsed at build time."
msgstr "XMLマッピングファイルは、ビルド時に解析されます。"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:547
msgid "The file `META-INF/orm.xml` will always be included by default, if it exists in the classpath."
msgstr "`META-INF/orm.xml` ファイルがクラスパスに存在する場合は、常にデフォルトでインクルードされます。"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:549
msgid "If that is not what you want, use `quarkus.hibernate-orm.mapping-files = no-file` or `<mapping-file>no-file</mapping-file>`."
msgstr "そうしたくない場合は、 `quarkus.hibernate-orm.mapping-files = no-file` や `<mapping-file>no-file</mapping-file>` を使用してください。"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:551
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:560
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr "これにより、Quarkusは、エンティティーが現在のプロジェクトの内部にあるかのようにインデックスを作成し、強化することができます。"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:562
#, no-wrap
msgid "Hibernate ORM in development mode"
msgstr "開発モードでのHibernate ORM"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:565
msgid "Quarkus development mode is really useful for applications that mix front end or services and database access."
msgstr "Quarkusの開発モードはフロントエンドやサービス、データベースアクセスが混在するアプリケーションにとても便利です。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:567
msgid "There are a few common approaches to make the best of it."
msgstr "それを生かすためにはいくつかの共通したアプローチがあります。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:569
msgid "The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`."
msgstr "1つ目の選択肢は、 `quarkus.hibernate-orm.database.generation=drop-and-create` と `import.sql` を併用することです。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:598
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment."
msgstr "本番環境では、 `quarkus.hibernate-orm.database.generation` で `drop-and-create` と `update` は使用しないでください。"

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:606
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:641
#, no-wrap
msgid "application.properties"
msgstr "application.properties"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:619
msgid "You can start dev mode using a custom profile:"
msgstr "カスタムプロファイルを使用して開発モードを開始することができます:"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:624
#, no-wrap
msgid "Hibernate ORM in production mode"
msgstr "本番モードでのHibernate ORM"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:630
msgid "The Hibernate ORM Quarkus extension sets some default configurations differently in dev and test modes than in other environments."
msgstr "Hibernate ORM Quarkusエクステンションでは、いくつかのデフォルト設定が、開発モードとテストモードで他の環境とは異なるように設定されています。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:632
msgid "`quarkus.hibernate-orm.sql-load-script` is set to `no-file` for all profiles except the `dev` and `test` ones."
msgstr "`dev` と `test` 以外のプロフィールは `quarkus.hibernate-orm.sql-load-script` が `no-file` に設定されています。"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:648
#, no-wrap
msgid "Automatically transitioning to Flyway to Manage Schemas"
msgstr "スキーマを管理するためのFlywayへの自動移行"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:659
msgid "A `db/migration/V1.0.0__\\{appname\\}.sql` file will be created, containing the SQL Hibernate is running to generate the schema"
msgstr "スキーマを生成するためにHibernateが実行するSQLを含んだ `db/migration/V1.0.0__{appname}.sql` ファイルが作成されます"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:660
msgid "`quarkus.flyway.baseline-on-migrate` will be set, telling Flyway to automatically create its baseline tables"
msgstr "`quarkus.flyway.baseline-on-migrate` が設定され、Flywayがベースラインとなるテーブルを自動的に作成するようになります"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:661
msgid "`quarkus.flyway.migrate-at-start` will be set, telling Flyway to automatically apply migrations on application startup"
msgstr "`quarkus.flyway.migrate-at-start` が設定され、アプリケーションの起動時にFlywayが自動的にマイグレーションを適用するようになります"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:662
msgid "`%dev.quarkus.flyway.clean-at-start` and `%test.quarkus.flyway.clean-at-start` will be set, to clean the DB after reload in dev/test mode"
msgstr "dev/test モードでリロードした後、DB をクリーンにするために `%dev.quarkus.flyway.clean-at-start` と ``%test.quarkus.flyway.clean-at-start` が設定されます"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:667
#, no-wrap
msgid "Caching"
msgstr "キャッシング"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:670
msgid "Applications that frequently read the same entities can see their performance improved when the Hibernate ORM second-level cache is enabled."
msgstr "同じエンティティを頻繁に読み込むアプリケーションでは、Hibernate ORMのL2キャッシュを有効にするとパフォーマンスが向上します。"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:671
#, no-wrap
msgid "Caching of entities"
msgstr "エンティティーのキャッシュ"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:674
msgid "To enable second-level cache, mark the entities that you want cached with `@jakarta.persistence.Cacheable`:"
msgstr "セカンドレベルキャッシュを有効にするには、キャッシュさせたいエンティティを `@jakarta.persistence.Cacheable` でマークします:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:686
msgid "When an entity is annotated with `@Cacheable`, all its field values are cached except for collections and relations to other entities."
msgstr "エンティティーが `@Cacheable` でアノテーションされているときは、コレクションと他のエンティティーとの関係を除いて、そのすべてのフィールド値がキャッシュされます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:688
msgid "This means the entity can be loaded without querying the database, but be careful as it implies the loaded entity might not reflect recent changes in the database."
msgstr "これは、データベースに問い合わせることなくエンティティをロードできることを意味しますが、ロードされたエンティティがデータベースの最近の変更を反映していない可能性があることを意味するので注意が必要です。"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:689
#, no-wrap
msgid "Caching of collections and relations"
msgstr "コレクションとリレーションのキャッシング"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:692
msgid "Collections and relations need to be individually annotated to be cached; in this case the Hibernate specific `@org.hibernate.annotations.Cache` should be used, which requires also to specify the `CacheConcurrencyStrategy`:"
msgstr "コレクションとリレーションはキャッシュするために個別にアノテーションする必要があります。この場合、Hibernate固有の `@org.hibernate.annotations.Cache` を使用する必要があり、さらに `CacheConcurrencyStrategy` を指定する必要があります:"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:710
#, no-wrap
msgid "Caching of queries"
msgstr "クエリのキャッシュ"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:713
msgid "Queries can also benefit from second-level caching. Cached query results can be returned immediately to the caller, avoiding to run the query on the database."
msgstr "クエリは、第二レベルのキャッシュの恩恵を受けることもできます。キャッシュされたクエリの結果は即座に呼び出し元に返すことができるので、データベース上でクエリを実行する必要がありません。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:715
msgid "Be careful as this implies the results might not reflect recent changes."
msgstr "最近の変化を反映していない可能性があることを含意しているので注意が必要です。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:717
msgid "To cache a query, mark it as cacheable on the `Query` instance:"
msgstr "クエリをキャッシュするには、 `Query` インスタンス上でキャッシュ可能なものとしてマークします。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:725
msgid "If you have a `NamedQuery` then you can enable caching directly on its definition, which will usually be on an entity:"
msgstr "`NamedQuery` があれば、その定義で直接キャッシュを有効にすることができます。これは通常、エンティティ上で行われます:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:737
msgid "That's all! Caching technology is already integrated and enabled by default in Quarkus, so it's enough to set which ones are safe to be cached."
msgstr "以上です。キャッシュ技術はすでにQuarkusに統合されてデフォルトで有効になってるのでキャッシュしても問題ないものを設定するだけで十分です。"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:738
#, no-wrap
msgid "Tuning of Cache Regions"
msgstr "キャッシュ領域の調整"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:741
msgid "Caches store the data in separate regions to isolate different portions of data; such regions are assigned a name, which is useful for configuring each region independently, or to monitor their statistics."
msgstr "キャッシュはデータの異なる部分を分離するために別々の領域にデータを保存します。このような領域には名前が付けられ、各領域を独立して設定したり、統計を監視したりするのに役立ちます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:743
msgid "By default, entities are cached in regions named after their fully qualified name, e.g. `org.acme.Country`."
msgstr "デフォルトでは、エンティティは、その完全修飾名を冠した領域（例えば、 `org.acme.Country`）にキャッシュされます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:745
msgid "Collections are cached in regions named after the fully qualified name of their owner entity and collection field name, separated by `#` character, e.g. `org.acme.Country#cities`."
msgstr "`org.acme.Country#cities` コレクションは保持するエンティティの完全修飾名とコレクションのフィールド名を `#` 文字で区切った名前の領域にキャッシュされます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:747
msgid "All cached queries are by default kept in a single region dedicated to them called `default-query-results-region`."
msgstr "すべてのキャッシュされたクエリは、デフォルトでは、 `default-query-results-region` と呼ばれる一つの専用の領域に保存されます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:749
msgid "All regions are bounded by size and time by default. The defaults are `10000` max entries, and `100` seconds as maximum idle time."
msgstr "すべてのリージョンは、デフォルトではサイズと時間で制限されています。デフォルトでは、最大で `10000` のエントリ数、最大で `100` 秒のアイドル時間が設定されています。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:751
msgid "The size of each region can be customized via the `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` property (Replace _<region_name>_ with the actual region name)."
msgstr "各領域のサイズは、 `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` プロパティ（ _<region_name>_ を実際の領域名に置き換えてください）でカスタマイズできます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:753
msgid "To set the maximum idle time, provide the duration (see note on duration's format below) via the `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` property (Replace _<region_name>_ with the actual region name)."
msgstr "最大アイドル時間を設定するには、 `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` プロパティ （_<region_name>_ を実際のリージョン名に置き換えてください）で時間（下記の時間のフォーマットに関する注意を参照）を指定します。"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:757
msgid "The double quotes are mandatory if your region name contains a dot. For instance:"
msgstr "領域名にドットが含まれている場合は二重引用符が必須です。次のようになります:"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:766
#, no-wrap
msgid "Limitations of Caching"
msgstr "キャッシングの制限"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:769
msgid "The caching technology provided within Quarkus is currently quite rudimentary and limited."
msgstr "Quarkusで提供されているキャッシング技術は、現在のところ非常に初歩的で限られています。"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:771
msgid "The team thought it was better to have _some_ caching capability to start with, than having nothing; you can expect better caching solution to be integrated in future releases, and any help and feedback in this area is very welcome."
msgstr "Quarkusの開発チームは最初から _ある程度の_ キャッシュ機能があった方が何もないよりは良いと考えました。将来のリリースではより良いキャッシュソリューションが統合されることを期待しています。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:775
msgid "These caches are kept locally, so they are not invalidated or updated when changes are made to the persistent store by other applications."
msgstr "これらのキャッシュはローカルに保持されているため、他のアプリケーションによって永続ストアに変更が加えられても無効化されたり更新されたりすることはありません。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:777
msgid "Also, when running multiple copies of the same application (in a cluster, for example on Kubernetes/OpenShift), caches in separate copies of the application aren't synchronized."
msgstr "また、同じアプリケーションの複数のコピーを（Kubernetes/OpenShiftなどのクラスタで）実行している場合、アプリケーションの別々のコピーのキャッシュは同期されません。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:779
msgid "For these reasons, enabling caching is only suitable when certain assumptions can be made: we strongly recommend that only entities, collections and queries which never change are cached. Or at most, that when indeed such an entity is mutated and allowed to be read out of date (stale) this has no impact on the expectations of the application."
msgstr "これらの理由から、ある種の仮定が成り立つ場合にのみキャッシュを有効にすることが適しています。私たちは、変化しないエンティティ、コレクション、およびクエリのみをキャッシュすることを強く推奨します。あるいは、そのようなエンティティが実際に変更され、古くなった（stale）ものを読み取ったとしても、アプリケーションの期待値に影響を与えないようにする必要があります。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:781
msgid "Following this advice guarantees applications get the best performance out of the second-level cache and yet avoid unexpected behaviour."
msgstr "このアドバイスに従うことで、アプリケーションがL2キャッシュから最高のパフォーマンスを引き出し、かつ予期せぬ動作を避けることができます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:788
msgid "Rather than enabling caching on mutable data, ideally a better solution would be to use a clustered cache; however at this time Quarkus doesn't provide any such implementation: feel free to get in touch and let this need known so that the team can take this into account."
msgstr "理想的には、変更可能なデータでキャッシュを有効にするのではなく、クラスタ化されたキャッシュを使用することがより良い解決策です。しかし、現時点では、Quarkusはそのような実装を提供していません：この必要性を知らせれば、チームがこれを考慮することができますので、お気軽にご連絡ください。"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:791
msgid "Finally, the second-level cache can be disabled globally by setting `hibernate.cache.use_second_level_cache` to `false`; this is a setting that needs to be specified in the `persistence.xml` configuration file."
msgstr "最後に、 `hibernate.cache.use_second_level_cache` を `false` に設定することで、L2キャッシュをグローバルで無効化できます。この設定は、 `persistence.xml` 設定ファイルで指定する必要があります。"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:793
msgid "When second-level cache is disabled, all cache annotations are ignored and all queries are run ignoring caches; this is generally useful only to diagnose issues."
msgstr "L2キャッシュを無効にすると、すべてのキャッシュアノテーションは無視され、すべてのクエリはキャッシュを無視して実行されます。これは通常、問題を診断する場合にのみ有効です。"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:795
#, no-wrap
msgid "Hibernate Envers"
msgstr "Hibernate Envers"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:797
msgid "The Envers extension to Hibernate ORM aims to provide an easy auditing / versioning solution for entity classes."
msgstr "Hibernate ORMのEnversエクステンションは、エンティティークラスのための簡単な監査/バージョン管理ソリューションを提供することを目的としています。"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:799
msgid "In Quarkus, Envers has a dedicated Quarkus Extension `io.quarkus:quarkus-hibernate-envers`; you just need to add this to your project to start using it."
msgstr "Quarkusでは、Enversには専用のQuarkus Extensionがあります。 `io.quarkus:quarkus-hibernate-envers` ; これをプロジェクトに追加して使用を開始する必要があります。"

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:801
#, no-wrap
msgid "Additional dependency to enable Hibernate Envers"
msgstr "Hibernate Enversを有効にするための追加の依存関係"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:811
msgid "At this point the extension does not expose additional configuration properties."
msgstr "Quarkusの設定プロパティを使用して、複数の永続化ユニットを定義することができます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:813
msgid "For more information about Hibernate Envers, see link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/]."
msgstr "Hibernate Enversの詳細については、 link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/]を参照してください。"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:815
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:821
#, no-wrap
msgid "Limitations and other things you should know"
msgstr "制限事項など知っておくべきこと"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:830
#, no-wrap
msgid "Automatic build time enhancement"
msgstr "自動ビルド時間の強化"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:844
msgid "This limitation might be removed in the future."
msgstr "この制限は将来的に削除される可能性があります。"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:846
#, no-wrap
msgid "Automatic integration"
msgstr "自動統合"

#. type: Labeled list
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:848
#, no-wrap
msgid "Transaction Manager integration"
msgstr "トランザクション・マネージャーの統合"

#. type: Labeled list
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:853
#, no-wrap
msgid "Connection pool"
msgstr "接続プール"

#. type: Labeled list
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:858
#, no-wrap
msgid "Second Level Cache"
msgstr "セカンドレベルキャッシュ"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:862
#, no-wrap
msgid "Limitations"
msgstr "制約事項"

#. type: Labeled list
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:864
#, no-wrap
msgid "XML mapping with duplicate files in the classpath"
msgstr "クラスパスに重複したファイルがある場合のXMLマッピング"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:866
msgid "xref:xml-mapping[XML mapping] files are expected to have a unique path."
msgstr "xref:xml-mapping[XMLマッピング] ファイルは、一意のパスを持つことが期待されます。"

#. type: Labeled list
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:872
#, no-wrap
msgid "JMX"
msgstr "JMX"

#. type: Labeled list
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:878
#, no-wrap
msgid "JACC Integration"
msgstr "JACCの統合"

#. type: Labeled list
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:882
#, no-wrap
msgid "Binding the Session to ThreadLocal context"
msgstr "セッションをThreadLocalコンテキストにバインドする"

#. type: Labeled list
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:888
#, no-wrap
msgid "JNDI"
msgstr "JNDI"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:895
#, no-wrap
msgid "Other notable differences"
msgstr "その他の特記すべき相違点"

#. type: Labeled list
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:897
#, no-wrap
msgid "Format of `import.sql`"
msgstr "`import.sql` のフォーマット"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:902
#, no-wrap
msgid "Simplifying Hibernate ORM with Panache"
msgstr "シンプルになったHibernate ORM with Panache"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:905
msgid "The xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] extension facilitates the usage of Hibernate ORM by providing active record style entities (and repositories) and focuses on making your entities trivial and fun to write in Quarkus."
msgstr "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] エクステンションはアクティブレコードスタイルのエンティティ（およびリポジトリ）を提供してHibernate ORMを簡単に使えるようにし、Quarkusでエンティティを簡単に楽しく書けるようにすることに重点を置いています。"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:906
#, no-wrap
msgid "Configure your datasource"
msgstr "データソースの設定"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:912
msgid "Jump over to xref:datasource.adoc[Quarkus - Datasources] for all details."
msgstr "詳細は xref:datasource.adoc[Quarkus - データソース]をご覧ください。"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:914
#, no-wrap
msgid "Multitenancy"
msgstr "マルチテナンシー"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:917
#, fuzzy
msgid "\"The term multitenancy, in general, is applied to software development to indicate an architecture in which a single running instance of an application simultaneously serves multiple clients (tenants). This is highly common in SaaS solutions. Isolating information (data, customizations, etc.) pertaining to the various tenants is a particular challenge in these systems. This includes the data owned by each tenant stored in the database\" (link:{hibernate-orm-docs-url}#multitenacy[Hibernate User Guide])."
msgstr "\"マルチテナント \"という用語は、一般的にソフトウェア開発に適用され、アプリケーションの単一の実行インスタンスが同時に複数のクライアント（テナント）にサービスを提供するアーキテクチャを示す。これはSaaSソリューションでは非常に一般的です。このようなシステムでは、さまざまなテナントに関連する情報（データ、カスタマイズなど）を分離することが特に課題となります。これには、データベースに格納された各テナントが所有するデータも含まれます」（ link:{hibernate-orm-docs-url}#multitenacy[Hibernateユーザーガイド] ）。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:919
#, fuzzy
msgid "Quarkus currently supports the link:{hibernate-orm-docs-url}#multitenacy-separate-database[separate database] approach, the link:{hibernate-orm-docs-url}#multitenacy-separate-schema[separate schema] approach and the link:{hibernate-orm-docs-url}#multitenacy-discriminator[discriminator] approach."
msgstr "Quarkusは現在、 link:{hibernate-orm-docs-url}#multitenacy-separate-database[分離データベース] アプローチ、 link:{hibernate-orm-docs-url}#multitenacy-separate-schema[分離スキーマ] アプローチ、 link:{hibernate-orm-docs-url}#multitenacy-discriminator[識別器] アプローチをサポートしています。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:921
#, fuzzy
msgid "To see multitenancy in action, you can check out the link:{quickstarts-tree-url}/hibernate-orm-multi-tenancy-quickstart[hibernate-orm-multi-tenancy-quickstart] quickstart."
msgstr "マルチテナンシーの動作を確認するには、 link:{quickstarts-tree-url}/hibernate-orm-multi-tenancy-quickstart[hibernate-orm-multi-tenancy-quickstart] クイックスタートをご覧ください。"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:922
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:925
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular Jakarta REST resource:"
msgstr "まず、 `/{tenant}` のエンドポイントを実装することから始めましょう。以下のソースコードからわかるように、これは通常の Jakarta REST リソースです:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:952
msgid "In order to resolve the tenant from incoming requests and map it to a specific tenant configuration, you need to create an implementation for the `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` interface."
msgstr "受信したリクエストからテナントを解決し、特定のテナント構成にマッピングするためには、 `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` インターフェースの実装を作成する必要があります。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:991
msgid "For xref:multiple-persistence-units[named persistence units], use `@PersistenceUnitExtension(\"nameOfYourPU\")`."
msgstr "xref:multiple-persistence-units[名前付き永続化ユニット] の場合は、 `@PersistenceUnitExtension(\"nameOfYourPU\")` を使用します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:992
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr "Beanは、テナントの解決が入ってくるリクエストに依存するため `@RequestScoped` にします。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:994
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, the default tenant identifier is returned."
msgstr "上記の実装ではテナントはリクエストパスから解決されるので、テナントが推測できない場合はデフォルトのテナント識別子が返されます。"

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:998
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr "xref:security-openid-connect-multitenancy.adoc[OIDCマルチテナンシー]も使用していて、OIDCとHibernate ORMの両方のテナントIDが同じで、Vert.xの `RoutingContext` から抽出する必要がある場合は、OIDCテナントリゾルバからHibernate ORMテナントリゾルバに、 `RoutingContext` 属性としてテナントIDを渡すことができます。例:"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1020
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Title ====
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1026
#, no-wrap
msgid "SCHEMA approach"
msgstr "SCHEMAアプローチ"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1054
msgid "Here is an example of the Flyway SQL (`V1.0.0__create_fruits.sql`) to be created in the configured folder `src/main/resources/schema`."
msgstr "ここでは、設定されたフォルダー `src/main/resources/schema` に作成される Flyway SQL ( `V1.0.0__create_fruits.sql` ) の例を示します。"

#. type: Title ====
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1082
#, no-wrap
msgid "DATABASE approach"
msgstr "データベースアプローチ"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1085
msgid "For every tenant you need to create a named data source with the same identifier that is returned by the `TenantResolver`."
msgstr "すべてのテナントに対して、 `TenantResolver` が返すのと同じ識別子を持つ名前付きデータソースを作成する必要があります。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1116
msgid "Following are examples of the Flyway SQL files to be created in the configured folder `src/main/resources/database`."
msgstr "以下は、設定されたフォルダー `src/main/resources/database` に作成する Flyway SQL ファイルの例です。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1118
msgid "Default schema (`src/main/resources/database/default/V1.0.0__create_fruits.sql`):"
msgstr "デフォルトスキーマ ( `src/main/resources/database/default/V1.0.0__create_fruits.sql` )。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1134
msgid "Mycompany schema (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"
msgstr "Mycompany schema (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"

#. type: Title ====
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1151
#, no-wrap
msgid "DISCRIMINATOR approach"
msgstr "識別子のアプローチ"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1154
msgid "The default data source will be used for all tenants. All entities defining a field annotated with `@TenantId` will have that field populated automatically, and will get filtered automatically in queries."
msgstr "デフォルトのデータソースがすべてのテナントに使用されます。 `@TenantId` でアノテーションされたフィールドを定義しているすべてのエンティティには、そのフィールドが自動的に入力され、クエリで自動的にフィルタリングされます。"

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1169
#, no-wrap
msgid "Programmatically Resolving Tenants Connections"
msgstr "テナント接続をプログラムで解決"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1179
#, no-wrap
msgid "Interceptors"
msgstr "インターセプター"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1200
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1242
msgid "For xref:multiple-persistence-units[named persistence units], use `@PersistenceUnitExtension(\"nameOfYourPU\")`"
msgstr "xref:multiple-persistence-units[名前付き永続化ユニット] の場合、 `@PersistenceUnitExtension(\"nameOfYourPU\")` を使用します"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1201
msgid "Either extend `org.hibernate.EmptyInterceptor` or implement `org.hibernate.Interceptor` directly."
msgstr "`org.hibernate.EmptyInterceptor` を拡張するか、 `org.hibernate.Interceptor` を直接実装する。"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1202
msgid "Implement methods as necessary."
msgstr "必要に応じてメソッドを実装する。"

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1223
#, no-wrap
msgid "Statement Inspectors"
msgstr "ステートメントインスペクター"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1226
msgid "You can assign a `org.hibernate.engine.jdbc.spi.StatementInspector` to your `SessionFactory` by simply defining a CDI bean with the appropriate qualifier:"
msgstr "適切な修飾子を持つCDI Beanを定義するだけで、`SessionFactory` に `org.hibernate.engine.jdbc.spi.StatementInspector` を割り当てることができます:"

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-orm.adoc:1242
msgid "Implement `org.hibernate.engine.jdbc.spi.StatementInspector`."
msgstr "`org.hibernate.engine.jdbc.spi.StatementInspector` を実装してください。"
