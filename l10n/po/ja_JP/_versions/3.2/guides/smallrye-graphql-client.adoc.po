msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"This guide demonstrates how your Quarkus application can use the GraphQL client library.\n"
"The client is implemented by the https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL] project.\n"
"This guide is specifically geared towards the client side, so if you need an introduction to GraphQL in\n"
"general, first refer to the xref:smallrye-graphql.adoc[SmallRye GraphQL guide], which provides an introduction\n"
"to the GraphQL query language, general concepts and server-side development."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"The guide will walk you through developing and running a simple application that uses both supported\n"
"types of GraphQL clients to retrieve data from a remote resource, that being a database related to Star Wars.\n"
"It's available at https://graphql.org/swapi-graphql[this webpage] if you want to experiment with it manually.\n"
"The web UI allows you to write and execute GraphQL queries against it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"The *typesafe* client works very much like the MicroProfile REST Client adjusted for calling GraphQL endpoints.\n"
"A client instance is basically a proxy that you can call like a regular Java object, but under the hood,\n"
"the call will be translated to a GraphQL operation. It works with domain classes directly.\n"
"Any input and output objects for the operation will be translated to/from their representations\n"
"in the GraphQL query language."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"The *dynamic* client, on the other hand, works rather like an equivalent of the Jakarta REST client\n"
"from the `jakarta.ws.rs.client` package. It does not require the domain classes to work, it works with\n"
"abstract representations of GraphQL documents instead. Documents are built using a domain-specific language (DSL).\n"
"The exchanged objects are treated as an abstract `JsonObject`, but, when necessary,\n"
"it is possible to convert them to concrete model objects (if suitable model classes are available)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"The typesafe client can be viewed as a rather high-level and more declarative approach designed for ease of use,\n"
"whereas the dynamic client is lower-level, more imperative, somewhat more verbose to use, but allows finer grained\n"
"control over operations and responses."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"This command generates a project, importing the `smallrye-graphql-client` extension, and also the `resteasy-reactive`\n"
"extension, because we will use that too - a REST endpoint will be the entrypoint to allow you to manually trigger\n"
"the GraphQL client to do its work."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-graphql-client` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"The application we will build makes use of both types of GraphQL clients. In both cases,\n"
"they will connect to the Star Wars service at https://graphql.org/swapi-graphql[SWAPI] and\n"
"query it for a list of Star Wars films, and, for each film, the names of the planets which\n"
"appear in that film."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"To use the typesafe client, we need the corresponding model classes that are compatible with\n"
"the schema. There are two ways to obtain them. First is to  use the client generator offered by SmallRye GraphQL,\n"
"which generates classes from the schema document and a list of queries. This generator is considered highly\n"
"experimental for now, and is not covered in this example. If interested, refer to the\n"
"https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[Client Generator] and its documentation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"In this example, we will create a slimmed down version of the model classes manually, with only the fields\n"
"that we need, and ignore all the stuff that we don't need. We will need the classes for `Film` and `Planet`.\n"
"But, the service is also using specific wrappers named `FilmConnection` and `PlanetConnection`, which,\n"
"for our purpose, will serve just to contain the actual list of `Film` and `Planet` instances, respectively."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"Now that we have the model classes, we can create the interface that represents the actual set\n"
"of operations we want to call on the remote GraphQL service."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"@GraphQLClientApi(configKey = \"star-wars-typesafe\")\n"
"public interface StarWarsClientApi {\n"
"\n"
"    FilmConnection allFilms();\n"
"\n"
"}"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"For simplicity, we're only calling the query named `allFilms`. We named our corresponding method\n"
"`allFilms` too. If we named the method differently, we would need to annotate it with\n"
"`@Query(value=\"allFilms\")` to specify the name of the query that should be executed when this\n"
"method is called."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"The client also needs some configuration, namely at least the URL of the remote service. We can either\n"
"specify that within the `@GraphQLClientApi` annotation (by setting the `endpoint` parameter),\n"
"or move this over to the configuration file, `application.properties`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid "quarkus.smallrye-graphql-client.star-wars-typesafe.url=https://swapi-graphql.netlify.app/.netlify/functions/index"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"During *tests only*, the URL is an optional property, and if it's not specified, Quarkus will assume\n"
"that the target of the client is the application that is being tested (typically, `http://localhost:8081/graphql`).\n"
"This is useful if your application contains a GraphQL server-side API as well as a GraphQL client that is used for\n"
"testing the API."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"`star-wars-typesafe` is the name of the configured client instance, and corresponds to the `configKey`\n"
"in the `@GraphQLClientApi` annotation. If you don't want to specify a custom name, you can leave\n"
"out the `configKey`, and then refer to it by using the fully qualified name of the interface."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"Now that we have the client instance properly configured, we need a way to have it\n"
"perform something when we start the application. For that, we will use a REST endpoint that,\n"
"when called by a user, obtains the client instance and lets it execute the query."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"With this REST endpoint included in your application, you can simply send a GET request to `/typesafe`,\n"
"and the application will use an injected typesafe client instance to call the remote service, obtain\n"
"the films and planets, and return the JSON representation of the resulting list."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"For the dynamic client, the model classes are optional, because we can work with abstract\n"
"representations of the GraphQL types and documents. The client API interface is not needed at all."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.url=https://swapi-graphql.netlify.app/.netlify/functions/index"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"We decided to name the client `star-wars-dynamic`. We will use this name when injecting a dynamic client\n"
"to properly qualify the injection point."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"If you need to add an authorization header, or any other custom HTTP header (in our case\n"
"it's not required), this can be done by:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.header.HEADER-KEY=HEADER-VALUE\""
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"Here we build a document representing the GraphQL query, using the provided DSL language.\n"
"We use static imports to make the code easier to read. The DSL is designed in a way that\n"
"it looks quite similar to writing a GraphQL query as a string."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"Execute the query and block while waiting for the response. There is also an asynchronous\n"
"variant that returns a `Uni<Response>`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"Here we did the optional step of converting the response to instances of our model classes,\n"
"because we have the classes available. If you don't have the classes available or don't want to\n"
"use them, simply calling `response.getData()` would get you a `JsonObject` representing\n"
"all the returned data."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"Whether you use dynamic or typesafe, the result should be the same.\n"
"If the JSON document is hard to read, you might want to run it through a tool that\n"
"formats it for better readability by humans, for example by piping the output through `jq`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"This example showed how to use both the dynamic and typesafe GraphQL clients to call an external\n"
"GraphQL service and explained the difference between the client types."
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:6
#, no-wrap
msgid "SmallRye GraphQL Client"
msgstr "SmallRye GraphQLクライアント"

#. type: Title ==
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:22
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:26
#, no-wrap
msgid "GraphQL client types introduction"
msgstr "GraphQLクライアントタイプの紹介"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:29
msgid "Two types of GraphQL clients are supported."
msgstr "2種類のGraphQLクライアントに対応しています。"

#. type: Title ==
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:46
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:52
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:54
#, fuzzy
msgid "The solution is located in the `microprofile-graphql-client-quickstart` link:{quickstarts-tree-url}/microprofile-graphql-client-quickstart[directory]."
msgstr "ソリューションは `microprofile-graphql-client-quickstart` link:{quickstarts-tree-url}/microprofile-graphql-client-quickstart[ディレクトリに] あります。"

#. type: Title ==
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:55
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:58
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:74
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:76
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:85
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:90
#, no-wrap
msgid "The application"
msgstr "アプリケーション"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:98
msgid "The corresponding GraphQL query looks like this:"
msgstr "これに対応するGraphQLクエリは次のようになります:"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:116
msgid "You may go to https://graphql.org/swapi-graphql[the webpage] to execute this query manually."
msgstr "このクエリを手動で実行するには、 link:https://graphql.org/swapi-graphql[Webページ]にアクセスしてください。"

#. type: Title ==
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:117
#, no-wrap
msgid "Using the Typesafe client"
msgstr "Typesafeクライアントの使用"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:131
msgid "Let's create all the model classes and put them into the `org.acme.microprofile.graphql.client.model` package:"
msgstr "すべてのモデルクラスを作成して、 `org.acme.microprofile.graphql.client.model` パッケージに入れましょう:"

#. type: Title ==
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:257
#, no-wrap
msgid "Using the Dynamic client"
msgstr "dynamic クライアントの使用"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:263
msgid "We still need to configure the URL for the client, so let's put this into `application.properties`:"
msgstr "クライアント用のURLを設定する必要がありますので、これを `application.properties` に入れてみましょう:"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:277
msgid "Add this to the `StarWarsResource` created earlier:"
msgstr "これを先ほど作成した `StarWarsResource` に追加します:"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:315
msgid "Qualifies the injection point so that we know which named client needs to be injected here."
msgstr "インジェクションポイントを修飾することで、どの名前のクライアントをここに注入する必要があるかを知ることができます。"

#. type: Title ==
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:328
#, no-wrap
msgid "Running the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:331
msgid "Launch the application in dev mode using:"
msgstr "次のコマンドでアプリケーションを開発モードで起動します:"

#. type: Plain text
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:335
msgid "To execute the queries, you need to send GET requests to our REST endpoint:"
msgstr "クエリを実行するには、RESTエンドポイントにGETリクエストを送信する必要があります:"

#. type: Title ==
#: upstream/_versions/3.2/guides/smallrye-graphql-client.adoc:345
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"
