msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"https://vertx.io[Vert.x] is a toolkit for building reactive applications.\n"
"As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"It's an introductory guide.\n"
"The xref:vertx-reference.adoc[Vert.x reference guide] covers more advanced features such as verticles, and native transports."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"We recommend that you follow the instructions in the following sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"This guide uses the Mutiny API.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive, reactive programming library]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"Click on https://code.quarkus.io/?a=quarkus-getting-started-vertx&nc=true&e=resteasy-reactive-jackson&e=vertx[this link] to configure your application.\n"
"It selected a few extensions:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"Click on the `Generate your application` button, download the zip file and unzip it.\n"
"Then, open the project in your favorite IDE."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"Create the `src/main/java/org/acme/VertxResource.java` file.\n"
"It will contain our HTTP endpoints."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"The injected Vert.x instance provides a set of APIs you can use.\n"
"The one we are going to use in this section is the Vert.x File System.\n"
"It provides a non-blocking API to access files."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"Reading a file and storing the content in memory works for small files, but not big ones.\n"
"In this section, we will see how you can use Vert.x streaming capability."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"First, download https://www.gutenberg.org/files/2600/2600-0.txt[War and Peace] and store it in `src/main/resources/book.txt`.\n"
"It's a 3.2 Mb file, which, while not being huge, illustrates the purpose of streams.\n"
"This time, we will not accumulate the file's content in memory and write it in one batch, but read it chunk by chunk and write these chunks into the HTTP response one by one."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"It should retrieve the book content.\n"
"In the output you should see the separator like:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"One of the core features of Vert.x is the https://vertx.io/docs/vertx-core/java/#event_bus[event bus].\n"
"It provides a message-based backbone to your application.\n"
"So, you can have components interacting using asynchronous message passing, and so decouple your components.\n"
"You can send a message to a single consumer, or dispatch to multiple consumers, or implement a request-reply interaction, where you send a message (request) and expect a response.\n"
"This is what we are going to use in this section.\n"
"Our `VertxResource` will send a message containing a name to the `greetings` address.\n"
"Another component will receive the message and produce the \"hello $name\" response.\n"
"The `VertxResource` will receive the response and return it as the HTTP response."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "Next, let's extend our `VertxResource` class with the following code:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "Inject the event bus. Alternatively you can use `vertx.eventBus()`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "We receive a _name_ as a query parameter"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "We use the `request` method to initiate the request-reply interaction. We send the name to the \"greetings\" address."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "When the response is received, we extract the body and return it as the HTTP response"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"Now, we need the other side: the component receiving the name and replying.\n"
"Create the `src/main/java/org/acme/GreetingService.java` file with the following content:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "Declaring a CDI Bean in the Application scope. Quarkus will create a single instance of this class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "Use the `@ConsumeEvent` annotation to declare a consumer. It is possible to use the Vert.x API https://vertx.io/docs/vertx-core/java/#_acknowledging_messages_sending_replies[directly] too."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "Receive the message payload as a method parameter. The returned object will be the reply."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "Return the response. This response is sent back to the `VertxResource` class"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"Let's try this.\n"
"In a terminal, run:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "You should get the expected `Hello bob` message back."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"So far, we have used the Vert.x Core API.\n"
"Vert.x offers much more.\n"
"It provides a vast ecosystem.\n"
"In this section, we will see how you can use the Vert.x Web Client, a reactive HTTP client."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"Note that some Quarkus extensions are wrapping Vert.x clients and manage them for you.\n"
"That's the case for the reactive data sources, Redis, mail...\n"
"That's not the case with the Web Client."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"Remember, at the beginning of the guide,  we added the `smallrye-mutiny-vertx-web-client` dependency to our `pom.xml` file.\n"
"It's now time to use it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"Next, we need to create an instance of `WebClient`.\n"
"Extend the `VertxResource` class with the `client` field and the creation of the web client in the constructor:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "Store the `WebClient`, so we will be able to use it in our HTTP endpoint"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "Create the `WebClient`. Be sure to use the `io.vertx.mutiny.ext.web.client.WebClient` class"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"Let's now implement a new HTTP endpoint that queries the Wikipedia API to retrieve the pages about Quarkus in the different languages.\n"
"Add the following method to the `VertxResource` class:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "This endpoint returns a JSON Array. Vert.x provides a convenient way to manipulate JSON Object and Array. More details about these in xref:vertx-reference.adoc#using-vert-x-json[the reference guide]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "Send a `GET` request to the Wikipedia API"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "Once the response is received, extract it as a JSON Object"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "Extract the `langlinks` array from the response."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "Then, invoke the endpoint using:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "The response indicates that, in addition to the English page, there are a German and a French page about Quarkus on wikipedia."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"Sometimes it's necessary to execute an asynchronous code from a blocking thread.\n"
"Specifically, to execute the code on a Vert.x thread with an isolated/duplicated Vert.x context.\n"
"A typical example is an asynchronous code that needs to leverage the Hibernate Reactive API during application startup.\n"
"Quarkus provides the `VertxContextSupport#subscribeAndAwait()` method which subscribes to the supplied `io.smallrye.mutiny.Uni` on a Vert.x duplicated context, then blocks the current thread and waits for the result."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "If necessary, the CDI request context is activated during execution of the asynchronous code."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid "`VertxContextSupport#subscribeAndAwait()` must not be called on an event loop!"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"This guide introduced how you can use Vert.x APIs from a Quarkus application.\n"
"It's just a brief overview.\n"
"If you want to know more, check the xref:vertx-reference.adoc[reference guide about Vert.x in Quarkus]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/3.2/guides/vertx.adoc
msgid ""
"As we have seen, the event bus is the connecting tissue of Vert.x applications.\n"
"Quarkus integrates it so different beans can interact with asynchronous messages.\n"
"This part is covered in the xref:reactive-event-bus.adoc[event bus documentation]."
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.2/guides/vertx.adoc:6
#, no-wrap
msgid "Using Eclipse Vert.x API from a Quarkus Application"
msgstr "QuarkusアプリケーションからのEclipse Vert.x APIの使用"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:17
msgid "Quarkus applications can access and use the Vert.x APIs."
msgstr "QuarkusのアプリケーションはVert.xのAPIにアクセスして使用することができます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:19
msgid "This guide presents how you can build a Quarkus application using:"
msgstr "このガイドでは、Quarkusのアプリケーションで次を使って構築する方法を紹介します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:21
msgid "the managed instance of Vert.x"
msgstr "Vert.xのマネージドインスタンス"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:22
msgid "the Vert.x event bus"
msgstr "Vert.x イベントバス"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:23
msgid "the Vert.x Web Client"
msgstr "Vert.x Webクライアント"

#. type: Title ==
#: upstream/_versions/3.2/guides/vertx.adoc:27
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:30
msgid "We are going to build a simple application exposing four HTTP endpoints:"
msgstr "ここでは、4つのHTTPエンドポイントを公開するシンプルなアプリケーションを作成します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:32
msgid "`/vertx/lorem` returns the content from a small file"
msgstr "`/vertx/lorem` 小さなファイルからコンテンツを返す"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:33
msgid "`/vertx/book` returns the content from a large file (a book)"
msgstr "`/vertx/book` 大きなファイル（本）からコンテンツを返す"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:34
msgid "`/vertx/hello` uses the Vert.x event bus to produce the response"
msgstr "`/vertx/hello` は、Vert.x イベントバスを使用してレスポンスを生成します"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:35
msgid "`/vertx/web` uses the Vert.x Web Client to retrieve data from Wikipedia"
msgstr "`/vertx/web` は、Vert.x Web クライアントを使用して Wikipedia からデータを取得します"

#. type: Title ==
#: upstream/_versions/3.2/guides/vertx.adoc:38
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:44
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:46
#, fuzzy
msgid "The solution is located in the `vertx-quickstart` link:{quickstarts-tree-url}/vertx-quickstart[directory]."
msgstr "ソリューションは `vertx-quickstart` link:{quickstarts-tree-url}/vertx-quickstart[ディレクトリに] あります。"

#. type: Block title
#: upstream/_versions/3.2/guides/vertx.adoc:48
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: Title ==
#: upstream/_versions/3.2/guides/vertx.adoc:55
#, no-wrap
msgid "Bootstrapping the application"
msgstr "アプリケーションの起動"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:61
msgid "`resteasy-reactive-jackson`, which also brings `resteasy-reactive`. We are going to use it to expose our HTTP endpoints."
msgstr "`resteasy-reactive-jackson` 。これは `resteasy-reactive` も持ち込みます。これを使って、HTTPエンドポイントを公開します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:62
msgid "`vertx`, which provides access to the underlying managed Vert.x"
msgstr "`vertx` 、下地となるマネージドVert.xへのアクセスを提供します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:67
msgid "If you open the generated build file, you can see the selected extensions:"
msgstr "生成されたビルドファイルを開くと、選択されたエクステンションが表示されます:"

#. type: Block title
#: upstream/_versions/3.2/guides/vertx.adoc:69
#: upstream/_versions/3.2/guides/vertx.adoc:91
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/3.2/guides/vertx.adoc:82
#: upstream/_versions/3.2/guides/vertx.adoc:100
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:89
msgid "While you are in your build file, add the following dependency:"
msgstr "ビルドファイルの中で、以下の依存関係を追加してください。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:106
msgid "This dependency provides the Vert.x Web Client, which we will be using to implement the `/web` endpoint."
msgstr "この依存関係は、Vert.x Web クライアントを提供し、 `/web` エンドポイントの実装に使用されます。"

#. type: Title ==
#: upstream/_versions/3.2/guides/vertx.adoc:108
#, no-wrap
msgid "Accessing the managed Vert.x instance"
msgstr "Vert.xマネージドインスタンスへのアクセス"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:114
msgid "In this file, copy the following code:"
msgstr "このファイルに、以下のコードをコピーします。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:140
msgid "Declare the root HTTP path."
msgstr "ルートHTTPパスを宣言します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:141
msgid "We use constructor injection to receive the managed Vert.x instance. Field injection works too."
msgstr "コンストラクタ・インジェクションを使用して、マネージドVert.xインスタンスを受け取ります。フィールド・インジェクションも有効です。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:142
msgid "Receives the Vert.x instance as a constructor parameter"
msgstr "コンストラクタのパラメータとしてVert.xインスタンスを受け取ります。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:143
msgid "Store the managed Vert.x instance into a field."
msgstr "マネージドVert.xインスタンスをフィールドに格納します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:145
msgid "With this, we can start implementing the endpoints."
msgstr "これで、エンドポイントの実装を始めることができます。"

#. type: Title ==
#: upstream/_versions/3.2/guides/vertx.adoc:146
#, no-wrap
msgid "Using Vert.x Core API"
msgstr "Vert.x Core APIの使用"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:154
msgid "In the `src/main/resource` directory, create a `lorem.txt` file with the following content:"
msgstr "`src/main/resource` ディレクトリに `lorem.txt` ファイルを次の内容で作成します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:161
msgid "Then, in the `VertxResource` file add the following method:"
msgstr "そして、 `VertxResource` ファイルに以下のメソッドを追加します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:172
msgid "This endpoint handles HTTP `GET` request on path `/lorem` (so the full path will be `vertx/lorem`)"
msgstr "このエンドポイントは、パス `/lorem` に対する HTTP `GET` リクエストを処理します（そのため、フルパスは `vertx/lorem` となります）。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:173
msgid "As the Vert.x API is asynchronous, our method returns a `Uni`. The content is written into the HTTP response when the asynchronous operation represented by the Uni completes."
msgstr "Vert.x APIは非同期なので、このメソッドは `Uni` を返却します。Uniで表される非同期操作が完了すると、その内容がHTTPレスポンスに書き込まれます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:174
msgid "We use the Vert.x file system API to read the created file"
msgstr "Vert.xのファイルシステムAPIを使用して、作成されたファイルを読み取ります。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:175
msgid "Once the file is read, the content is stored in an in-memory buffer.  We transform this buffer into a String."
msgstr "ファイルが読み込まれると、その内容がメモリ内のバッファに格納されます。このバッファをStringに変換します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:177
msgid "In a terminal, navigate to the root of the project and run:"
msgstr "ターミナルで、プロジェクトのルートに移動して次を実行します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:181
msgid "In another terminal, run:"
msgstr "別の端末で、次を実行します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:188
msgid "You should see the content of the file printed in the console."
msgstr "コンソールにファイルの内容が表示されるはずです。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:190
msgid "Quarkus provides other ways to serve static files. This is an example made for the guide."
msgstr "Quarkusは、静的ファイルを提供する他の方法を提供しています。これはガイドのために作られた例です。"

#. type: Title ==
#: upstream/_versions/3.2/guides/vertx.adoc:191
#, no-wrap
msgid "Using Vert.x stream capability"
msgstr "Vert.x stream の能力の使用"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:201
msgid "So, you should have the following files in your project:"
msgstr "そこで、プロジェクト内に以下のファイルを用意しておきます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:224
msgid "Add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr "`src/main/java/org/acme/VertxResource.java` ファイルに次のimportを追加します:"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:234
msgid "Add the following method to the `VertxResource` class:"
msgstr "`VertxResource` クラスに以下のメソッドを追加します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:249
msgid "This time, we return a Multi as we want to stream the chunks"
msgstr "今回は、チャンクをストリーミングしたいので、Multiを返します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:250
msgid "We open the file using the `open` method. It returns a `Uni<AsyncFile>`"
msgstr "`open` メソッドを使ってファイルを開きます。このメソッドは `Uni<AsyncFile>` を返却します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:251
msgid "When the file is opened, we retrieve a `Multi` which will contain the chunks."
msgstr "ファイルが開かれると、チャンクを含む `Multi` が取得できます。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:252
msgid "For each chunk, we produce a String"
msgstr "各チャンクは、String を生成します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:253
msgid "To visually see the chunks in the response, we append a separator"
msgstr "レスポンス内のチャンクを視覚的に確認するために、セパレーターを追加します。"

#. type: Plain text
#: upstream/_versions/3.2/guides/vertx.adoc:255
msgid "Then, in a terminal, run:"
msgstr "そして、ターミナルで、次を実行します。"

#. type: Title ==
#: upstream/_versions/3.2/guides/vertx.adoc:277
#, no-wrap
msgid "Using the event bus"
msgstr "イベントバスの使用"

#. type: delimited block -
#: upstream/_versions/3.2/guides/vertx.adoc:289
msgid "So, first, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/vertx.adoc:354
#, no-wrap
msgid "Using Vert.x Clients"
msgstr "Vert.x クライアントの使用"

#. type: delimited block -
#: upstream/_versions/3.2/guides/vertx.adoc:370
msgid "First, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/vertx.adoc:428
#, no-wrap
msgid "Executing Asynchronous Code From a Blocking Thread"
msgstr "ブロッキングスレッドから非同期コードを実行"

#. type: Title ==
#: upstream/_versions/3.2/guides/vertx.adoc:449
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#. type: delimited block -
#: upstream/_versions/3.2/guides/vertx.adoc:459
msgid "Learn how to implement highly performant, low-overhead database applications on Quarkus with the xref:reactive-sql-clients.adoc[Reactive SQL Clients]."
msgstr ""
