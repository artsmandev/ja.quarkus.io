# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-12 13:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:6
#, no-wrap
msgid "Using OpenID Connect (OIDC) and OAuth2 Client and Filters to manage access tokens"
msgstr "OpenID Connect (OIDC)、OAuth2 クライアントおよびフィルターを使用したアクセストークンの管理"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:12
msgid "This guide explains how to use:"
msgstr "このガイドでは以下の使い方を解説しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:14
#, fuzzy
msgid "`quarkus-oidc-client` and `quarkus-oidc-client-filter` (or `quarkus-oidc-client-reactive-filter`) extensions to acquire and refresh access tokens from OpenId Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]"
msgstr "`quarkus-oidc-client` および (または ) 拡張機能により、OpenId Connect および `quarkus-oidc-client-filter` `quarkus-oidc-client-reactive-filter ` link:https://www.keycloak.org/about.html[Keycloak] などの OAuth 2.0 準拠の認証サーバからアクセストークンを取得および更新します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:15
#, fuzzy
msgid "`quarkus-oidc-token-propagation` extension to propagate the current bearer or authorization code flow access tokens"
msgstr "`quarkus-oidc-token-propagation` 現在のベアラまたは認可コードフローアクセストークンを伝搬するための拡張機能"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:17
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:18
#, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:21
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` エクステンションは、SmallRye Mutiny `Uni` および `Vert.xWebClient` を使用してトークンを取得および更新するために使用できるリアクティブな `io.quarkus.oidc.client.OidcClient` を提供します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:23
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using `client_credentials` or `password` token grants and refresh the tokens using `refresh_token` grant."
msgstr "`OidcClient` は自動検出または手動で構成することができる IDP トークンのエンドポイント URL でビルド時に初期化され、このエンドポイントを使用して `client_credentials` または `password` トークングラントを使用してアクセストークンを取得し、 `refresh_token` グラントを使用してトークンを更新します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:25
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:31
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:34
msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
msgstr "`client_credentials` グラントにより、`quarkus.oidc-client.grant-options.client.<param-name>=<value>` を介してトークンリクエストに追加のパラメータを設定できます。 `audience` パラメータを使用して目的のトークン受信者を設定する方法は次のとおりです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:38
#, no-wrap
msgid "quarkus.oidc-client.grant-options.client.audience=https://example.com/api\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:41
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:50
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:52
#, fuzzy
msgid "In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
msgstr "どちらの場合も、 `OidcClient` 、トークンのエンドポイントURLを自動検出し、トークンの取得に使用します。"

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:53
#, no-wrap
msgid "Use OidcClient directly"
msgstr "OidcClient を直接使用する"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:56
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:62
#, no-wrap
msgid ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:65
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:68
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:71
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:73
#, no-wrap
msgid "    volatile Tokens currentTokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:78
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:81
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:91
#, no-wrap
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:93
#, fuzzy, no-wrap
msgid "Use OidcClient in MicroProfile RestClient client filter"
msgstr "MicroProfile RestClientクライアントフィルタでOidcClientを使用する。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:96
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。このフィルターは、`OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:98
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、`quarkus.oidc-client.early-tokens-acquisition=false` でトークンの取得を遅延させるべきです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:100
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:105
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:110
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:114
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:132
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:628
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:645
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:689
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:706
#, no-wrap
msgid ""
"    @GET\n"
"    String getUserName();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:117
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:364
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:630
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:691
msgid "or"
msgstr "or"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:123
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:128
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:135
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:137
msgid "`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property."
msgstr "`OidcClientRequestFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-client-filter.client-name` 設定プロパティーで選択することができます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:138
#, fuzzy, no-wrap
msgid "Use OidcClient in MicroProfile RestClient Reactive client filter"
msgstr "MicroProfile RestClient ReactiveクライアントフィルタでOidcClientを使用する。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:141
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr "`quarkus-oidc-client-reactive-filter` エクステンションは、`io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` を提供します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:143
#, fuzzy
msgid "It works similary to the way `OidcClientRequestFilter` (described in the previous section) does - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with link:rest-client-reactive[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquring or refreshing the tokens."
msgstr "これは `OidcClientRequestFilter` (前のセクションで説明) と同じように動作します。 `OidcClient` を使用してアクセストークンを取得し、必要に応じてリフレッシュして、HTTP `Authorization` `Bearer` スキーム値として設定します。違いは、 link:rest-client-reactive[Reactive RestClientで] 動作し、トークンの取得やリフレッシュ時に現在のIOスレッドをブロックしないノンブロッキングクライアントフィルタを実装している点です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:145
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread and it currently can only be registered with `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation:"
msgstr "`OidcClientRequestReactiveFilter` は、IO スレッドのブロックを回避するため、実行されるまで最初のトークンの取得を遅らせ、現在は `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションによってのみ登録することができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:152
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:157
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:161
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<String> getUserName();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:164
msgid "`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property."
msgstr "`OidcClientRequestReactiveFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-client-reactive-filter.client-name` 設定プロパティーで選択することができます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:165
#, no-wrap
msgid "Use injected Tokens"
msgstr "注入されたトークンを使用する"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:168
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:174
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:177
#, no-wrap
msgid ""
"    @Inject\n"
"    Tokens tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:183
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:346
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:186
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:188
msgid "See also the previous section about delaying the token acquisition in some cases."
msgstr "トークンの取得を遅らせる場合があることについては、前のセクションも参照してください。"

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:189
#, no-wrap
msgid "Refreshing Access Tokens"
msgstr "アクセストークンの更新"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:193
#, fuzzy
msgid "Both `OidcClientRequestFilter` and `Tokens` producer will refresh the current expired access token if the refresh token is available.  Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr "`OidcClientRequestFilter` と `Tokens` の両プロデューサーは、リフレッシュ・トークンが利用可能な場合、現在の期限切れアクセストークンをリフレッシュします。さらに、 `quarkus.oidc-client.refresh-token-time-skew` プロパティを使用すると、HTTP 401 エラーの原因となる期限切れ間近のアクセストークンの送信を回避し、アクセストークンの更新を先行して行うことができます。例えば、このプロパティが `3S` に設定されていて、アクセストークンの有効期限が3秒未満である場合、このトークンは自動的にリフレッシュされます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:195
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr "アクセストークンの更新が必要なのにリフレッシュトークンがない場合は、 `client_credentials` のように設定されたグラントを使って新しいトークンの取得を試みます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:197
#, fuzzy
msgid "Please note that some OpenId Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
msgstr "一部の OpenId Connect プロバイダは、 `client_credentials` のグラントレスポンスでリフレッシュトークンを返さないことに注意してください。例えば、Keycloak 12以降、 `client_credentials` では、デフォルトでリフレッシュ・トークンが返されません。また、プロバイダはリフレッシュ・トークンの使用回数を制限している場合があります。"

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:198
#, no-wrap
msgid "OidcClients"
msgstr "OidcClients"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:201
#, fuzzy
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` (which can also be injected directly as described above) and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` は のコンテナです。デフォルトの (上記のように直接注入することもできます) と、このように構成できる名前付きクライアントが含まれています： `OidcClient` `OidcClient` "

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:205
#, no-wrap
msgid "quarkus.oidc-client.client-enabled=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:209
#, no-wrap
msgid ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:212
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:218
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:245
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:276
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:313
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:221
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:224
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:252
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:285
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:316
#, no-wrap
msgid ""
"@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:227
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:288
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:234
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:239
msgid "If you also use link:security-openid-connect-multitenancy[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "link:security-openid-connect-multitenancy[OIDC マルチテナンシーを] 使用し、各 OIDC テナントが独自の関連する `OidcClient` を持っている場合は、 Vert.x `RoutingContext` `tenantId` 属性を例えば次のように使用することができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:249
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:257
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:266
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:270
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:280
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:282
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:300
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
"        cfg.setClientId(\"quarkus\");\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(config);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:302
#, fuzzy, no-wrap
msgid "Inject named `OidcClient` and `Tokens`"
msgstr "`OidcClient` という名前のインジェクトを行い `Tokens`"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:305
msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr "複数の設定済みの ``OidcClient``s の場合は、`OidcClients` で作業する代わりに、追加の修飾子 `@NamedOidcClient` で `OidcClient` 注入ターゲットを指定できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:309
#, no-wrap
msgid "package io.quarkus.oidc.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:320
#, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    OidcClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:326
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        // use client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:329
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "同じ修飾子を使用して、`Tokens` インジェクションに使用される `OidcClient` を指定できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:336
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"@RequestScoped\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:340
#, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    Tokens tokens;\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:349
#, no-wrap
msgid "OidcClient Authentication"
msgstr "OidcClient 認証"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:353
msgid "`OidcClient` has to authenticate to the OpenId Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` は、 `client_credentials` やその他のグラントリクエストを成功させるために OpenId Connect Provider に認証する必要があります。 link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC クライアント認証] オプションはすべてサポートされています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:355
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:361
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:370
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:373
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:408
#, fuzzy
msgid "or with the secret retrieved from a link:credentials-provider[CredentialsProvider]:"
msgstr "または link:credentials-provider[CredentialsProviderから] 取得したシークレットを使用しています："

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:378
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:413
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:383
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentails returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:386
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:393
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:396
msgid "`client_secret_jwt`:"
msgstr "`client_secret_jwt`:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:402
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:405
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenId Connect provider requires it,\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:418
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentails returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:421
msgid "`private_key_jwt` with the PEM key file:"
msgstr "`private_key_jwt` with the PEM key file:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:427
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:430
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenId Connect provider requires it\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:433
msgid "`private_key_jwt` with the key store file:"
msgstr "`private_key_jwt` with the key store file:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:443
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc.credentials.jwt.key-password=mykeypassword\n"
"# Private key alias inside the keystore\n"
"quarkus.oidc.credentials.jwt.key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:447
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenId Connect provider requires it,\n"
"# Note it can be different to the `quarkus.oidc.credentials.jwt.key-id` value\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:450
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントシークレットが漏れることはありません。"

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:452
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:729
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:455
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:468
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>org.awaitility</groupId>\n"
"    <artifactId>awaitility</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:471
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:474
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:482
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:485
msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "Wiremockベースの `QuarkusTestResourceLifecycleManager` を例えば以下のように書きます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:488
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:491
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:494
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:498
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
"import com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:500
#, no-wrap
msgid "import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:503
#, no-wrap
msgid ""
"public class KeycloakRealmResourceManager implements QuarkusTestResourceLifecycleManager {\n"
"    private WireMockServer server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:506
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:509
#, no-wrap
msgid ""
"        server = new WireMockServer(wireMockConfig().dynamicPort().useChunkedTransferEncoding(ChunkedEncodingPolicy.NEVER));\n"
"        server.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:524
#, no-wrap
msgid ""
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=password&username=alice&password=alice\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_1\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=refresh_token&refresh_token=refresh_token_1\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_2\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:530
#, no-wrap
msgid ""
"        Map<String, String> conf = new HashMap<>();\n"
"        conf.put(\"keycloak.url\", server.baseUrl());\n"
"        return conf;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:539
#, no-wrap
msgid ""
"    @Override\n"
"    public synchronized void stop() {\n"
"        if (server != null) {\n"
"            server.stop();\n"
"            server = null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:542
msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:544
msgid "Set `application.properties`, for example:"
msgstr "`application.properties` を次のように設定します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:556
#, no-wrap
msgid ""
"# Use 'keycloak.url' property set by the test KeycloakRealmResourceManager\n"
"quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"quarkus.oidc-client.token-path=/tokens\n"
"quarkus.oidc-client.client-id=quarkus-service-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:559
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr "そして最後にテストコードを書きます。上記の Wiremock ベースのリソースがある場合、最初のテスト起動では `access_token_1` アクセストークンが返却されますが、このアクセストークンは 4 秒で期限切れになります。 `awaitility` を使用して約 5 秒間待つと、次のテスト起動時に `access_token_2` アクセストークンが返され、期限切れの `access_token_1` アクセストークンがリフレッシュされたことが確認できます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:560
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:563
#, fuzzy
msgid "If you work with Keycloak then you can use the same approach as described in the link:security-openid-connect#integration-testing-keycloak[OpenId Connect Bearer Token Integration testing] `Keycloak` section."
msgstr "Keycloakを使用している場合は、 link:security-openid-connect#integration-testing-keycloak[OpenId Connect Bearer Token Integration testing] `Keycloak` のセクションで説明したのと同じ方法を使用することができます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:564
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:567
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "トークンの取得および更新エラーの詳細を確認するには、`io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` レベルのロギングを有効にしてください。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:572
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:575
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "OidcClient 初期化エラーの詳細を確認するには、`io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` レベルのログを有効にしてください。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:580
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:582
#, fuzzy, no-wrap
msgid "Token endpoint configuration"
msgstr "トークン・エンドポイントの設定"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:585
msgid "By default the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` のパスを追加することで、トークンのエンドポイントアドレスが検出されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:587
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、トークンエンドポイントのアドレスを相対パスの値で設定することができます。例:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:594
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
"quarkus.oidc-client.token-path=/protocol/openid-connect/tokens\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:597
#, fuzzy, no-wrap
msgid "Token Propagation in MicroProfile RestClient client filter"
msgstr "MicroProfile RestClientクライアントフィルタでのトークンプロパゲーション"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:600
#, fuzzy
msgid "`quarkus-oidc-token-propagation` extension provide `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` and `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` JAX-RS ClientRequestFilters which propagates the current link:security-openid-connect[Bearer] or link:security-openid-connect-web-authentication[Authorization Code Flow] access token as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-token-propagation` 拡張は、現在の link:security-openid-connect[ベアラ] または link:security-openid-connect-web-authentication[認可コードフローの] アクセストークンをHTTP  スキーム値として伝播する および JAX-RS ClientRequestFilter を提供します。 `Authorization` `Bearer` `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` "

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:602
msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr "現在の認可コードフローアクセストークンを伝播する必要がある場合は、即時トークン伝播はうまく機能します - コードフローアクセストークン (ID トークンとは対照的に) は、現在認証されているユーザーに代わってリモートサービスにアクセスするように、現在の Quarkus エンドポイントに伝搬されることが意図されています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:604
msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr "ただし、可能であれば、エンドツーエンドのベアラートークンの直接伝播は避ける必要があります。たとえば、`Client -> Service A -> Service B` で、`Service B` は `Client` から `Service A` に送信されたトークンを受け取ります。このような場合、`Service B` は、トークンが `Service A` からのものか、直接 `Client` からのものかを区別できません。トークンが `Service A` からのものであることを `Service B` が確認するには、新しい発行者とオーディエンスのクレームをアサートできる必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:606
#, fuzzy
msgid "Additionally, a complex application may need to exchange or update the tokens before propagating them. For example, the access context might be different when Service A is accessing Service B. In this case, Service A might be granted a narrow or a completely different set of scopes to access Service B."
msgstr "さらに、複雑なアプリケーションでは、トークンを伝播する前にトークンを交換または更新する必要がある場合があります。例えば、サービスAがサービスBにアクセスする場合、アクセスコンテキストが異なる場合があります。この場合、サービスAは、サービスBにアクセスするための狭いスコープまたは完全に異なるスコープのセットを付与されるかもしれません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:608
#, fuzzy
msgid "Please see below how both `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "`AccessTokenRequestFilter` と `JsonWebTokenRequestFilter` の両方がどのように役立つかは、以下をご覧ください。"

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:609
#, fuzzy, no-wrap
msgid "AccessTokenRequestFilter"
msgstr "AccessTokenRequestFilter（アクセストークンリクエストフィルタ"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:612
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` は、すべてのトークンをStringとして扱うため、JWTトークンと不透明なトークンの両方を扱うことができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:614
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:619
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:624
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:685
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:636
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:641
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:648
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#. type: Title ====
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:649
#, no-wrap
msgid "Exchange Token Before Propagation"
msgstr "伝搬前のトークンの交換"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:652
#, fuzzy
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenId Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr "伝播前に現在のアクセストークンを交換する必要があり、 link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloakや] link:https://tools.ietf.org/html/rfc8693[Token Exchange] トークン付与をサポートする他のOpenId Connect Providerで作業する場合、 `AccessTokenRequestFilter` のように設定することができます："

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:660
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=exchange\n"
"quarkus.oidc-client.grant-options.exchange.audience=quarkus-app-exchange\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:662
#, no-wrap
msgid "quarkus.oidc-token-propagation.exchange-token=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:665
#, fuzzy
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenId Connect Provider."
msgstr "注 `AccessTokenRequestFilter` は `OidcClient` を使って現在のトークンを交換します。 `quarkus.oidc-client.grant-options.exchange` を使って、OpenId Connect Provider が期待する追加の交換プロパティを設定することができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:667
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr "`AccessTokenRequestFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は、`quarkus.oidc-token-propagation.client-name` 設定プロパティーで選択することができます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:668
#, fuzzy, no-wrap
msgid "JsonWebTokenRequestFilter"
msgstr "JsonWebTokenRequestFilter"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:671
#, fuzzy
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenId Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr "`issuer` や `audience` のような主張が変更され、更新されたトークンが再び保護される（例えば、再署名される）ことがある Bearer JWT トークンを扱う場合は、 `JsonWebTokenRequestFilter` を使用することが推奨されます。注入された `org.eclipse.microprofile.jwt.JsonWebToken` を期待するため、不透明なトークンでは動作しません。また、OpenId Connect Provider が Token Exchange プロトコルをサポートしている場合は、代わりに `AccessTokenRequestFilter` を使うことをお勧めします。JWT と不透明ベアラートークンの両方を `AccessTokenRequestFilter` で安全に交換することができるからです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:673
#, fuzzy
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implemementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr "`JsonWebTokenRequestFilter` は、 の実装が、注入された を新しい と の請求値で更新し、更新されたトークンを新しい署名で再度保護することを容易にするものである。唯一の難しいステップは、 が署名鍵を持っていることを確認することです。これは、安全なファイルシステムまたは Vault のようなリモートセキュアストレージからプロビジョニングする必要があります。 `Service A` `org.eclipse.microprofile.jwt.JsonWebToken` `issuer` `audience` `Service A` "

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:675
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:680
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:697
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:702
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(JsonWebTokenTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:709
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "または、`quarkus.oidc-token-propagation.register-filter` プロパティーおよび `quarkus.oidc-token-propagation.json-web-token` プロパティーの両方が `true` に設定されている場合、`JsonWebTokenRequestFilter` は、すべての MP Rest または JAX-RS クライアントで自動的に登録することができます。"

#. type: Title ====
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:710
#, no-wrap
msgid "Update Token Before Propagation"
msgstr "伝搬前のトークンの更新"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:713
msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr "注入されたトークンの `iss` (発行者) や `aud` (オーディエンス) のクレームを更新して、新しい署名で保護する必要がある場合は、`JsonWebTokenRequestFilter` を以下のように設定できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:724
#, no-wrap
msgid ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:727
#, fuzzy
msgid "As already noted above, please use `AccessTokenRequestFilter` if you work with Keycloak or OpenId Connect Provider which supports a Token Exchange protocol."
msgstr "すでに述べたように、Token ExchangeプロトコルをサポートするKeycloakやOpenId Connect Providerを使用する場合は、 `AccessTokenRequestFilter` を使用してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:733
#, fuzzy
msgid "You can generate the tokens as described in link:security-openid-connect#integration-testing[OpenId Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "link:security-openid-connect#integration-testing[OpenId Connect Bearer Token Integration testing] の項で説明したように、トークンを生成することができます。RESTテストエンドポイントを準備します。注入されたMP RESTクライアントを使用するテストフロントエンドエンドポイントに、トークン伝播フィルタを登録して下流エンドポイントに呼び出すことができます。例えば、 `main` Quarkusリポジトリ内の `integration-tests/oidc-token-propagation` を参照してください。"

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:734
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:737
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkus Security]"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:738
#, fuzzy
msgid "link:security-openid-connect[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr "link:security-openid-connect[Quarkus - OpenID Connectを使用したベアラートークン認証によるサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-client.adoc:738
#, fuzzy
msgid "link:security-openid-connect-web-authentication[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr "link:security-openid-connect-web-authentication[Quarkus - OpenID Connectを使用して、認証コードフローを使用してWebアプリケーションを保護する。]"
