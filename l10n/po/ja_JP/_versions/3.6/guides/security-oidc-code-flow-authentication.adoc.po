msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "OpenID Connect authorization code flow mechanism for protecting web applications"
msgstr "Web アプリケーションを保護するための OpenID Connect 認可コードフローメカニズム"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "To protect your web applications, you can use the industry-standard OpenID Connect (OIDC) Authorization Code Flow mechanism provided by the Quarkus OIDC extension."
msgstr "ウェブアプリケーションを保護するには、Quarkus OIDCエクステンションが提供する業界標準のOpenID Connect（OIDC）認可コードフローメカニズムを使用できます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Overview of the OIDC authorization code flow mechanism"
msgstr "OIDC認可コードフローメカニズムの概要"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus OpenID Connect (OIDC) extension can protect application HTTP endpoints by using the OIDC Authorization Code Flow mechanism supported by OIDC-compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr "Quarkus OpenID Connect（OIDC）エクステンションは、 link:https://www.keycloak.org[Keycloak] などのOIDC準拠の認可サーバーでサポートされているOIDC認可コードフローメカニズムを使用して、アプリケーションHTTPエンドポイントを保護できます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The Authorization Code Flow mechanism authenticates users of your web application by redirecting them to an OIDC provider, such as Keycloak, to log in.\n"
"After authentication, the OIDC provider redirects the user back to the application with an authorization code that confirms that authentication was successful.\n"
"Then, the application exchanges this code with the OIDC provider for an ID token (which represents the authenticated user), an access token, and a refresh token to authorize the user's access to the application."
msgstr "このエクステンションは、OpenID Connect Provider (例: Keycloak) にリダイレクトしてログインさせ、認証が完了したら、認証に成功したことを確認するコードを使って、ウェブアプリケーションのユーザーを簡単に認証することができます。エクステンションは、認可コードグラントを使用して OpenID Connect Provider から ID とアクセストークンを要求し、アプリケーションへのアクセスを承認するためにこれらのトークンを検証します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The following diagram outlines the Authorization Code Flow mechanism in Quarkus."
msgstr "次の図は、Quarkus における認可コードフローメカニズムの概要を示しています。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Authorization code flow mechanism in Quarkus"
msgstr "Quarkusにおける認可コードフローメカニズム"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus user requests access to a Quarkus web-app application."
msgstr "Quarkusユーザーが、Quarkus web-appアプリケーションへのアクセスを要求します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus web-app redirects the user to the authorization endpoint, that is, the OIDC provider for authentication."
msgstr "Quarkus Web-appは、ユーザーを認証エンドポイント、つまり認証用のOIDCプロバイダーにリダイレクトします。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC provider redirects the user to a login and authentication prompt."
msgstr "OIDCプロバイダは、ユーザーをログインと認証のプロンプトにリダイレクトします。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "At the prompt, the user enters their user credentials."
msgstr "プロンプトで、ユーザーは自分のユーザー認証情報を入力します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC provider authenticates the user credentials entered and, if successful, issues an authorization code then redirects the user back to the Quarkus web-app with the code included as a query parameter."
msgstr "OIDCプロバイダは、入力されたユーザーの資格情報を認証し、成功すると認可コードを発行して、クエリパラメータとしてコードが含まれるQuarkus Web-appにユーザーをリダイレクトします。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus web-app exchanges this authorization code with the OIDC provider for ID, access, and refresh tokens."
msgstr "Quarkus Webアプリケーションは、この認可コードをOIDCプロバイダーと交換し、ID、アクセス、およびリフレッシュの各トークンを取得します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The authorization code flow is completed and the Quarkus web-app uses the tokens issued to access information about the user and grants the relevant role-based authorization to that user.\n"
"The following tokens are issued:"
msgstr "認可コードフローが完了し、Quarkus Webアプリは発行されたトークンを使用してユーザーに関する情報にアクセスし、そのユーザーに関連するロールベースの認可を付与します。発行されるトークンは以下の通りです:"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "ID token: The Quarkus `web-app` application uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web application."
msgstr "IDトークン: Quarkus `web-app` アプリケーションは、IDトークンのユーザー情報を使用して、認証されたユーザーが安全にログインできるようにし、Webアプリケーションにロールベースのアクセスを提供します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or to propagate it to another endpoint."
msgstr "アクセストークン: Quarkus Webアプリは、アクセストークンを使用してUserInfo APIにアクセスし、認証されたユーザーに関する追加情報を取得したり、別のエンドポイントに伝播したりすることがあります。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Refresh token: (Optional) If the ID and access tokens expire, the Quarkus web-app can use the refresh token to get new ID and access tokens."
msgstr "リフレッシュ トークン: (オプション) ID およびアクセス トークンの有効期限が切れた場合、Quarkus ウェブアプリはリフレッシュ トークンを使用して新しい ID およびアクセス トークンを取得できます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "See also the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC設定プロパティ] のリファレンスガイドもご参照ください。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "To learn about how you can protect web applications by using the OIDC authorization code flow mechanism, see xref:security-oidc-code-flow-authentication-tutorial.adoc[Protect a web application by using OIDC authorization code flow]"
msgstr "OIDC認可コードフローメカニズムを使用してWebアプリケーションを保護する方法については、 xref:security-oidc-code-flow-authentication-tutorial.adoc[OIDC認可コードフローを使用したWebアプリケーション保護] を参照してください。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If you want to protect service applications by using OIDC Bearer token authentication, see xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]."
msgstr "OIDCベアラートークン認証を使用してサービスアプリケーションを保護したい場合は、 xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証] を参照してください。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr "マルチテナントへの対応方法については、 xref:security-openid-connect-multitenancy.adoc[OpenID Connect (OIDC) マルチテナンシーの使用] ガイドをお読みください。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Using the authorization code flow mechanism"
msgstr "認可コードフローメカニズムの利用について"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Configuring access to the OIDC provider endpoint"
msgstr "OIDCプロバイダー・エンドポイントへのアクセス設定"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC `web-app` application requires URLs of the OIDC provider's authorization, token, `JsonWebKey` (JWK) set, and possibly the `UserInfo`, introspection, and end session (RP-initiated logout) endpoints."
msgstr "OIDC `web-app` アプリケーションは、OIDC プロバイダーの認可、トークン、 `JsonWebKey` (JWK)セット、および場合によっては `UserInfo` 、イントロスペクション、エンドセッション（RP-initiated logout）エンドポイントの URL を必要とします。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "By convention, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "規約により、 `quarkus.oidc.auth-server-url` で設定することで `/.well-known/openid-configuration` のパスを追加することで検出されます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Alternatively, if the discovery endpoint is not available, or you prefer to reduce the discovery endpoint round-trip, you can disable endpoint discovery and configure relative path values, for example:"
msgstr "あるいは、ディスカバリー・エンドポイントが利用できない場合や、ディスカバリー・エンドポイントのラウンドトリップを減らしたい場合は、エンドポイントのディスカバリーを無効にし、相対パス値などを設定することもできます。例:"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers support metadata discovery but do not return all the endpoint URL values required for the authorization code flow to complete or to support application functions, for example, user logout.\n"
"To work around this limitation, you can configure the missing endpoint URL values locally, as outlined in the following example:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can use this same configuration to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required.\n"
"For example, a provider that supports both global and application-specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout`.\n"
"This URL will log the user out of all of the applications that the user is currently logged into.\n"
"However, if the requirement is for the current application to log the user out of only the specific application, you can override the global end-session URL, by setting the `quarkus.oidc.end-session-path=logout` parameter."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC provider client authentication"
msgstr "OIDCプロバイダーのクライアント認証"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OIDC providers typically require applications to be identified and authenticated when they interact with the OIDC endpoints.\n"
"Quarkus OIDC, specifically the `quarkus.oidc.runtime.OidcProviderClient` class,  authenticates to the OIDC provider when the authorization code must be exchanged for the ID, access, and refresh tokens, or when the ID and access tokens need to be refreshed or introspected."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Typically, client id and client secrets are defined for a given application when it enlists to the OIDC provider.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of  `client_secret_basic`:"
msgstr "`client_secret_basic` の例:"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Or:"
msgstr "あるいは:"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The following example shows the secret retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `client_secret_post`"
msgstr "`client_secret_post` の例"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `client_secret_jwt`, where the signature algorithm is HS256:"
msgstr "`client_secret_jwt` の例。署名アルゴリズムはHS256:"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `client_secret_jwt`, where the secret is retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `private_key_jwt` with the PEM key file, and where the signature algorithm is RS256:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `private_key_jwt` with the keystore file, where the signature algorithm is RS256:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that a client secret does not get sent to the OIDC provider, therefore avoiding the risk of a secret being intercepted by a  'man-in-the-middle' attack."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Additional JWT authentication options"
msgstr "JWT認証の追加オプション"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If `client_secret_jwt`, `private_key_jwt` authentication methods are used or an Apple `post_jwt` method is used, then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "`client_secret_jwt` , `private_key_jwt` の認証方式を使用する場合、または Apple の `post_jwt` 方式を使用する場合、JWT 署名アルゴリズム、鍵識別子、オーディエンス、サブジェクト、発行者などをカスタマイズすることができます:"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The Apple OIDC provider uses a `client_secret_post` method whereby a secret is a JWT produced with a `private_key_jwt` authentication method but with the Apple account-specific issuer and subject claims."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "In Quarkus Security, `quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method, which you can configure as follows:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "mutual TLS (mTLS)"
msgstr "相互TLS (mTLS)"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Some OpenID Connect providers might require that a client is authenticated as part of the mutual TLS  authentication process."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The following example shows how you can configure `quarkus-oidc` to support `mTLS`:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Introspection endpoint authentication"
msgstr "イントロスペクションエンドポイント認証"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers require authenticating to its introspection endpoint by using Basic authentication and with credentials that are different to the `client_id` and `client_secret`.\n"
"If you have previously configured security authentication to support either the`client_secret_basic` or `client_secret_post` client authentication methods as described in the xref:oidc-provider-client-authentication[OIDC provider client authentication]  section, you might need to apply the additional configuration, as follows."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If the tokens have to be introspected and the introspection endpoint-specific authentication mechanism is required, then you can configure `quarkus-oidc`, as follows:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC request customization"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can customize OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFiler` implementations which can update or add new request headers, please see xref:security-openid-connect-client-reference#oidc-client-filters[Client request customization] for more information."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Redirecting to and from the OIDC provider"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"When a user is redirected to the OpenID Connect provider to authenticate, the redirect URL includes a `redirect_uri` query parameter, which indicates to the provider where the user has to be redirected to when the authentication is complete.\n"
"In our case, this is the Quarkus application."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Quarkus sets this parameter to the current application request URL by default.\n"
"For example, if a user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter is set to `http://localhost:8080/service/1`.\n"
"Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter is set to `http://localhost:8080/service/2`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers require the `redirect_uri` to have the same value for a given application, for example, `http://localhost:8080/service/callback`, for all the redirect URLs.\n"
"In such cases, a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback`, which will be the same regardless of the current request URL."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If `quarkus.oidc.authentication.redirect-path` is set but you need the original request URL to be restored after the user has been redirected back to a unique callback URL, for example,  `http://localhost:8080/service/callback`, set `quarkus.oidc.authentication.restore-path-after-redirect` property to `true`.\n"
"This will restore the request URL such as `http://localhost:8080/service/1`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Customizing authentication requests"
msgstr "認証リクエストのカスタマイズ"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenID Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr "デフォルトでは、ユーザーが認証のために OpenID Connect プロバイダーにリダイレクトした際に、`response_type` (`code` に設定)、`scope` ('openid' に設定)、`client_id`、`redirect_uri` および `state` プロパティーのみが HTTP クエリーパメータとして渡されています。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can add more properties to it with `quarkus.oidc.authentication.extra-params`.\n"
"For example, some OIDC providers might choose to return the authorization code as part of the redirect URI's fragment, which would break the authentication process.\n"
"The following example shows how you can work around this issue:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Customizing the authentication error response"
msgstr "認証エラーレスポンスのカスタマイズ"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If the user authentication fails at the OIDC authorization endpoint, then the provider will redirect the user back to Quarkus with `error` and `error_description` parameters instead of `code`.\n"
"For example, this can happen when an invalid scope or other invalid parameters are included in the redirect to the provider."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In such cases, an HTTP `401`error will be returned by default.\n"
"However, you can instead request that a custom public error endpoint is called to return a more user-friendly HTML error page.\n"
"To do this, set the `quarkus.oidc.authentication.error-path` property, as shown in the following example:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Ensure that the property starts with a forward slash (/) character and the path is relative to the base URI of the current endpoint.\n"
"For example, if it is set as '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope` then a final redirect will be made to `https://localhost:8080/error?error=invalid_scope`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "It is important to ensure that this error endpoint is a public resource to prevent the user from being redirected to this page to be authenticated again."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Accessing authorization data"
msgstr "認可データへのアクセス"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Let's first discuss how to access information around authorization."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Accessing ID and access tokens"
msgstr "IDやアクセストークンへのアクセス"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC code authentication mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token, and Refresh Token."
msgstr "OIDCコード認証メカニズムは、認可コードフローの中で3つのトークンを取得します: link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken] 、Access Token、Refresh Tokenです。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.\n"
"You can use this to get the issuing OIDC endpoint, the username, and other information called _claims_.\n"
"One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged-in user. The raw access token can be accessed as follows:"
msgstr "アクセストークンは通常、OIDC `web-app` アプリケーションが、現在ログインしているユーザーの代わりに他のエンドポイントにアクセスするために使用されます。生のアクセストークンは以下のようにアクセスすることができます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Note that `AccessTokenCredential` is used if the access token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to a `JsonWebToken` or if the inner content is necessary for the application."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "`JsonWebToken` と `AccessTokenCredential` のインジェクションは、 `@RequestScoped` と `@ApplicationScoped` の両方のコンテキストでサポートされています。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "RefreshToken is used by Quarkusn OIDC to refresh the current ID and access tokens as part of its xref:session-management[session management] process."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "User info"
msgstr "User info"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If the ID token does not provide enough information about the currently-authenticated user, you can get more information from the `UserInfo` endpoint.\n"
"Set the `quarkus.oidc.authentication.user-info-required=true` property for a link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC `UserInfo` endpoint to be requested."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "A request will be sent to the OpenID Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "認可コードグラントのレスポンスで返されるアクセストークンを使ってOpenID Provider UserInfoエンドポイントにリクエストが送られ、 `io.quarkus.oidc.UserInfo` （シンプルな `jakarta.json.JsonObject` ラッパー）オブジェクトが作成されます。 `io.quarkus.oidc.UserInfo` はSecurityIdentity `userinfo` attributeとして注入またはアクセスすることができます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Accessing the OIDC configuration information"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "現在のテナントが検出した link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect 設定メタデータ] は `io.quarkus.oidc.OidcConfigurationMetadata` で表され、`SecurityIdentity` `configuration-metadata` 属性として注入またはアクセスが可能です。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "エンドポイントがパブリックの場合、デフォルトのテナントの `OidcConfigurationMetadata` が注入されます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Mapping token claims and `SecurityIdentity` roles"
msgstr "トークンクレームと `SecurityIdentity` ロールのマッピング"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-oidc-bearer-token-authentication.adoc[Bearer tokens] with the only difference being that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you use Keycloak, set a `microprofile_jwt` client scope for ID token to contain a `groups` claim.\n"
"For more information, see the link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide]."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "But depending on your OIDC provider, roles might be stored in the access token or the user info."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles. For more information, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization]."
msgstr "さらに、カスタム `SecurityIdentityAugmentor` をロールの追加に使用することもできます。詳しくは、 xref:security-customization.adoc#security-identity-customization[SecurityIdentityのカスタマイズ] を参照してください。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Ensuring validity of tokens and authentication data"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"A core part of the authentication process is ensuring the chain of trust and validity of the information.\n"
"This is done by ensuring tokens are trustable."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Token verification and introspection"
msgstr "トークン検証・イントロスペクション"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The verification process of OIDC authorization code flow tokens follows the Bearer token authentication token verification and introspection logic. For more information, see the xref:security-oidc-bearer-token-authentication.adoc#token-verification-introspection[Token Verification And Introspection] section of the \"Quarkus OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"With Quarkus `web-app` applications, only the `IdToken` is verified by default because the access token is not used to access the current Quarkus `web-app` endpoint and is intended to be propagated to the services expecting this access token.\n"
"If you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Token introspection and UserInfo cache"
msgstr "トークンのイントロスペクションとUserInfoのキャッシュ"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Code flow access tokens are not introspected unless they are expected to be the source of roles.\n"
"They will however be used to get `UserInfo`.\n"
"There will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Please see xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "JSON web token claim verification"
msgstr "JSONウェブトークンのクレーム検証"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Please see xref:security-oidc-bearer-token-authentication.adoc#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.\n"
"It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Further security with Proof Key for Code Exchange (PKCE)"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) minimizes the risk of authorization code interception."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"While PKCE is of primary importance to public OpenID Connect clients, such as SPA scripts running in a browser, it can also provide an extra level of protection to Quarkus OIDC `web-app` applications.\n"
"With PKCE, Quarkus OIDC `web-app` applications are confidential OpenID Connect clients capable of securely storing the client secret and using it to exchange the code for the tokens."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can enable `PKCE` for your OIDC `web-app` endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32-character secret which is required to encrypt the PKCE code verifier in the state cookie, as shown in the following example:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If you already have a 32-characters client secret then you do not need to set the  `quarkus.oidc.authentication.pkce-secret` property unless you prefer to use a different secret key. This secret will be auto-generated if it is not configured and if the fallback to the client secret is not possible in case of the client secret being less than 16 characters long."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The secret key is required for encrypting a randomly generated `PKCE` `code_verifier` while the user is being redirected with the `code_challenge` query parameter to an OIDC provider to authenticate.\n"
"The `code_verifier` is decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret, and other parameters to complete the code exchange.\n"
"The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` that was provided during the authentication request."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Handling and controlling the lifetime of authentication"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Another important requirement for authentication is to ensure that the data the session is based on is up-to-date without requiring the user to authenticate for every single request.\n"
"There are also situations where a logout event is explicitly requested.\n"
"Use the following key points to find the right balance for securing your Quarkus applications:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Cookies"
msgstr "クッキー"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC adapter uses cookies to keep the session, code flow, and post-logout state.\n"
"This state is a key element controlling the lifetime of authentication data."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Use the `quarkus.oidc.authentication.cookie-path` property to ensure that the same cookie is visible when you access protected resources with overlapping or different roots, for example:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "`/index.html` and `/web-app/service`"
msgstr "`/index.html` と `/web-app/service`"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr "`/web-app/service1` と `/web-app/service2`"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr "`/web-app1/service` と `/web-app2/service`"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "By default, `quarkus.oidc.authentication.cookie-path` is set to `/` but you can change this to a more specific path if required, for example, `/web-app`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"To set the cookie path dynamically, configure the `quarkus.oidc.authentication.cookie-path-header` property.\n"
"Set the `quarkus.oidc.authentication.cookie-path-header` property.\n"
"For example, to set the cookie path dynamically by using the value of the`X-Forwarded-Prefix` HTTP header, configure the property to `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr "`quarkus.oidc.authentication.cookie-path-header` が設定されているが、現在のリクエストで設定された HTTP ヘッダーが利用できない場合は、`quarkus.oidc.authentication.cookie-path` がチェックされます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If your application is deployed across multiple domains, set the `quarkus.oidc.authentication.cookie-domain` property so that the session cookie is visible to all protected Quarkus services.\n"
"For example, if you have Quarkus services deployed on the following two domains, then you must set the `quarkus.oidc.authentication.cookie-domain` property to `company.net`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "\\https://whatever.wherever.company.net/"
msgstr "\\https://whatever.wherever.company.net/"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "\\https://another.address.company.net/"
msgstr "\\https://another.address.company.net/"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Session cookie and default TokenStateManager"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC `CodeAuthenticationMechanism` uses the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access, and refresh tokens returned in the authorization code or refresh grant responses in an encrypted session cookie."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "It makes Quarkus OIDC endpoints completely stateless and it is recommended to follow this strategy in order to achieve the best scalability results."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "See xref:db-token-state-manager[Database TokenStateManager] and xref:custom-token-state-manager[Session cookie and custom TokenStateManager] sections of this guide for alternative approaches where tokens can be stored in the database or other server-side storage, if you prefer and have good reasons for storing the token state on the server."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure the default `TokenStateManager` to avoid saving an access token in the session cookie and only keep ID and refresh tokens or ID token only."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "An access token is only required if the endpoint needs to:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Retrieve `UserInfo`"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Access the downstream service with this access token"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Use the roles associated with the access token, which are checked by default"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "In such cases, use the `quarkus.oidc.token-state-manager.strategy` property to configure the token state strategy as follows:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "To..."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Set the property to ..."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Keep the ID and refresh tokens only"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.token-state-manager.strategy=id-refresh-token`"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Keep the ID token only"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.token-state-manager.strategy=id-token`"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If your chosen session cookie strategy combines tokens and generates a large session cookie value that is greater than 4KB, some browsers might not be able to handle such cookie sizes.\n"
"This can occur when the ID, access, and refresh tokens are JWT tokens and the selected strategy is `keep-all-tokens` or with ID and refresh tokens when the strategy is `id-refresh-token`.\n"
"To workaround this issue, you can set `quarkus.oidc.token-state-manager.split-tokens=true` to create a unique session token for each token. An alternative solution is to have the tokens saved in the database, see xref:db-token-state-manager[Database TokenStateManager] for more information."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Default `TokenStateManager` encrypts the tokens before storing them in the session cookie.\n"
"The following example shows how you configure it to split the tokens and encrypt them:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The token encryption secret must be at least 32 characters long.\n"
"If this key is not configured then either `quarkus.oidc.credentials.secret` or `quarkus.oidc.credentials.jwt.secret` will be hashed to create an encryption key."
msgstr "トークンの暗号化シークレットは少なくとも32文字以上でなければなりません。このキーが設定されていない場合、 `quarkus.oidc.credentials.secret` または `quarkus.oidc.credentials.jwt.secret` のいずれかがハッシュ化されて暗号化キーが作成されます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Configure the `quarkus.oidc.token-state-manager.encryption-secret` property if Quarkus authenticates to the OpenId Connect Provider by using one of the following authentication methods:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "mTLS"
msgstr "mTLS"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "`private_key_jwt`, where a private RSA or EC key is used to sign a JWT token"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Otherwise, a random key is generated, which can be problematic if the Quarkus application is running in the cloud with multiple pods managing the requests."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can disable token encryption in the session cookie by setting `quarkus.oidc.token-state-manager.encryption-required=false`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Session cookie and custom TokenStateManager"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Register a custom `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For example, you may want to keep the tokens in a cache cluster and have only a key stored in a session cookie.\n"
"Note that this approach might introduce some challenges if you need to make the tokens available across multiple microservices nodes."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Here is a simple example:"
msgstr "簡単な例を挙げてみます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "See xref:token-state-manager[Session cookie and default TokenStateManager] for the information about the default `TokenStateManager` storing the tokens in an encrypted session cookie."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "See xref:db-token-state-manager[Database TokenStateManager] for the information about the custom `TokenStatemanager` implementation provided by Quarkus."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Database TokenStateManager"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If you prefer to follow a stateful token storage strategy, then you can use a custom `TokenStateManager` provided by Quarkus to have your application storing tokens in a database, instead of storing them in an encrypted session cookie which is done by default, as described in the xref:token-state-manager[Session cookie and default TokenStateManager] section."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "To use this feature, add the following extension to your project:"
msgstr "この機能を使用するには、以下のエクステンションをプロジェクトに追加します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "This extension will replace the default `io.quarkus.oidc.TokenStateManager' with a database-based one."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC Database Token State Manager is using a Reactive SQL client under the hood to avoid blocking since the authentication is likely to happen on IO thread."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Depending on your database, please include and configure exactly one xref:reactive-sql-clients.adoc[Reactive SQL client].\n"
"Following Reactive SQL clients are supported:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive MS SQL client"
msgstr "リアクティブMS SQLクライアント"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive MySQL client"
msgstr "リアクティブMySQLクライアント"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive PostgreSQL client"
msgstr "リアクティブなPostgreSQLクライアント"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive Oracle client"
msgstr "リアクティブオラクルクライアント"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive DB2 client"
msgstr "リアクティブ DB2 クライアント"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Your application is not required to switch to using the Reactive SQL client if it already uses Hibernate ORM with one of the JDBC driver extensions."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Let's say you already have application that is using the Hibernate ORM extension together with a PostgreSQL JDBC Driver and your datasource is configured like this:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Now, if you decided to use OIDC Database Token State Manager, you need to add following dependencies and set a reactive driver URL."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "And you are ready to go."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"By default, a database table used for storing tokens is created for you, however you can disable this option with the `quarkus.oidc.db-token-state-manager.create-database-table-if-not-exists` configuration property.\n"
"Should you want the Hibernate ORM extension to create this table instead, you simply need to include an Entity like this one:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The Hibernate ORM extension will only create this table for you when database schema is generated. Please refer to the xref:hibernate-orm.adoc[Hibernate ORM] guide for more information."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can choose column length depending on the length of your tokens."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Logout and expiration"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "There are two main ways for the authentication information to expire: the tokens expired and were not renewed or an explicit logout operation was triggered."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Let's start with explicit logout operations."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "User-initiated logout"
msgstr "ユーザー主導のログアウト"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr "ユーザーは、 `quarkus.oidc.logout.path` プロパティーで設定されたQuarkusエンドポイントのログアウトパスにリクエストを送信することで、ログアウトを要求することができます。たとえば、エンドポイントのアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.path` が \"/logout\" に設定されている場合、ログアウト要求は `https://application.com/webapp/logout` に送信されます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr "このログアウト要求により、 https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] が開始され、ユーザーは OpenID Connect Provider にリダイレクトされ、そこでログアウトできます。ログアウトが実際に意図されていることを確認するように求められます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr "`quarkus.oidc.logout.post-logout-path` プロパティーが設定されている場合、ログアウトが完了すると、ユーザーはエンドポイントのログアウト後ページに戻ります。たとえば、エンドポイントアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.post-logout-path` が \"/signin\" に設定されている場合、ユーザーは `https://application.com/webapp/signin` (この URI は OpenID Connect プロバイダーに有効な `post_logout_redirect_uri` として登録されている必要があることに注意してください)。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a Jakarta REST filter."
msgstr "`quarkus.oidc.logout.post-logout-path` が設定されている場合、 `q_post_logout` Cookie が作成され、それに一致する `state` クエリパラメータがログアウトリダイレクト URI に追加され、ログアウトが完了すると OpenID Connect プロバイダはこの `state` を返します。Quarkus `web-app` アプリケーションでは、 `state` クエリパラメータが `q_post_logout` Cookie の値と一致するかどうかを確認することが推奨されます。これは、例えば Jakarta REST フィルタで実行できます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Note that a cookie name varies when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` ID, and so on."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Here is an example of how to configure a Quarkus app initiated logout flow:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all the application resources which is `/` in this example.\n"
"For more information, see the xref:oidc-cookies[Cookies] section."
msgstr "また、 `quarkus.oidc.authentication.cookie-path` に、すべてのアプリケーションリソースに共通するパス値（この例では `/` ）を設定する必要がある場合があります。詳しくは、 xref:oidc-cookies[Cookie] の項を参照してください。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers do not support link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification and do not return an OpenID Connect well-known `end_session_endpoint` metadata property.\n"
"However, this is not a problem for Quarkus because the specific logout mechanisms of such OIDC providers only differ in how the logout URL query parameters are named."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter, which is not recognized by the providers that do not support this specification."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue. You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`. For example, here is how you can support a logout with `Auth0`:"
msgstr "この問題を回避するには、 `quarkus.oidc.logout.post-logout-url-param` を使用できます。 `quarkus.oidc.logout.extra-params` で追加されたログアウトクエリーパラメーターをさらにリクエストすることもできます。たとえば、 `Auth0` でログアウトをサポートする方法は次のとおりです。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Back-channel logout"
msgstr "バックチャネルログアウト"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC provider can force the logout of all applications using the authentification data: this is called back-channel logout.\n"
"In this case the OIDC will call a specific URL from each application to trigger that logout."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] is used by OpenID Connect providers to log out the current user from all the applications this user is currently logged in, bypassing the user agent."
msgstr "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[バックチャンネルログアウト] は、OpenID Connect プロバイダーが、このユーザーが現在ログインしているすべてのアプリケーションから、ユーザーエージェントをバイパスして、現在のユーザーをログアウトするために使用されます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure Quarkus to support `Back-Channel Logout` as follows:"
msgstr "次のように、バックチャネルログアウトをサポートするように Quarkus を設定できます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The absolute `back-channel logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`.\n"
"You will need to configure this URL in the admin console of your OIDC provider."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You will also need to configure a token age property for the logout token verification to succeed if your OpenID Connect Provider does not set an expiry claim in the current logout token.\n"
"For example, set `quarkus.oidc.token.age=10S` to ensure that no more than 10 seconds elapse since the logout token's `iat` (issued at) time."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Front-channel logout"
msgstr "フロントチャンネルログアウト"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-Channel Logout] can be used to logout the current user directly from the user agent (e.g. its browser).\n"
"It is like xref:back-channel-logout[Back-channel logout] but the logout steps are executed by the user agent like the browser and not in the background by the OIDP provider.\n"
"This option is rarely used."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure Quarkus to support `Front-Channel Logout` as follows:"
msgstr "次のように、フロントチャネルログアウトをサポートするように Quarkus を設定できます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "This path will be compared against the current request's path and the user will be logged out if these paths match."
msgstr "このパスは現在のリクエストのパスと比較され、これらのパスが一致する場合、ユーザーはログアウトされます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Local logout"
msgstr "ローカルログアウト"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"xref:user-initiated-logout[User-initiated logout] will log the user out of the OIDC provider, if it is used as single sign-on, it might not be what you require.\n"
"If, for example, your OIDC provider is Google, you will be logged out from Google and its services.\n"
"Instead the user might just want to log out of that specific application.\n"
"Another use case might be when the OIDC provider does not have a logout endpoint."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "By using xref:oidc-session[OidcSession], you can support a local logout, which means that only the local session cookie is cleared, as shown in the following example:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Using `OidcSession` for local logout"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`, which can help to perform a xref:local-logout[Local logout], retrieve the current session's tenant identifier, and check when the session will expire.\n"
"More useful methods will be added to it over time."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Session management"
msgstr "セッション管理"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"By default, logout is based on the expiration time of the ID token issued by the OIDC provider. When the ID token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OIDC provider again to authenticate.\n"
"If the session at the OIDC provider is still active, users are automatically re-authenticated without needing to provide their credentials again."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The current user session can be automatically extended by enabling the `quarkus.oidc.token.refresh-expired` property.\n"
"If set to `true`, when the current ID token expires, a refresh token grant will be used to refresh the ID token as well as access and refresh tokens."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If you have a xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[single page application for service applications] where your OIDC provider script such as `keycloak.js` is managing an authorization code flow then that script will also control the SPA authentication session lifespan."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If you work with a Quarkus OIDC `web-app` application, then it is the Quarkus OIDC code authentication mechanism that is managing the user session lifespan."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"To use the refresh token, you should carefully configure the session cookie age.\n"
"The session age should be longer than the ID token lifespan and close to or equal to the refresh token lifespan."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You calculate the session age by adding the lifespan value of the current ID token and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You use only the `quarkus.oidc.authentication.session-age-extension` property to significantly extend the session lifespan, if required.\n"
"You use the `quarkus.oidc.token.lifespan-grace` property only for taking some small clock skews into consideration."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"When the current authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired, then, by default, the user is automatically redirected to the OIDC Authorization endpoint to re-authenticate.\n"
"The OIDC provider might challenge the user again if the session between the user and this OIDC provider is still active, which might happen if the session is configured to last longer than the ID token."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If the `quarkus.oidc.token.refresh-expired` is set to `true`, then the expired ID token (as well as the access token) is refreshed by using the refresh token returned with the initial authorization code grant response.\n"
"This refresh token might also be recycled (refreshed) itself as part of this process.\n"
"As a result, the new session cookie is created and the session is extended."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In instances where the user is not very active, you can use the `quarkus.oidc.authentication.session-age-extension` property to help handle expired ID tokens.\n"
"If the ID token expires, the session cookie might not be returned to the Quarkus endpoint during the next user request as the cookie lifespan would have elapsed.\n"
"Quarkus assumes that this request is the first authentication request.\n"
"Set `quarkus.oidc.authentication.session-age-extension` to be _reasonably_ long for your barely-active users and in accordance with your security policies."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can go one step further and proactively refresh ID tokens or access tokens that are about to expire.\n"
"Set `quarkus.oidc.token.refresh-token-time-skew` to the value you want to anticipate the refresh. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can further optimize this process by having a simple JavaScript function ping your Quarkus endpoint to periodically emulate the user activity, which minimizes the time frame during which the user might have to be re-authenticated."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You cannot extend the user session indefinitely.\n"
"The returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Integration with GitHub and non-OIDC OAuth2 providers"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some well known providers such as GitHub or LinkedIn are not OpenID Connect but OAuth2 providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2].\n"
"Remember, OIDC is built on top of OAuth2."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The main difference between OpenID Connect and OAuth2 providers is that OpenID Connect providers return an `ID Token` that represents a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "OAuth2 providers such as GitHub do not return `IdToken`, the fact of the user authentication is implicit and is indirectly represented by the `access` token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr "GitHub のような OAuth2 プロバイダーは `IdToken` を返しません。ユーザー認証の事実は暗黙の了解で、認証済みユーザーの代わりに現在の Quarkus `web-app` アプリケーションがデータにアクセスすることを許可する `access` トークンで間接的に表現されます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For OIDC, you validate the ID token as proof of authentication validity whereas in the case of OAuth2, you validate the access token.\n"
"This is done by subsequently calling an endpoint that requires the access token and that typically returns user information.\n"
"This approach is similar to the OIDC xref:user-info[UserInfo] approach, with `UserInfo` fetched by Quarkus OIDC on your behalf."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token which allows the Quarkus endpoint to request a GitHub profile for the current user."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "To support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured a bit differently to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Even though you configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` is generated to standardize the way `quarkus-oidc` operates.\n"
"You use an `IdToken` to support the authentication session and to avoid redirecting the user to the provider,  such as GitHub, on every request.\n"
"In this case, the session lifespan is set to 5 minutes, which you can can extend further as described in the xref:session-management[session management] section."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "This simplifies how you handle an application that supports multiple OIDC providers."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The next step is to ensure that the returned access token can be useful and is valid to the current Quarkus endpoint.\n"
"The first way is to call the OAuth2 provider introspection endpoint by configuring `quarkus.oidc.introspection-path`, if the provider offers such an endpoint.\n"
"In this case you can use the access token as a source of roles using `quarkus.oidc.roles.source=accesstoken`.\n"
"If no introspection endpoint is present, you can attempt instead to request xref:user-info[UserInfo] from the provider as it will at least validate the access token.\n"
"To do so, specify `quarkus.oidc.token.verify-access-token-with-user-info=true`.\n"
"You also need to set the `quarkus.oidc.user-info-path` property to a URL endpoint that fetches the user info (or to an endpoint protected by the access token).\n"
"For GitHub, since it does not have an introspection endpoint, requesting the UserInfo is required."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Requiring xref:user-info[UserInfo] involves making a remote call on every request.\n"
"Therefore, you might want to consider caching `UserInfo` data.\n"
"For more information, see the xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Alternatively, you may want to request that `UserInfo` is embedded into the internal generated `IdToken` with the `quarkus.oidc.cache-user-info-in-idtoken=true` property - the advantage of this approach is that by default no cached `UserInfo` state will be kept with the endpoint - instead it will be stored in a session cookie. You may also want to consider encrypting `IdToken` in this case if `UserInfo` contains sensitive data. For more information, see xref:token-state-manager[Encrypt tokens with TokenStateManager]."
msgstr "あるいは、 `UserInfo` が `quarkus.oidc.cache-user-info-in-idtoken=true` プロパティで内部生成された `IdToken` に埋め込まれるように要求することもできます。このアプローチの利点は、デフォルトではキャッシュされた `UserInfo` の状態がエンドポイントに保持されないことです。代わりに、セッション Cookie に保存されます。また、 `UserInfo` に機密データが含まれている場合、このケースで `IdToken` を暗号化することを検討するとよいでしょう。詳細については、 xref:token-state-manager[TokenStateManagerでトークンを暗号化] を参照してください。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OAuth2 servers might not support a well-known configuration endpoint.\n"
"In this case, you must disable the discovery and configure the authorization, token, and introspection and the userinfo endpoint paths manually."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For well-known OIDC or OAuth2 providers, like Apple, Facebook, GitHub, Google, Microsoft, Spotify, and Twitter, Quarkus can help significantly simplify your application's configuration with the `quarkus.oidc.provider` property.\n"
"Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "See xref:security-openid-connect-providers.adoc[OpenID Connect providers] for more details about configuring other well-known providers."
msgstr "その他のよく知られたプロバイダーの設定については、 xref:security-openid-connect-providers.adoc[OpenID Connectのプロバイダー] を参照してください。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "This is all what is needed for an endpoint like this one to return the currently-authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr "このようなエンドポイントに対して必要なのは、現在認証されているユーザーのプロファイルを `GET http://localhost:8080/github/userinfo` で返却し、個々の `UserInfo` のプロパティとしてアクセスすることです:"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google which is an OpenID Connect Provider returning `IdToken` and GitHub which is an OAuth2 provider returning no `IdToken` and only allowing to access `UserInfo` then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows. A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally generated `IdToken` will be replaced with the `UserInfo` based principal when the GiHub flow is active:"
msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connect マルチテナンシー] の利用で複数のソーシャルプロバイダーをサポートしている場合、例えば OpenID Connect プロバイダーである Google が `IdToken` を返し、OAuth2 プロバイダーである GitHub が `IdToken` を返さず `UserInfo` のみアクセスを許可していれば、エンドポイントには Google と GitHub 両フロー用の `SecurityIdentity` しか入れられないようにすることができます。GiHub フローがアクティブになると、内部で生成された `IdToken` で作成されたプリンシパルが `UserInfo` ベースのプリンシパルに置き換えられるので、`SecurityIdentity` を単純に拡張する必要があります。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Now, the following code will work when the user signs into your application by using Google or GitHub:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` with the providers which do not return `IdToken`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You must ensure that the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Listening to important authentication events"
msgstr "重要な認証イベントのリッスン"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can register the `@ApplicationScoped` bean which will observe important OIDC authentication events.\n"
"When a user logs in for the first time, reauthenticates, or refreshes the session, the listener is updated.\n"
"In the future, more events might be reported.\n"
"For example:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Propagating tokens to downstream services"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "For information about Authorization Code Flow access token propagation to downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Integration considerations"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Your application secured by OIDC integrates in an environment where it can be called from single-page applications, needs to work with well-known OIDC providers, run behind HTTP Reverse Proxy, require external and internal access, etc."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "This section discusses these considerations."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Single-page applications"
msgstr "シングルページ・アプリケーション"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can check if implementing single-page applications (SPAs) the way it is suggested in the xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[Single-page applications] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide meets your requirements."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you prefer to use SPAs and JavaScript APIs such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, be aware that OpenID Connect providers might not support cross-origin resource sharing (CORS) for authorization endpoints where the users are authenticated after a redirect from Quarkus.\n"
"This will lead to authentication failures if the Quarkus application and the OpenID Connect provider are hosted on different HTTP domains, ports, or both."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false`, which will instruct Quarkus to return a `499` status code and a `WWW-Authenticate` header with the `OIDC` value."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The browser script must set a header to identify the current request as a JavaScript request for `499` status code to be returned when `quarkus.oidc.authentication.java-script-auto-redirect` property is set to `false`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If the script engine sets an engine-specific request header itself, then you can register a custom `quarkus.oidc.JavaScriptRequestChecker` bean, which will inform Quarkus if the current request is a JavaScript request. For example, if the JavaScript engine sets a header such as `HX-Request: true` then you can have it checked like this:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "and reload the last requested page in case of a `499` status code."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Otherwise you must also update the browser script to set the `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of a `499` status code."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "For example:"
msgstr "例えば、以下のようになります。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Cross-origin resource sharing"
msgstr "クロスオリジンリソース共有"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you plan to consume this application from a single-page application running on a different domain, you need to configure cross-origin resource sharing (CORS).\n"
"For more information, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the \"Cross-origin resource sharing\" guide."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Calling Cloud provider services"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Google Cloud"
msgstr "Google Cloud"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently-authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google developer consoles."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add\n"
"the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr "link:https://github.com/quarkiverse[Quarkiverse] のlink:https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services] で行うのは超簡単で、 link:https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[最新のタグ] サービスの依存関係を追加するだけです。例:"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "and configure Google OIDC properties:"
msgstr "そしてGoogle OIDCプロパティーを設定します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Running Quarkus application behind a reverse proxy"
msgstr "Quarkusアプリケーションをリバースプロキシの背後で実行"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr "Quarkusアプリケーションがリバースプロキシー/ゲートウェイ/ファイアウォールの背後で実行されている場合、HTTP `Host` ヘッダーが内部IPアドレスにリセットされたり、HTTPS接続が終了したりした場合などに、OIDC認証メカニズムが影響を受けることがあります。たとえば、認可コードフロー `redirect_uri` パラメーターが、期待される外部ホストではなく内部ホストに設定されている場合があります。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, for more information, see the xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section."
msgstr "このような場合、プロキシによって転送された元のヘッダーを認識するようにQuarkusを設定する必要があります。詳細については、 xref:http-reference.adoc#reverse-proxy[リバースプロキシの背後で実行] Vert.xのドキュメントセクションをご覧ください。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenID Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr "例えば、Quarkus のエンドポイントが Kubernetes Ingress の背後にあるクラスターで実行されている場合、計算された `redirect_uri` パラメーターが内部のエンドポイントアドレスを指している可能性があるので、OpenID Connect Provider からこのエンドポイントへのリダイレクトは機能しないかもしれません。この問題は、以下のような設定で解決することができます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr "ここで、 `X-ORIGINAL-HOST` は、外部エンドポイントアドレスを表すために Kubernetes Ingress によって設定されます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind an SSL terminating reverse proxy."
msgstr "`quarkus.oidc.authentication.force-redirect-https-scheme` プロパティーは、QuarkusアプリケーションがSSL終端リバースプロキシーの後ろで実行されている場合にも使用できます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "External and internal access to the OIDC provider"
msgstr "OIDCプロバイダーへの外部・内部アクセスについて"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Note that the OpenID Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.\n"
"In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr "OpenID Connect Provider の外部アクセス可能な認証、ログアウト、その他のエンドポイントは、自動検出された URL や内部 URL `quarkus.oidc.auth-server-url` に対して設定された URL とは異なる HTTP(S) URL を持つ場合があることに注意してください。このような場合、エンドポイントから発行者確認の失敗が報告され、外部からアクセス可能な接続プロバイダーのエンドポイントへのリダイレクトに失敗する可能性があります。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.\n"
"If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "このような場合、Keycloak を使用する場合は、外部からアクセス可能なベース URL に設定された `KEYCLOAK_FRONTEND_URL` システムプロパティーで起動してください。他の Openid Connect プロバイダーと連携している場合は、プロバイダーのドキュメントを確認してください。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC SAML Identity broker"
msgstr "OIDC SAML アイデンティティ・ブローカー"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If your identity provider does not implement OpenId Connect but only the legacy XML-based SAML2.0 SSO protocol, then Quarkus can not be used as a SAML 2.0 adapter, similarly to how `quarkus-oidc` is used as an OIDC adapter."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "However, many OIDC providers such as Keycloak, Okta, Auth0, Microsoft ADFS can offer OIDC to SAML 2.0 bridges. You can create an identity broker connection to SAML 2.0 provider in your OIDC provider and use `quarkus-oidc` to authenticate your users to this SAML 2.0 provider with the OIDC provider coordinating OIDC and  SAML 2.0 communications. As far as Quarkus endpoints are concerned, they can continue using the same Quarkus Security and OIDC API and annotations such as `@Authenticated`, `SecurityIdentity`, etc."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, lets assume `Okta` is your SAML 2.0 provider and `Keycloak` is your OIDC provider. Here is a typical sequence explaining how to configure `Keycloak` to broker with the `Okta` SAML 2.0 provider."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "First, create a new `SAML2` integration in your `Okta` `Dashboard/Applications`:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, name it as `OktaSaml`:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Next, configure it to point to a Keycloak SAML broker endpoint. At this point you need to know the name of the Keycloak realm, for example, `quarkus`, and, assuming that the Keycloak SAML broker alias is `saml`, enter the endpoint address as `http:localhost:8081/realms/quarkus/broker/saml/endpoint` and Service provider (SP) entity id as `http:localhost:8081/realms/quarkus`, where `http://localhost:8081` is a Keycloak base address and `saml` is a broker alias:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Next, save this SAML integration and note its Metadata URL:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Next, add SAML Provider to Keycloak:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "First, as usual, create a new realm or import the existing realm to `Keycloak`, in this case, the realm name has to be `quarkus`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Now, in the `quarkus` Realm properties, navigate to `Identity Providers` and add a new SAML provider:"
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Note the alias is set to `saml`, `Redirect URI` is `http:localhost:8081/realms/quarkus/broker/saml/endpoint` and `Service provider entity id` is `http:localhost:8081/realms/quarkus` - these are the same values you have entered when creating the Okta SAML integration in the previous step."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Finally, set `Service entity descriptor` to point to the Okta SAML Intregration Metadata URL you noted at the end of the previous step."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Next, if you would like, you can register this Keycloak SAML Provider as a Default Provider by navigating to `Authentication/browser/Identity Provider Redirector config` and setting both `Alias` and `Default Identity Provider` properties to `saml`. If you do not configure it as a Default Provider then, at the authentication time, Keycloak will offer 2 options - authenticate with the SAML provider, and authenticate directly to Keycloak with the name and password."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Now configure the Quarkus OIDC `web-app` application to point to the Keycloak `quarkus` realm, `quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus` and you are ready to start authenticating your Quarkus users to the Okta SAML 2.0 provider using an OIDC to SAML bridge provided by Keycloak OIDC and Okta SAML 2.0 providers."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure other OIDC providers to provide a SAML bridge similarly to how it can be done for Keycloak."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Testing"
msgstr "テスト"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Testing is often tricky when it comes to authentification to a separate OIDC like server.\n"
"Quarkus offers several options from mocking to a local run of an OIDC provider."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Wiremock"
msgstr "Wiremock"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Add the following dependency:"
msgstr "以下の依存関係を追加します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr "RESTテストエンドポイントを用意し、 `application.properties` を以下のように設定します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "and finally write the test code, for example:"
msgstr "最後に、例えば次のようにテストコードを書きます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr "`OidcWiremockTestResource` は `alice` と `admin` ユーザーを認識します。ユーザー `alice` にはデフォルトで `user` ロールしかありませんが、`quarkus.test.oidc.token.user-roles` システムプロパティーでカスタマイズできます。ユーザー `admin` にはデフォルトで `user` と `admin` ロールがありますが、`quarkus.test.oidc.token.user-roles` システムプロパティーでカスタマイズできます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr "さらに、`OidcWiremockTestResource` はトークン発行者と視聴者を `https://service.example.com` に設定します。これは `quarkus.test.oidc.token.issuer` と `quarkus.test.oidc.token.audience` システムのプロパティーでカスタマイズすることができます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "`OidcWiremockTestResource` can be used to emulate all OpenID Connect providers."
msgstr "`OidcWiremockTestResource` は、すべての OpenID Connect プロバイダーをエミュレートするために使用することができます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Dev services for Keycloak"
msgstr "Dev services for Keycloak"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"`Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "Keycloak に対する統合テストには、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] を使用することをお勧めします。`Dev Services for Keycloak` は、テストコンテナーを起動して初期化します。これにより、`quarkus` レルム、`quarkus-app` クライアント (`secret` シークレット) が作成され、`alice` (`admin` および `user` ロール) および `bob` (`user` ロール) ユーザーが追加されます。これらのプロパティーはすべてカスタマイズできます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "First, prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "まず、 `application.properties` を準備します。 `Dev Services for Keycloak` が実行中のテストコンテナを指す `quarkus.oidc.auth-server-url` を登録し、 `quarkus.oidc.client-id=quarkus-app` と `quarkus.oidc.credentials.secret=secret` も登録するので、完全に空の `application.properties` で始めることができます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "ただし、必要なすべての `quarkus-oidc` プロパティーがすでに設定されている場合は、`quarkus.oidc.auth-server-url` を `Dev Services for Keycloak` の `prod` プロファイルに関連付けるだけでコンテナーを起動できます。以下に例を示します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "テストを実行する前にカスタムレルムファイルを Keycloak にインポートする必要がある場合は、次のように `Dev Services for Keycloak` を設定できます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Finally, write a test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.\n"
"The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr "最後に、 xref:integration-testing-wiremock[Wiremock] のセクションで説明したのと同じ方法でテストコードを書きます。唯一の違いは、 `@QuarkusTestResource` が不要になったことです:"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Using KeycloakTestResourceLifecycleManager"
msgstr "KeecycloakTestResourceLifecycleManagerの使用"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`.\n"
"If you need to do the integration testing against Keycloak then you are encouraged to do it with xref:integration-testing-keycloak-devservices[Dev services For Keycloak]."
msgstr "`Dev Services for Keycloak` を使用しない正当な理由がある場合のみ、テストに `KeycloakTestResourceLifecycleManager` を使用してください。Keycloakに対する統合テストを行う必要がある場合は、 xref:integration-testing-keycloak-devservices[Dev services For Keycloak] で行うことが推奨されます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Start with adding the following dependency:"
msgstr "以下の依存関係を追加することから始めます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "これは、Keycloak コンテナーを開始する `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` の実装である `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` を提供します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "そして、Maven Surefire プラグインを次のように設定します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "(and similarly the Maven Failsafe plugin when testing in native image)."
msgstr "(ネイティブイメージでテストする場合は同様に Maven Failsafe プラグインを使用します)。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"And now set the configuration and write the test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.\n"
"The only difference is the name of `QuarkusTestResource`:"
msgstr "そして、 xref:integration-testing-wiremock[Wiremock] のセクションで説明したのと同じように設定を行い、テストコードを記述します。唯一違うのは、 `QuarkusTestResource` の名前です:"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` は `alice` と `admin` ユーザーを登録します。ユーザー `alice` にはデフォルトで `user` ロールしかありませんが、`keycloak.token.user-roles` システムプロパティーでカスタマイズできます。ユーザー `admin` にはデフォルトで `user` と `admin` ロールがありますが、`keycloak.token.admin-roles` システムプロパティーでカスタマイズできます。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.\n"
"Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr "デフォルトでは、`KeycloakTestResourceLifecycleManager` は HTTPS を使用して Keycloak インスタンスを初期化しますが、`keycloak.use.https=false` で無効にできます。デフォルトのレルム名は `quarkus` で、クライアント ID `quarkus-web-app` は、必要に応じて値をカスタマイズするために `keycloak.realm` および `keycloak.web-app.client` システムプロパティーを設定します。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "TestSecurity annotation"
msgstr "TestSecurity アノテーション"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "See xref:security-oidc-bearer-token-authentication.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Checking errors in the logs"
msgstr "ログでエラー確認"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "To see details about the token verification errors, you must enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging:"
msgstr "トークン検証エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcProvider` の `TRACE` レベルのロギングを有効にする必要があります:"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "To see details about the OidcProvider client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging:"
msgstr "OidcProviderクライアントの初期化エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcRecorder` の `TRACE` レベルのロギングを有効にしてください:"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "You can also from `quarkus dev` console hit `j` to change the application global log level."
msgstr ""

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "References"
msgstr "参照"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC設定プロパティ]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect Providers]"
msgstr "xref:security-openid-connect-providers.adoc[よく知られたOpenID Connectプロバイダの設定]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[OpenID Connect、SmallRye JWT、OAuth2の認証メカニズムの選択]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[認証メカニズムの組み合わせ]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
