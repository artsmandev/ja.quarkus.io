msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"This guide demonstrates how your Quarkus application can use https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL],\n"
"an implementation of the https://github.com/eclipse/microprofile-graphql/[MicroProfile GraphQL] specification."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.\n"
"GraphQL provides a complete and understandable description of the data in your API,\n"
"gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time,\n"
"and enables powerful developer tools."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"**GraphQL** was originally developed by **Facebook** in 2012 and has been\n"
"an open standard since 2015."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"GraphQL is not a replacement for REST API specification but merely an\n"
"alternative. Unlike REST, GraphQL API's have the ability to benefit the client by:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"REST APIs are server-driven fixed data responses that cannot be determined by\n"
"the client. Although the client does not require all the fields the client\n"
"must retrieve all the data hence `Over-fetching`. A client may also require\n"
"multiple REST API calls according to the first call (HATEOAS) to retrieve\n"
"all the data that is required thereby `Under-fetching`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Since GraphQL API's returns data that are requested by the client adding additional\n"
"fields and capabilities to existing API will not create breaking changes to existing\n"
"clients."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"In this guide, we build a simple GraphQL application that exposes a GraphQL API\n"
"at `/graphql`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-graphql` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"The classes we have just created describe the GraphQL schema which is a\n"
"set of possible data (objects, fields, relationships) that a client can access."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"The value of the `@Query` annotation is optional and would implicitly\n"
"be defaulted to the method name if absent."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"The Quarkus `smallrye-graphql` extension ships with `GraphiQL` and enables it by default in `dev` and `test` modes,\n"
"but it can also be explicitly configured for `production` mode as well, by setting the `quarkus.smallrye-graphql.ui.always-include` configuration property to `true`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Since our query contains all the fields in the `Film` class\n"
"we will retrieve all the fields in our response. Since GraphQL API\n"
"responses are client determined, the client can choose which fields\n"
"it will require."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Let's assume that our client only requires `title` and `releaseDate`\n"
"making the previous call to the API `Over-fetching` of unnecessary\n"
"data."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Notice in the response we have only retrieved the required fields.\n"
"Therefore, we have prevented `Over-fetching`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Let's continue to expand our GraphQL API by adding the following to the\n"
"`FilmResource` class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Notice how we have excluded the value in the `@Query` annotation.\n"
"Therefore, the name of the query is implicitly set as the method name\n"
"excluding the `get`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"This query will allow the client to retrieve the film by id, and the `@Name` annotation on the parameter\n"
"changes the parameter name to `filmId` rather than the default `id` that it would be if you omit the `@Name` annotation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"The `film` query method requested fields can be determined\n"
"as such in our previous example. This way we can retrieve individual\n"
"film information."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"However, say our client requires both films with filmId `0` and `1`.\n"
"In a REST API the client would have to make two calls to the API.\n"
"Therefore, the client would be `Under-fetching`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Until now, we have created a GraphQL API to retrieve film data.\n"
"We now want to enable the clients to retrieve the `Hero` data of the `Film`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"By adding this method we have effectively changed the schema of the GraphQL API.\n"
"Although the schema has changed the previous queries will still work.\n"
"Since we only expanded the API to be able to retrieve the `Hero` data of the `Film`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"When you are exposing a `Collection` return like our `getAllFilms`, you might want to use the batch form of the above, to more efficiently fetch\n"
"the heroes:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"The current schema is simple with only two concrete types, `Hero` and `Film`.\n"
"Now we want to expand our API with additional types and add some abstractions\n"
"that make interacting with them easy for clients."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Notice that `Ally` has a some of the same fields as a `Hero`.\n"
"To better make queries easier for clients, let's create an abstraction for any character."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"By adding an interface and updating existing entities to implement it, we have effectively changed the schema.\n"
"The updated schema will now include the new `Ally` type and `Character` interface."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"So far, our API has only allowed us to query directly for an entity or list of entities.\n"
"Now we want to allow clients to search all of our entities.\n"
"While `Hero` and `Ally` have a shared abstract type of `Character`, there is no abstraction that also includes `Film`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"The Java interface representing the GraphQL union does not have to be empty,\n"
"but any getters defined will not explicitly change the GraphQL schema."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"We can also leverage inheritance and have `interface Character extends SearchResult`.\n"
"This will result in all implementations of `Character` being added as members of the `SearchResult` union in the schema."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Notice how in the response we have retrieved the `name` and `surname`\n"
"of the created Hero. This is because we selected to retrieve\n"
"these fields in the response within the `{ }` in the mutation query.\n"
"This can easily be a server side generated field that the client may require."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Similar to the `createHero` mutation method we also retrieve the `name` and\n"
"`surname` of the hero we have deleted which is defined in `{ }`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Subscriptions allow you to subscribe to a query. It allows you to receive events and is using web sockets.\n"
"See the https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md[GraphQL over WebSocket Protocol] spec for more details."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Queries can also be done on individual fields. For example, let's\n"
"create a method to query heroes by their last name."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"By using the `@DefaultValue` annotation we have determined that the surname value\n"
"will be `Skywalker` when the parameter is not provided."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type,\n"
"or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to an existing scalar."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"To be able to do the above, the `Phone` object needs to have a constructor that takes a String (or `Int` / `Date` / etc.),\n"
"or have a setter method for the String  (or `Int` / `Date` / etc.),\n"
"or have a `fromString` (or `fromInt` / `fromDate` - depending on the Scalar type) static method."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"By default, due to the fact that maps are hard to model in a schema (as the keys and values can be dynamic at runtime) GraphQL does not support maps by default.\n"
"Using the above adaption, `Map` support is added for Quarkus and are mapped to an `Entry<Key,Value>` with an optional key parameter.\n"
"This allows you to return a map, and optionally query it by key."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"If you are using the `smallrye-graphql` extension and the `micrometer` metrics extension is present and metrics are\n"
"enabled, you may encounter a `java.lang.NoClassDefFoundError` as some versions of the `smallrye-graphql` extension\n"
"have runtime requirements on the Microprofile Metrics API.  Add the following MicroProfile Metrics API dependency\n"
"to resolve the issue:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"SmallRye GraphQL enables clients to retrieve the exact data that is\n"
"required preventing `Over-fetching` and `Under-fetching`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid ""
"The GraphQL API can be expanded without breaking previous queries enabling easy\n"
"API `evolution`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/smallrye-graphql.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:6
#, no-wrap
msgid "SmallRye GraphQL"
msgstr "SmallRye GraphQL"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:15
msgid "As the https://www.graphql.org/[GraphQL] specification website states:"
msgstr "link:https://www.graphql.org/[GraphQL] の仕様のWebサイトにも記載されているように"

#. type: Labeled list
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:28
#, no-wrap
msgid "Preventing Over-fetching and Under-fetching"
msgstr "オーバーフェッチとアンダーフェッチの防止"

#. type: Labeled list
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:35
#, no-wrap
msgid "API Evolution"
msgstr "APIの進化"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:40
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:44
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: quote
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:50
msgid "This example was inspired by a popular GraphQL API."
msgstr "この例は、人気のある GraphQL API にインスパイアされたものです。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:51
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: quote
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:57
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive] をダウンロードする。"

#. type: quote
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:59
msgid "The solution is located in the `microprofile-graphql-quickstart` {quickstarts-tree-url}/microprofile-graphql-quickstart[directory]."
msgstr "ソリューションは `microprofile-graphql-quickstart` {quickstarts-tree-url}/microprofile-graphql-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:60
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: quote
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:63
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します:"

#. type: quote
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:69
msgid "This command generates a project, importing the `smallrye-graphql` extension."
msgstr "このコマンドは、 `smallrye-graphql` エクステンションをインポートした Maven プロジェクトを生成します。"

#. type: quote
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:77
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:79
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1291
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:88
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1300
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:93
#, no-wrap
msgid "Preparing an Application: GraphQL API"
msgstr "アプリケーションの準備: GraphQL API"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:96
msgid "In this section we will start creating the GraphQL API."
msgstr "このセクションでは、GraphQL APIの作成を開始します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:98
msgid "First, create the following entities representing a film from a galaxy far, far away:"
msgstr "まず、はるか彼方の銀河系の映画を表す以下のエンティティを作成します:"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:130
msgid "For readability we use classes with public fields, but classes with private fields with public getters and setters will also work."
msgstr "可読性の為にpublicなフィールドを持つクラスを使用していますが、publicなゲッターとセッターを持つprivateなフィールドを持つクラスも使用できます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:135
msgid "Let's continue with an example CDI bean, that would work as a repository:"
msgstr "引き続き、リポジトリとして動作するCDI Beanの例を見てみましょう。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:233
msgid "Now, let's create our first GraphQL API."
msgstr "それでは、最初のGraphQL APIを作成してみましょう。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:235
msgid "Edit the `org.acme.microprofile.graphql.FilmResource` class as following:"
msgstr "`org.acme.microprofile.graphql.FilmResource` クラスを以下のように編集します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:253
msgid "`@GraphQLApi` annotation indicates that the CDI bean will be a GraphQL endpoint"
msgstr "`@GraphQLApi` アノテーションは、CDI BeanがGraphQLのエンドポイントになることを示しています。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:254
msgid "`@Query` annotation defines that this method will be queryable with the name `allFilms`"
msgstr "`@Query` アノテーションは、このメソッドが `allFilms` という名前でクエリー可能であることを定義します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:255
msgid "Documentation of the queryable method"
msgstr "クエリー可能なメソッドのドキュメントです。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:260
msgid "This way we have created our first queryable API which we will later expand."
msgstr "このようにして、最初のクエリー可能なAPIが作成されましたが、これは後に拡張されます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:261
#, no-wrap
msgid "Launch"
msgstr "起動"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:264
msgid "Launch the quarkus application in dev mode:"
msgstr "quarkusアプリを開発モードで起動します:"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:267
#, no-wrap
msgid "Introspect"
msgstr "イントロスペクト"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:270
msgid "The full schema of the GraphQL API can be retrieved by calling the following:"
msgstr "GraphQL APIの完全なスキーマは、以下を呼び出すことで取得できます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:277
msgid "The server will return the complete schema of the GraphQL API."
msgstr "サーバーは、GraphQL APIの完全なスキーマを返します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:279
#, no-wrap
msgid "GraphiQL UI"
msgstr "GraphiQL UI"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:282
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:690
msgid "Experimental - not included in the MicroProfile specification"
msgstr "実験的 - MicroProfileの仕様に含まれない"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:284
msgid "GraphiQL UI is a great tool permitting easy interaction with your GraphQL APIs."
msgstr "GraphiQL UIは、GraphQL APIとの簡単なやり取りを可能にする素晴らしいツールです。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:289
msgid "GraphiQL can be accessed from http://localhost:8080/q/graphql-ui/ ."
msgstr "GraphiQLは、 http://localhost:8080/q/graphql-ui/ からアクセスできます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:291
msgid "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"
msgstr "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:293
msgid "Have a look at the link:security-authorization[Authorization of Web Endpoints] Guide on how to add/remove security for the GraphQL UI."
msgstr "GraphQL UIのセキュリティを追加/削除する方法については link:security-authorization[Webエンドポイントの認可] のガイドをご覧ください。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:294
#, no-wrap
msgid "Query the GraphQL API"
msgstr "GraphQL APIへのクエリー"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:297
msgid "Now visit the GraphiQL page that has been deployed in `dev` mode."
msgstr "それでは、 `dev` モードで展開されたGraphiQLページにアクセスしてみましょう。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:299
msgid "Enter the following query to GraphiQL and press the `play` button:"
msgstr "以下のクエリをGraphiQLに入力し、 `play` ボタンを押します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:322
msgid "Enter the following query into GraphiQL and hit the `play` button:"
msgstr "以下のクエリをGraphiQLに入力し、 `play` ボタンを押します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:356
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:557
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:676
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:766
msgid "Enter the following into `GraphiQL` and make a request."
msgstr "`GraphiQL` に以下の内容を入力してリクエストしてください。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:378
msgid "In GraphQL, it is possible to make multiple queries at once."
msgstr "GraphQLでは、一度に複数のクエリを実行することが可能です。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:380
msgid "Enter the following into GraphiQL to retrieve two films:"
msgstr "以下をGraphiQLに入力して、2つの映画を検索します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:400
msgid "This enabled the client to fetch the required data in a single request."
msgstr "これにより、クライアントは1回のリクエストで必要なデータを取得できるようになりました。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:401
#, no-wrap
msgid "Expanding the API"
msgstr "APIの拡張"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:407
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:665
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:755
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:792
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:901
msgid "Add the following to our `FilmResource` class:"
msgstr "`FilmResource` のクラスに以下を追加します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:416
msgid "Enable `List<Hero>` data to be added to queries that respond with `Film`"
msgstr "`Film` で応答するクエリに `List<Hero>` データを追加できるようになりました。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:422
msgid "Enter the following into GraphiQL to retrieve the film and hero data."
msgstr "GraphiQLに以下のように入力して、フィルムとヒーローのデータを取得します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:443
msgid "The response now includes the heroes of the film."
msgstr "今や、レスポンスには映画のヒーローたちも含まれています。"

#. type: Title ===
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:444
#, no-wrap
msgid "Batching"
msgstr "バッチ処理"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:457
msgid "Here receive the films as a batch, allowing you to fetch the corresponding heroes."
msgstr "ここでは、映画を一括して受け取ることで、対応するヒーローを取り出すことができます。"

#. type: Title ===
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:458
#, no-wrap
msgid "Non blocking"
msgstr "ノンブロッキング"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:461
msgid "Queries can be made reactive by using `Uni` as a return type, or adding `@NonBlocking` to the method:"
msgstr "クエリは、例えば `Uni` を戻り値の型として使用するか、 `@NonBlocking` をメソッドに付与することでリアクティブにすることができます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:473
msgid "Or you can use `@NonBlocking`:"
msgstr "または、 `@NonBlocking` を使用することもできます:"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:485
msgid "Using `Uni` or `@NonBlocking` means that the request will be executed on Event-loop threads rather than Worker threads."
msgstr "`Uni` または `@NonBlocking` を使用すると、リクエストは Worker スレッドではなく Event-loop スレッドで実行されます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:487
msgid "You can mix Blocking and Non-blocking in one request,"
msgstr "BlockingとNon-blockingを1つのリクエストに混ぜることができます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:503
msgid "Above will fetch the film on the event-loop threads, but switch to the worker thread to fetch the heroes."
msgstr "上記では、イベントループのスレッドで映画を取得しますが、ヒーローを取得するためにワーカスレッドに切り替えます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:504
#, no-wrap
msgid "Abstract Types"
msgstr "抽象型"

#. type: Title ===
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:510
#, no-wrap
msgid "Interfaces"
msgstr "インターフェイス"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:513
msgid "Let's give our heroes some allies."
msgstr "ヒーローに味方をつけてみましょう。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:515
msgid "First, create a new entity to represent our `Ally`."
msgstr "まず、 `Ally` を表すエンティティを新規に作成します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:527
msgid "Update the `GalaxyService` to have some allies."
msgstr "`GalaxyService` を更新して、味方がいるようにします。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:547
msgid "Let's also update `FilmResource` to allow clients to query for all allies:"
msgstr "また、 `FilmResource` を更新して、クライアントがすべての味方を照会できるようにしましょう。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:572
msgid "Create a new Java interface that defines our common character traits."
msgstr "私たちの共通のキャラクターの特徴を定義した新しいJavaインタフェースを作成します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:584
msgid "Getters defined in an interface will define the GraphQL fields that it contains"
msgstr "インターフェイスで定義されたゲッターは、それが含むGraphQLフィールドを定義します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:586
msgid "Now, update our `Hero` and `Ally` entities to implement this interface."
msgstr "さて、このインタフェースを実装するために、 `Hero` と `Ally` のエンティティを更新します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:619
msgid "Because interfaces can't define fields, we have to implement the getters"
msgstr "インターフェースはフィールドを定義できないので、ゲッターを実装する必要があります。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:647
msgid "The `Character` interface was defined with the getters as fields"
msgstr "ゲッターをフィールドとする `Character` インターフェイスが定義されました。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:648
msgid "The `Ally` type was added and it implements `Character`"
msgstr "`Ally` 型が追加され、 `Character` を実装しています。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:649
msgid "The `Hero` type was updated to implement `Character`"
msgstr "`Hero` 型を更新して `Character` を実装しました。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:651
msgid "Update our `GalaxyService` to provide all characters."
msgstr "全キャラクターを提供するために、 `GalaxyService` を更新します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:663
msgid "Now we can allow clients to query for all characters, not just heroes."
msgstr "これで、クライアントがヒーローだけでなく、すべてのキャラクターをクエリできるようになりました。"

#. type: Title ===
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:687
#, no-wrap
msgid "Unions"
msgstr "ユニオン"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:696
msgid "First, create this new abstract type representing the possible return types for a search result."
msgstr "まず、検索結果の返り値を表す新しい抽象型を作成します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:710
msgid "`@Union` is required to indicate this Java interface represents a GraphQL union, not a GraphQL interface"
msgstr "`@Union` は、このJavaインターフェースが、GraphQLインターフェースではなく、GraphQLユニオンを表していることを示すために必要です。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:715
msgid "Update our entities to implement `SearchResult`:"
msgstr "`SearchResult` を実装するためにエンティティを更新します:"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:735
msgid "Update `GalaxyService` to provide search:"
msgstr "`GalaxyService` を更新し、検索を提供します:"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:784
msgid "We are able to use the `Character` interface because the `SearchResult` union contains members that implement it."
msgstr "`Character` インターフェースを使用できるのは、 `SearchResult` ユニオンにそれを実装したメンバが含まれているからです。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:785
#, no-wrap
msgid "Mutations"
msgstr "ミューテーション"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:788
msgid "Mutations are used when data is created, updated or deleted."
msgstr "ミューテーションは、データの作成、更新、削除の際に使用されます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:790
msgid "Let's now add the ability to add and delete heroes to our GraphQL API."
msgstr "それでは、GraphQL APIにヒーローの追加と削除の機能を追加してみましょう。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:808
msgid "Enter the following into `GraphiQL` to insert a `Hero`:"
msgstr "`GraphiQL` に次のように入力すると、 `Hero` が挿入されます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:829
msgid "By using this mutation we have created a `Hero` entity in our service."
msgstr "このミューテーションを利用することで、私たちのサービスに `Hero` エンティティを作成しました。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:836
msgid "Let's now try deleting an entry:"
msgstr "それでは、エントリーを削除してみましょう。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:850
#, no-wrap
msgid "Subscriptions"
msgstr "サブスクリプション"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:856
msgid "Example: We want to know when new Heroes are being created:"
msgstr "例: 新しいヒーローが作成されるタイミングを知りたい。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:877
msgid "The `Multi` processor that will broadcast any new ``Hero``es"
msgstr "新しい``Hero``をブロードキャストする `Multi` プロセッサー"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:878
msgid "When adding a new `Hero`, also broadcast it"
msgstr "新しいヒーローの追加時に、ブロードキャストも行います"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:879
msgid "Make the stream available in the schema and as a WebSocket during runtime"
msgstr "実行時にスキーマ内で、WebSocketとしてストリームを利用できるようにする"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:882
msgid "Any client that now connect to the `/graphql` WebSocket connection will receive events on new Heroes being created:"
msgstr "現在、 `/graphql` WebSocket接続に接続しているすべてのクライアントは、新しいHeroが作成されたときにイベントを受け取ります。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:895
#, no-wrap
msgid "Creating Queries by fields"
msgstr "フィールド別のクエリの作成"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:914
msgid "Test the following queries with GraphiQL:"
msgstr "以下のクエリをGraphiQLでテストしてみましょう。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:933
#, no-wrap
msgid "Context"
msgstr "コンテキスト"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:936
msgid "You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:"
msgstr "この実験的なSmallRye固有の機能を使えば、コードのどこにいてもGraphQLリクエストの情報を得ることができます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:944
msgid "or as a parameter in your method if you are in the `GraphQLApi` class, for instance:"
msgstr "または、 `GraphQLApi` クラスであれば、メソッドのパラメータとして使用します。例:"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:955
msgid "The context object allows you to get:"
msgstr "コンテキストオブジェクトによって、以下を取得することができます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:957
msgid "the original request (Query/Mutation)"
msgstr "オリジナルのリクエスト(Query/Mutation)"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:958
msgid "the arguments"
msgstr "引数"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:959
msgid "the path"
msgstr "パス"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:960
msgid "the selected fields"
msgstr "選択されたフィールド"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:961
msgid "any variables"
msgstr "任意の変数"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:963
msgid "This allows you to optimize the downstream queries to the datastore."
msgstr "これにより、データストアへのダウンストリームクエリを最適化することができます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:965
msgid "See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details."
msgstr "詳細は link:https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] を参照してください。"

#. type: Title ===
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:966
#, no-wrap
msgid "GraphQL-Java"
msgstr "GraphQL-Java"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:969
msgid "This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:"
msgstr "また、このコンテキストオブジェクトは、リーキーな抽象化を利用することで、基礎となる https://www.graphql-java.com/[graphql-java] の機能にフォールダウンすることを可能にします。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:976
msgid "You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:"
msgstr "また、スキーマ生成時に基盤となる `graphql-java` にアクセスして、独自の機能を直接追加することもできます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:993
msgid "By using the `@Observer` you can add anything to the Schema builder."
msgstr "`@Observer` を使用することで、スキーマビルダーに何かを追加することができます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:995
msgid "For the Observer to work, you need to enable events. In `application.properties`, add the following: `quarkus.smallrye-graphql.events.enabled=true`."
msgstr "Observerを動作させるには、イベントを有効にする必要があります。 `application.properties` で、以下を追加します: `quarkus.smallrye-graphql.events.enabled=true` 。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:996
#, no-wrap
msgid "Adapting"
msgstr "変換"

#. type: Title ===
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:998
#, no-wrap
msgid "Adapt to Scalar"
msgstr "スカラーへの変換"

#. type: Title ====
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1003
#, no-wrap
msgid "Adapting an existing Scalar to another type:"
msgstr "既存のスカラーを別のタイプに変換します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1017
msgid "Above will adapt the `Long` java type to an `Int` Scalar type, rather than the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`."
msgstr "上記では、 `Long` java型を、 link:https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[デフォルト] の `BigInteger` ではなく、 `Int` スカラー型に変換しています。"

#. type: Title ====
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1018
#, no-wrap
msgid "Adapting a complex object to a Scalar type:"
msgstr "複雑なオブジェクトをスカラー型にマッピングします:"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1032
msgid "This will, rather than creating a `Type` or `Input` in GraphQL, map to a String scalar."
msgstr "これは、GraphQLで `Type` や `Input` を作成するのではなく、Stringのスカラーにマッピングされます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1038
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1064
msgid "For example:"
msgstr "例えば、以下のようになります:"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1056
msgid "See more about the `@AdaptToScalar` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptToScalar.html[JavaDoc]."
msgstr "`@ToScalar` の機能については、 link:https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.0.6/index.html?io/smallrye/graphql/api/ToScalar.html[JavaDoc] を参照してください。"

#. type: Title ===
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1057
#, no-wrap
msgid "Adapt with"
msgstr "AdaptWithによる変換"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1060
msgid "Another option for more complex cases is to provide an Adapter. You can then do the mapping yourself in the adapter."
msgstr "より複雑なケースには、アダプターを用意するという方法もあります。そうすれば、アダプターの中で自分でマッピングを行うことができます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1062
msgid "See more about the `AdaptWith` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptWith.html[JavaDoc]."
msgstr "`AdaptWith` の機能については、 https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptWith.html[JavaDoc] を参照してください。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1097
msgid "`@JsonbTypeAdapter` is also supported."
msgstr " `@JsonbTypeAdapter` もサポートされています。"

#. type: Title ===
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1098
#, no-wrap
msgid "Built-in support for Maps"
msgstr "Map の組込サポート"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1105
msgid "Example:"
msgstr "例:"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1134
msgid "The key and value object can be any of Enum, Scalar or Complex object"
msgstr "キーと値のオブジェクトは、 Enum 、 Scalar 、 Complex のいずれかを指定します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1136
msgid "You can now query the whole map with all the fields:"
msgstr "これで、すべてのフィールドを含むマップ全体のクエリーが可能になりました:"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1154
msgid "This will return a result like this for example:"
msgstr "これは、例えばこのような結果を返します:"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1206
msgid "You can also query by key"
msgstr "キーによるクエリも可能です"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1220
msgid "That will return only that value in the map:"
msgstr "そうすると、マップの中のその値だけが返されます:"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1238
msgid "The default map adapter can to overridden with our own implementation."
msgstr "デフォルトのマップアダプタは、独自の実装でオーバーライドすることができます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1239
#, no-wrap
msgid "Error code"
msgstr "エラーコード"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1242
msgid "You can add an error code on the error output in the GraphQL response by using the (SmallRye specific) `@ErrorCode`:"
msgstr "(SmallRye特有の) `@ErrorCode` を使用することで、GraphQLレスポンスのエラー出力にエラーコードを追加することができます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1252
msgid "When `SomeBusinessException` occurs, the error output will contain the Error code:"
msgstr "`SomeBusinessException` が発生した場合、エラー出力にはエラーコードが表示されます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1282
msgid "The error code"
msgstr "エラーコード"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1283
#, no-wrap
msgid "Additional Notes"
msgstr "その他の注意事項"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1305
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Title ==
#: upstream/_versions/2.13/guides/smallrye-graphql.adoc:1314
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"
