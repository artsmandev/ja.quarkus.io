msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Apache Cassandra® is a free and open-source, distributed, wide column store, NoSQL database\n"
"management system designed to handle large amounts of data across many commodity servers, providing\n"
"high availability with no single point of failure."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"A running link:https://cassandra.apache.org[Apache Cassandra],\n"
"link:https://www.datastax.fr/products/datastax-enterprise[DataStax Enterprise] (DSE) or\n"
"link:https://astra.datastax.com[DataStax Astra] database; or alternatively, a fresh Docker\n"
"installation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"This quickstart guide shows how to build a REST application using the\n"
"link:https://github.com/datastax/cassandra-quarkus[Cassandra Quarkus extension], which allows you to\n"
"connect to an Apache Cassandra, DataStax Enterprise (DSE) or DataStax Astra database, using the\n"
"link:https://docs.datastax.com/en/developer/java-driver/latest[DataStax Java driver]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"This guide will also use the\n"
"link:https://docs.datastax.com/en/developer/java-driver/latest/manual/mapper[DataStax Object Mapper]\n"
"– a powerful Java-to-CQL mapping framework that greatly simplifies your application's data access\n"
"layer code by sparing you the hassle of writing your CQL queries by hand."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The application built in this quickstart guide is quite simple: the user can add elements in a list\n"
"using a form, and the items list is updated. All the information between the browser and the server\n"
"is formatted as JSON, and the elements are stored in the Cassandra database."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step\n"
"by step. However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The solution is located in the\n"
"link:https://github.com/datastax/cassandra-quarkus/tree/main/quickstart[quickstart directory] of\n"
"the Cassandra Quarkus extension GitHub repository."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"First, create a new Maven project and copy the `pom.xml` file that is present in the `quickstart`\n"
"directory."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"As stated above, we are using the DataStax Object Mapper. In other words, we are not going to write\n"
"our CQL queries manually; instead, we will annotate our data model with a few annotations, and the\n"
"mapper will generate proper CQL queries underneath."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"This is why the `Fruit` class is annotated with `@Entity`: this annotation marks it as an _entity\n"
"class_ that is mapped to a Cassandra table. Its instances are meant to be automatically persisted\n"
"into, and retrieved from, the Cassandra database. Here, the table name will be inferred from the\n"
"class name: `fruit`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Also, the `name` field represents a Cassandra partition key, and so we are annotating it with\n"
"`@PartitionKey` – another annotation from the Object Mapper library."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Entity classes are normally required to have a default no-arg constructor, unless they\n"
"are annotated with `@PropertyStrategy(mutable = false)`, which is the case here."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The next step is to create a DAO (Data Access Object) interface that will manage instances of\n"
"`Fruit` entities:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"This interface exposes operations that will be used in our REST service. Again, the annotation\n"
"`@Dao` comes from the DataStax Object Mapper, which will also automatically generate an\n"
"implementation of this interface for you."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Note also the special return type of the `findAll` method,\n"
"link:https://docs.datastax.com/en/drivers/java/latest/com/datastax/oss/driver/api/core/PagingIterable.html[`PagingIterable`]:\n"
"it's the base type of result sets returned by the driver."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The `@Mapper` annotation is yet another annotation recognized by the DataStax Object Mapper. A\n"
"mapper is responsible for constructing instances of DAOs – in this case, out mapper is constructing\n"
"an instance of our only DAO, `FruitDao`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Now let's create a `FruitService` that will be the business layer of our application and store/load\n"
"the fruits from the Cassandra database."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Note how the service is being injected a `FruitDao` instance. This DAO instance is injected\n"
"automatically."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The Cassandra Quarkus extension allows you to inject any of the following beans in your own\n"
"components:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"All `@Dao`-annotated interfaces in your project, as long as they are produced by a corresponding\n"
"`@DaoFactory`-annotated method declared in a mapper interface from your project."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The\n"
"link:https://javadoc.io/doc/com.datastax.oss.quarkus/cassandra-quarkus-client/latest/com/datastax/oss/quarkus/runtime/api/session/QuarkusCqlSession.html[`QuarkusCqlSession`]\n"
"bean: this application-scoped, singleton bean is your main entry point to the Cassandra client; it\n"
"is a specialized Cassandra driver session instance with a few methods tailored especially for\n"
"Quarkus. Read its javadocs carefully!"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"In our example, both `FruitMapper` and `FruitDao` could be injected anywhere. We chose to inject\n"
"`FruitDao` in `FruitService`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"It is generally not recommended using the same entity object between the REST API and the data\n"
"access layer. These layers should indeed be decoupled and use distinct APIs in order to allow each\n"
"API to evolve independently of the other. This is the reason why our REST API is using a different\n"
"object: the `FruitDto` class – the word DTO stands for \"Data Transfer Object\". This DTO object will\n"
"be automatically converted to and from JSON in HTTP messages:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The translation to and from JSON is done automatically by the Quarkus RESTEasy Reactive extension, which is\n"
"included in this guide's pom.xml file. If you want to add it manually to your application, add the\n"
"below snippet to your application's ppm.xml file:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"DTO classes used by the JSON serialization layer are required to have a default no-arg\n"
"constructor."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The conversion from DTO to JSON is handled automatically for us, but we still must convert from\n"
"`Fruit` to `FruitDto` and vice versa. This must be done manually, which is why we have two\n"
"conversion methods declared in `FruitResource`: `convertToDto` and `convertFromDto`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"In our example, `Fruit` and `FruitDto` are very similar, so you might wonder why not use\n"
"`Fruit` everywhere. In real life cases though, it's not uncommon to see DTOs and entities having\n"
"very different structures."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The main properties to configure are: `contact-points`, to access the Cassandra database;\n"
"`local-datacenter`, which is required by the driver; and – optionally – the keyspace to bind to."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"In this example, we are using a single instance running on localhost, and the keyspace containing\n"
"our data is `k1`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"If your cluster requires plain text authentication, you must also provide two more settings:\n"
"`username` and `password`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"When connecting to link:https://astra.datastax.com[DataStax Astra], instead of providing a contact\n"
"point and a datacenter, you should provide a so-called _secure connect bundle_, which should point\n"
"to a valid path to an Astra secure connect bundle file. You can download your secure connect bundle\n"
"from the Astra web console."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"You will also need to provide a username and password, since authentication is always required on\n"
"Astra clusters."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"You can configure other Java driver settings using `application.conf` or `application.json` files.\n"
"They need to be located in the classpath of your application. All settings will be passed\n"
"automatically to the underlying driver configuration mechanism. Settings defined in\n"
"`application.properties` with the `quarkus.cassandra` prefix will have priority over settings\n"
"defined in `application.conf` or `application.json`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"To see the full list of settings, please refer to the\n"
"link:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/[driver\n"
"settings reference]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"By default, the Cassandra client is configured to access a local Cassandra database on port 9042\n"
"(the default Cassandra port)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Make sure that the setting `quarkus.cassandra.local-datacenter` matches the datacenter of\n"
"your Cassandra cluster."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"If you don't know the name of your local datacenter, this value can be found by running the\n"
"following CQL query: `SELECT data_center FROM system.local`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"If you want to use Docker to run a Cassandra database, you can use the following command to launch\n"
"one in the background:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Next you need to create the keyspace and table that will be used by your application. If you are\n"
"using Docker, run the following commands:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Quarkus automatically serves static resources located under the `META-INF/resources` directory. In\n"
"the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the contents\n"
"from link:src/main/resources/META-INF/resources/fruits.html[this file] in it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The\n"
"link:https://javadoc.io/doc/com.datastax.oss.quarkus/cassandra-quarkus-client/latest/com/datastax/oss/quarkus/runtime/api/session/QuarkusCqlSession.html[`QuarkusCqlSession`\n"
"interface] gives you access to a series of reactive methods that integrate seamlessly with Quarkus\n"
"and its reactive framework, Mutiny."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Note the usage of `MutinyMappedReactiveResultSet` - it is a specialized `Mutiny` type converted from\n"
"the original `Publisher` returned by the driver, which also exposes a few extra methods, e.g. to\n"
"obtain the query execution info. If you don't need anything in that interface, you can also simply\n"
"declare your method to return `Multi`: `Multi<Fruit> findAll()`,"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Similarly, the method `updateAsync` returns a `Uni` - it is automatically converted from the\n"
"original result set returned by the driver."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The Cassandra driver uses the Reactive Streams `Publisher` API for reactive calls. The Quarkus\n"
"framework however uses Mutiny. Because of that, the `CqlQuarkusSession` interface transparently\n"
"converts the `Publisher` instances returned by the driver into the reactive type `Multi`.\n"
"`CqlQuarkusSession` is also capable of converting a `Publisher` into a `Uni` – in this case, the\n"
"publisher is expected to emit at most one row, then complete. This is suitable for write queries\n"
"(they return no rows), or for read queries guaranteed to return one row at most (count queries, for\n"
"example)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The above resource is exposing a new endpoint, `reactive-fruits`. Its capabilities are identical to\n"
"the ones that we created before with `FruitResource`, but everything is handled in a reactive\n"
"fashion, without any blocking operation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The `getAll()` method above returns `Multi`, and the `add()` method returns `Uni`. These types\n"
"are the same Mutiny types that we met before; they are automatically recognized by the Quarkus\n"
"reactive REST API, so we don't need to convert them into JSON ourselves."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"This dependency is already included in this guide's pom.xml, but if you are starting a new project\n"
"from scratch, make sure to include it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Run the application in dev mode as explained above, then you can use curl commands to interact with\n"
"the underlying REST API."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Now let's add a simple web page to interact with our `ReactiveFruitResource`. In the\n"
"`src/main/resources/META-INF/resources` directory, add a `reactive-fruits.html` file with the\n"
"contents from link:src/main/resources/META-INF/resources/reactive-fruits.html[this file] in it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"If you are using the Quarkus SmallRye Health extension, then the Cassandra client will automatically\n"
"add a readiness health check to validate the connection to the Cassandra cluster. This extension is\n"
"already included in this guide's pom.xml, but if you need to include it manually in your\n"
"application, add the following:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"When health checks are available, you can access the `/health/ready` endpoint of your application\n"
"and have information about the connection validation status."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Running in dev mode with `mvn clean quarkus:dev`, if you point your browser to\n"
"http://localhost:8080/health/ready you should see an output similar to the following one:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"If you need health checks globally enabled in your application, but don't want to activate\n"
"Cassandra health checks, you can disable Cassandra health checks by setting the\n"
"`quarkus.cassandra.health.enabled` property to `false` in your `application.properties`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The Cassandra Quarkus client can provide metrics about the Cassandra session and about individual\n"
"Cassandra nodes. It supports both Micrometer and MicroProfile."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The first step to enable metrics is to add a few additional dependencies depending on the metrics\n"
"framework you plan to use."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Even when metrics are enabled in your application, the Cassandra client will not report any metrics,\n"
"unless you opt in for this feature. So your next step is to enable Cassandra metrics in your\n"
"`application.properties` file."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The final (and optional) step is to customize which specific Cassandra metrics you would like the\n"
"Cassandra client to track. Several metrics can be tracked; if you skip this step, a default set of\n"
"useful metrics will be automatically tracked."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"For the full list of available metric names, please refer to the\n"
"link:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/[driver\n"
"settings reference] page; search for the `advanced.metrics` section.\n"
"Also, Cassandra driver metrics are covered in detail in the\n"
"https://docs.datastax.com/en/developer/java-driver/latest/manual/core/metrics/[driver manual]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"`quarkus.cassandra.metrics.session.enabled` should contain the session-level metrics to enable\n"
"(metrics that are global to the session)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"`quarkus.cassandra.metrics.node.enabled` should contain the node-level metrics to enable (metrics\n"
"for which each node contacted by the Cassandra client gets its own metric value)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"This guide's `application.properties` file has already many metrics enabled; you can use its metrics\n"
"list as a good starting point for exposing useful Cassandra metrics in your application."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"When metrics are properly enabled, metric reports for all enabled metrics are available at the\n"
"`/metrics` REST endpoint of your application."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Running in dev mode with `mvn clean quarkus:dev`, if you point your browser to\n"
"`http://localhost:8080/metrics` you should see a list of metrics; search for metrics whose names\n"
"contain `cassandra`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"For Cassandra metrics to show up, the Cassandra client needs to be initialized and\n"
"connected; if you are using lazy initialization (see below), you won't see any Cassandra metrics\n"
"until your application actually connects and hits the database for the first time."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"If you installed GraalVM, you can link:https://quarkus.io/guides/building-native-image[build a\n"
"native image] using:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Beware that native compilation can take a significant amount of time! Once the compilation is done,\n"
"you can run the native executable as follows:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"The most straightforward approach is obviously to inject `QuarkusCqlSession` directly. This should\n"
"work just fine for most applications; however, the `QuarkusCqlSession` bean needs to be initialized\n"
"before it can be used, and this process is blocking."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Fortunately, it is possible to control when the initialization should happen: the\n"
"`quarkus.cassandra.init.eager-init` parameter determines if the `QuarkusCqlSession` bean should be\n"
"initialized on its first access (lazy) or when the application is starting (eager). The default\n"
"value of this parameter is `false`, meaning the init process is lazy: the `QuarkusCqlSession` bean\n"
"will be initialized lazily on its first access – for example, when there is a first REST request\n"
"that needs to interact with the Cassandra database."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Using lazy initialization speeds up your application startup time, and avoids startup failures if\n"
"the Cassandra database is not available. However, it could also prove dangerous if your code is\n"
"fully asynchronous, e.g. if you are using https://quarkus.io/guides/reactive-routes[reactive\n"
"routes]: indeed, the lazy initialization could accidentally happen on a thread that is not allowed\n"
"to block, such as a Vert.x event loop thread. Therefore, setting `quarkus.cassandra.init.eager-init`\n"
"to `false` and injecting `QuarkusCqlSession` should be avoided in these contexts."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"If you want to use Vert.x (or any other reactive framework) and keep the lazy initialization\n"
"behavior, you should instead inject only `CompletionStage<QuarkusCqlSession>` or\n"
"`Uni<QuarkusCqlSession>`. When injecting these beans, the initialization process will be triggered\n"
"lazily, but it will happen in the background, in a non-blocking way, leveraging the Vert.x event\n"
"loop. This way you don't risk blocking the Vert.x thread."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Alternatively, you can set `quarkus.cassandra.init.eager-init` to true: in this case the session\n"
"bean will be initialized eagerly during application startup, on the Quarkus main thread. This would\n"
"eliminate any risk of blocking a Vert.x thread, at the cost of making your startup time (much)\n"
"longer."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/2.13/guides/cassandra.adoc
msgid ""
"Accessing a Cassandra database from a client application is easy with Quarkus and the Cassandra\n"
"extension, which provides configuration and native support for the DataStax Java driver for Apache\n"
"Cassandra."
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.13/guides/cassandra.adoc:6
#, no-wrap
msgid "Using the Cassandra Client"
msgstr "Cassandra クライアントの使用"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:16
msgid "In this guide, we will see how you can get your REST services to use a Cassandra database."
msgstr "このガイドでは、RESTサービスでCassandraデータベースを使用する方法を見ていきます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:27
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:43
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:52
#, no-wrap
msgid "Creating a Blank Maven Project"
msgstr "空白の Maven プロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:58
msgid "The `pom.xml` is importing all the Quarkus extensions and dependencies you need."
msgstr "`pom.xml` 、必要なQuarkusのエクステンションや依存関係をすべてインポートしています。"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:59
#, no-wrap
msgid "Creating the Data Model and Data Access Objects"
msgstr "データモデルとデータアクセスオブジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:62
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "この例では、フルーツのリストを管理するアプリケーションを作成します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:64
msgid "First, let's create our data model – represented by the `Fruit` class – as follows:"
msgstr "まず、以下のように `Fruit` クラスであらわされるデータモデルを作成してみましょう。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:123
msgid "Finally, let's create the Mapper interface:"
msgstr "最後に、マッパーインターフェイスを作成しましょう:"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:137
#, no-wrap
msgid "Creating a Service & JSON REST Endpoint"
msgstr "サービスと JSONREST エンドポイントの作成"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:166
msgid "All `@Mapper`-annotated interfaces in your project."
msgstr "プロジェクト内にある `@Mapper` アノテーション付きインターフェイスすべて。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:178
msgid "The last missing piece is the REST API that will expose GET and POST methods:"
msgstr "最後に必要なのは、GETとPOSTのメソッドを公開するREST APIです。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:209
msgid "Notice how `FruitResource` is being injected a `FruitService` instance automatically."
msgstr "`FruitResource` が `FruitService` インスタンスを自動的に注入していることに注目してください。"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:260
#, no-wrap
msgid "Connecting to the Cassandra Database"
msgstr "Cassandra データベースへの接続"

#. type: Title ===
#: upstream/_versions/2.13/guides/cassandra.adoc:262
#, no-wrap
msgid "Connecting to Apache Cassandra or DataStax Enterprise (DSE)"
msgstr "ApacheCassandra または DataStaxEnterprise (DSE) への接続"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:268
msgid "A sample configuration should look like this:"
msgstr "設定のサンプルは以下のようになります:"

#. type: Title ===
#: upstream/_versions/2.13/guides/cassandra.adoc:295
#, no-wrap
msgid "Connecting to a DataStax Astra Cloud Database"
msgstr "DataStaxAstra クラウドデータベースへの接続"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:306
msgid "A sample configuration for DataStax Astra should look like this:"
msgstr "DataStax Astraのサンプル構成は次のようになります。"

#. type: Title ===
#: upstream/_versions/2.13/guides/cassandra.adoc:315
#, no-wrap
msgid "Advanced Driver Configuration"
msgstr "高度なドライバー設定"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:327
#, no-wrap
msgid "Running a Local Cassandra Database"
msgstr "ローカル Cassandra データベースの実行"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:356
msgid "You can also use the CQLSH utility to interactively interrogate your database:"
msgstr "CQLSH ユーティリティーを使用して、データベースに対話式に問い合わせることもできます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:362
#, no-wrap
msgid "Testing the REST API"
msgstr "REST API のテスト"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:365
msgid "In the project root directory:"
msgstr "プロジェクトのルートディレクトリー:"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:367
msgid "Run `mvn clean package` and then `java -jar ./target/cassandra-quarkus-quickstart-*-runner.jar` to start the application;"
msgstr "`mvn clean package` を実行してから、 `java -jar./target/cassandra-quarkus-quickstart-*-runner.jar` を実行してアプリケーションを起動します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:368
msgid "Or better yet, run the application in dev mode: `mvn clean quarkus:dev`."
msgstr "または、`mvn clean quarkus:dev` でアプリケーションを開発モードで実行します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:370
msgid "Now you can use curl commands to interact with the underlying REST API."
msgstr "これで、curl コマンドを使用して、基盤となる REST API と対話できます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:372
msgid "To create a fruit:"
msgstr "fruit を作成するには以下を実行します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:382
msgid "To retrieve fruits:"
msgstr "Fruit を回収するには以下を実行します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:388
#, no-wrap
msgid "Creating a Frontend"
msgstr "フロントエンドの作成"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:391
msgid "Now let's add a simple web page to interact with our `FruitResource`."
msgstr "それでは、 `FruitResource` と対話するためのシンプルなウェブページを追加してみましょう。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:397
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました:"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:399
#: upstream/_versions/2.13/guides/cassandra.adoc:554
msgid "If you haven't done yet, start your application with `mvn clean quarkus:dev`;"
msgstr "まだの場合は、 `mvn clean quarkus:dev` を使用してアプリケーションを起動します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:400
msgid "Point your browser to `http://localhost:8080/fruits.html`;"
msgstr "ブラウザーで `http://localhost:8080/fruits.html` を指定します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:401
#: upstream/_versions/2.13/guides/cassandra.adoc:556
msgid "Add new fruits to the list via the form."
msgstr "フォームを使って新しいフルーツをリストに追加します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:403
#, no-wrap
msgid "Reactive Programming with the Cassandra Client"
msgstr "Cassandra クライアントを使用したリアクティブプログラミング"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:411
msgid "If you are not familiar with Mutiny, please check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Mutinyに慣れていない方は、 link:mutiny-primer.html[Mutiny - 直感的なリアクティブプログラミングライブラリ]をご覧ください。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:413
msgid "Let's rewrite our application using reactive programming with Mutiny."
msgstr "Mutiny でリアクティブプログラミングを使用してアプリケーションを書き換えてみましょう。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:415
msgid "First, let's declare another DAO interface that works in a reactive way:"
msgstr "まず、リアクティブな方法で機能する別の DAO インターフェイスを宣言しましょう:"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:447
msgid "Next, we need to adapt the `FruitMapper` to construct a `ReactiveFruitDao` instance:"
msgstr "次に、 `FruitMapper` を適応させて、 `ReactiveFruitDao` インスタンスを構築する必要があります。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:461
msgid "Now, we can create a `ReactiveFruitService` that leverages our reactive DAO:"
msgstr "これで、リアクティブ DAO を活用する `ReactiveFruitService` を作成できます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:480
msgid "Finally, we can create a `ReactiveFruitResource`:"
msgstr "最後に、 `ReactiveFruitResource` を作成できます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:519
msgid "RESTEasy Reactive natively supports the Mutiny reactive types e.g. `Uni` and `Multi`."
msgstr "RESTEasy Reactive は、 `Uni` や `Multi` などの Mutiny リアクティブタイプをネイティブにサポートします。"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:523
#, no-wrap
msgid "Testing the Reactive REST API"
msgstr "リアクティブ REST API のテスト"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:529
msgid "To create a fruit using the reactive REST endpoint:"
msgstr "リアクティブ REST エンドポイントを使用して fruit を作成するには以下を実行します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:539
msgid "To retrieve fruits with the reactive REST endpoint:"
msgstr "リアクティブ REST エンドポイントを使用して fruit を取得するには以下を実行します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:545
#, no-wrap
msgid "Creating a Reactive Frontend"
msgstr "リアクティブなフロントエンドの作成"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:552
msgid "You can now interact with your reactive REST service:"
msgstr "これで、リアクティブな REST サービスと対話できるようになりました。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:555
msgid "Point your browser to `http://localhost:8080/reactive-fruits.html`;"
msgstr "ブラウザーで `http://localhost:8080/reactive-fruits.html` を指定します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:557
#, no-wrap
msgid "Health Checks"
msgstr "ヘルスチェック"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:602
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#. type: Title ===
#: upstream/_versions/2.13/guides/cassandra.adoc:610
#, no-wrap
msgid "Enabling Metrics with Micrometer"
msgstr "Micrometer でのメトリクスの有効化"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:613
msgid "Micrometer is the recommended metrics framework in Quarkus applications."
msgstr "Micrometer は、Quarkus アプリケーションで推奨されるメトリクスフレームワークです。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:615
msgid "To enable Micrometer metrics in your application, you need to add the following to your pom.xml."
msgstr "アプリケーションで Micrometer メトリクスを有効にするには、pom.xml に以下を追加する必要があります。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:629
msgid "This guide uses Micrometer, so the above dependencies are already included in this guide's pom.xml."
msgstr "このガイドでは Micrometer を使用しているため、上記の依存関係はこのガイドの pom.xml にすでに含まれています。"

#. type: Title ===
#: upstream/_versions/2.13/guides/cassandra.adoc:630
#, no-wrap
msgid "Enabling Metrics with MicroProfile Metrics"
msgstr "MicroProfile メトリクスを使用したメトリクスの有効化"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:633
msgid "Remove any dependency to Micrometer from your pom.xml, then add the following ones instead:"
msgstr "pom.xml から Micrometer への依存関係を削除し、代わりに次の依存関係を追加します。"

#. type: Title ===
#: upstream/_versions/2.13/guides/cassandra.adoc:646
#, no-wrap
msgid "Enabling Cassandra Metrics"
msgstr "Cassandra メトリクスの有効化"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:658
msgid "That's it!"
msgstr "以上です!"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:670
msgid "If you do wish to customize which metrics to track, you should use the following properties:"
msgstr "追跡するメトリクスをカスタマイズする場合は、次のプロパティーを使用する必要があります。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:677
msgid "Both properties accept a comma-separated list of valid metric names."
msgstr "どちらのプロパティーにも、有効なメトリクス名をコンマ区切りにした一覧を使用できます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:679
msgid "For example, let's assume that you wish to enable the following three Cassandra metrics:"
msgstr "たとえば、次の 3 つの Cassandra メトリクスを有効にする場合には、以下のとおりです。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:681
msgid "Session-level: `session.connected-nodes` and `session.bytes-sent`;"
msgstr "セッションレベル: `session.connected-nodes` および `session.bytes-sent`;"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:682
msgid "Node-level: `node.pool.open-connections`."
msgstr "ノードレベル: `node.pool.open-connections`。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:684
msgid "Then you should add the following settings to your `application.properties`:"
msgstr "次に、`application.properties` に以下の設定を追加する必要があります。"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:706
#, no-wrap
msgid "Running in native mode"
msgstr "ネイティブモードでの実行"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:725
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開き、アプリケーションを使用します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:726
#, no-wrap
msgid "Eager vs Lazy Initialization"
msgstr "Eager (先行) vs Lazy (遅延) 初期化"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:729
msgid "This extension allows you to inject either:"
msgstr "このエクステンションでは、どちらかを注入することができます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:731
msgid "a `QuarkusCqlSession` bean;"
msgstr "`QuarkusCqlSession` Bean;"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:732
msgid "or the asynchronous version of this bean, that is, `CompletionStage<QuarkusCqlSession>`;"
msgstr "この Bean ( `CompletionStage<QuarkusCqlSession>` ) の非同期バージョン;"

#. type: Plain text
#: upstream/_versions/2.13/guides/cassandra.adoc:733
msgid "or the reactive version of this bean, that is, `Uni<QuarkusCqlSession>`."
msgstr "またはこの Bean のリアクティブバージョン (`Uni<QuarkusCqlSession>`)。"

#. type: Title ==
#: upstream/_versions/2.13/guides/cassandra.adoc:763
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"
