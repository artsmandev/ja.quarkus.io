# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-20 00:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:6
#, no-wrap
msgid "OpenID Connect Client and Token Propagation Quickstart"
msgstr "OpenID Connect Client と Token Propagation のクイックスタート"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:13
msgid "This quickstart demonstrates how to use `OpenID Connect Client Reactive Filter` to acquire and propagate access tokens as `HTTP Authorization Bearer` access tokens, alongside `OpenID Token Propagation Reactive Filter` which propagates the incoming `HTTP Authorization Bearer` access tokens."
msgstr "このクイックスタートでは、`OpenID Connect Client Reactive Filter` を使用して、アクセストークンを `HTTP Authorization Bearer` アクセストークンとして取得および伝播する方法と、受信した `HTTP Authorization Bearer` アクセストークンを伝播する `OpenID Token Propagation Reactive Filter` を使用する方法を示します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:15
msgid "Please check xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide] for all the information related to `Oidc Client` and `Token Propagation` support in Quarkus."
msgstr "Quarkus の `Oidc Client` および `Token Propagation` のサポートに関する詳細は、xref:security-openid-connect-client-reference.adoc[OpenID Connect Client と Token Propagation のリファレンスガイド] を参照してください。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:17
msgid "Please also read xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to protect your applications using Bearer Token Authorization."
msgstr "ベアラートークン認証を使用してアプリケーションを保護する必要がある場合は、xref:security-openid-connect.adoc[OpenID Connect を使用した、サービスアプリケーションの保護] ガイドもお読みください。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:23
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:24
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:27
msgid "In this example, we will build an application which consists of two JAX-RS resources, `FrontendResource` and `ProtectedResource`. `FrontendResource` propagates access tokens to `ProtectedResource` and uses either `OpenID Connect Client Reactive Filter` to acquire a token first before propagating it or `OpenID Token Propagation Reactive Filter` to propagate the incoming, already existing access token."
msgstr "この例では、`FrontendResource` と `ProtectedResource` という 2 つの JAX-RS リソースで構成されるアプリケーションを作成します。FrontendResource` は、`OpenID Connect Client Reactive Filter` を使用してアクセストークンを取得してからそれを伝播するか、`OpenID Token Propagation Reactive Filter` を使用して受信した既存のアクセストークンを伝播して、アクセストークンを `ProtectedResource` に伝播します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:29
msgid "`FrontendResource` has 4 endpoints:"
msgstr "`FrontendResource` には 4 つのエンドポイントがあります。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:31
msgid "`/frontend/user-name-with-oidc-client-token`"
msgstr "`/frontend/user-name-with-oidc-client-token`"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:32
msgid "`/frontend/admin-name-with-oidc-client-token`"
msgstr "`/frontend/admin-name-with-oidc-client-token`"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:33
msgid "`/frontend/user-name-with-propagated-token`"
msgstr "`/frontend/user-name-with-propagated-token`"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:34
msgid "`/frontend/admin-name-with-propagated-token`"
msgstr "`/frontend/admin-name-with-propagated-token`"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:36
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:269
msgid "`FrontendResource` will use REST Client with `OpenID Connect Client Reactive Filter` to acquire and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called. And it will use REST Client with `OpenID Connect Token Propagation Reactive Filter` to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:38
msgid "`ProtecedResource` has 2 endpoints:"
msgstr "`ProtecedResource` には 2 つのエンドポイントがあります。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:40
msgid "`/protected/user-name`"
msgstr "`/protected/user-name`"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:41
msgid "`/protected/admin-name`"
msgstr "`/protected/admin-name`"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:43
msgid "Both of these endpoints return the username extracted from the incoming access token which was propagated to `ProtectedResource` from `FrontendResource`. The only difference between these endpoints is that calling `/protected/user-name` is only allowed if the current access token has a `user` role and calling `/protected/admin-name` is only allowed if the current access token has an `admin` role."
msgstr "これらのエンドポイントはどちらも、`FrontendResource` から `ProtectedResource` に伝搬された受信アクセストークンから抽出したユーザー名を返します。これらのエンドポイントの唯一の違いは、`/protected/user-name` の呼び出しは、現在のアクセストークンが `user` ロールを持つ場合にのみ許可され、`/protected/admin-name` の呼び出しは、現在のアクセストークンが `admin` ロールを持つ場合のみ許可されることです。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:44
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:48
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成していくことをお勧めします。ただし、完成した例にすぐにアクセスすることもできます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:50
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive] をダウンロードする。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:52
msgid "The solution is located in the `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-client-quickstart[directory]."
msgstr "ソリューションは `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-client-quickstart[ディレクトリー] にあります。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:53
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:56
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します:"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:62
msgid "This command generates a Maven project, importing the `oidc`, `oidc-client-reactive-filter`, `oidc-client-reactive-filter` and `resteasy-reactive` extensions."
msgstr "このコマンドは、`oidc`、`oidc-client-reactive-filter`、`oidc-client-reactive-filter`、`resteasy-reactive` エクステンションをインポートして Maven プロジェクトを生成します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:64
msgid "If you already have your Quarkus project configured, you can add these extensions to your project by running the following command in your project base directory:"
msgstr "すでに Quarkus プロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトにこれらのエクステンションを追加できます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:69
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:71
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:89
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"

#. type: Block title
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:92
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:95
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc,oidc-client-reactive-filter,oidc-token-propagation-reactive,resteasy-reactive\")\n"
msgstr "implementation(\"io.quarkus:quarkus-oidc,oidc-client-reactive-filter,oidc-token-propagation-reactive,resteasy-reactive\")\n"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:97
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:100
msgid "Let's start by implementing `ProtectedResource`:"
msgstr "まずは `ProtectedResource` を実装することから始めましょう。"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:104
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:148
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:181
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:218
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:275
#, no-wrap
msgid "package org.acme.security.openid.connect.client;\n"
msgstr "package org.acme.security.openid.connect.client;\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:110
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:113
#, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:115
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr "import org.eclipse.microprofile.jwt.JsonWebToken;\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:119
#, no-wrap
msgid ""
"@Path(\"/protected\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:122
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:130
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    public Uni<String> userName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    public Uni<String> userName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:139
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    public Uni<String> adminName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    public Uni<String> adminName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:142
msgid "As you can see `ProtectedResource` returns a name from both `userName()` and `adminName()` methods. The name is extracted from the current `JsonWebToken`."
msgstr "ご覧のとおり、`ProtectedResource` は `userName()` と `adminName()` の両方のメソッドから名前を返します。この名前は、現在の `JsonWebToken` から抽出されたものです。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:144
msgid "Next let's add a REST Client with `OpenID Connect Client Reactive Filter` and another REST Client with `OpenID Connect Token Propagation Filter`. `FrontendResource` will use these two clients to call `ProtectedResource`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:152
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:185
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:155
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:188
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:158
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:163
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface RestClientWithOidcClientFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:168
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:201
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    Uni<String> getUserName();\n"
msgstr ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    Uni<String> getUserName();\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:174
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:207
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    Uni<String> getAdminName();\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    Uni<String> getAdminName();\n"
"}\n"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:177
msgid "where `RestClientWithOidcClientFilter` will depend on `OidcClientRequestReactiveFilter` to acquire and propagate the tokens and"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:191
#, no-wrap
msgid ""
"import io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""
"import io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:196
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface RestClientWithTokenPropagationFilter {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:210
msgid "where `RestClientWithTokenPropagationFilter` will depend on `AccessTokenRequestReactiveFilter` to propagate the incoming, already existing tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:212
msgid "Note that both `RestClientWithOidcClientFilter` and `RestClientWithTokenPropagationFilter` interfaces are identical - the reason behind it is that combining `OidcClientRequestReactiveFilter` and `AccessTokenRequestReactiveFilter` on the same REST Client will cause side effects as both filters can interfere with other, for example, `OidcClientRequestReactiveFilter` may override the token propagated by `AccessTokenRequestReactiveFilter` or `AccessTokenRequestReactiveFilter` can fail if it is called when no token is available to propagate and `OidcClientRequestReactiveFilter` is expected to acquire a new token instead."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:214
msgid "Now let's complete creating the application with adding `FrontendResource`:"
msgstr "それでは、`FrontendResource` を追加して、アプリケーションの作成を完了しましょう。"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:223
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:225
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:227
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr "import io.smallrye.mutiny.Uni;\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:233
#, no-wrap
msgid ""
"@Path(\"/frontend\")\n"
"public class FrontendResource {\n"
"    @Inject\n"
"    @RestClient\n"
"    RestClientWithOidcClientFilter restClientWithOidcClientFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:237
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    RestClientWithTokenPropagationFilter restClientWithTokenPropagationFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:244
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"user-name-with-oidc-client-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getUserNameWithOidcClientToken() {\n"
"        return restClientWithOidcClientFilter.getUserName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:251
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"admin-name-with-oidc-client-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getAdminNameWithOidcClientToken() {\n"
"\t    return restClientWithOidcClientFilter.getAdminName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:258
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"user-name-with-propagated-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getUserNameWithPropagatedToken() {\n"
"        return restClientWithTokenPropagationFilter.getUserName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:266
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"admin-name-with-propagated-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getAdminNameWithPropagatedToken() {\n"
"        return restClientWithTokenPropagationFilter.getAdminName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:271
msgid "Finally, let's add a JAX-RS `ExceptionMapper`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:279
#, no-wrap
msgid ""
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.ext.ExceptionMapper;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:281
#, no-wrap
msgid "import org.jboss.resteasy.reactive.ClientWebApplicationException;\n"
msgstr "import org.jboss.resteasy.reactive.ClientWebApplicationException;\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:284
#, no-wrap
msgid ""
"@Provider\n"
"public class FrontendExceptionMapper implements ExceptionMapper<ClientWebApplicationException> {\n"
msgstr ""
"@Provider\n"
"public class FrontendExceptionMapper implements ExceptionMapper<ClientWebApplicationException> {\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:289
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Response toResponse(ClientWebApplicationException t) {\n"
"\t\treturn Response.status(t.getResponse().getStatus()).build();\n"
"\t}\n"
msgstr ""
"\t@Override\n"
"\tpublic Response toResponse(ClientWebApplicationException t) {\n"
"\t\treturn Response.status(t.getResponse().getStatus()).build();\n"
"\t}\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:291
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:294
msgid "This exception mapper is only added to verify during the tests that `ProtectedResource` returns `403` when the token has no expected role. Without this mapper `RESTEasy Reactive` will correctly convert the exceptions which will escape from REST Client calls to `500` to avoid leaking the information from the downstream resources such as `ProtectedResource` but in the tests it will not be possible to assert that `500` is in fact caused by an authorization exception as opposed to some internal error."
msgstr "この例外マッパーは、トークンに期待されるロールがない場合に `ProtectedResource` が 403 を返すことをテスト中に検証するためにのみ追加されます。このマッパーがないと、`RESTEasy Reactive` は、REST クライアント呼び出しからエスケープされる例外を `500` に正しく変換して、`ProtectedResource` などのダウンストリームリソースからの情報漏えいを回避しますが、テストでは `500` が実際は内部エラーではなく、認可例外が原因であることをアサートすることはできません。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:295
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:298
msgid "We have prepared the code, and now let's configure the application:"
msgstr "コードの準備ができたので、次はアプリケーションを設定します。"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:302
#, no-wrap
msgid "# Configure OIDC\n"
msgstr "# Configure OIDC\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:306
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
"quarkus.oidc.credentials.secret=secret\n"
msgstr ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
"quarkus.oidc.credentials.secret=secret\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:309
#, no-wrap
msgid ""
"# Tell Dev Services for Keycloak to import the realm file\n"
"# This property is not effective when running the application in JVM or Native modes but only in dev and test modes.\n"
msgstr ""
"# Tell Dev Services for Keycloak to import the realm file\n"
"# This property is not effective when running the application in JVM or Native modes but only in dev and test modes.\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:311
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:313
#, no-wrap
msgid "# Configure OIDC Client\n"
msgstr "# Configure OIDC Client\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:320
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${quarkus.oidc.auth-server-url}\n"
"quarkus.oidc-client.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:322
#, no-wrap
msgid "# Configure REST Clients\n"
msgstr "# Configure REST Clients\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:326
#, no-wrap
msgid ""
"%prod.port=8080\n"
"%dev.port=8080\n"
"%test.port=8081\n"
msgstr ""
"%prod.port=8080\n"
"%dev.port=8080\n"
"%test.port=8081\n"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:329
#, no-wrap
msgid ""
"org.acme.security.openid.connect.client.RestClientWithOidcClientFilter/mp-rest/url=http://localhost:${port}/protected\n"
"org.acme.security.openid.connect.client.RestClientWithTokenPropagationFilter/mp-rest/url=http://localhost:${port}/protected\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:332
msgid "This configuration references Keycloak which will be used by `ProtectedResource` to verify the incoming access tokens and by `OidcClient` to get the tokens for a user `alice` using a `password` grant. Both RESTClients point to `ProtectedResource`'s HTTP address."
msgstr "この設定は Keycloak を参照します。この Keycloak は、受信アクセストークンを検証するために `ProtectedResource` によって使用され、`password` グラントを使用してユーザー `alice` のトークンを取得するために `OidcClient` によって使用されます。どちらの RESTClient も `ProtectedResource` の HTTP アドレスを指しています。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:334
msgid "Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` will launch a container for you when the application is run in dev or test modes. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information."
msgstr "`quarkus.oidc.auth-server-url` に `%prod.` プロファイル接頭辞を追加すると、アプリケーションが開発モードまたはテストモードで実行されているときに、`Dev Services for Keycloak` がコンテナーを起動するようになります。詳細については、以下の <<keycloak-dev-mode, 開発モードでのアプリケーションの実行>> セクションを参照してください。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:335
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloak サーバーの起動と設定"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:338
msgid "Do not start the Keycloak server when you run the application in dev mode or test modes - `Dev Services for Keycloak` will launch a container. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information. Make sure to put the {quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath (`target/classes` directory) so that it gets imported automatically when running in dev mode - unless you have already built a {quickstarts-tree-url}/security-openid-connect-quickstart[complete solution] in which case this realm file will be added to the classpath during the build."
msgstr "アプリケーションを開発モードまたはテストモードで実行しているときは、Keycloak サーバーを起動しないでください。`Dev Services for Keycloak` はコンテナーを起動します。詳細については、以下の <<keycloak-dev-mode, 開発モードでのアプリケーションの実行>> セクションを参照してください。{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[レルム設定ファイル] をクラスパス (`target/classes` ディレクトリー) に配置して、開発モードで実行しているときに自動的にインポートされるようにします (すでに {quickstarts-tree-url}/security-openid-connect-quickstart[完全なソリューション] をビルドしている場合を除く (このレルムファイルはビルド時にクラスパスに追加されます))。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:340
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:344
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:347
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、`keycloak.version` は `17.0.0` 以上に設定する必要があります。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:349
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "http://localhost:8180[localhost:8180] で Keycloak サーバーにアクセスできるはずです。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:351
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:353
msgid "Import the {quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "新しいレルムを作成するには、 {quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[レルム設定ファイル] をインポートします。 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムを作成する] 方法について詳しくはKeycloakのドキュメントを参照してください。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:355
msgid "This `quarkus` realm file will add a `frontend` client, and `alice` and `admin` users. `alice` has a `user` role, `admin` - both `user` and `admin` roles."
msgstr "この `quarkus` レルムファイルでは、`frontend` クライアントと、`alice` および `admin` ユーザーが追加されます。`alice` は `user` ロールを持ち、`admin` は `user` と `admin` の両方のロールを持ちます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:357
#, no-wrap
msgid "Running the Application in Dev mode"
msgstr "開発モードでのアプリケーションの実行"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:360
msgid "To run the application in a dev mode, use:"
msgstr "アプリケーションを開発モードで実行するには、次を使用します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:364
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] will launch a Keycloak container and import a `quarkus-realm.json`."
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] は、Keycloak コンテナーを起動し、`quarkus-realm.json` をインポートします。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:366
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev[/q/dev] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
msgstr "http://localhost:8080/q/dev[/q/dev] で入手可能な xref:dev-ui.adoc[Dev UI] を開き、`OpenID Connect` `Dev UI` の `Provider: Keycloak` リンクをクリックします。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:368
msgid "You will be asked to log in into a `Single Page Application` provided by `OpenID Connect Dev UI`:"
msgstr "`OpenID Connect Dev UI` が提供する `Single Page Application` へのログインを求められます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:370
msgid "Login as `alice` (password: `alice`) who has a `user` role"
msgstr "`user` のロールを持つ `alice` (パスワード: `alice`) としてログインします"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:371
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:374
msgid "accessing `/frontend/user-name-with-propagated-token` will return `200`"
msgstr "`/frontend/user-name-with-propagated-token` にアクセスすると `200` が返されます"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:372
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `403`"
msgstr "`/frontend/admin-name-with-propagated-token` にアクセスすると `403` が返されます"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:373
msgid "Logout and login as `admin` (password: `admin`) who has both `admin` and `user` roles"
msgstr "ログアウトし、`admin` と `user` ロールの両方を持つ `admin` (パスワード: `admin`) としててログインします"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:375
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `200`"
msgstr "`/frontend/admin-name-with-propagated-token` にアクセスすると `200` が返されます"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:377
msgid "In this case you are testing that `FrontendResource` can propagate the access tokens acquired by `OpenID Connect Dev UI`."
msgstr "この場合、`FrontendResource` が `OpenID Connect Dev UI` により取得されたアクセストークンを伝搬できるかどうかをテストしています。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:378
#, no-wrap
msgid "Running the Application in JVM mode"
msgstr "JVM モードでのアプリケーションの実行"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:381
msgid "When you're done playing with the `dev` mode\" you can run it as a standard Java application."
msgstr "「`dev` モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:383
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:387
msgid "Then run it:"
msgstr "次に、以下を実行してください。"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:391
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr "java -jar target/quarkus-app/quarkus-run.jar\n"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:393
#, no-wrap
msgid "Running the Application in Native Mode"
msgstr "ネイティブモードでのアプリケーションの実行"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:396
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:400
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:403
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:407
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:411
#, no-wrap
msgid "./target/security-openid-connect-quickstart-1.0.0-SNAPSHOT-runner\n"
msgstr "./target/security-openid-connect-quickstart-1.0.0-SNAPSHOT-runner\n"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:413
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:416
msgid "See <<keycloak-dev-mode, Running the Application in Dev mode>> section above about testing your application in dev mode."
msgstr "開発モードでのアプリケーションのテストについては、上記の <<keycloak-dev-mode, 開発モードでのアプリケーションの実行>> セクションを参照してください。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:418
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "`curl` を使用して、JVM またはネイティブモードで起動したアプリケーションをテストできます。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:420
msgid "Obtain an access token for `alice`:"
msgstr "`alice` のアクセストークンを取得します:"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:429
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:432
msgid "Now use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "このトークンを使用して、`/frontend/user-name-with-propagated-token` と `/frontend/admin-name-with-propagated-token` を呼び出します。"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:438
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:470
#, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/user-name-with-propagated-token \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:441
msgid "will return `200` status code and the name `alice` while"
msgstr "ステータスコード `200` と名前 `alice` を返します。"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:447
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:479
#, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/admin-name-with-propagated-token \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:450
msgid "will return `403` - recall that `alice` only has a `user` role."
msgstr "`403` を返します - `alice` には `user` ロールしかないことを思い出してください。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:452
msgid "Next obtain an access token for `admin`:"
msgstr "次に `admin` 用のアクセストークンを取得します。"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:461
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:464
msgid "and use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "このトークンを使用して、`/frontend/user-name-with-propagated-token` と `/frontend/admin-name-with-propagated-token` を呼び出します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:473
msgid "will return `200` status code and the name `admin`, and"
msgstr "ステータスコード `200` と名前 `alice` を返します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:482
msgid "will also return `200` status code and the name `admin`, as `admin` has both `user` and `admin` roles."
msgstr "`admin` には `user` ロールと `admin` ロールの両方があるため、`200` ステータスコードと名前 `admin` を返します。"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:485
msgid "Now let's check `FrontendResource` methods which do not propagate the existing tokens but use `OidcClient` to acquire and propagate the tokens. You have seen that `OidcClient` is configured to acquire the tokens for the `alice` user, so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:490
#, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/user-name-with-oidc-client-token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:493
msgid "will return `200` status code and the name `alice`, but"
msgstr "ステータスコード `200` と名前 `alice` を返します"

#. type: delimited block -
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:498
#, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/admin-name-with-oidc-client-token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:501
msgid "will return `403` status code."
msgstr "ステータスコード `403` を返します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:502
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:505
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client と Token Propagation のリファレンスガイド]"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:506
msgid "xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications]"
msgstr "xref:security-openid-connect.adoc[OpenID Connect を使用したサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_versions/2.13/guides/security-openid-connect-client.adoc:506
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"
