# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-03 13:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/infinispan-client.adoc:6
#, fuzzy, no-wrap
#| msgid "Configuring the Infinispan client"
msgid "Using the Infinispan Client"
msgstr "Infinispanクライアントの設定"

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:12
msgid "This guide demonstrates how your Quarkus application can connect to an Infinispan server using the Infinispan Client extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:13
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:17
msgid "A working Docker environment"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:18
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:22
msgid "In this guide, we are going to expose a Greeting Rest API to create and display greeting messages by using the https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html#remotecache_api[Infinispan RemoteCache API] and `getAsync` and `putAsync` operations."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:24
#, fuzzy
#| msgid "To use the Infinispan client extension, you need at least one running instance of Infinispan Server."
msgid "We'll be using the Quarkus Infinispan Client extension to connect to interact with Infinispan."
msgstr "Infinispanクライアント・エクステンションを使用するには、少なくとも1つのInfinispan Serverの稼働しているインスタンスが必要です。"

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:25
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:28
#, fuzzy
#| msgid "We recommend that you complete each step in the following sections to create the application.  However, you can proceed directly to the completed solution as follows:"
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "アプリケーションを作成するには、以下のセクションの各ステップを完了することをお勧めします。ただし、以下のように、完成したソリューションを直接利用することもできます:"

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:30
#, fuzzy
#| msgid "Clone the Git repository: `git clone {quickstarts-clone-url}` or download an {quickstarts-archive-url}[archive].  Locate the solution in the `infinispan-client-quickstart` {quickstarts-tree-url}/infinispan-client-quickstart[directory]."
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Git リポジトリをクローンします。 `git clone {quickstarts-clone-url}` または {quickstarts-archive-url}[アーカイブ]をダウンロードします。 `infinispan-client-quickstart` {quickstarts-tree-url}/infinispan-client-quickstart[ディレクトリ]でソリューションを探します。"

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:32
#, fuzzy
#| msgid "Clone the Git repository: `git clone {quickstarts-clone-url}` or download an {quickstarts-archive-url}[archive].  Locate the solution in the `infinispan-client-quickstart` {quickstarts-tree-url}/infinispan-client-quickstart[directory]."
msgid "The solution is located in the `infinispan-client-quickstart` {quickstarts-tree-url}/infinispan-client-quickstart[directory]."
msgstr "Git リポジトリをクローンします。 `git clone {quickstarts-clone-url}` または {quickstarts-archive-url}[アーカイブ]をダウンロードします。 `infinispan-client-quickstart` {quickstarts-tree-url}/infinispan-client-quickstart[ディレクトリ]でソリューションを探します。"

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:33
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:36
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:42
msgid "This command generates a new project, importing the Infinispan Client extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:45
#, fuzzy
#| msgid "Once you have your Quarkus project configured you can add the `infinispan-client` extension to your project by running the following from the command line in your project base directory."
msgid "If you already have your Quarkus project configured, you can add the `infinispan-client` extension to your project by running the following command in your project base directory:"
msgstr "一度Quarkusプロジェクトを設定したら、プロジェクトのベースディレクトリのコマンドラインから以下を実行して、 `infinispan-client` エクステンションをプロジェクトに追加できます。"

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:50
#, fuzzy
#| msgid "This command adds the following dependency to your build file:"
msgid "This will add the following to your build file:"
msgstr "このコマンドは、ビルドファイルに以下の依存関係を追加します:"

#. type: Block title
#: upstream/_versions/main/guides/infinispan-client.adoc:52
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:58
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-infinispan-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/infinispan-client.adoc:61
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:65
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-infinispan-client\")\n"
"annotationProcessor 'org.infinispan.protostream:protostream-processor:4.6.1.Final' <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:67
msgid "Mandatory in the Gradle build to enable the generation of the files in the annotation based serialization"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:68
#, no-wrap
msgid "Creating the Greeting POJO"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:71
msgid "We are going to model our increments using the `Greeting` POJO.  Create the `src/main/java/org/acme/infinispan/client/Greeting.java` file, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:75
#: upstream/_versions/main/guides/infinispan-client.adoc:103
#: upstream/_versions/main/guides/infinispan-client.adoc:138
#: upstream/_versions/main/guides/infinispan-client.adoc:195
#, no-wrap
msgid "package org.acme.infinispan.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:78
#, no-wrap
msgid ""
"import org.infinispan.protostream.annotations.ProtoFactory;\n"
"import org.infinispan.protostream.annotations.ProtoField;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:82
#, no-wrap
msgid ""
"public class Greeting { // <1>\n"
"   @ProtoField(number = 1) // <2>\n"
"   public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:86
#, no-wrap
msgid ""
"   @ProtoField(number = 2) // <3>\n"
"   public String message;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:89
#, fuzzy
#| msgid "If your classes have only mutable fields, then the `ProtoFactory` annotation is not required, assuming your class has a no arg constructor."
msgid "If your classes have only mutable fields, then the `ProtoFactory` annotation is not required is not required, assuming your class has a no arg constructor"
msgstr "クラスが変更可能なフィールドしかない場合、 `ProtoFactory` アノテーションは必要ありません。あなたのクラスが引数なしのコンストラクタを持っていると仮定します。"

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:90
msgid "`@ProtoField` annotation to add the name field as string in the generated Protobuf schema"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:91
msgid "`@ProtoField` annotation to add the message field as string in the generated Protobuf schema"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:95
msgid "Note that we are not going to use Java serialization. https://github.com/infinispan/protostream[Protostream] is a serialization library based on Protobuf data format part of Infinispan. Using an annotation based API, we will store our data in Protobuf format."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:96
#, no-wrap
msgid "Creating the Greeting Schema"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:99
msgid "We are going to create our serialization schema using the `GreetingSchema` interface.  Create the `src/main/java/org/acme/infinispan/client/GreetingSchema.java` file, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:106
#, no-wrap
msgid ""
"import org.infinispan.protostream.GeneratedSchema;\n"
"import org.infinispan.protostream.annotations.AutoProtoSchemaBuilder;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:110
#, no-wrap
msgid ""
"@AutoProtoSchemaBuilder(includeClasses = Greeting.class) // <1>\n"
"public interface GreetingSchema extends GeneratedSchema { // <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:112
msgid "Includes the `Greeting` pojo with the `@AutoProtoSchemaBuilder` annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:113
msgid "Extends `GeneratedSchema` Protostream API interface"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:116
msgid "The Protobuf Schema that will be generated and used both on client and Infinispan Server side, will have the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:121
#, no-wrap
msgid ""
"// File name: GreetingSchema.proto\n"
"// Generated from : org.acme.infinispan.client.GreetingSchema\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:123
#, no-wrap
msgid "syntax = \"proto2\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:125
#, no-wrap
msgid "message Greeting {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:127
#, no-wrap
msgid "   optional string name = 1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:130
#, no-wrap
msgid ""
"   optional string message = 2;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:132
#, fuzzy, no-wrap
#| msgid "Adding the Infinispan client extension"
msgid "Creating the Infinispan Greeting Resource"
msgstr "Infinispanクライアントエクステンションの追加"

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:134
msgid "Create the `src/main/java/org/acme/infinispan/client/InfinispanGreetingResource.java` file, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:145
#, no-wrap
msgid ""
"import io.quarkus.infinispan.client.Remote;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import org.infinispan.client.hotrod.RemoteCache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:147
#, no-wrap
msgid "import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:150
#, no-wrap
msgid ""
"@Path(\"/greeting\")\n"
"public class InfinispanGreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:154
#, no-wrap
msgid ""
"    @Inject\n"
"    @Remote(\"mycache\") // <1>\n"
"    RemoteCache<String, Greeting> cache; //<2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:162
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/{id}\")\n"
"    public CompletionStage<String> postGreeting(String id, Greeting greeting) {\n"
"        return cache.putAsync(id, greeting) // <3>\n"
"              .thenApply(g -> \"Greeting done!\")\n"
"              .exceptionally(ex -> ex.getMessage());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:169
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public CompletionStage<Greeting> getGreeting(String id) {\n"
"        return cache.getAsync(id); // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:172
msgid "Use the `@Remote` annotation to use a cache. If the cache does not exist, will be created with a default configuration *on first access*."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:173
msgid "Inject the `RemoteCache`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:174
msgid "Put the greeting id as a key and the Greeting pojo as a value"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:175
msgid "Get the greeting by id as the key"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:176
#, fuzzy, no-wrap
#| msgid "Creating caches from the client"
msgid "Creating the test class"
msgstr "クライアントからキャッシュを作成"

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:179
msgid "Edit the `pom.xml` file to add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:187
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:190
msgid "Create the `src/test/java/org/acme/infinispan/client/InfinispanGreetingResourceTest.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:199
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.restassured.http.ContentType;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:202
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:205
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class InfinispanGreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:215
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"              .contentType(ContentType.JSON)\n"
"              .body(\"{\\\"name\\\":\\\"Infinispan Client\\\",\\\"message\\\":\\\"Hello World, Infinispan is up!\\\"}\")\n"
"              .when()\n"
"              .post(\"/greeting/quarkus\")\n"
"              .then()\n"
"              .statusCode(200);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:223
#, no-wrap
msgid ""
"        given()\n"
"                .when().get(\"/greeting/quarkus\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"{\\\"name\\\":\\\"Infinispan Client\\\",\\\"message\\\":\\\"Hello World, Infinispan is up!\\\"}\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:225
#, no-wrap
msgid "Get it running"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:228
msgid "We just need to run the application using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:234
msgid "We should have the Infinispan server running thanks to the Dev Services.  We can access the Dev Services UI through `http://localhost:8080/q/dev/`.  The Dev UI should display the Infinispan UI Panel."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/infinispan-client.adoc:235
#, no-wrap
msgid "Dev"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/infinispan-client.adoc:235
#, no-wrap
msgid "dev-ui-infinispan.png"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/infinispan-client.adoc:243
msgid "Click on the Web Console link and log using `admin` and `password` default credentials.  Quarkus has uploaded into the Schemas Tab the Protobuf Schema that is needed to marshall on the server the Greeting POJO with Protobuf.  Check the xref:infinispan-dev-services.adoc[Infinispan Dev Services Guide] to learn more."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:245
#, no-wrap
msgid "Interacting with the Greeting Service"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:248
msgid "As we have seen above, the Greeting API exposes two Rest endpoints.  In this section we are going to see how to create and display a greeting message."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/infinispan-client.adoc:249
#, no-wrap
msgid "Creating a Greeting Message"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:251
msgid "With the following command, we will create a greeting message with the id `quarkus`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:255
#, no-wrap
msgid "curl -X POST http://localhost:8080/greeting/quarkus -H \"Content-Type: application/json\" -d '{\"name\" : \"Infinispan Client\", \"message\":\"Hello World, Infinispan is up!\"}'\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:258
msgid "The service should respond with a `Greeting added!` message."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/infinispan-client.adoc:259
#, no-wrap
msgid "Displaying a Greeting Message"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:261
msgid "With the following command, we will display the greeting message with the id `quarkus`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:264
#, no-wrap
msgid "curl  http://localhost:8080/greeting/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:267
msgid "The service should respond with the following json content."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:274
#, no-wrap
msgid ""
"{\n"
"  \"name\" : \"Infinispan Client\",\n"
"  \"message\" : \"Hello World, Infinispan is up!\"\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/infinispan-client.adoc:276
#, no-wrap
msgid "Display the cache and content with the Infinispan Server Console"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:282
msgid "If a requested cache does not exist, Quarkus creates a cache with a Default configuration on first access.  We should be able to reaload the Infinispan Server Console and display the content of the Cache.  The Infinispan Server Console uses the https://infinispan.org/docs/stable/titles/rest/rest.html[Infinispan Server REST API].  The content can be displayed in JSON thanks to the Protobuf Encoding that converts to JSON format."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/infinispan-client.adoc:283
#, fuzzy, no-wrap
#| msgid "Infinispan Client"
msgid "Infinispan"
msgstr "Infinispanクライアント"

#. type: Target for macro image
#: upstream/_versions/main/guides/infinispan-client.adoc:283
#, no-wrap
msgid "infinispan-console-client-guide.png"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:286
#, no-wrap
msgid "Configuring for production"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:290
msgid "At this point, Quarkus uses the Infinispan Dev Service to run an Infinispan server and configure the application.  However, in production, you will run your own Infinispan (or Red Hat Data Grid)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:292
msgid "Let's start an Infinispan server on the port 11222 using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:296
#, no-wrap
msgid "docker run -it -p 11222:11222 -e USER=\"admin\" -e PASS=\"password\" quay.io/infinispan/server:latest\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:299
msgid "Then, open the `src/main/resources/application.properties` file and add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:305
#, fuzzy, no-wrap
msgid ""
"%prod.quarkus.infinispan-client.hosts=localhost:11222 # <1>\n"
"%prod.quarkus.infinispan-client.username=admin <2>\n"
"%prod.quarkus.infinispan-client.password=password <3>\n"
msgstr ""
"quarkus.infinispan-client.auth-username=admin <2>\n"
"quarkus.infinispan-client.auth-password=password <3>\n"

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:308
#, fuzzy, no-wrap
msgid ""
"## Docker 4 Mac workaround\n"
"%prod.quarkus.infinispan-client.client-intelligence=BASIC <4>\n"
msgstr "`quarkus.infinispan-client.server-list` が設定されている"

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:310
msgid "Sets Infinispan Server address list, separated with commas"
msgstr "Infinispanサーバーのアドレスリストをカンマ区切りで設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:311
msgid "Sets the authentication username"
msgstr "認証ユーザー名を設定"

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:312
msgid "Sets the authentication password"
msgstr "認証パスワードを設定"

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:313
msgid "Sets the client intelligence. Use BASIC as a workaround if using Docker for Mac."
msgstr "クライアントのインテリジェンスを設定。Docker for Macを使用する場合は、BASICを回避策として使用します。"

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:314
#, no-wrap
msgid "Packaging and running in JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:317
msgid "You can run the application as a conventional jar file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:319
msgid "First, we will need to package it:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:323
msgid "This command will start an Infinispan instance to execute the tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:325
msgid "Then run it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:329
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:331
#, no-wrap
msgid "Running Native"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:337
msgid "You can also create a native executable from this application without making any source code changes. A native executable removes the dependency on the JVM: everything needed to run the application on the target platform is included in the executable, allowing the application to run with minimal resource overhead."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:341
msgid "Compiling a native executable takes a bit longer, as GraalVM performs additional steps to remove unnecessary codepaths. Use the `native` profile to compile a native executable:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:345
msgid "Once the build is finished, you can run the executable with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/infinispan-client.adoc:349
#, no-wrap
msgid "./target/infinispan-client-quickstart-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/infinispan-client.adoc:351
#, no-wrap
msgid "Going further"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/infinispan-client.adoc:353
msgid "To learn more about the Quarkus Infinispan extension, check xref:infinispan-client-reference.adoc[the Infinispan Client extension reference guide]."
msgstr ""

#~ msgid "Infinispan is a distributed, in-memory key/value store that provides Quarkus applications with a highly configurable and independently scalable data layer.  This extension gives you client functionality that connects applications running on Quarkus with remote Infinispan clusters."
#~ msgstr "Infinispanは分散型のインメモリキー/バリューストアで、Quarkusアプリケーションに、高度に設定可能で独立して拡張可能なデータレイヤーを提供します。 このエクステンションにより、Quarkus上で動作するアプリケーションをリモートのInfinispanクラスタと接続するクライアント機能が提供されます。"

#~ msgid "To find out more about Infinispan, visit the https://infinispan.org/documentation[Infinispan documentation]."
#~ msgstr "Infinispanの詳細については、 link:https://infinispan.org/documentation[Infinispanのドキュメント]をご覧ください。"

#~ msgid "Run the following command in the base directory of your Quarkus project to add the `infinispan-client` extension:"
#~ msgstr "Quarkusプロジェクトのベースディレクトリで以下のコマンドを実行し、 `infinispan-client` エクステンションを追加します:"

#~ msgid "Open the `application.properties` file in the `src/main/resources` directory with any text editor."
#~ msgstr "`src/main/resources` ディレクトリの `application.properties` をテキストエディタで開いて下さい。"

#~ msgid "Note that Infinispan documentation refers to a `hotrod-client.properties` file.  You can configure the Infinispan client with either properties file but `application.properties` always takes priority over `hotrod-client.properties`."
#~ msgstr "Infinispanのドキュメントでは、 `hotrod-client.properties` のファイルを参照していることに注意してください。どちらのプロパティ・ファイルでもInfinispanクライアントを設定できますが、 `application.properties` は常に `hotrod-client.properties` よりも優先されます。"

#~ msgid "Additionally, you cannot update configuration properties at runtime.  If you modify `application.properties` or `hotrod-client.properties`, you must rebuild the application before those changes take effect."
#~ msgstr "さらに、実行時にコンフィギュレーションプロパティを更新することはできません。 もし、`application.properties` や `hotrod-client.properties` を変更した場合、その変更を反映させる前にアプリケーションをリビルドしなければなりません。"

#~ msgid "Connecting to Infinispan clusters"
#~ msgstr "Infinispanクラスタへの接続"

#, fuzzy
#~ msgid "quarkus.infinispan-client.hosts=localhost:11222 <1>\n"
#~ msgstr "`quarkus.infinispan-client.server-list` が設定されている"

#, fuzzy
#~ msgid ""
#~ "quarkus.infinispan-client.uri=hotrod://admin:password@localhost:11222 <1>\n"
#~ "quarkus.infinispan-client.client-intelligence=BASIC <2>\n"
#~ msgstr ""
#~ "quarkus.infinispan-client.auth-username=admin <2>\n"
#~ "quarkus.infinispan-client.auth-password=password <3>\n"

#, fuzzy
#~ msgid "Sets the client intelligence. Use BASIC as a workaround if using Docker for Mac"
#~ msgstr "クライアントのインテリジェンスを設定。Docker for Macを使用する場合は、BASICを回避策として使用します。"

#~ msgid "Running Infinispan Server"
#~ msgstr "Infinispanサーバの起動"

#~ msgid "Check out our 5-minute https://infinispan.org/get-started/[Getting stated with Infinispan] tutorial to run Infinispan Server locally."
#~ msgstr "Infinispan Serverをローカルで実行するための5分間のチュートリアル link:https://infinispan.org/get-started/[「Getting stated with Infinispan」]をご覧ください。"

#~ msgid "Infinispan Server also enables authentication and security authorization by default, so you need to create a user with permissions."
#~ msgstr "また、Infinispan Serverはデフォルトで認証とセキュリティの認可を有効にしているので、権限のあるユーザーを作成する必要があります。"

#~ msgid "If you run the Infinispan Server image, pass the `USER=\"admin\"` and `PASS=\"password\"` parameters."
#~ msgstr "Infinispan Server イメージを実行する場合は、 `USER=\"admin\"` と `PASS=\"password\"` のパラメータを渡します。"

#~ msgid "If you run the bare metal distribution, use the Command Line Interface (CLI) as follows:"
#~ msgstr "ベアメタル・ディストリビューションを実行する場合は、次のようにコマンドライン・インターフェース（CLI）を使用します:"

#~ msgid "When a cache is accessed from the client, if the cache does not exist in the Infinispan Server and you want to create it on first access, use one of the following properties:"
#~ msgstr "クライアントからキャッシュにアクセスする際、Infinispan Server内にキャッシュが存在せず、初回アクセス時にキャッシュを作成したい場合は、以下のいずれかのプロパティを使用します。"

#~ msgid "The file name located under the `resources` folder that contains the configuration of the 'books' cache"
#~ msgstr "books'キャッシュの設定を含む `resources` フォルダー下のファイル名"

#~ msgid "The configuration of the 'magazine' cache as a plain text property"
#~ msgstr "プレーンテキストプロパティとして 'magazine' キャッシュの設定"

#~ msgid "If both `configuration-uri` and `configuration` are configured for the same cache with the same Quarkus profile, `configuration-uri` gets preference over `configuration`."
#~ msgstr "`configuration-uri` と `configuration` の両方が同じ Quarkus プロファイルで同じキャッシュに設定されている場合、 `configuration-uri` が `configuration` より優先されます。"

#~ msgid "If nothing is configured for a particular cache, it will be created with the following basic configuration:"
#~ msgstr "特定のキャッシュについて何も設定されていない場合、以下の基本設定で作成されます。"

#~ msgid "Authentication mechanisms"
#~ msgstr "認証メカニズム"

#~ msgid "You can use the following authentication mechanisms with the Infinispan client:"
#~ msgstr "Infinispanクライアントでは、以下の認証機構を使用することができます:"

#~ msgid "DIGEST-MD5"
#~ msgstr "DIGEST-MD5"

#~ msgid "PLAIN (recommended only in combination with TLS encryption)"
#~ msgstr "PLAIN（TLS暗号化との併用のみ推奨）"

#~ msgid "EXTERNAL"
#~ msgstr "EXTERNAL"

#~ msgid "Other authentication mechanisms, such as SCRAM and GSSAPI, are not yet verified with the Infinispan client."
#~ msgstr "SCRAMやGSSAPIなどの他の認証機構は、Infinispanクライアントではまだ検証されていません。"

#~ msgid "You can find more information on configuring authentication in https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html#hotrod_endpoint_auth-hotrod-client-configuration[Hot Rod Endpoint Authentication Mechanisms]."
#~ msgstr "認証の設定についての詳しい情報は https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html#hotrod_endpoint_auth-hotrod-client-configuration[Hot Rod Endpoint Authentication Mechanisms] に存在します。"

#~ msgid "You must configure authentication in the `hotrod-client.properties` file if you use Dependency Injection."
#~ msgstr "Dependency Injectionを使用する場合は、 `hotrod-client.properties` ファイルで認証の設定を行う必要があります。"

#~ msgid "Serialization (Key Value types support)"
#~ msgstr "シリアライゼーション（Key Value型のサポート）"

#, fuzzy
#~ msgid "By default, the client will support keys and values of the following types: byte[], primitive wrappers (e.g. Integer, Long, Double), String, Date and Instant. User types require some additional steps that are detailed here. Let's say we have the following user classes:"
#~ msgstr "デフォルトでは、クライアントは以下の型のキーとバリューをサポートします: byte[]、プリミティブラッパー(例: Integer、Long、Doubleなど)、String、Date、Instant。ユーザ型については、ここで詳しく説明される追加のステップが必要です。以下のようなユーザクラスがあるとします。"

#~ msgid "Author.java"
#~ msgstr "Author.java"

#~ msgid "Book.java"
#~ msgstr "Book.java"

#~ msgid "Serialization of user types uses a library based on protobuf, called https://github.com/infinispan/protostream[Protostream]."
#~ msgstr "ユーザ型のシリアライズは、https://github.com/infinispan/protostream[Protostream]と呼ばれるprotobufをベースにしたライブラリを使用します。"

#~ msgid "Infinispan caches can store keys and values in different encodings, but recommend using https://developers.google.com/protocol-buffers[Protocol Buffers (Protobuf)]."
#~ msgstr "Infinispanのキャッシュは、さまざまなエンコーディングでキーと値を保存できますが、 link:https://developers.google.com/protocol-buffers[プロトコル・バッファ（Protobuf）] の使用を推奨します。"

#~ msgid "For more information see our https://infinispan.org/docs/stable/titles/encoding/encoding.html[Cache Encoding and Marshalling] guide."
#~ msgstr "詳しくは、 link:https://infinispan.org/docs/stable/titles/encoding/encoding.html[Cache Encoding and Marshalling] ガイドをご覧ください。"

#~ msgid "Annotation based Serialization"
#~ msgstr "アノテーションに基づくシリアライゼーション"

#~ msgid "This can be done automatically by adding protostream annotations to your user classes.  In addition, a single Initializer annotated interface is required which controls how the supporting classes are generated."
#~ msgstr "これは、ユーザクラスに protostream アノテーションを追加することで自動的に行えます。加えて、初期化子がアノテーションされたインターフェースが1つ必要です。これは、サポートするクラスの生成方法を制御します。"

#~ msgid "Here is an example of how the preceding classes should be changed:"
#~ msgstr "ここでは、先述のクラスをどのように変更するかの例を示します。"

#~ msgid "Then all that is required is a very simple `GeneratedSchema` interface with an annotation on it to specify configuration settings"
#~ msgstr "必要なのは、設定を指定する為のアノテーションを付与した非常にシンプルな `GeneratedSchema` インターフェイスだけです。"

#, fuzzy
#~ msgid "BooksSchema.java"
#~ msgstr "Book.java"

#~ msgid "Protostream provides default Protobuf mappers for commonly used types as `BigDecimal`, included in the `org.infinispan.protostream.types` package."
#~ msgstr "Protostream は、 `org.infinispan.protostream.types` パッケージに含まれる `BigDecimal` のように、一般的に使用される型に対するデフォルトの Protobuf マッパーが提供します。"

#, fuzzy
#~ msgid "So in this case we will automatically generate the marshaller and schemas for the included classes and place them in the schema package automatically. The package does not have to be provided, but if you use Infinispan search capabilities, you must know the generated package."
#~ msgstr "そこで今回は、含まれるクラスのマーシャラとスキーマを自動生成して、スキーマパッケージに自動で配置します。パッケージは用意する必要はありませんが、Infinispanクエリ機能を利用する場合は生成されたパッケージを知っておく必要があります。"

#~ msgid "In Quarkus the `schemaFileName` and `schemaFilePath` attributes should NOT be set on the `AutoProtoSchemaBuilder` annotation. Setting either attributes causes native runtime errors."
#~ msgstr "Quarkusでは、 `schemaFileName` と `schemaFilePath` 属性は、 `AutoProtoSchemaBuilder` アノテーションに設定すべきではありません。いずれかを設定すると、ネイティブランタイムエラーが発生します。"

#, fuzzy
#~ msgid "Custom serialization"
#~ msgstr "アノテーションに基づくシリアライゼーション"

#~ msgid "The previous method is suggested for any case when the user can annotate their classes.  Unfortunately the user may not be able to annotate all classes they will put in the cache. In this case you must define your schema and create your own Marshaller(s)  yourself."
#~ msgstr "前の方法は、ユーザが自分のクラスにアノテーションを付けられる場合のために提案されています。残念ながら、ユーザはキャッシュに入れるすべてのクラスにアノテーションを付けることができないかもしれません。このような場合はスキーマを定義し、自分で独自のマーシャラを作成しなければなりません。"

#~ msgid "Protobuf schema"
#~ msgstr "Protobuf スキーマ"

#~ msgid "You can supply a protobuf schema through either one of two ways."
#~ msgstr "2つの方法のいずれかでprotobufスキーマを提供できます。"

#~ msgid "Proto File"
#~ msgstr "Proto ファイル"

#~ msgid "+ You can put the `.proto` file in the `META-INF` directory of the project. These files will automatically be picked up at initialization time."
#~ msgstr "+ プロジェクトの `META-INF` ディレクトリに `.proto` ファイルを置けます。これらのファイルは、初期化時に自動的に取り上げられます。"

#~ msgid "library.proto"
#~ msgstr "library.proto"

#~ msgid "In Code"
#~ msgstr "コード"

#~ msgid "+ Or you can define the proto schema directly in user code by defining a produced bean of type `org.infinispan.protostream.FileDescriptorSource`."
#~ msgstr "+ `org.infinispan.protostream.FileDescriptorSource` 型の生成されたBeanを定義することにより、ユーザコードで直接protoスキーマを定義できます。"

#~ msgid "User Marshaller"
#~ msgstr "ユーザマーシャラ"

#~ msgid "The last thing to do is to provide a `org.infinispan.protostream.MessageMarshaller` implementation for each user class defined in the proto schema. This class is then provided via `@Produces` in a similar fashion to the code based proto schema definition above."
#~ msgstr "最後にすべきことは、proto スキーマで定義された各ユーザクラスの `org.infinispan.protostream.MessageMarshaller` 実装を提供することです。このクラスは、上記のコードベースの proto スキーマの定義と同様の方法で `@Produces` を介して提供されます。"

#~ msgid "Here is the Marshaller class for our Author & Book classes."
#~ msgstr "こちらは、Author と Book クラスのマーシャラクラスです。"

#~ msgid "The type name must match the `<protobuf package>.<protobuf message>` exactly!"
#~ msgstr "型名は `<protobuf package>.<protobuf message>` と正確に一致している必要があります！"

#~ msgid "AuthorMarshaller.java"
#~ msgstr "AuthorMarshaller.java"

#~ msgid "BookMarshaller.java"
#~ msgstr "BookMarshaller.java"

#~ msgid "And you pass the marshaller by defining the following:"
#~ msgstr "そして、以下のように定義してマーシャラを渡します。"

#~ msgid "The above produced Marshaller method MUST return `MessageMarshaller` without types or else it will not be found."
#~ msgstr "上記のように生成されたMarshallerメソッドは、型なしで `MessageMarshaller` を返さなければなりません。さもないと、それが見つかりません。"

#~ msgid "Dependency Injection"
#~ msgstr "依存性注入"

#, fuzzy
#~ msgid "As you saw above we support the user injecting Marshaller configuration. You can do the inverse with the Infinispan client extension providing injection for `RemoteCacheManager` and `RemoteCache` objects.  There is one global `RemoteCacheManager` that takes all the configuration parameters setup in the above sections."
#~ msgstr "上で見たように、Marshaller の設定をユーザが注入することをサポートしています。Infinispan クライアントエクステンションを使用すると、 `RemoteCacheManager` と `RemoteCache` オブジェクトに注入することでその逆のことができます。上記のセクションで設定したすべての設定パラメーターを受け取るグローバル `RemoteCacheManager` があります。"

#, fuzzy
#~ msgid "It is very simple to inject these components. All you need to do is to add the `@Inject` annotation to the field, constructor or method. In the below code we utilize field and constructor injection."
#~ msgstr "これらのコンポーネントを注入するのは非常に簡単です。必要なのは、フィールド、コンストラクタ、またはメソッドに注入アノテーションを追加するだけです。以下のコードでは、フィールドとコンストラクタの注入を利用しています。"

#~ msgid "SomeClass.java"
#~ msgstr "SomeClass.java"

#~ msgid "If you notice the `RemoteCache` declaration has an additional optional annotation named `Remote`.  This is a qualifier annotation allowing you to specify which named cache that will be injected. This annotation is not required and if it is not supplied, the default cache will be injected."
#~ msgstr "`RemoteCache` 宣言に `Remote` というオプションのアノテーションが追加されていることにお気づきでしょうか。これは、注入される名前付きキャッシュを指定するための修飾子アノテーションです。このアノテーションは必須ではなく、指定しなかった場合はデフォルトのキャッシュが注入されます。"

#~ msgid "Other types may be supported for injection, please see other sections for more information"
#~ msgstr "その他の型は注入のためにサポートされている場合がありますが、詳細については他のセクションを参照してください。"

#~ msgid "Registering Protobuf Schemas with Infinispan Server"
#~ msgstr "InfinispanサーバへのProtobufスキーマの登録"

#~ msgid "You need to register the generated Protobuf schemas with Infinispan Server to perform queries or convert from `Protobuf` to other media types such as `JSON`."
#~ msgstr "クエリを実行したり、 `Protobuf` から `JSON` のような他のメディアタイプに変換するには、生成された Protobuf スキーマを Infinispan Server に登録する必要があります。"

#~ msgid "By default, Protobuf schemas generated this way will be registered by this extension when the client first connects.  However, it might be required to handle the registration manually as a schema may evolve over time when used in production, so you can disable this from occurring by configuring the `quarkus.infinispan-client.use-schema-registration` to `false`."
#~ msgstr "デフォルトでは、この方法で生成されたProtobufスキーマは、クライアントが最初に接続したときに、この拡張機能によって登録されます。 しかし、実運用で使用しているとスキーマが時間の経過とともに進化する可能性があるため、手動で登録を処理する必要があるかもしれません。そのため、`quarkus.infinispan-client.use-schema-registration`を`false`に設定して、この現象を無効にすることができます。"

#~ msgid "To configure the schema manually please use https://infinispan.org/docs/infinispan-operator/main/operator.html[Infinispan Operator] for Kubernetes deployments, Infinispan Console, https://infinispan.org/docs/stable/titles/rest/rest.html#rest_v2_protobuf_schemas[REST API] or the https://infinispan.org/docs/stable/titles/encoding/encoding.html#registering-sci-remote-caches_marshalling[Hot Rod Java Client]."
#~ msgstr "スキーマを手動で設定するには、Kubernetes デプロイメント用の https://infinispan.org/docs/infinispan-operator/main/operator.html[Infinispan Operator] 、Infinispan Console、 https://infinispan.org/docs/stable/titles/rest/rest.html#rest_v2_protobuf_schemas[REST API] または https://infinispan.org/docs/stable/titles/encoding/encoding.html#registering-sci-remote-caches_marshalling[Hot Rod Java Client] を使用してください。"

#~ msgid "Caching using annotations"
#~ msgstr "アノテーションを利用したキャッシング"

#~ msgid "Caching annotations are not allowed on private methods.  They will work fine with any other access modifier including package-private (no explicit modifier)."
#~ msgstr "プライベートメソッドではキャッシュのアノテーションは許可されていません。package-private (明示的な修飾子を持たない) を含む他のアクセス修飾子では問題なく動作します。"

#~ msgid "@CacheResult"
#~ msgstr "@CacheResult"

#~ msgid "Loads a method result from the cache without executing the method body whenever possible."
#~ msgstr "可能な限り、メソッドボディを実行せずにキャッシュからメソッドの結果を読み込みます。"

#~ msgid "@CacheInvalidate"
#~ msgstr "@CacheInvalidate"

#~ msgid "Removes an entry from the cache."
#~ msgstr "キャッシュからエントリーを削除します。"

#~ msgid "@CacheInvalidateAll"
#~ msgstr "@CacheInvalidateAll"

#~ msgid "Querying"
#~ msgstr "問い合わせ"

#, fuzzy
#~ msgid "The Infinispan client supports both indexed and non-indexed search as long as the `ProtoStreamMarshaller` is configured above. This allows the user to query based on the properties of the proto schema. *Indexed queries are preferred for performance reasons*."
#~ msgstr "Infinispan クライアントは、上記の `ProtoStreamMarshaller` が設定されている限り、インデックス付きと非インデックス付きの両方の問い合せをサポートしています。これにより、ユーザはプロトスキーマのプロパティに基づいて問い合せできます。"

#~ msgid "Query builds upon the proto definitions you can configure when setting up the `ProtoStreamMarshaller`.  Either method of Serialization above will automatically register the schema with the server at startup, meaning that you will automatically gain the ability to query objects stored in the remote Infinispan Server."
#~ msgstr "Query は、 `ProtoStreamMarshaller` の設定時に設定できるproto定義に基づいて構築されます。上記のいずれのシリアライズ方法でも、起動時に自動的にスキーマをサーバに登録し、リモートの Infinispan サーバーに保存されているオブジェクトを問い合せる機能を自動的に得られます。"

#~ msgid "You can use either the Query DSL or the Ickle Query language with the Quarkus Infinispan client extension."
#~ msgstr "Quarkus Infinispanクライアントエクステンションでは、Query DSLまたはIckle Query 言語のいずれかを使用できます。"

#, fuzzy
#~ msgid "You can read more about https://infinispan.org/docs/stable/titles/query/query.html[querying] in the Infinispan documentation."
#~ msgstr "詳細は Infinispan のドキュメント https://infinispan.org/docs/stable/titles/developing/developing.html#creating_ickle_queries-querying[問い合せ] を参照してください。"

#~ msgid "Counters"
#~ msgstr "カウンター"

#~ msgid "Infinispan also has a notion of counters and the Quarkus Infinispan client supports them out of the box."
#~ msgstr "Infinispanにはカウンターという概念もあり、Quarkus Infinispanのクライアントはそれらもサポートしています。"

#, fuzzy
#~ msgid "The Quarkus Infinispan client extension allows for Dependency Injection of the `CounterManager` directly. All you need to do is annotate your field, constructor or method, and you get it with no fuss. You can then use counters as you would normally."
#~ msgstr "Quarkus Infinispanクライアントエクステンションを使用すると、 `CounterManager` の依存性注入を直接行えます。必要なのは、フィールド、コンストラクタ、メソッドにアノテーションを付けるだけで、手間をかけずに注入できます。そして、通常のようにカウンターを使用できます。"

#~ msgid "You can read more about https://infinispan.org/docs/stable/titles/developing/developing.html#clustered_counters[clustered counters] in the Infinispan documentation."
#~ msgstr "詳細は Infinispan のドキュメント https://infinispan.org/docs/stable/titles/developing/developing.html#clustered_counters[クラスタカウンタ] を参照してください。"

#~ msgid "Near Caching"
#~ msgstr "ニアキャッシング"

#~ msgid "Near caching is disabled by default, but you can enable it on a per cache basic by configuring the following properties:"
#~ msgstr "ニアキャッシングはデフォルトでは無効ですが、次のプロパティを設定することで、キャッシュ単位で有効にすることができます:"

#~ msgid "Enables near caching for the 'books' cache by setting the mode to `INVALIDATED`"
#~ msgstr "モードを `INVALIDATED` に設定して 'books' キャッシュのニアキャッシュを有効にします"

#~ msgid "Sets the maximum number of entries that the near cache of the 'books' cache can hold before eviction occurs"
#~ msgstr "'books' キャッシュのエビクションが発生するまでにニアキャッシュが保持できる最大エントリ数を設定します"

#~ msgid "Enables bloom filter for the 'books' cache"
#~ msgstr "'books' キャッシュのブルームフィルタを有効にします"

#, fuzzy
#~ msgid "Bounded near caching"
#~ msgstr "ニアキャッシング"

#~ msgid "You should always use bounded near caches by specifying the maximum number of entries they can contain."
#~ msgstr "キャッシュに格納できるエントリーの最大数を指定し、常に境界付けられたニアキャッシュを使用する必要があります。"

#~ msgid "Bloom filters"
#~ msgstr "ブルームフィルタ"

#~ msgid "If you need to optimize the performance for write operations by reducing the total number of invalidation messages, enable bloom filter. Bloom filters reside on Infinispan Server and keep track of the entries that the client has requested.  They cannot be used with unbounded near cache: maximum number of entries must be defined when enabling bloom filters."
#~ msgstr "無効化メッセージの総数を減らすことで書き込み操作のパフォーマンスを最適化する必要がある場合はブルームフィルタを有効にします。ブルームフィルタは Infinispan Server に常駐し、クライアントが要求したエントリを追跡します。 これらは、境界付けられていないニアキャッシュでは使用できません。ブルームフィルタを有効にする際には、エントリの最大数を定義する必要があります。"

#~ msgid "Encryption"
#~ msgstr "暗号化"

#~ msgid "Encryption at this point requires additional steps to get working."
#~ msgstr "この時点での暗号化には、作業を開始するための追加のステップが必要です。"

#~ msgid "The first step is to configure the `hotrod-client.properties` file to point to your truststore and/or keystore. This is further detailed https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html#hotrod_encryption[here]."
#~ msgstr "最初のステップは、 `hotrod-client.properties` ファイルがトラストストアおよび/またはキーストアを指すように設定することです。これについては、 https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html#hotrod_encryption[ここで] さらに詳しく説明します。"

#~ msgid "The Infinispan Client extension enables SSL/TLS by default. You can read more about this at xref:native-and-ssl.adoc[Using SSL With Native Executables]."
#~ msgstr "Infinispanクライアント拡張は、デフォルトでSSL/TLSを有効にします。これについては xref:native-and-ssl.adoc[Using SSL With Native Executables] に詳しく書かれています。"

#~ msgid "Additional Features"
#~ msgstr "追加機能"

#, fuzzy
#~ msgid "The Infinispan Client has additional features that were not mentioned here. This means this feature was not tested in a Quarkus environment, and they may or may not work. Please let us know if you need these added!"
#~ msgstr "Infinispanクライアントには、ここでは触れられていない追加機能があります。これは、この機能がQuarkus環境でテストされていないことを意味し、それらは動作するかもしれないし、動作しないかもしれません。これらの機能を追加する必要がある場合は、ご連絡ください。"

#~ msgid "Dev Services for Infinispan"
#~ msgstr "Infinispanの開発サービス"

#~ msgid "When you use the infinispan-client extension in dev mode or in test, Quarkus automatically starts an Infinispan server and configure your application."
#~ msgstr "開発モードまたはテストでinfinispan-clientエクステンションを使用すると、Quarkusは自動的にInfinispanサーバーを起動し、アプリケーションを設定します。"

#~ msgid "Enabling / Disabling Dev Services for Infinispan"
#~ msgstr "Infinispanの開発サービスの有効化／無効化"

#~ msgid "Shared server"
#~ msgstr "共有サーバー"

#~ msgid "Quarkus will share the Infinispan broker if you have multiple applications running in dev mode.  Dev Services for Infinispan implements a _service discovery_ mechanism for your multiple Quarkus applications running in _dev_ mode to share a single broker."
#~ msgstr "開発モードで複数のアプリケーションを実行している場合、QuarkusはInfinispanブローカーを共有します。 Infinispanの開発サービスは、 _dev_ モードで実行されている複数のQuarkusアプリケーションが1つのブローカーを共有するための _service discovery_ メカニズムを実装しています。"

#~ msgid "Dev Services for Infinispan starts the container with the `quarkus-dev-service-infinispan` label which is used to identify the container."
#~ msgstr "Infinispanの開発サービス は、コンテナを識別するために使用される `quarkus-dev-service-infinispan` ラベルでコンテナを起動します。"

#~ msgid "If you need multiple (shared) Infinispan server, you can configure the `quarkus.infinispan-client.devservices.service-name` attribute and indicate the server name.  It looks for a container with the same value, or starts a new one if none can be found.  The default service name is `infinispan`."
#~ msgstr "複数の（共有）Infinispanサーバーが必要な場合は、 `quarkus.infinispan-client.devservices.service-name` 属性を設定して、サーバー名を指定することが可能です。 同じ値を持つコンテナを探すか、見つからない場合は新しいコンテナを起動します。 デフォルトのサービス名は `infinispan` です。"

#~ msgid "Sharing is enabled by default in dev mode, but disabled in test mode.  You can disable the sharing with `quarkus.infinispan-client.devservices.shared=false`."
#~ msgstr "共有は、開発モードではデフォルトで有効ですが、テストモードでは無効になります。 共有は `quarkus.infinispan-client.devservices.shared=false` で無効にすることができます。"

#~ msgid "Setting the port"
#~ msgstr "ポートの設定"

#~ msgid "By default, Dev Services for Infinispan picks a random port and configures the application.  You can set the port by configuring the `quarkus.infinispan-client.devservices.port` property."
#~ msgstr "デフォルトでは、Infinispanの開発サービスはランダムなポートを選択し、アプリケーションを設定します。 ポートは `quarkus.infinispan-client.devservices.port` プロパティを設定することによって定義することができます。"

#~ msgid "Testing helpers"
#~ msgstr "テストヘルパー"

#~ msgid "To start an Infinispan Server for your unit tests, Quarkus provides one `QuarkusTestResourceLifecycleManager` that relies on link:https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html#junit-testing[Infinispan Server Test Container]."
#~ msgstr "ユニットテスト用に Infinispan Server を起動するために、Quarkus は link:https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html#junit-testing[Infinispan Server Test Container] に依存する `QuarkusTestResourceLifecycleManager` を1つ提供します。"

#~ msgid "`io.quarkus.test.infinispan.client.InfinispanTestResource` will start a single instance on port 11222 with user 'admin' and password 'password'."
#~ msgstr "`io.quarkus.test.infinispan.client.InfinispanTestResource` は、ポート 11222 で、ユーザー 'admin' とパスワード 'password' で単一のインスタンスを起動します。"

#~ msgid "To use them, you need to add the `io.quarkus:quarkus-test-infinispan-client` dependency to your pom.xml."
#~ msgstr "これらを使用するには、 `io.quarkus:quarkus-test-infinispan-client` の依存関係を pom.xml に追加する必要があります。"

#~ msgid "For more information about the usage of a `QuarkusTestResourceLifecycleManager` please read xref:getting-started-testing.adoc#quarkus-test-resource[Quarkus test resource]."
#~ msgstr "`QuarkusTestResourceLifecycleManager` の使い方については、 link:getting-started-testing.html#quarkus-test-resource[Quarkusのテストリソース]をご覧ください。"

#~ msgid "Configuration Reference"
#~ msgstr "設定リファレンス"

#, fuzzy
#~ msgid "the `quarkus.infinispan-client.hosts` is configured"
#~ msgstr "`quarkus.infinispan-client.server-list` が設定されている"

#, fuzzy
#~ msgid "the `quarkus.infinispan-client.uri` is configured"
#~ msgstr "`quarkus.infinispan-client.server-list` が設定されている"

#, fuzzy
#~ msgid "Dev Services for Infinispan relies on Docker to start the broker.  If your environment does not support Docker, you will need to start the broker manually, or connect to an already running broker.  You can configure the broker address using `quarkus.infinispan-client.hosts`."
#~ msgstr "Infinispanの開発サービス はブローカーの起動に Docker を利用しています。 お使いの環境が Docker をサポートしていない場合、ブローカーを手動で起動するか、すでに起動しているブローカーに接続する必要があります。 ブローカーのアドレスは `quarkus.infinispan-client.server-list` を使用して設定できます。"

#~ msgid "Near caching is disabled by default, but you can enable it by setting the profile config property `quarkus.infinispan-client.near-cache-max-entries` to a value greater than 0. You can also configure a regular expression so that only a subset of caches have near caching applied through the `quarkus.infinispan-client.near-cache-name-pattern` attribute."
#~ msgstr "ニア・キャッシングは既定では無効になっていますが、プロファイル構成プロパティ `quarkus.infinispan-client.near-cache-max-entries` を 0 より大きい値に設定することで有効にできます。 また、正規表現を構成して、`quarkus.infinispan-client.near-cache-name-pattern` 属性を通じたキャッシュの一部のみニア・キャッシングを適用できます。"

#~ msgid "Infinispan is an in memory data grid that allows running in a server outside of application processes. This extension provides functionality to allow the client that can connect to said server when running in Quarkus."
#~ msgstr "Infinispanは、アプリケーションプロセスの外で実行するインメモリデータグリッドです。このエクステンションは、Quarkusを実行しているときに、クライアントがサーバに接続できる機能を提供します。"

#~ msgid "Check out the https://infinispan.org/documentation[Infinispan documentation] to find out more about the Infinispan project, in particular the https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html[Hot Rod Java client guide]."
#~ msgstr "Infinispanの link:https://infinispan.org/documentation[ドキュメント] をチェックして、Infinispanプロジェクト、特に link:https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html[Hot Rod Javaクライアントガイド] の詳細を確認してください。"

#~ msgid "It is also possible to configure a `hotrod-client.properties` as described in the Infinispan user guide. Note that the `hotrod-client.properties` values overwrite any matching property from the other configuration values (eg. near cache).  This properties file is build time only and if it is changed, requires a full rebuild."
#~ msgstr "Infinispan ユーザガイドに記載されているように `hotrod-client.properties` を設定できます。 `hotrod-client.properties` の値は、他の設定値（例:ニアキャッシュ）から一致するプロパティを上書きすることに注意してください。このプロパティファイルはビルド時のみのもので、変更された場合は完全に再ビルドする必要があります。"

#~ msgid "BookContextInitializer.java"
#~ msgstr "BookContextInitializer.java"

#~ msgid "This chart illustrates what mechanisms have been verified to be working properly with the Quarkus Infinispan Client extension."
#~ msgstr "この表は、Quarkus Infinispanクライアントエクステンションで正常に動作することが確認されているメカニズムを示しています。"

#~ msgid "Mechanisms"
#~ msgstr "メカニズム"

#~ msgid "Name"
#~ msgstr "名前"

#~ msgid "Verified"
#~ msgstr "検証済み"

#~ msgid "[green]*Y*"
#~ msgstr "[green]*Y*"

#~ msgid "[red]*N*"
#~ msgstr "[red]*N*"

#~ msgid "Custom"
#~ msgstr "Custom"
