# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-15 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/lra.adoc:6
#, no-wrap
msgid "Narayana LRA Participant Support"
msgstr "Narayana LRA 参加者サポート"

#. type: Title ==
#: upstream/_versions/main/guides/lra.adoc:13
#, no-wrap
msgid "Introduction"
msgstr "はじめに"

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:17
msgid "The LRA (short for Long Running Action) participant extension is useful in microservice based designs where different services can benefit from a relaxed notion of distributed consistency."
msgstr "LRA（Long Running Actionの略）参加者エクステンションは、マイクロサービスベースの設計で、異なるサービスが分散一貫性の緩和された概念を利用できる場合に便利です。"

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:22
msgid "The idea is for multiple services to perform different computations/actions in concert, whilst retaining the option to compensate for any actions performed during the computation.  This kind of loose coupling of services bridges the gap between strong consistency models such as JTA/XA and \"home-grown\" ad hoc consistency solutions."
msgstr "このアイデアは、複数のサービスが協調して異なる計算/アクションを実行する一方で、計算中に実行されたアクションを補正するオプションを保持するというものです。このようなサービスの緩やかな結合は、JTA/XAのような強力な一貫性モデルと、「自家製の」アドホックな一貫性ソリューションとの間のギャップを埋めるものです。"

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:45
#, fuzzy
msgid "The model is based on the https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc[Eclipse MicroProfile LRA specification].  The approach is for the developer to annotate a business method with a Java annotation (https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@LRA`]).  When such a method is called, an LRA context is created (if one is not already present) which is passed along with subsequent Jakarta REST invocations until a method is reached which also contains an `@LRA` annotation with an attribute that indicates that the LRA should be closed or cancelled. The default is for the LRA to be closed in the same method that started the LRA (which itself may have propagated the context during method execution).  The Jakarta REST resource indicates that it wishes to participate in the interaction by, minimally, marking one of the methods with an https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Compensate`] annotation. If the context is later cancelled, then this `@Compensate` action is guaranteed to be called even in the presence of failures and is the trigger for the resource to compensate for any activities it performed in the context of the LRA. This guarantee enables services to operate reliably with the assurance of eventual consistency (when all compensation activities have ran to completion). The participant can ask to be reliably notified when the LRA it is participating in is closed by marking one of the methods with an https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Complete`] annotation. In this way cancelling an LRA causes all participants to be notified via their Compensate callback and closing an LRA causes all participants to be notified via their Complete callback (if they have one).  Other annotations for controlling participants are documented in the https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[MicroProfile LRA API v1.0 javadoc]."
msgstr "このモデルは、 link:https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc[Eclipse MicroProfile LRA仕様に] 基づくものです。アプローチとしては、開発者がビジネスメソッドにJavaアノテーション( link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@LRA`] ).このようなメソッドが呼び出されると、LRA コンテキストが作成され（まだ存在しない場合）、LRA を閉じるかキャンセルすることを示す属性を持つ `@LRA` アノテーションを含むメソッドに到達するまで、その後の Jakarta REST 呼び出しと一緒に渡される。デフォルトは、LRA を開始したのと同じメソッド（メソッド実行中にコンテキストを伝播した可能性がある）で LRA が閉じられることです。jakarta RESTリソースは、最低限、メソッドの1つをマークすることで、相互作用に参加することを希望することを示す。 link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Compensate`] のアノテーションを使用する。コンテキストが後でキャンセルされた場合、この `@Compensate` アクションは、障害があっても呼び出されることが保証され、リソースがLRAのコンテキストで実行したアクティビティを補償するためのトリガーとなる。この保証により、最終的な整合性（すべての補償活動が完了したとき）が保証されたサービスを確実に運用することができます。参加者は、参加しているLRAが終了したときに確実に通知されるように、メソッドの1つに、(1)と(2)をマークすることで要求することができます。 link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Complete`] というアノテーションがあります。このように、LRA をキャンセルすると、Compensate コールバックを通じてすべての参加者に通知され、LRA を閉じると、Complete コールバックを通じてすべての参加者に通知されます（Complete コールバックがある場合）。参加者をコントロールするためのその他のアノテーションについては、 link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[MicroProfile LRA API v1.0 javadocに] 記載されています。"

#. type: Title ==
#: upstream/_versions/main/guides/lra.adoc:46
#, no-wrap
msgid "Configuration"
msgstr "設定"

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:50
msgid "Once you have your Quarkus Maven project configured you can add the `narayana-lra` extension by running the following command in your project base directory:"
msgstr "Quarkus Mavenプロジェクトの設定が完了したら、プロジェクトのベースディレクトリで以下のコマンドを実行して、 `narayana-lra` エクステンションを追加できます。"

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:55
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/main/guides/lra.adoc:57
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/lra.adoc:71
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-narayana-lra</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/lra.adoc:74
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/lra.adoc:79
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-narayana-lra\")\n"
"implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n"
"implementation(\"io.quarkus:quarkus-rest-client-jackson\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/lra.adoc:85
#, fuzzy
msgid "`quarkus-narayana-lra` needs to be complemented with a server Jakarta REST implementation and a REST Client implementation in order to work.  This means that users should also have either `quarkus-resteasy-jackson` and `quarkus-rest-client-jackson` or `quarkus-resteasy-reactive-jackson` and `quarkus-rest-client-reactive-jackson` dependencies in their application."
msgstr "`quarkus-narayana-lra` を動作させるためには、サーバーの Jakarta REST 実装と REST Client 実装で補完する必要があります。つまり、ユーザーはアプリケーションに と または と のいずれかの依存関係を持つ必要があります。 `quarkus-resteasy-jackson` `quarkus-rest-client-jackson` `quarkus-resteasy-reactive-jackson` `quarkus-rest-client-reactive-jackson` "

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:89
msgid "If there is a running coordinator then this is all you need in order to create new LRAs and to enlist participants with them."
msgstr "コーディネーターがいる場合は、これだけで新しいLRAを作り、参加者を募ることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:94
msgid "The LRA extension can be configured by updating an `application.properties` file in the `src/main/resources` directory. The only LRA specific property is `quarkus.lra.coordinator-url=<url>` which specifies the HTTP endpoint of an external coordinator, for example:"
msgstr "LRAエクステンションは、 `src/main/resources` ディレクトリ内の `application.properties` ファイルを更新することで設定できます。LRA固有のプロパティは、 `quarkus.lra.coordinator-url=<url>` 、外部コーディネーターのHTTPエンドポイントを指定するだけです。"

#. type: delimited block -
#: upstream/_versions/main/guides/lra.adoc:98
#, no-wrap
msgid "quarkus.lra.coordinator-url=http://localhost:8080/lra-coordinator\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:106
msgid "For a Narayana coordinator the path component of the url is normally `lra-coordinator`.  Coordinators can be obtained from https://quay.io/repository/jbosstm/lra-coordinator or you can build your own coordinator using a maven pom that includes the appropriate dependencies. A Quarkus quickstart will be provided to show how to do this, or you can take a look at one of the https://github.com/jbosstm/quickstart/tree/master/rts/lra-examples/lra-coordinator[Narayana quickstarts].  Another option would be to run it managed inside a WildFly application server."
msgstr "ナラヤナのコーディネーターの場合、URLのパス部分は通常 `lra-coordinator` です。コーディネーターは `https://hub.docker.com/r/jbosstm/lra-coordinator` から入手できます。また、適切な依存関係を含むmaven pomを使用して独自のコーディネーターをビルドすることもできます。この方法については、Quarkusのクイックスタートが提供されます。また、 https://github.com/jbosstm/quickstart/tree/master/rts/lra-examples/lra-coordinator[Narayanaのクイックスタート]の1つを参照することもできます。もう一つの方法は、WildFlyアプリケーションサーバ内で管理された状態で実行することです。"

#. type: Title ==
#: upstream/_versions/main/guides/lra.adoc:107
#, no-wrap
msgid "Handling failures"
msgstr "失敗の処理"

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:116
msgid "When an LRA is told to finish, i.e. when a method annotated with `@LRA(end = true, ...)` is invoked, the coordinator will instruct all services involved in the interaction to finish. If a service is unavailable (or still finishing) then the coordinator will retry periodically. It is the user's responsibility to restart failed services on the same endpoint that they used when they first joined the LRA, or to tell the coordinator that they wish to be notified on new endpoints. An LRA is not deemed finished until *all* participants have acknowledged that they have finished."
msgstr "LRAが終了するように指示された場合、つまり、 `@LRA(end = true, …​)` でアノテーションされたメソッドが呼び出された場合、コーディネーターは対話に関わるすべてのサービスに終了するように指示します。サービスが利用できない場合（または終了中の場合）、コーディネーターは定期的に再試行します。失敗したサービスを、LRAに最初に参加したときに使用したのと同じエンドポイントで再起動するか、新しいエンドポイントでの通知を希望することをコーディネーターに伝えるのは、ユーザーの責任です。LRAは、 *すべての* 参加者が終了したことを確認するまで、終了したとはみなされません。"

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:124
msgid "The coordinator is responsible for reliably creating and ending LRAs and for managing participant enlistment, and it therefore must be available (for example if it or the network fail then something in the environment is responsible for restarting the coordinator or for repairing the network, respectively). To fulfill this task the coordinator must have access to durable storage for its logs (via a filesystem or in a database).  At the time of writing, managing coordinators is the responsibility of the user. An \"out-of-the-box\" solution will be forthcoming."
msgstr "コーディネーターは、LRAを確実に作成・終了し、参加者の参加を管理する役割を担っているため、利用可能でなければなりません（例えば、コーディネーターやネットワークに障害が発生した場合、環境の何かがコーディネーターの再起動やネットワークの修復を行う責任を持たなければなりません）。このタスクを遂行するために、コーディネーターはログを保存するための耐久性のあるストレージにアクセスできなければなりません（ファイルシステムまたはデータベースを介して）。本稿執筆時点では、コーディネーターの管理はユーザーの責任です。「すぐに使える」ソリューションが今後登場する予定です。"

#. type: Title ==
#: upstream/_versions/main/guides/lra.adoc:125
#, no-wrap
msgid "Examples"
msgstr "サンプル"

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:130
msgid "The following is a simple example of how to start an LRA and how to receive a notification when the LRA is later cancelled (the `@Compensate` annotated method is called) or closed (`@Complete` is called):"
msgstr "以下は、LRAを開始する方法と、後にLRAがキャンセルされたり（ `@Compensate` のアノテーション付きメソッドが呼び出される）、クローズされたり（ `@Complete` が呼び出される）したときに通知を受け取る方法の簡単な例です。"

#. type: delimited block -
#: upstream/_versions/main/guides/lra.adoc:150
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@ApplicationScoped\n"
"public class SimpleLRAParticipant\n"
"{\n"
"    @LRA(LRA.Type.REQUIRES_NEW) // a new LRA is created on method entry\n"
"    @Path(\"/work\")\n"
"    @PUT\n"
"    public void doInNewLongRunningAction(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId)\n"
"    {\n"
"        /*\n"
"         * Perform business actions in the context of the LRA identified by the\n"
"         * value in the injected Jakarta REST header. This LRA was started just before\n"
"         * the method was entered (REQUIRES_NEW) and will be closed when the\n"
"         * method finishes at which point the completeWork method below will be\n"
"         * invoked.\n"
"         */\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lra.adoc:166
#, no-wrap
msgid ""
"    @org.eclipse.microprofile.lra.annotation.Complete\n"
"    @Path(\"/complete\")\n"
"    @PUT\n"
"    public Response completeWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,\n"
"                                 String userData)\n"
"    {\n"
"        /*\n"
"         * Free up resources allocated in the context of the LRA identified by the\n"
"         * value in the injected Jakarta REST header.\n"
"         *\n"
"         * Since there is no @Status method in this class, completeWork MUST be\n"
"         * idempotent and MUST return the status.\n"
"         */\n"
"         return Response.ok(ParticipantStatus.Completed.name()).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lra.adoc:184
#, no-wrap
msgid ""
"    @org.eclipse.microprofile.lra.annotation.Compensate\n"
"    @Path(\"/compensate\")\n"
"    @PUT\n"
"    public Response compensateWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,\n"
"                                   String userData)\n"
"    {\n"
"        /*\n"
"         * The LRA identified by the value in the injected Jakarta REST header was\n"
"         * cancelled so the business logic should compensate for any actions\n"
"         * that have been performed while running in its context.\n"
"         *\n"
"         * Since there is no @Status method in this class, compensateWork MUST be\n"
"         * idempotent and MUST return the status\n"
"         */\n"
"         return Response.ok(ParticipantStatus.Compensated.name()).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:188
#, fuzzy
msgid "The example also shows that when an LRA is present its identifier can be obtained by reading the request headers via the `@HeaderParam` Jakarta REST annotation type."
msgstr "また、この例では、LRAが存在する場合、 `@HeaderParam` Jakarta RESTアノテーションタイプを使用してリクエストヘッダを読み取ることで、その識別子を取得することができることを示しています。"

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:194
msgid "And here's an example of how to start an LRA in one resource method and close it in a different resource method using the `end` element of the `LRA` annotation. It also shows how to configure the LRA to be automatically cancelled if the business method returns the particular HTTP status codes identified in the `cancelOn` and `cancelOnFamily` elements:"
msgstr "ここでは、 `LRA` アノテーションの `end` 要素を使用して、あるリソース・メソッドで LRA を開始し、別のリソース・メソッドで閉じる方法の例を示しています。また、ビジネスメソッドが `cancelOn` および `cancelOnFamily` 要素で特定される特定の HTTP ステータスコードを返した場合に、LRA が自動的にキャンセルされるように設定する方法も示しています。"

#. type: delimited block -
#: upstream/_versions/main/guides/lra.adoc:208
#, no-wrap
msgid ""
"  @LRA(value = LRA.Type.REQUIRED, // if there is no incoming context a new one is created\n"
"       cancelOn = {\n"
"           Response.Status.INTERNAL_SERVER_ERROR // cancel on a 500 code\n"
"       },\n"
"       cancelOnFamily = {\n"
"           Response.Status.Family.CLIENT_ERROR // cancel on any 4xx code\n"
"       },\n"
"       end = false) // the LRA will continue to run when the method finishes\n"
"  @Path(\"/book\")\n"
"  @POST\n"
"  public Response bookTrip(...) { ... }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lra.adoc:214
#, no-wrap
msgid ""
"  @LRA(value = LRA.Type.MANDATORY, // requires an active context before method can be executed\n"
"       end = true) // end the LRA started by the bookTrip method\n"
"  @Path(\"/confirm\")\n"
"  @PUT\n"
"  public Booking confirmTrip(Booking booking) throws BookingException { ... }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lra.adoc:221
#, fuzzy
msgid "The `end = false` element on the bookTrip method forces the LRA to continue running when the method finishes and the `end = true` element on the confirmTrip method forces the LRA (started by the bookTrip method) to be closed when the method finishes. Note that this end element can be placed on any Jakarta REST resource (ie one service can start the LRA whilst a different service ends it). There are many more examples in the https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc#java-annotations-for-lras[Microprofile LRA specification document] and in the https://github.com/eclipse/microprofile-lra/tree/master/tck/src/main/java/org/eclipse/microprofile/lra/tck[Microprofile LRA TCK]."
msgstr "bookTripメソッドの `end = false` 要素は、メソッドの終了時にLRAの実行を継続させ、confirmTripメソッドの `end = true` 要素は、メソッドの終了時にLRA（bookTripメソッドで開始）を終了させる。この終了要素は、Jakarta RESTリソースに置くことができることに注意してください（つまり、あるサービスがLRAを開始し、別のサービスがそれを終了することもできます）。 link:https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc#java-annotations-for-lras[Microprofile LRA仕様書と] link:https://github.com/eclipse/microprofile-lra/tree/master/tck/src/main/java/org/eclipse/microprofile/lra/tck[Microprofile LRA TCKには] 、この他にも多くの例が掲載されています。"
