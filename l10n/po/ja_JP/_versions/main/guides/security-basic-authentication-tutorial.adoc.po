# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-20 08:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:2
#, no-wrap
msgid "Secure a Quarkus application with Basic authentication and Jakarta Persistence"
msgstr "Basic認証とJakarta Persistenceを使用したQuarkusアプリケーションの保護"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:9
#, fuzzy
msgid "Secure your Quarkus application endpoints by combining the built-in Quarkus xref:security-basic-authentication.adoc[Basic authentication] with the Jakarta Persistence identity provider to enable role-based access control (RBAC).  The Jakarta Persistence `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
msgstr "Quarkus組み込みの xref:security-basic-authentication.adoc[Basic] 認証とJakarta Persistence IDプロバイダーを組み合わせることで、Quarkusアプリケーションのエンドポイントを保護し、役割ベースのアクセス制御（RBAC）を可能にします。Jakarta Persistence `IdentityProvider` は、 `SecurityIdentity` インスタンスを作成します。このインスタンスは、ユーザー認証時に使用され、Quarkusアプリケーションの安全性を高めるアクセス要求を検証し、認可します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:11
#, fuzzy
msgid "For more information about Jakarta Persistence, see the xref:security-jpa.adoc[Quarkus Security with Jakarta Persistence] guide."
msgstr "Jakarta Persistenceの詳細については、Quark xref:security-jpa.adoc[us Security with Jakarta Persistence] ガイドを参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:13
msgid "This tutorial prepares you for implementing more advanced security mechanisms in Quarkus, for example, how to use the OpenID Connect (OIDC) authentication mechanism."
msgstr "このチュートリアルでは、Quarkusでより高度なセキュリティメカニズムを実装するための準備、たとえば、OpenID Connect（OIDC）認証メカニズムの使用方法について説明します。"

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:14
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:18
#, no-wrap
msgid "What you will build"
msgstr "何を構築するか"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:21
#, fuzzy
msgid "To demonstrate different authorization policies, the steps in this tutorial guide you through building an application that provides the following endpoints:"
msgstr "このチュートリアルでは、さまざまな認可ポリシーを示すために、次のエンドポイントを提供するアプリケーションを構築する手順を説明します："

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:24
#, no-wrap
msgid "Endpoint"
msgstr "エンドポイント"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:25
#, no-wrap
msgid "Description"
msgstr "Description"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:25
#, no-wrap
msgid "`/api/public`"
msgstr "`/api/public`"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:26
#, no-wrap
msgid "The `/api/public` endpoint can be accessed anonymously."
msgstr "`/api/public` エンドポイントには匿名でアクセスすることができます。"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:26
#, no-wrap
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:29
#, fuzzy, no-wrap
msgid ""
"The `/api/admin` endpoint is protected with role-based access control (RBAC).\n"
"Only users granted with the `admin` role can access it.\n"
"At this endpoint, the `@RolesAllowed` annotation enforces the access constraint declaratively."
msgstr "`/api/admin` エンドポイントは、ロールベースのアクセス制御（RBAC）で保護されています。 `admin` ロールを付与されたユーザーのみがアクセスできます。このエンドポイントでは、 `@RolesAllowed` アノテーションが宣言的にアクセス制約を強制します。"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:29
#, no-wrap
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:32
#, fuzzy, no-wrap
msgid ""
"The `/api/users/me` endpoint is protected by RBAC.\n"
"Only users that have the `user` role can access the endpoint.\n"
"This endpoint returns the caller's username as a string."
msgstr "`/api/users/me` エンドポイントは RBAC によって保護されています。 `user` ロールを持つユーザーのみがエンドポイントにアクセスできます。このエンドポイントは、呼び出し元のユーザー名を文字列として返します。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:37
#, fuzzy
msgid "To examine the completed example, download the {quickstarts-archive-url}[archive] or clone the Git repository:"
msgstr "完成したサンプルを見るには、{quickstarts-archive-url}[archive]をダウンロードするか、Gitリポジトリをクローンしてください："

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:41
#, no-wrap
msgid "git clone {quickstarts-clone-url}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:44
#, fuzzy
msgid "You can find the solution in the `security-jpa-quickstart` link:{quickstarts-tree-url}/security-jpa-quickstart[directory] in the upstream {ProductName} community."
msgstr "アップストリームの{ProductName}コミュニティの `security-jpa-quickstart` link:{quickstarts-tree-url}/security-jpa-quickstart[ディレクトリに] 解決策があります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:49
#, fuzzy, no-wrap
msgid "Create and verify the Maven project"
msgstr "Mavenプロジェクトの作成と検証"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:52
#, fuzzy
msgid "For Quarkus Security to be able to map your security source to Jakarta Persistence entities, ensure that the Maven project that is used in this tutorial includes the `security-jpa` or the `security-jpa-reactive` extension."
msgstr "Quarkus SecurityでセキュリティソースをJakarta Persistenceエンティティにマッピングするには、このチュートリアルで使用するMavenプロジェクトに `security-jpa` または `security-jpa-reactive` 拡張機能が含まれていることを確認します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:57
#, fuzzy
msgid "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] is used to store your user identities but you can also use xref:hibernate-orm.adoc[Hibernate ORM] with the `security-jpa` extension.  Both xref:hibernate-reactive.adoc[Hibernate Reactive] and xref:hibernate-reactive-panache.adoc[Hibernate Reactive with Panache] can be used with the `security-jpa-reactive` extension."
msgstr "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] はユーザー ID を保存するために使用されますが、 xref:hibernate-orm.adoc[Hibernate ORM] with the `security-jpa` エクステンションを使用することもできます。 xref:hibernate-reactive.adoc[Hibernate Reactive] と xref:hibernate-reactive-panache.adoc[Hibernate Reactive with Panache] はどちらも `security-jpa-reactive` 拡張モジュールと一緒に使用できます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:60
#, fuzzy
msgid "You must also add your preferred database connector library.  The instructions in this example tutorial use a PostgreSQL database for the identity store."
msgstr "また、お好みのデータベース・コネクタ・ライブラリを追加する必要があります。このチュートリアル例の説明では、ID ストアに PostgreSQL データベースを使用します。"

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:63
#, no-wrap
msgid "Create the Maven project"
msgstr "Maven プロジェクトの作成"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:66
#, fuzzy
msgid "You can either create a new Maven project with the Security Jakarta Persistence extension or you can add the extension to an existing Maven project. You can use either Hibernate ORM or Hibernate Reactive."
msgstr "Security Jakarta Persistence拡張を使用して新しいMavenプロジェクトを作成するか、既存のMavenプロジェクトに拡張を追加することができます。Hibernate ORM または Hibernate Reactive のいずれかを使用できます。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:68
#, fuzzy
msgid "To create a new Maven project with the Jakarta Persistence extension, complete one of the following steps:"
msgstr "Jakarta Persistenceエクステンションを使用して新しいMavenプロジェクトを作成するには、以下の手順のいずれかを実行します："

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:69
#, fuzzy
msgid "To create the Maven project with Hibernate ORM, use the following command:"
msgstr "Hibernate ORM付きのMavenプロジェクトを作成するには、以下のコマンドを使用します："

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:76
#, fuzzy
msgid "To create the Maven project with Hibernate Reactive, use the following command:"
msgstr "Hibernate ReactiveでMavenプロジェクトを作成するには、以下のコマンドを使用します："

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:84
#, fuzzy
msgid "To add the Jakarta Persistence extension to an existing Maven project, complete one of the following steps:"
msgstr "既存のMavenプロジェクトにJakarta Persistenceエクステンションを追加するには、以下の手順のいずれかを実行します："

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:86
#, fuzzy
msgid "To add the Security Jakarta Persistence extension to an existing Maven project with Hibernate ORM, run the following command from your project base directory:"
msgstr "Security Jakarta PersistenceエクステンションをHibernate ORMを持つ既存のMavenプロジェクトに追加するには、プロジェクトのベース・ディレクトリーから以下のコマンドを実行します："

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:92
#, fuzzy
msgid "To add the Security Jakarta Persistence extension to an existing Maven project with Hibernate Reactive, run the following command from your project base directory:"
msgstr "既存のMavenプロジェクトにHibernate Reactiveを使用してSecurity Jakarta Persistenceエクステンションを追加するには、プロジェクトのベース・ディレクトリーから以下のコマンドを実行します："

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:98
#, fuzzy, no-wrap
msgid "Verify the quarkus-security-jpa dependency"
msgstr "Quarkus-security-jpaの依存関係を確認します。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:101
#, fuzzy
msgid "After you have run either of the preceding commands to create the Maven project, verify that the `security-jpa` dependency was added to your project build XML file."
msgstr "前述のいずれかのコマンドを実行して Maven プロジェクトを作成したら、 `security-jpa` 依存関係がプロジェクトのビルド XML ファイルに追加されていることを確認します。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:103
#, fuzzy
msgid "To verify the `security-jpa` extension, check for the following configuration:"
msgstr "`security-jpa` の拡張を確認するには、以下の構成をチェックする："

#. type: Block title
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:106
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:124
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:112
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security-jpa</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:115
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:133
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:118
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-security-jpa\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:121
#, fuzzy
msgid "To verify the `security-jpa-reactive` extension, check for the following configuration:"
msgstr "`security-jpa-reactive` の拡張を確認するには、以下の構成をチェックする："

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:130
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security-jpa-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:136
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-security-jpa-reactive\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:139
#, no-wrap
msgid "Write the application"
msgstr "アプリケーションの記述"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:142
#, fuzzy
msgid "Secure the API endpoint to determine who can access the application by using one of the following approaches:"
msgstr "以下のアプローチのいずれかを使用して、誰がアプリケーションにアクセスできるかを決定するために、APIエンドポイントを保護する："

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:145
#, fuzzy
msgid "Implement the `/api/public` endpoint to allow all users access to the application.  Add a regular Jakarta REST resource to your Java source code, as shown in the following code snippet:"
msgstr "すべてのユーザーがアプリケーションにアクセスできるように、 `/api/public` エンドポイントを実装します。次のコード・スニペットに示すように、通常の Jakarta REST リソースを Java ソース・コードに追加します："

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:150
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:177
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:203
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:231
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:333
#, no-wrap
msgid "package org.acme.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:156
#, no-wrap
msgid ""
"import jakarta.annotation.security.PermitAll;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:159
#, no-wrap
msgid ""
"@Path(\"/api/public\")\n"
"public class PublicResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:167
#, no-wrap
msgid ""
"    @GET\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String publicResource() {\n"
"        return \"public\";\n"
"   }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:172
#, fuzzy
msgid "Implement the `/api/public` endpoint to allow all users to access the application.  The source code for the `/api/admin` endpoint is similar, but instead, you use a `@RolesAllowed` annotation to ensure that only users granted the `admin` role can access the endpoint.  Add a Jakarta REST resource with the following `@RolesAllowed` annotation:"
msgstr "`/api/public` エンドポイントを実装して、すべてのユーザがアプリケーションにアクセスできるようにします。 `/api/admin` エンドポイントのソースコードも同様ですが、代わりに `@RolesAllowed` アノテーションを使用して、 `admin` ロールを付与されたユーザのみがエンドポイントにアクセスできるようにします。以下の `@RolesAllowed` アノテーションを持つ Jakarta REST リソースを追加します："

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:183
#, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:186
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:194
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String adminResource() {\n"
"         return \"admin\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:198
#, fuzzy
msgid "Implement an `/api/users/me` endpoint that can only be accessed by users who have the `user` role.  Use `SecurityContext` to get access to the currently authenticated `Principal` user and to return their username, all of which is retrieved from the database."
msgstr "`user` ロールを持つユーザーのみがアクセスできる `/api/users/me` エンドポイントを実装する。 `SecurityContext` を使用して、現在認証されている `Principal` ユーザーにアクセスし、そのユーザー名を返します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:210
#, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.core.Context;\n"
"import jakarta.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:213
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UserResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:221
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Path(\"/me\")\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        return securityContext.getUserPrincipal().getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:224
#, no-wrap
msgid "Define the user entity"
msgstr "ユーザーエンティティーの定義"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:227
msgid "You can now describe how you want security information to be stored in the model by adding annotations to the `user` entity, as outlined in the following code snippet:"
msgstr "次のコードで説明するように、`user` エンティティにアノテーションを追加することで、セキュリティ情報をどのようにモデルに格納したいかを記述することができます:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:234
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.Table;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:241
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:252
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:267
#, no-wrap
msgid ""
"    /**\n"
"     * Adds a new user to the database\n"
"     * @param username the username\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:271
msgid "The `security-jpa` extension initializes only if a single entity is annotated with `@UserDefinition`."
msgstr "`security-jpa` エクステンションは、単一のエンティティが `@UserDefinition` でアノテーションされている場合にのみ、初期化されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:273
msgid "The `@UserDefinition` annotation must be present on a single entity and can be either a regular Hibernate ORM entity or a Hibernate ORM with Panache entity."
msgstr "アノテーション `@UserDefinition` は単一のエンティティに存在する必要があり、通常の Hibernate ORM エンティティまたは Panache 付き Hibernate ORM エンティティのいずれかにすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:274
#, fuzzy
msgid "Indicates the field used for the username."
msgstr "ユーザー名に使用するフィールドを示す。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:277
#, fuzzy
msgid "Indicates the field used for the password.  By default, it uses bcrypt-hashed passwords.  You can configure it to use plain text or custom passwords."
msgstr "パスワードに使用するフィールドを示す。デフォルトでは、bcryptハッシュ化されたパスワードが使用されます。プレーンテキストまたはカスタムパスワードを使用するように設定できます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:278
#, fuzzy
msgid "Indicates the comma-separated list of roles added to the target principal representation attributes."
msgstr "対象のプリンシパル表現属性に追加されるロールのコンマ区切りリストを示す。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:279
#, fuzzy
msgid "Allows us to add users while hashing passwords with the proper bcrypt hash."
msgstr "適切なbcryptハッシュでパスワードをハッシュしながらユーザーを追加できる。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:282
#, fuzzy
msgid "Hibernate Reactive Panache uses `io.quarkus.hibernate.reactive.panache.PanacheEntity` instead of `io.quarkus.hibernate.orm.panache.PanacheEntity`.  For more information, see link:{quickstarts-tree-url}/security-jpa-reactive-quickstart/src/main/java/org/acme/elytron/security/jpa/reactive/User.java[User file]."
msgstr "Hibernate Reactive Panache は、 `io.quarkus.hibernate.orm.panache.PanacheEntity` の代わりに `io.quarkus.hibernate.reactive.panache.PanacheEntity` を使用します。 詳細については、 link:{quickstarts-tree-url}/security-jpa-reactive-quickstart/src/main/java/org/acme/elytron/security/jpa/reactive/User.java[ユーザーファイルを] 参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:283
#, no-wrap
msgid "Configure the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:286
#, fuzzy
msgid "Enable the built-in Quarkus xref:security-basic-authentication.adoc[Basic authentication] mechanism by setting the `quarkus.http.auth.basic` property to `true`:"
msgstr "組み込みのQuarkus xref:security-basic-authentication.adoc[Basic] 認証メカニズムを有効にするには、 `quarkus.http.auth.basic` プロパティを `true` に設定します："

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:288
msgid "`quarkus.http.auth.basic`=true`"
msgstr "`quarkus.http.auth.basic=true`"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:293
#, fuzzy
msgid "When secure access is required and no other authentication mechanisms are enabled, the built-in xref:security-basic-authentication.adoc[Basic authentication] of Quarkus is the fallback authentication mechanism.  Therefore, in this tutorial, you do not need to set the property `quarkus.http.auth.basic` to `true`."
msgstr "安全なアクセスが必要で、他の認証メカニズムが有効になっていない場合、Quarkusの組み込み xref:security-basic-authentication.adoc[Basic] 認証がフォールバック認証メカニズムになります。したがって、このチュートリアルでは、プロパティ `quarkus.http.auth.basic` を `true` に設定する必要はありません。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:297
#, fuzzy
msgid "Configure at least one data source in the `application.properties` file so the `security-jpa` extension can access your database.  For example:"
msgstr "`security-jpa` エクステンションがデータベースにアクセスできるように、 `application.properties` ファイルに少なくとも 1 つのデータソースを設定します。例えば"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:302
#, no-wrap
msgid "quarkus.http.auth.basic=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:307
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus\n"
"quarkus.datasource.password=quarkus\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:security_jpa\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:309
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:381
#, no-wrap
msgid "quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:313
msgid "To initialize the database with users and roles, implement the `Startup` class, as outlined in the following code snippet:"
msgstr "データベースをユーザーとロールで初期化するには、次のコードで説明するように `Startup` クラスを実装します:"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:318
#, fuzzy
msgid "The URLs of Reactive datasources that are used by the `security-jpa-reactive` extension are set with the `quarkus.datasource.reactive.url` configuration property and not the `quarkus.datasource.jdbc.url` configuration property that is typically used by JDBC datasources."
msgstr "`security-jpa-reactive` エクステンションで使用される Reactive データソースの URL は、通常 JDBC データソースで使用される `quarkus.datasource.jdbc.url` 設定プロパティではなく、 `quarkus.datasource.reactive.url` 設定プロパティで設定されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:322
#, no-wrap
msgid "%prod.quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5431/security_jpa\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:328
#, fuzzy
msgid "In this tutorial, a PostgreSQL database is used for the identity store.  link:https://hibernate.org/orm/[Hibernate ORM] automatically creates the database schema on startup.  This approach is suitable for development but is not recommended for production.  Therefore adjustments are needed in a production environment."
msgstr "このチュートリアルでは、ID ストアに PostgreSQL データベースを使用します。Hibern link:https://hibernate.org/orm/[ate ORM] は起動時にデータベーススキーマを自動的に作成します。このアプローチは開発には適していますが、本番環境では推奨されません。したがって、本番環境では調整が必要です。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:337
#, no-wrap
msgid ""
"import jakarta.enterprise.event.Observes;\n"
"import jakarta.inject.Singleton;\n"
"import jakarta.transaction.Transactional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:339
#, no-wrap
msgid "import io.quarkus.runtime.StartupEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:351
#, no-wrap
msgid ""
"@Singleton\n"
"public class Startup {\n"
"    @Transactional\n"
"    public void loadUsers(@Observes StartupEvent evt) {\n"
"        // reset and load all test users\n"
"        User.deleteAll();\n"
"        User.add(\"admin\", \"admin\", \"admin\");\n"
"        User.add(\"user\", \"user\", \"user\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:354
#, fuzzy
msgid "The preceding example demonstrates how the application can be protected and identities provided by the specified database."
msgstr "先の例では、アプリケーションを保護し、指定されたデータベースによってIDを提供する方法を示している。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:359
msgid "In a production environment, do not store plain text passwords.  As a result, the `security-jpa` defaults to using bcrypt-hashed passwords."
msgstr "本番環境では、プレーンテキストのパスワードは保存しないでください。 そのため、 `security-jpa` はデフォルトで bcrypt でハッシュ化したパスワードを使用します。"

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:361
#, fuzzy, no-wrap
msgid "Test your application by using Dev Services for PostgreSQL"
msgstr "Dev Services for PostgreSQLを使用してアプリケーションをテストします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:364
#, fuzzy
msgid "Complete the integration testing of your application in JVM and native modes by using xref:dev-services.adoc#databases[Dev Services for PostgreSQL] before you run your application in production mode."
msgstr "本番モードでアプリケーションを実行する前に、 xref:dev-services.adoc#databases[Dev Services for PostgreSQLを] 使用して、JVMモードとネイティブ・モードでアプリケーションの統合テストを完了してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:366
#, fuzzy
msgid "To run your application in dev mode:"
msgstr "開発モードでアプリケーションを実行するには"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:372
msgid "The following properties configuration demonstrates how you can enable PostgreSQL testing to run in production (`prod`) mode only.  In this scenario, `Dev Services for PostgreSQL` launches and configures a `PostgreSQL` test container."
msgstr "以下のプロパティ構成は、PostgreSQLのテストを本番環境( `prod` )モードのみで実行できるようにする方法を示しています。このシナリオでは、 `Dev Services for PostgreSQL` が `PostgreSQL` テストコンテナを起動し、構成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:379
#, no-wrap
msgid ""
"%prod.quarkus.datasource.db-kind=postgresql\n"
"%prod.quarkus.datasource.username=quarkus\n"
"%prod.quarkus.datasource.password=quarkus\n"
"%prod.quarkus.datasource.jdbc.url=jdbc:postgresql:elytron_security_jpa\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:384
msgid "If you add the `%prod.` profile prefix, data source properties are not visible to `Dev Services for PostgreSQL` and are only observed by an application running in production mode."
msgstr "プロファイルの接頭辞に `%prod.` を付けると、データソースのプロパティは `Dev Services for PostgreSQL` からは見えなくなり、本番モードで動作するアプリケーションからのみ表示されるようになります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:386
msgid "To write the integration test, use the following code sample:"
msgstr "統合テストを書くには、次のコードサンプルを使用します:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:390
#, no-wrap
msgid "package org.acme.elytron.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:394
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.get;\n"
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.core.Is.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:397
#, no-wrap
msgid ""
"import org.apache.http.HttpStatus;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:399
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:402
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class JpaSecurityRealmTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:408
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessPublicWhenAnonymous() {\n"
"        get(\"/api/public\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:410
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:418
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:429
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:416
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldNotAccessAdminWhenAnonymous() {\n"
"        get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_UNAUTHORIZED);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:427
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessAdminWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:439
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldNotAccessUserWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_FORBIDDEN);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:451
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessUserAndGetIdentityWhenUserAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"user\", \"user\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK)\n"
"                .body(is(\"user\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:454
msgid "As you can see in this code sample, you do not need to start the test container from the test code."
msgstr "このコードサンプルからわかるように、テストコードからテストコンテナーを起動する必要はありません。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:460
#, fuzzy
msgid "When you start your application in dev mode, `Dev Services for PostgreSQL` launches a `PostgreSQL` `devmode` container so that you can start developing your application.  While developing your application, you can add tests one by one and run them using the xref:continuous-testing.adoc[Continuous Testing] feature.  `Dev Services for PostgreSQL` supports testing while you develop by providing a separate `PostgreSQL` test container that does not conflict with the `devmode` container."
msgstr "アプリケーションを開発モードで起動すると、 `Dev Services for PostgreSQL` `PostgreSQL` `devmode` コンテナが起動し、アプリケーションの開発を開始することができます。アプリケーションの開発中に、テストをひとつずつ追加し、 xref:continuous-testing.adoc[継続的テスト] 機能を使ってテストを実行することができます。 `Dev Services for PostgreSQL` は、 `devmode` コンテナと衝突しない、独立した `PostgreSQL` テストコンテナを提供することで、開発中のテストをサポートしています。"

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:462
#, fuzzy, no-wrap
msgid "Use Curl or a browser to test your application"
msgstr "Curlまたはブラウザを使ってアプリケーションをテストする"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:465
msgid "Use the following example to start the PostgreSQL server:"
msgstr "下記の例のように、PostgreSQL サーバーを起動します:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:470
#, no-wrap
msgid ""
"docker run --rm=true --name security-getting-started -e POSTGRES_USER=quarkus \\\n"
"           -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=elytron_security_jpa \\\n"
"           -p 5432:5432 postgres:14.1\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:471
#, no-wrap
msgid "Compile and run the application"
msgstr "アプリケーションのコンパイルと実行"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:474
msgid "Compile and run your Quarkus application by using one of the following methods:"
msgstr "次のいずれかの方法で、Quarkusアプリケーションをコンパイルして実行します:"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:475
msgid "JVM mode"
msgstr "JVM モード"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:476
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:492
msgid "Compile the application:"
msgstr "アプリケーションをコンパイルします:"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:481
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:497
msgid "Run the application:"
msgstr "アプリケーションの実行:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:486
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:490
msgid "Native mode"
msgstr "ネイティブモード"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:502
#, no-wrap
msgid "./target/security-jpa-quickstart-runner\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:505
#, no-wrap
msgid "Access and test the application security"
msgstr "アプリケーションのセキュリティへのアクセスおよびテスト"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:508
#, fuzzy
msgid "When your application is running, you can access its endpoints by using one of the following Curl commands."
msgstr "アプリケーションの実行中は、以下のCurlコマンドのいずれかを使用してエンドポイントにアクセスできます。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:510
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:523
msgid "Connect to a protected endpoint anonymously:"
msgstr "保護されたリソースを匿名で攻撃してみましょう:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:518
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/public\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 6\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:520
#, no-wrap
msgid "public\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:532
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/admin\n"
"HTTP/1.1 401 Unauthorized\n"
"Content-Length: 14\n"
"Content-Type: text/html;charset=UTF-8\n"
"WWW-Authenticate: Basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:534
#, no-wrap
msgid "Not authorized\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:537
msgid "Connect to a protected endpoint as an authorized user:"
msgstr "認証されたユーザーとして保護されたエンドポイントに接続します:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:545
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 5\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:547
#, no-wrap
msgid "admin\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:551
#, fuzzy
msgid "You can also access the same endpoint URLs by using a browser."
msgstr "また、ブラウザーを使って同じエンドポイントURLにアクセスすることもできる。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:555
#, fuzzy
msgid "If you use a browser to anonymously connect to a protected resource, a Basic authentication form displays, prompting you to enter credentials."
msgstr "ブラウザを使用して保護されたリソースに匿名で接続すると、Basic認証フォームが表示され、クレデンシャルの入力が求められます。"

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:558
#, no-wrap
msgid "Results"
msgstr "結果"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:562
#, fuzzy
msgid "When you provide the credentials of an authorized user, for example, `admin:admin`, the Jakarta Persistence security extension authenticates and loads the roles of the user.  The `admin` user is authorized to access the protected resources."
msgstr "認可されたユーザーのクレデンシャル（例えば、 `admin:admin` ）を提供すると、Jakarta Persistenceセキュリティエクステンションは、そのユーザーのロールを認証してロードします。 `admin` ユーザーは、保護されたリソースへのアクセスが認可されます。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:564
#, fuzzy
msgid "If a resource is protected with `@RolesAllowed(\"user\")`, the user `admin` is not authorized to access the resource because it is not assigned to the \"user\" role, as shown in the following shell example:"
msgstr "リソースが `@RolesAllowed(\"user\")` で保護されている場合、次のシェルの例に示すように、ユーザー `admin` は「ユーザー」ロールに割り当てられていないため、リソースへのアクセスは認可されません："

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:571
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me\n"
"HTTP/1.1 403 Forbidden\n"
"Content-Length: 34\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:573
#, no-wrap
msgid "Forbidden\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:576
#, fuzzy
msgid "Finally, the user named `user` is authorized and the security context contains the principal details, for example, the username."
msgstr "最後に、 `user` というユーザが認可され、セキュリティコンテキストには、例えばユーザ名などの主な詳細が含まれる。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:583
#, no-wrap
msgid ""
"$ curl -i -X GET -u user:user http://localhost:8080/api/users/me\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 4\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:585
#, no-wrap
msgid "user\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:589
#, no-wrap
msgid "What's next"
msgstr "次のステップ"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:593
#, fuzzy
msgid "Congratulations! You have learned how to create and test a secure Quarkus application by combining the built-in xref:security-basic-authentication.adoc[Basic authentication] in Quarkus with the Jakarta Persistence identity provider."
msgstr "おめでとうございます！Quarkusに組み込まれている xref:security-basic-authentication.adoc[Basic] 認証とJakarta Persistence IDプロバイダを組み合わせて、安全なQuarkusアプリケーションを作成し、テストする方法を学びました。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:596
#, fuzzy
msgid "After completing this tutorial, you can explore more advanced security mechanisms in Quarkus.  The following information shows you how to use `OpenID Connect` for secure single sign-on access to your Quarkus endpoints:"
msgstr "このチュートリアルを完了すると、Quarkusのさらに高度なセキュリティメカニズムを探究することができます。以下の情報では、Quarkusエンドポイントへのセキュアなシングルサインオンアクセスに `OpenID Connect` ："

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:598
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:607
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証]"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:599
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:608
#, fuzzy
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[ウェブアプリケーションを保護するOIDCコードフローメカニズム]"

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:600
#, no-wrap
msgid "References"
msgstr "リファレンス"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:603
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkusセキュリティの概要]"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:604
#, fuzzy
msgid "xref:security-architecture.adoc[Quarkus Security architecture]"
msgstr "xref:security-architecture.adoc[Quarkus セキュリティアーキテクチャ]"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:605
#, fuzzy
msgid "xref:security-authentication-mechanisms.adoc#other-supported-authentication-mechanisms[Other supported authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#other-supported-authentication-mechanisms[その他の認証メカニズム]"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:606
#, fuzzy
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr "xref:security-identity-providers.adoc[アイデンティティ・プロバイダー]"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:609
msgid "xref:hibernate-orm-panache.adoc[Simplified Hibernate ORM with Panache]"
msgstr "xref:hibernate-orm-panache.adoc[PanacheでシンプルになったHibernate ORM]"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:609
#, fuzzy
msgid "xref:hibernate-orm.adoc[Using Hibernate ORM and Jakarta Persistence]"
msgstr "xref:hibernate-orm.adoc[Hibernate ORMとJakarta Persistenceを使う。]"

#~ msgid "Create a Maven project"
#~ msgstr "Maven プロジェクトの作成"

#, fuzzy
#~ msgid "For Quarkus Security to be able to map your security source to Jakarta Persistence entities, ensure that the Maven project that is used in this tutorial includes the `security-jpa` or the `security-jpa-reactive` extension.  You can either create a new Maven project with the Security Jakarta Persistence extension or you can add the extension to an existing Maven project."
#~ msgstr "Quarkus SecurityでセキュリティソースをJakarta Persistenceエンティティにマッピングするには、このチュートリアルで使用するMavenプロジェクトに `security-jpa` または `security-jpa-reactive` エクステンションが含まれていることを確認してください。Security Jakarta Persistenceエクステンションを使用して新しいMavenプロジェクトを作成するか、既存のMavenプロジェクトにエクステンションを追加します。"

#, fuzzy
#~ msgid "After you run either of the preceding commands, verify that the `security-jpa` dependency was added to your project build XML file,as follows:"
#~ msgstr "前述のいずれかのコマンドを実行した後、 `security-jpa` 依存関係がプロジェクトのビルド XML ファイルに追加されていることを、以下のように確認してください："

#, fuzzy
#~ msgid "Similarly, if you added the `security-jpa-reactive` extension, verify that the correct dependency was added to your project build XML file, as follows:"
#~ msgstr "同様に、 `security-jpa-reactive` エクステンションを追加した場合は、正しい依存関係がプロジェクトのビルド XML ファイルに追加されているか、以下のように確認してください："

#, fuzzy
#~ msgid "Let's start by implementing the `/api/public` endpoint to allow all users access to access the application.  Add a regular Jakarta REST resource to your Java source code, as outlined in the following code snippet:"
#~ msgstr "まず、すべてのユーザーがアプリケーションにアクセスできるように、 `/api/public` エンドポイントを実装することから始めましょう。次のコード・スニペットで説明するように、通常のjakarta RESTリソースをJavaソース・コードに追加してください："

#, fuzzy
#~ msgid "The source code for the `/api/admin` endpoint is similar, but instead, you use a `@RolesAllowed` annotation to ensure that only users granted the `admin` role can access the endpoint.  Add a Jakarta REST resource with the following `@RolesAllowed` annotation:"
#~ msgstr "`/api/admin` エンドポイントのソースコードも同様ですが、代わりに `@RolesAllowed` アノテーションを使用して、 `admin` ロールを付与されたユーザーだけがエンドポイントにアクセスできるようにします。次の `@RolesAllowed` アノテーションを持つ Jakarta REST リソースを追加します："

#, fuzzy
#~ msgid "Finally, implement an `/api/users/me` endpoint that can only accessed by users who have the `user` role.  Use `SecurityContext` to get access to the currently authenticated `Principal` user and to return their username, all of which is retrieved from the database."
#~ msgstr "最後に、 `user` ロールを持つユーザーのみがアクセスできる `/api/users/me` エンドポイントを実装します。 `SecurityContext` を使用して、現在認証されている `Principal` ユーザーにアクセスし、そのユーザー名を返します。"

#~ msgid "Use `curl` or a browser to test your application"
#~ msgstr "`curl` またはブラウザを使用して、アプリケーションをテストします"

#~ msgid "Compile the application: Run the application:"
#~ msgstr "アプリケーションのコンパイル: アプリケーションの実行:"

#, fuzzy
#~ msgid "When your application is running, you can access its endpoints by using one of the following `curl` commands.  You can also access the same endpoint URLs by using a browser."
#~ msgstr "アプリケーションの実行中は、以下の `curl` コマンドのいずれかを使用してエンドポイントにアクセスできます。ブラウザを使って同じエンドポイントURLにアクセスすることもできます。"

#~ msgid "Finally, the user name `user` is authorized and the security context contains the principal details, for example, the user name."
#~ msgstr "最後に、ユーザ名 `user` が認証され、セキュリティコンテキストには、例えばユーザ名などの主要な詳細が含まれます。"

#, fuzzy
#~ msgid "Complete the integration testing of your application in JVM and native modes by using xref:https://quarkus.io/guides/dev-services#databases[Dev Services for PostgreSQL] before you run your application in production mode."
#~ msgstr "本番モードでアプリケーションを実行する前に、 xref:https://quarkus.io/guides/dev-services.adoc#databases[Dev] Services xref:https://quarkus.io/guides/dev-services.adoc#databases[for PostgreSQLを] 使用して、JVMモードとネイティブ・モードでアプリケーションの統合テストを完了してください。"

#, fuzzy
#~ msgid "You can find the solution in the `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory] in the upstream {ProductName} community."
#~ msgstr "アップストリーム {ProductName} コミュニティの `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[ディレクトリ] に解決策があります。"

#, fuzzy
#~ msgid "Hibernate Reactive Panache uses `io.quarkus.hibernate.reactive.panache.PanacheEntity` instead of `io.quarkus.hibernate.orm.panache.PanacheEntity`.  For more information, see {quickstarts-tree-url}/security-jpa-reactive-quickstart/src/main/java/org/acme/elytron/security/jpa/reactive/User.java[User file]."
#~ msgstr "HibernateリアクティブPanacheは、 `io.quarkus.hibernate.orm.panache.PanacheEntity` の代わりに `io.quarkus.hibernate.reactive.panache.PanacheEntity` を使用します。詳細については、{quickstarts-tree-url}/security-jpa-reactive-quickstart/src/main/java/org/acme/elytron/security/jpa/reactive/User.java[Userファイル]を参照してください。"

#, fuzzy
#~ msgid "Secure your Quarkus application endpoints by combining the built-in Quarkus xref:security-basic-authentication-concept.adoc[Basic authentication] with the Jakarta Persistence identity provider to enable role-based access control (RBAC).  The Jakarta Persistence `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
#~ msgstr "Quarkus xref:security-basic-authentication-concept.adoc[Basic] 認証とJakarta Persistence IDプロバイダーを組み合わせて、役割ベースのアクセス制御（RBAC）を可能にすることで、Quarkusアプリケーションのエンドポイントを保護します。Jakarta Persistence `IdentityProvider` は、 `SecurityIdentity` インスタンスを作成します。このインスタンスは、ユーザー認証時に使用され、アクセス要求の確認と認可を行い、Quarkusアプリケーションを安全にします。"

#, fuzzy
#~ msgid "For more information about Jakarta Persistence, see the xref:security-jpa-concept.adoc[Quarkus Security with Jakarta Persistence] section."
#~ msgstr "Jakarta Persistenceの詳細については、「Quarkus Security xref:security-jpa-concept.adoc[with Jakarta Persistence] 」のセクションを参照してください。"

#, fuzzy
#~ msgid ""
#~ "The `/api/admin` endpoint is protected with role-based access control (RBAC), and only users who have been granted the `admin` role can access it.\n"
#~ "At this endpoint, the `@RolesAllowed` annotation enforces the access constraint declaratively."
#~ msgstr "`/api/admin` のエンドポイントは、役割ベースのアクセス制御（RBAC）で保護されており、 `admin` の役割を与えられたユーザーだけがアクセスできます。このエンドポイントでは、 `@RolesAllowed` アノテーションがアクセス制約を宣言的に強制しています。"

#, fuzzy
#~ msgid ""
#~ "The `/api/users/me` endpoint is protected by RBAC. Only users that have the `user` role can access the endpoint.\n"
#~ "This endpoint returns the caller's username as a string."
#~ msgstr "`/api/users/me` のエンドポイントは RBAC で保護されています。 `user` のロールを持つユーザーのみがエンドポイントにアクセスできます。このエンドポイントは、呼び出し元のユーザー名を文字列として返します。"

#~ msgid "If you just want to examine the code, you can fast-forward to the completed example by using one of the following ways:"
#~ msgstr "コードを確かめるだけなら、次のいずれかの方法で、完成例まで早送りすることができます:"

#~ msgid "Download the {quickstarts-archive-url}[archive]"
#~ msgstr "{quickstarts-archive-url}[アーカイブ]をダウンロードする。"

#~ msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`"
#~ msgstr "Gitリポジトリをクローンする: `git clone {quickstarts-clone-url}`"

#, fuzzy
#~ msgid "You can find the solution using the `security-jpa` extension in the `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory] and the solution using the `security-jpa-reactive` extension in the `security-jpa-reactive-quickstart` {quickstarts-tree-url}/security-jpa-reactive-quickstart[directory]."
#~ msgstr "`security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[ディレクトリ]にある `security-jpa` エクステンションを使用した解決策と、 `security-jpa-reactive-quickstart` {quickstarts-tree-url}/security-jpa-reactive-quickstart[ディレクトリ]にある `security-jpa-reactive` エクステンションを使用した解決策を見つけることができます。"

#, fuzzy
#~ msgid "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] is used to store your user identities but you can also use xref:hibernate-orm.adoc[Hibernate ORM] with the `security-jpa` extension.  Correspondingly, both xref:hibernate-reactive.adoc[Hibernate Reactive] and xref:hibernate-reactive-panache.adoc[Hibernate Reactive with Panache] can be used with the `security-jpa-reactive` extension."
#~ msgstr "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] はユーザー ID を保存するために使用されますが、 xref:hibernate-orm.adoc[Hibernate ORM] with the `security-jpa` エクステンションを使用することもできます。これに対応して、 xref:hibernate-reactive.adoc[Hibernate Reactive] と xref:hibernate-reactive-panache.adoc[Hibernate Reactive with Panache] の両方を `security-jpa-reactive` 拡張モジュールで使用できます。"

#~ msgid "Verification"
#~ msgstr "検証"

#, fuzzy
#~ msgid "When you run either command to add `securityjpa`, the following XML is added to your build file:"
#~ msgstr "いずれかのコマンドを実行して `securityjpa` を追加すると、ビルド・ファイルに以下のXMLが追加される："

#, fuzzy
#~ msgid "Similarly, if you added `security-jpa-reactive` instead, the following XML is added to your build file:"
#~ msgstr "同様に、代わりに `security-jpa-reactive` を追加した場合、以下のXMLがビルドファイルに追加される："

#, fuzzy
#~ msgid "Finally, implement the `/api/users/me` endpoint. As you can see from the source code example below, we are trusting only users with the `user` role.  We are also using `SecurityContext` to get access to the currently authenticated `Principal`, and we return the username, all of which is loaded from the database."
#~ msgstr "最後に、 `/api/users/me` のエンドポイントを実装します。以下のソースコードの例からわかるように、 `user` の役割を持つユーザーのみを信頼するようにしています。また、 `SecurityContext` を使って、現在認証されている `Principal` へのアクセスを取得し、ユーザー名を返していますが、これらはすべてデータベースから読み込まれたものです。"

#~ msgid "The `security-jpa` extension initializes only if there is a single entity annotated with `@UserDefinition`."
#~ msgstr "`security-jpa` エクステンションは、 `@UserDefinition` でアノテーションされた単一のエンティティーがある場合にのみ初期化されます。"

#, fuzzy
#~ msgid "Indicates the field used for the password. By default, it uses bcrypt-hashed passwords. You can configure it to use plain text or custom passwords."
#~ msgstr "パスワードに使用するフィールドを示す。デフォルトでは、bcrypt-hashedのパスワードを使用します。プレーンテキストまたはカスタムパスワードを使用するように設定することができます。"

#~ msgid "This indicates the comma-separated list of roles added to the target principal representation attributes."
#~ msgstr "ここでは対象のプリンシパル表現属性に追加されたロールのコンマ区切りリストを示します。"

#~ msgid "This method allows us to add users while hashing the password with the proper bcrypt hash."
#~ msgstr "この方法では、パスワードを適切なbcryptハッシュでハッシュしながらユーザーを追加することができます。"

#, fuzzy
#~ msgid "Hibernate Reactive Panache uses `io.quarkus.hibernate.reactive.panache.PanacheEntity` instead of `io.quarkus.hibernate.orm.panache.PanacheEntity`.  Please refer to {quickstarts-tree-url}/security-jpa-reactive-quickstart/src/main/java/org/acme/elytron/security/jpa/reactive/User.java[User file] for more information."
#~ msgstr "Hibernate Reactive Panache は `io.quarkus.hibernate.orm.panache.PanacheEntity` の代わりに `io.quarkus.hibernate.reactive.panache.PanacheEntity` を使用します。詳細は {quickstarts-tree-url}/security-jpa-reactive-quickstart/src/main/java/org/acme/elytron/security/jpa/reactive/User.java[User file]を参照してください。"

#, fuzzy
#~ msgid "Enable the built-in Quarkus xref:security-basic-authentication-concept.adoc[Basic authentication] by setting the `quarkus.http.auth.basic` property to `true`:"
#~ msgstr "`quarkus.http.auth.basic` プロパティを `true` に設定することで、内蔵のQuarkus xref:security-basic-authentication-concept.adoc[Basic] 認証を有効にします："

#, fuzzy
#~ msgid "When secure access is required and no other authentication mechanisms are enabled, the built-in xref:security-basic-authentication-concept.adoc[Basic authentication] of Quarkus is the fallback authentication mechanism.  Therefore, in this tutorial, you do not need to set the property `quarkus.http.auth.basic` to `true`."
#~ msgstr "安全なアクセスが必要で、他の認証メカニズムが有効でない場合、Quarkusの内蔵 xref:security-basic-authentication-concept.adoc[Basic] 認証がフォールバック認証メカニズムになります。したがって、このチュートリアルでは、プロパティ `quarkus.http.auth.basic` を `true` に設定する必要はありません。"

#~ msgid "Configure at least one data source so that the `security-jpa` extension can access your database."
#~ msgstr "少なくとも1つのデータソースを設定し、 `security-jpa` エクステンションがデータベースにアクセスできるようにします。"

#, fuzzy
#~ msgid "Reactive datasource used by the `security-jpa-reactive` extension has URL set with the `quarkus.datasource.reactive.url` configuration property, instead of the `quarkus.datasource.jdbc.url` configuration property used by JDBC datasource."
#~ msgstr "`security-jpa-reactive` エクステンションで使用される Reactive データソースの URL が、JDBC データソースで使用される `quarkus.datasource.jdbc.url` 設定プロパティではなく、 `quarkus.datasource.reactive.url` 設定プロパティで設定されています。"

#, fuzzy
#~ msgid "In this tutorial, a PostgreSQL database is used for the identity store. link:https://hibernate.org/orm/[Hibernate ORM] automatically creates the database schema on startup.  This approach is suitable for development but needs to be revised for production."
#~ msgstr "このチュートリアルでは、ID ストアに PostgreSQL データベースを使用します。Hibernate link:https://hibernate.org/orm/[ORM] は、起動時にデータベーススキーマを自動的に作成します。このアプローチは開発には適していますが、本番では見直す必要があります。"

#~ msgid "The application is now protected and the user identities are provided by the specified database."
#~ msgstr "これでアプリケーションは保護され、ユーザーIDは指定されたデータベースから提供されるようになりました。"

#~ msgid "Test your application"
#~ msgstr "アプリケーションのテスト"

#~ msgid "Use Dev Services for PostgreSQL to test your application"
#~ msgstr "Dev Services for PostgreSQLを使用してアプリケーションをテストする"

#~ msgid "Add the integration tests before you run your application in production mode."
#~ msgstr "アプリケーションを実稼働モードで動作させる前に、統合テストを追加してみましょう。"

#~ msgid "Use xref:https://quarkus.io/guides/dev-services#databases[Dev Services for PostgreSQL] for the integration testing of your application in JVM and native modes."
#~ msgstr "JVMとネイティブモードでのアプリケーションの統合テストには、 xref:https://quarkus.io/guides/dev-services#databases[Dev Services for PostgreSQL] を使用します。"

#~ msgid "If you start your application in dev mode, `Dev Services for PostgreSQL` launches a `PostgreSQL` `devmode` container so that you can start developing your application.  While developing your application, you can also start to add tests one by one and run them by using the xref:continuous-testing.adoc[Continuous Testing] feature.  `Dev Services for PostgreSQL` supports testing while you develop by providing a separate `PostgreSQL` test container that does not conflict with the `devmode` container."
#~ msgstr "アプリケーションを開発モードで起動すると、 `Dev Services for PostgreSQL` が `PostgreSQL` `devmode` コンテナを起動し、アプリケーションの開発を開始することができるようになります。 アプリケーションの開発中に、xref:continuous-testing.adoc[継続的テスト] の機能を使って、テストを一つずつ追加して実行することも可能です。 `Dev Services for PostgreSQL` は、 `devmode` コンテナと衝突しない独立した `PostgreSQL` テストコンテナを提供することで、開発中のテストをサポートします。"

#~ msgid "When your application is running, you can access your application by using one of the following `curl` commands.  You can also access the same endpoint URLs by using a browser."
#~ msgstr "アプリケーションの実行中は、以下の `curl` コマンドのいずれかを使用して、アプリケーションにアクセスできます。また、ブラウザを使用して同じエンドポイントURLにアクセスすることもできます。"

#~ msgid "When you use a browser to anonymously connect to a protected resource, a basic authentication form displays prompting you to enter credentials."
#~ msgstr "ブラウザーを使って保護されたリソースに匿名で接続すると、認証情報を入力するよう促すBasic認証フォームが表示されます。"

#~ msgid "If a resource is protected with `@RolesAllowed(\"user\")`, the user `admin` is not authorized to access the resource because it is not assigned to the \"user\" role, as outlined in the following shell example:"
#~ msgstr "リソースが `@RolesAllowed(\"user\")` で保護されている場合、次のシェルの例で説明するように、ユーザー `admin` は \"user\" ロールに割り当てられていないため、リソースへのアクセスは許可されません:"

#, fuzzy
#~ msgid "Congratulations! You have learned how to create and test a secure Quarkus application by combining the built-in xref:security-basic-authentication-concept.adoc[Basic authentication] in Quarkus with the Jakarta Persistence identity provider."
#~ msgstr "おめでとうございます！Quarkusに組み込まれている xref:security-basic-authentication-concept.adoc[Basic] 認証とJakarta Persistence IDプロバイダーを組み合わせて、安全なQuarkusアプリケーションを作成しテストする方法について学びました。"

#~ msgid "After you have completed this tutorial, explore some of the more advanced security mechanisms in Quarkus.  Use the following information to learn how you can securely use `OpenID Connect` to provide secure single sign-on access to your Quarkus endpoints:"
#~ msgstr "このチュートリアルを完了したら、Quarkus のより高度なセキュリティメカニズムをいくつか検討してください。 次の情報を使用して、 `OpenID Connect` を安全に使用して、Quarkusのエンドポイントに安全なシングルサインオンアクセスを提供する方法について学びます:"

#, fuzzy
#~ msgid "xref:security-oidc-bearer-token-authentication-concept.adoc[OIDC Bearer authentication]"
#~ msgstr "xref:security-oidc-bearer-token-authentication-concept.adoc[OIDCベアラー認証]"

#, fuzzy
#~ msgid "xref:security-oidc-code-flow-authentication-concept.adoc[OIDC code flow mechanism for protecting web applications]"
#~ msgstr "xref:security-oidc-code-flow-authentication-concept.adoc[Webアプリケーションを保護するためのOIDCコードフロー機構]"

#~ msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
#~ msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"

#, fuzzy
#~ msgid "xref:security-architecture-concept.adoc[Quarkus Security architecture]"
#~ msgstr "xref:security-architecture-concept.adoc[Quarkus セキュリティ・アーキテクチャ]"

#~ msgid "xref:security-authentication-mechanisms-concept.adoc#other-supported-authentication-mechanisms[Authentication mechanisms in Quarkus]"
#~ msgstr "xref:security-authentication-mechanisms-concept.adoc#other-supported-authentication-mechanisms[Quarkusの認証メカニズム]"

#~ msgid "xref:security-identity-providers-concept.adoc[Identity providers]"
#~ msgstr "xref:security-identity-providers-concept.adoc[アイデンティティ・プロバイダー]"

#~ msgid "You can find the solution in the `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory]."
#~ msgstr "ソリューションは `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[ディレクトリー] にあります。"

#, fuzzy
#~ msgid "For Quarkus Security to be able to map your security source to Jakarta Persistence entities, ensure that the Maven project that is used in this tutorial includes the `security-jpa` extension.  You can either create a new Maven project with the `security-jpa` extension or you can add the extension to an existing Maven project."
#~ msgstr "Quarkus Securityでセキュリティソースをjakarta Persistenceエンティティにマッピングするには、このチュートリアルで使用するMavenプロジェクトに `security-jpa` 拡張が含まれていることを確認します。 `security-jpa` エクステンションを持つ新しい Maven プロジェクトを作成するか、既存の Maven プロジェクトにエクステンションを追加することができます。"

#~ msgid "To create the Maven project, use the following command:"
#~ msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します:"

#~ msgid "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] is used to store your user identities but you can also use xref:hibernate-orm.adoc[Hibernate ORM].  You must also add your preferred database connector library.  The instructions in this example tutorial use a PostgreSQL database for the identity store."
#~ msgstr "ユーザー ID の保存には xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] が使用されていますが、xref:hibernate-orm.adoc[Hibernate ORM] を使用することも可能です。また、お好みのデータベースコネクタライブラリを追加する必要があります。 このチュートリアルの例では、ID ストアに PostgreSQL データベースを使用しています。"

#~ msgid "To add the `security-jpa` extension to an existing Maven project, run the following command from your project base directory:"
#~ msgstr "既存の Maven プロジェクトに `security-jpa` エクステンションを追加するには、プロジェクトのベースディレクトリで次のコマンドを実行します:"

#~ msgid "When you run either command, the following XML is added to your build file:"
#~ msgstr "どちらかのコマンドを実行すると、ビルドファイルに以下のようなXMLが追加されます。:"

#~ msgid "Using Hibernate Reactive"
#~ msgstr "Hibernate Reactiveの使用"

#, fuzzy
#~ msgid "If you plan to use Hibernate Reactive and non-blocking database drivers, you will need to use the `security-jpa-reactive` extension instead.  The `security-jpa-reactive` extension works with the same annotations and only difference in configuration is a datasource URL.  Reactive datasource has URL set with the `quarkus.datasource.reactive.url` configuration property, instead of the `quarkus.datasource.jdbc.url` configuration property used by JDBC datasource."
#~ msgstr "Hibernate Reactiveとノンブロッキングデータベースドライバーを使用する予定がある場合は、代わりに `security-jpa-reactive` エクステンションを使用する必要があります。 `security-jpa-reactive` エクステンションは同じアノテーションで動作し、設定の違いはデータソースのURLだけです。ReactiveデータソースのURLは、JDBCデータソースで使用される `quarkus.datasource.jdbc.url` 設定プロパティではなく、 `quarkus.datasource.reactive.url` 設定プロパティで設定されます。"

#, fuzzy
#~ msgid "Please refer to the xref:hibernate-reactive.adoc[Hibernate Reactive guide] for more information.  On top of that, Hibernate Reactive with Panache uses its own reactive classes as `io.quarkus.hibernate.reactive.panache.PanacheEntity`.  You can learn more about it in the xref:hibernate-reactive-panache.adoc[Hibernate Reactive with Panache guide]."
#~ msgstr "詳しくは、Hibernate xref:hibernate-reactive.adoc[Reactiveのガイドを] 参照してください。その上、Hibernate Reactive with Panache は独自のリアクティブクラスを `io.quarkus.hibernate.reactive.panache.PanacheEntity` として使用します。これについては、「Hibern xref:hibernate-reactive-panache.adoc[ate Reactive with] Panache」ガイドで詳しく説明しています。"

#, fuzzy
#~ msgid "xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer authentication]"
#~ msgstr "xref:security-oidc-bearer-authentication-concept.adoc[OIDC ベアラー認証]"

#~ msgid "Quarkus Security JPA information"
#~ msgstr "Quarkus Security JPA 情報"

#~ msgid "Now that you have successfully run and tested the security quick start project, you are ready to explore more security features of Quarkus Security and the JPA identity store."
#~ msgstr "セキュリティクイックスタートプロジェクトの実行とテストに成功したので、Quarkus SecurityとJPA IDストアのセキュリティ機能を理解していくための準備ができました。"

#~ msgid "Supported model types"
#~ msgstr "サポートされているモデルの種類"

#~ msgid "The `@UserDefinition` class must be a JPA entity (with Panache or not)."
#~ msgstr "`@UserDefinition` クラスは JPA エンティティーである必要があります(Panache を使用しているかどうかは問いません)。"

#~ msgid "The `@Username` and `@Password` field types must be of type `String`."
#~ msgstr "`@Username` と `@Password` フィールドの型は `String` でなければなりません。"

#~ msgid "The `@Roles` field must either be of type `String` or `Collection<String>` or alternately a `Collection<X>` where `X` is an entity class with one `String` field annotated with the `@RolesValue` annotation."
#~ msgstr "`@Roles` フィールドは `String`、`Collection<String>`、`Collection<X>` (`X` は `@RolesValue` アノテーションが付与された `String` フィールドを 1 つ持つエンティティークラス) のいずれかとします。"

#~ msgid "Each `String` role element type will be parsed as a comma-separated list of roles."
#~ msgstr "各 `String` role 要素の型は、カンマで区切られたロールのリストとして解析されます。"

#~ msgid "Storing roles in another entity"
#~ msgstr "別のエンティティーにロールを格納"

#~ msgid "Use the following sample to store roles inside another entity:"
#~ msgstr "次のサンプルを使用して、別のエンティティ内にロールを格納します:"

#~ msgid ""
#~ "@UserDefinition\n"
#~ "@Table(name = \"test_user\")\n"
#~ "@Entity\n"
#~ "public class User extends PanacheEntity {\n"
#~ "    @Username\n"
#~ "    public String name;\n"
#~ msgstr ""
#~ "@UserDefinition\n"
#~ "@Table(name = \"test_user\")\n"
#~ "@Entity\n"
#~ "public class User extends PanacheEntity {\n"
#~ "    @Username\n"
#~ "    public String name;\n"

#~ msgid ""
#~ "    @Password\n"
#~ "    public String pass;\n"
#~ msgstr ""
#~ "    @Password\n"
#~ "    public String pass;\n"

#~ msgid ""
#~ "    @ManyToMany\n"
#~ "    @Roles\n"
#~ "    public List<Role> roles = new ArrayList<>();\n"
#~ "}\n"
#~ msgstr ""
#~ "    @ManyToMany\n"
#~ "    @Roles\n"
#~ "    public List<Role> roles = new ArrayList<>();\n"
#~ "}\n"

#~ msgid ""
#~ "@Entity\n"
#~ "public class Role extends PanacheEntity {\n"
#~ msgstr ""
#~ "@Entity\n"
#~ "public class Role extends PanacheEntity {\n"

#~ msgid ""
#~ "    @ManyToMany(mappedBy = \"roles\")\n"
#~ "    public List<ExternalRolesUserEntity> users;\n"
#~ msgstr ""
#~ "    @ManyToMany(mappedBy = \"roles\")\n"
#~ "    public List<ExternalRolesUserEntity> users;\n"

#~ msgid ""
#~ "    @RolesValue\n"
#~ "    public String role;\n"
#~ "}\n"
#~ msgstr ""
#~ "    @RolesValue\n"
#~ "    public String role;\n"
#~ "}\n"

#~ msgid "Password storage and hashing"
#~ msgstr "パスワードの保存とハッシュ化"

#~ msgid "By default, passwords are stored and hashed by using https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF)."
#~ msgstr "デフォルトでは、link:https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF) のもと、link:https://en.wikipedia.org/wiki/Bcrypt[bcrypt] を用いてパスワードの保存とハッシュ化が行われます。"

#~ msgid "When you use MCF, you don't need dedicated columns to store the hashing algorithm, the iterations count, or the salt because they are all stored in the hashed value."
#~ msgstr "MCFを使う場合、ハッシュアルゴリズム、反復回数、ソルトはすべてハッシュ値に格納されるため、専用のカラムは必要ありません。"

#~ msgid "You can also store passwords by using a different hashing algorithm, for example, `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)`, as outlined in the following code snippet:"
#~ msgstr "また、例えば `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)` といった形で別のハッシュアルゴリズムを使ってパスワードを保存することもできます:"

#~ msgid ""
#~ "@UserDefinition\n"
#~ "@Table(name = \"test_user\")\n"
#~ "@Entity\n"
#~ "public class CustomPasswordUserEntity {\n"
#~ "    @Id\n"
#~ "    @GeneratedValue\n"
#~ "    public Long id;\n"
#~ msgstr ""
#~ "@UserDefinition\n"
#~ "@Table(name = \"test_user\")\n"
#~ "@Entity\n"
#~ "public class CustomPasswordUserEntity {\n"
#~ "    @Id\n"
#~ "    @GeneratedValue\n"
#~ "    public Long id;\n"

#~ msgid ""
#~ "    @Column(name = \"username\")\n"
#~ "    @Username\n"
#~ "    public String name;\n"
#~ msgstr ""
#~ "    @Column(name = \"username\")\n"
#~ "    @Username\n"
#~ "    public String name;\n"

#~ msgid ""
#~ "    @Column(name = \"password\")\n"
#~ "    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
#~ "    public String pass;\n"
#~ msgstr ""
#~ "    @Column(name = \"password\")\n"
#~ "    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
#~ "    public String pass;\n"

#~ msgid ""
#~ "    @Roles\n"
#~ "    public String role;\n"
#~ "}\n"
#~ msgstr ""
#~ "    @Roles\n"
#~ "    public String role;\n"
#~ "}\n"

#~ msgid ""
#~ "public class CustomPasswordProvider implements PasswordProvider {\n"
#~ "    @Override\n"
#~ "    public Password getPassword(String pass) {\n"
#~ "        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
#~ "        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "public class CustomPasswordProvider implements PasswordProvider {\n"
#~ "    @Override\n"
#~ "    public Password getPassword(String pass) {\n"
#~ "        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
#~ "        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "In a test environment, you can also store passwords in plain text by using `@Password(PasswordType.CLEAR)`.  For applications running in production, do not store passwords in plain text."
#~ msgstr "警告: テスト環境などでは `@Password(PasswordType.CLEAR)` を使ってパスワードをクリアテキストで保存することもできますが、本番では絶対にしないことを強くお勧めします。"

#~ msgid "xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect (OIDC) to Protect Web Applications using Authorization Code Flow ]"
#~ msgstr "xref:security-openid-connect-web-authentication.adoc[Quarkus - OpenID Connect を使用した、認可コードフローによる Web アプリケーションの保護]"
