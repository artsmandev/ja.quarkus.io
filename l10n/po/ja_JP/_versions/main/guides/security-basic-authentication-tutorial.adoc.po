# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-16 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:2
#, fuzzy, no-wrap
msgid "Secure a Quarkus application with Basic authentication and Jakarta Persistence"
msgstr "ベーシック認証によるQuarkusアプリケーションの保護"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:8
msgid "Secure your Quarkus application endpoints by combining the built-in Quarkus xref:security-basic-authentication-concept.adoc[Basic authentication] with the Jakarta Persistence identity provider to enable role-based access control (RBAC).  The Jakarta Persistence `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:10
msgid "For more information about Jakarta Persistence, see the xref:security-jpa-concept.adoc[Quarkus Security with Jakarta Persistence] section."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:12
msgid "This tutorial prepares you for implementing more advanced security mechanisms in Quarkus, for example, how to use the OpenID Connect (OIDC) authentication mechanism."
msgstr "このチュートリアルでは、Quarkusでより高度なセキュリティメカニズムを実装するための準備、たとえば、OpenID Connect（OIDC）認証メカニズムの使用方法について説明します。"

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:13
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:17
#, no-wrap
msgid "What you will build"
msgstr "何を構築するか"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:20
#, fuzzy
msgid "To demonstrate different authorization policies, the steps in this tutorial guide you through building an application that provides the following endpoints:"
msgstr "このチュートリアルでは、以下のエンドポイントを提供するアプリケーションを構築する方法を説明します:"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:23
#, no-wrap
msgid "Endpoint"
msgstr "エンドポイント"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:24
#, no-wrap
msgid "Description"
msgstr "Description"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:24
#, no-wrap
msgid "`/api/public`"
msgstr "`/api/public`"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:25
#, no-wrap
msgid "The `/api/public` endpoint can be accessed anonymously."
msgstr "`/api/public` エンドポイントには匿名でアクセスすることができます。"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:25
#, no-wrap
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:27
#, fuzzy, no-wrap
msgid ""
"The `/api/admin` endpoint is protected with role-based access control (RBAC), and only users who have been granted the `admin` role can access it.\n"
"At this endpoint, the `@RolesAllowed` annotation enforces the access constraint declaratively."
msgstr "`/api/users/me` のエンドポイントは RBAC で保護されており、 `user` のロールを付与されたユーザーのみがアクセスすることができます。ユーザーに関する詳細情報を含む JSON ドキュメントがレスポンスとして返されます。"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:27
#, no-wrap
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Table
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:29
#, fuzzy, no-wrap
msgid ""
"The `/api/users/me` endpoint is protected by RBAC. Only users that have the `user` role can access the endpoint.\n"
"This endpoint returns the caller's username as a string."
msgstr "`/api/users/me` のエンドポイントは RBAC で保護されており、 `user` のロールを付与されたユーザーのみがアクセスすることができます。ユーザーに関する詳細情報を含む JSON ドキュメントがレスポンスとして返されます。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:34
msgid "If you just want to examine the code, you can fast-forward to the completed example by using one of the following ways:"
msgstr "コードを確かめるだけなら、次のいずれかの方法で、完成例まで早送りすることができます:"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:36
msgid "Download the {quickstarts-archive-url}[archive]"
msgstr "{quickstarts-archive-url}[アーカイブ]をダウンロードする。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:37
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`"
msgstr "Gitリポジトリをクローンする: `git clone {quickstarts-clone-url}`"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:39
msgid "You can find the solution in the `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory]."
msgstr "ソリューションは `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[ディレクトリー] にあります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:44
#, no-wrap
msgid "Create a Maven project"
msgstr "Maven プロジェクトの作成"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:48
#, fuzzy
msgid "For Quarkus Security to be able to map your security source to Jakarta Persistence entities, ensure that the Maven project that is used in this tutorial includes the `security-jpa` extension.  You can either create a new Maven project with the `security-jpa` extension or you can add the extension to an existing Maven project."
msgstr "Quarkus セキュリティでセキュリティソースを JPA エンティティにマッピングするには、このチュートリアルで使用する Maven プロジェクト に `security-jpa` エクステンションが含まれていることを確認します。 `security-jpa` エクステンションを持つ新しい Maven プロジェクトを作成するか、既存の Maven プロジェクト にエクステンションを追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:50
msgid "To create the Maven project, use the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します:"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:59
msgid "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] is used to store your user identities but you can also use xref:hibernate-orm.adoc[Hibernate ORM].  You must also add your preferred database connector library.  The instructions in this example tutorial use a PostgreSQL database for the identity store."
msgstr "ユーザー ID の保存には xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] が使用されていますが、xref:hibernate-orm.adoc[Hibernate ORM] を使用することも可能です。また、お好みのデータベースコネクタライブラリを追加する必要があります。 このチュートリアルの例では、ID ストアに PostgreSQL データベースを使用しています。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:61
msgid "To add the `security-jpa` extension to an existing Maven project, run the following command from your project base directory:"
msgstr "既存の Maven プロジェクトに `security-jpa` エクステンションを追加するには、プロジェクトのベースディレクトリで次のコマンドを実行します:"

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:65
#, no-wrap
msgid "Verification"
msgstr "検証"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:68
msgid "When you run either command, the following XML is added to your build file:"
msgstr "どちらかのコマンドを実行すると、ビルドファイルに以下のようなXMLが追加されます。:"

#. type: Block title
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:70
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:76
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security-jpa</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security-jpa</artifactId>\n"
"</dependency>\n"

#. type: Block title
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:79
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:82
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-security-jpa\")\n"
msgstr "implementation(\"io.quarkus:quarkus-security-jpa\")\n"

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:84
#, no-wrap
msgid "Using Hibernate Reactive"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:90
msgid "If you plan to use Hibernate Reactive and non-blocking database drivers, you will need to use the `security-jpa-reactive` extension instead.  The `security-jpa-reactive` extension works with the same annotations and only difference in configuration is a datasource URL.  Reactive datasource has URL set with the `quarkus.datasource.reactive.url` configuration property, instead of the `quarkus.datasource.jdbc.url` configuration property used by JDBC datasource."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:94
#, no-wrap
msgid "%prod.quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5431/security_jpa\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:99
msgid "Please refer to the xref:hibernate-reactive.adoc[Hibernate Reactive guide] for more information.  On top of that, Hibernate Reactive with Panache uses its own reactive classes as `io.quarkus.hibernate.reactive.panache.PanacheEntity`.  You can learn more about it in the xref:hibernate-reactive-panache.adoc[Hibernate Reactive with Panache guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:100
#, no-wrap
msgid "Write the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:104
#, fuzzy
msgid "Let's start by implementing the `/api/public` endpoint to allow all users access to access the application.  Add a regular Jakarta REST resource to your Java source code, as outlined in the following code snippet:"
msgstr "まず、すべてのユーザーがアプリケーションにアクセスできるように、 `/api/public` エンドポイントを実装しましょう。 次のコードスニペットのように、通常のJAX-RSリソースをJavaソースコードに追加してください:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:108
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:132
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:156
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:183
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:267
#, no-wrap
msgid "package org.acme.security.jpa;\n"
msgstr "package org.acme.security.jpa;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:114
#, fuzzy, no-wrap
msgid ""
"import jakarta.annotation.security.PermitAll;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.annotation.security.PermitAll;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:117
#, no-wrap
msgid ""
"@Path(\"/api/public\")\n"
"public class PublicResource {\n"
msgstr ""
"@Path(\"/api/public\")\n"
"public class PublicResource {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:125
#, no-wrap
msgid ""
"    @GET\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String publicResource() {\n"
"        return \"public\";\n"
"   }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String publicResource() {\n"
"        return \"public\";\n"
"   }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:128
#, fuzzy
msgid "The source code for the `/api/admin` endpoint is similar, but instead, you use a `@RolesAllowed` annotation to ensure that only users granted the `admin` role can access the endpoint.  Add a Jakarta REST resource with the following `@RolesAllowed` annotation:"
msgstr "`api/admin` エンドポイントのソースコードも同様ですが、代わりに `@RolesAllowed` アノテーションを使用して、 `admin` ロールを与えられたユーザのみがエンドポイントにアクセスできることを確認します。 JAX-RS リソースを追加して、以下の `@RolesAllowed` アノテーションを付けます:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:138
#, fuzzy, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:141
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:149
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String adminResource() {\n"
"         return \"admin\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String adminResource() {\n"
"         return \"admin\";\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:152
#, fuzzy
msgid "Finally, implement the `/api/users/me` endpoint. As you can see from the source code example below, we are trusting only users with the `user` role.  We are also using `SecurityContext` to get access to the currently authenticated `Principal`, and we return the username, all of which is loaded from the database."
msgstr "最後に、 `/api/users/me` エンドポイントを考えてみましょう。下のソースコードを見ればわかるように、 `user` の役割を持つユーザのみを信頼しています。現在認証されている `Principal` へのアクセスを得るために `SecurityContext` を使用しており、ユーザーの名前を返します。この情報はデータベースから読み込まれます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:163
#, fuzzy, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.core.Context;\n"
"import jakarta.ws.rs.core.SecurityContext;\n"
msgstr ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.SecurityContext;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:166
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UserResource {\n"
msgstr ""
"@Path(\"/api/users\")\n"
"public class UserResource {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:174
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Path(\"/me\")\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        return securityContext.getUserPrincipal().getName();\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Path(\"/me\")\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        return securityContext.getUserPrincipal().getName();\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:176
#, no-wrap
msgid "Define the user entity"
msgstr "ユーザーエンティティーの定義"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:179
msgid "You can now describe how you want security information to be stored in the model by adding annotations to the `user` entity, as outlined in the following code snippet:"
msgstr "次のコードで説明するように、`user` エンティティにアノテーションを追加することで、セキュリティ情報をどのようにモデルに格納したいかを記述することができます:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:186
#, fuzzy, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.Table;\n"
msgstr ""
"import javax.persistence.Entity;\n"
"import javax.persistence.Table;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:193
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"
msgstr ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:204
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"
msgstr ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:219
#, no-wrap
msgid ""
"    /**\n"
"     * Adds a new user to the database\n"
"     * @param username the username\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"
msgstr ""
"    /**\n"
"     * Adds a new user in the database\n"
"     * @param username the username\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:223
msgid "The `security-jpa` extension initializes only if there is a single entity annotated with `@UserDefinition`."
msgstr "`security-jpa` エクステンションは、 `@UserDefinition` でアノテーションされた単一のエンティティーがある場合にのみ初期化されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:225
msgid "The `@UserDefinition` annotation must be present on a single entity and can be either a regular Hibernate ORM entity or a Hibernate ORM with Panache entity."
msgstr "アノテーション `@UserDefinition` は単一のエンティティに存在する必要があり、通常の Hibernate ORM エンティティまたは Panache 付き Hibernate ORM エンティティのいずれかにすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:226
#, fuzzy
msgid "Indicates the field used for the username."
msgstr "ユーザー名に使用されるフィールドを示します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:227
#, fuzzy
msgid "Indicates the field used for the password. By default, it uses bcrypt-hashed passwords. You can configure it to use plain text or custom passwords."
msgstr "パスワードに使用するフィールドを示します。デフォルトではbcryptハッシュ化されたパスワードを使用しますが、プレーンテキストまたはカスタムパスワード用に設定することも可能です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:228
msgid "This indicates the comma-separated list of roles added to the target principal representation attributes."
msgstr "ここでは対象のプリンシパル表現属性に追加されたロールのコンマ区切りリストを示します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:229
msgid "This method allows us to add users while hashing the password with the proper bcrypt hash."
msgstr "この方法では、パスワードを適切なbcryptハッシュでハッシュしながらユーザーを追加することができます。"

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:230
#, no-wrap
msgid "Configure the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:233
msgid "Enable the built-in Quarkus xref:security-basic-authentication-concept.adoc[Basic authentication] by setting the `quarkus.http.auth.basic` property to `true`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:235
msgid "`quarkus.http.auth.basic`=true`"
msgstr "`quarkus.http.auth.basic=true`"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:240
msgid "When secure access is required and no other authentication mechanisms are enabled, the built-in xref:security-basic-authentication-concept.adoc[Basic authentication] of Quarkus is the fallback authentication mechanism.  Therefore, in this tutorial, you do not need to set the property `quarkus.http.auth.basic` to `true`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:243
msgid "Configure at least one data source so that the `security-jpa` extension can access your database."
msgstr "少なくとも1つのデータソースを設定し、 `security-jpa` エクステンションがデータベースにアクセスできるようにします。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:247
#, no-wrap
msgid "quarkus.http.auth.basic=true\n"
msgstr "quarkus.http.auth.basic=true\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:252
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus\n"
"quarkus.datasource.password=quarkus\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:security_jpa\n"
msgstr ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus\n"
"quarkus.datasource.password=quarkus\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:security_jpa\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:254
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:317
#, no-wrap
msgid "quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr "quarkus.hibernate-orm.database.generation=drop-and-create\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:257
msgid "To initialize the database with users and roles, implement the `Startup` class, as outlined in the following code snippet:"
msgstr "データベースをユーザーとロールで初期化するには、次のコードで説明するように `Startup` クラスを実装します:"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:262
#, fuzzy
msgid "In this tutorial, a PostgreSQL database is used for the identity store. link:https://hibernate.org/orm/[Hibernate ORM] automatically creates the database schema on startup.  This approach is suitable for development but needs to be revised for production."
msgstr "このチュートリアルでは、PostgreSQL データベースを ID ストアに使用します。Hibernate ORM は起動時にデータベーススキーマを自動的に作成します (運用時にはこれを変更します)。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:271
#, fuzzy, no-wrap
msgid ""
"import jakarta.enterprise.event.Observes;\n"
"import jakarta.inject.Singleton;\n"
"import jakarta.transaction.Transactional;\n"
msgstr ""
"import javax.enterprise.event.Observes;\n"
"import javax.inject.Singleton;\n"
"import javax.transaction.Transactional;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:273
#, no-wrap
msgid "import io.quarkus.runtime.StartupEvent;\n"
msgstr "import io.quarkus.runtime.StartupEvent;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:285
#, no-wrap
msgid ""
"@Singleton\n"
"public class Startup {\n"
"    @Transactional\n"
"    public void loadUsers(@Observes StartupEvent evt) {\n"
"        // reset and load all test users\n"
"        User.deleteAll();\n"
"        User.add(\"admin\", \"admin\", \"admin\");\n"
"        User.add(\"user\", \"user\", \"user\");\n"
"    }\n"
"}\n"
msgstr ""
"@Singleton\n"
"public class Startup {\n"
"    @Transactional\n"
"    public void loadUsers(@Observes StartupEvent evt) {\n"
"        // reset and load all test users\n"
"        User.deleteAll();\n"
"        User.add(\"admin\", \"admin\", \"admin\");\n"
"        User.add(\"user\", \"user\", \"user\");\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:288
msgid "The application is now protected and the user identities are provided by the specified database."
msgstr "これでアプリケーションは保護され、ユーザーIDは指定されたデータベースから提供されるようになりました。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:293
msgid "In a production environment, do not store plain text passwords.  As a result, the `security-jpa` defaults to using bcrypt-hashed passwords."
msgstr "本番環境では、プレーンテキストのパスワードは保存しないでください。 そのため、 `security-jpa` はデフォルトで bcrypt でハッシュ化したパスワードを使用します。"

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:295
#, no-wrap
msgid "Test your application"
msgstr "アプリケーションのテスト"

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:297
#, no-wrap
msgid "Use Dev Services for PostgreSQL to test your application"
msgstr "Dev Services for PostgreSQLを使用してアプリケーションをテストする"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:302
msgid "Add the integration tests before you run your application in production mode."
msgstr "アプリケーションを実稼働モードで動作させる前に、統合テストを追加してみましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:305
msgid "Use xref:https://quarkus.io/guides/dev-services#databases[Dev Services for PostgreSQL] for the integration testing of your application in JVM and native modes."
msgstr "JVMとネイティブモードでのアプリケーションの統合テストには、 xref:https://quarkus.io/guides/dev-services#databases[Dev Services for PostgreSQL] を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:308
msgid "The following properties configuration demonstrates how you can enable PostgreSQL testing to run in production (`prod`) mode only.  In this scenario, `Dev Services for PostgreSQL` launches and configures a `PostgreSQL` test container."
msgstr "以下のプロパティ構成は、PostgreSQLのテストを本番環境( `prod` )モードのみで実行できるようにする方法を示しています。このシナリオでは、 `Dev Services for PostgreSQL` が `PostgreSQL` テストコンテナを起動し、構成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:315
#, no-wrap
msgid ""
"%prod.quarkus.datasource.db-kind=postgresql\n"
"%prod.quarkus.datasource.username=quarkus\n"
"%prod.quarkus.datasource.password=quarkus\n"
"%prod.quarkus.datasource.jdbc.url=jdbc:postgresql:elytron_security_jpa\n"
msgstr ""
"%prod.quarkus.datasource.db-kind=postgresql\n"
"%prod.quarkus.datasource.username=quarkus\n"
"%prod.quarkus.datasource.password=quarkus\n"
"%prod.quarkus.datasource.jdbc.url=jdbc:postgresql:elytron_security_jpa\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:320
msgid "If you add the `%prod.` profile prefix, data source properties are not visible to `Dev Services for PostgreSQL` and are only observed by an application running in production mode."
msgstr "プロファイルの接頭辞に `%prod.` を付けると、データソースのプロパティは `Dev Services for PostgreSQL` からは見えなくなり、本番モードで動作するアプリケーションからのみ表示されるようになります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:322
msgid "To write the integration test, use the following code sample:"
msgstr "統合テストを書くには、次のコードサンプルを使用します:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:326
#, no-wrap
msgid "package org.acme.elytron.security.jpa;\n"
msgstr "package org.acme.elytron.security.jpa;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:330
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.get;\n"
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.core.Is.is;\n"
msgstr ""
"import static io.restassured.RestAssured.get;\n"
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.core.Is.is;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:333
#, no-wrap
msgid ""
"import org.apache.http.HttpStatus;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""
"import org.apache.http.HttpStatus;\n"
"import org.junit.jupiter.api.Test;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:335
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr "import io.quarkus.test.junit.QuarkusTest;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:338
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class JpaSecurityRealmTest {\n"
msgstr ""
"@QuarkusTest\n"
"public class JpaSecurityRealmTest {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:344
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessPublicWhenAnonymous() {\n"
"        get(\"/api/public\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"
msgstr ""
"    @Test\n"
"    void shouldAccessPublicWhenAnonymous() {\n"
"        get(\"/api/public\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:346
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:354
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:365
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:352
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldNotAccessAdminWhenAnonymous() {\n"
"        get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_UNAUTHORIZED);\n"
msgstr ""
"    @Test\n"
"    void shouldNotAccessAdminWhenAnonymous() {\n"
"        get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_UNAUTHORIZED);\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:363
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessAdminWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"
msgstr ""
"    @Test\n"
"    void shouldAccessAdminWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:375
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldNotAccessUserWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_FORBIDDEN);\n"
"    }\n"
msgstr ""
"    @Test\n"
"    void shouldNotAccessUserWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_FORBIDDEN);\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:387
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessUserAndGetIdentityWhenUserAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"user\", \"user\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK)\n"
"                .body(is(\"user\"));\n"
"    }\n"
"}\n"
msgstr ""
"    @Test\n"
"    void shouldAccessUserAndGetIdentityWhenUserAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"user\", \"user\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK)\n"
"                .body(is(\"user\"));\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:390
msgid "As you can see in this code sample, you do not need to start the test container from the test code."
msgstr "このコードサンプルからわかるように、テストコードからテストコンテナーを起動する必要はありません。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:396
msgid "If you start your application in dev mode, `Dev Services for PostgreSQL` launches a `PostgreSQL` `devmode` container so that you can start developing your application.  While developing your application, you can also start to add tests one by one and run them by using the xref:continuous-testing.adoc[Continuous Testing] feature.  `Dev Services for PostgreSQL` supports testing while you develop by providing a separate `PostgreSQL` test container that does not conflict with the `devmode` container."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:398
#, no-wrap
msgid "Use `curl` or a browser to test your application"
msgstr "`curl` またはブラウザを使用して、アプリケーションをテストします"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:401
msgid "Use the following example to start the PostgreSQL server:"
msgstr "下記の例のように、PostgreSQL サーバーを起動します:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:406
#, no-wrap
msgid ""
"docker run --rm=true --name security-getting-started -e POSTGRES_USER=quarkus \\\n"
"           -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=elytron_security_jpa \\\n"
"           -p 5432:5432 postgres:14.1\n"
msgstr ""
"docker run --rm=true --name security-getting-started -e POSTGRES_USER=quarkus \\\n"
"           -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=elytron_security_jpa \\\n"
"           -p 5432:5432 postgres:14.1\n"

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:407
#, no-wrap
msgid "Compile and run the application"
msgstr "アプリケーションのコンパイルと実行"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:410
msgid "Compile and run your Quarkus application by using one of the following methods:"
msgstr "次のいずれかの方法で、Quarkusアプリケーションをコンパイルして実行します:"

#. type: Title ====
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:411
#, no-wrap
msgid "JVM mode"
msgstr "JVM モード"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:416
msgid "Compile the application: Run the application:"
msgstr "アプリケーションのコンパイル: アプリケーションの実行:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:420
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr "java -jar target/quarkus-app/quarkus-run.jar\n"

#. type: Title ====
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:422
#, no-wrap
msgid "Native mode"
msgstr "ネイティブモード"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:425
msgid "Compile the application:"
msgstr "アプリケーションをコンパイルします:"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:429
msgid "Run the application:"
msgstr "アプリケーションの実行:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:432
#, no-wrap
msgid "./target/security-jpa-quickstart-runner\n"
msgstr "./target/security-jpa-quickstart-runner\n"

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:434
#, no-wrap
msgid "Access and test the application security"
msgstr "アプリケーションのセキュリティへのアクセスおよびテスト"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:438
msgid "When your application is running, you can access your application by using one of the following `curl` commands.  You can also access the same endpoint URLs by using a browser."
msgstr "アプリケーションの実行中は、以下の `curl` コマンドのいずれかを使用して、アプリケーションにアクセスできます。また、ブラウザを使用して同じエンドポイントURLにアクセスすることもできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:440
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:451
msgid "Connect to a protected endpoint anonymously:"
msgstr "保護されたリソースを匿名で攻撃してみましょう:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:446
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/public\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 6\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""
"$ curl -i -X GET http://localhost:8080/api/public\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 6\n"
"Content-Type: text/plain;charset=UTF-8\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:448
#, fuzzy, no-wrap
msgid "public\n"
msgstr "public%\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:458
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/admin\n"
"HTTP/1.1 401 Unauthorized\n"
"Content-Length: 14\n"
"Content-Type: text/html;charset=UTF-8\n"
"WWW-Authenticate: Basic\n"
msgstr ""
"$ curl -i -X GET http://localhost:8080/api/admin\n"
"HTTP/1.1 401 Unauthorized\n"
"Content-Length: 14\n"
"Content-Type: text/html;charset=UTF-8\n"
"WWW-Authenticate: Basic\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:460
#, fuzzy, no-wrap
msgid "Not authorized\n"
msgstr "Not authorized%\n"

#. type: delimited block =
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:465
msgid "When you use a browser to anonymously connect to a protected resource, a basic authentication form displays prompting you to enter credentials."
msgstr "ブラウザーを使って保護されたリソースに匿名で接続すると、認証情報を入力するよう促すBasic認証フォームが表示されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:468
msgid "Connect to a protected endpoint as an authorized user:"
msgstr "認証されたユーザーとして保護されたエンドポイントに接続します:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:475
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 5\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 5\n"
"Content-Type: text/plain;charset=UTF-8\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:477
#, fuzzy, no-wrap
msgid "admin\n"
msgstr "admin%\n"

#. type: Title ===
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:479
#, no-wrap
msgid "Results"
msgstr "結果"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:483
#, fuzzy
msgid "When you provide the credentials of an authorized user, for example, `admin:admin`, the Jakarta Persistence security extension authenticates and loads the roles of the user.  The `admin` user is authorized to access the protected resources."
msgstr "許可されたユーザーの資格情報、例えば `admin:admin` を提供すると、JPA セキュリティエクステンションはそのユーザーのロールを認証してロードします。 `admin` ユーザーは保護されたリソースへのアクセスを許可されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:485
msgid "If a resource is protected with `@RolesAllowed(\"user\")`, the user `admin` is not authorized to access the resource because it is not assigned to the \"user\" role, as outlined in the following shell example:"
msgstr "リソースが `@RolesAllowed(\"user\")` で保護されている場合、次のシェルの例で説明するように、ユーザー `admin` は \"user\" ロールに割り当てられていないため、リソースへのアクセスは許可されません:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:492
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me\n"
"HTTP/1.1 403 Forbidden\n"
"Content-Length: 34\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me\n"
"HTTP/1.1 403 Forbidden\n"
"Content-Length: 34\n"
"Content-Type: text/html;charset=UTF-8\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:494
#, fuzzy, no-wrap
msgid "Forbidden\n"
msgstr "Forbidden%\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:497
msgid "Finally, the user name `user` is authorized and the security context contains the principal details, for example, the user name."
msgstr "最後に、ユーザ名 `user` が認証され、セキュリティコンテキストには、例えばユーザ名などの主要な詳細が含まれます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:504
#, no-wrap
msgid ""
"$ curl -i -X GET -u user:user http://localhost:8080/api/users/me\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 4\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""
"$ curl -i -X GET -u user:user http://localhost:8080/api/users/me\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 4\n"
"Content-Type: text/plain;charset=UTF-8\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:506
#, fuzzy, no-wrap
msgid "user\n"
msgstr "user%\n"

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:510
#, no-wrap
msgid "What's next"
msgstr "次のステップ"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:514
msgid "Congratulations! You have learned how to create and test a secure Quarkus application by combining the built-in xref:security-basic-authentication-concept.adoc[Basic authentication] in Quarkus with the Jakarta Persistence identity provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:517
msgid "After you have completed this tutorial, explore some of the more advanced security mechanisms in Quarkus.  Use the following information to learn how you can securely use `OpenID Connect` to provide secure single sign-on access to your Quarkus endpoints:"
msgstr "このチュートリアルを完了したら、Quarkus のより高度なセキュリティメカニズムをいくつか検討してください。 次の情報を使用して、 `OpenID Connect` を安全に使用して、Quarkusのエンドポイントに安全なシングルサインオンアクセスを提供する方法について学びます:"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:519
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:528
msgid "xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:520
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:529
msgid "xref:security-oidc-code-flow-authentication-concept.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:521
#, no-wrap
msgid "References"
msgstr "リファレンス"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:524
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:525
msgid "xref:security-architecture-concept.adoc[Quarkus Security architecture]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:526
msgid "xref:security-authentication-mechanisms-concept.adoc#other-supported-authentication-mechanisms[Authentication mechanisms in Quarkus]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:527
msgid "xref:security-identity-providers-concept.adoc[Identity providers]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:530
msgid "xref:hibernate-orm-panache.adoc[Simplified Hibernate ORM with Panache]"
msgstr "xref:hibernate-orm-panache.adoc[PanacheでシンプルになったHibernate ORM]"

#. type: Plain text
#: upstream/_versions/main/guides/security-basic-authentication-tutorial.adoc:530
#, fuzzy
msgid "xref:hibernate-orm.adoc[Using Hibernate ORM and Jakarta Persistence]"
msgstr "xref:hibernate-orm.adoc[Hibernate ORMとJPAの使用]"

#~ msgid "Quarkus Security JPA information"
#~ msgstr "Quarkus Security JPA 情報"

#~ msgid "Now that you have successfully run and tested the security quick start project, you are ready to explore more security features of Quarkus Security and the JPA identity store."
#~ msgstr "セキュリティクイックスタートプロジェクトの実行とテストに成功したので、Quarkus SecurityとJPA IDストアのセキュリティ機能を理解していくための準備ができました。"

#~ msgid "Supported model types"
#~ msgstr "サポートされているモデルの種類"

#~ msgid "The `@UserDefinition` class must be a JPA entity (with Panache or not)."
#~ msgstr "`@UserDefinition` クラスは JPA エンティティーである必要があります(Panache を使用しているかどうかは問いません)。"

#~ msgid "The `@Username` and `@Password` field types must be of type `String`."
#~ msgstr "`@Username` と `@Password` フィールドの型は `String` でなければなりません。"

#~ msgid "The `@Roles` field must either be of type `String` or `Collection<String>` or alternately a `Collection<X>` where `X` is an entity class with one `String` field annotated with the `@RolesValue` annotation."
#~ msgstr "`@Roles` フィールドは `String`、`Collection<String>`、`Collection<X>` (`X` は `@RolesValue` アノテーションが付与された `String` フィールドを 1 つ持つエンティティークラス) のいずれかとします。"

#~ msgid "Each `String` role element type will be parsed as a comma-separated list of roles."
#~ msgstr "各 `String` role 要素の型は、カンマで区切られたロールのリストとして解析されます。"

#~ msgid "Storing roles in another entity"
#~ msgstr "別のエンティティーにロールを格納"

#~ msgid "Use the following sample to store roles inside another entity:"
#~ msgstr "次のサンプルを使用して、別のエンティティ内にロールを格納します:"

#~ msgid ""
#~ "@UserDefinition\n"
#~ "@Table(name = \"test_user\")\n"
#~ "@Entity\n"
#~ "public class User extends PanacheEntity {\n"
#~ "    @Username\n"
#~ "    public String name;\n"
#~ msgstr ""
#~ "@UserDefinition\n"
#~ "@Table(name = \"test_user\")\n"
#~ "@Entity\n"
#~ "public class User extends PanacheEntity {\n"
#~ "    @Username\n"
#~ "    public String name;\n"

#~ msgid ""
#~ "    @Password\n"
#~ "    public String pass;\n"
#~ msgstr ""
#~ "    @Password\n"
#~ "    public String pass;\n"

#~ msgid ""
#~ "    @ManyToMany\n"
#~ "    @Roles\n"
#~ "    public List<Role> roles = new ArrayList<>();\n"
#~ "}\n"
#~ msgstr ""
#~ "    @ManyToMany\n"
#~ "    @Roles\n"
#~ "    public List<Role> roles = new ArrayList<>();\n"
#~ "}\n"

#~ msgid ""
#~ "@Entity\n"
#~ "public class Role extends PanacheEntity {\n"
#~ msgstr ""
#~ "@Entity\n"
#~ "public class Role extends PanacheEntity {\n"

#~ msgid ""
#~ "    @ManyToMany(mappedBy = \"roles\")\n"
#~ "    public List<ExternalRolesUserEntity> users;\n"
#~ msgstr ""
#~ "    @ManyToMany(mappedBy = \"roles\")\n"
#~ "    public List<ExternalRolesUserEntity> users;\n"

#~ msgid ""
#~ "    @RolesValue\n"
#~ "    public String role;\n"
#~ "}\n"
#~ msgstr ""
#~ "    @RolesValue\n"
#~ "    public String role;\n"
#~ "}\n"

#~ msgid "Password storage and hashing"
#~ msgstr "パスワードの保存とハッシュ化"

#~ msgid "By default, passwords are stored and hashed by using https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF)."
#~ msgstr "デフォルトでは、link:https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF) のもと、link:https://en.wikipedia.org/wiki/Bcrypt[bcrypt] を用いてパスワードの保存とハッシュ化が行われます。"

#, fuzzy
#~ msgid "When creating a hashed password, you can use the convenient `String BcryptUtil.bcryptHash(String password)` function, which defaults to creating a random salt and hashing in 10 iterations.  You can also specify the number of iterations and the salt."
#~ msgstr "このようなハッシュ化されたパスワードを作成する必要がある場合は、便利な `String BcryptUtil.bcryptHash(String password)` 関数を用意しています。デフォルトでは、ランダムなソルトを作成して 10 回の繰り返しでハッシュ化します (繰り返しとソルトを指定することもできます)。"

#~ msgid "When you use MCF, you don't need dedicated columns to store the hashing algorithm, the iterations count, or the salt because they are all stored in the hashed value."
#~ msgstr "MCFを使う場合、ハッシュアルゴリズム、反復回数、ソルトはすべてハッシュ値に格納されるため、専用のカラムは必要ありません。"

#~ msgid "You can also store passwords by using a different hashing algorithm, for example, `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)`, as outlined in the following code snippet:"
#~ msgstr "また、例えば `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)` といった形で別のハッシュアルゴリズムを使ってパスワードを保存することもできます:"

#~ msgid ""
#~ "@UserDefinition\n"
#~ "@Table(name = \"test_user\")\n"
#~ "@Entity\n"
#~ "public class CustomPasswordUserEntity {\n"
#~ "    @Id\n"
#~ "    @GeneratedValue\n"
#~ "    public Long id;\n"
#~ msgstr ""
#~ "@UserDefinition\n"
#~ "@Table(name = \"test_user\")\n"
#~ "@Entity\n"
#~ "public class CustomPasswordUserEntity {\n"
#~ "    @Id\n"
#~ "    @GeneratedValue\n"
#~ "    public Long id;\n"

#~ msgid ""
#~ "    @Column(name = \"username\")\n"
#~ "    @Username\n"
#~ "    public String name;\n"
#~ msgstr ""
#~ "    @Column(name = \"username\")\n"
#~ "    @Username\n"
#~ "    public String name;\n"

#~ msgid ""
#~ "    @Column(name = \"password\")\n"
#~ "    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
#~ "    public String pass;\n"
#~ msgstr ""
#~ "    @Column(name = \"password\")\n"
#~ "    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
#~ "    public String pass;\n"

#~ msgid ""
#~ "    @Roles\n"
#~ "    public String role;\n"
#~ "}\n"
#~ msgstr ""
#~ "    @Roles\n"
#~ "    public String role;\n"
#~ "}\n"

#~ msgid ""
#~ "public class CustomPasswordProvider implements PasswordProvider {\n"
#~ "    @Override\n"
#~ "    public Password getPassword(String pass) {\n"
#~ "        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
#~ "        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "public class CustomPasswordProvider implements PasswordProvider {\n"
#~ "    @Override\n"
#~ "    public Password getPassword(String pass) {\n"
#~ "        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
#~ "        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "In a test environment, you can also store passwords in plain text by using `@Password(PasswordType.CLEAR)`.  For applications running in production, do not store passwords in plain text."
#~ msgstr "警告: テスト環境などでは `@Password(PasswordType.CLEAR)` を使ってパスワードをクリアテキストで保存することもできますが、本番では絶対にしないことを強くお勧めします。"

#~ msgid "xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect (OIDC) to Protect Web Applications using Authorization Code Flow ]"
#~ msgstr "xref:security-openid-connect-web-authentication.adoc[Quarkus - OpenID Connect を使用した、認可コードフローによる Web アプリケーションの保護]"
