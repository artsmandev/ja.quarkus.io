# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-15 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:7
#, fuzzy, no-wrap
msgid "Protect a service application by using OpenID Connect (OIDC) Bearer token authentication"
msgstr "OpenID Connect（OIDC）ベアラートークン認証によるサービスアプリケーションの保護"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:17
#, fuzzy
msgid "Use the Quarkus OpenID Connect (OIDC) extension to secure a Jakarta REST application with Bearer token authentication.  The bearer tokens are issued by OIDC and OAuth 2.0 compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr "Quarkus OpenID Connect（OIDC）拡張機能を使用して、ベアラートークン認証でJakarta RESTアプリケーションを保護します。ベアラートークンは、OIDCおよびOAuth 2.0準拠の認証サーバー（ link:https://www.keycloak.org[Keycloakなど] ）によって発行されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:19
#, fuzzy
msgid "For more information about OIDC Bearer token authentication, see the Quarkus xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) Bearer token authentication] guide."
msgstr "OIDCベアラートークン認証の詳細については、Quarkus xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect（OIDC）ベアラートークン認証] ガイドを参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:21
#, fuzzy
msgid "If you want to protect web applications by using OIDC Authorization Code Flow authentication, see the xref:security-oidc-code-flow-authentication.adoc[OpenID Connect authorization code flow mechanism for protecting web applications] guide."
msgstr "OIDC認証コードフロー認証を使用してWebアプリケーションを保護したい場合は、 xref:security-oidc-code-flow-authentication.adoc[Webアプリケーションを保護するためのOpenID Connect認証コードフロー機構] ガイドを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:22
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:27
#, fuzzy
msgid "The https://stedolan.github.io/jq/[jq command-line processor tool]"
msgstr "link:https://stedolan.github.io/jq/[jqコマンドラインプロセッサツール]"

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:28
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:31
#, fuzzy
msgid "This example shows how you can build a simple microservice that offers two endpoints:"
msgstr "この例では、2つのエンドポイントを提供するシンプルなマイクロサービスを構築する方法を示します："

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:33
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:34
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:36
#, fuzzy
msgid "These endpoints are protected and can only be accessed if a client sends a bearer token along with the request, which must be valid (for example, signature, expiration, and audience) and trusted by the microservice."
msgstr "これらのエンドポイントは保護されており、クライアントがリクエストとともにベアラートークンを送信した場合にのみアクセスできる。ベアラートークンは有効でなければならず（例えば、署名、有効期限、オーディエンス）、マイクロサービスによって信頼されなければならない。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:39
#, fuzzy
msgid "The bearer token is issued by a Keycloak server and represents the subject for which the token was issued.  Because it is an OAuth 2.0 Authorization server, the token also references the client acting on the user's behalf."
msgstr "ベアラートークンはKeycloakサーバーによって発行され、トークンが発行されたサブジェクトを表します。OAuth2.0の認証サーバーであるため、トークンはユーザーの代理を務めるクライアントも参照します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:42
#, fuzzy
msgid "Any user with a valid token can access the `/api/users/me` endpoint.  As a response, it returns a JSON document with user details obtained from the information in the token."
msgstr "有効なトークンを持つユーザーであれば誰でも、 `/api/users/me` エンドポイントにアクセスできる。レスポンスとして、トークンの情報から取得したユーザー情報を含むJSONドキュメントが返されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:45
#, fuzzy
msgid "The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control), which only users with the `admin` role can access.  At this endpoint, the `@RolesAllowed` annotation is used to enforce the access constraint declaratively."
msgstr "`/api/admin` エンドポイントはRBAC（役割ベースのアクセス制御）で保護されており、 `admin` の役割を持つユーザーのみがアクセスできる。このエンドポイントでは、 `@RolesAllowed` アノテーションが宣言的にアクセス制約を強制するために使用される。"

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:46
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:50
#, fuzzy
msgid "Follow the instructions in the next sections and create the application step by step.  You can also go straight to the completed example."
msgstr "次のセクションの指示に従って、ステップ・バイ・ステップでアプリケーションを作成してください。また、完成した例に直接進むこともできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:52
#, fuzzy
msgid "You can clone the Git repository by running the command `git clone {quickstarts-clone-url}`, or you can download an {quickstarts-archive-url}[archive]."
msgstr "Git リポジトリをクローンするには、 `git clone {quickstarts-clone-url}` というコマンドを実行するか、{quickstarts-archive-url}[archive] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:54
#, fuzzy
msgid "The solution is located in the `security-openid-connect-quickstart` link:{quickstarts-tree-url}/security-openid-connect-quickstart[directory]."
msgstr "ソリューションは `security-openid-connect-quickstart` link:{quickstarts-tree-url}/security-openid-connect-quickstart[ディレクトリに] あります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:55
#, no-wrap
msgid "Procedure"
msgstr "手順"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:60
#, no-wrap
msgid "Create the Maven project"
msgstr "Maven プロジェクトの作成"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:64
#, fuzzy
msgid "You can either create a new Maven project with the `oidc` extension or you can add the extension to an existing Maven project.  Complete one of the following commands:"
msgstr "`oidc` 拡張機能を使用して新しい Maven プロジェクトを作成するか、既存の Maven プロジェクトに拡張機能を追加できます。次のコマンドのいずれかを実行します："

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:66
#, fuzzy
msgid "To create a new Maven project, use the following command:"
msgstr "新しいMavenプロジェクトを作成するには、次のコマンドを使用します："

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:74
msgid "This command generates a Maven project, importing the `oidc` extension which is an implementation of OIDC for Quarkus."
msgstr "このコマンドは、QuarkusのOIDCの実装である `oidc` エクステンションをインポートして、Mavenプロジェクトを生成します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:77
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `oidc` エクステンションを追加することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:83
#, fuzzy
msgid "The following configuration gets added to your build file:"
msgstr "以下の設定がビルドファイルに追加される："

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:85
#, fuzzy
msgid "Using Maven (pom.xml):"
msgstr "Maven（pom.xml）を使用する："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:94
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:99
#, fuzzy
msgid "Using Gradle (build.gradle):"
msgstr "Gradle（build.gradle）を使用します："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:105
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:109
#, no-wrap
msgid "Write the application"
msgstr "アプリケーションの記述"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:112
#, fuzzy
msgid "Implement the `/api/users/me` endpoint as shown in the following example, which is a regular Jakarta REST resource:"
msgstr "次の例に示すように、 `/api/users/me` エンドポイントを実装します。これは通常の Jakarta REST リソースです："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:117
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:161
#, no-wrap
msgid "package org.acme.security.openid.connect;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:122
#, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:125
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.NoCache;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:128
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UsersResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:131
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity securityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:139
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/me\")\n"
"    @RolesAllowed(\"user\")\n"
"    @NoCache\n"
"    public User me() {\n"
"        return new User(securityIdentity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:141
#, no-wrap
msgid "    public static class User {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:143
#, no-wrap
msgid "        private final String userName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:147
#, no-wrap
msgid ""
"        User(SecurityIdentity securityIdentity) {\n"
"            this.userName = securityIdentity.getPrincipal().getName();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:153
#, no-wrap
msgid ""
"        public String getUserName() {\n"
"            return userName;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:156
#, fuzzy
msgid "Implement the `/api/admin` endpoint as shown in the following simple example:"
msgstr "以下の簡単な例に示すように、 `/api/admin` エンドポイントを実装する："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:167
#, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:170
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:178
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:184
#, fuzzy
msgid "The main difference in this example is that the `@RolesAllowed` annotation is used to verify that only users granted the `admin` role can access the endpoint."
msgstr "この例の主な違いは、 `admin` ロールを与えられたユーザーだけがエンドポイントにアクセスできることを検証するために、 `@RolesAllowed` アノテーションが使用されていることです。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:187
msgid "Injection of the `SecurityIdentity` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "`SecurityIdentity` のインジェクションは、 `@RequestScoped` と `@ApplicationScoped` の両方のコンテキストでサポートされています。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:188
#, no-wrap
msgid "Configure the application"
msgstr "アプリケーションの設定"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:191
#, fuzzy
msgid "Configure the Quarkus OpenID Connect (OIDC) extension by setting the following configuration properties in the `src/main/resources/application.properties` file."
msgstr "`src/main/resources/application.properties` ファイルで次の設定プロパティを設定して、Quarkus OpenID Connect（OIDC）エクステンションを構成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:198
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
"quarkus.oidc.credentials.secret=secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:201
#, no-wrap
msgid ""
"# Tell Dev Services for Keycloak to import the realm file\n"
"# This property is not effective when running the application in JVM or Native modes\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:203
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:207
msgid "Where:"
msgstr "何処に"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:211
#, fuzzy
msgid "`%prod.quarkus.oidc.auth-server-url` sets the base URL of the OpenID Connect (OIDC) server.  The `%prod.` profile prefix ensures that `Dev Services for Keycloak` launches a container when you run the application in development (dev) mode.  For more information, see the xref:keycloak-dev-mode[Run the application in dev mode] section."
msgstr "`%prod.quarkus.oidc.auth-server-url` は、OpenID Connect（OIDC）サーバーのベース URL を設定します。 プロファイル接頭辞は、開発（dev）モードでアプリケーションを実行するときに がコンテナを起動することを保証します。詳細については、「開発モードでアプリケーションを `%prod.` `Dev Services for Keycloak` xref:keycloak-dev-mode[実行] する」のセクションを参照してください。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:213
#, fuzzy
msgid "`quarkus.oidc.client-id` sets a client-ID that identifies the application."
msgstr "`quarkus.oidc.client-id` は、アプリケーションを識別するクライアントIDを設定する。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:214
#, fuzzy
msgid "`quarkus.oidc.credentials.secret` sets the client secret, which is used by the `client_secret_basic` authentication method."
msgstr "`quarkus.oidc.credentials.secret` は、 の認証方式で使用されるクライアントシークレットを設定します。 `client_secret_basic` "

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:216
#, fuzzy
msgid "For more information, see the Quarkus xref:security-oidc-configuration-properties-reference.adoc[OpenID Connect (OIDC) configuration properties] guide."
msgstr "詳細については、Quarkus xref:security-oidc-configuration-properties-reference.adoc[OpenID Connect（OIDC）の設定プロパティガイドを] 参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:218
#, fuzzy, no-wrap
msgid "Start and configure the Keycloak server"
msgstr "Keycloakサーバーの起動と設定"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:222
#, fuzzy
msgid "Put the link:{quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath (`target/classes` directory) so that it gets imported automatically when running in dev mode.  You do not need to do this if you have already built a link:{quickstarts-tree-url}/security-openid-connect-quickstart[complete solution], in which case, this realm file is added to the classpath during the build."
msgstr "link:{quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm 設定ファイルを] クラスパス ( `target/classes` ディレクトリ) に置き、dev モードで実行する際に自動的にインポートされるようにします。すでに link:{quickstarts-tree-url}/security-openid-connect-quickstart[完全なソリューションを] ビルドしている場合は、この作業は不要です。その場合は、ビルド中にこの realm ファイルがクラスパスに追加されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:227
#, fuzzy
msgid "Do not start the Keycloak server when you run the application in dev mode; `Dev Services for Keycloak` will start a container.  For more information, see the xref:keycloak-dev-mode[Run the application in dev mode] section."
msgstr "アプリケーションをdevモードで実行するときは、Keycloakサーバーを起動しないでください。 `Dev Services for Keycloak` 、コンテナが起動します。詳細については、devモードでアプリケーションを xref:keycloak-dev-mode[実行] するセクションを参照してください。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:230
#, fuzzy
msgid "To start a Keycloak server, you can use Docker to run the following command:"
msgstr "Keycloakサーバーを起動するには、Dockerを使って以下のコマンドを実行する："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:235
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:238
#, fuzzy
msgid "Where the `keycloak.version` is set to version `17.0.0` or later."
msgstr "`keycloak.version` がバージョン `17.0.0` 以降に設定されている場合。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:239
#, fuzzy
msgid "You can access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "Keycloakサーバーには link:http://localhost:8180[localhost:8180で] アクセスできます。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:240
#, fuzzy
msgid "To access the Keycloak Administration Console, log in as the `admin` user by using the following login credentials:"
msgstr "Keycloak管理コンソールにアクセスするには、以下のログイン認証情報を使用して、 `admin` ユーザーとしてログインします："

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:242
#, fuzzy
msgid "Username: `admin`"
msgstr "ユーザー名 `admin`"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:243
#, fuzzy
msgid "Password: `admin`"
msgstr "パスワード `admin`"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:245
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm configuration file] from the upstream community repository to create a new realm."
msgstr "link:{quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[レルム設定ファイルを] アップストリームコミュニティリポジトリからインポートして、新しいレルムを作成します。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:247
#, fuzzy
msgid "For more information, see the Keycloak documentation about link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[creating a new realm]."
msgstr "詳しくは、Keycloakの link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムの作成に関する] ドキュメントを参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:253
#, fuzzy
msgid "If you want to use the Keycloak Admin Client to configure your server from your application, you need to include either the `quarkus-keycloak-admin-client` or the `quarkus-keycloak-admin-client-reactive` (if the application uses `quarkus-rest-client-reactive`) extension.  For more information, see the link:{url-quarkusio-guides}security-keycloak-admin-client[Quarkus Keycloak Admin Client] guide."
msgstr "アプリケーションからKeycloak Admin Clientを使用してサーバーを設定する場合は、 `quarkus-keycloak-admin-client` または `quarkus-keycloak-admin-client-reactive` （アプリケーションが `quarkus-rest-client-reactive` を使用している場合）のいずれかの拡張子を含める必要があります。詳細については、 link:{url-quarkusio-guides}security-keycloak-admin-client[Quarkus Keycloak Admin Client] ガイドを参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:258
#, fuzzy, no-wrap
msgid "Run the application in dev mode"
msgstr "アプリケーションをdevモードで実行する"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:261
#, fuzzy
msgid "To run the application in dev mode, run the following commands:"
msgstr "アプリケーションをdevモードで実行するには、以下のコマンドを実行する："

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:266
#, fuzzy
msgid "link:{quarkusio-guides}/security-openid-connect-dev-services[Dev Services for Keycloak] will start a Keycloak container and import a `quarkus-realm.json`."
msgstr "link:{quarkusio-guides}/security-openid-connect-dev-services[Keycloak用のDev Servicesは] Keycloakコンテナを起動し、 `quarkus-realm.json` をインポートします。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:267
#, fuzzy
msgid "Open a link:{url-quarkusio-guides}dev-ui[Dev UI], which you can find at http://localhost:8080/q/dev-v1[/q/dev-v1], then click a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
msgstr "link:http://localhost:8080/q/dev-v1[q/dev-v] 1にある link:{url-quarkusio-guides}dev-ui[Dev UIを] 開き、 `OpenID Connect` `Dev UI` カードにある `Provider: Keycloak` リンクをクリックする。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:268
#, fuzzy
msgid "When prompted to log in to a `Single Page Application` provided by `OpenID Connect Dev UI`, do the following steps:"
msgstr "`OpenID Connect Dev UI` が提供する `Single Page Application` にログインするよう促されたら、以下の手順を実行する："

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:270
#, fuzzy
msgid "Log in as `alice` (password: `alice`), who has a `user` role."
msgstr "`user` ロールを持つ `alice` (パスワード: `alice` ) としてログインする。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:271
#, fuzzy
msgid "Accessing `/api/admin` returns `403`."
msgstr "`/api/admin` にアクセスすると、 `403` が返される。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:272
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:275
#, fuzzy
msgid "Accessing `/api/users/me` returns `200`."
msgstr "`/api/users/me` にアクセスすると、 `200` が返される。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:273
#, fuzzy
msgid "Log out and log in as `admin` (password: `admin`), who has both `admin` and `user` roles."
msgstr "ログアウトし、 `admin` と `user` の両方のロールを持つ `admin` （パスワード： `admin` ）としてログインします。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:274
#, fuzzy
msgid "Accessing `/api/admin` returns `200`."
msgstr "`/api/admin` にアクセスすると、 `200` が返される。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:276
#, fuzzy, no-wrap
msgid "Run the Application in JVM mode"
msgstr "JVMモードでアプリケーションを実行する"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:279
#, fuzzy
msgid "When you are done with dev mode, you can run the application as a standard Java application."
msgstr "開発モードが終了したら、標準のJavaアプリケーションとして実行できます。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:281
msgid "Compile the application:"
msgstr "アプリケーションをコンパイルします:"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:286
msgid "Run the application:"
msgstr "アプリケーションの実行:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:291
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:294
#, fuzzy, no-wrap
msgid "Run the application in native mode"
msgstr "ネイティブ・モードでアプリケーションを実行する"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:299
#, fuzzy
msgid "You can compile this same demo as-is into native mode without needing any modifications.  This implies that you no longer need to install a JVM on your production environment.  The runtime technology is included in the produced binary and optimized to run with minimal resources required."
msgstr "この同じデモをそのままネイティブ・モードにコンパイルしても、何の修正も必要ない。これは、本番環境にJVMをインストールする必要がないことを意味する。ランタイム・テクノロジーは生成されたバイナリに含まれており、必要最小限のリソースで実行できるように最適化されている。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:301
#, fuzzy
msgid "Compilation takes a bit longer, so this step is disabled by default."
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトでは無効になっている。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:303
#, fuzzy
msgid "Build your application again by enabling the `native` profile:"
msgstr "`native` プロファイルを有効にして、アプリケーションを再度構築してください："

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:309
#, fuzzy
msgid "After waiting a little while, you run the following binary directly:"
msgstr "少し待ってから、次のバイナリを直接実行する："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:314
#, no-wrap
msgid "./target/security-openid-connect-quickstart-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:317
#, no-wrap
msgid "Test the application"
msgstr "アプリケーションのテスト"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:320
#, fuzzy
msgid "For information about testing your application in dev mode, see the preceding xref:keycloak-dev-mode[Run the application in dev mode] section."
msgstr "devモードでのアプリケーションのテストについては、「 xref:keycloak-dev-mode[devモードでアプリケーションを実行] する」のセクションを参照してください。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:322
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "`curl` を使用して、JVM またはネイティブモードで起動したアプリケーションをテストできます。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:324
#, fuzzy
msgid "Because the application uses Bearer token authentication, you first need to obtain an access token from the Keycloak server to access the application resources:"
msgstr "アプリケーションはベアラートークン認証を使用するため、アプリケーションリソースにアクセスするには、まずKeycloakサーバーからアクセストークンを取得する必要があります："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:334
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:338
#, fuzzy
msgid "The preceding example obtains an access token for the user `alice`."
msgstr "前述の例では、ユーザー `alice` のアクセストークンを取得しています。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:340
#, fuzzy
msgid "Any user can access the `http://localhost:8080/api/users/me` endpoint, which returns a JSON payload with details about the user."
msgstr "どのユーザーも `http://localhost:8080/api/users/me` エンドポイントにアクセスすることができます。エンドポイントは、ユーザーに関する詳細を含むJSONペイロードを返します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:346
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"  http://localhost:8080/api/users/me \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:350
#, fuzzy
msgid "Only users with the `admin` role can access the `http://localhost:8080/api/admin` endpoint.  If you try to access this endpoint with the previously-issued access token, you get a `403` response from the server."
msgstr "`admin` ロールを持つユーザーのみが `http://localhost:8080/api/admin` エンドポイントにアクセスできます。以前に発行されたアクセストークンを使用してこのエンドポイントにアクセスしようとすると、サーバーから `403` レスポンスが返されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:356
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"   http://localhost:8080/api/admin \\\n"
"   -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:359
#, fuzzy
msgid "To access the admin endpoint, obtain a token for the `admin` user:"
msgstr "admin エンドポイントにアクセスするには、 `admin` ユーザーのトークンを取得します："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:368
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:371
#, fuzzy
msgid "For information about writing integration tests that depend on `Dev Services for Keycloak`, see the xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak-devservices[Dev Services for Keycloak] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr "`Dev Services for Keycloak` に依存する統合テストの書き方については、「OpenID Connect (OIDC) ベアラートークン認証」ガイドの「 xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak-devservices[Dev Services for Keycloak] 」セクションを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:374
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:377
#, fuzzy
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC設定プロパティ]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:378
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect（OIDC）ベアラートークン認証]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:379
#, fuzzy
msgid "link:https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloakのドキュメンテーション]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:380
#, fuzzy
msgid "link:https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:381
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:382
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:383
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:384
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr "xref:security-jwt-build.adoc[JSONウェブトークン (JWT) のビルド、署名、暗号化]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:385
#, fuzzy
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[認証メカニズムの組み合わせ]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:386
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-token-authentication-tutorial.adoc:386
msgid "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Admin Client]"
msgstr "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Adminクライアント]"

#, fuzzy
#~ msgid "Here, you use the Quarkus OpenID Connect (OIDC) extension to secure a Jakarta REST application using Bearer token authentication.  The bearer tokens are issued by OIDC and OAuth 2.0 compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
#~ msgstr "ここでは、Quarkus OpenID Connect（OIDC）エクステンションを使用して、ベアラートークン認証を使用してjakarta RESTアプリケーションを保護します。ベアラートークンは、OIDCおよびOAuth 2.0準拠の認可サーバー（ link:https://www.keycloak.org[Keycloakなど] ）によって発行されます。"

#, fuzzy
#~ msgid "To better understand OIDC Bearer token authentication, see xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]."
#~ msgstr "OIDCベアラートークン認証の理解を深めるには、 xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン] 認証を参照してください。"

#, fuzzy
#~ msgid "If you want to protect web applications by using OIDC Authorization Code Flow authentication, see xref:security-oidc-code-flow-authentication-concept.adoc[OIDC authorization code flow authentication]."
#~ msgstr "OIDC認可コードフロー認証を使用してWebアプリケーションを保護したい場合は、 xref:security-oidc-code-flow-authentication-concept.adoc[OIDC認可コードフロー] 認証を参照してください。"

#~ msgid "https://stedolan.github.io/jq/[jq tool]"
#~ msgstr "https://stedolan.github.io/jq/[jq tool]"

#, fuzzy
#~ msgid "In this example, we build a simple microservice which offers two endpoints:"
#~ msgstr "この例では、2つのエンドポイントを提供するシンプルなマイクロサービスを構築します："

#~ msgid "These endpoints are protected and can only be accessed if a client is sending a bearer token along with the request, which must be valid (e.g.: signature, expiration and audience) and trusted by the microservice."
#~ msgstr "これらのエンドポイントは保護されており、クライアントがリクエストと一緒にベアラートークンを送信している場合にのみアクセスすることができます。"

#~ msgid "The bearer token is issued by a Keycloak Server and represents the subject to which the token was issued for. For being an OAuth 2.0 Authorization Server, the token also references the client acting on behalf of the user."
#~ msgstr "Bearer Tokenは、Keycloakサーバーによって発行され、トークンが発行された対象を表します。OAuth 2.0 認可サーバーであるため、トークンはユーザーの代わりに動作するクライアントも参照します。"

#~ msgid "The `/api/users/me` endpoint can be accessed by any user with a valid token. As a response, it returns a JSON document with details about the user where these details are obtained from the information carried on the token."
#~ msgstr "`/api/users/me` エンドポイントは、有効なトークンを持つ任意のユーザーがアクセスできます。レスポンスとして、トークンに記録されている情報から取得したユーザーの詳細を含む JSON ドキュメントを返します。"

#~ msgid "The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint."
#~ msgstr "`/api/admin` エンドポイントは RBAC (Role-Based Access Control) で保護されており、 `admin` ロールで許可されたユーザーのみがアクセスできます。このエンドポイントでは、 `@RolesAllowed` アノテーションを使用して、アクセス制約を宣言的に強制します。"

#~ msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
#~ msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成していくことをお勧めします。ただし、完成した例にすぐにアクセスすることもできます。"

#~ msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
#~ msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive] をダウンロードする。"

#~ msgid "First, we need a new project. Create a new project with the following command:"
#~ msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#~ msgid "This will add the following to your build file:"
#~ msgstr "これにより、 `pom.xml` に以下が追加されます:"

#~ msgid "pom.xml"
#~ msgstr "pom.xml"

#~ msgid "build.gradle"
#~ msgstr "build.gradle"

#, fuzzy
#~ msgid "Let's start by implementing the `/api/users/me` endpoint. As you can see from the source code below it is just a regular Jakarta REST resource:"
#~ msgstr "まず、 `/api/users/me` のエンドポイントを実装することから始めましょう。以下のソースコードからわかるように、これは通常の Jakarta REST リソースです："

#~ msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
#~ msgstr "`/api/admin` エンドポイントのソースコードも非常にシンプルです。ここでの主な違いは、 `admin` ロールで付与されたユーザーだけがエンドポイントにアクセスできるように `@RolesAllowed` アノテーションを使用していることです:"

#, fuzzy
#~ msgid "`%prod.quarkus.oidc.auth-server-url` sets the base URL of the OpenID Connect (OIDC) server. The `%prod.` profile prefix ensures that `Dev Services for Keycloak` launches a container when you run the application in dev mode.  See xref:keycloak-dev-mode[Running the Application in Dev mode] section below for more information."
#~ msgstr "`%prod.quarkus.oidc.auth-server-url` は、OpenID Connect（OIDC）サーバーのベース URL を設定します。 プロファイルプレフィックスは、アプリケーションをdevモードで実行する際に、 がコンテナを起動することを保証します。詳細は、以下の「 `%prod.` `Dev Services for Keycloak` xref:keycloak-dev-mode[Devモードでアプリケーションを実行] する」セクションを参照してください。"

#, fuzzy
#~ msgid "`quarkus.oidc.client-id` sets a client-id that identifies the application."
#~ msgstr "`quarkus.oidc.client-id` は、アプリケーションを識別するためのクライアントIDを設定します。"

#, fuzzy
#~ msgid "For more information, see xref:security-openid-connect-oidc-configuration-properties-reference.adoc[OpenID Connect (OIDC) configuration properties]."
#~ msgstr "詳しくは、OpenID xref:security-openid-connect-oidc-configuration-properties-reference.adoc[Connect（OIDC）の] 設定プロパティをご覧ください。"

#, fuzzy
#~ msgid "Before you start with configuration, put the link:{quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath (`target/classes` directory) to import it automatically when running in dev mode - unless you have already built a link:{quickstarts-tree-url}/security-openid-connect-quickstart[complete solution].  In this case, the realm file is added to the classpath during the build."
#~ msgstr "設定を始める前に、 link:{quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm 設定] ファイルをクラスパス ( `target/classes` ディレクトリ) に置いてください。この場合、realm ファイルはビルド中にクラスパスに追加されます。"

#, fuzzy
#~ msgid "Do not start the Keycloak server when you run the application in a dev mode - `Dev Services for Keycloak` will launch a container.  See the xref:keycloak-dev-mode[Running the Application in Dev mode] section below for more information."
#~ msgstr "アプリケーションをdevモードで実行するときは、Keycloakサーバーを起動しないでください - `Dev Services for Keycloak` はコンテナを起動します。詳しくは、以下の「 xref:keycloak-dev-mode[Devモードでアプリケーション] を実行する」のセクションを参照してください。"

#, fuzzy
#~ msgid "To start a Keycloak Server, you can use Docker and just run the following command:"
#~ msgstr "Keycloak Serverを起動するには、Dockerを使用し、以下のコマンドを実行するだけです："

#~ msgid "where `keycloak.version` should be set to `17.0.0` or higher."
#~ msgstr "ここで、`keycloak.version` は `17.0.0` 以上に設定する必要があります。"

#~ msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
#~ msgstr "http://localhost:8180[localhost:8180] で Keycloak サーバーにアクセスできるはずです。"

#~ msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
#~ msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#, fuzzy
#~ msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm.  For more details, see the Keycloak documentation about how to link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
#~ msgstr "link:{quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[レルム設定] ファイルをインポートして新しいレルムを作成します。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいrealmを作成] する方法についてKeycloakのドキュメントを参照してください。"

#, fuzzy
#~ msgid "If you want to use the Keycloak Admin Client to configure your server from your application, include the either `quarkus-keycloak-admin-client` or the `quarkus-keycloak-admin-client-reactive` (if the application uses `quarkus-rest-client-reactive`) extension.  See the xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Admin Client] guide for more information."
#~ msgstr "Keycloak Admin Clientを使用してアプリケーションからサーバーを設定する場合は、 `quarkus-keycloak-admin-client` または `quarkus-keycloak-admin-client-reactive` （アプリケーションが `quarkus-rest-client-reactive` を使用している場合）のいずれかのエクステンションを含めます。詳細については、『Quarkus xref:security-keycloak-admin-client.adoc[Keycloak Admin Client] 』ガイドを参照してください。"

#, fuzzy
#~ msgid "Run the application in Dev mode"
#~ msgstr "Devモードでアプリケーションを実行する"

#~ msgid "To run the application in a dev mode, use:"
#~ msgstr "アプリケーションを開発モードで実行するには、次を使用します。"

#~ msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] will launch a Keycloak container and import a `quarkus-realm.json`."
#~ msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] は、Keycloak コンテナーを起動し、`quarkus-realm.json` をインポートします。"

#, fuzzy
#~ msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev-v1[/q/dev-v1] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
#~ msgstr "link:http://localhost:8080/q/dev-v1[q/dev-v1] で利用できる xref:dev-ui.adoc[Dev UI] を開き、 `OpenID Connect` `Dev UI` カードの `Provider: Keycloak` リンクをクリックします。"

#~ msgid "You will be asked to log in into a `Single Page Application` provided by `OpenID Connect Dev UI`:"
#~ msgstr "`OpenID Connect Dev UI` が提供する `Single Page Application` へのログインを求められます。"

#~ msgid "Login as `alice` (password: `alice`) who has a `user` role"
#~ msgstr "`user` のロールを持つ `alice` (パスワード: `alice`) としてログインします"

#~ msgid "accessing `/api/admin` will return `403`"
#~ msgstr "`/api/admin` にアクセスすると、`403` が返されます"

#~ msgid "accessing `/api/users/me` will return `200`"
#~ msgstr "`/api/users/me` にアクセスすると、`200` が返されます"

#~ msgid "Logout and login as `admin` (password: `admin`) who has both `admin` and `user` roles"
#~ msgstr "ログアウトし、`admin` と `user` ロールの両方を持つ `admin` (パスワード: `admin`) としててログインします"

#~ msgid "accessing `/api/admin` will return `200`"
#~ msgstr "`/api/admin` にアクセスすると、`200` が返されます"

#~ msgid "When you're done playing with the `dev` mode\" you can run it as a standard Java application."
#~ msgstr "「`dev` モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#~ msgid "First compile it:"
#~ msgstr "まずコンパイルします。"

#~ msgid "Then run it:"
#~ msgstr "次に、以下を実行してください。"

#, fuzzy
#~ msgid "Run the application in Native mode"
#~ msgstr "Native モードでアプリケーションを実行する"

#~ msgid "This same demo can be compiled into native code: no modifications required."
#~ msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#~ msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
#~ msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#~ msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
#~ msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#~ msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
#~ msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#, fuzzy
#~ msgid "See the xref:keycloak-dev-mode[Running the Application in Dev mode] section above about testing your application in a dev mode."
#~ msgstr "devモードでのアプリケーションのテストについては、上記の「 xref:keycloak-dev-mode[Running the Application in Dev] mode」のセクションを参照してください。"

#, fuzzy
#~ msgid "The application is using Bearer token authentication and the first thing to do is obtain an access token from the Keycloak Server in order to access the application resources:"
#~ msgstr "アプリケーションはベアラートークン認証を使用しており、アプリケーションリソースにアクセスするために、まず最初にKeycloakサーバーからアクセストークンを取得します："

#~ msgid "The example above obtains an access token for user `alice`."
#~ msgstr "上記の例では、ユーザー `alice` のアクセストークンを取得しています。"

#, fuzzy
#~ msgid "Any user is allowed to access the `http://localhost:8080/api/users/me` endpoint, which basically returns a JSON payload with details about the user."
#~ msgstr "どのようなユーザーでもアクセス可能です。 `<a data-doc-l10n-kit-type=\"link\" data-doc-l10n-kit-target=\"http://localhost:8080/api/users/me\">http://localhost:8080/api/users/me</a>` エンドポイントでは、基本的にユーザーに関する詳細情報を含むJSONペイロードを返します。"

#~ msgid "The `http://localhost:8080/api/admin` endpoint can only be accessed by users with the `admin` role.  If you try to access this endpoint with the previously issued access token, you should get a `403` response from the server."
#~ msgstr "`http://localhost:8080/api/admin` エンドポイントは、 `admin` ロールを持つユーザーのみがアクセスできます。先程発行されたアクセストークンを使用してこのエンドポイントにアクセスしようとすると、サーバーから `403` 応答が返ってくるはずです。"

#, fuzzy
#~ msgid "In order to access the admin endpoint, you should obtain a token for the `admin` user:"
#~ msgstr "admin エンドポイントにアクセスするためには、 `admin` ユーザのトークンを取得する必要があります："

#, fuzzy
#~ msgid "Please also see the xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak-devservices[OIDC Bearer token authentication, Dev Services for Keycloak] section, about writing the integration tests which depend on `Dev Services for Keycloak`."
#~ msgstr "`Dev Services for Keycloak` に依存する統合テストの記述については、 xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak-devservices[OIDC ベアラートークン] 認証 xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak-devservices[、Keycloak 用] Dev Services のセクションも参照してください。"

#, fuzzy
#~ msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
#~ msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証]"

#, fuzzy
#~ msgid "xref:security-overview.adoc[Quarkus Security]"
#~ msgstr "xref:security-overview.adoc[Quarkus Security]"

#~ msgid "The solution is located in the `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-quickstart[directory]."
#~ msgstr "ソリューションは `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-quickstart[ディレクトリー] にあります。"

#, fuzzy
#~ msgid "Before you start with configuration, put the {quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath (`target/classes` directory) to import it automatically when running in dev mode - unless you have already built a {quickstarts-tree-url}/security-openid-connect-quickstart[complete solution].  In this case, the realm file is added to the classpath during the build."
#~ msgstr "設定を始める前に、{quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[レルム設定ファイル] をクラスパス ( `target/classes` ディレクトリ ) に置いて、開発モードで実行時に自動的にインポートします - 既に {quickstarts-tree-url}/security-openid-connect-quickstart[complete solution] を構築した場合は別。この場合、realm ファイルはビルド中にクラスパスに追加されます。"

#, fuzzy
#~ msgid "Import the {quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm.  For more details, see the Keycloak documentation about how to link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
#~ msgstr "quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[レルム設定ファイル]をインポートして新しいレルムを作成します。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムを作成] する方法について、Keycloakのドキュメントを参照してください。"

#~ msgid "Protect a service application by using OpenID Connect (OIDC) bearer authentication"
#~ msgstr "OpenID Connect（OIDC）ベアラー認証を使用したサービスアプリケーションの保護"

#, fuzzy
#~ msgid "Here, you use the Quarkus OpenID Connect (OIDC) extension to secure a Jakarta REST application using Bearer authentication.  The bearer tokens are issued by OIDC and OAuth 2.0 compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
#~ msgstr "ここでは、Quarkus OpenID Connect（OIDC）エクステンションを使用して、ベアラー認証を使用してjakarta RESTアプリケーションを保護します。ベアラートークンは、OIDCやOAuth 2.0に準拠した認可サーバー（ link:https://www.keycloak.org[Keycloakなど] ）から発行されます。"

#, fuzzy
#~ msgid "To better understand OIDC Bearer authentication, see xref:security-oidc-bearer-token-authentication-concept.adoc[OIDC Bearer authentication]."
#~ msgstr "OIDCベアラ認証の理解を深めるには、 xref:security-oidc-bearer-token-authentication-concept.adoc[OIDCベアラ] 認証を参照のこと。"

#, fuzzy
#~ msgid "The application is using Bearer authentication and the first thing to do is obtain an access token from the Keycloak Server in order to access the application resources:"
#~ msgstr "アプリケーションはベアラー認証を使用しており、アプリケーションリソースにアクセスするために、まずKeycloak Serverからアクセストークンを取得する必要があります："

#, fuzzy
#~ msgid "Please also see the xref:security-oidc-bearer-token-authentication-concept.adoc#integration-testing-keycloak-devservices[OIDC Bearer authentication, Dev Services for Keycloak] section, about writing the integration tests which depend on `Dev Services for Keycloak`."
#~ msgstr "`Dev Services for Keycloak` に依存する統合テストの記述については、 xref:security-oidc-bearer-token-authentication-concept.adoc#integration-testing-keycloak-devservices[OIDC] ベアラー認証 xref:security-oidc-bearer-token-authentication-concept.adoc#integration-testing-keycloak-devservices[、Keycloak 用] Dev Services のセクションも参照してください。"

#, fuzzy
#~ msgid "xref:security-oidc-bearer-token-authentication-concept.adoc[OIDC Bearer authentication]"
#~ msgstr "xref:security-oidc-bearer-token-authentication-concept.adoc[OIDCベアラー認証]"

#, fuzzy
#~ msgid "xref:security-authentication-mechanisms-concept.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
#~ msgstr "xref:security-authentication-mechanisms-concept.adoc#combining-authentication-mechanisms[認証メカニズムの組み合わせ]"

#, fuzzy
#~ msgid "xref:security-overview-concept.adoc[Quarkus Security]"
#~ msgstr "xref:security-overview-concept.adoc[Quarkus Security]"

#, fuzzy
#~ msgid "To better understand OIDC Bearer authentication, see xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer authentication]."
#~ msgstr "OIDCベアラ認証の理解を深めるには、「 xref:security-oidc-bearer-authentication-concept.adoc[OIDCベアラ認証] 」をご覧ください。"

#, fuzzy
#~ msgid "Please also see the xref:security-oidc-bearer-authentication-concept.adoc#integration-testing-keycloak-devservices[OIDC Bearer authentication, Dev Services for Keycloak] section, about writing the integration tests which depend on `Dev Services for Keycloak`."
#~ msgstr "`Dev Services for Keycloak` に依存する統合テストの書き方については、 xref:security-oidc-bearer-authentication-concept.adoc#integration-testing-keycloak-devservices[OIDC] ベアラー認証 xref:security-oidc-bearer-authentication-concept.adoc#integration-testing-keycloak-devservices[、Dev Services for Keycloakの] 項もご覧ください。"

#, fuzzy
#~ msgid "xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer authentication]"
#~ msgstr "xref:security-oidc-bearer-authentication-concept.adoc[OIDC ベアラー認証]"
