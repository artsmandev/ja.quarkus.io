# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-15 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:7
#, no-wrap
msgid "Proactive authentication"
msgstr "プロアクティブ認証"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:15
msgid "Proactive authentication is enabled in Quarkus by default. This means that if an incoming request has a credential then that request will always be authenticated, even if the target page does not require authentication."
msgstr "Quarkusでは、プロアクティブ認証がデフォルトで有効になっています。つまり、受信リクエストにクレデンシャルがある場合、ターゲットページで認証が必要ない場合でも、そのリクエストは常に認証されることになります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:19
msgid "Requests with an invalid credential will always be rejected, even when the page is public."
msgstr "無効なクレデンシャルを含むリクエストは、ページが公開されている場合でも、常に拒否されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:21
#, fuzzy
msgid "If you only want to authenticate when the target page requires authentication, you can change the default behavior."
msgstr "ターゲット・ページが認証を要求したときだけ認証を行いたい場合は、デフォルトの動作を変更することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:23
msgid "To disable proactive authentication in Quarkus, set the following attribute in the `application.properties` configuration file:"
msgstr "Quarkusでプロアクティブ認証を無効にするには、 `application.properties` 設定ファイルで次の属性を設定します:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:27
#, no-wrap
msgid "`quarkus.http.auth.proactive=false`\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:31
#, fuzzy
msgid "If you disable proactive authentication, the authentication process runs only when an identity is requested.  An identity can be requested because of security rules that require the user to authenticate or because programmatic access to the current identity is required."
msgstr "プロアクティブ認証を無効にすると、ID が要求されたときにのみ認証プロセスが実行されます。ID が要求されるのは、ユーザ認証を必要とするセキュリティ・ルール、または現在の ID へのプログラムによるアクセスが必要なためです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:38
#, fuzzy
msgid "If proactive authentication is in use, accessing `SecurityIdentity` is a blocking operation.  This is because authentication might have yet to happen and accessing `SecurityIdentity` might require calls to external systems, such as databases, that might block the operation.  For blocking applications, this is not an issue.  However, if you have disabled authentication in a reactive application, this will fail because you cannot do blocking operations on the I/O thread.  To work around this, you need to `@Inject` an instance of `io.quarkus.security.identity.CurrentIdentityAssociation` and call the `Uni<SecurityIdentity> getDeferredIdentity();` method.  Then, you can subscribe to the resulting `Uni` and will be notified when authentication is complete and the identity is available."
msgstr "プロアクティブ認証が使用されている場合、 `SecurityIdentity` へのアクセスはブロッキング操作となる。これは、認証がまだ行われていない可能性があり、 `SecurityIdentity` へのアクセスには、データベースなどの外部システムへの呼び出しが必要になる可能性があるため、操作がブロックされる可能性があるためである。ブロッキング・アプリケーションの場合、これは問題ではありません。しかし、リアクティブ・アプリケーションで認証を無効にしている場合、 I/O スレッドでブロッキング操作ができないため、これは失敗します。 `@Inject` これを回避するには、 `io.quarkus.security.identity.CurrentIdentityAssociation` のインスタンスを作成し、 `Uni<SecurityIdentity> getDeferredIdentity();` メソッドを呼び出します。その後、生成された `Uni` をサブスクライブすると、認証が完了し、ID が利用可能になったときに通知される。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:43
#, fuzzy
msgid "You can still access `SecurityIdentity` synchronously with `public SecurityIdentity getIdentity()` in xref:resteasy-reactive.adoc[RESTEasy Reactive] from endpoints that are annotated with `@RolesAllowed`, `@Authenticated`, or with respective configuration authorization checks because authentication has already happened.  The same is also valid for xref:reactive-routes.adoc[Reactive routes] if a route response is synchronous."
msgstr "`@RolesAllowed` 、 `@Authenticated` 、または各構成の認可チェックでアノテーションされたエンドポイントから、RESTEasy xref:resteasy-reactive.adoc[Reactiveで] `public SecurityIdentity getIdentity()` 、認証がすでに行われているため、 `SecurityIdentity` に同期的にアクセスできます。同じことが、ルート応答が同期的である場合、 xref:reactive-routes.adoc[Reactive ルートにも] 当てはまります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:46
#, fuzzy
msgid "xref:security-authorization.adoc#standard-security-annotations[Standard security annotations] on CDI beans are not supported on an I/O thread if a non-void secured method returns a value synchronously and proactive authentication is disabled because they need to access `SecurityIdentity`."
msgstr "CDIビーン上の xref:security-authorization.adoc#standard-security-annotations[標準的なセキュリティアノテーションは] 、 `SecurityIdentity` にアクセスする必要があるため、 非ボイドセキュアメソッドが同期的に値を返し、プロアクティブ認証が無効になっている場合、 I/O スレッドではサポートされない。"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:49
#, fuzzy
msgid "In the following example, `HelloResource` and `HelloService` are defined.  Any GET request to `/hello` will run on the I/O thread and throw a `BlockingOperationNotAllowedException` exception."
msgstr "以下の例では、 `HelloResource` と `HelloService` が定義されている。 `/hello` へのGETリクエストはI/Oスレッドで実行され、 `BlockingOperationNotAllowedException` 例外をスローする。"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:51
msgid "There is more than one way to fix the example:"
msgstr "例の修正方法は1つではありません:"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:53
#, fuzzy
msgid "Switch to a worker thread by annotating the `hello` endpoint with `@Blocking`."
msgstr "`@Blocking` で `hello` エンドポイントをアノテーションして、ワーカースレッドに切り替える。"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:54
#, fuzzy
msgid "Change the `sayHello` method return type by using a reactive or asynchronous data type."
msgstr "リアクティブデータ型または非同期データ型を使って、 `sayHello` メソッドのリターン型を変更する。"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:56
#, fuzzy
msgid "Move `@RolesAllowed` annotation to the endpoint.  This could be one of the safest ways because accessing `SecurityIdentity` from endpoint methods is never the blocking operation."
msgstr "`@RolesAllowed` アノテーションをエンドポイントに移動する。エンドポイントメソッドから `SecurityIdentity` にアクセスすることは決してブロッキング操作ではないので、これは最も安全な方法の1つです。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:63
#, no-wrap
msgid ""
"import jakarta.annotation.security.PermitAll;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:65
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:69
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@PermitAll\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:72
#, no-wrap
msgid ""
"    @Inject\n"
"    HelloService helloService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:77
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<String> hello() {\n"
"        return Uni.createFrom().item(helloService.sayHello());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:79
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:95
#, no-wrap
msgid "}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:85
#, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:88
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class HelloService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:93
#, no-wrap
msgid ""
"    @RolesAllowed(\"admin\")\n"
"    public String sayHello() {\n"
"        return \"Hello\";\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:97
#, fuzzy, no-wrap
msgid "Customize authentication exception responses"
msgstr "認証例外応答のカスタマイズ"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:100
msgid "You can use Jakarta REST `ExceptionMapper` to capture Quarkus Security authentication exceptions such as `io.quarkus.security.AuthenticationFailedException`, for example:"
msgstr "Jakarta REST `ExceptionMapper` を使用して、例えば `io.quarkus.security.AuthenticationFailedException` のような Quarkus Security の認証例外を捕捉することができます:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:104
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:137
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:110
#, no-wrap
msgid ""
"import jakarta.annotation.Priority;\n"
"import jakarta.ws.rs.Priorities;\n"
"import jakarta.ws.rs.core.Response;\n"
"import jakarta.ws.rs.ext.ExceptionMapper;\n"
"import jakarta.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:112
#, no-wrap
msgid "import io.quarkus.security.AuthenticationFailedException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:116
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class AuthenticationFailedExceptionMapper implements ExceptionMapper<AuthenticationFailedException> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:119
#, no-wrap
msgid ""
"    @Context\n"
"    UriInfo uriInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:125
#, no-wrap
msgid ""
"    @Override\n"
"    public Response toResponse(AuthenticationFailedException exception) {\n"
"        return Response.status(401).header(\"WWW-Authenticate\", \"Basic realm=\\\"Quarkus\\\"\").build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:133
#, fuzzy
msgid "Some HTTP authentication mechanisms need to handle authentication exceptions themselves to create a correct authentication challenge.  For example, `io.quarkus.oidc.runtime.CodeAuthenticationMechanism`, which manages OpenID Connect (OIDC) authorization code flow authentication, needs to build a correct redirect URL, cookies, and so on.  For that reason, avoid using custom exception mappers to customize authentication exceptions thrown by such mechanisms.  Instead, a safer approach is to ensure that proactive authentication is enabled and to use Vert.x HTTP route failure handlers.  This is because events come to the handler with the correct response status and headers.  You then only need to customize the response, as shown in the following example:"
msgstr "HTTP認証メカニズムの中には、正しい認証チャレンジを作成するために、認証例外を自 分で処理する必要があるものがある。例えば、OpenID Connect (OIDC)の認可コードフロー認証を管理する `io.quarkus.oidc.runtime.CodeAuthenticationMechanism` は、正しいリダイレクトURLやクッキーなどを構築する必要があります。そのため、このような認証メカニズムがスローする認証例外をカスタマイズするために、カスタム例外マッパーを使用することは避けてください。代わりに、より安全なアプローチは、プロアクティブ認証が有効になっていることを確認し、Vert.x HTTPルート失敗ハンドラを使用することです。これは、イベントが正しいレスポンスステータスとヘッダでハンドラに届くためです。次の例に示すように、レスポンスをカスタマイズするだけです："

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:140
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:145
#, no-wrap
msgid ""
"import io.quarkus.security.AuthenticationFailedException;\n"
"import io.vertx.core.Handler;\n"
"import io.vertx.ext.web.Router;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:148
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class AuthenticationFailedExceptionHandler {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:162
#, no-wrap
msgid ""
"    public void init(@Observes Router router) {\n"
"        router.route().failureHandler(new Handler<RoutingContext>() {\n"
"            @Override\n"
"            public void handle(RoutingContext event) {\n"
"                if (event.failure() instanceof AuthenticationFailedException) {\n"
"                    event.response().end(\"CUSTOMIZED_RESPONSE\");\n"
"                } else {\n"
"                    event.next();\n"
"                }\n"
"            }\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:164
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:167
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkusセキュリティの概要]"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:168
#, fuzzy
msgid "xref:security-architecture.adoc[Quarkus Security architecture]"
msgstr "xref:security-architecture.adoc[Quarkus セキュリティアーキテクチャ]"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:169
#, fuzzy
msgid "xref:security-authentication-mechanisms.adoc[Authentication mechanisms in Quarkus]"
msgstr "xref:security-authentication-mechanisms.adoc[Quarkusの認証メカニズム]"

#. type: Plain text
#: upstream/_versions/main/guides/security-proactive-authentication.adoc:169
#, fuzzy
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr "xref:security-identity-providers.adoc[アイデンティティ・プロバイダー]"
