# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-26 02:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/amqp.adoc:6
#, no-wrap
msgid "Getting Started to SmallRye Reactive Messaging with AMQP 1.0"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:11
msgid "This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with AMQP 1.0."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:18
msgid "If you want to use RabbitMQ, you should use the xref:rabbitmq.adoc[SmallRye Reactive Messaging RabbitMQ extension].  Alternatively, if want to use RabbitMQ with AMQP 1.0 you need to enable the AMQP 1.0 plugin in the RabbitMQ broker; check the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.9/amqp/amqp.html#amqp-rabbitmq[connecting to RabbitMQ] documentation."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amqp.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:22
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:24
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:25
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:26
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:27
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:28
#, fuzzy
#| msgid "Once created, run `docker-compose up`."
msgid "docker and docker-compose"
msgstr "作成したら、`docker-compose up` を実行します。"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:29
msgid "GraalVM installed if you want to run in native mode."
msgstr "ネイティブモードで実行する場合は、GraalVM がインストールされていること"

#. type: Title ==
#: upstream/_versions/main/guides/amqp.adoc:30
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:36
msgid "In this guide, we are going to develop two applications communicating with an AMQP broker.  We will use https://activemq.apache.org/components/artemis/[Artemis], but you can use any AMQP 1.0 broker.  The first application sends a _quote request_ to an AMQP queue and consumes messages from the _quote_ queue.  The second application receives the _quote request_ and sends a _quote_ back."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/amqp.adoc:37
#, fuzzy, no-wrap
#| msgid "Architecture"
msgid "Architecture,"
msgstr "アーキテクチャ"

#. type: Target for macro image
#: upstream/_versions/main/guides/amqp.adoc:37
#, fuzzy, no-wrap
#| msgid "Architecture"
msgid "amqp-qs-architecture.png"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:42
msgid "The first application, the `producer`, will let the user request some quotes over an HTTP endpoint.  For each quote request, a random identifier is generated and returned to the user, to put the quote request on _pending_.  At the same time the generated request id is sent over the `quote-requests` queue."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/amqp.adoc:43
#, no-wrap
msgid "Producer"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/amqp.adoc:43
#, no-wrap
msgid "amqp-qs-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:46
msgid "The second application, the `processor`, in turn, will read from the `quote-requests` queue put a random price to the quote, and send it to a queue named `quotes`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:49
msgid "Lastly, the `producer` will read the quotes and send them to the browser using server-sent events.  The user will therefore see the quote price updated from _pending_ to the received price in real-time."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amqp.adoc:50
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:54
#, fuzzy
#| msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgid "We recommend that you follow the instructions in the next sections and create applications step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:56
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:58
msgid "The solution is located in the `amqp-quickstart` {quickstarts-tree-url}/amqp-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amqp.adoc:59
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:62
msgid "First, we need to create two projects: the _producer_ and the _processor_."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:64
msgid "To create the _producer_ project, in a terminal run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:72
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amqp-quickstart-producer \\\n"
"    -DnoCode=true \\\n"
"    -Dextensions=resteasy-reactive-jackson,smallrye-reactive-messaging-amqp\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:75
msgid "This command creates the project structure and select the two Quarkus extensions we will be using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:77
msgid "RESTEasy Reactive and it's Jackson support to handle JSON payloads"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:78
msgid "The Reactive Messaging AMQP connector"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:80
msgid "To create the _processor_ project, from the same directory, run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:88
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amqp-quickstart-processor \\\n"
"    -DnoCode=true \\\n"
"    -Dextensions=smallrye-reactive-messaging-amqp\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:91
msgid "At that point you should have the following structure:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:117
#, no-wrap
msgid ""
".\n"
"├── amqp-quickstart-processor\n"
"│  ├── README.md\n"
"│  ├── mvnw\n"
"│  ├── mvnw.cmd\n"
"│  ├── pom.xml\n"
"│  └── src\n"
"│     └── main\n"
"│        ├── docker\n"
"│        ├── java\n"
"│        └── resources\n"
"│           └── application.properties\n"
"└── amqp-quickstart-producer\n"
"   ├── README.md\n"
"   ├── mvnw\n"
"   ├── mvnw.cmd\n"
"   ├── pom.xml\n"
"   └── src\n"
"      └── main\n"
"         ├── docker\n"
"         ├── java\n"
"         └── resources\n"
"            └── application.properties\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:120
msgid "Open the two projects in your favorite IDE."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amqp.adoc:121
#, no-wrap
msgid "The Quote object"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:126
msgid "The `Quote` class will be used in both `producer` and `processor` projects.  For the sake of simplicity we will duplicate the class.  In both projects, create the `src/main/java/org/acme/amqp/model/Quote.java` file, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:130
#, no-wrap
msgid "package org.acme.amqp.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:132
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:135
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Quote {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:138
#, no-wrap
msgid ""
"    public String id;\n"
"    public int price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:143
#, no-wrap
msgid ""
"    /**\n"
"    * Default constructor required for Jackson serializer\n"
"    */\n"
"    public Quote() { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:148
#, no-wrap
msgid ""
"    public Quote(String id, int price) {\n"
"        this.id = id;\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:157
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return \"Quote{\" +\n"
"                \"id='\" + id + '\\'' +\n"
"                \", price=\" + price +\n"
"                '}';\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:161
msgid "JSON representation of `Quote` objects will be used in messages sent to the AMQP queues and also in the server-sent events sent to browser clients."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:163
msgid "Quarkus has built-in capabilities to deal with JSON AMQP messages."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/amqp.adoc:165
#, no-wrap
msgid "@RegisterForReflection"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/amqp.adoc:170
msgid "The `@RegisterForReflection` annotation instructs Quarkus to include the class (including fields and methods) when building the native executable.  This will be useful later when we run the applications as native executables inside containers.  Without, the native compilation would remove the fields and methods during the dead-code elimination phase."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amqp.adoc:172
#, no-wrap
msgid "Sending quote request"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:175
msgid "Inside the `producer` project locate the generated `src/main/java/org/acme/amqp/producer/QuotesResource.java` file, and update the content to be:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:179
#, no-wrap
msgid "package org.acme.amqp.producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:181
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:187
#, fuzzy, no-wrap
#| msgid ""
#| "import javax.inject.Inject;\n"
#| "import javax.ws.rs.POST;\n"
#| "import javax.ws.rs.Path;\n"
#| "import javax.ws.rs.Consumes;\n"
#| "import javax.ws.rs.core.MediaType;\n"
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:191
#, fuzzy, no-wrap
#| msgid ""
#| "import org.eclipse.microprofile.reactive.messaging.Channel;\n"
#| "import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgid ""
"import org.acme.amqp.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:193
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:196
#, fuzzy, no-wrap
#| msgid ""
#| "@Path(\"/prices\")\n"
#| "public class PriceResource {\n"
msgid ""
"@Path(\"/quotes\")\n"
"public class QuotesResource {\n"
msgstr ""
"@Path(\"/prices\")\n"
"public class PriceResource {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:198
#, no-wrap
msgid "    @Channel(\"quote-requests\") Emitter<String> quoteRequestEmitter; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:211
#, no-wrap
msgid ""
"    /**\n"
"     * Endpoint to generate a new quote request id and send it to \"quote-requests\" AMQP queue using the emitter.\n"
"     */\n"
"    @POST\n"
"    @Path(\"/request\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String createRequest() {\n"
"        UUID uuid = UUID.randomUUID();\n"
"        quoteRequestEmitter.send(uuid.toString()); // <2>\n"
"        return uuid.toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:213
msgid "Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:214
msgid "On a post request, generate a random UUID and send it to the AMQP queue using the emitter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:217
msgid "This channel is mapped to an AMQP queue using the configuration we will add to the `application.properties` file.  Open the `src/main/resource/application.properties` file and add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:222
#: upstream/_versions/main/guides/amqp.adoc:326
#, no-wrap
msgid ""
"# Configure the outgoing `quote-requests` queue\n"
"mp.messaging.outgoing.quote-requests.connector=smallrye-amqp\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:226
msgid "All we need to specify is the `smallrye-amqp` connector.  By default, reactive messaging maps the channel name `quote-requests` to the AMQP queue name."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amqp.adoc:227
#, no-wrap
msgid "Processing quote requests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:231
msgid "Now let's consume the quote request and give out a price.  Inside the `processor` project, locate the `src/main/java/org/acme/amqp/processor/QuoteProcessor.java` file and add the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:235
#, no-wrap
msgid "package org.acme.amqp.processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:237
#, fuzzy, no-wrap
#| msgid ""
#| "import java.time.Duration;\n"
#| "import java.util.Random;\n"
msgid "import java.util.Random;\n"
msgstr ""
"import java.time.Duration;\n"
"import java.util.Random;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:239
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:243
#, fuzzy, no-wrap
#| msgid ""
#| "import io.smallrye.reactive.messaging.annotations.Broadcast;\n"
#| "import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
#| "import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgid ""
"import org.acme.amqp.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""
"import io.smallrye.reactive.messaging.annotations.Broadcast;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:245
#, fuzzy, no-wrap
#| msgid ""
#| "import io.smallrye.reactive.messaging.annotations.Channel;\n"
#| "import org.reactivestreams.Publisher;\n"
msgid "import io.smallrye.reactive.messaging.annotations.Blocking;\n"
msgstr ""
"import io.smallrye.reactive.messaging.annotations.Channel;\n"
"import org.reactivestreams.Publisher;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:252
#, no-wrap
msgid ""
"/**\n"
" * A bean consuming data from the \"request\" AMQP queue and giving out a random quote.\n"
" * The result is pushed to the \"quotes\" AMQP queue.\n"
" */\n"
"@ApplicationScoped\n"
"public class QuoteProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:254
#, no-wrap
msgid "    private Random random = new Random();\n"
msgstr "    private Random random = new Random();\n"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:264
#, no-wrap
msgid ""
"    @Incoming(\"requests\")       // <1>\n"
"    @Outgoing(\"quotes\")         // <2>\n"
"    @Blocking                   // <3>\n"
"    public Quote process(String quoteRequest) throws InterruptedException {\n"
"        // simulate some hard working task\n"
"        Thread.sleep(200);\n"
"        return new Quote(quoteRequest, random.nextInt(100));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:266
msgid "Indicates that the method consumes the items from the `requests` channel"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:267
msgid "Indicates that the objects returned by the method are sent to the `quotes` channel"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:268
msgid "Indicates that the processing is _blocking_ and cannot be run on the caller thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:270
msgid "The `process` method is called for every AMQP message from the `quote-requests` queue, and will send a `Quote` object to the `quotes` queue."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:273
msgid "As with the previous example we need to configure the connectors in the `application.properties` file.  Open the `src/main/resources/application.properties` file and add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:279
#, no-wrap
msgid ""
"# Configure the incoming AMQP queue `quote-requests`\n"
"mp.messaging.incoming.requests.connector=smallrye-amqp\n"
"mp.messaging.incoming.requests.address=quote-requests\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:282
#, no-wrap
msgid ""
"# Configure the outgoing AMQP queue `quotes`\n"
"mp.messaging.outgoing.quotes.connector=smallrye-amqp\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:286
msgid "Note that in this case we have one incoming and one outgoing connector configuration, each one distinctly named.  The configuration keys are structured as follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:288
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:290
msgid "The `channel-name` segment must match the value set in the `@Incoming` and `@Outgoing` annotation:"
msgstr "`channel-name` セグメントは、 `@Incoming` および `@Outgoing` アノテーションで設定された値と一致する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:292
msgid "`quote-requests` -> AMQP queue from which we read the quote requests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:293
#, fuzzy
#| msgid "`prices` -> source in which we read the prices"
msgid "`quotes` -> AMQP queue in which we write the quotes"
msgstr "`prices` -> source (価格の読み取り先)"

#. type: Title ==
#: upstream/_versions/main/guides/amqp.adoc:294
#, no-wrap
msgid "Receiving quotes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:298
msgid "Back to our `producer` project.  Let's modify the `QuotesResource` to consume quotes, bind it to an HTTP endpoint to send events to clients:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:303
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"//...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:305
#, no-wrap
msgid "@Channel(\"quotes\") Multi<Quote> quotes;     // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:314
#, no-wrap
msgid ""
"/**\n"
" * Endpoint retrieving the \"quotes\" queue and sending the items to a server sent event.\n"
" */\n"
"@GET\n"
"@Produces(MediaType.SERVER_SENT_EVENTS) // <2>\n"
"public Multi<Quote> stream() {\n"
"    return quotes; // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:316
#, fuzzy
#| msgid "Injects the `my-data-stream` channel using the `@Channel` qualifier"
msgid "Injects the `quotes` channel using the `@Channel` qualifier"
msgstr "`@Channel` の修飾子を使って `my-data-stream` チャンネルを注入します。"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:317
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr "`Server Sent Events` を使用してコンテンツが送信されたことを示します。"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:318
msgid "Returns the stream (_Reactive Stream_)"
msgstr "ストリーム (_Reactive Stream_) を返します。"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:321
msgid "Again we need to configure the incoming `quotes` channel inside `producer` project.  Add the following inside `application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:329
#, no-wrap
msgid ""
"# Configure the incoming `quotes` queue\n"
"mp.messaging.incoming.quotes.connector=smallrye-amqp\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amqp.adoc:331
#, no-wrap
msgid "The HTML page"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:334
msgid "Final touch, the HTML page reading the converted prices using SSE."
msgstr "最後に、SSE を使って変換された価格を読み込む HTML ページです。"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:336
#, fuzzy
#| msgid "Create the `src/main/resources/META-INF/resources/prices.html` file, with the following content:"
msgid "Create inside the `producer` project `src/main/resources/META-INF/resources/quotes.html` file, with the following content:"
msgstr "以下の内容の `src/main/resources/META-INF/resources/prices.html` ファイルを作成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:340
#, fuzzy, no-wrap
#| msgid ""
#| "<!DOCTYPE html>\n"
#| "<html lang=\"en\">\n"
#| "<head>\n"
#| "    <meta charset=\"UTF-8\">\n"
#| "    <title>Prices</title>\n"
msgid "<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Quotes</title>\n"
msgstr ""
"<!DOCTYPE html>\n"
"<html lang=\"en\">\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <title>Prices</title>\n"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:376
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
"</head>\n"
"<body>\n"
"<div class=\"container\">\n"
"    <div class=\"card\">\n"
"        <div class=\"card-body\">\n"
"            <h2 class=\"card-title\">Quotes</h2>\n"
"            <button class=\"btn btn-info\" id=\"request-quote\">Request Quote</button>\n"
"            <div class=\"quotes\"></div>\n"
"        </div>\n"
"    </div>\n"
"</div>\n"
"</body>\n"
"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n"
"<script>\n"
"    $(\"#request-quote\").click((event) => {\n"
"        fetch(\"/quotes/request\", {method: \"POST\"})\n"
"        .then(res => res.text())\n"
"        .then(qid => {\n"
"            var row = $(`<h4 class='col-md-12' id='${qid}'>Quote # <i>${qid}</i> | <strong>Pending</strong></h4>`);\n"
"            $(\".quotes\").append(row);\n"
"        });\n"
"    });\n"
"    var source = new EventSource(\"/quotes\");\n"
"    source.onmessage = (event) => {\n"
"      var json = JSON.parse(event.data);\n"
"      $(`#${json.id}`).html(function(index, html) {\n"
"        return html.replace(\"Pending\", `\\$\\xA0${json.price}`);\n"
"      });\n"
"    };\n"
"</script>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:380
#, fuzzy
#| msgid "Nothing spectacular here. On each received price, it updates the page."
msgid "Nothing spectacular here.  On each received quote, it updates the page."
msgstr "特に目を見張るようなものは何もありません。受信した価格ごとに、ページが更新されます。"

#. type: Title ==
#: upstream/_versions/main/guides/amqp.adoc:381
#, no-wrap
msgid "Get it running"
msgstr "実行"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:384
#, fuzzy
#| msgid "You can build the native executable with:"
msgid "You just need to run both applications using:"
msgstr "以下ででネイティブ実行ファイルをビルドすることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:388
#, no-wrap
msgid "> mvn -f amqp-quickstart-producer quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:391
msgid "And, in a separate terminal:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:395
#, no-wrap
msgid "> mvn -f amqp-quickstart-processor quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:399
msgid "Quarkus starts a AMQP broker automatically, configures the application and shares the broker instance between different applications.  See xref:amqp-dev-services.adoc[Dev Services for AMQP] for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:402
#, fuzzy
#| msgid "Open `http://localhost:8080/prices.html` in your browser."
msgid "Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button."
msgstr "ブラウザーで `http://localhost:8080/prices.html` を開いてください。"

#. type: Title ==
#: upstream/_versions/main/guides/amqp.adoc:403
#, fuzzy, no-wrap
#| msgid "Running Native"
msgid "Running in JVM or Native mode"
msgstr "ネイティブ実行"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:407
msgid "When not running in dev or test mode, you will need to start your AMQP broker.  You can follow the instructions from the https://activemq.apache.org/components/artemis/documentation/latest/using-server.html[Apache ActiveMQ Artemis website] or create a `docker-compose.yaml` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:411
#, no-wrap
msgid "version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:413
#, no-wrap
msgid "services:\n"
msgstr "services:\n"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:425
#, no-wrap
msgid ""
"  artemis:\n"
"    image: quay.io/artemiscloud/activemq-artemis-broker:0.1.2\n"
"    ports:\n"
"      - \"8161:8161\"\n"
"      - \"61616:61616\"\n"
"      - \"5672:5672\"\n"
"    environment:\n"
"      AMQ_USER: quarkus\n"
"      AMQ_PASSWORD: quarkus\n"
"    networks:\n"
"      - amqp-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:438
#, no-wrap
msgid ""
"  producer:\n"
"    image: quarkus-quickstarts/amqp-quickstart-producer:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: amqp-quickstart-producer\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      AMQP_HOST: artemis\n"
"      AMQP_PORT: 5672\n"
"    ports:\n"
"      - \"8080:8080\"\n"
"    networks:\n"
"      - amqp-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:449
#, no-wrap
msgid ""
"  processor:\n"
"    image: quarkus-quickstarts/amqp-quickstart-processor:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: amqp-quickstart-processor\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      AMQP_HOST: artemis\n"
"      AMQP_PORT: 5672\n"
"    networks:\n"
"      - amqp-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:453
#, no-wrap
msgid ""
"networks:\n"
"  amqp-quickstart-network:\n"
"    name: amqp-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:457
msgid "Note how the AMQP broker location is configured.  The `amqp.host` and `amqp.port` (`AMQP_HOST` and `AMQP_PORT` environment variables) properties configure location."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:460
#, fuzzy
#| msgid "You can build the native executable with:"
msgid "First, make sure you stopped the applications, and build both applications in JVM mode with:"
msgstr "以下ででネイティブ実行ファイルをビルドすることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:465
#, no-wrap
msgid ""
"> mvn -f amqp-quickstart-producer clean package\n"
"> mvn -f amqp-quickstart-processor clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:469
msgid "Once packaged, run `docker compose up --build`.  The UI is exposed on http://localhost:8080/quotes.html"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:471
msgid "To run your applications as native, first we need to build the native executables:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:476
#, no-wrap
msgid ""
"> mvn -f amqp-quickstart-producer package -Pnative  -Dquarkus.native.container-build=true\n"
"> mvn -f amqp-quickstart-processor package -Pnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:480
msgid "The `-Dquarkus.native.container-build=true` instructs Quarkus to build Linux 64bits native executables, who can run inside containers.  Then, run the system using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amqp.adoc:485
#, no-wrap
msgid ""
"> export QUARKUS_MODE=native\n"
"> docker compose up --build\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:488
msgid "As before, the UI is exposed on http://localhost:8080/quotes.html"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amqp.adoc:489
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:493
#, fuzzy
#| msgid "If you want to go further check the documentation of https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging], the implementation used in Quarkus."
msgid "This guide has shown how you can interact with AMQP 1.0 using Quarkus.  It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications."
msgstr "さらに詳しく知りたい場合は、Quarkusで使用されている実装である link:https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] のドキュメントを確認してください。"

#. type: Plain text
#: upstream/_versions/main/guides/amqp.adoc:496
msgid "If you did the Kafka quickstart, you have realized that it's the same code.  The only difference is the connector configuration and the JSON mapping."
msgstr ""

#~ msgid "First, we need a new project. Create a new project with the following command:"
#~ msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#, fuzzy
#~| msgid "services:\n"
#~ msgid "Dev Services"
#~ msgstr "services:\n"

#~ msgid "The price generator"
#~ msgstr "価格ジェネレーター"

#~ msgid ""
#~ "import io.smallrye.mutiny.Multi;\n"
#~ "import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
#~ msgstr ""
#~ "import io.smallrye.mutiny.Multi;\n"
#~ "import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"

#~ msgid ""
#~ "    @Outgoing(\"generated-price\")                        // <1>\n"
#~ "    public Multi<Integer> generate() {                  // <2>\n"
#~ "        return Multi.createFrom().ticks().every(Duration.ofSeconds(5))\n"
#~ "                .onOverflow().drop()\n"
#~ "                .map(tick -> random.nextInt(100));\n"
#~ "    }\n"
#~ msgstr ""
#~ "    @Outgoing(\"generated-price\")                        // <1>\n"
#~ "    public Multi<Integer> generate() {                  // <2>\n"
#~ "        return Multi.createFrom().ticks().every(Duration.ofSeconds(5))\n"
#~ "                .onOverflow().drop()\n"
#~ "                .map(tick -> random.nextInt(100));\n"
#~ "    }\n"

#~ msgid "}\n"
#~ msgstr "}\n"

#~ msgid "Instruct Reactive Messaging to dispatch the items from returned stream to `generated-price`."
#~ msgstr "返されたストリームから `generated-price` にアイテムをディスパッチするように Reactive Messaging に指示します。"

#~ msgid "The method returns a Mutiny _stream_ (`Multi`) emitting a random _price_ every 5 seconds."
#~ msgstr "このメソッドは、5 秒ごとにランダムな _価格_ を生成する Mutiny _ストリーム_ (`Multi`) を返します。"

#~ msgid "The price converter"
#~ msgstr "価格 (price) コンバーター"

#~ msgid "    private static final double CONVERSION_RATE = 0.88;\n"
#~ msgstr "    private static final double CONVERSION_RATE = 0.88;\n"

#~ msgid "Indicates that the item are dispatched to all _subscribers_"
#~ msgstr "アイテムがすべての _サブスクライバー_ に発送されていることを示します。"

#~ msgid "The price resource"
#~ msgstr "価格リソース"

#~ msgid "`generated-price` -> sink in which we write the prices"
#~ msgstr "`generated-price` -> sink (価格の書き込み先)"

#~ msgid "What about `my-data-stream`? This is an in-memory stream, not connected to a message broker."
#~ msgstr "`my-data-stream` はどうでしょうか? これはインメモリストリームであり、メッセージブローカーには接続されていません。"

#~ msgid ""
#~ "    <link rel=\"stylesheet\" type=\"text/css\"\n"
#~ "          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
#~ "    <link rel=\"stylesheet\" type=\"text/css\"\n"
#~ "          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
#~ "</head>\n"
#~ "<body>\n"
#~ "<div class=\"container\">\n"
#~ msgstr ""
#~ "    <link rel=\"stylesheet\" type=\"text/css\"\n"
#~ "          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
#~ "    <link rel=\"stylesheet\" type=\"text/css\"\n"
#~ "          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
#~ "</head>\n"
#~ "<body>\n"
#~ "<div class=\"container\">\n"

#~ msgid ""
#~ "    <h2>Last price</h2>\n"
#~ "    <div class=\"row\">\n"
#~ "    <p class=\"col-md-12\">The last price is <strong><span id=\"content\">N/A</span>&nbsp;&euro;</strong>.</p>\n"
#~ "    </div>\n"
#~ "</div>\n"
#~ "</body>\n"
#~ "<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n"
#~ "<script>\n"
#~ "    var source = new EventSource(\"/prices/stream\");\n"
#~ "    source.onmessage = function (event) {\n"
#~ "        document.getElementById(\"content\").innerHTML = event.data;\n"
#~ "    };\n"
#~ "</script>\n"
#~ "</html>\n"
#~ msgstr ""
#~ "    <h2>Last price</h2>\n"
#~ "    <div class=\"row\">\n"
#~ "    <p class=\"col-md-12\">The last price is <strong><span id=\"content\">N/A</span>&nbsp;&euro;</strong>.</p>\n"
#~ "    </div>\n"
#~ "</div>\n"
#~ "</body>\n"
#~ "<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n"
#~ "<script>\n"
#~ "    var source = new EventSource(\"/prices/stream\");\n"
#~ "    source.onmessage = function (event) {\n"
#~ "        document.getElementById(\"content\").innerHTML = event.data;\n"
#~ "    };\n"
#~ "</script>\n"
#~ "</html>\n"

#~ msgid "./mvnw quarkus:dev\n"
#~ msgstr "./mvnw quarkus:dev\n"

#, fuzzy
#~| msgid "This is a development cluster, do not use in production."
#~ msgid "This is a development broker, do not use in production."
#~ msgstr "これは開発クラスターであり、本番では使用しないでください。"

#, fuzzy
#~| msgid "You can build the native executable with:"
#~ msgid "You can build and run the native executable with:"
#~ msgstr "以下ででネイティブ実行ファイルをビルドすることができます。"

#~ msgid "Imperative usage"
#~ msgstr "命令的な使用法"

#~ msgid "For this, you can use an `Emitter`."
#~ msgstr "この場合には `Emitter` が利用できます。"

#~ msgid "    @Inject @Channel(\"price-create\") Emitter<Double> priceEmitter;\n"
#~ msgstr "    @Inject @Channel(\"price-create\") Emitter<Double> priceEmitter;\n"

#~ msgid ""
#~ "    @POST\n"
#~ "    @Consumes(MediaType.TEXT_PLAIN)\n"
#~ "    public void addPrice(Double price) {\n"
#~ "        priceEmitter.send(price);\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @POST\n"
#~ "    @Consumes(MediaType.TEXT_PLAIN)\n"
#~ "    public void addPrice(Double price) {\n"
#~ "        priceEmitter.send(price);\n"
#~ "    }\n"
#~ "}\n"

#~ msgid "Deprecation"
#~ msgstr "非推奨"

#~ msgid "The `io.smallrye.reactive.messaging.annotations.Emitter`, `io.smallrye.reactive.messaging.annotations.Channel` and `io.smallrye.reactive.messaging.annotations.OnOverflow` classes are now deprecated and replaced by:"
#~ msgstr "`io.smallrye.reactive.messaging.annotations.Emitter`、`io.smallrye.reactive.messaging.annotations.Channel`、`io.smallrye.reactive.messaging.annotations.OnOverflow` クラスは現在非推奨となっており、以下のように置き換えられています。"

#~ msgid "`org.eclipse.microprofile.reactive.messaging.Emitter`"
#~ msgstr "`org.eclipse.microprofile.reactive.messaging.Emitter`"

#~ msgid "`org.eclipse.microprofile.reactive.messaging.Channel`"
#~ msgstr "`org.eclipse.microprofile.reactive.messaging.Channel`"

#~ msgid "`org.eclipse.microprofile.reactive.messaging.OnOverflow`"
#~ msgstr "`org.eclipse.microprofile.reactive.messaging.OnOverflow`"

#~ msgid "The new `Emitter.send` method returns a `CompletionStage` completed when the produced message is acknowledged."
#~ msgstr "新しい `Emitter.send` メソッドは、生成されたメッセージが確認されると、`CompletionStage` の完了を返します。"

#~ msgid "./mvnw package -Pnative\n"
#~ msgstr "./mvnw package -Pnative\n"
