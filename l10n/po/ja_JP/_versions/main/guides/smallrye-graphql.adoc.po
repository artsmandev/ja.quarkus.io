# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-15 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/smallrye-graphql.adoc:6
#, no-wrap
msgid "SmallRye GraphQL"
msgstr "SmallRye GraphQL"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:15
msgid "This guide demonstrates how your Quarkus application can use https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL], an implementation of the https://github.com/eclipse/microprofile-graphql/[MicroProfile GraphQL] specification."
msgstr "このガイドでは、 link:https://github.com/eclipse/microprofile-graphql/[MicroProfile GraphQL] 仕様の実装である link:https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL] をQuarkusアプリケーションで使用する方法を説明します。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:17
msgid "As the https://www.graphql.org/[GraphQL] specification website states:"
msgstr "link:https://www.graphql.org/[GraphQL] の仕様のWebサイトにも記載されているように"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:23
msgid "GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.  GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools."
msgstr "GraphQLは、APIのためのクエリ言語であり、既存のデータを使ってそのクエリを実行するためのランタイムです。  GraphQLは、API内のデータを完全かつ理解しやすい形で提供し、クライアントが必要なものだけを要求する力を与え、時間をかけてAPIを進化させることを容易にし、強力な開発ツールを実現します。"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:26
#, no-wrap
msgid ""
"**GraphQL** was originally developed by **Facebook** in 2012 and has been\n"
"an open standard since 2015.\n"
msgstr "**GraphQL** はもともと2012年に **Facebook** が開発したもので、2015年からはオープンスタンダードとなっています。\n"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:29
msgid "GraphQL is not a replacement for REST API specification but merely an alternative. Unlike REST, GraphQL API's have the ability to benefit the client by:"
msgstr "GraphQLはREST APIの仕様を置き換えるものではなく、単なる別の手段です。RESTとは異なり、GraphQL APIは以下のようにクライアントに利益をもたらす機能を持っています。"

#. type: Labeled list
#: upstream/_versions/main/guides/smallrye-graphql.adoc:30
#, no-wrap
msgid "Preventing Over-fetching and Under-fetching"
msgstr "オーバーフェッチとアンダーフェッチの防止"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:36
msgid "REST APIs are server-driven fixed data responses that cannot be determined by the client. Although the client does not require all the fields the client must retrieve all the data hence `Over-fetching`. A client may also require multiple REST API calls according to the first call (HATEOAS) to retrieve all the data that is required thereby `Under-fetching`."
msgstr "REST API は、クライアントが決定できないサーバー主導の固定データレスポンスです。クライアントはすべてのフィールドを必要としなくても、クライアントはすべてのデータを取得しなければならないため、 `Over-fetching` です。クライアントはまた、必要とされるすべてのデータを取得するために、最初の呼び出し(HATEOAS)に応じて複数のREST API呼び出しを必要とする場合があり、 `Under-fetching` です。"

#. type: Labeled list
#: upstream/_versions/main/guides/smallrye-graphql.adoc:37
#, no-wrap
msgid "API Evolution"
msgstr "APIの進化"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:41
msgid "Since GraphQL API's returns data that are requested by the client adding additional fields and capabilities to existing API will not create breaking changes to existing clients."
msgstr "GraphQL APIはクライアントから要求されたデータを返すので、既存のAPIにフィールドや機能を追加しても、既存のクライアントに大きな変更を加えることはありません。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:42
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:46
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:50
msgid "In this guide, we build a simple GraphQL application that exposes a GraphQL API at `/graphql`."
msgstr "このガイドでは、 `/graphql` で GraphQL API を公開するシンプルな GraphQL アプリケーションを構築します。"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:52
msgid "This example was inspired by a popular GraphQL API."
msgstr "この例は、人気のある GraphQL API にインスパイアされたものです。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:53
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:57
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:59
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:61
#, fuzzy
msgid "The solution is located in the `microprofile-graphql-quickstart` link:{quickstarts-tree-url}/microprofile-graphql-quickstart[directory]."
msgstr "ソリューションは `microprofile-graphql-quickstart` link:{quickstarts-tree-url}/microprofile-graphql-quickstart[ディレクトリに] あります。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:62
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:65
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:71
msgid "This command generates a project, importing the `smallrye-graphql` extension."
msgstr "このコマンドは、 `smallrye-graphql` エクステンションをインポートした Maven プロジェクトを生成します。"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:74
msgid "If you already have your Quarkus project configured, you can add the `smallrye-graphql` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `smallrye-graphql` エクステンションを追加することができます。"

#. type: quote
#: upstream/_versions/main/guides/smallrye-graphql.adoc:79
msgid "This will add the following to your build file:"
msgstr "これにより、`pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/main/guides/smallrye-graphql.adoc:81
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1293
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:87
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-graphql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/smallrye-graphql.adoc:90
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1302
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:93
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-graphql\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:95
#, no-wrap
msgid "Preparing an Application: GraphQL API"
msgstr "アプリケーションの準備: GraphQL API"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:98
msgid "In this section we will start creating the GraphQL API."
msgstr "このセクションでは、GraphQL APIの作成を開始します。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:100
msgid "First, create the following entities representing a film from a galaxy far, far away:"
msgstr "まず、はるか彼方の銀河系の映画を表す以下のエンティティを作成します:"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:104
#: upstream/_versions/main/guides/smallrye-graphql.adoc:702
#, no-wrap
msgid "package org.acme.microprofile.graphql;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:106
#, no-wrap
msgid "public class Film {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:111
#, no-wrap
msgid ""
"    public String title;\n"
"    public Integer episodeID;\n"
"    public String director;\n"
"    public LocalDate releaseDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:113
#: upstream/_versions/main/guides/smallrye-graphql.adoc:125
#: upstream/_versions/main/guides/smallrye-graphql.adoc:709
#, no-wrap
msgid "}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:115
#, no-wrap
msgid "public class Hero {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:123
#, no-wrap
msgid ""
"    public String name;\n"
"    public String surname;\n"
"    public Double height;\n"
"    public Integer mass;\n"
"    public Boolean darkSide;\n"
"    public LightSaber lightSaber;\n"
"    public List<Integer> episodeIds = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:129
#, no-wrap
msgid ""
"enum LightSaber {\n"
"    RED, BLUE, GREEN\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:132
msgid "For readability we use classes with public fields, but classes with private fields with public getters and setters will also work."
msgstr "可読性の為にpublicなフィールドを持つクラスを使用していますが、publicなゲッターとセッターを持つprivateなフィールドを持つクラスも使用できます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:135
msgid "The classes we have just created describe the GraphQL schema which is a set of possible data (objects, fields, relationships) that a client can access."
msgstr "先ほど作成したクラスは、クライアントがアクセス可能なデータ（オブジェクト、フィールド、リレーションシップ）のセットであるGraphQLスキーマを記述しています。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:137
msgid "Let's continue with an example CDI bean, that would work as a repository:"
msgstr "引き続き、リポジトリとして動作するCDI Beanの例を見てみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:142
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GalaxyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:144
#, no-wrap
msgid "    private List<Hero> heroes = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:146
#, no-wrap
msgid "    private List<Film> films = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:148
#, no-wrap
msgid "    public GalaxyService() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:154
#, no-wrap
msgid ""
"        Film aNewHope = new Film();\n"
"        aNewHope.title = \"A New Hope\";\n"
"        aNewHope.releaseDate = LocalDate.of(1977, Month.MAY, 25);\n"
"        aNewHope.episodeID = 4;\n"
"        aNewHope.director = \"George Lucas\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:160
#, no-wrap
msgid ""
"        Film theEmpireStrikesBack = new Film();\n"
"        theEmpireStrikesBack.title = \"The Empire Strikes Back\";\n"
"        theEmpireStrikesBack.releaseDate = LocalDate.of(1980, Month.MAY, 21);\n"
"        theEmpireStrikesBack.episodeID = 5;\n"
"        theEmpireStrikesBack.director = \"George Lucas\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:166
#, no-wrap
msgid ""
"        Film returnOfTheJedi = new Film();\n"
"        returnOfTheJedi.title = \"Return Of The Jedi\";\n"
"        returnOfTheJedi.releaseDate = LocalDate.of(1983, Month.MAY, 25);\n"
"        returnOfTheJedi.episodeID = 6;\n"
"        returnOfTheJedi.director = \"George Lucas\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:170
#, no-wrap
msgid ""
"        films.add(aNewHope);\n"
"        films.add(theEmpireStrikesBack);\n"
"        films.add(returnOfTheJedi);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:179
#, no-wrap
msgid ""
"        Hero luke = new Hero();\n"
"        luke.name = \"Luke\";\n"
"        luke.surname = \"Skywalker\";\n"
"        luke.height = 1.7;\n"
"        luke.mass = 73;\n"
"        luke.lightSaber = LightSaber.GREEN;\n"
"        luke.darkSide = false;\n"
"        luke.episodeIds.addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:187
#, no-wrap
msgid ""
"        Hero leia = new Hero();\n"
"        leia.name = \"Leia\";\n"
"        leia.surname = \"Organa\";\n"
"        leia.height = 1.5;\n"
"        leia.mass = 51;\n"
"        leia.darkSide = false;\n"
"        leia.episodeIds.addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:197
#, no-wrap
msgid ""
"        Hero vader = new Hero();\n"
"        vader.name = \"Darth\";\n"
"        vader.surname = \"Vader\";\n"
"        vader.height = 1.9;\n"
"        vader.mass = 89;\n"
"        vader.darkSide = true;\n"
"        vader.lightSaber = LightSaber.RED;\n"
"        vader.episodeIds.addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:201
#, no-wrap
msgid ""
"        heroes.add(luke);\n"
"        heroes.add(leia);\n"
"        heroes.add(vader);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:203
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:207
#, no-wrap
msgid ""
"    public List<Film> getAllFilms() {\n"
"        return films;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:211
#, no-wrap
msgid ""
"    public Film getFilm(int id) {\n"
"        return films.get(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:217
#, no-wrap
msgid ""
"    public List<Hero> getHeroesByFilm(Film film) {\n"
"        return heroes.stream()\n"
"                .filter(hero -> hero.episodeIds.contains(film.episodeID))\n"
"                .collect(Collectors.toList());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:221
#, no-wrap
msgid ""
"    public void addHero(Hero hero) {\n"
"        heroes.add(hero);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:225
#, no-wrap
msgid ""
"    public Hero deleteHero(int id) {\n"
"        return heroes.remove(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:232
#, no-wrap
msgid ""
"    public List<Hero> getHeroesBySurname(String surname) {\n"
"        return heroes.stream()\n"
"                .filter(hero -> hero.surname.equals(surname))\n"
"                .collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:235
msgid "Now, let's create our first GraphQL API."
msgstr "それでは、最初のGraphQL APIを作成してみましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:237
msgid "Edit the `org.acme.microprofile.graphql.FilmResource` class as following:"
msgstr "`org.acme.microprofile.graphql.FilmResource` クラスを以下のように編集します。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:242
#, no-wrap
msgid ""
"@GraphQLApi // <1>\n"
"public class FilmResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:245
#, no-wrap
msgid ""
"    @Inject\n"
"    GalaxyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:252
#, no-wrap
msgid ""
"    @Query(\"allFilms\") // <2>\n"
"    @Description(\"Get all Films from a galaxy far far away\") // <3>\n"
"    public List<Film> getAllFilms() {\n"
"        return service.getAllFilms();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:255
msgid "`@GraphQLApi` annotation indicates that the CDI bean will be a GraphQL endpoint"
msgstr "`@GraphQLApi` アノテーションは、CDI BeanがGraphQLのエンドポイントになることを示しています。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:256
msgid "`@Query` annotation defines that this method will be queryable with the name `allFilms`"
msgstr "`@Query` アノテーションは、このメソッドが `allFilms` という名前でクエリー可能であることを定義します。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:257
msgid "Documentation of the queryable method"
msgstr "クエリー可能なメソッドのドキュメントです。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:260
msgid "The value of the `@Query` annotation is optional and would implicitly be defaulted to the method name if absent."
msgstr "アノテーション `@Query` の値はオプションで、これがない場合は暗黙のうちにメソッド名がデフォルトになります。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:262
msgid "This way we have created our first queryable API which we will later expand."
msgstr "このようにして、最初のクエリー可能なAPIが作成されましたが、これは後に拡張されます。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:263
#, no-wrap
msgid "Launch"
msgstr "起動"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:266
msgid "Launch the quarkus application in dev mode:"
msgstr "quarkusアプリを開発モードで起動します:"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:269
#, no-wrap
msgid "Introspect"
msgstr "イントロスペクト"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:272
msgid "The full schema of the GraphQL API can be retrieved by calling the following:"
msgstr "GraphQL APIの完全なスキーマは、以下を呼び出すことで取得できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:276
#, no-wrap
msgid "curl http://localhost:8080/graphql/schema.graphql\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:279
msgid "The server will return the complete schema of the GraphQL API."
msgstr "サーバーは、GraphQL APIの完全なスキーマを返します。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:281
#, no-wrap
msgid "GraphQL UI"
msgstr "GraphQL UI"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:284
#: upstream/_versions/main/guides/smallrye-graphql.adoc:692
msgid "Experimental - not included in the MicroProfile specification"
msgstr "実験的 - MicroProfileの仕様に含まれません"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:286
msgid "GraphQL UI is a great tool permitting easy interaction with your GraphQL APIs."
msgstr "GraphQL UIは、GraphQL APIとの簡単なやり取りを可能にする素晴らしいツールです。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:289
msgid "The Quarkus `smallrye-graphql` extension ships with https://github.com/graphql/graphiql/blob/main/packages/graphiql/README.md[GraphiQL] and enables it by default in `dev` and `test` modes, but it can also be explicitly configured for `production` mode as well, by setting the `quarkus.smallrye-graphql.ui.always-include` configuration property to `true`."
msgstr "Quarkusの `smallrye-graphql` エクステンションは、 https://github.com/graphql/graphiql/blob/main/packages/graphiql/README.md[GraphiQL] と一緒に出荷され、 `dev` と `test` モードでデフォルトで有効になりますが、 `quarkus.smallrye-graphql.ui.always-include` 設定プロパティを `true` に設定することで `production` モードでも明示的に有効にすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:291
msgid "The GraphQL UI can be accessed from http://localhost:8080/q/graphql-ui/ ."
msgstr "GraphQLは、 http://localhost:8080/q/graphql-ui/ からアクセスできます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:293
msgid "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"
msgstr "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:295
#, fuzzy
msgid "Have a look at the link:security-authorize-web-endpoints-reference[Authorization of Web Endpoints] Guide on how to add/remove security for the GraphQL UI."
msgstr "GraphQL UIのセキュリティを追加/削除する方法については、「 link:security-authorize-web-endpoints-reference[Authorization of Web Endpoints] Guide」を参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:296
#, no-wrap
msgid "Query the GraphQL API"
msgstr "GraphQL APIへのクエリー"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:299
msgid "Now visit the GraphQL UI page that has been deployed in `dev` mode."
msgstr "それでは、 `dev` モードでデプロイされたGraphQL UIページにアクセスしてみましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:301
msgid "Enter the following query to the GraphQL UI and press the `play` button:"
msgstr "以下のクエリをGraphQL UIに入力し、 `play` ボタンを押します。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:312
#, no-wrap
msgid ""
"query allFilms {\n"
"  allFilms {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:318
msgid "Since our query contains all the fields in the `Film` class we will retrieve all the fields in our response. Since GraphQL API responses are client determined, the client can choose which fields it will require."
msgstr "クエリには `Film` クラスのすべてのフィールドが含まれているので、レスポンスではすべてのフィールドを取得します。GraphQL APIのレスポンスはクライアントが決めるものなので、クライアントはどのフィールドを必要とするかを選択することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:322
msgid "Let's assume that our client only requires `title` and `releaseDate` making the previous call to the API `Over-fetching` of unnecessary data."
msgstr "クライアントが必要としているのは `title` と `releaseDate` だけで、先ほどの API 呼び出しでは不要なデータを `Over-fetching` していたと仮定しましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:324
msgid "Enter the following query into the GraphQL UI and hit the `play` button:"
msgstr "以下のクエリをGraphQL UIに入力し、 `play` ボタンを押します。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:333
#, no-wrap
msgid ""
"query allFilms {\n"
"  allFilms {\n"
"    title\n"
"    releaseDate\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:337
msgid "Notice in the response we have only retrieved the required fields.  Therefore, we have prevented `Over-fetching`."
msgstr "レスポンスでは、必要なフィールドのみを取得していることに注意してください。そのため、 `Over-fetching` を防ぐことができました。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:340
msgid "Let's continue to expand our GraphQL API by adding the following to the `FilmResource` class."
msgstr "引き続き、 `FilmResource` クラスに以下を追加して、GraphQL API を拡張してみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:348
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Film getFilm(@Name(\"filmId\") int id) {\n"
"        return service.getFilm(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:353
msgid "Notice how we have excluded the value in the `@Query` annotation.  Therefore, the name of the query is implicitly set as the method name excluding the `get`."
msgstr "`@Query` のアノテーションで値を除外していることに注目してください。したがって、クエリの名前は、 `get` を除いたメソッド名が暗黙的に設定されます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:356
msgid "This query will allow the client to retrieve the film by id, and the `@Name` annotation on the parameter changes the parameter name to `filmId` rather than the default `id` that it would be if you omit the `@Name` annotation."
msgstr "このクエリでは、クライアントが映画をIDで検索することができます。また、パラメータに `@Name` のアノテーションを付けると、パラメータ名が `@Name` のアノテーションを省略した場合のデフォルトの `id` ではなく、 `filmId` に変更されます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:358
#: upstream/_versions/main/guides/smallrye-graphql.adoc:559
#: upstream/_versions/main/guides/smallrye-graphql.adoc:678
#: upstream/_versions/main/guides/smallrye-graphql.adoc:768
msgid "Enter the following into the `GraphQL UI` and make a request."
msgstr "`GraphQL` UIに以下の内容を入力してリクエストしてください。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:369
#, no-wrap
msgid ""
"query getFilm {\n"
"  film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:374
msgid "The `film` query method requested fields can be determined as such in our previous example. This way we can retrieve individual film information."
msgstr "先ほどの例では、 `film` というクエリメソッドの要求フィールドがそのように決定できます。このようにして、個々の映画の情報を取得することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:378
msgid "However, say our client requires both films with filmId `0` and `1`.  In a REST API the client would have to make two calls to the API.  Therefore, the client would be `Under-fetching`."
msgstr "しかし、クライアントが filmId `0` と `1` の両方の映画を必要とするとします。REST APIでは、クライアントはAPIに2回コールする必要があります。したがって、クライアントは `Under-fetching` となります。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:380
msgid "In GraphQL, it is possible to make multiple queries at once."
msgstr "GraphQLでは、一度に複数のクエリを実行することが可能です。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:382
msgid "Enter the following into the `GraphQL UI` to retrieve two films:"
msgstr "以下をGraphQLに入力して、2つの映画を検索します。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:399
#, no-wrap
msgid ""
"query getFilms {\n"
"  film0: film(filmId: 0) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"  film1: film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:402
msgid "This enabled the client to fetch the required data in a single request."
msgstr "これにより、クライアントは1回のリクエストで必要なデータを取得できるようになりました。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:403
#, no-wrap
msgid "Expanding the API"
msgstr "APIの拡張"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:407
msgid "Until now, we have created a GraphQL API to retrieve film data.  We now want to enable the clients to retrieve the `Hero` data of the `Film`."
msgstr "これまでは、映画のデータを取得するための GraphQL API を作成していました。今度は、クライアントが `Film` の `Hero` データを取得できるようにしたいと考えています。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:409
#: upstream/_versions/main/guides/smallrye-graphql.adoc:667
#: upstream/_versions/main/guides/smallrye-graphql.adoc:757
#: upstream/_versions/main/guides/smallrye-graphql.adoc:794
#: upstream/_versions/main/guides/smallrye-graphql.adoc:903
msgid "Add the following to our `FilmResource` class:"
msgstr "`FilmResource` のクラスに以下を追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:415
#, no-wrap
msgid ""
"    public List<Hero> heroes(@Source Film film) { // <1>\n"
"        return service.getHeroesByFilm(film);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:418
msgid "Enable `List<Hero>` data to be added to queries that respond with `Film`"
msgstr "`Film` で応答するクエリに `List<Hero>` データを追加できるようになりました。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:422
msgid "By adding this method we have effectively changed the schema of the GraphQL API.  Although the schema has changed the previous queries will still work.  Since we only expanded the API to be able to retrieve the `Hero` data of the `Film`."
msgstr "このメソッドを追加することで、GraphQL APIのスキーマが事実上変更されました。  スキーマが変更されたにもかかわらず、以前のクエリはそのまま動作します。  今回は、 `Film` の `Hero` のデータを取得できるようにAPIを拡張しただけですから。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:424
msgid "Enter the following into the `GraphQL UI` to retrieve the film and hero data."
msgstr "GraphQLに以下のように入力して、フィルムとヒーローのデータを取得します。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:442
#, no-wrap
msgid ""
"query getFilmHeroes {\n"
"  film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"    heroes {\n"
"      name\n"
"      height\n"
"      mass\n"
"      darkSide\n"
"      lightSaber\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:445
msgid "The response now includes the heroes of the film."
msgstr "今や、レスポンスには映画のヒーローたちも含まれています。"

#. type: Title ===
#: upstream/_versions/main/guides/smallrye-graphql.adoc:446
#, no-wrap
msgid "Batching"
msgstr "バッチ処理"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:450
msgid "When you are exposing a `Collection` return like our `getAllFilms`, you might want to use the batch form of the above, to more efficiently fetch the heroes:"
msgstr "今回の `getAllFilms` のように `Collection` の戻り値を公開している場合は、より効率的にヒーローを取得するために、上記のバッチ形式を使用するとよいでしょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:456
#, no-wrap
msgid ""
"    public List<List<Hero>> heroes(@Source List<Film> films) { // <1>\n"
"        // Here fetch all hero lists\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:459
msgid "Here receive the films as a batch, allowing you to fetch the corresponding heroes."
msgstr "ここでは、映画を一括して受け取ることで、対応するヒーローを取り出すことができます。"

#. type: Title ===
#: upstream/_versions/main/guides/smallrye-graphql.adoc:460
#, no-wrap
msgid "Non blocking"
msgstr "ノンブロッキング"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:463
msgid "Queries can be made reactive by using `Uni` as a return type, or adding `@NonBlocking` to the method:"
msgstr "クエリは、例えば `Uni` を戻り値の型として使用するか、 `@NonBlocking` をメソッドに付与することでリアクティブにすることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:471
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Uni<Film> getFilm(int filmId) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:475
msgid "Or you can use `@NonBlocking`:"
msgstr "または、 `@NonBlocking` を使用することもできます:"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:484
#: upstream/_versions/main/guides/smallrye-graphql.adoc:498
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    @NonBlocking\n"
"    public Film getFilm(int filmId) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:487
msgid "Using `Uni` or `@NonBlocking` means that the request will be executed on Event-loop threads rather than Worker threads."
msgstr "`Uni` または `@NonBlocking` を使用すると、リクエストは Worker スレッドではなく Event-loop スレッドで実行されます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:489
msgid "You can mix Blocking and Non-blocking in one request,"
msgstr "BlockingとNon-blockingを1つのリクエストに混ぜることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:502
#, no-wrap
msgid ""
"    public List<Hero> heroes(@Source Film film) {\n"
"        return service.getHeroesByFilm(film);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:505
msgid "Above will fetch the film on the event-loop threads, but switch to the worker thread to fetch the heroes."
msgstr "上記では、イベントループのスレッドで映画を取得しますが、ヒーローを取得するためにワーカスレッドに切り替えます。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:506
#, no-wrap
msgid "Abstract Types"
msgstr "抽象型"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:511
msgid "The current schema is simple with only two concrete types, `Hero` and `Film`.  Now we want to expand our API with additional types and add some abstractions that make interacting with them easy for clients."
msgstr "現在のスキーマは， `Hero` と `Film` という2つの具象型だけのシンプルなものです。ここで、型を追加して拡張し、クライアントが簡単に型と対話できるような抽象化機能を追加してAPIを拡張したいと思います。"

#. type: Title ===
#: upstream/_versions/main/guides/smallrye-graphql.adoc:512
#, no-wrap
msgid "Interfaces"
msgstr "インターフェイス"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:515
msgid "Let's give our heroes some allies."
msgstr "ヒーローに味方をつけてみましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:517
msgid "First, create a new entity to represent our `Ally`."
msgstr "まず、 `Ally` を表すエンティティを新規に作成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:521
#, no-wrap
msgid "public class Ally {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:526
#, no-wrap
msgid ""
"    public String name;\n"
"    public String surname;\n"
"    public Hero partner;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:529
msgid "Update the `GalaxyService` to have some allies."
msgstr "`GalaxyService` を更新して、味方がいるようにします。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:533
#, no-wrap
msgid "    private List<Ally> allies = new ArrayList();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:536
#, no-wrap
msgid ""
"    public GalaxyService() {\n"
"        // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:542
#, no-wrap
msgid ""
"        Ally jarjar = new Ally();\n"
"        jarjar.name = \"Jar Jar\";\n"
"        jarjar.surname = \"Binks\";\n"
"        allies.add(jarjar);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:546
#, no-wrap
msgid ""
"    public List<Ally> getAllAllies() {\n"
"        return allies;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:549
msgid "Let's also update `FilmResource` to allow clients to query for all allies:"
msgstr "また、 `FilmResource` を更新して、クライアントがすべての味方を照会できるようにしましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:556
#, no-wrap
msgid ""
"    @Query\n"
"    public List<Ally> allies() {\n"
"        return service.getAllAllies();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:568
#, no-wrap
msgid ""
"query getAllies {\n"
"    allies {\n"
"        name\n"
"        surname\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:572
msgid "Notice that `Ally` has a some of the same fields as a `Hero`.  To better make queries easier for clients, let's create an abstraction for any character."
msgstr "`Ally` は `Hero` と同じフィールドをいくつか持っていることに注目してください。 クライアントがクエリーをより簡単に行えるように、任意のキャラクターに対する抽象化を作成しましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:574
msgid "Create a new Java interface that defines our common character traits."
msgstr "私たちの共通のキャラクターの特徴を定義した新しいJavaインタフェースを作成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:578
#, no-wrap
msgid "public interface Character {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:583
#, no-wrap
msgid ""
"    // <1>\n"
"    String getName();\n"
"    String getSurname();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:586
msgid "Getters defined in an interface will define the GraphQL fields that it contains"
msgstr "インターフェイスで定義されたゲッターは、それが含むGraphQLフィールドを定義します。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:588
msgid "Now, update our `Hero` and `Ally` entities to implement this interface."
msgstr "さて、このインタフェースを実装するために、 `Hero` と `Ally` のエンティティを更新します。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:593
#, no-wrap
msgid ""
"public class Hero implements Character {\n"
"    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:598
#: upstream/_versions/main/guides/smallrye-graphql.adoc:612
#, no-wrap
msgid ""
"    // <1>\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:604
#: upstream/_versions/main/guides/smallrye-graphql.adoc:618
#, no-wrap
msgid ""
"    // <1>\n"
"    public String getSurname() {\n"
"        return surname;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:607
#, no-wrap
msgid ""
"public class Ally implements Character {\n"
"    // ...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:621
msgid "Because interfaces can't define fields, we have to implement the getters"
msgstr "インターフェースはフィールドを定義できないので、ゲッターを実装する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:624
msgid "By adding an interface and updating existing entities to implement it, we have effectively changed the schema.  The updated schema will now include the new `Ally` type and `Character` interface."
msgstr "インターフェイスを追加し、既存のエンティティを更新してそれを実装することで、事実上スキーマを変更したことになります。更新されたスキーマには、新しい型 `Ally` とインターフェース `Character` が含まれるようになりました。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:632
#, no-wrap
msgid ""
"# <1>\n"
"interface Character {\n"
"    name: String\n"
"    surname: String\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:639
#, no-wrap
msgid ""
"# <2>\n"
"type Ally implements Character {\n"
"    name: String\n"
"    surname: String\n"
"    partner: Hero\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:646
#, no-wrap
msgid ""
"# <3>\n"
"type Hero implements Character {\n"
"    name: String\n"
"    surname: String\n"
"    # ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:649
msgid "The `Character` interface was defined with the getters as fields"
msgstr "ゲッターをフィールドとする `Character` インターフェイスが定義されました。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:650
msgid "The `Ally` type was added and it implements `Character`"
msgstr "`Ally` 型が追加され、 `Character` を実装しています。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:651
msgid "The `Hero` type was updated to implement `Character`"
msgstr "`Hero` 型を更新して `Character` を実装しました。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:653
msgid "Update our `GalaxyService` to provide all characters."
msgstr "全キャラクターを提供するために、 `GalaxyService` を更新します。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:662
#, no-wrap
msgid ""
"    public List<Character> getAllCharacters() {\n"
"        List<Character> characters = new ArrayList<>();\n"
"        characters.addAll(heroes);\n"
"        characters.addAll(allies);\n"
"        return characters;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:665
msgid "Now we can allow clients to query for all characters, not just heroes."
msgstr "これで、クライアントがヒーローだけでなく、すべてのキャラクターをクエリできるようになりました。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:675
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get all characters from a galaxy far far away\")\n"
"    public List<Character> characters() {\n"
"        return service.getAllCharacters();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:687
#, no-wrap
msgid ""
"query getCharacters {\n"
"    characters {\n"
"        name\n"
"        surname\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/smallrye-graphql.adoc:689
#, no-wrap
msgid "Unions"
msgstr "ユニオン"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:696
msgid "So far, our API has only allowed us to query directly for an entity or list of entities.  Now we want to allow clients to search all of our entities.  While `Hero` and `Ally` have a shared abstract type of `Character`, there is no abstraction that also includes `Film`."
msgstr "これまで、私たちのAPIでは、エンティティやエンティティのリストに対して直接クエリを発行することだけが可能でした。今度は、クライアントが当社のすべてのエンティティを検索できるようにしたいと思います。 `Hero` と `Ally` は共有の抽象型である `Character` を持っていますが、 `Film` も含む抽象型はありません。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:698
msgid "First, create this new abstract type representing the possible return types for a search result."
msgstr "まず、検索結果の返り値を表す新しい抽象型を作成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:704
#, no-wrap
msgid "import io.smallrye.graphql.api.Union;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:707
#, no-wrap
msgid ""
"@Union // <1>\n"
"public interface SearchResult {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:712
msgid "`@Union` is required to indicate this Java interface represents a GraphQL union, not a GraphQL interface"
msgstr "`@Union` は、このJavaインターフェースが、GraphQLインターフェースではなく、GraphQLユニオンを表していることを示すために必要です。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:715
msgid "The Java interface representing the GraphQL union does not have to be empty, but any getters defined will not explicitly change the GraphQL schema."
msgstr "GraphQLユニオンを表すJavaインターフェイスは空である必要はありませんが、定義されたゲッターは明示的にGraphQLスキーマを変更するものではありません。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:717
msgid "Update our entities to implement `SearchResult`:"
msgstr "`SearchResult` を実装するためにエンティティを更新します:"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:723
#, no-wrap
msgid ""
"public class Film implements SearchResult {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:727
#, no-wrap
msgid ""
"public class Hero implements Character, SearchResult {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:731
#, no-wrap
msgid ""
"public class Ally implements Character, SearchResult {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:735
msgid "We can also leverage inheritance and have `interface Character extends SearchResult`.  This will result in all implementations of `Character` being added as members of the `SearchResult` union in the schema."
msgstr "また、継承を利用して、 `interface Character extends SearchResult` とすることも出来ます。これにより、 `Character` のすべての実装がスキーマの `SearchResult` ユニオンのメンバとして追加されることになります。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:737
msgid "Update `GalaxyService` to provide search:"
msgstr "`GalaxyService` を更新し、検索を提供します:"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:754
#, no-wrap
msgid ""
"    public List<SearchResult> search(String query) {\n"
"        List<SearchResult> results = new ArrayList<>();\n"
"        List<Film> matchingFilms = films.stream()\n"
"            .filter(film -> film.title.contains(query)\n"
"                || film.director.contains(query))\n"
"            .collect(Collectors.toList());\n"
"        results.addAll(matchingFilms);\n"
"        List<Character> matchingCharacters = getAllCharacters().stream()\n"
"            .filter(character -> character.getName().contains(query)\n"
"                || character.getSurname().contains(query))\n"
"            .collect(Collectors.toList());\n"
"        results.addAll(matchingCharacters);\n"
"        return results;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:765
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Search for heroes or films\")\n"
"    public List<SearchResult> search(String query) {\n"
"        return service.search(query);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:783
#, no-wrap
msgid ""
"query searchTheGalaxy {\n"
"    search(query: \"a\") {\n"
"        ... on Film {\n"
"            title\n"
"            director\n"
"        }\n"
"        ... on Character {\n"
"            name\n"
"            surname\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:786
msgid "We are able to use the `Character` interface because the `SearchResult` union contains members that implement it."
msgstr "`Character` インターフェースを使用できるのは、 `SearchResult` ユニオンにそれを実装したメンバが含まれているからです。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:787
#, no-wrap
msgid "Mutations"
msgstr "ミューテーション"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:790
msgid "Mutations are used when data is created, updated or deleted."
msgstr "ミューテーションは、データの作成、更新、削除の際に使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:792
msgid "Let's now add the ability to add and delete heroes to our GraphQL API."
msgstr "それでは、GraphQL APIにヒーローの追加と削除の機能を追加してみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:802
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero createHero(Hero hero) {\n"
"        service.addHero(hero);\n"
"        return hero;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:807
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero deleteHero(int id) {\n"
"        return service.deleteHero(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:810
msgid "Enter the following into the `GraphQL UI` to insert a `Hero`:"
msgstr "`GraphQL UI` に次のように入力すると、 `Hero` が挿入されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:828
#, no-wrap
msgid ""
"mutation addHero {\n"
"  createHero(hero: {\n"
"      name: \"Han\",\n"
"      surname: \"Solo\"\n"
"      height: 1.85\n"
"      mass: 80\n"
"      darkSide: false\n"
"      episodeIds: [4, 5, 6]\n"
"  \t}\n"
"  )\n"
"  {\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:831
msgid "By using this mutation we have created a `Hero` entity in our service."
msgstr "このミューテーションを利用することで、私たちのサービスに `Hero` エンティティを作成しました。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:836
msgid "Notice how in the response we have retrieved the `name` and `surname` of the created Hero. This is because we selected to retrieve these fields in the response within the `{ }` in the mutation query.  This can easily be a server side generated field that the client may require."
msgstr "レスポンスの中で、作成したヒーローの `name` と `surname` を取得していることに注目してください。これは mutation クエリの `{ }` の中で、これらのフィールドをレスポンスで取得することを選択したためです。これは、クライアントが必要とするサーバー側で生成されたフィールドである可能性があります。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:838
msgid "Let's now try deleting an entry:"
msgstr "それでは、エントリーを削除してみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:847
#, no-wrap
msgid ""
"mutation DeleteHero {\n"
"  deleteHero(id :3){\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:851
msgid "Similar to the `createHero` mutation method we also retrieve the `name` and `surname` of the hero we have deleted which is defined in `{ }`."
msgstr "`createHero` の mutation 法と同様に、 `{ }` で定義されている削除したヒーローの `name` と `surname` も取得します。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:852
#, no-wrap
msgid "Subscriptions"
msgstr "サブスクリプション"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:856
msgid "Subscriptions allow you to subscribe to a query. It allows you to receive events and is using web sockets.  See the https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md[GraphQL over WebSocket Protocol] spec for more details."
msgstr "サブスクリプションは、クエリーを購読することができます。イベントを受信することができ、web socketを使用しています。詳しくは link:https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md[GraphQL over WebSocket Protocol] 仕様をご覧ください。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:858
msgid "Example: We want to know when new Heroes are being created:"
msgstr "例: 新しいヒーローが作成されるタイミングを知りたい。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:863
#, no-wrap
msgid "    BroadcastProcessor<Hero> processor = BroadcastProcessor.create(); // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:870
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero createHero(Hero hero) {\n"
"        service.addHero(hero);\n"
"        processor.onNext(hero); // <2>\n"
"        return hero;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:875
#, no-wrap
msgid ""
"    @Subscription\n"
"    public Multi<Hero> heroCreated(){\n"
"        return processor; // <3>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:879
msgid "The `Multi` processor that will broadcast any new ``Hero``es"
msgstr "新しい``Hero``をブロードキャストする `Multi` プロセッサー"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:880
msgid "When adding a new `Hero`, also broadcast it"
msgstr "新しいヒーローの追加時に、ブロードキャストも行います"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:881
msgid "Make the stream available in the schema and as a WebSocket during runtime"
msgstr "実行時にスキーマ内で、WebSocketとしてストリームを利用できるようにする"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:884
msgid "Any client that now connect to the `/graphql` WebSocket connection will receive events on new Heroes being created:"
msgstr "現在、 `/graphql` WebSocket接続に接続しているすべてのクライアントは、新しいHeroが作成されたときにイベントを受け取ります。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:894
#, no-wrap
msgid ""
"subscription ListenForNewHeroes {\n"
"  heroCreated {\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:897
#, no-wrap
msgid "Creating Queries by fields"
msgstr "フィールド別のクエリの作成"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:901
msgid "Queries can also be done on individual fields. For example, let's create a method to query heroes by their last name."
msgstr "クエリは個々のフィールドに対して行うこともできます。例えば、ヒーローの名字を照会するメソッドを作ってみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:910
#, no-wrap
msgid ""
"    @Query\n"
"    public List<Hero> getHeroesWithSurname(@DefaultValue(\"Skywalker\") String surname) {\n"
"        return service.getHeroesBySurname(surname);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:914
msgid "By using the `@DefaultValue` annotation we have determined that the surname value will be `Skywalker` when the parameter is not provided."
msgstr "`@DefaultValue` のアノテーションを使用して、パラメータが提供されていない場合、姓の値は `Skywalker` になることを決定しました。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:916
msgid "Test the following queries with the `GraphQL UI`:"
msgstr "以下のクエリを `GraphQL UI` でテストしてみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:933
#, no-wrap
msgid ""
"query heroWithDefaultSurname {\n"
"  heroesWithSurname{\n"
"    name\n"
"    surname\n"
"    lightSaber\n"
"  }\n"
"}\n"
"query heroWithSurnames {\n"
"  heroesWithSurname(surname: \"Vader\") {\n"
"    name\n"
"    surname\n"
"    lightSaber\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:935
#, no-wrap
msgid "Context"
msgstr "コンテキスト"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:938
msgid "You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:"
msgstr "この実験的なSmallRye固有の機能を使えば、コードのどこにいてもGraphQLリクエストの情報を得ることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:943
#, no-wrap
msgid ""
"@Inject\n"
"Context context;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:946
msgid "or as a parameter in your method if you are in the `GraphQLApi` class, for instance:"
msgstr "または、 `GraphQLApi` クラスであれば、メソッドのパラメータとして使用します。例:"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:954
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Film getFilm(Context context, int filmId) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:957
msgid "The context object allows you to get:"
msgstr "コンテキストオブジェクトによって、以下を取得することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:959
msgid "the original request (Query/Mutation)"
msgstr "オリジナルのリクエスト(Query/Mutation)"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:960
msgid "the arguments"
msgstr "引数"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:961
msgid "the path"
msgstr "パス"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:962
msgid "the selected fields"
msgstr "選択されたフィールド"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:963
msgid "any variables"
msgstr "任意の変数"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:965
msgid "This allows you to optimize the downstream queries to the datastore."
msgstr "これにより、データストアへのダウンストリームクエリを最適化することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:967
msgid "See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details."
msgstr "詳細は link:https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] を参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/smallrye-graphql.adoc:968
#, no-wrap
msgid "GraphQL-Java"
msgstr "GraphQL-Java"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:971
msgid "This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:"
msgstr "また、このコンテキストオブジェクトは、リーキーな抽象化を利用することで、基礎となる https://www.graphql-java.com/[graphql-java] の機能にフォールダウンすることを可能にします。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:975
#, no-wrap
msgid "DataFetchingEnvironment dfe = context.unwrap(DataFetchingEnvironment.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:978
msgid "You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:"
msgstr "また、スキーマ生成時に基盤となる `graphql-java` にアクセスして、独自の機能を直接追加することもできます。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:982
#, no-wrap
msgid "public GraphQLSchema.Builder addMyOwnEnum(@Observes GraphQLSchema.Builder builder) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:989
#, no-wrap
msgid ""
"    // Here add your own features directly, example adding an Enum\n"
"    GraphQLEnumType myOwnEnum = GraphQLEnumType.newEnum()\n"
"            .name(\"SomeEnum\")\n"
"            .description(\"Adding some enum type\")\n"
"            .value(\"value1\")\n"
"            .value(\"value2\").build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:992
#, no-wrap
msgid ""
"    return builder.additionalType(myOwnEnum);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:995
msgid "By using the `@Observer` you can add anything to the Schema builder."
msgstr "`@Observer` を使用することで、スキーマビルダーに何かを追加することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:997
msgid "For the Observer to work, you need to enable events. In `application.properties`, add the following: `quarkus.smallrye-graphql.events.enabled=true`."
msgstr "Observerを動作させるには、イベントを有効にする必要があります。 `application.properties` で、以下を追加します: `quarkus.smallrye-graphql.events.enabled=true` 。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:998
#, no-wrap
msgid "Adapting"
msgstr "変換"

#. type: Title ===
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1000
#, no-wrap
msgid "Adapt to Scalar"
msgstr "スカラーへの変換"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1004
msgid "Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type, or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to an existing scalar."
msgstr "また、SmallRye特有の実験的な機能として、既存のスカラー（実装によって特定のJava型にマッピングされている）を別の型にマッピングしたり、GraphQLで通常 `Type` や `Input` を作成するような複雑なオブジェクトを既存のスカラーにマッピングしたりすることができます。"

#. type: Title ====
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1005
#, no-wrap
msgid "Adapting an existing Scalar to another type:"
msgstr "既存のスカラーを別のタイプに変換します。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1010
#, no-wrap
msgid "public class Movie {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1013
#, no-wrap
msgid ""
"    @AdaptToScalar(Scalar.Int.class)\n"
"    Long idLongThatShouldChangeToInt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1016
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1031
#, no-wrap
msgid ""
"    // ....\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1019
msgid "Above will adapt the `Long` java type to an `Int` Scalar type, rather than the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`."
msgstr "上記では、 `Long` java型を、 link:https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[デフォルト] の `BigInteger` ではなく、 `Int` スカラー型に変換しています。"

#. type: Title ====
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1020
#, no-wrap
msgid "Adapting a complex object to a Scalar type:"
msgstr "複雑なオブジェクトをスカラー型にマッピングします:"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1025
#, no-wrap
msgid "public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1028
#, no-wrap
msgid ""
"    @AdaptToScalar(Scalar.String.class)\n"
"    Phone phone;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1034
msgid "This will, rather than creating a `Type` or `Input` in GraphQL, map to a String scalar."
msgstr "これは、GraphQLで `Type` や `Input` を作成するのではなく、Stringのスカラーにマッピングされます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1038
msgid "To be able to do the above, the `Phone` object needs to have a constructor that takes a String (or `Int` / `Date` / etc.), or have a setter method for the String (or `Int` / `Date` / etc.), or have a `fromString` (or `fromInt` / `fromDate` - depending on the Scalar type) static method."
msgstr "上記の操作を行うためには、 `Phone` オブジェクトは、文字列（または `Int` / `Date` など）を受け取るコンストラクタを持つか、文字列（または `Int` / `Date` など）のセッターメソッドを持つか、 `fromString` (または `fromInt` / `fromDate` - スカラーの型に依存）のスタティックメソッドを持つ必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1040
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1066
msgid "For example:"
msgstr "例えば、以下のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1044
#, no-wrap
msgid "public class Phone {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1046
#, no-wrap
msgid "    private String number;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1048
#, no-wrap
msgid "    // Getters and setters....\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1055
#, no-wrap
msgid ""
"    public static Phone fromString(String number) {\n"
"        Phone phone = new Phone();\n"
"        phone.setNumber(number);\n"
"        return phone;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1058
msgid "See more about the `@AdaptToScalar` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptToScalar.html[JavaDoc]."
msgstr "`@ToScalar` の機能については、 link:https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.0.6/index.html?io/smallrye/graphql/api/ToScalar.html[JavaDoc] を参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1059
#, no-wrap
msgid "Adapt with"
msgstr "AdaptWithによる変換"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1062
msgid "Another option for more complex cases is to provide an Adapter. You can then do the mapping yourself in the adapter."
msgstr "より複雑なケースには、アダプターを用意するという方法もあります。そうすれば、アダプターの中で自分でマッピングを行うことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1064
msgid "See more about the `AdaptWith` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptWith.html[JavaDoc]."
msgstr "`AdaptWith` の機能については、 https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptWith.html[JavaDoc] を参照してください。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1073
#, no-wrap
msgid ""
"    public class Profile {\n"
"        // Map this to an email address\n"
"        @AdaptWith(AddressAdapter.class)\n"
"        public Address address;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1076
#, no-wrap
msgid ""
"        // other getters/setters...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1078
#, no-wrap
msgid "    public class AddressAdapter implements Adapter<EmailAddress, Address> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1086
#, no-wrap
msgid ""
"        @Override\n"
"        public Address from(EmailAddress email) {\n"
"            Address a = new Address();\n"
"            a.addressType = AddressType.email;\n"
"            a.addLine(email.getValue());\n"
"            return a;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1095
#, no-wrap
msgid ""
"        @Override\n"
"        public EmailAddress to(Address address) {\n"
"            if (address != null && address.addressType != null && address.addressType.equals(AddressType.email)) {\n"
"                return new EmailAddress(address.lines.get(0));\n"
"            }\n"
"            return null;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1099
msgid "`@JsonbTypeAdapter` is also supported."
msgstr " `@JsonbTypeAdapter` もサポートされています。"

#. type: Title ===
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1100
#, no-wrap
msgid "Built-in support for Maps"
msgstr "Map の組込サポート"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1105
msgid "By default, due to the fact that maps are hard to model in a schema (as the keys and values can be dynamic at runtime) GraphQL does not support maps by default.  Using the above adaption, `Map` support is added for Quarkus and are mapped to an `Entry<Key,Value>` with an optional key parameter.  This allows you to return a map, and optionally query it by key."
msgstr "デフォルトでは、マップはスキーマでモデル化するのが難しいため（キーと値が実行時に動的になる可能性があるため）、 GraphQL はデフォルトでマップをサポートしません。 上記の適応により、Quarkusでは `Map` のサポートが追加され、オプションのキーパラメータを持つ `Entry<Key,Value>` にマップされるようになりました。 これにより、マップを返すことができ、オプションでキーでクエリを実行することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1107
msgid "Example:"
msgstr "例:"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1115
#, no-wrap
msgid ""
"    @Query\n"
"    public Map<ISO6391, Language> language() {\n"
"        return languageService.getLanguages();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1122
#, no-wrap
msgid ""
"    public enum ISO6391 {\n"
"        af,\n"
"        en,\n"
"        de,\n"
"        fr\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1129
#, no-wrap
msgid ""
"    public class Language {\n"
"        private ISO6391 iso6391;\n"
"        private String nativeName;\n"
"        private String enName;\n"
"        private String please;\n"
"        private String thankyou;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1132
#, no-wrap
msgid ""
"        // Getters & Setters\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1136
msgid "The key and value object can be any of Enum, Scalar or Complex object"
msgstr "キーと値のオブジェクトは、 Enum 、 Scalar 、 Complex のいずれかを指定します。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1138
msgid "You can now query the whole map with all the fields:"
msgstr "これで、すべてのフィールドを含むマップ全体のクエリーが可能になりました:"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1153
#, no-wrap
msgid ""
"{\n"
"  language{\n"
"    key\n"
"    value {\n"
"      enName\n"
"      iso6391\n"
"      nativeName\n"
"      please\n"
"      thankyou\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1156
msgid "This will return a result like this for example:"
msgstr "これは、例えばこのような結果を返します:"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1205
#, no-wrap
msgid ""
"{\n"
"  \"data\": {\n"
"    \"language\": [\n"
"      {\n"
"        \"key\": \"fr\",\n"
"        \"value\": {\n"
"          \"enName\": \"french\",\n"
"          \"iso6391\": \"fr\",\n"
"          \"nativeName\": \"français\",\n"
"          \"please\": \"s'il te plaît\",\n"
"          \"thankyou\": \"merci\"\n"
"        }\n"
"      },\n"
"      {\n"
"        \"key\": \"af\",\n"
"        \"value\": {\n"
"          \"enName\": \"afrikaans\",\n"
"          \"iso6391\": \"af\",\n"
"          \"nativeName\": \"afrikaans\",\n"
"          \"please\": \"asseblief\",\n"
"          \"thankyou\": \"dankie\"\n"
"        }\n"
"      },\n"
"      {\n"
"        \"key\": \"de\",\n"
"        \"value\": {\n"
"          \"enName\": \"german\",\n"
"          \"iso6391\": \"de\",\n"
"          \"nativeName\": \"deutsch\",\n"
"          \"please\": \"bitte\",\n"
"          \"thankyou\": \"danke dir\"\n"
"        }\n"
"      },\n"
"      {\n"
"        \"key\": \"en\",\n"
"        \"value\": {\n"
"          \"enName\": \"english\",\n"
"          \"iso6391\": \"en\",\n"
"          \"nativeName\": \"english\",\n"
"          \"please\": \"please\",\n"
"          \"thankyou\": \"thank you\"\n"
"        }\n"
"      }\n"
"    ]\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1208
msgid "You can also query by key"
msgstr "キーによるクエリも可能です"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1219
#, no-wrap
msgid ""
"{\n"
"  language (key:af){\n"
"    value {\n"
"      please\n"
"      thankyou\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1222
msgid "That will return only that value in the map:"
msgstr "そうすると、マップの中のその値だけが返されます:"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1237
#, no-wrap
msgid ""
"{\n"
"  \"data\": {\n"
"    \"language\": [\n"
"      {\n"
"        \"value\": {\n"
"          \"please\": \"asseblief\",\n"
"          \"thankyou\": \"dankie\"\n"
"        }\n"
"      }\n"
"    ]\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1240
msgid "The default map adapter can to overridden with our own implementation."
msgstr "デフォルトのマップアダプタは、独自の実装でオーバーライドすることができます。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1241
#, no-wrap
msgid "Error code"
msgstr "エラーコード"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1244
msgid "You can add an error code on the error output in the GraphQL response by using the (SmallRye specific) `@ErrorCode`:"
msgstr "(SmallRye特有の) `@ErrorCode` を使用することで、GraphQLレスポンスのエラー出力にエラーコードを追加することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1251
#, no-wrap
msgid ""
"@ErrorCode(\"some-business-error-code\")\n"
"public class SomeBusinessException extends RuntimeException {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1254
msgid "When `SomeBusinessException` occurs, the error output will contain the Error code:"
msgstr "`SomeBusinessException` が発生した場合、エラー出力にはエラーコードが表示されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1281
#, no-wrap
msgid ""
"{\n"
"    \"errors\": [\n"
"        {\n"
"            \"message\": \"Unexpected failure in the system. Jarvis is working to fix it.\",\n"
"            \"locations\": [\n"
"                {\n"
"                    \"line\": 2,\n"
"                    \"column\": 3\n"
"                }\n"
"            ],\n"
"            \"path\": [\n"
"                \"annotatedCustomBusinessException\"\n"
"            ],\n"
"            \"extensions\": {\n"
"                \"exception\": \"io.smallrye.graphql.test.apps.error.api.ErrorApi$AnnotatedCustomBusinessException\",\n"
"                \"classification\": \"DataFetchingException\",\n"
"                \"code\": \"some-business-error-code\" <1>\n"
"            }\n"
"        }\n"
"    ],\n"
"    \"data\": {\n"
"        ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1284
msgid "The error code"
msgstr "エラーコード"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1285
#, no-wrap
msgid "Additional Notes"
msgstr "その他の注意事項"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1291
msgid "If you are using the `smallrye-graphql` extension and the `micrometer` metrics extension is present and metrics are enabled, you may encounter a `java.lang.NoClassDefFoundError` as some versions of the `smallrye-graphql` extension have runtime requirements on the Microprofile Metrics API.  Add the following MicroProfile Metrics API dependency to resolve the issue:"
msgstr "`smallrye-graphql` エクステンションを使用していて、 `micrometer` メトリクスエクステンションが存在し、メトリクスが有効になっている場合、 `smallrye-graphql` エクステンションの一部のバージョンには Microprofile Metrics API のランタイム要件があるため、 `java.lang.NoClassDefFoundError` が発生する可能性があります。この問題を解決するには、次の Microprofile Metrics API の依存関係を追加します:"

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1299
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.eclipse.microprofile.metrics</groupId>\n"
"    <artifactId>microprofile-metrics-api</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1305
#, no-wrap
msgid "implementation(\"org.eclipse.microprofile.metrics:microprofile-metrics-api\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1307
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1311
msgid "SmallRye GraphQL enables clients to retrieve the exact data that is required preventing `Over-fetching` and `Under-fetching`."
msgstr "SmallRye GraphQL は、クライアントが `Over-fetching` や `Under-fetching` を防ぐために必要なデータを正確に取得することを可能にします。"

#. type: Plain text
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1314
msgid "The GraphQL API can be expanded without breaking previous queries enabling easy API `evolution`."
msgstr "GraphQL APIは、以前のクエリを壊すことなく拡張することができ、API `evolution` を容易にすることができます。"

#. type: Title ==
#: upstream/_versions/main/guides/smallrye-graphql.adoc:1316
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#~ msgid "Have a look at the link:security-authorization[Authorization of Web Endpoints] Guide on how to add/remove security for the GraphQL UI."
#~ msgstr "GraphQL UIのセキュリティを追加/削除する方法については link:security-authorization[Webエンドポイントの認可] のガイドをご覧ください。"

#~ msgid "The solution is located in the `microprofile-graphql-quickstart` {quickstarts-tree-url}/microprofile-graphql-quickstart[directory]."
#~ msgstr "ソリューションは `microprofile-graphql-quickstart` {quickstarts-tree-url}/microprofile-graphql-quickstart[ディレクトリ] にあります。"

#~ msgid "Reactive"
#~ msgstr "リアクティブ"

#~ msgid "Due to the underlying library, graphql-java, `Uni` is creating a `CompletionStage` under the hood."
#~ msgstr "graphql-javaというライブラリを使用しているため、 `Uni` はボンネット内で `CompletionStage` を作成しています。"

#~ msgid "Using `Uni` or `CompletionStage` means that when a request contains more than one query, they will be executed concurrently."
#~ msgstr "`Uni` または `CompletionStage` を使用すると、リクエストに複数のクエリが含まれている場合、それらが同時に実行されることになります。"

#~ msgid "For instance, the query below will fetch `film0` and `film1` concurrently:"
#~ msgstr "例えば、以下のクエリでは、 `film0` と `film1` を同時に取得します。"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "./mvnw compile quarkus:dev\n"
#~ msgstr "./mvnw compile quarkus:dev\n"

#~ msgid "This query will allow the client to retrieve the film by id."
#~ msgstr "このクエリは、クライアントがIDでフィルムを検索するためのものです。"
