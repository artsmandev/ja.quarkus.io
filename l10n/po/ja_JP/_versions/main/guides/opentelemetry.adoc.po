# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-27 08:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/opentelemetry.adoc:6
#, no-wrap
msgid "Using OpenTelemetry"
msgstr "Using OpenTelemetry"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:13
#, fuzzy
msgid "This guide explains how your Quarkus application can utilize https://opentelemetry.io/[OpenTelemetry] (OTel) to provide distributed tracing for interactive web applications."
msgstr "このガイドでは、Quarkusアプリケーションで link:https://opentelemetry.io/[OpenTelemetry] （OTel）を利用して、インタラクティブなWebアプリケーションに分散トレースを提供する方法について説明します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:15
#, fuzzy
msgid "OpenTelemetry Metrics and Logging are not yet supported."
msgstr "OpenTelemetry MetricsとLoggingは未対応です。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:21
#, fuzzy
msgid "Quarkus now supports the OpenTelemetry Autoconfiguration for Traces. The configurations match what you can see at https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[OpenTelemetry SDK Autoconfigure] with the `quarkus.*` prefix."
msgstr "QuarkusがOpenTelemetry Autoconfiguration for Tracesをサポートするようになりました。設定は、OpenTelemet link:https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[ry SDK Autoconfigureで] 確認できるものと一致し、 `quarkus.*` プレフィックスを使用しています。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:23
#, fuzzy
msgid "Extensions and the libraries they provide, are directly instrumented in Quarkus. The *use of the https://opentelemetry.io/docs/instrumentation/java/automatic/[OpenTelemetry Agent] is not needed nor recommended* due to context propagation issues between imperative and reactive libraries."
msgstr "エクステンションとそれが提供するライブラリは、Quarkusで直接インストルメント化されます。命令型ライブラリと反応型ライブラリの間のコンテキスト伝播の問題があるため、 *<a data-doc-l10n-kit-type=\"link\" data-doc-l10n-kit-target=\"https://opentelemetry.io/docs/instrumentation/java/automatic/\">OpenTelemetryエージェントの</a>使用は必要なく、推奨も* されていません。"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:25
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:30
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:33
msgid "In this guide, we create a straightforward REST application to demonstrate distributed tracing."
msgstr "このガイドでは、分散トレースを実証するための簡単なRESTアプリケーションを作成します。"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:34
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:38
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、直ぐに完成した例に飛ばしても構いません。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:40
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:42
msgid "The solution is located in the `opentelemetry-quickstart` link:{quickstarts-tree-url}/opentelemetry-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:43
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:46
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:54
msgid "This command generates the Maven project and imports the `quarkus-opentelemetry` extension, which includes the default OpenTelemetry support, and a gRPC span exporter for https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP]."
msgstr "このコマンドはMavenプロジェクトを生成し、`quarkus-opentelemetry` エクステンションをインポートします。このエクステンションには、デフォルトのOpenTelemetryサポートと、https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP]のgRPC spanエクスポーターが含まれています。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:57
msgid "If you already have your Quarkus project configured, you can add the `quarkus-opentelemetry` extension to your project by running the following command in your project base directory:"
msgstr "Quarkusプロジェクトがすでに設定されている場合、プロジェクトのベースディレクトリで次のコマンドを実行することで、`quarkus-opentelemetry` エクステンションをプロジェクトに追加できます："

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:62
msgid "This will add the following to your build file:"
msgstr "これにより、`pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/main/guides/opentelemetry.adoc:64
#: upstream/_versions/main/guides/opentelemetry.adoc:208
#: upstream/_versions/main/guides/opentelemetry.adoc:272
#: upstream/_versions/main/guides/opentelemetry.adoc:290
#: upstream/_versions/main/guides/opentelemetry.adoc:574
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:70
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-opentelemetry</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/opentelemetry.adoc:73
#: upstream/_versions/main/guides/opentelemetry.adoc:217
#: upstream/_versions/main/guides/opentelemetry.adoc:281
#: upstream/_versions/main/guides/opentelemetry.adoc:299
#: upstream/_versions/main/guides/opentelemetry.adoc:587
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:76
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-opentelemetry\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:78
#, no-wrap
msgid "Examine the Jakarta REST resource"
msgstr "Jakarta REST リソースの調査"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:81
msgid "Create a `src/main/java/org/acme/opentelemetry/TracedResource.java` file with the following content:"
msgstr "`src/main/java/org/acme/opentelemetry/TracedResource.java` のファイルを開くと、以下の内容が表示されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:85
#, no-wrap
msgid "package org.acme.opentelemetry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:91
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:94
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class TracedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:96
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(TracedResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:104
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        LOG.info(\"hello\");\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:108
msgid "Notice that there is no tracing specific code included in the application. By default, requests sent to this endpoint will be traced without any required code changes."
msgstr "このアプリケーションには、トレースのためのコードが含まれていないことに注意してください。デフォルトでは、このエンドポイントに送信されたリクエストは、コードの変更を必要とせずにトレースされます。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:109
#, no-wrap
msgid "Create the configuration"
msgstr "設定の作成"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:112
#, fuzzy
msgid "There are no mandatory configurations for the extension to work."
msgstr "エクステンションを動作させるために必須の設定はありません。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:114
#, fuzzy
msgid "If you need to change any of the default property values, here is an example on how to configure the default OTLP gRPC Exporter within the application, using the `src/main/resources/application.properties` file:"
msgstr "デフォルトのプロパティ値を変更する必要がある場合、 `src/main/resources/application.properties` ファイルを使用して、アプリケーション内でデフォルトの OTLP gRPC Exporter を設定する方法の例を以下に示します："

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:121
#, no-wrap
msgid ""
"quarkus.application.name=myservice // <1>\n"
"quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317 // <2>\n"
"quarkus.otel.exporter.otlp.traces.headers=authorization=Bearer my_secret // <3>\n"
"quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n  // <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:124
#, no-wrap
msgid ""
"# Alternative to the console log\n"
"quarkus.http.access-log.pattern=\"...traceId=%{X,traceId} spanId=%{X,spanId}\" // <5>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:127
msgid "All spans created from the application will include an OpenTelemetry `Resource` indicating the span was created by the `myservice` application. If not set, it will default to the artifact id."
msgstr "このアプリケーションから作成されたすべてのスパンには、そのスパンが `myservice` アプリケーションによって作成されたことを示す OpenTelemetry `Resource` が含まれます。設定されていない場合は、デフォルトでアーティファクトIDが設定されます。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:128
#, fuzzy
msgid "gRPC endpoint to send spans. If not set, it will default to `http://localhost:4317`."
msgstr "スパンを送信するためのgRPCエンドポイント。設定されていない場合、デフォルトは `<a data-doc-l10n-kit-type=\"link\" data-doc-l10n-kit-target=\"http://localhost:4317\">http://localhost:4317</a>` ."

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:129
msgid "Optional gRPC headers commonly used for authentication"
msgstr "認証によく使われるオプションのgRPCヘッダー"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:130
#, fuzzy
msgid "Add tracing information into log messages."
msgstr "ログメッセージにトレース情報を追加する。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:131
msgid "You can also only put the trace info into the access log. In this case you must omit the info in the console log format."
msgstr "また、アクセスログにのみトレース情報を記載することもできます。この場合、コンソールログ形式の情報を省略する必要があります。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:135
#, fuzzy
msgid "All configurations have been updated from `quarkus.opentelemetry.\\*` -> `quarkus.otel.*`"
msgstr "すべてのコンフィギュレーションは、 `quarkus.opentelemetry.*` →から更新されています。 `quarkus.otel.*`"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:137
#, fuzzy
msgid "The legacy configurations are now deprecated but will still work during a transition period."
msgstr "レガシーコンフィギュレーションは現在非推奨となっていますが、移行期間中は引き続き使用できます。"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:139
#, no-wrap
msgid "Run the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:142
msgid "The first step is to configure and start the https://opentelemetry.io/docs/collector/[OpenTelemetry Collector] to receive, process and export telemetry data to https://www.jaegertracing.io/[Jaeger] that will display the captured traces."
msgstr "最初のステップは、テレメトリデータを受信して処理し、キャプチャしたトレースを表示する link:https://www.jaegertracing.io/[Jaeger]にエクスポートするための link:https://opentelemetry.io/docs/collector/[OpenTelemetry Collector]の設定と起動です。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:148
#, fuzzy
msgid "Jaeger-all-in-one includes the Jaeger agent, an OTel collector, and the query service/UI.  You do not need to install a separated collector. You can directly send the trace data to Jaeger (after enabling OTLP receivers there, see e.g. this https://medium.com/jaegertracing/introducing-native-support-for-opentelemetry-in-jaeger-eb661be8183c[blog entry] for details)."
msgstr "Jaeger-all-in-oneは、Jaegerエージェント、OTelコレクター、クエリサービス/UIを含みます。分離型コレクタをインストールする必要はありません。トレースデータを直接Jaegerに送ることができます（OTLPレシーバーを有効にした後、詳細はこちらの link:https://medium.com/jaegertracing/introducing-native-support-for-opentelemetry-in-jaeger-eb661be8183c[ブログエントリなどを] ご覧ください）。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:151
msgid "Start the OpenTelemetry Collector and Jaeger system via the following `docker-compose.yml` file that you can launch via `docker-compose up -d`:"
msgstr "`docker-compose up -d` OpenTelemetry CollectorとJaegerシステムを、以下の `docker-compose.yml` ファイルを介して起動します。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:156
#, no-wrap
msgid ""
"version: \"2\"\n"
"services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:168
#, no-wrap
msgid ""
"  # Jaeger\n"
"  jaeger-all-in-one:\n"
"    image: jaegertracing/all-in-one:latest\n"
"    ports:\n"
"      - \"16686:16686\" # Jaeger UI\n"
"      - \"14268:14268\" # Receive legacy OpenTracing traces, optional\n"
"      - \"4317:4317\"   # OTLP gRPC receiver\n"
"      - \"4318:4318\"   # OTLP HTTP receiver, not yet used by Quarkus, optional\n"
"      - \"14250:14250\" # Receive from external otel-collector, optional\n"
"    environment:\n"
"      - COLLECTOR_OTLP_ENABLED=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:170
#, fuzzy
msgid "You should remove the optional ports you don't need them."
msgstr "オプションのポートは必要ないものは外しておいた方がいい。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:172
msgid "Now we are ready to run our application. If using `application.properties` to configure the tracer:"
msgstr "これでアプリケーションを実行する準備が整いました。トレーサーの設定に `application.properties` を使用している場合:"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:176
msgid "or if configuring the OTLP gRPC endpoint via JVM arguments:"
msgstr "または、JVM引数でOTLP gRPCエンドポイントを設定する場合:"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:182
msgid "With the OpenTelemetry Collector, the Jaeger system and the application running, you can make a request to the provided endpoint:"
msgstr "OpenTelemetry Collector、Jaegerシステム、アプリケーションが動作している状態で、提供されているエンドポイントにリクエストを出すことができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:187
#, no-wrap
msgid ""
"$ curl http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:190
msgid "When the first request has been submitted, you will be able to see the tracing information in the logs:"
msgstr "最初のリクエストが送信された時点で、ログにトレース情報が表示されるようになります:"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:196
#, no-wrap
msgid ""
"10:49:02 INFO  traceId=, parentId=, spanId=, sampled= [io.quarkus] (main) Installed features: [cdi, opentelemetry, rest-client, resteasy, smallrye-context-propagation, vertx]\n"
"10:49:03 INFO  traceId=17ceb8429b9f25b0b879fa1503259456, parentId=3125c8bee75b7ad6, spanId=58ce77c86dd23457, sampled=true [or.ac.op.TracedResource] (executor-thread-1) hello\n"
"10:49:03 INFO  traceId=ad23acd6d9a4ed3d1de07866a52fa2df, parentId=, spanId=df13f5b45cf4d1e2, sampled=true [or.ac.op.TracedResource] (executor-thread-0) hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:200
msgid "Then visit the http://localhost:16686[Jaeger UI] to see the tracing information."
msgstr "その後、 link:http://localhost:16686[Jaeger UI] にアクセスしてトレース情報を確認します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:202
#, fuzzy
msgid "Hit `CTRL+C` or type `q` to stop the application."
msgstr "`CTRL+C` を押すか、 `q` と入力して、アプリケーションを停止してください。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:203
#, no-wrap
msgid "JDBC"
msgstr "JDBC"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:206
msgid "The https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your build file:"
msgstr "link:https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBCインスツルメンテーション]は、アプリケーションによって実行される各JDBCクエリのためにスパンを追加します。これを有効にするには、次の依存関係をビルドファイルに追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:214
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry.instrumentation</groupId>\n"
"    <artifactId>opentelemetry-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:220
#, no-wrap
msgid "implementation(\"io.opentelemetry.instrumentation:opentelemetry-jdbc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:223
#, fuzzy
msgid "As it uses a dedicated JDBC datasource wrapper, you must enable telemetry for your datasource:"
msgstr "専用のJDBCデータソースラッパーを使用するため、データソースのテレメトリーを有効にする必要があります："

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:228
#, no-wrap
msgid ""
"# enable tracing\n"
"quarkus.datasource.jdbc.telemetry=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:232
#, no-wrap
msgid ""
"# configure datasource\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:234
#, no-wrap
msgid "Additional configuration"
msgstr "追加設定"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:237
msgid "Some use cases will require custom configuration of OpenTelemetry.  These sections will outline what is necessary to properly configure it."
msgstr "一部のユースケースでは、OpenTelemetryのカスタム設定が必要になります。 これらのセクションでは、適切に構成するために必要なものについて概説します。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:238
#, no-wrap
msgid "ID Generator"
msgstr "IDジェネレーター"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:241
msgid "The OpenTelemetry extension will use by default a random https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID Generator] when creating the trace and span identifier."
msgstr "OpenTelemetry エクステンションでは、トレースおよびスパンの識別子を作成する際に、デフォルトでランダムな link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID ジェネレーター]を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:244
msgid "Some vendor-specific protocols need a custom ID Generator, you can override the default one by creating a producer.  The OpenTelemetry extension will detect the `IdGenerator` CDI bean and will use it when configuring the tracer producer."
msgstr "ベンダー固有のプロトコルの中には、カスタム ID ジェネレーターを必要とするものがありますが、プロデューサーを作成することで、デフォルトの ID ジェネレーターを上書きすることができます。OpenTelemetryエクステンションは、 `IdGenerator` CDI Beanを検出し、トレーサープロデューサーを構成する際にそれを使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:249
#: upstream/_versions/main/guides/opentelemetry.adoc:405
#, no-wrap
msgid ""
"@Singleton\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:257
#, no-wrap
msgid ""
"    /** Creates a custom IdGenerator for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public IdGenerator idGenerator() {\n"
"        return AwsXrayIdGenerator.getInstance();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:259
#, no-wrap
msgid "Propagators"
msgstr "プロパゲーター"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:262
msgid "OpenTelemetry propagates cross-cutting concerns through https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[propagators] that will share an underlying `Context` for storing state and accessing data across the lifespan of a distributed transaction."
msgstr "OpenTelemetry は、 https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[プロパゲーター] を介して分野横断的な関心事を伝播し、状態を保存するための基になる\"コンテキスト\"を共有します 分散トランザクションの存続期間全体にわたってデータにアクセスします。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:265
#, fuzzy
msgid "By default, the OpenTelemetry extension enables the https://www.w3.org/TR/trace-context/[W3C Trace Context] and the https://www.w3.org/TR/baggage/[W3C Baggage] propagators, you can however choose any of the supported OpenTelemetry propagators by setting the `propagators` config that is described in the xref:configuration-reference[OpenTelemetry Configuration Reference]."
msgstr "デフォルトでは、OpenTelemetryエクステンションは link:https://www.w3.org/TR/trace-context/[W3C Trace Contextと] link:https://www.w3.org/TR/baggage/[W3C Baggage] プロパゲータを有効にしますが、OpenTelemetry xref:configuration-reference[Configuration Referenceで] 説明されている `propagators` configを設定すれば、サポートされているOpenTelemetryプロパゲータのどれかを選択することができます。"

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:266
#, fuzzy, no-wrap
msgid "Additional Propagators"
msgstr "追加プロパゲータ"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:270
msgid "The `b3`, `b3multi`, `jaeger` and `ottrace` propagators will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators] extension to be added as a dependency to your project."
msgstr "`b3`, `b3multi`, `jaeger`, `ottrace` のプロパゲータは、プロジェクトに link:https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators]エクステンションを依存関係として追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:278
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-extension-trace-propagators</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:284
#, no-wrap
msgid "implementation(\"io.opentelemetry:opentelemetry-extension-trace-propagators\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:288
#, fuzzy
msgid "The `xray` propagator will need the https://github.com/open-telemetry/opentelemetry-java-contrib/tree/main/aws-xray-propagator[aws] extension to be added as a dependency to your project."
msgstr "`xray` propagatorは、 link:https://github.com/open-telemetry/opentelemetry-java-contrib/tree/main/aws-xray-propagator[aws] エクステンションをお客様のプロジェクトに依存関係として追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:296
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry.contrib</groupId>\n"
"    <artifactId>opentelemetry-aws-xray-propagator</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:302
#, no-wrap
msgid "implementation(\"io.opentelemetry.contrib:opentelemetry-aws-xray-propagator\")\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:304
#, no-wrap
msgid "Customise Propagator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:307
msgid "To customise the propagation header you can implement the `TextMapPropagatorCustomizer` interface. This can be used, as an example, to restrict propagation of OpenTelemetry trace headers and prevent potentially sensitive data to be sent to third party systems."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:310
msgid "```java /**"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:311
msgid "/**"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:312
msgid "Meant to be implemented by a CDI bean that provides arbitrary customization for the TextMapPropagator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:313
msgid "that are to be registered with OpenTelemetry"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:315
#, no-wrap
msgid ""
"*/\n"
"public interface TextMapPropagatorCustomizer {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:317
#, no-wrap
msgid "    TextMapPropagator customize(Context context);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:320
#, no-wrap
msgid ""
"    interface Context {\n"
"        TextMapPropagator propagator();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:325
#, no-wrap
msgid ""
"        ConfigProperties otelConfigProperties();\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:326
#, no-wrap
msgid "Resource"
msgstr "リソース"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:329
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[resource] is a representation of the entity that is producing telemetry, it adds attributes to the exported trace to characterize who is producing the trace."
msgstr "link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[リソース]は、テレメトリを生成しているエンティティの表現であり、誰がトレースを生成しているかを特徴づけるために、エクスポートされたトレースに属性を追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:333
#, fuzzy
msgid "You can add attributes by setting the `resource-attributes` tracer config that is described in the xref:configuration-reference[OpenTelemetry Configuration Reference].  Since this property can be overridden at runtime, the OpenTelemetry extension will pick up its value following the order of precedence that is described in the xref:config-reference.adoc#configuration-sources[Quarkus Configuration Reference]."
msgstr "OpenTelemetry xref:configuration-reference[Configuration Reference] に記載されている `resource-attributes` tracer configを設定することで、属性を追加することができます。このプロパティは実行時にオーバーライドできるため、OpenTelemetryエクステンションは、Quarkus xref:config-reference.adoc#configuration-sources[Configuration] Referenceに記載されている優先順位に従って値をピックアップします。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:336
msgid "If by any means you need to use a custom resource or one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create multiple resource producers. The OpenTelemetry extension will detect the `Resource` CDI beans and will merge them when configuring the tracer producer."
msgstr "カスタムリソースや link:https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions]で提供されているリソースを使用する必要がある場合は、複数のリソースプロデューサーを作成することができます。OpenTelemetryエクステンションは、 `Resource` CDI Beanを検出し、トレーサー・プロデューサーを構成する際にそれらをマージします。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:341
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:347
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource osResource() {\n"
"        return OsResource.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:354
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource ecsResource() {\n"
"        return EcsResource.get();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:356
#, no-wrap
msgid "User data"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:359
msgid "By setting `quarkus.otel.traces.eusp.enabled=true` you can add information about the user related to each span. The user's ID and roles will be added to the span attributes, if available."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:360
#, no-wrap
msgid "Sampler"
msgstr "サンプラー"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:364
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[sampler] decides whether a trace should be sampled and exported, controlling noise and overhead by reducing the number of sample of traces collected and sent to the collector."
msgstr "link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[サンプラー]は、トレースをサンプリングしてエクスポートするかどうかを決定し、収集してコレクターに送信するトレースのサンプル数を減らすことで、ノイズやオーバーヘッドを制御します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:367
#, fuzzy
msgid "You can set a https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[built-in sampler] simply by setting the desired sampler config described in the xref:configuration-reference[OpenTelemetry Configuration Reference]."
msgstr "OpenTelemet xref:configuration-reference[ry Configuration Referenceに] 記載されている目的のサンプラーconfigを設定するだけで、 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[内蔵サンプラーを] 設定することができます。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:371
#, fuzzy
msgid "Quarkus 3.0 introduced breaking changes on the configuration."
msgstr "Quarkus 3.0では、コンフィギュレーションに大きな変更が加えられました。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:373
#, fuzzy
msgid "Sampler related property names and values change to comply with the latest Java OpenTelemetry SDK. During a transition period it will be possible to set the new configuration values in the old property because we are mapping `quarkus.opentelemetry.tracer.sampler` -> `quarkus.otel.traces.sampler`."
msgstr "最新のJava OpenTelemetry SDKに準拠するため、Sampler関連のプロパティ名と値が変更されます。移行期間中は、 `quarkus.opentelemetry.tracer.sampler` → `quarkus.otel.traces.sampler` をマッピングしているため、古いプロパティに新しい設定値を設定することが可能です。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:375
#, fuzzy
msgid "If the sampler is parent based, there is no need to set, the now dropped property, `quarkus.opentelemetry.tracer.sampler.parent-based`."
msgstr "`quarkus.opentelemetry.tracer.sampler.parent-based` サンプラーが親ベースである場合、設定する必要はありません。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:377
#, fuzzy
msgid "The values you need to set on `quarkus.opentelemetry.tracer.sampler` are now:"
msgstr "`quarkus.opentelemetry.tracer.sampler` で設定する必要がある値は、現在、以下の通りです："

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:379
#, fuzzy, no-wrap
msgid "Old Sampler config value"
msgstr "旧サンプラーの設定値"

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:379
#, fuzzy, no-wrap
msgid "New Sampler config valu"
msgstr "新しいSamplerのコンフィグバル"

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:381
#, fuzzy, no-wrap
msgid "New Sampler config value (Parent based)"
msgstr "サンプラーの新しい設定値（親ベース）"

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:382
#, fuzzy, no-wrap
msgid "`on`"
msgstr "`on`"

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:383
#, fuzzy, no-wrap
msgid "`always_on`"
msgstr "`always_on`"

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:385
#, fuzzy, no-wrap
msgid "`parentbased_always_on`"
msgstr "`parentbased_always_on`"

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:386
#, fuzzy, no-wrap
msgid "`off`"
msgstr "`off`"

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:387
#, fuzzy, no-wrap
msgid "`always_off`"
msgstr "`always_off`"

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:389
#, fuzzy, no-wrap
msgid "`parentbased_always_off`"
msgstr "`parentbased_always_off`"

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:390
#, fuzzy, no-wrap
msgid "`ratio`"
msgstr "`ratio`"

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:391
#, fuzzy, no-wrap
msgid "`traceidratio`"
msgstr "`traceidratio`"

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:392
#, fuzzy, no-wrap
msgid "`parentbased_traceidratio`"
msgstr "`parentbased_traceidratio`"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:396
#, fuzzy
msgid "If you need to use a custom sampler there are now 2 different ways:"
msgstr "カスタムサンプラーを使用する必要がある場合、現在2種類の方法があります："

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:397
#, fuzzy, no-wrap
msgid "Sampler CDI Producer"
msgstr "サンプラー CDI プロデューサー"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:400
#, fuzzy
msgid "You can create a sampler CDI producer. The Quarkus OpenTelemetry extension will detect the `Sampler` CDI bean and will use it when configuring the Tracer."
msgstr "サンプラーCDIプロデューサーを作成することができます。Quarkus OpenTelemetryエクステンションは、 `Sampler` CDI Beanを検出し、トレーサーを構成する際に使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:415
#, no-wrap
msgid ""
"    /** Creates a custom sampler for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public Sampler sampler() {\n"
"        return JaegerRemoteSampler.builder()\n"
"        .setServiceName(\"my-service\")\n"
"        .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:417
#, fuzzy, no-wrap
msgid "OTel Sampler SPI"
msgstr "OTelサンプラーSPI"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:421
#, fuzzy
msgid "This will use the SPI hooks available with the OTel Autoconfiguration.  You can create a simple Sampler class:"
msgstr "これは、OTel Autoconfigurationで利用可能なSPIフックを使用します。シンプルなSamplerクラスを作成することができます："

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:434
#, no-wrap
msgid ""
"public class CustomSPISampler implements Sampler {\n"
"    @Override\n"
"    public SamplingResult shouldSample(Context context,\n"
"            String s,\n"
"            String s1,\n"
"            SpanKind spanKind,\n"
"            Attributes attributes,\n"
"            List<LinkData> list) {\n"
"        // Do some sampling here\n"
"        return Sampler.alwaysOn().shouldSample(context, s, s1, spanKind, attributes, list);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:440
#, no-wrap
msgid ""
"    @Override\n"
"    public String getDescription() {\n"
"        return \"custom-spi-sampler-description\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:443
#, fuzzy
msgid "Then a Sampler Provider:"
msgstr "次にサンプラープロバイダー："

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:450
#, no-wrap
msgid ""
"public class CustomSPISamplerProvider implements ConfigurableSamplerProvider {\n"
"    @Override\n"
"    public Sampler createSampler(ConfigProperties configProperties) {\n"
"        return new CustomSPISampler();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:456
#, no-wrap
msgid ""
"    @Override\n"
"    public String getName() {\n"
"        return \"custom-spi-sampler\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:458
#, fuzzy
msgid "Write the SPI loader text file at `resources/META-INF/services` with name `io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSamplerProvider` containing the full qualified name of the `CustomSPISamplerProvider` class."
msgstr "`CustomSPISamplerProvider` クラスの完全修飾子を含む名前 `io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSamplerProvider` で、 `resources/META-INF/services` に SPI ローダー・テキスト・ファイルを記述します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:460
#, fuzzy
msgid "Then activate on the configuration:"
msgstr "その後、コンフィギュレーションで起動します："

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:463
#, no-wrap
msgid "quarkus.otel.traces.sampler=custom-spi-sampler\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:466
#, fuzzy
msgid "As you can see, CDI is much simpler to work with."
msgstr "ご覧のように、CDIはよりシンプルな仕組みになっています。"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:467
#, no-wrap
msgid "Additional instrumentation"
msgstr "追加の計器"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:471
msgid "Some Quarkus extensions will require additional code to ensure traces are propagated to subsequent execution.  These sections will outline what is necessary to propagate traces across process boundaries."
msgstr "Quarkusエクステンションの中には、トレースが後続の実行に伝搬されることを保証するために追加のコードを必要とするものがあります。これらのセクションでは、プロセスの境界を越えてトレースを伝搬するために必要なことを説明します。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:473
msgid "The instrumentation documented in this section has been tested with Quarkus and works in both standard and native mode."
msgstr "このセクションで説明されている計器は、Quarkusでテストされており、標準モードとネイティブモードの両方で動作します。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:474
#, no-wrap
msgid "CDI"
msgstr "CDI"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:478
#, fuzzy
msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.instrumentation.annotations.WithSpan` annotation will create a new Span and establish any required relationships with the current Trace context."
msgstr "CDIを意識したBeanのメソッドに `io.opentelemetry.instrumentation.annotations.WithSpan` アノテーションを付けると、新しいSpanが作成され、現在のTraceコンテキストとの必要な関係が確立されます。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:481
#, fuzzy
msgid "Method parameters can be annotated with the `io.opentelemetry.instrumentation.annotations.SpanAttribute` annotation to indicate which method parameters should be part of the Trace."
msgstr "メソッドパラメータには、 `io.opentelemetry.instrumentation.annotations.SpanAttribute` アノテーションを付けて、どのメソッドパラメータをトレースの一部とするかを示すことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:483
msgid "Example:"
msgstr "例:"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:489
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class SpanBean {\n"
"    @WithSpan\n"
"    void span() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:491
#: upstream/_versions/main/guides/opentelemetry.adoc:496
#: upstream/_versions/main/guides/opentelemetry.adoc:501
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:494
#, no-wrap
msgid ""
"    @WithSpan(\"name\")\n"
"    void spanName() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:499
#, no-wrap
msgid ""
"    @WithSpan(kind = SERVER)\n"
"    void spanKind() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:504
#, no-wrap
msgid ""
"    @WithSpan\n"
"    void spanArgs(@SpanAttribute(value = \"arg\") String arg) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:507
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:509
#, no-wrap
msgid "Available OpenTelemetry CDI injections"
msgstr "使用可能なOpenTelemetry CDI依存関係注入"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:513
msgid "As per MicroProfile Telemetry Tracing specification, Quarkus supports the CDI injections of the following classes:"
msgstr "MicroProfile Telemetry Tracingの仕様に基づき、Quarkusは以下のクラスのCDI依存関係注入をサポートしています。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:515
msgid "`io.opentelemetry.api.OpenTelemetry`"
msgstr "`io.opentelemetry.api.OpenTelemetry`"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:516
msgid "`io.opentelemetry.api.trace.Tracer`"
msgstr "`io.opentelemetry.api.trace.Tracer`"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:517
msgid "`io.opentelemetry.api.trace.Span`"
msgstr "`io.opentelemetry.api.trace.Span`"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:518
msgid "`io.opentelemetry.api.baggage.Baggage`"
msgstr "`io.opentelemetry.api.baggage.Baggage`"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:520
msgid "You can inject these classes in any CDI enabled bean. For instance, the `Tracer` is particularly useful to start custom spans:"
msgstr "これらのクラスは、CDIが有効なBeanに注入することができます。例えば、 `Tracer` は、カスタムスパンを開始するために特に有用です。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:525
#, no-wrap
msgid ""
"@Inject\n"
"Tracer tracer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:527
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:534
#, no-wrap
msgid ""
"public void tracedWork() {\n"
"    Span span = tracer.spanBuilder(\"My custom span\")\n"
"        .setAttribute(\"attr\", \"attr.value\")\n"
"        .setParent(Context.current().with(Span.current()))\n"
"        .setSpanKind(SpanKind.INTERNAL)\n"
"        .startSpan();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:536
#, no-wrap
msgid "    // traced work\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:539
#, no-wrap
msgid ""
"    span.end();\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:541
#, no-wrap
msgid "SmallRye Reactive Messaging - Kafka"
msgstr "SmallRye Reactive Messaging - Kafka"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:545
msgid "When using the SmallRye Reactive Messaging extension for Kafka, we are able to propagate the span into the Kafka Record with:"
msgstr "SmallRye Reactive Messaging extension for Kafkaを使用すると、スパンをKafka Recordに伝搬させることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:550
#, no-wrap
msgid ""
"TracingMetadata tm = TracingMetadata.withPrevious(Context.current());\n"
"Message out = Message.of(...).withMetadata(tm);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:554
msgid "The above creates a `TracingMetadata` object we can add to the `Message` being produced, which retrieves the OpenTelemetry `Context` to extract the current span for propagation."
msgstr "上記は、生成されている `Message` に追加できる `TracingMetadata` オブジェクトを作成し、OpenTelemetry `Context` を取得して、伝播のために現在のスパンを抽出しています。"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:555
#, no-wrap
msgid "Exporters"
msgstr "エクスポーター"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:557
#, no-wrap
msgid "Default"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:560
msgid "The Quarkus OpenTelemetry extension uses its own exporter built on top of Vert.x for optimal performance and maintainability."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:562
msgid "The exporter is automatically wired with CDI, that's why the `quarkus.otel.traces.exporter` property defaults to `cdi`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:564
msgid "The `quarkus.otel.exporter.otlp.traces.protocol` default to `grpc` and `http/protobuf` can also be used."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:565
#, no-wrap
msgid "On Quarkiverse"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:567
msgid "Additional exporters will be available in the Quarkiverse https://github.com/quarkiverse/quarkus-opentelemetry-exporter/blob/main/README.md[quarkus-opentelemetry-exporter] project."
msgstr "追加のエクスポーターは、Quarkiverseの link:https://github.com/quarkiverse/quarkus-opentelemetry-exporter/blob/main/README.md[quarkus-opentelemetry-exporter] プロジェクトで利用できるようになる予定です。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:568
#, no-wrap
msgid "OpenTelemetry exporter"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:570
msgid "The default OpenTelemetry exporter can be used, but it's not recommended because of the additional dependency on the OkHttp library."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:572
msgid "It can be activated by setting `quarkus.otel.traces.exporter=otlp` and include the following dependencies in your project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:584
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-exporter-otlp-common</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-exporter-otlp</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:591
#, no-wrap
msgid ""
"implementation(\"io.opentelemetry:opentelemetry-exporter-otlp-common\")\n"
"implementation(\"io.opentelemetry:opentelemetry-exporter-otlp\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:594
#, no-wrap
msgid "OpenTelemetry Configuration Reference"
msgstr "OpenTelemetry 設定リファレンス"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:600
#, fuzzy
msgid "Quarkus supports the OpenTelemetry Autoconfiguration for Traces.  The configurations match what you can see at https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[OpenTelemetry SDK Autoconfigure] adding the usual `quarkus.*` prefix."
msgstr "Quarkusは、OpenTelemetryのAutoconfiguration for Tracesをサポートしています。構成は、OpenTelemet link:https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[ry SDK Autoconfigureで] 見られるものと同じで、通常の `quarkus.*` プレフィックスを追加しています。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:602
#, fuzzy
msgid "Quarkus OpenTelemetry configuration properties now have the `quarkus.otel.*` prefix."
msgstr "Quarkus OpenTelemetryの設定プロパティに `quarkus.otel.*` プレフィックスが付くようになりました。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:604
#, fuzzy, no-wrap
msgid "*The legacy properties* with prefix `quarkus.opentelemetry.*` are currently being mapped to the new ones as a default, during a transition period. See Default column in the details below.\n"
msgstr "プレフィックスが `quarkus.opentelemetry.*` の *レガシープロパティは* 、現在、移行期間中、デフォルトとして新しいプロパティにマッピングされています。以下の詳細の「デフォルト」欄を参照してください。"

#~ msgid "Quarkus OpenTelemetry defaults to the standard OTLP exporter defined in OpenTelemetry."
#~ msgstr "Quarkus OpenTelemetryのデフォルトは、OpenTelemetryで定義されている標準的なOTLPエクスポーターです。"

#~ msgid "The solution is located in the `opentelemetry-quickstart` {quickstarts-tree-url}/opentelemetry-quickstart[directory]."
#~ msgstr "このソリューションは、 `opentelemetry-quickstart` {quickstarts-tree-url}/opentelemetry-quickstart[ディレクトリ]にあります。"

#~ msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.extension.annotations.WithSpan` annotation will create a new Span and establish any required relationships with the current Trace context."
#~ msgstr "CDI を意識した Bean のメソッドに `io.opentelemetry.extension.annotations.WithSpan` というアノテーションを付けると、新しい Span が作成され、現在の Trace コンテキストと必要な関係が確立されます。"

#~ msgid "Method parameters can be annotated with the `io.opentelemetry.extension.annotations.SpanAttribute` annotation to indicate which method parameters should be part of the Trace."
#~ msgstr "メソッドパラメータには、 `io.opentelemetry.extension.annotations.SpanAttribute` アノテーションを付けて、どのメソッドパラメータが Trace の一部となるべきかを示すことができます。"

#~ msgid "The first approach is by providing the properties within the `src/main/resources/application.properties` file:"
#~ msgstr "最初のアプローチは、 `src/main/resources/application.properties` ファイル内でプロパティーを提供することです。"

#~ msgid "Whether OpenTelemetry is enabled or not. The default is `true`, but shown here to indicate how it can be disabled"
#~ msgstr "OpenTelemetryを有効にするかどうか。デフォルトは `true` ですが、ここでは無効にできることを示しています。"

#~ msgid "gRPC endpoint for sending spans"
#~ msgstr "スパンを送信するためのgRPCエンドポイント"

#~ msgid "Configure the OpenTelemetry Collector by creating an `otel-collector-config.yaml` file:"
#~ msgstr "`otel-collector-config.yaml` ファイルを作成して OpenTelemetry Collector を設定します。"

#~ msgid "If you need to use a custom sampler or to use one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create a sampler producer. The OpenTelemetry extension will detect the `Sampler` CDI bean and will use it when configuring the tracer producer."
#~ msgstr "カスタムサンプラーを使用する必要がある場合や、 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions]の1つが提供するサンプラーを使用する必要がある場合は、サンプラー・プロデューサーを作成することができます。OpenTelemetryエクステンションは、 `Sampler` CDI Beanを検出し、トレーサープロデューサーを構成する際にそれを使用します。"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "Docker"
#~ msgstr "Docker"

#~ msgid "./mvnw compile quarkus:dev\n"
#~ msgstr "./mvnw compile quarkus:dev\n"
