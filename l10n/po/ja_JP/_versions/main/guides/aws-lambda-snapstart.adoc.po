# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-15 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:6
#, fuzzy, no-wrap
msgid "AWS Lambda SnapStart Configuration"
msgstr "AWS Lambda SnapStartの構成"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:15
msgid "https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html[SnapStart] is a snapshotting and restore mechanism reducing drastically the cold startup time of Java functions on AWS.  This document explains the various settings you can use to leverage this feature.  It is not a reference documentation on SnapStart, and it will not cover how SnapStart works in details."
msgstr "link:https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html[SnapStart] は、AWS上のJava関数のコールドスタートアップ時間を大幅に短縮するスナップショット・リストアの仕組みです。このドキュメントでは、この機能を活用するためのさまざまな設定について説明します。SnapStartのリファレンスドキュメントではないので、SnapStartの動作の詳細については説明しません。"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:18
msgid "This feature is only available on AWS Lambda, and not in all regions.  Please check the AWS documentation to verify the eligibility of your AWS region."
msgstr "本機能はAWS Lambdaでのみ利用可能であり、すべてのリージョンで利用できるわけではありません。AWSのドキュメントをご確認の上、ご利用のAWSリージョンが該当するかご確認ください。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:19
#, no-wrap
msgid "Enabling / Disabling SnapStart Optimizations"
msgstr "SnapStart最適化の有効化/無効化"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:23
#, fuzzy
msgid "If you use the Quarkus AWS Lambda extension, SnapStart optimizations are automatically enabled.  However, you can enable/disable it explicitly using:"
msgstr "Quarkus AWS Lambdaエクステンションを使用すると、SnapStartの最適化が自動的に有効になります。ただし、以下を使用して明示的に有効化/無効化することもできます："

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:27
#, no-wrap
msgid "quarkus.snapstart.enable=true|false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:30
msgid "It does not enable/disable SnapStart for your function, only the Quarkus optimizations."
msgstr "Quarkusの最適化のみで、関数のSnapStartの有効/無効は設定されません。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:31
#, no-wrap
msgid "Class Preloading"
msgstr "クラスプリローディング"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:35
msgid "Classloading has a huge impact on your function execution time.  This optimization allows preloading classes during the snapshotting process of SnapStart."
msgstr "クラスローディングは、関数の実行時間に大きな影響を与えます。この最適化により、SnapStartのスナップショット処理中にクラスをプリロードすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:37
msgid "The classes to preload are listed in two places:"
msgstr "プリロードするクラスは2か所に記載されています。"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:39
msgid "extensions can produce a list of classes (using the `io.quarkus.deployment.builditem.PreloadClassBuildItem` build item)"
msgstr "エクステンションは、クラスのリストを生成することができます ( `io.quarkus.deployment.builditem.PreloadClassBuildItem` ビルドアイテムを使用します)。"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:40
msgid "you can add a `src/main/resources/META-INF/quarkus-preload-classes.txt` file listing the classes to preload, such as:"
msgstr "以下のように、プリロードするクラスをリストアップした `src/main/resources/META-INF/quarkus-preload-classes.txt` ファイルを追加することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:65
#, no-wrap
msgid ""
"com.amazonaws.services.lambda.runtime.LambdaRuntimeInternal\n"
"com.fasterxml.jackson.annotation.JsonAlias\n"
"com.fasterxml.jackson.annotation.JsonFormat$Feature\n"
"com.fasterxml.jackson.core.exc.InputCoercionException\n"
"com.fasterxml.jackson.core.exc.StreamWriteException\n"
"com.fasterxml.jackson.core.io.ContentReference\n"
"com.fasterxml.jackson.core.io.IOContext\n"
"com.fasterxml.jackson.core.io.JsonEOFException\n"
"com.fasterxml.jackson.core.io.MergedStream\n"
"com.fasterxml.jackson.core.io.NumberInput\n"
"com.fasterxml.jackson.core.io.NumberOutput\n"
"com.fasterxml.jackson.core.io.UTF32Reader\n"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper\n"
"com.fasterxml.jackson.core.json.JsonReadContext\n"
"com.fasterxml.jackson.core.json.JsonWriteContext\n"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser\n"
"com.fasterxml.jackson.core.JsonEncoding\n"
"com.fasterxml.jackson.core.JsonGenerationException\n"
"com.fasterxml.jackson.core.JsonLocation\n"
"com.fasterxml.jackson.core.JsonStreamContext\n"
"com.fasterxml.jackson.core.JsonToken\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:68
msgid "The format is simple: one class per line."
msgstr "フォーマットはシンプルで、1行に1クラスです。"

#. type: Title ===
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:69
#, no-wrap
msgid "Computing the class list"
msgstr "クラスリストの計算"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:72
msgid "That step is particularly not user-friendly. We plan to improve it."
msgstr "このステップは特に使い勝手が悪いため、改善を計画しています。"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:76
msgid "To compute the list of classes, we recommend deploying your function and setting the `JAVA_TOOL_OPTIONS` environment variable to `-verbose:class`.  Then execute your function and retrieve the log (in CloudWatch).  You should be able to extract the class names using sed/awk or any text editor."
msgstr "クラスのリストを計算するには、関数をデプロイして、環境変数 `JAVA_TOOL_OPTIONS` を `-verbose:class` に設定することをお勧めします。 その後、関数を実行し、（CloudWatchで）ログを取得します。sed/awkなどのテキストエディタでクラス名を抽出することができるはずです。"

#. type: Title ===
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:77
#, no-wrap
msgid "Application class list"
msgstr "アプリケーションクラス一覧"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:81
msgid "By default, Quarkus generates the class list of the classes included in your application (including the classes generated by Quarkus).  So, you do not have to repeat them in the `quarkus-preload-classes.txt` file."
msgstr "デフォルトでは、（Quarkus で生成されたクラスも含む）アプリケーションに含まれるクラスのクラスリストが生成されま す。そのため、 `quarkus-preload-classes.txt` ファイルでこれらを繰り返す必要はありません。"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:83
msgid "You can disable this feature using:"
msgstr "次の設定により、この機能を無効にすることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:87
#, no-wrap
msgid "quarkus.snapstart.generate-application-class-list=false\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:89
#, no-wrap
msgid "Disable preloading"
msgstr "プリローディングの無効化"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:92
msgid "You can disable the preloading of classes using:"
msgstr "次の設定により、クラスのプリローディングを無効にすることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:96
#, no-wrap
msgid "quarkus.snapstart.preload-classes=false\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:98
#, no-wrap
msgid "Skipping class initialization"
msgstr "クラス初期化のスキップ"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:102
msgid "By default, when the classes are preloaded, they are also _initialized_, meaning it also resolves the dependent classes.  You can disable this behavior using:"
msgstr "デフォルトでは、クラスがプリロードされるときに、 _初期化もされます_ 。これは、依存するクラスも解決することを意味します。この動作を無効にするには、次のようにします。"

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:106
#, no-wrap
msgid "quarkus.snapstart.initialize-classes=false\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:108
#, no-wrap
msgid "Client Priming"
msgstr "クライアント・プライミング"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:111
msgid "Client _priming_ is a technique that allows initializing a client during the snapshotting process, so it's already fully functional during the application runtime."
msgstr "クライアントの _プライミング_ は、スナップショット処理中にクライアントを初期化し、アプリケーションの実行時にすでに完全に機能するようにする技術です。"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:113
msgid "There are two ways to achieve _priming_:"
msgstr "_プライミング_ を実現するには、2つの方法があります。"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:115
msgid "initialize the client in a `static` block, which, thanks to class preloading will be executed before the snapshot"
msgstr "`static` ブロックでクライアントを初期化します。これは、クラスのプリロードのおかげで、スナップショットの前に実行されることになります。"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:116
msgid "register a CRaC Resource doing the initialization"
msgstr "初期化を行うCRaC Resourceを登録する"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:118
msgid "can be achieved as follows:"
msgstr "は、次のように実現できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:124
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class HeroRepository {\n"
"    private static final DynamoDbClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:134
#, no-wrap
msgid ""
"    static {\n"
"        client = DynamoDbClient.builder()\n"
"                .region(Region.US_EAST_2)\n"
"                .credentialsProvider(DefaultCredentialsProvider.create())\n"
"                .build();\n"
"        client.describeEndpoints();\n"
"    }\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:138
msgid "Implementing priming using a static block may prevent the native compilation of your application.  Client initialization may start threads or open connections which are not compatible with the native compilation if the class is initialized at build time."
msgstr "静的ブロックを使ってプライミングを実装すると、アプリケーションのネイティブコンパイルができなくなる場合があります。ビルド時にクラスを初期化すると、クライアントの初期化でスレッドが起動したり、 ネイティブコンパイルと互換性のないコネクションが開かれたりすることがあります。"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:140
msgid "The next section covers (2)."
msgstr "次のセクションで(2)について説明します。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:141
#, no-wrap
msgid "Resource registration"
msgstr "リソース登録"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:144
msgid "SnapStart uses the CRaC API to allow the application to execute custom code before the snapshotting or during the restoration."
msgstr "SnapStartはCRaC APIを使用して、スナップショット前またはリストア中にアプリケーションでカスタムコードを実行できるようにします。"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:146
msgid "While it's the CRaC API, SnapStart is not CRaC and can do _things_ that would not work with others CRaC implementations."
msgstr "CRaC APIではありますが、SnapStartはCRaCではないので、他のCRaC実装では動作しないような _こと_ を行うことができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:150
#, no-wrap
msgid "package org.acme.hello;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:156
#, no-wrap
msgid ""
"import io.quarkus.runtime.Startup;\n"
"import org.crac.Context;\n"
"import org.crac.Core;\n"
"import org.crac.Resource;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:160
#, no-wrap
msgid ""
"import jakarta.annotation.PostConstruct;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:164
#, no-wrap
msgid ""
"@Startup\n"
"@ApplicationScoped\n"
"public class HelloPriming implements Resource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:167
#, no-wrap
msgid ""
"    @Inject\n"
"    Logger logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:173
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    void init() {\n"
"        // Important - register the resource\n"
"        Core.getGlobalContext().register(this);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:179
#, no-wrap
msgid ""
"    @Override\n"
"    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n"
"        logger.info(\"before checkout hook\");\n"
"        // initialize your client here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:186
#, no-wrap
msgid ""
"    @Override\n"
"    public void afterRestore(Context<? extends Resource> context) throws Exception {\n"
"        logger.info(\"after checkout hook\");\n"
"        // if there is anything to do during the restoration, do it here.\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:189
msgid "Restoration is limited to 2 seconds."
msgstr "リストアは2秒間に限られます。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:190
#, no-wrap
msgid "TieredCompilation"
msgstr "TieredCompilation"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:194
msgid "It is also recommended to use _tiered compilation_ when using SnapStart.  To achieve this, set the `JAVA_TOOL_OPTIONS` environment property to `-XX:+TieredCompilation -XX:TieredStopAtLevel=1`."
msgstr "また、SnapStartを使用する場合は、 _階層型コンパイル_ を使用することをお勧めします。これを実現するには、 `JAVA_TOOL_OPTIONS` 環境プロパティを `-XX:+TieredCompilation -XX:TieredStopAtLevel=1` に設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/aws-lambda-snapstart.adoc:195
msgid "`TieredCompilation` can also be interesting for regular Lambda functions."
msgstr "`TieredCompilation` は、通常のLambda関数でも興味深いことができます。"
