# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-09-18 00:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/command-mode-reference.adoc:6
#, fuzzy, no-wrap
msgid "Command Mode Applications"
msgstr "コマンドモードアプリケーションの作成"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:11
msgid "This reference covers how to write applications that run and then exit."
msgstr "このリファレンスでは、実行して終了するアプリケーションの書き方について説明しています。"

#. type: Title ==
#: upstream/_versions/main/guides/command-mode-reference.adoc:12
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:16
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:18
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:20
msgid "The solution is located in the `getting-started-command-mode` {quickstarts-tree-url}/getting-started-command-mode[directory]."
msgstr "このソリューションは `getting-started-command-mode` {quickstarts-tree-url}/getting-started-command-mode[ディレクトリ]にあります。"

#. type: Title ==
#: upstream/_versions/main/guides/command-mode-reference.adoc:21
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:24
msgid "First, we need to create a new Quarkus project with the following command:"
msgstr "まず、以下のコマンドで新しいQuarkusプロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:30
msgid "The suggested project creation command lines disable the codestarts to avoid including a REST server. Similarly, if you use code.quarkus.io to generate a project, you need to go to *MORE OPTIONS -> Starter Code* and select *No* to avoid adding the RESTEasy Reactive extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:32
msgid "The RESTEasy Reactive extension is added automatically only if you ask for codestarts and you didn't specify any extensions."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/command-mode-reference.adoc:34
#, no-wrap
msgid "Writing Command Mode Applications"
msgstr "コマンドモードアプリケーションの作成"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:38
msgid "There are two different approaches that can be used to implement applications that exit."
msgstr "終了するアプリケーションを実装するためには、2つの異なるアプローチがあります。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:40
msgid "Implement `QuarkusApplication` and have Quarkus run this method automatically"
msgstr "`QuarkusApplication` を実装し、Quarkusがこのメソッドを自動的に実行するようにします。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:41
msgid "Implement `QuarkusApplication` and a Java main method, and use the Java main method to launch Quarkus"
msgstr "`QuarkusApplication` とJava mainメソッドを実装し、Java mainメソッドを使用してQuarkusを起動します。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:44
msgid "In this document the `QuarkusApplication` instance is referred to as the application main, and a class with a Java main method is the Java main."
msgstr "このドキュメントでは、 `QuarkusApplication` インスタンスをアプリケーション mainと呼び、Java mainメソッドを持つクラスを Java mainと呼びます。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:46
#, fuzzy
msgid "The simplest possible command mode application with access to Quarkus APIs might appear as follows:"
msgstr "コマンドモードのアプリケーションを実行する場合、基本的なライフサイクルは以下の通りです。"

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:51
#, no-wrap
msgid ""
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:60
#, no-wrap
msgid ""
"@QuarkusMain    // <.>\n"
"public class HelloWorldMain implements QuarkusApplication {\n"
"  @Override\n"
"  public int run(String... args) throws Exception {   // <.>\n"
"    System.out.println(\"Hello \" + args[1]);\n"
"    return 0;\n"
" }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:63
msgid "<.> The `@QuarkusMain` annotation tells Quarkus that this is the main entry point.  <.> The `run` method is invoked once Quarkus starts, and the application stops when it finishes."
msgstr "<.> `@QuarkusMain` アノテーションは、これがメインのエントリーポイントであることをQuarkusに伝えます。  <.> `run` メソッドは、Quarkusが起動すると呼び出され、終了するとアプリケーションが停止します。"

#. type: Title ===
#: upstream/_versions/main/guides/command-mode-reference.adoc:64
#, no-wrap
msgid "Contexts"
msgstr "コンテキスト"

#. type: Block title
#: upstream/_versions/main/guides/command-mode-reference.adoc:67
#, no-wrap
msgid "Got a `ContextNotActiveException`?"
msgstr "`ContextNotActiveException`が発生しましたか?"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:72
#, fuzzy
msgid "A command mode application (like a CLI) is a bit different from say an HTTP service, there is a single call from the command line.  So the notion of _request_ let alone multiple requests does not exist per se.  Therefore, request scope is not the default."
msgstr "コマンドモードのアプリケーション（CLIなど）は、例えばHTTPサービスとは少し異なり、コマンドラインからの呼び出しは1回だけです。そのため、複数のリクエストはおろか、 _リクエスト_という概念自体が存在しません。したがって、リクエストスコープはデフォルトではありません。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:75
msgid "To get access to your application beans and services, be aware that a `@QuarkusMain` instance is an application scoped bean by default.  It has access to singletons, application and dependent scoped beans."
msgstr "アプリケーションBeanやサービスにアクセスするために、 `@QuarkusMain` インスタンスはデフォルトでapplicationスコープのBeanであることに注意してください。singleton、application、dependentスコープのBeanへのアクセスを持っています。requestスコープを必要とするBeanと対話したい場合は、 `run()` メソッドに `@ActivateRequestContext` を記述してください。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:79
#, fuzzy
msgid "If you want to interact with beans that requires a request scope, simply add the `@ActivateRequestContext` annotation on your `run()` method.  This let `run()` have access to methods like `listAll()` and `query*` methods on a Panache Entity.  Without it, you will eventually get a `ContextNotActiveException` when accessing such classes/beans."
msgstr "これにより、 `run()` は Panache Entity 上の `listAll()` や `query*` のようなメソッドにアクセスできるようになります。これがないと、そのようなクラスやBeanにアクセスするときに、最終的には `ContextNotActiveException` に直面することになります。"

#. type: Title ===
#: upstream/_versions/main/guides/command-mode-reference.adoc:81
#, no-wrap
msgid "Main method"
msgstr "Main method"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:83
msgid "If we want to use a Java main to run the application main it would look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:88
#, no-wrap
msgid ""
"import io.quarkus.runtime.Quarkus;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:91
#, no-wrap
msgid ""
"@QuarkusMain\n"
"public class JavaMain {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:96
#, no-wrap
msgid ""
"    public static void main(String... args) {\n"
"        Quarkus.run(HelloWorldMain.class, args);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:100
msgid "This is effectively the same as running the `HelloWorldMain` application main directly, but has the advantage it can be run from the IDE."
msgstr "これは `HelloWorldMain` アプリケーション mainを直接実行するのと実質的には同じですが、IDE から実行できるという利点があります。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:102
msgid "If a class that implements `QuarkusApplication` and has a Java main then the Java main will be run."
msgstr "`QuarkusApplication` を実装したクラスで Java main がある場合は Java main が実行されます。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:107
msgid "It is recommended that a Java main perform very little logic, and just launch the application main. In development mode the Java main will run in a different ClassLoader to the main application, so may not behave as you would expect."
msgstr "Java mainはほとんどロジックを実行せず、アプリケーション mainを起動するだけにすることをお勧めします。開発モードでは、Java mainはアプリケーション mainとは異なるClassLoaderで実行されるので、期待通りの動作をしないかもしれません。"

#. type: Title ====
#: upstream/_versions/main/guides/command-mode-reference.adoc:108
#, no-wrap
msgid "Multiple Main Methods"
msgstr "複数のmainメソッド"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:114
msgid "It is possible to have multiple main methods in an application, and select between them at build time.  The `@QuarkusMain` annotation takes an optional 'name' parameter, and this can be used to select the main to run using the `quarkus.package.main-class` build time configuration option. If you don't want to use annotations this can also be used to specify the fully qualified name of a main class."
msgstr "アプリケーション内に複数のmainメソッドを持ち、ビルド時にそれらの間で選択することが可能です。 `@QuarkusMain` アノテーションはオプションの 'name' パラメーターを取り、 `quarkus.package.main-class` ビルド時設定オプションを使用して実行するmainを選択するために使用できます。アノテーションを使用したくない場合は、メインクラスの完全修飾名を指定するために使用することもできます。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:118
#, fuzzy
msgid "By default, the `@QuarkusMain` with no name (i.e. the empty string) will be used, and if it is not present and `quarkus.package.main-class` is not specified then Quarkus will automatically generate a main class that just runs the application."
msgstr "デフォルトでは、名前のない `@QuarkusMain` (つまり空文字列)が使用され、それが存在せず `quarkus.package.main-class` が指定されていない場合は、Quarkus はアプリケーションを実行するだけのメインクラスを自動的に生成します。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:122
msgid "The `name` of `@QuarkusMain` must be unique (including the default of the empty string). If you have multiple `@QuarkusMain` annotations in your application the build will fail if the names are not unique."
msgstr "`@QuarkusMain` の `name` は一意である必要があります(デフォルトの空文字列を含む)。アプリケーション内に複数の `@QuarkusMain` アノテーションがある場合、名前が一意でないとビルドに失敗します。"

#. type: Title ===
#: upstream/_versions/main/guides/command-mode-reference.adoc:123
#, no-wrap
msgid "The command mode lifecycle"
msgstr "コマンドモードのライフサイクル"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:126
msgid "When running a command mode application the basic lifecycle is as follows:"
msgstr "コマンドモードのアプリケーションを実行する場合、基本的なライフサイクルは以下の通りです。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:128
msgid "Start Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:129
msgid "Run the `QuarkusApplication` main method"
msgstr "`QuarkusApplication` mainメソッドの実行"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:130
msgid "Shut down Quarkus and exit the JVM after the main method returns"
msgstr "mainメソッドがreturnされた後にQuarkusをシャットダウンし、JVMを終了する"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:134
msgid "Shutdown is always initiated by the application main thread returning. If you want to run some logic on startup, and then run like a normal application (i.e. not exit) then you should call `Quarkus.waitForExit` from the main thread (A non-command mode application is essentially just running an application that just calls `waitForExit`)."
msgstr "シャットダウンは常にアプリケーションのメインスレッドがreturnされることで開始されます。起動時に何らかのロジックを実行して、通常のアプリケーションのように実行したい場合 (つまり終了しない) は、メインスレッドから `Quarkus.waitForExit` を呼び出す必要があります (非コマンドモードのアプリケーションは、基本的に `waitForExit` を呼び出すだけのアプリケーションを実行しているだけです)。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:137
#, fuzzy
msgid "If you want to shut down a running application and you are not in the main thread, then you should call `Quarkus.asyncExit` in order to unblock the main thread and initiate the shutdown process."
msgstr "実行中のアプリケーションをシャットダウンしたい場合、メインスレッドにいない場合は、 `Quarkus.asyncExit` を呼び出してメインスレッドのブロックを解除し、シャットダウン処理を開始する必要があります。"

#. type: Title ===
#: upstream/_versions/main/guides/command-mode-reference.adoc:138
#, no-wrap
msgid "Development Mode"
msgstr "開発モード"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:142
#, fuzzy
msgid "Also, for command mode applications, the dev mode is supported.  When you start your application in dev mode, the command mode application is executed:"
msgstr "また、コマンドモードアプリケーションでは、開発モードにも対応しています。 `mvn compile quarkus:dev` を実行すると、コマンドモードアプリケーションが実行されます。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:146
#, fuzzy
msgid "As command mode applications will often require arguments to be passed on the command line, this is also possible in dev mode:"
msgstr "コマンドモードのアプリケーションでは、コマンドラインで引数を渡す必要があることが多く、これは開発モードでも可能です:"

#. type: Block title
#: upstream/_versions/main/guides/command-mode-reference.adoc:148
#, no-wrap
msgid "CLI"
msgstr "コマンドラインインタフェース"

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:151
#, no-wrap
msgid "quarkus dev '--help'\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/command-mode-reference.adoc:154
#, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:157
#, no-wrap
msgid "./mvnw quarkus:dev -Dquarkus.args='--help'\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/command-mode-reference.adoc:160
#, no-wrap
msgid "Gradle"
msgstr "Gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:163
#, no-wrap
msgid "./gradlew quarkusDev --quarkus-args='--help'\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:166
msgid "You should see the following down the bottom of the screen after the application is stopped:"
msgstr "アプリケーションが停止した後、画面の下に以下のように表示されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:169
#, no-wrap
msgid "--\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:171
msgid "Press [space] to restart, [e] to edit command line args (currently '-w --tags 1.0.1.Final'), [r] to resume testing, [o] Toggle test output, [h] for more options>"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:175
msgid "You can press the `Space bar` key and the application will be started again.  You can also use the `e` hotkey to edit the command line arguments and restart your application."
msgstr "`スペースバー` キーを押せば、アプリケーションが再び起動します。また、 `e` ホットキーを使って、コマンドライン引数を編集し、アプリケーションを再起動することもできます。"

#. type: Title ==
#: upstream/_versions/main/guides/command-mode-reference.adoc:176
#, fuzzy, no-wrap
msgid "Testing Command Mode Applications"
msgstr "コマンドモードアプリケーションの作成"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:181
msgid "Command Mode applications can be tested using the `@QuarkusMainTest` and `@QuarkusMainIntegrationTest` annotations. These work in a similar way to `@QuarkusTest` and `@QuarkusIntegrationTest` where `@QuarkusMainTest` will run the CLI tests within the current JVM, while `QuarkusIntegrationTest` is used to run the generated executable (both jars and native)."
msgstr "コマンドモード・アプリケーションは、 `@QuarkusMainTest` および `@QuarkusMainIntegrationTest` のアノテーションを使用してテストすることができます。これらは、 `@QuarkusTest` および `@QuarkusIntegrationTest` と同様の方法で動作します。 `@QuarkusMainTest` は現在のJVM内でCLIテストを実行し、 `QuarkusIntegrationTest` は生成された実行ファイル（ジャーおよびネイティブの両方）を実行するために使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:183
msgid "We can write a simple test for our CLI application above as follows:"
msgstr "上記のCLIアプリケーションの簡単なテストを以下のように書くことができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:192
#, no-wrap
msgid ""
"import io.quarkus.test.junit.main.Launch;\n"
"import io.quarkus.test.junit.main.LaunchResult;\n"
"import io.quarkus.test.junit.main.QuarkusMainLauncher;\n"
"import io.quarkus.test.junit.main.QuarkusMainTest;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:195
#, no-wrap
msgid ""
"@QuarkusMainTest\n"
"public class HelloTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:201
#, no-wrap
msgid ""
"    @Test\n"
"    @Launch(\"World\")\n"
"    public void testLaunchCommand(LaunchResult result) {\n"
"        Assertions.assertTrue(result.getOutput().contains(\"Hello World\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:206
#, no-wrap
msgid ""
"    @Test\n"
"    @Launch(value = {}, exitCode = 1)\n"
"    public void testLaunchCommandFailed() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:214
#, no-wrap
msgid ""
"    @Test\n"
"    public void testManualLaunch(QuarkusMainLauncher launcher) {\n"
"        LaunchResult result = launcher.launch(\"Everyone\");\n"
"        Assertions.assertEquals(0, result.exitCode());\n"
"        Assertions.assertTrue(result.getOutput().contains(\"Hello Everyone\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:219
msgid "Each test method must be annotated with `@Launch` to automatically start the application or have a `QuarkusMainLauncher` parameter to manually launch the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:221
msgid "We can then extend this with an integration test that can be used to test the native executable or runnable jar:"
msgstr "そして、これを統合テストで拡張し、ネイティブ実行可能ファイルや実行可能jarをテストするために使用することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:225
#, no-wrap
msgid "import io.quarkus.test.junit.main.QuarkusMainIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:229
#, no-wrap
msgid ""
"@QuarkusMainIntegrationTest\n"
"public class HelloIT extends HelloTest {\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/command-mode-reference.adoc:231
#, no-wrap
msgid "Mocking"
msgstr "モック"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:235
msgid "CDI injection is not supported in the `@QuarkusMainTest` tests.  Consequently, mocking CDI beans with `QuarkusMock` or `@InjectMock` is not supported either."
msgstr "CDI インジェクションは `@QuarkusMainTest` テストではサポートされていません。 そのため、`QuarkusMock` や `@InjectMock` を使用して CDI Bean をモックすることもサポートされていません。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:237
msgid "It is possible to mock CDI beans by leveraging xref:getting-started-testing.adoc#testing_different_profiles[test profiles] though."
msgstr "xref:getting-started-testing.adoc#testing_different_profiles[テストプロファイル] を活用することで、CDI Beanのモックを作成することが可能です。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:239
msgid "For instance, in the following test, the singleton `CdiBean1` will be mocked by `MockedCdiBean1`:"
msgstr "例えば、次のテストでは、シングルトン `CdiBean1` は `MockedCdiBean1` によってモック化されます:"

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:243
#, no-wrap
msgid "package org.acme.commandmode.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:245
#, no-wrap
msgid "import java.util.Set;\n"
msgstr "import java.util.Set;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:248
#, no-wrap
msgid ""
"import javax.enterprise.inject.Alternative;\n"
"import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:251
#, no-wrap
msgid ""
"import org.junit.jupiter.api.Test;\n"
"import org.acme.commandmode.test.MyCommandModeTest.MyTestProfile;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:257
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTestProfile;\n"
"import io.quarkus.test.junit.TestProfile;\n"
"import io.quarkus.test.junit.main.Launch;\n"
"import io.quarkus.test.junit.main.LaunchResult;\n"
"import io.quarkus.test.junit.main.QuarkusMainTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:261
#, no-wrap
msgid ""
"@QuarkusMainTest\n"
"@TestProfile(MyTestProfile.class)\n"
"public class MyCommandModeTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:267
#, no-wrap
msgid ""
"    @Test\n"
"    @Launch(value = {})\n"
"    public void testLaunchCommand(LaunchResult result) {\n"
"        // ... assertions ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:269
#, no-wrap
msgid "    public static class MyTestProfile implements QuarkusTestProfile {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:275
#, no-wrap
msgid ""
"        @Override\n"
"        public Set<Class<?>> getEnabledAlternatives() {\n"
"            return Set.of(MockedCdiBean1.class); <1>\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:279
#, no-wrap
msgid ""
"    @Alternative <2>\n"
"    @Singleton <3>\n"
"    public static class MockedCdiBean1 implements CdiBean1 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/command-mode-reference.adoc:286
#, no-wrap
msgid ""
"        @Override\n"
"        public String myMethod() {\n"
"            return \"mocked value\";\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:288
msgid "List all the CDI beans for which you want to enable an alternative mocked bean."
msgstr "代替モックビーンを有効にしたい CDI ビーンをすべて列挙します。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:289
msgid "Use `@Alternative` without a `@Priority`. Make sure you don't use `@Mock`."
msgstr "`Alternative` を `@Priority` なしで使用します。`@Mock` を使用しないことを確認してください。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:290
msgid "The scope of the mocked bean should be consistent with the original one."
msgstr "モックされたビーンのスコープは、元のビーンと一致する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/command-mode-reference.adoc:291
msgid "Using this pattern, you can enable specific alternatives for any given test."
msgstr "このパターンを使用すると、任意のテストに対して特定の選択肢を有効にすることができます。"

#~ msgid "As command mode applications will often require arguments to be passed on the commandline, this is also possible in dev mode via the `quarkus.args` system property. For example `mvn quarkus:dev -Dquarkus.args='--help'` and the same can be achieved with Gradle: `./gradlew quarkusDev --quarkus-args='--help'`."
#~ msgstr "コマンドモードのアプリケーションでは、コマンドラインに引数を渡す必要がある場合が多いので、devモードでも `quarkus.args` システムプロパティを使って引数を渡すことができます。例えば、 `mvn quarkus:dev -Dquarkus.args='--help'` であり、Gradleでも同じことが可能です: `./gradlew quarkusDev --quarkus-args='--help'` 。"

#~ msgid "Dev mode"
#~ msgstr "開発モード"
