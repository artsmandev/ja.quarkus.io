# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-12-14 02:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:6
#, no-wrap
msgid "Using OpenID Connect (OIDC) and OAuth2 Client and Filters to manage access tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:12
msgid "This guide explains how to use:"
msgstr "このガイドでは以下の使い方を解説しています。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:14
msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenId Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:15
msgid "`quarkus-oidc-token-propagation` extension to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:17
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:18
#, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:21
#, fuzzy
#| msgid "Add the following dependencies to your test project:"
msgid "Add the following Maven dependency:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:28
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:31
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` エクステンションは、SmallRye Mutiny `Uni` および `Vert.xWebClient` を使用してトークンを取得および更新するために使用できるリアクティブな `io.quarkus.oidc.client.OidcClient` を提供します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:33
#, fuzzy
#| msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using `client_credentials` or `password` token grants and refresh the tokens using `refresh_token` grant."
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using the token grants such as `client_credentials` or `password` and refresh the tokens using a `refresh_token` grant."
msgstr "`OidcClient` は自動検出または手動で構成することができる IDP トークンのエンドポイント URL でビルド時に初期化され、このエンドポイントを使用して `client_credentials` または `password` トークングラントを使用してアクセストークンを取得し、 `refresh_token` グラントを使用してトークンを更新します。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:34
#, fuzzy, no-wrap
#| msgid "Token endpoint configuration"
msgid "Token Endpoint Configuration"
msgstr "トークンエンドポイントの設定"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:37
msgid "By default the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` のパスを追加することで、トークンのエンドポイントアドレスが検出されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:39
msgid "For example, given this Keycloak URL:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:43
#, fuzzy, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.secret=secret\n"
msgid "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:46
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:48
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、トークンエンドポイントのアドレスを相対パスの値で設定することができます。例:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:55
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
"quarkus.oidc-client.token-path=/protocol/openid-connect/tokens\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:58
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:62
#, fuzzy, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.secret=secret\n"
msgid "quarkus.oidc-client.token-path=http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:65
msgid "Setting 'quarkus.oidc-client.auth-server-url' and 'quarkus.oidc-client.discovery-enabled' is not required in this case."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:66
#, no-wrap
msgid "Supported Token Grants"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:69
#, fuzzy
#| msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:70
#, no-wrap
msgid "Client Credentials Grant"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:73
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:79
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:82
msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
msgstr "`client_credentials` グラントにより、`quarkus.oidc-client.grant-options.client.<param-name>=<value>` を介してトークンリクエストに追加のパラメータを設定できます。 `audience` パラメータを使用して目的のトークン受信者を設定する方法は次のとおりです。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:91
#, fuzzy, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.secret=secret\n"
#| "quarkus.oidc-client.grant.type=password\n"
#| "quarkus.oidc-client.grant-options.password.username=alice\n"
#| "quarkus.oidc-client.grant-options.password.password=alice\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"# 'client' is a shortcut for `client_credentials`\n"
"quarkus.oidc-client.grant.type=client\n"
"quarkus.oidc-client.grant-options.client.audience=https://example.com/api\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:93
#, no-wrap
msgid "Password Grant"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:96
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:105
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:108
msgid "It can be further customized using a `quarkus.oidc-client.grant-options.password` configuration prefix, similarly to how the client credentials grant can be customized."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:109
#, no-wrap
msgid "Other Grants"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:112
msgid "`OidcClient` can also help with acquiring the tokens using the grants which require some extra input parameters which can not be captured in the configuration. These grants are `refresh token` (with the external refresh token), `token exchange` and `authorization code`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:114
msgid "Using the `refresh_token` grant which uses an out of band refresh token to acquire a new set of tokens will be required if the existing refresh token has been posted to the current Quarkus endpoint for it to acquire the access token. In this case `OidcClient` needs to be configured as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:121
#, fuzzy, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.secret=secret\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=refresh\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:124
msgid "and then you can use `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:126
msgid "Using the `token exchange` grant may be required if you are building a complex microservices application and would like to avoid the same `Bearer` token be propagated to and used by more than one service. Please see <<token-propagation,Token Propagation in MicroProfile RestClient client filter>> for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:128
msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reasons you can not use the xref:security-openid-connect-web-authentication.adoc[Quarkus OpenId Connect extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:135
#, fuzzy, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.secret=secret\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=code\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:138
msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:139
#, no-wrap
msgid "Grant scopes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:143
msgid "You may need to request that a specific set of scopes is associated with an issued access token.  Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:144
#, no-wrap
msgid "Use OidcClient directly"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:147
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:153
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:193
#, no-wrap
msgid ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
msgstr ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:156
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"
msgstr ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:159
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:198
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"
msgstr ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:162
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClient client;\n"
msgstr ""
"    @Inject\n"
"    OidcClient client;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:164
#, no-wrap
msgid "    volatile Tokens currentTokens;\n"
msgstr "    volatile Tokens currentTokens;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:169
#, fuzzy, no-wrap
#| msgid ""
#| "    @PostConstruct\n"
#| "    public init() {\n"
#| "        currentTokens = client.getTokens().await().indefinitely();\n"
#| "    }\n"
msgid ""
"    @PostConstruct\n"
"    public void init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""
"    @PostConstruct\n"
"    public init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:172
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
msgstr ""
"    @GET\n"
"    public String getResponse() {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:182
#, fuzzy, no-wrap
#| msgid ""
#| "        Tokens tokens = currentTokens;\n"
#| "        if (tokens.isAccessTokenExpired()) {\n"
#| "            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
#| "            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
#| "            currentTokens = tokens;\n"
#| "        } \n"
#| "        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
#| "    }\n"
#| "}\n"
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // Use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:184
#, fuzzy, no-wrap
#| msgid "Use injected Tokens"
msgid "Inject Tokens"
msgstr "注入されたトークンを使用する"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:187
msgid "You can inject `Tokens` which uses `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:195
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:467
#, fuzzy, no-wrap
#| msgid ""
#| "import io.quarkus.oidc.client.OidcClient;\n"
#| "import io.quarkus.oidc.client.Tokens;\n"
msgid "import io.quarkus.oidc.client.Tokens;\n"
msgstr ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:200
#, fuzzy, no-wrap
#| msgid ""
#| "    @Inject\n"
#| "    Tokens tokens;\n"
msgid "    @Inject Tokens tokens;\n"
msgstr ""
"    @Inject\n"
"    Tokens tokens;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:208
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        //  Get the access token which may have been refreshed.\n"
"        String accessToken = tokens.getAccessToken();\n"
"        // Use the access token to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:210
#, fuzzy, no-wrap
#| msgid "OidcClients"
msgid "Use OidcClients"
msgstr "OidcClients"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:213
#, fuzzy
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` は、 `OidcClient` のコンテナです。デフォルトの `OidcClient` (上記のように直接注入することも可能です) と名前付きクライアントを含み、このように設定することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:217
#, no-wrap
msgid "quarkus.oidc-client.client-enabled=false\n"
msgstr "quarkus.oidc-client.client-enabled=false\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:221
#, no-wrap
msgid ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:224
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:230
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:257
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:288
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:326
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:233
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:236
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:264
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:297
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:329
#, no-wrap
msgid ""
"@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:239
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:300
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:246
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:251
#, fuzzy
#| msgid "If you also use link:security-openid-connect-multitenancy[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "link:security-openid-connect-multitenancy[OIDC マルチテナンシーを] 使用し、各 OIDC テナントが独自の関連する `OidcClient` を持っている場合は、 Vert.x `RoutingContext` `tenantId` 属性を例えば次のように使用することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:261
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:269
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:278
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:282
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:292
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:294
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:312
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
"        cfg.setClientId(\"quarkus\");\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(config);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:315
#, fuzzy, no-wrap
#| msgid ""
#| "    @Inject\n"
#| "    OidcClient client;\n"
msgid "Inject named OidcClient and Tokens"
msgstr ""
"    @Inject\n"
"    OidcClient client;\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:318
msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:322
#, no-wrap
msgid "package io.quarkus.oidc.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:333
#, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    OidcClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:339
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        // use client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:342
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:349
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"@RequestScoped\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:353
#, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    Tokens tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:359
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:480
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:362
#, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:365
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:406
#, fuzzy
#| msgid "Add the following dependencies to your test project:"
msgid "Add the following Maven Dependency:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:372
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:375
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:416
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:377
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:379
msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<oidc-client-filter, Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:381
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread and it currently can only be registered with `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:388
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:393
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:397
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<String> getUserName();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:400
msgid "`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:403
#, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:413
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-filter</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:418
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。このフィルターは、`OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:420
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、`quarkus.oidc-client.early-tokens-acquisition=false` でトークンの取得を遅延させるべきです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:422
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:427
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:432
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:436
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:454
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:779
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:796
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:840
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:857
#, no-wrap
msgid ""
"    @GET\n"
"    String getUserName();\n"
"}\n"
msgstr ""
"    @GET\n"
"    String getUserName();\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:439
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:512
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:781
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:842
msgid "or"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:445
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:450
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:457
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:459
msgid "`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:460
#, no-wrap
msgid "Use Custom RestClient ClientFilter"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:463
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:471
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:474
#, no-wrap
msgid ""
"    @Inject\n"
"    Tokens tokens;\n"
msgstr ""
"    @Inject\n"
"    Tokens tokens;\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:483
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:485
msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:487
#, no-wrap
msgid "Refreshing Access Tokens"
msgstr "アクセストークンの更新"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:491
#, fuzzy
#| msgid "Both `OidcClientRequestFilter` and `Tokens` producer will refresh the current expired access token if the refresh token is available.  Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgid "`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.  Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr "`OidcClientRequestFilter` と `Tokens` の両プロデューサーは、リフレッシュトークンが利用可能な場合、現在の期限切れアクセストークンをリフレッシュします。さらに、 `quarkus.oidc-client.refresh-token-time-skew` プロパティは、HTTP 401 エラーの原因となる期限切れ間近のアクセストークンの送信を避けるために、アクセストークンのリフレッシュを先取りして行うことができます。例えば、このプロパティが `3S` に設定されていて、アクセストークンが3秒以内に期限切れになる場合、このトークンは自動的にリフレッシュされます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:493
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr "アクセストークンの更新が必要なのにリフレッシュトークンがない場合は、 `client_credentials` のように設定されたグラントを使って新しいトークンの取得を試みます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:495
msgid "Please note that some OpenId Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
msgstr "OpenId Connect Providers の中には、 `client_credentials` グラントレスポンスでリフレッシュトークンを返さないものがありますのでご注意ください。例えば、Keycloak 12以降、 `client_credentials` ではデフォルトでリフレッシュ・トークンが返されません。また、プロバイダによっては、リフレッシュ・トークンの使用回数が制限されている場合があります。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:497
#, no-wrap
msgid "OidcClient Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:501
msgid "`OidcClient` has to authenticate to the OpenId Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` は、 `client_credentials` やその他のグラントリクエストを成功させるために OpenId Connect Provider に認証する必要があります。 link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC クライアント認証] オプションはすべてサポートされています。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:503
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:509
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:518
#, fuzzy, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.secret=mysecret\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:521
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:526
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:558
#, fuzzy, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.secret=secret\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:531
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentails returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:534
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:541
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:544
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:550
#, fuzzy, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:553
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:563
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:566
#, fuzzy
#| msgid "`private_key_jwt` with the PEM key file:"
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` with the PEM key file:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:572
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:601
#, fuzzy, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:575
#, fuzzy
#| msgid "`private_key_jwt` with the key store file:"
msgid "`private_key_jwt` with the key store file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` PEMキーストアファイル有:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:583
#, fuzzy, no-wrap
#| msgid ""
#| "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#| "quarkus.oidc-client.client-id=quarkus-app\n"
#| "quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
#| "quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
#| "quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
#| "quarkus.oidc-client.credentials.jwt.key-id=mykey\n"
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
"quarkus.oidc-client.credentials.jwt.key-id=mykey\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:586
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc-client.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:589
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:590
#, no-wrap
msgid "Additional JWT Authentication options"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:593
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier and audience can be customized, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:597
#, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:606
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenId Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc-client.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc-client.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:609
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc-client.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:612
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc-client.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:615
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:880
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:618
msgid "Start by adding the following dependencies to your test project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:631
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>org.awaitility</groupId>\n"
"    <artifactId>awaitility</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:634
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:637
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:645
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:648
msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "Wiremockベースの `QuarkusTestResourceLifecycleManager` を例えば以下のように書きます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:651
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:654
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:657
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:661
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
"import com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:663
#, no-wrap
msgid "import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:666
#, no-wrap
msgid ""
"public class KeycloakRealmResourceManager implements QuarkusTestResourceLifecycleManager {\n"
"    private WireMockServer server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:669
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
msgstr ""
"    @Override\n"
"    public Map<String, String> start() {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:672
#, no-wrap
msgid ""
"        server = new WireMockServer(wireMockConfig().dynamicPort().useChunkedTransferEncoding(ChunkedEncodingPolicy.NEVER));\n"
"        server.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:687
#, no-wrap
msgid ""
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=password&username=alice&password=alice\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_1\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=refresh_token&refresh_token=refresh_token_1\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_2\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:693
#, no-wrap
msgid ""
"        Map<String, String> conf = new HashMap<>();\n"
"        conf.put(\"keycloak.url\", server.baseUrl());\n"
"        return conf;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:702
#, no-wrap
msgid ""
"    @Override\n"
"    public synchronized void stop() {\n"
"        if (server != null) {\n"
"            server.stop();\n"
"            server = null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:705
msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:707
msgid "Set `application.properties`, for example:"
msgstr "`application.properties` を次のように設定します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:719
#, no-wrap
msgid ""
"# Use 'keycloak.url' property set by the test KeycloakRealmResourceManager\n"
"quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"quarkus.oidc-client.token-path=/tokens\n"
"quarkus.oidc-client.client-id=quarkus-service-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:722
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr "そして最後にテストコードを書きます。上記の Wiremock ベースのリソースがある場合、最初のテスト起動では `access_token_1` アクセストークンが返却されますが、このアクセストークンは 4 秒で期限切れになります。 `awaitility` を使用して約 5 秒間待つと、次のテスト起動時に `access_token_2` アクセストークンが返され、期限切れの `access_token_1` アクセストークンがリフレッシュされたことが確認できます。"

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:723
#, no-wrap
msgid "Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:726
msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-openid-connect#integration-testing-keycloak.adoc[OpenId Connect Bearer Token Integration testing] `Keycloak` section."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:727
#, fuzzy, no-wrap
#| msgid "How to check the errors in the logs"
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:730
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:735
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:738
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:743
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:746
#, no-wrap
msgid "Token Propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:751
msgid "The `quarkus-oidc-token-propagation` extension provides two JAX-RS `javax.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.  `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-openid-connect.adoc[Bearer] token present in the current active request or the token acquired from the xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow], as the HTTP `Authorization` header's `Bearer` scheme value.  The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:753
msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:755
msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:757
msgid "Additionally, a complex application may need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or a completely different set of scopes to access `Service B`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:759
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:760
#, fuzzy, no-wrap
#| msgid "AccessTokenRequestFilter"
msgid "RestClient AccessTokenRequestFilter"
msgstr "AccessTokenRequestFilter"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:763
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` は、すべてのトークンをStringとして扱うため、JWTトークンと不透明なトークンの両方を扱うことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:765
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:770
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:775
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:836
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:787
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:792
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:799
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:800
#, no-wrap
msgid "Exchange Token Before Propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:803
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenId Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:811
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=exchange\n"
"quarkus.oidc-client.grant-options.exchange.audience=quarkus-app-exchange\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:813
#, no-wrap
msgid "quarkus.oidc-token-propagation.exchange-token=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:816
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenId Connect Provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:818
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:819
#, fuzzy, no-wrap
#| msgid "JsonWebTokenRequestFilter"
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "JsonWebTokenRequestFilter"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:822
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenId Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:824
#, fuzzy
#| msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implemementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr "`JsonWebTokenRequestFilter` は、 `Service A` の実装が、注入された `org.eclipse.microprofile.jwt.JsonWebToken` を新しい `issuer` と `audience` のクレーム値で更新し、更新されたトークンを新しい署名で再度保護することを容易にします。唯一の難しいステップは、 `Service A` に署名鍵を持たせることです。署名鍵は、安全なファイルシステムまたは Vault などのリモートの安全なストレージからプロビジョニングする必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:826
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:831
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:848
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:853
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(JsonWebTokenTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(JsonWebTokenTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:860
#, fuzzy
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter` と `quarkus.oidc-token-propagation.json-web-token` の両方のプロパティが `true` に設定されている場合、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:861
#, no-wrap
msgid "Update Token Before Propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:864
msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:875
#, no-wrap
msgid ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"
msgstr ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:878
msgid "As already noted above, please use `AccessTokenRequestFilter` if you work with Keycloak or OpenId Connect Provider which supports a Token Exchange protocol."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:884
#, fuzzy
#| msgid "You can generate the tokens as described in link:security-openid-connect#integration-testing[OpenId Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgid "You can generate the tokens as described in xref:security-openid-connect.adoc#integration-testing[OpenId Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "link:security-openid-connect#integration-testing[OpenId Connect Bearer Token Integration testing]のセクションで説明したように、トークンを生成することができます。RESTテストエンドポイントを準備します。注入されたMP RESTクライアントを使用するテストフロントエンドエンドポイントは、登録されたトークン伝搬フィルターを使用して、ダウンストリームエンドポイントで呼び出すことができます。例えば、 `main` Quarkusリポジトリの `integration-tests/oidc-token-propagation` を参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:885
#, no-wrap
msgid "References"
msgstr "リファレンス"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:888
#, fuzzy
#| msgid "link:security[Quarkus Security]"
msgid "xref:security.adoc[Quarkus Security]"
msgstr "link:security[Quarkus Security]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:889
msgid "xref:security-openid-connect.adoc[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:889
msgid "xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr ""

#~ msgid "In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
#~ msgstr "どちらの場合も、 `OidcClient` はトークンのエンドポイントURLを自動検出し、それを使ってトークンを取得します。"

#~ msgid "See also the previous section about delaying the token acquisition in some cases."
#~ msgstr "トークンの取得を遅らせる場合があることについては、前のセクションも参照してください。"

#~ msgid "`client_secret_jwt`:"
#~ msgstr "`client_secret_jwt`:"

#~ msgid "`quarkus-oidc-token-propagation` extension provide `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` and `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` JAX-RS ClientRequestFilters which propagates the current link:security-openid-connect[Bearer] or link:security-openid-connect-web-authentication[Authorization Code Flow] access token as an HTTP `Authorization` `Bearer` scheme value."
#~ msgstr "`quarkus-oidc-token-propagation` エクステンションは、 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` と `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` JAX-RS ClientRequestFilters を提供します。これは、現在のベアラーまたは認証コードフローのアクセストークンを HTTP `Authorization` `Bearer` スキーム値として伝播します。"
