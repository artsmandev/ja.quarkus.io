# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-27 02:43+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:6
#, no-wrap
msgid "OpenID Connect Client and Token Propagation Quickstart"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:12
msgid "This quickstart demonstrates how to use `OpenID Connect Client Reactive Filter` to acquire and propagate access tokens as `HTTP Authorization Bearer` access tokens, alongside `OpenID Token Propagation Reactive Filter` which propagates the incoming `HTTP Authorization Bearer` access tokens."
msgstr "このクイックスタートでは、`OpenID Connect Client Reactive Filter` を使用して、アクセストークンを `HTTP Authorization Bearer` アクセストークンとして取得および伝播する方法と、受信した `HTTP Authorization Bearer` アクセストークンを伝播する `OpenID Token Propagation Reactive Filter` を使用する方法を示します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:14
#, fuzzy
msgid "Please check xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide] for all the information related to `Oidc Client` and `Token Propagation` support in Quarkus."
msgstr "Quarkus の `Oidc Client` および `Token Propagation` のサポートに関する詳細は、xref:security-openid-connect-client.adoc[OpenID Connect Client と Token Propagation のリファレンスガイド] を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:16
msgid "Please also read xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to protect your applications using Bearer Token Authorization."
msgstr "ベアラートークン認証を使用してアプリケーションを保護する必要がある場合は、xref:security-openid-connect.adoc[OpenID Connect を使用した、サービスアプリケーションの保護] ガイドもお読みください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:22
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:23
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:26
msgid "In this example, we will build an application which consists of two JAX-RS resources, `FrontendResource` and `ProtectedResource`. `FrontendResource` propagates access tokens to `ProtectedResource` and uses either `OpenID Connect Client Reactive Filter` to acquire a token first before propagating it or `OpenID Token Propagation Reactive Filter` to propagate the incoming, already existing access token."
msgstr "この例では、`FrontendResource` と `ProtectedResource` という 2 つの JAX-RS リソースで構成されるアプリケーションを作成します。FrontendResource` は、`OpenID Connect Client Reactive Filter` を使用してアクセストークンを取得してからそれを伝播するか、`OpenID Token Propagation Reactive Filter` を使用して受信した既存のアクセストークンを伝播して、アクセストークンを `ProtectedResource` に伝播します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:28
msgid "`FrontendResource` has 4 endpoints:"
msgstr "`FrontendResource` には 4 つのエンドポイントがあります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:30
msgid "`/frontend/user-name-with-oidc-client-token`"
msgstr "`/frontend/user-name-with-oidc-client-token`"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:31
msgid "`/frontend/admin-name-with-oidc-client-token`"
msgstr "`/frontend/admin-name-with-oidc-client-token`"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:32
msgid "`/frontend/user-name-with-propagated-token`"
msgstr "`/frontend/user-name-with-propagated-token`"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:33
msgid "`/frontend/admin-name-with-propagated-token`"
msgstr "`/frontend/admin-name-with-propagated-token`"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:35
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:268
#, fuzzy
msgid "`FrontendResource` will use REST Client with `OpenID Connect Client Reactive Filter` to acquire and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called. And it will use REST Client with `OpenID Connect Token Propagation Reactive Filter` to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr "`FrontendResource` は、`/frontend/user-name-with-oidc-client` または `/frontend/admin-name-with-oidc-client` が呼び出された場合、REST Client と `OpenID Connect Client Reactive Filter` を使用して、`ProtectedResource` へのアクセストークンを取得および伝播します。また、`/frontend/user-name-with-propagated-token` もしくは `/frontend/admin-name-with-propagated-token` が呼び出されると、REST Client と `OpenID Connect Token Propagation Reactive Filter` を使用して、`ProtectedResource` への現在の受信アクセストークンを伝播します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:37
msgid "`ProtecedResource` has 2 endpoints:"
msgstr "`ProtecedResource` には 2 つのエンドポイントがあります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:39
msgid "`/protected/user-name`"
msgstr "`/protected/user-name`"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:40
msgid "`/protected/admin-name`"
msgstr "`/protected/admin-name`"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:42
msgid "Both of these endpoints return the username extracted from the incoming access token which was propagated to `ProtectedResource` from `FrontendResource`. The only difference between these endpoints is that calling `/protected/user-name` is only allowed if the current access token has a `user` role and calling `/protected/admin-name` is only allowed if the current access token has an `admin` role."
msgstr "これらのエンドポイントはどちらも、`FrontendResource` から `ProtectedResource` に伝搬された受信アクセストークンから抽出したユーザー名を返します。これらのエンドポイントの唯一の違いは、`/protected/user-name` の呼び出しは、現在のアクセストークンが `user` ロールを持つ場合にのみ許可され、`/protected/admin-name` の呼び出しは、現在のアクセストークンが `admin` ロールを持つ場合のみ許可されることです。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:43
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:47
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:49
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:51
msgid "The solution is located in the `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-client-quickstart[directory]."
msgstr "ソリューションは `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-client-quickstart[ディレクトリー] にあります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:52
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:55
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:61
msgid "This command generates a Maven project, importing the `oidc`, `oidc-client-reactive-filter`, `oidc-client-reactive-filter` and `resteasy-reactive` extensions."
msgstr "このコマンドは、`oidc`、`oidc-client-reactive-filter`、`oidc-client-reactive-filter`、`resteasy-reactive` エクステンションをインポートして Maven プロジェクトを生成します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:63
msgid "If you already have your Quarkus project configured, you can add these extensions to your project by running the following command in your project base directory:"
msgstr "すでに Quarkus プロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトにこれらのエクステンションを追加できます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:68
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:70
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:88
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"

#. type: Block title
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:91
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:94
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc,oidc-client-reactive-filter,oidc-token-propagation-reactive,resteasy-reactive\")\n"
msgstr "implementation(\"io.quarkus:quarkus-oidc,oidc-client-reactive-filter,oidc-token-propagation-reactive,resteasy-reactive\")\n"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:96
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:99
msgid "Let's start by implementing `ProtectedResource`:"
msgstr "まずは `ProtectedResource` を実装することから始めましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:103
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:147
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:180
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:217
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:274
#, no-wrap
msgid "package org.acme.security.openid.connect.client;\n"
msgstr "package org.acme.security.openid.connect.client;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:109
#, fuzzy, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:112
#, fuzzy, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:114
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr "import org.eclipse.microprofile.jwt.JsonWebToken;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:118
#, fuzzy, no-wrap
msgid ""
"@Path(\"/protected\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:121
#, fuzzy, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken principal;\n"
msgstr ""
"    @Inject\n"
"    Tokens tokens;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:129
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    public Uni<String> userName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    public Uni<String> userName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:138
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    public Uni<String> adminName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    public Uni<String> adminName() {\n"
"        return Uni.createFrom().item(principal.getName());\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:141
msgid "As you can see `ProtectedResource` returns a name from both `userName()` and `adminName()` methods. The name is extracted from the current `JsonWebToken`."
msgstr "ご覧のとおり、`ProtectedResource` は `userName()` と `adminName()` の両方のメソッドから名前を返します。この名前は、現在の `JsonWebToken` から抽出されたものです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:143
#, fuzzy
msgid "Next let's add a REST Client with `OpenID Connect Client Reactive Filter` and another REST Client with `OpenID Connect Token Propagation Filter`. `FrontendResource` will use these two clients to call `ProtectedResource`:"
msgstr "次に、`OpenID Connect Client Reactive Filter` を持つ REST Client と、`OpenID Connect Token Propagation Filter` を持つ REST Client を追加します。`FrontendResource` はこの 2 つのクライアントを使用して、`ProtectedResource` を呼び出します:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:151
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:184
#, fuzzy, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:154
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:187
#, fuzzy, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:157
#, fuzzy, no-wrap
msgid ""
"import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:162
#, fuzzy, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface RestClientWithOidcClientFilter {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:167
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:200
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    Uni<String> getUserName();\n"
msgstr ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"userName\")\n"
"    Uni<String> getUserName();\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:173
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:206
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    Uni<String> getAdminName();\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Produces(\"text/plain\")\n"
"    @Path(\"adminName\")\n"
"    Uni<String> getAdminName();\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:176
#, fuzzy
msgid "where `RestClientWithOidcClientFilter` will depend on `OidcClientRequestReactiveFilter` to acquire and propagate the tokens and"
msgstr "ここで、`ProtectedResourceOidcClientFilter` は `OidcClientRequestReactiveFilter` に依存してトークンを取得および伝播します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:190
#, no-wrap
msgid ""
"import io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""
"import io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:195
#, fuzzy, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface RestClientWithTokenPropagationFilter {\n"
msgstr ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:209
#, fuzzy
msgid "where `RestClientWithTokenPropagationFilter` will depend on `AccessTokenRequestReactiveFilter` to propagate the incoming, already existing tokens."
msgstr "ここで、`ProtectedResourceTokenPropagationFilter` は `AccessTokenRequestReactiveFilter` に依存して、受信した既存トークンを伝播します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:211
#, fuzzy
msgid "Note that both `RestClientWithOidcClientFilter` and `RestClientWithTokenPropagationFilter` interfaces are identical - the reason behind it is that combining `OidcClientRequestReactiveFilter` and `AccessTokenRequestReactiveFilter` on the same REST Client will cause side effects as both filters can interfere with other, for example, `OidcClientRequestReactiveFilter` may override the token propagated by `AccessTokenRequestReactiveFilter` or `AccessTokenRequestReactiveFilter` can fail if it is called when no token is available to propagate and `OidcClientRequestReactiveFilter` is expected to acquire a new token instead."
msgstr "ProtectedResourceOidcClientFilter` と `ProtectedResourceTokenPropagationFilter` の両インターフェイスは同一である点に注意してください。その理由として、同じ REST クライアント上で `OidcClientRequestReactiveFilter` と `AccessTokenRequestReactiveFilter` を組み合わせると、双方のフィルターが互いに干渉し合って副作用が生じることが挙げられます。たとえば、`OidcClientRequestReactiveFilter` は `AccessTokenRequestReactiveFilter` によって伝播されたトークンをオーバーライドする可能性があります。また、伝播できるトークンがなく、`OidcClientRequestReactiveFilter` が代わりに新規トークンを取得すると想定されている場合、`AccessTokenRequestReactiveFilter` は失敗する可能性があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:213
msgid "Now let's complete creating the application with adding `FrontendResource`:"
msgstr "それでは、`FrontendResource` を追加して、アプリケーションの作成を完了しましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:222
#, fuzzy, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:224
#, fuzzy, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:226
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr "import io.smallrye.mutiny.Uni;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:232
#, fuzzy, no-wrap
msgid ""
"@Path(\"/frontend\")\n"
"public class FrontendResource {\n"
"    @Inject\n"
"    @RestClient\n"
"    RestClientWithOidcClientFilter restClientWithOidcClientFilter;\n"
msgstr ""
"@Path(\"/frontend\")\n"
"public class FrontendResource {\n"
"    @Inject\n"
"    @RestClient\n"
"    ProtectedResourceOidcClientFilter protectedResourceOidcClientFilter;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:236
#, fuzzy, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    RestClientWithTokenPropagationFilter restClientWithTokenPropagationFilter;\n"
msgstr ""
"    @Inject\n"
"    @RestClient\n"
"    ProtectedResourceTokenPropagationFilter protectedResourceTokenPropagationFilter;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:243
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"user-name-with-oidc-client-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getUserNameWithOidcClientToken() {\n"
"        return restClientWithOidcClientFilter.getUserName();\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @Path(\"user-name-with-oidc-client-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getUserNameWithOidcClientToken() {\n"
"        return protectedResourceOidcClientFilter.getUserName();\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:250
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"admin-name-with-oidc-client-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getAdminNameWithOidcClientToken() {\n"
"\t    return restClientWithOidcClientFilter.getAdminName();\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @Path(\"admin-name-with-oidc-client-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getAdminNameWithOidcClientToken() {\n"
"\t    return protectedResourceOidcClientFilter.getAdminName();\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:257
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"user-name-with-propagated-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getUserNameWithPropagatedToken() {\n"
"        return restClientWithTokenPropagationFilter.getUserName();\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @Path(\"user-name-with-propagated-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getUserNameWithPropagatedToken() {\n"
"        return protectedResourceTokenPropagationFilter.getUserName();\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:265
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"admin-name-with-propagated-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getAdminNameWithPropagatedToken() {\n"
"        return restClientWithTokenPropagationFilter.getAdminName();\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Path(\"admin-name-with-propagated-token\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> getAdminNameWithPropagatedToken() {\n"
"        return protectedResourceTokenPropagationFilter.getAdminName();\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:270
#, fuzzy
msgid "Finally, let's add a JAX-RS `ExceptionMapper`:"
msgstr "最後に、JAX-RS の `ExceptionMapper` を追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:278
#, fuzzy, no-wrap
msgid ""
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.ext.ExceptionMapper;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""
"import javax.inject.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:280
#, no-wrap
msgid "import org.jboss.resteasy.reactive.ClientWebApplicationException;\n"
msgstr "import org.jboss.resteasy.reactive.ClientWebApplicationException;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:283
#, no-wrap
msgid ""
"@Provider\n"
"public class FrontendExceptionMapper implements ExceptionMapper<ClientWebApplicationException> {\n"
msgstr ""
"@Provider\n"
"public class FrontendExceptionMapper implements ExceptionMapper<ClientWebApplicationException> {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:288
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Response toResponse(ClientWebApplicationException t) {\n"
"\t\treturn Response.status(t.getResponse().getStatus()).build();\n"
"\t}\n"
msgstr ""
"\t@Override\n"
"\tpublic Response toResponse(ClientWebApplicationException t) {\n"
"\t\treturn Response.status(t.getResponse().getStatus()).build();\n"
"\t}\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:290
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:293
msgid "This exception mapper is only added to verify during the tests that `ProtectedResource` returns `403` when the token has no expected role. Without this mapper `RESTEasy Reactive` will correctly convert the exceptions which will escape from REST Client calls to `500` to avoid leaking the information from the downstream resources such as `ProtectedResource` but in the tests it will not be possible to assert that `500` is in fact caused by an authorization exception as opposed to some internal error."
msgstr "この例外マッパーは、トークンに期待されるロールがない場合に `ProtectedResource` が 403 を返すことをテスト中に検証するためにのみ追加されます。このマッパーがないと、`RESTEasy Reactive` は、REST クライアント呼び出しからエスケープされる例外を `500` に正しく変換して、`ProtectedResource` などのダウンストリームリソースからの情報漏えいを回避しますが、テストでは `500` が実際は内部エラーではなく、認可例外が原因であることをアサートすることはできません。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:294
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:297
msgid "We have prepared the code, and now let's configure the application:"
msgstr "コードの準備ができたので、次はアプリケーションを設定します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:301
#, no-wrap
msgid "# Configure OIDC\n"
msgstr "# Configure OIDC\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:305
#, fuzzy, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
"quarkus.oidc.credentials.secret=secret\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:308
#, no-wrap
msgid ""
"# Tell Dev Services for Keycloak to import the realm file\n"
"# This property is not effective when running the application in JVM or Native modes but only in dev and test modes.\n"
msgstr ""
"# Tell Dev Services for Keycloak to import the realm file\n"
"# This property is not effective when running the application in JVM or Native modes but only in dev and test modes.\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:310
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:312
#, no-wrap
msgid "# Configure OIDC Client\n"
msgstr "# Configure OIDC Client\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:319
#, fuzzy, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${quarkus.oidc.auth-server-url}\n"
"quarkus.oidc-client.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:321
#, no-wrap
msgid "# Configure REST Clients\n"
msgstr "# Configure REST Clients\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:325
#, no-wrap
msgid ""
"%prod.port=8080\n"
"%dev.port=8080\n"
"%test.port=8081\n"
msgstr ""
"%prod.port=8080\n"
"%dev.port=8080\n"
"%test.port=8081\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:328
#, fuzzy, no-wrap
msgid ""
"org.acme.security.openid.connect.client.RestClientWithOidcClientFilter/mp-rest/url=http://localhost:${port}/protected\n"
"org.acme.security.openid.connect.client.RestClientWithTokenPropagationFilter/mp-rest/url=http://localhost:${port}/protected\n"
msgstr ""
"org.acme.security.openid.connect.client.ProtectedResourceOidcClientFilter/mp-rest/url=http://localhost:${port}/protected\n"
"org.acme.security.openid.connect.client.ProtectedResourceTokenPropagationFilter/mp-rest/url=http://localhost:${port}/protected\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:331
msgid "This configuration references Keycloak which will be used by `ProtectedResource` to verify the incoming access tokens and by `OidcClient` to get the tokens for a user `alice` using a `password` grant. Both RESTClients point to `ProtectedResource`'s HTTP address."
msgstr "この設定は Keycloak を参照します。この Keycloak は、受信アクセストークンを検証するために `ProtectedResource` によって使用され、`password` グラントを使用してユーザー `alice` のトークンを取得するために `OidcClient` によって使用されます。どちらの RESTClient も `ProtectedResource` の HTTP アドレスを指しています。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:333
msgid "Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` will launch a container for you when the application is run in dev or test modes. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information."
msgstr "`quarkus.oidc.auth-server-url` に `%prod.` プロファイル接頭辞を追加すると、アプリケーションが開発モードまたはテストモードで実行されているときに、`Dev Services for Keycloak` がコンテナーを起動するようになります。詳細については、以下の <<keycloak-dev-mode, 開発モードでのアプリケーションの実行>> セクションを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:334
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:337
msgid "Do not start the Keycloak server when you run the application in dev mode or test modes - `Dev Services for Keycloak` will launch a container. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information. Make sure to put the {quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath (`target/classes` directory) so that it gets imported automatically when running in dev mode - unless you have already built a {quickstarts-tree-url}/security-openid-connect-quickstart[complete solution] in which case this realm file will be added to the classpath during the build."
msgstr "アプリケーションを開発モードまたはテストモードで実行しているときは、Keycloak サーバーを起動しないでください。`Dev Services for Keycloak` はコンテナーを起動します。詳細については、以下の <<keycloak-dev-mode, 開発モードでのアプリケーションの実行>> セクションを参照してください。{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[レルム設定ファイル] をクラスパス (`target/classes` ディレクトリー) に配置して、開発モードで実行しているときに自動的にインポートされるようにします (すでに {quickstarts-tree-url}/security-openid-connect-quickstart[完全なソリューション] をビルドしている場合を除く (このレルムファイルはビルド時にクラスパスに追加されます))。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:339
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:343
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:346
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、`keycloak.version` は `17.0.0` 以上に設定する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:348
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "http://localhost:8180[localhost:8180] で Keycloak サーバーにアクセスできるはずです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:350
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:352
msgid "Import the {quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "新しいレルムを作成するには、 {quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[レルム設定ファイル] をインポートします。 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムを作成する] 方法について詳しくはKeycloakのドキュメントを参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:354
msgid "This `quarkus` realm file will add a `frontend` client, and `alice` and `admin` users. `alice` has a `user` role, `admin` - both `user` and `admin` roles."
msgstr "この `quarkus` レルムファイルでは、`frontend` クライアントと、`alice` および `admin` ユーザーが追加されます。`alice` は `user` ロールを持ち、`admin` は `user` と `admin` の両方のロールを持ちます。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:356
#, no-wrap
msgid "Running the Application in Dev mode"
msgstr "開発モードでのアプリケーションの実行"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:359
msgid "To run the application in a dev mode, use:"
msgstr "アプリケーションを開発モードで実行するには、次を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:363
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] will launch a Keycloak container and import a `quarkus-realm.json`."
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] は、Keycloak コンテナーを起動し、`quarkus-realm.json` をインポートします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:365
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev[/q/dev] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
msgstr "http://localhost:8080/q/dev[/q/dev] で入手可能な xref:dev-ui.adoc[Dev UI] を開き、`OpenID Connect` `Dev UI` の `Provider: Keycloak` リンクをクリックします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:367
msgid "You will be asked to log in into a `Single Page Application` provided by `OpenID Connect Dev UI`:"
msgstr "`OpenID Connect Dev UI` が提供する `Single Page Application` へのログインを求められます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:369
msgid "Login as `alice` (password: `alice`) who has a `user` role"
msgstr "`user` のロールを持つ `alice` (パスワード: `alice`) としてログインします"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:370
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:373
msgid "accessing `/frontend/user-name-with-propagated-token` will return `200`"
msgstr "`/frontend/user-name-with-propagated-token` にアクセスすると `200` が返されます"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:371
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `403`"
msgstr "`/frontend/admin-name-with-propagated-token` にアクセスすると `403` が返されます"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:372
msgid "Logout and login as `admin` (password: `admin`) who has both `admin` and `user` roles"
msgstr "ログアウトし、`admin` と `user` ロールの両方を持つ `admin` (パスワード: `admin`) としててログインします"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:374
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `200`"
msgstr "`/frontend/admin-name-with-propagated-token` にアクセスすると `200` が返されます"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:376
msgid "In this case you are testing that `FrontendResource` can propagate the access tokens acquired by `OpenID Connect Dev UI`."
msgstr "この場合、`FrontendResource` が `OpenID Connect Dev UI` により取得されたアクセストークンを伝搬できるかどうかをテストしています。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:377
#, no-wrap
msgid "Running the Application in JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:380
msgid "When you're done playing with the `dev` mode\" you can run it as a standard Java application."
msgstr "「`dev` モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:382
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:386
msgid "Then run it:"
msgstr "次に、以下を実行してください。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:390
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr "java -jar target/quarkus-app/quarkus-run.jar\n"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:392
#, no-wrap
msgid "Running the Application in Native Mode"
msgstr "ネイティブモードでのアプリケーションの実行"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:395
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:399
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:402
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:406
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:410
#, no-wrap
msgid "./target/security-openid-connect-quickstart-1.0.0-SNAPSHOT-runner\n"
msgstr "./target/security-openid-connect-quickstart-1.0.0-SNAPSHOT-runner\n"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:412
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:415
msgid "See <<keycloak-dev-mode, Running the Application in Dev mode>> section above about testing your application in dev mode."
msgstr "開発モードでのアプリケーションのテストについては、上記の <<keycloak-dev-mode, 開発モードでのアプリケーションの実行>> セクションを参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:417
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "`curl` を使用して、JVM またはネイティブモードで起動したアプリケーションをテストできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:419
msgid "Obtain an access token for `alice`:"
msgstr "`alice` のアクセストークンを取得します:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:428
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:431
msgid "Now use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "このトークンを使用して、`/frontend/user-name-with-propagated-token` と `/frontend/admin-name-with-propagated-token` を呼び出します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:437
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:469
#, fuzzy, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/user-name-with-propagated-token \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""
"curl -v -X GET \\\n"
"  http://localhost:8080/frontend/user-name-with-propagated-token` \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:440
msgid "will return `200` status code and the name `alice` while"
msgstr "ステータスコード `200` と名前 `alice` を返します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:446
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:478
#, fuzzy, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/admin-name-with-propagated-token \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""
"curl -v -X GET \\\n"
"  http://localhost:8080/frontend/admin-name-with-propagated-token` \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:449
msgid "will return `403` - recall that `alice` only has a `user` role."
msgstr "`403` を返します - `alice` には `user` ロールしかないことを思い出してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:451
msgid "Next obtain an access token for `admin`:"
msgstr "次に `admin` 用のアクセストークンを取得します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:460
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:463
msgid "and use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "このトークンを使用して、`/frontend/user-name-with-propagated-token` と `/frontend/admin-name-with-propagated-token` を呼び出します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:472
msgid "will return `200` status code and the name `admin`, and"
msgstr "ステータスコード `200` と名前 `alice` を返します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:481
msgid "will also return `200` status code and the name `admin`, as `admin` has both `user` and `admin` roles."
msgstr "`admin` には `user` ロールと `admin` ロールの両方があるため、`200` ステータスコードと名前 `admin` を返します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:484
#, fuzzy
msgid "Now let's check `FrontendResource` methods which do not propagate the existing tokens but use `OidcClient` to acquire and propagate the tokens. You have seen that `OidcClient` is configured to acquire the tokens for the `alice` user, so:"
msgstr "ここで、既存のトークンは伝播しないが、`OidcClient` を使用してトークンを取得および伝播する `FrontendResource` メソッドを見てみましょう。`OidcClient` は `alice` ユーザーのトークンを取得するように設定されています。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:489
#, fuzzy, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/user-name-with-oidc-client-token\n"
msgstr ""
"curl -v -X GET \\\n"
"  http://localhost:8080/frontend/user-name-with-oidc-client`\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:492
msgid "will return `200` status code and the name `alice`, but"
msgstr "ステータスコード `200` と名前 `alice` を返します"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:497
#, fuzzy, no-wrap
msgid ""
"curl -i -X GET \\\n"
"  http://localhost:8080/frontend/admin-name-with-oidc-client-token\n"
msgstr ""
"curl -v -X GET \\\n"
"  http://localhost:8080/frontend/admin-name-with-oidc-client`\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:500
msgid "will return `403` status code."
msgstr "ステータスコード `403` を返します。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:501
#, no-wrap
msgid "References"
msgstr "リファレンス"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:504
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:505
msgid "xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:505
#, fuzzy
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security.adoc[Quarkus Security]"

#~ msgid ""
#~ "import javax.inject.Inject;\n"
#~ "import javax.ws.rs.GET;\n"
#~ "import javax.ws.rs.Path;\n"
#~ "import javax.ws.rs.Produces;\n"
#~ "import javax.ws.rs.WebApplicationException;\n"
#~ msgstr ""
#~ "import javax.inject.Inject;\n"
#~ "import javax.ws.rs.GET;\n"
#~ "import javax.ws.rs.Path;\n"
#~ "import javax.ws.rs.Produces;\n"
#~ "import javax.ws.rs.WebApplicationException;\n"

#~ msgid "This guide explains how to use:"
#~ msgstr "このガイドでは以下の使い方を解説しています。"

#~ msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
#~ msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#~ msgid "OidcClient"
#~ msgstr "OidcClient"

#, fuzzy
#~ msgid "Add the following dependency:"
#~ msgstr "テストプロジェクトに以下の依存関係を追加します。"

#~ msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
#~ msgstr "`quarkus-oidc-client` エクステンションは、SmallRye Mutiny `Uni` および `Vert.xWebClient` を使用してトークンを取得および更新するために使用できるリアクティブな `io.quarkus.oidc.client.OidcClient` を提供します。"

#~ msgid "By default the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
#~ msgstr "デフォルトでは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` のパスを追加することで、トークンのエンドポイントアドレスが検出されます。"

#, fuzzy
#~ msgid "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#~ msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
#~ msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、トークンエンドポイントのアドレスを相対パスの値で設定することができます。例:"

#, fuzzy
#~ msgid "quarkus.oidc-client.token-path=http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#, fuzzy
#~ msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
#~ msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#~ msgid "Client Credentials Grant"
#~ msgstr "クライアントクレデンシャル・グラント"

#~ msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
#~ msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#~ msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
#~ msgstr "`client_credentials` グラントにより、`quarkus.oidc-client.grant-options.client.<param-name>=<value>` を介してトークンリクエストに追加のパラメータを設定できます。 `audience` パラメータを使用して目的のトークン受信者を設定する方法は次のとおりです。"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "# 'client' is a shortcut for `client_credentials`\n"
#~ "quarkus.oidc-client.grant.type=client\n"
#~ "quarkus.oidc-client.grant-options.client.audience=https://example.com/api\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=password\n"
#~ "quarkus.oidc-client.grant-options.password.username=alice\n"
#~ "quarkus.oidc-client.grant-options.password.password=alice\n"

#~ msgid "Password Grant"
#~ msgstr "パスワード・グラント"

#~ msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
#~ msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=refresh\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"
#~ "quarkus.oidc-client.grant.type=code\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#~ msgid "One can use `OidcClient` directly as follows:"
#~ msgstr "以下のように `OidcClient` を直接使用することができます。"

#~ msgid ""
#~ "    @Inject\n"
#~ "    OidcClient client;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    OidcClient client;\n"

#~ msgid "    volatile Tokens currentTokens;\n"
#~ msgstr "    volatile Tokens currentTokens;\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    public String getResponse() {\n"

#, fuzzy
#~ msgid "import io.quarkus.oidc.client.Tokens;\n"
#~ msgstr ""
#~ "import io.quarkus.oidc.client.OidcClient;\n"
#~ "import io.quarkus.oidc.client.Tokens;\n"

#, fuzzy
#~ msgid "    @Inject Tokens tokens;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    Tokens tokens;\n"

#, fuzzy
#~ msgid "Use OidcClients"
#~ msgstr "OidcClient"

#~ msgid "quarkus.oidc-client.client-enabled=false\n"
#~ msgstr "quarkus.oidc-client.client-enabled=false\n"

#~ msgid ""
#~ "quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
#~ msgstr ""
#~ "quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#~ msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
#~ msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#~ msgid "If you need you can also create new `OidcClient` programmatically like this:"
#~ msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#, fuzzy
#~ msgid "Inject named OidcClient and Tokens"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    OidcClient client;\n"

#~ msgid ""
#~ "    @Override\n"
#~ "    public void filter(ClientRequestContext requestContext) throws IOException {\n"
#~ "        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @Override\n"
#~ "    public void filter(ClientRequestContext requestContext) throws IOException {\n"
#~ "        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
#~ "    }\n"
#~ "}\n"

#, fuzzy
#~ msgid "Add the following Maven Dependency:"
#~ msgstr "テストプロジェクトに以下の依存関係を追加します。"

#~ msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
#~ msgstr "`quarkus-oidc-client-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。このフィルターは、`OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#~ msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
#~ msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、`quarkus.oidc-client.early-tokens-acquisition=false` でトークンの取得を遅延させるべきです。"

#~ msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
#~ msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.client.filter.OidcClientFilter;\n"

#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@OidcClientFilter\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@OidcClientFilter\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    String getUserName();\n"
#~ "}\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    String getUserName();\n"
#~ "}\n"

#~ msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
#~ msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#~ msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
#~ msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#~ msgid ""
#~ "@Provider\n"
#~ "@Priority(Priorities.AUTHENTICATION)\n"
#~ "public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
#~ msgstr ""
#~ "@Provider\n"
#~ "@Priority(Priorities.AUTHENTICATION)\n"
#~ "public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"

#~ msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
#~ msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#~ msgid "Refreshing Access Tokens"
#~ msgstr "アクセストークンの更新"

#~ msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
#~ msgstr "アクセストークンの更新が必要なのにリフレッシュトークンがない場合は、 `client_credentials` のように設定されたグラントを使って新しいトークンの取得を試みます。"

#~ msgid "`client_secret_basic`:"
#~ msgstr "`client_secret_basic` ."

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=mysecret\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=mysecret\n"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=mysecret\n"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#~ msgid "`client_secret_post`:"
#~ msgstr "`client_secret_post`:"

#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post\n"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
#~ msgstr ""
#~ "quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
#~ "quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
#~ "quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post\n"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.auth-server-url=${apple.url}\n"
#~ "quarkus.oidc-client.client-id=${apple.client-id}\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post-jwt\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.secret=secret\n"

#, fuzzy
#~ msgid ""
#~ "quarkus.oidc-client.credentials.jwt.key-file=ecPrivateKey.pem\n"
#~ "quarkus.oidc-client.credentials.jwt.signature-algorithm=ES256\n"
#~ "quarkus.oidc-client.credentials.jwt.subject=${apple.subject}\n"
#~ "quarkus.oidc-client.credentials.jwt.issuer=${apple.issuer}\n"
#~ msgstr ""
#~ "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
#~ "quarkus.oidc-client.client-id=quarkus-app\n"
#~ "quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
#~ "quarkus.oidc-client.credentials.client-secret.method=post\n"

#~ msgid "Testing"
#~ msgstr "テスト"

#~ msgid "Wiremock"
#~ msgstr "Wiremock"

#~ msgid "Add the following dependencies to your test project:"
#~ msgstr "テストプロジェクトに以下の依存関係を追加します。"

#~ msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
#~ msgstr "Wiremockベースの `QuarkusTestResourceLifecycleManager` を例えば以下のように書きます。"

#~ msgid ""
#~ "    @Override\n"
#~ "    public Map<String, String> start() {\n"
#~ msgstr ""
#~ "    @Override\n"
#~ "    public Map<String, String> start() {\n"

#~ msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
#~ msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#~ msgid "Set `application.properties`, for example:"
#~ msgstr "`application.properties` を次のように設定します。"

#~ msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
#~ msgstr "そして最後にテストコードを書きます。上記の Wiremock ベースのリソースがある場合、最初のテスト起動では `access_token_1` アクセストークンが返却されますが、このアクセストークンは 4 秒で期限切れになります。 `awaitility` を使用して約 5 秒間待つと、次のテスト起動時に `access_token_2` アクセストークンが返され、期限切れの `access_token_1` アクセストークンがリフレッシュされたことが確認できます。"

#~ msgid "Keycloak"
#~ msgstr "Keycloak"

#~ msgid "How to check the errors in the logs"
#~ msgstr "ログでエラーを確認する方法"

#~ msgid "Token Propagation"
#~ msgstr "トークンの伝播"

#, fuzzy
#~ msgid "RestClient AccessTokenRequestFilter"
#~ msgstr "アクセストークンの更新"

#~ msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
#~ msgstr "`AccessTokenRequestFilter` は、すべてのトークンをStringとして扱うため、JWTトークンと不透明なトークンの両方を扱うことができます。"

#~ msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
#~ msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@AccessToken\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@AccessToken\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"

#~ msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
#~ msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#~ msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
#~ msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.JsonWebToken;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.JsonWebToken;\n"

#, fuzzy
#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@JsonWebToken\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@AccessToken\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#~ msgid ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"
#~ msgstr ""
#~ "import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
#~ "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
#~ "import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"

#, fuzzy
#~ msgid ""
#~ "@RegisterRestClient\n"
#~ "@RegisterProvider(JsonWebTokenRequestFilter.class)\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"
#~ msgstr ""
#~ "@RegisterRestClient\n"
#~ "@RegisterProvider(AccessTokenRequestFilter.class)\n"
#~ "@Path(\"/\")\n"
#~ "public interface ProtectedResourceService {\n"

#, fuzzy
#~ msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
#~ msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#~ msgid ""
#~ "quarkus.oidc-token-propagation.secure-json-web-token=true\n"
#~ "smallrye.jwt.sign.key.location=/privateKey.pem\n"
#~ "# Set a new issuer\n"
#~ "smallrye.jwt.new-token.issuer=http://frontend-resource\n"
#~ "# Set a new audience\n"
#~ "smallrye.jwt.new-token.audience=http://downstream-resource\n"
#~ "# Override the existing token issuer and audience claims if they are already set\n"
#~ "smallrye.jwt.new-token.override-matching-claims=true\n"
#~ msgstr ""
#~ "quarkus.oidc-token-propagation.secure-json-web-token=true\n"
#~ "smallrye.jwt.sign.key.location=/privateKey.pem\n"
#~ "# Set a new issuer\n"
#~ "smallrye.jwt.new-token.issuer=http://frontend-resource\n"
#~ "# Set a new audience\n"
#~ "smallrye.jwt.new-token.audience=http://downstream-resource\n"
#~ "# Override the existing token issuer and audience claims if they are already set\n"
#~ "smallrye.jwt.new-token.override-matching-claims=true\n"

#, fuzzy
#~ msgid "You can generate the tokens as described in xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
#~ msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#~ msgid "In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
#~ msgstr "どちらの場合も、 `OidcClient` はトークンのエンドポイントURLを自動検出し、それを使ってトークンを取得します。"

#~ msgid "See also the previous section about delaying the token acquisition in some cases."
#~ msgstr "トークンの取得を遅らせる場合があることについては、前のセクションも参照してください。"

#~ msgid "`client_secret_jwt`:"
#~ msgstr "`client_secret_jwt`:"
