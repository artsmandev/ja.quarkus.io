msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"The Quarkus extension for Kafka Streams allows for very fast turnaround times during development by supporting the Quarkus Dev Mode (e.g. via `./mvnw compile quarkus:dev`).\n"
"After changing the code of your Kafka Streams topology, the application will automatically be reloaded when the next input message arrives."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"A recommended development set-up is to have some producer which creates test messages on the processed topic(s) in fixed intervals, e.g. every second and observe the streaming application's output topic(s) using a tool such as `kafkacat`.\n"
"Using the dev mode, you'll instantly see messages on the output topic(s) as produced by the latest version of your streaming application when saving."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"In this guide, we are going to generate (random) temperature values in one component (named `generator`).\n"
"These values are associated to given weather stations and are written in a Kafka topic (`temperature-values`).\n"
"Another topic (`weather-stations`) contains just the main data about the weather stations themselves (id and name)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"The data can be examined by inspecting the output topic.\n"
"By exposing a Kafka Streams https://kafka.apache.org/22/documentation/streams/developer-guide/interactive-queries.html[interactive query],\n"
"the latest result for each weather station can alternatively be obtained via a simple REST query."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"First, we need a new project with the temperature value producer.\n"
"Create a new project with the following command:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-reactive-messaging-kafka` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"Create the `producer/src/main/java/org/acme/kafka/streams/producer/generator/ValuesGenerator.java` file,\n"
"with the following content:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"The two channels are mapped to Kafka topics using the Quarkus configuration file `application.properties`.\n"
"For that, add the following to the file `producer/src/main/resources/application.properties`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"This configures the Kafka bootstrap server, the two topics and the corresponding (de-)serializers.\n"
"More details about the different configuration options are available on the https://kafka.apache.org/documentation/#producerconfigs[Producer configuration] and https://kafka.apache.org/documentation/#consumerconfigs[Consumer configuration] section from the Kafka documentation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"With the producer application in place, it's time to implement the actual aggregator application,\n"
"which will run the Kafka Streams pipeline.\n"
"Create another project like so:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `kafka-streams` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"Let's begin the implementation of the stream processing application by creating\n"
"a few value objects for representing temperature measurements, weather stations and for keeping track of aggregated values."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"First, create the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/WeatherStation.java`,\n"
"representing a weather station, with the following content:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"Then the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/TemperatureMeasurement.java`,\n"
"representing temperature measurements for a given station:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"And finally `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/Aggregation.java`,\n"
"which will be used to keep track of the aggregated values while the events are processed in the streaming pipeline:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"Next, let's create the actual streaming query implementation itself in the `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/TopologyProducer.java` file.\n"
"All we need to do for that is to declare a CDI producer method which returns the Kafka Streams `Topology`;\n"
"the Quarkus extension will take care of configuring, starting and stopping the actual Kafka Streams engine."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"The Kafka Streams extension is configured via the Quarkus configuration file `application.properties`.\n"
"Create the file `aggregator/src/main/resources/application.properties` with the following contents:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"The options with the `quarkus.kafka-streams` prefix can be changed dynamically at application startup,\n"
"e.g. via environment variables or system properties.\n"
"`bootstrap-servers` and `application-server` are mapped to the Kafka Streams properties `bootstrap.servers` and `application.server`, respectively.\n"
"`topics` is specific to Quarkus: the application will wait for all the given topics to exist before launching the Kafka Streams engine.\n"
"This is to done to gracefully await the creation of topics that don't yet exist at application startup time."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid "Once you are ready to promote your application into production, consider changing the above configuration values. While `cache.max.bytes.buffering=10240` will move your records faster through the topology, the default value of `10485760` is more throughput-friendly. Also condider increasing `metadata.max.age.ms` from `500`, which will update cluster metadata quickly, but will generate a lot of redundant requests, to a value closer to the default of `300000`. A `commit.interval.ms` of `1000` is good for exactly-once processing, but might generate excessive load for  the default at-least-once processing with the default value of `30000`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"All the properties within the `kafka-streams` namespace are passed through as-is to the Kafka Streams engine.\n"
"Changing their values requires a rebuild of the application."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"Instead of running them directly on the host machine using the Quarkus dev mode,\n"
"we're going to package them into container images and launch them via Docker Compose.\n"
"This is done in order to demonstrate scaling the `aggregator` aggregation to multiple nodes later on."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"The `Dockerfile` created by Quarkus by default needs one adjustment for the `aggregator` application in order to run the Kafka Streams pipeline.\n"
"To do so, edit the file `aggregator/src/main/docker/Dockerfile.jvm` and replace the line `FROM fabric8/java-alpine-openjdk8-jre` with `FROM fabric8/java-centos-openjdk8-jdk`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"To launch all the containers, building the `producer` and `aggregator` container images,\n"
"run `docker-compose up --build`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"Now run an instance of the _debezium/tooling_ image, attaching to the same network all the other containers run in.\n"
"This image provides several useful tools such as _kafkacat_ and _httpie_:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"You should see new values arrive as the producer continues to emit temperature measurements,\n"
"each value on the outbound topic showing the minimum, maximum and average temperature values of the represented weather station."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"Subscribing to the `temperatures-aggregated` topic is a great way to react to any new temperature values.\n"
"It's a bit wasteful though if you're just interested in the latest aggregated value for a given weather station.\n"
"This is where Kafka Streams interactive queries shine:\n"
"they let you directly query the underlying state store of the pipeline for the value associated to a given key.\n"
"By exposing a simple REST endpoint which queries the state store,\n"
"the latest aggregation result can be retrieved without having to subscribe to any Kafka topic."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"Also create `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/WeatherStationData.java`,\n"
"which represents the actual aggregation result for a weather station:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"We now can add a simple REST endpoint (`aggregator/src/main/java/org/acme/kafka/streams/aggregator/rest/WeatherStationEndpoint.java`),\n"
"which invokes `getWeatherStationData()` and returns the data to the client:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"This will rebuild the `aggregator` container and restart its service.\n"
"Once that's done, you can invoke the service's REST API to obtain the temperature data for one of the existing stations.\n"
"To do so, you can use `httpie` in the tooling container launched before:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"A very interesting trait of Kafka Streams applications is that they can be scaled out,\n"
"i.e. the load and state can be distributed amongst multiple application instances running the same pipeline.\n"
"Each node will then contain a subset of the aggregation results,\n"
"but Kafka Streams provides you with https://kafka.apache.org/22/documentation/streams/developer-guide/interactive-queries.html#querying-remote-state-stores-for-the-entire-app[an API] to obtain the information which node is hosting a given key.\n"
"The application can then either fetch the data directly from the other instance, or simply point the client to the location of that other node."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"Also, the return type for `getMetaData()` must be defined\n"
"(`aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/PipelineMetadata.java`):"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"Now stop the `aggregator` service again and rebuild it.\n"
"Then let's spin up three instances of it:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"When invoking the REST API on any of the three instances, it might either be\n"
"that the aggregation for the requested weather station id is stored locally on the node receiving the query,\n"
"or it could be stored on one of the other two nodes."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"As the load balancer of Docker Compose will distribute requests to the `aggregator` service in a round-robin fashion,\n"
"we'll invoke the actual nodes directly.\n"
"The application exposes information about all the host names via REST:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"Retrieve the data from one of the three hosts shown in the response\n"
"(your actual host names will differ):"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"The Quarkus extension for Kafka Streams enables the execution of stream processing applications\n"
"natively via GraalVM without further configuration."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"To run both the `producer` and `aggregator` applications in native mode,\n"
"the Maven builds can be executed using `-Dnative`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"This is used by the Docker Compose file to use the correct `Dockerfile` when building the `producer` and `aggregator` images.\n"
"The Kafka Streams application can work with less than 50 MB RSS in native mode.\n"
"To do so, add the `Xmx` option to the program invocation in `aggregator/src/main/docker/Dockerfile.native`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"Now start Docker Compose as described above\n"
"(don't forget to rebuild the container images)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"If no topics are available, the `available_topics` key will not be present in the `data` field of the `Kafka Streams topics health check`.\n"
"As well as if no topics are missing, the `missing_topics` key will not be present in the `data` field of the `Kafka Streams topics health check`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid ""
"This guide has shown how you can build stream processing applications using Quarkus and the Kafka Streams APIs,\n"
"both in JVM and native modes.\n"
"For running your KStreams application in production, you could also add health checks and metrics for the data pipeline.\n"
"Refer to the Quarkus guides on xref:telemetry-micrometer.adoc[Micrometer], xref:smallrye-metrics.adoc[SmallRye Metrics], and xref:smallrye-health.adoc[SmallRye Health] to learn more."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/kafka-streams.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/kafka-streams.adoc:6
#, no-wrap
msgid "Using Apache Kafka Streams"
msgstr "Apache Kafka ストリームの使用"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:12
msgid "This guide demonstrates how your Quarkus application can utilize the Apache Kafka Streams API to implement stream processing applications based on Apache Kafka."
msgstr "このガイドでは、QuarkusアプリケーションがApache Kafka Streams APIを利用して、Apache Kafkaベースのストリーム処理アプリケーションを実装する方法を説明します。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka-streams.adoc:13
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:20
#, fuzzy
msgid "It is recommended, that you have read the link:{quickstarts-tree-url}/kafka-quickstart[Kafka quickstart] before."
msgstr "link:{quickstarts-tree-url}/kafka-quickstart[Kafkaのクイック] スタートを読んでおくことをお勧めします。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-streams.adoc:30
msgid "For the best development experience, we recommend applying the following configuration settings to your Kafka broker:"
msgstr "最高の開発環境を実現するために、以下の設定を Kafka ブローカーに適用することをお勧めします。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:37
msgid "Also specify the following settings in your Quarkus `application.properties`:"
msgstr "また、以下の設定をQuarkusの `application.properties`で指定します。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:45
msgid "Together, these settings will ensure that the application can very quickly reconnect to the broker after being restarted in dev mode."
msgstr "これらの設定を併用することで、アプリケーションを開発モードで再起動した後に、非常に迅速にブローカに再接続できるようになります。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/kafka-streams.adoc:47
#: upstream/_versions/main/guides/kafka-streams.adoc:809
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-streams.adoc:54
msgid "A second component (`aggregator`) reads from the two Kafka topics and processes them in a streaming pipeline:"
msgstr "2 つ目のコンポーネント ( `aggregator` ) は、2 つの Kafka トピックから読み込み、ストリーミングパイプラインで処理します。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-streams.adoc:56
msgid "the two topics are joined on weather station id"
msgstr "ウェザーステーション ID では、この2つのトピックが結合されています。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-streams.adoc:57
msgid "per weather station the min, max and average temperature is determined"
msgstr "各気象台ごとに最低、最高、平均気温が決定されます。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-streams.adoc:58
msgid "this aggregated data is written out to a third topic (`temperatures-aggregated`)"
msgstr "この集約されたデータは、第三のトピック ( `temperatures-aggregated` ) に書き出されます。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-streams.adoc:64
msgid "The overall architecture looks like so:"
msgstr "全体的なアーキテクチャはこんな感じです。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka-streams.adoc:67
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-streams.adoc:73
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-streams.adoc:75
#, fuzzy
msgid "The solution is located in the `kafka-streams-quickstart` link:{quickstarts-tree-url}/kafka-streams-quickstart[directory]."
msgstr "ソリューションは `kafka-streams-quickstart` link:{quickstarts-tree-url}/kafka-streams-quickstart[ディレクトリに] あります。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka-streams.adoc:76
#, no-wrap
msgid "Creating the Producer Maven Project"
msgstr "Producer Maven プロジェクトの作成"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-streams.adoc:87
msgid "This command generates a Maven project, importing the Reactive Messaging and Kafka connector extensions."
msgstr "このコマンドは、Reactive Messaging と Kafka コネクタエクステンションをインポートして Maven プロジェクトを生成します。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-streams.adoc:95
msgid "This will add the following to your build file:"
msgstr "これにより、`pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/main/guides/kafka-streams.adoc:97
#: upstream/_versions/main/guides/kafka-streams.adoc:249
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/main/guides/kafka-streams.adoc:106
#: upstream/_versions/main/guides/kafka-streams.adoc:258
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ===
#: upstream/_versions/main/guides/kafka-streams.adoc:111
#, no-wrap
msgid "The Temperature Value Producer"
msgstr "温度値プロデューサー"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:200
msgid "Instruct Reactive Messaging to dispatch the items from the returned `Multi` to `temperature-values`."
msgstr "返却された `Multi` から `temperature-values` にアイテムを発送するように Reactive Messaging に指示します。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:201
msgid "The method returns a Mutiny _stream_ (`Multi`) emitting a random temperature value every 0.5 seconds."
msgstr "このメソッドは、0.5 秒ごとにランダムな温度値を放出する Mutiny _ストリーム_ ( `Multi` ) を返します。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:202
msgid "Instruct Reactive Messaging to dispatch the items from the returned `Multi` (static list of weather stations) to `weather-stations`."
msgstr "返された `Multi` (気象観測所の静的リスト) から `weather-stations` にアイテムをディスパッチするように、Reactive Messaging に指示します。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:204
msgid "The two methods each return a _reactive stream_ whose items are sent to the streams named `temperature-values` and `weather-stations`, respectively."
msgstr "この 2 つのメソッドは、それぞれ `temperature-values` と `weather-stations` という名前のストリームにアイテムが送信される _リアクティブストリーム_ を返します。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka-streams.adoc:205
#, no-wrap
msgid "Topic Configuration"
msgstr "トピック構成"

#. type: Title ==
#: upstream/_versions/main/guides/kafka-streams.adoc:227
#, no-wrap
msgid "Creating the Aggregator Maven Project"
msgstr "アグリゲータMavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:239
msgid "This creates the `aggregator` project with the Quarkus extension for Kafka Streams and with the Jackson support for RESTEasy Reactive."
msgstr "これにより、Kafka Streams用のQuarkusエクステンションとJackson用のRESTEasyリアクティブを備えた `aggregator` プロジェクトが作成されます。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:247
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka-streams.adoc:263
#, no-wrap
msgid "The Pipeline Implementation"
msgstr "パイプラインの実装"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:436
msgid "The `weather-stations` table is read into a `GlobalKTable`, representing the current state of each weather station"
msgstr "`weather-stations` テーブルは、各気象台の現在の状態を表す `GlobalKTable` に読み込まれます。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:437
msgid "The `temperature-values` topic is read into a `KStream`; whenever a new message arrives to this topic, the pipeline will be processed for this measurement"
msgstr "`temperature-values` トピックは `KStream` に読み込まれます。このトピックに新しいメッセージが到着するたびに、パイプラインはこの測定のために処理されます。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:438
msgid "The message from the `temperature-values` topic is joined with the corresponding weather station, using the topic's key (weather station id); the join result contains the data from the measurement and associated weather station message"
msgstr "`temperature-values` トピックからのメッセージは、トピックのキー (ウェザーステーション ID) を使用して、対応するウェザーステーションと結合されます。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:439
msgid "The values are grouped by message key (the weather station id)"
msgstr "値はメッセージキー(ウェザーステーションID)によってグループ化されます。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:440
msgid "Within each group, all the measurements of that station are aggregated, by keeping track of minimum and maximum values and calculating the average value of all measurements of that station (see the `Aggregation` type)"
msgstr "各グループ内では、最小値と最大値を追跡し、そのステーションのすべての測定値の平均値を計算することで、そのステーションのすべての測定値が集約されます( `Aggregation` タイプを参照)。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:441
msgid "The results of the pipeline are written out to the `temperatures-aggregated` topic"
msgstr "パイプラインの結果は `temperatures-aggregated` トピックに書き出しています。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:466
msgid "Alternatively, you can use `kafka.bootstrap.servers` instead of `quarkus.kafka-streams.bootstrap-servers` as you did in the _generator_ project above."
msgstr "あるいは、上記の _ジェネレーター_ プロジェクトで行ったように、 `quarkus.kafka-streams.bootstrap-servers` の代わりに `kafka.bootstrap.servers` を使用することもできます。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka-streams.adoc:475
#, no-wrap
msgid "Building and Running the Applications"
msgstr "アプリケーションのビルドと実行"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:478
msgid "We now can build the `producer` and `aggregator` applications:"
msgstr "`producer` と `aggregator` のアプリケーションをビルドできるようになりました。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:493
msgid "Next create a Docker Compose file (`docker-compose.yaml`) for spinning up the two applications as well as Apache Kafka and ZooKeeper like so:"
msgstr "次に、2 つのアプリケーションを起動するための Docker Compose ファイル ( `docker-compose.yaml` ) を作成し、Apache Kafka と ZooKeeper と同様に以下のようにします。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:559
msgid "Instead of `QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS`, you can use `KAFKA_BOOTSTRAP_SERVERS`."
msgstr "`QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS` の代わりに、 `KAFKA_BOOTSTRAP_SERVERS` を使うこともできます。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:561
msgid "You should see log statements from the `producer` application about messages being sent to the \"temperature-values\" topic."
msgstr "`producer` アプリケーションから、\"temperature-values\" トピックに送信されたメッセージに関するログステートメントが表示されるはずです。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:571
msgid "Within the tooling container, run _kafkacat_ to examine the results of the streaming pipeline:"
msgstr "ツールコンテナー内で、 _kafkacatを_ 実行して、ストリーミングパイプラインの結果を調べます。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka-streams.adoc:585
#, no-wrap
msgid "Interactive Queries"
msgstr "インタラクティブクエリ"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:595
msgid "Let's begin by creating a new class `InteractiveQueries` in the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/InteractiveQueries.java`:"
msgstr "まず、ファイル `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/InteractiveQueries.java` 内に `InteractiveQueries` を作成することから始めましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:597
msgid "one more method to the `KafkaStreamsPipeline` class which obtains the current state for a given key:"
msgstr "`KafkaStreamsPipeline` クラスに、与えられたキーの現在の状態を取得するメソッドをもう一つ追加しました。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:641
msgid "A value for the given station id was found, so that value will be returned"
msgstr "指定されたステーションIDの値が見つかったので、その値が返されます。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:642
msgid "No value was found, either because a non-existing station was queried or no measurement exists yet for the given station"
msgstr "存在しないステーションがクエリされたか、指定されたステーションに測定がまだ存在しないため、値が見つかりませんでした。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:644
msgid "Also create the method's return type in the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/GetWeatherStationDataResult.java`:"
msgstr "また、メソッドの戻り値の型もファイル `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/GetWeatherStationDataResult.java` に作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:765
msgid "Depending on whether a value was obtained, either return that value or a 404 response"
msgstr "値が取得されたかどうかに応じて、その値を返すか、404 レスポンスを返すかのどちらかを選択します。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:767
msgid "With this code in place, it's time to rebuild the application and the `aggregator` service in Docker Compose:"
msgstr "このコードを用意して、Docker Composeでアプリケーションと `aggregator` サービスをリビルドしましょう。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka-streams.adoc:799
#, no-wrap
msgid "Scaling Out"
msgstr "スケールアウト"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:808
msgid "Launching multiple instances of the `aggregator` application will make look the overall architecture like so:"
msgstr "`aggregator` アプリケーションの複数のインスタンスを起動すると、全体のアーキテクチャがこのようになります。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:812
msgid "The `InteractiveQueries` class must be adjusted slightly for this distributed architecture:"
msgstr "`InteractiveQueries` クラスは、この分散型アーキテクチャ用に少し調整する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:862
msgid "The streams metadata for the given weather station id is obtained"
msgstr "与えられたウェザーステーションIDのストリームメタデータが取得されます。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:863
msgid "The given key (weather station id) is maintained by the local application node, i.e. it can answer the query itself"
msgstr "与えられたキー(ウェザーステーションID)はローカルのアプリケーションノードによって管理されています。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:864
msgid "The given key is maintained by another application node; in this case the information about that node (host and port) will be returned"
msgstr "与えられたキーは別のアプリケーションノードによって管理されています; この場合、そのノードに関する情報(ホストとポート)が返されます。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:865
msgid "The `getMetaData()` method is added to provide callers with a list of all the nodes in the application cluster."
msgstr "`getMetaData()` メソッドが追加され、アプリケーション・クラスター内の全ノードのリストを呼び出し元に提供するようになりました。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:867
msgid "The `GetWeatherStationDataResult` type must be adjusted accordingly:"
msgstr "`GetWeatherStationDataResult` のタイプは、それに合わせて調整する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:941
msgid "Lastly, the REST endpoint class must be updated:"
msgstr "最後に、RESTエンドポイントクラスを更新する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1010
msgid "The data was found locally, so return it"
msgstr "データはローカルで見つかったので、それを返す。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1011
msgid "The data is maintained by another node, so reply with a redirect (HTTP status code 303) if the data for the given key is stored on one of the other nodes."
msgstr "データは他のノードで管理されているので、指定されたキーのデータが他のノードに保存されている場合は、リダイレクト(HTTPステータスコード303)で返信する。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1012
msgid "No data was found for the given weather station id"
msgstr "指定されたウェザーステーションIDに対するデータが見つからなかった。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1013
msgid "Exposes information about all the hosts forming the application cluster"
msgstr "アプリケーションクラスターを形成しているすべてのホストの情報を表示する。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1073
msgid "If that node holds the data for key \"1\", you'll get a response like this:"
msgstr "そのノードがキー「1」のデータを保持している場合は、このようなレスポンスが得られます。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1093
msgid "Otherwise, the service will send a redirect:"
msgstr "そうでない場合、サービスはリダイレクトを送信します。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1104
msgid "You can also have _httpie_ automatically follow the redirect by passing the `--follow option`:"
msgstr "また、 `--follow option` を渡すことで _httpie_ が自動的にリダイレクトに従うようにすることもできます。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka-streams.adoc:1110
#, no-wrap
msgid "Running Natively"
msgstr "ネイティブ実行"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1125
msgid "Now create an environment variable named `QUARKUS_MODE` and with value set to \"native\":"
msgstr "ここで、 `QUARKUS_MODE` という名前の環境変数を作成し、値を\"native\"に設定します。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka-streams.adoc:1143
#, no-wrap
msgid "Kafka Streams Health Checks"
msgstr "Kafka Streams のヘルスチェック"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1146
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-kafka-streams` will automatically add:"
msgstr "`quarkus-smallrye-health` のエクステンションを使用している場合は、 `quarkus-kafka-streams` が自動的に以下を追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1148
msgid "a readiness health check to validate that all topics declared in the `quarkus.kafka-streams.topics` property are created,"
msgstr "`quarkus.kafka-streams.topics` プロパティーで宣言されたすべてのトピックが作成されているかどうかを検証するための Readiness ヘルスチェック"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1149
msgid "a liveness health check based on the Kafka Streams state."
msgstr "Kafka Streams の状態に基づく Liveness ヘルスチェック"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1151
msgid "So when you access the `/q/health` endpoint of your application you will have information about the state of the Kafka Streams and the available and/or missing topics."
msgstr "そのため、アプリケーションの `/q/health` エンドポイントにアクセスすると、Kafka Streams の状態や、利用可能なトピックや不足しているトピックについての情報を得ることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1153
msgid "This is an example of when the status is `DOWN`:"
msgstr "これは、ステータスが `DOWN` になった場合の例です。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1183
msgid "Liveness health check. Also available at `/q/health/live` endpoint."
msgstr "Liveness ヘルスチェック。 `/q/health/live` エンドポイントでも利用可能。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1184
msgid "Readiness health check. Also available at `/q/health/ready` endpoint."
msgstr "Rediness ヘルスチェック。 `/q/health/ready` エンドポイントでも利用可能。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1186
msgid "So as you can see, the status is `DOWN` as soon as one of the `quarkus.kafka-streams.topics` is missing or the Kafka Streams `state` is not `RUNNING`."
msgstr "そのため、ご覧のように `quarkus.kafka-streams.topics` のいずれかが欠けているか、Kafka Streams の `state` が `RUNNING` でないとすぐにステータスが `DOWN` になります。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1191
msgid "You can of course disable the health check of the `quarkus-kafka-streams` extension by setting the `quarkus.kafka-streams.health.enabled` property to `false` in your `application.properties`."
msgstr "もちろん、 `quarkus-kafka-streams` エクステンションのヘルスチェックを無効にすることもできます。`application.properties` の中で `quarkus.kafka-streams.health.enabled` を `false` にしてください。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1193
msgid "Obviously you can create your liveness and readiness probes based on the respective endpoints `/q/health/live` and `/q/health/ready`."
msgstr "言うまでもなく、それぞれのエンドポイント `/q/health/live` と `/q/health/ready` に対して自前の Liveness および Rediness プローブを作成することもできます。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka-streams.adoc:1194
#, no-wrap
msgid "Liveness health check"
msgstr "Liveness ヘルスチェック"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1197
msgid "Here is an example of the liveness check:"
msgstr "Liveness チェックの一例をご紹介します。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1220
msgid "The `state` is coming from the `KafkaStreams.State` enum."
msgstr "`state` は `KafkaStreams.State` Enum から来ています。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka-streams.adoc:1221
#, no-wrap
msgid "Readiness health check"
msgstr "Rediness ヘルスチェック"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-streams.adoc:1224
msgid "Here is an example of the readiness check:"
msgstr "ここでは、Rediness チェックの一例をご紹介します。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka-streams.adoc:1247
#, no-wrap
msgid "Going Further"
msgstr "さらに詳しく"

#. type: Title ==
#: upstream/_versions/main/guides/kafka-streams.adoc:1254
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"
