msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"Reactive routes propose an alternative approach to implement HTTP endpoints where you declare and chain _routes_.\n"
"This approach became very popular in the JavaScript world, with frameworks like Express.Js or Hapi.\n"
"Quarkus also offers the possibility to use reactive routes.\n"
"You can implement REST API with routes only or combine them with Jakarta REST resources and servlets."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"Reactive Routes were initially introduced to provide a reactive execution model for HTTP APIs on top of the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture].\n"
"With the introduction of xref:resteasy-reactive.adoc[RESTEasy Reactive], you can now implement reactive HTTP APIs and still use Jakarta REST annotations.\n"
"Reactive Routes are still supported, especially if you want a more _route-based_ approach, and something closer to the underlying reactive engine."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"Before going further, let's have a look at the HTTP layer of Quarkus.\n"
"Quarkus HTTP support is based on a non-blocking and reactive engine (Eclipse Vert.x and Netty).\n"
"All the HTTP requests your application receive are handled by _event loops_ (I/O Thread) and then are routed towards the code that manages the request.\n"
"Depending on the destination, it can invoke the code managing the request on a worker thread (Servlet, Jax-RS) or use the IO Thread (reactive route).\n"
"Note that because of this, a reactive route must be non-blocking or explicitly declare its blocking nature (which would result by being called on a worker thread)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"The first way to use reactive routes is to use the `@Route` annotation.\n"
"To have access to this annotation, you need to add the `quarkus-reactive-routes` extension by running this command:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"The `order` - the order of the route when several routes are involved in handling the incoming request.\n"
"Must be positive for regular user routes."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"You may end up with multiple routes matching a given path.\n"
"In the following example, both route matches `/accounts/me`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"As a consequence, the result is not the expected one as the first route is called with the path parameter `id` set to `me`.\n"
"To avoid the conflict, use the `order` attribute:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"By giving a lower order to the second route, it gets evaluated first.\n"
"If the request path matches, it is invoked, otherwise the other routes are evaluated."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"A route method must be a non-private non-static method of a CDI bean.\n"
"If the annotated method returns `void` then it has to accept at least one argument - see the supported types below.\n"
"If the annotated method does not return `void` then the arguments are optional."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"Methods that return `void` must __end__ the response or the HTTP request to this route will never end.\n"
"Some methods of `RoutingExchange` do it for you, others not and you must call the `end()` method of the response by yourself, please refer to its JavaDoc for more information."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid "Obtained via"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"A failure handler can declare a single method parameter whose type extends `Throwable`.\n"
"The type of the parameter is used to match the result of `RoutingContext#failure()`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"An object - written into the HTTP response after having been encoded into JSON.\n"
"The `content-type` header is set to `application/json` if not already set."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"Be aware, the processing must be **non-blocking** as reactive routes are invoked on the IO Thread.\n"
"Otherwise, set the `type` attribute of the `@Route` annotation to `Route.HandlerType.BLOCKING`, or use the `@io.smallrye.common.annotation.Blocking` annotation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"A reactive route can return a `Multi`.\n"
"The items are written one by one, in the response.\n"
"The response `Transfer-Encoding` header is set to `chunked`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"You can return a `Multi` to produce a JSON Array, where every item is an item from this array.\n"
"The response is written item by item to the client.\n"
"To do that set the `produces` attribute to `\"application/json\"` (or `ReactiveRoutes.APPLICATION_JSON`)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"The `produces` attribute is an array.\n"
"When you pass a single value you can omit the \"{\" and \"}\".\n"
"Note that `\"application/json\"` must be the first value in the array."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"Only `Multi<String>`, `Multi<Object>` and `Multi<Void>` can be written into the JSON Array.\n"
"Using a `Multi<Void>` produces an empty array.\n"
"You cannot use `Multi<Buffer>`.\n"
"If you need to use `Buffer`, transform the content into a JSON or String representation first."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"You can return a `Multi` to produce an event source (stream of server sent events).\n"
"To enable this feature, set the `produces` attribute to `\"text/event-stream\"` (or `ReactiveRoutes.EVENT_STREAM`), such as in:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"The `produces` attribute is an array.\n"
"When you pass a single value you can omit the \"{\" and \"}\".\n"
"Note that `\"text/event-stream\"` must be the first value in the array."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"You can return a `Multi` to produce a newline delimited stream of JSON values.\n"
"To enable this feature, set the `produces` attribute of the `@Route` annotation to `\"application/x-ndjson\"` (or `ReactiveRoutes.ND_JSON`):"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"The `produces` attribute is an array. When you pass a single value you can omit the \"{\" and \"}\".\n"
"Note that `\"application/x-ndjson\"` must be the first value in the array."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"You can combine reactive routes and Bean Validation.\n"
"First, don't forget to add the `quarkus-hibernate-validator` extension to your project.\n"
"Then, you can add constraints to your route parameter (annotated with `@Param` or `@Body`):"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"If the parameters do not pass the tests, it returns an HTTP 400 response.\n"
"If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"If the item produced by the route does not pass the validation, it returns an HTTP 500 response.\n"
"If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"Note that only `@Valid` is supported on the return type.\n"
"The returned class can use any constraint.\n"
"In the case of `Uni`, it checks the item produced asynchronously."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"You can also register your route directly on the _HTTP routing layer_ by registering routes directly on the `Router` object.\n"
"To retrieve the `Router` instance at startup:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"`Router` access is provided by the `quarkus-vertx-http` extension.\n"
"If you use `quarkus-resteasy-reactive` or `quarkus-reactive-routes`, the extension will be added automatically."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"You can also register filters that would intercept incoming HTTP requests.\n"
"Note that these filters are also applied for servlets, Jakarta REST resources, and reactive routes."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"The body of an HTTP response is not compressed by default.\n"
"You can enable the HTTP compression support by means of `quarkus.http.enable-compression=true`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"You can use link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] to better document your schema,\n"
"for instance, adding header info, or specifying the return type on `void` methods might be useful:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"Swagger UI is included by default when running in `dev` or `test` mode, and can optionally be added to `prod` mode.\n"
"For more information, see the xref:openapi-swaggerui.adoc#dev-mode[Swagger UI] guide."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/reactive-routes.adoc
msgid ""
"This guide has introduced how you can use reactive routes to define an HTTP endpoint.\n"
"It also describes the structure of the Quarkus HTTP layer and how to write filters."
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/reactive-routes.adoc:6
#, no-wrap
msgid "Using Reactive Routes"
msgstr "リアクティブルートの使用"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:17
#, fuzzy
msgid "The code presented in this guide is available in this {quickstarts-base-url}[GitHub repository] under the link:{quickstarts-tree-url}/reactive-routes-quickstart[`reactive-routes-quickstart` directory]"
msgstr "このガイドで紹介するコードは、この{quickstarts-base-url}[GitHubリポジトリ]の link:{quickstarts-tree-url}/reactive-routes-quickstart[reactive-routes-quickstart ディレクトリに] あります。"

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:22
#, no-wrap
msgid "Quarkus HTTP"
msgstr "Quarkus HTTP"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:31
msgid "image:http-architecture.png[alt=Quarkus HTTP Architecture]"
msgstr "image:http-architecture.png[alt=Quarkus HTTP Architecture]"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:33
msgid "See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr "このトピックの詳細については、xref:quarkus-reactive-architecture.adoc[Quarkus リアクティブアーキテクチャのドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:35
#, no-wrap
msgid "Declaring reactive routes"
msgstr "Reactive Routesの宣言"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:44
#: upstream/_versions/main/guides/reactive-routes.adoc:726
msgid "This will add the following to your build file:"
msgstr "これにより、`pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:46
#: upstream/_versions/main/guides/reactive-routes.adoc:728
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:55
#: upstream/_versions/main/guides/reactive-routes.adoc:737
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:61
msgid "Then in a _bean_, you can use the `@Route` annotation as follows:"
msgstr "そして、 _Bean_ では、以下のように `@Route` アノテーションを使用することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:99
#, fuzzy
msgid "If there is a reactive route found on a class with no scope annotation then `@jakarta.inject.Singleton` is added automatically."
msgstr "スコープアノテーションがないクラスでリアクティブルートが見つかった場合、 `@jakarta.inject.Singleton` が自動的に追加されます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:100
msgid "The `@Route` annotation indicates that the method is a reactive route. Again, by default, the code contained in the method must not block."
msgstr "`@Route` アノテーションは、メソッドがリアクティブルートであることを示します。繰り返しになりますが、デフォルトでは、メソッドに含まれるコードはブロックしてはいけません。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:101
msgid "The method gets a https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] as a parameter. From the `RoutingContext` you can retrieve the HTTP request (using `request()`) and write the response using `response().end(...)`."
msgstr "このメソッドは、 https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] をパラメーターとして取得します。 `RoutingContext` から HTTP リクエストを ( `request()` を使用して) 取得し、 `response().end(...)` を使用してレスポンスを書き込むことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:102
msgid "If the annotated method does not return `void` the arguments are optional."
msgstr "アノテーションされたメソッドが `void` を返さない場合、引数はオプションです。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:103
msgid "`RoutingExchange` is a convenient wrapper of `RoutingContext` which provides some useful methods."
msgstr "`RoutingExchange` は、いくつかの便利なメソッドを提供する `RoutingContext` の便利なラッパーです。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:104
msgid "The `RoutingExchange` is used to retrieve the request query parameter `name`."
msgstr "`RoutingExchange` は、リクエストクエリパラメータ `name` を取得するために使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:105
msgid "The path defines a parameter `name` which can be injected inside the method parameters using the annotation `@Param`."
msgstr "パスはパラメータ `name` を定義します。パラメータ `name` は `@Param` アノテーションを使用してメソッドパラメータ内に注入することができます 。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:107
msgid "More details about using the `RoutingContext` is available in the https://vertx.io/docs/vertx-web/java/[Vert.x Web documentation]."
msgstr "`RoutingContext` の使用の詳細については、 https://vertx.io/docs/vertx-web/java/[Vert.x Web ドキュメント] を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:109
msgid "The `@Route` annotation allows you to configure:"
msgstr "`@Route` アノテーションを使用すると、以下を設定できます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:111
msgid "The `path` - for routing by path, using the https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Web format]"
msgstr "`path`- https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Web フォーマット] を使用したパスによるルーティング用"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:112
msgid "The `regex` - for routing with regular expressions, see https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[for more details]"
msgstr "`regex` - 正規表現を使用したルーティングについては、 https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[詳細] を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:113
msgid "The `methods` - the HTTP verbs triggering the route such as `GET`, `POST`..."
msgstr "`methods` - `GET`、`POST` などのルートをトリガーする HTTP 動詞"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:114
msgid "The `type` - it can be _normal_ (non-blocking), _blocking_ (method dispatched on a worker thread), or _failure_ to indicate that this route is called on failures"
msgstr "`type` - _normal_ (ノンブロッキング)、_blocking_ (ワーカスレッドにディスパッチされるメソッド)、あるいは _failure_ で、失敗時にこのルートが呼び出されることを示します。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:117
msgid "The produced and consumed mime types using `produces`, and `consumes`"
msgstr "`produces` と `consumes` を使用して生成および消費された mime タイプ。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:119
msgid "For instance, you can declare a blocking route as follows:"
msgstr "たとえば、次のようにブロッキングルートを宣言できます。"

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-routes.adoc:131
msgid "Alternatively, you can use `@io.smallrye.common.annotation.Blocking` and omit the `type = Route.HandlerType.BLOCKING`:"
msgstr "または、`@io.smallrye.common.annotation.Blocking` を使用して、`type = Route.HandlerType.BLOCKING` を省略できます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:140
msgid "When `@Blocking` is used, it ignores the `type` attribute of `@Route`."
msgstr "`@Blocking` が使用されている場合、`@Route` の `type` 属性は無視されます。"

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-routes.adoc:143
msgid "The `@Route` annotation is repeatable and so you can declare several routes for a single method:"
msgstr "`@Route` アノテーションは繰り返し可能であるため、1 つのメソッドに対して複数のルートを宣言できます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:153
msgid "Each route can use different paths, methods..."
msgstr "各ルートは、異なるパスやメソッドなどを使用できます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:155
msgid "If no content-type header is set, then we will try to use the most acceptable content type by matching the accept header with the value of the `Route` produces attribute as defined by `io.vertx.ext.web.RoutingContext.getAcceptableContentType()`."
msgstr "もしcontent-typeヘッダーが設定されていなければ、acceptヘッダーを `io.vertx.ext.web.RoutingContext.getAcceptableContentType()` で定義されている `Route` produces属性の値と照合して、最も受け入れやすいコンテンツタイプを使用しようと試みます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:164
msgid "If the `accept` header matches `text/html`, we set the content type automatically to `text/html`."
msgstr "`accept` ヘッダーが `text/html` と一致する場合、コンテンツタイプを自動的に `text/html` に設定します。"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:165
#, no-wrap
msgid "Handling conflicting routes"
msgstr "競合するルートの処理"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:202
#, no-wrap
msgid "`@RouteBase`"
msgstr "`@RouteBase`"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:205
msgid "This annotation can be used to configure some defaults for reactive routes declared on a class."
msgstr "このアノテーションを使用して、クラスで宣言されたReactive Routesのデフォルトを設定できます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:218
msgid "The `path` value is used as a prefix for any route method declared on the class where `Route#path()` is used."
msgstr "`path` 値は、`Route#path()` が使用されるクラスで宣言されたルートメソッドの接頭辞として使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:219
msgid "The value of `produces()` is used for content-based routing for all routes where `Route#produces()` is empty."
msgstr "`produces()` の値は、 `Route#produces()` が空のすべてのルートで、コンテンツベースのルーティングに使用されます。"

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:221
#, no-wrap
msgid "Reactive Route Methods"
msgstr "Reactive Routesメソッド"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:231
msgid "A route method can accept arguments of the following types:"
msgstr "ルートメソッドは、次のタイプの引数を受け取ることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:233
msgid "`io.vertx.ext.web.RoutingContext`"
msgstr "`io.vertx.ext.web.RoutingContext`"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:234
msgid "`io.quarkus.vertx.web.RoutingExchange`"
msgstr "`io.quarkus.vertx.web.RoutingExchange`"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:235
msgid "`io.vertx.core.http.HttpServerRequest`"
msgstr "`io.vertx.core.http.HttpServerRequest`"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:236
msgid "`io.vertx.core.http.HttpServerResponse`"
msgstr "`io.vertx.core.http.HttpServerResponse`"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:237
msgid "`io.vertx.mutiny.core.http.HttpServerRequest`"
msgstr "`io.vertx.mutiny.core.http.HttpServerRequest`"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:238
msgid "`io.vertx.mutiny.core.http.HttpServerResponse`"
msgstr "`io.vertx.mutiny.core.http.HttpServerResponse`"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:240
msgid "Furthermore, it is possible to inject the `HttpServerRequest` parameters into method parameters annotated with `@io.quarkus.vertx.web.Param` using the following types:"
msgstr "さらに、`HttpServerRequest` パラメーターを以下の型を使用した `@io.quarkus.vertx.web.Param` でアノテーションされたメソッドパラメーターに挿入できます。"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:243
#: upstream/_versions/main/guides/reactive-routes.adoc:263
#: upstream/_versions/main/guides/reactive-routes.adoc:283
#, no-wrap
msgid "Parameter Type"
msgstr "パラメータータイプ"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:245
#: upstream/_versions/main/guides/reactive-routes.adoc:265
#: upstream/_versions/main/guides/reactive-routes.adoc:285
#, no-wrap
msgid "`java.lang.String`"
msgstr "`java.lang.String`"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:246
#: upstream/_versions/main/guides/reactive-routes.adoc:247
#, no-wrap
msgid "`routingContext.request().getParam()`"
msgstr "`routingContext.request().getParam()`"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:246
#: upstream/_versions/main/guides/reactive-routes.adoc:266
#, no-wrap
msgid "`java.util.Optional<String>`"
msgstr "`java.util.Optional<String>`"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:247
#: upstream/_versions/main/guides/reactive-routes.adoc:267
#, no-wrap
msgid "`java.util.List<String>`"
msgstr "`java.util.List<String>`"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:248
#, no-wrap
msgid "`routingContext.request().params().getAll()`"
msgstr "`routingContext.request().params().getAll()`"

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:250
#, no-wrap
msgid "Request Parameter Example"
msgstr "リクエストパラメーターの例"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:260
msgid "The `HttpServerRequest` headers can be injected into method parameters annotated with `@io.quarkus.vertx.web.Header` using the following types:"
msgstr "`HttpServerRequest` ヘッダーは、以下の型を使用した `@io.quarkus.vertx.web.Header` でアノテーションされたメソッドパラメーターに挿入できます。"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:266
#: upstream/_versions/main/guides/reactive-routes.adoc:267
#, no-wrap
msgid "`routingContext.request().getHeader()`"
msgstr "`routingContext.request().getHeader()`"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:268
#, no-wrap
msgid "`routingContext.request().headers().getAll()`"
msgstr "`routingContext.request().headers().getAll()`"

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:270
#, no-wrap
msgid "Request Header Example"
msgstr "リクエストヘッダーの例"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:280
msgid "The request body can be injected into a method parameter annotated with `@io.quarkus.vertx.web.Body` using the following types:"
msgstr "リクエストボディは、以下の型を使用した、 `@io.quarkus.vertx.web.Body` でアノテーションされたメソッドパラメーターに注入することができます。"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:286
#, no-wrap
msgid "`routingContext.getBodyAsString()`"
msgstr "`routingContext.getBodyAsString()`"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:286
#, no-wrap
msgid "`io.vertx.core.buffer.Buffer`"
msgstr "`io.vertx.core.buffer.Buffer`"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:287
#, no-wrap
msgid "`routingContext.getBody()`"
msgstr "`routingContext.getBody()`"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:287
#, no-wrap
msgid "`io.vertx.core.json.JsonObject`"
msgstr "`io.vertx.core.json.JsonObject`"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:288
#, no-wrap
msgid "`routingContext.getBodyAsJson()`"
msgstr "`routingContext.getBodyAsJson()`"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:288
#, no-wrap
msgid "`io.vertx.core.json.JsonArray`"
msgstr "`io.vertx.core.json.JsonArray`"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:289
#, no-wrap
msgid "`routingContext.getBodyAsJsonArray()`"
msgstr "`routingContext.getBodyAsJsonArray()`"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:289
#, no-wrap
msgid "any other type"
msgstr "他の型"

#. type: Table
#: upstream/_versions/main/guides/reactive-routes.adoc:290
#, no-wrap
msgid "`routingContext.getBodyAsJson().mapTo(MyPojo.class)`"
msgstr "`routingContext.getBodyAsJson().mapTo(MyPojo.class)`"

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:292
#, no-wrap
msgid "Request Body Example"
msgstr "リクエストボディの例"

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:305
#, no-wrap
msgid "Failure Handler Example"
msgstr "失敗ハンドラーの例"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:314
#, no-wrap
msgid "Returning Unis"
msgstr "Uni を返す"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:317
msgid "In a reactive route, you can return a `Uni` directly:"
msgstr "Reactive Routesでは、`Uni` を直接返すことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:332
msgid "Returning `Unis` is convenient when using a reactive client:"
msgstr "リアクティブクライアントを使用している場合、`Unis` を返すと便利です。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:342
msgid "The item produced by the returned `Uni` can be:"
msgstr "返された `Uni` によって生成されるアイテムは以下のとおりです。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:344
#: upstream/_versions/main/guides/reactive-routes.adoc:370
msgid "A string - written into the HTTP response directly."
msgstr "文字列 - HTTP レスポンスに直接書き込まれます"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:345
#: upstream/_versions/main/guides/reactive-routes.adoc:371
msgid "A `io.vertx.core.buffer.Buffer` - written into the HTTP response directly."
msgstr "`io.vertx.core.buffer.Buffer` - HTTP レスポンスに直接書き込まれます"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:349
msgid "If the returned `Uni` produces a failure (or is `null`), an HTTP 500 response is written."
msgstr "返された `Uni` が失敗した場合 (または `null` の場合)、HTTP 500 レスポンスが書き込まれます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:351
msgid "Returning a `Uni<Void>` produces a 204 response (no content)."
msgstr "`Uni<Void>` を返すと 204 レスポンス (コンテンツなし) が生成されます。"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:352
#, no-wrap
msgid "Returning results"
msgstr "結果を返す"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:355
msgid "You can also return a result directly:"
msgstr "結果を直接返すこともできます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:368
#: upstream/_versions/main/guides/reactive-routes.adoc:390
msgid "The method can return:"
msgstr "メソッドは以下を返すことができます。"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:374
#, no-wrap
msgid "Returning Multis"
msgstr "Multi を返す"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:388
msgid "Produces `helloworld!`"
msgstr "`helloworld!` の生成"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:392
msgid "A `Multi<String>` - the items are written one by one (one per _chunk_) in the response."
msgstr "`Multi<String>` - アイテムはレスポンスに 1 つずつ ( _チャンク_ ごとに 1 つ) 書き込まれます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:393
msgid "A `Multi<Buffer>` - the buffers are written one by one (one per _chunk_) without any processing."
msgstr "`Multi<Buffer>` - バッファーは処理なしで 1 つずつ ( _チャンク_ ごとに 1 つ) 書き込まれます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:394
msgid "A `Multi<Object>` - the items are encoded to JSON written one by one in the response."
msgstr "`Multi<Object>` - アイテムは、 JSON にエンコードされ、レスポンスに 1 つずつ書き込まれるます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:408
#: upstream/_versions/main/guides/reactive-routes.adoc:434
msgid "The previous snippet produces:"
msgstr "前のスニペットは以下を生成します。"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:416
#, no-wrap
msgid "Streaming JSON Array items"
msgstr "JSON 配列アイテムのストリーミング"

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:454
#, no-wrap
msgid "Deprecation of `asJsonArray`"
msgstr "`asJsonArray` の非推奨"

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-routes.adoc:457
msgid "The `ReactiveRoutes.asJsonArray` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr "`ReactiveRoutes.asJsonArray` は、Quarkus のセキュリティーレイヤーと互換性がないため、非推奨になりました。"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:459
#, no-wrap
msgid "Event Stream and Server-Sent Event support"
msgstr "イベントストリームとサーバー送信イベントのサポート"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:476
#: upstream/_versions/main/guides/reactive-routes.adoc:566
msgid "This method would produce:"
msgstr "この方法では、以下が生成されます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:495
msgid "You can also implement the `io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` interface to customize the `event` and `id` section of the server sent event:"
msgstr "`io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` インターフェイスを実装して、サーバー送信イベントの `event` および `id` セクションをカスタマイズすることもできます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:525
msgid "Using a `Multi<PersonEvent>` would produce:"
msgstr "`Multi<PersonEvent>` を使用すると、以下が生成されます。"

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:543
#, no-wrap
msgid "Deprecation of `asEventStream`"
msgstr "`asEventStream` の非推奨"

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-routes.adoc:546
msgid "The `ReactiveRoutes.asEventStream` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr "`ReactiveRoutes.asEventStream` は、Quarkus のセキュリティーレイヤーと互換性がないため、非推奨になりました。"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:548
#, no-wrap
msgid "Json Stream in NDJSON format"
msgstr "NDJSON 形式の Json ストリーム"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:579
msgid "You can also provide strings instead of objects, in that case the strings will be wrapped in quotes to become valid JSON values:"
msgstr "オブジェクトの代わりに文字列を指定することもできます。その場合、文字列を引用符で囲うことで、有効な JSON 値になります。"

#. type: Block title
#: upstream/_versions/main/guides/reactive-routes.adoc:601
#, no-wrap
msgid "Deprecation of `asJsonStream`"
msgstr "`asJsonStream` の非推奨"

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-routes.adoc:604
msgid "The `ReactiveRoutes.asJsonStream` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr "`ReactiveRoutes.asJsonStream` は、Quarkus のセキュリティーレイヤーと互換性がないため、非推奨になりました。"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:606
#, no-wrap
msgid "Using Bean Validation"
msgstr "Bean バリデーションの使用"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:624
msgid "When returning an object or a `Uni`, you can also use the `@Valid` annotation:"
msgstr "オブジェクトまたは `Uni` を返す場合、`@Valid` アノテーションも使用できます。"

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:640
#, no-wrap
msgid "Using the Vert.x Web Router"
msgstr "Vert.x Web ルーターの使用"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:653
msgid "Check the https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web documentation] to know more about the route registration, options, and available handlers."
msgstr "ルート登録、オプション、および使用可能なハンドラーの詳細については、 https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web ドキュメント] を確認してください。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:662
msgid "You can also receive the Mutiny variant of the Router (`io.vertx.mutiny.ext.web.Router`):"
msgstr "ルーターの Mutiny バリアント (`io.vertx.mutiny.ext.web.Router`) を受け取ることもできます。"

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:670
#, no-wrap
msgid "Intercepting HTTP requests"
msgstr "HTTP リクエストのインターセプト"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:676
msgid "For example, the following code snippet registers a filter adding an HTTP header:"
msgstr "たとえば、次のコードスニペットは、HTTP ヘッダーを追加するフィルターを登録します。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:694
msgid "The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first."
msgstr "`RouteFilter#value()` は、フィルターの並べ替えに使用される優先度を定義します。優先度の高いフィルターが先に呼び出されます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:695
msgid "The filter is likely required to call the `next()` method to continue the chain."
msgstr "フィルターが `next()`メソッドを呼び出さなければ、チェーンを継続できない可能性があります。"

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:696
#, no-wrap
msgid "HTTP Compression"
msgstr "HTTP圧縮"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:702
msgid "If compression support is enabled then the response body is compressed if:"
msgstr "圧縮サポートが有効であれば、以下の場合にレスポンスボディが圧縮されます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:704
msgid "the route method is annotated with `@io.quarkus.vertx.http.Compressed`, or"
msgstr "ルートメソッドが `@ io.quarkus.vertx.http.Compressed` でアノテーションされている、または"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:705
msgid "the `Content-Type` header is set and the value is a compressed media type as configured via `quarkus.http.compress-media-types`."
msgstr "`Content-Type` ヘッダーが設定されており、その値は `quarkus.http.compress-media-types` を介して設定された圧縮メディアタイプである。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:707
msgid "The response body is never compressed if:"
msgstr "次の場合、レスポンスボディは圧縮されません。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:709
msgid "the route method is annotated with `@io.quarkus.vertx.http.Uncompressed`, or"
msgstr "ルートメソッドが `@io.quarkus.vertx.http.Uncompressed` でアノテーションされている、または"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:710
msgid "the `Content-Type` header is not set."
msgstr "`Content-Type` ヘッダーが設定されていない。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:712
msgid "By default, the following list of media types is compressed: `text/html`, `text/plain`, `text/xml`, `text/css`, `text/javascript` and `application/javascript`."
msgstr "デフォルトでは、次のメディアタイプのリストが圧縮されています: `text/html`、`text/plain`、`text/xml`、`text/css`、`text/javascript`、`application/javascript`。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:714
msgid "If the client does not support HTTP compression then the response body is not compressed."
msgstr "クライアントが HTTP 圧縮をサポートしていない場合、レスポンスボディは圧縮されません。"

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:716
#, no-wrap
msgid "Adding OpenAPI and Swagger UI"
msgstr "OpenAPI と Swagger UI の追加"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:719
msgid "You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger UI] by using the `quarkus-smallrye-openapi` extension."
msgstr "`quarkus-smallrye-openapi` エクステンションを使用してlink:https://www.openapis.org/[OpenAPI] および link:https://swagger.io/tools/swagger-ui/[Swagger UI] のサポートを追加できます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:721
msgid "Add the extension by running this command:"
msgstr "このコマンドを実行してエクステンションを追加"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:743
msgid "This is enough to generate a basic OpenAPI schema document from your Vert.x Routes:"
msgstr "これだけで、Vert.x ルートから基本的な OpenAPI スキーマドキュメントを生成できます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:750
msgid "You will see the generated OpenAPI schema document:"
msgstr "生成された OpenAPI スキーマドキュメントが表示されます。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:781
msgid "Also see xref:openapi-swaggerui.adoc[the OpenAPI Guide]."
msgstr "xref:openapi-swaggerui.adoc[OpenAPI ガイド] も参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:782
#, no-wrap
msgid "Adding MicroProfile OpenAPI Annotations"
msgstr "MicroProfile OpenAPIアノテーションの追加"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:828
msgid "Header information about your API."
msgstr "APIに関するヘッダー情報"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:829
msgid "Defining the response."
msgstr "レスポンスの定義"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:831
msgid "This will generate this OpenAPI schema:"
msgstr "これにより、このOpenAPIスキーマが生成されます。"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-routes.adoc:876
#, no-wrap
msgid "Using Swagger UI"
msgstr "Swagger UIの使用"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:882
#, fuzzy
msgid "Navigate to link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] and observe the Swagger UI screen:"
msgstr "link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/に] 移動して、Swagger UI画面を観察します："

#. type: Plain text
#: upstream/_versions/main/guides/reactive-routes.adoc:884
msgid "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"
msgstr "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"

#. type: Title ==
#: upstream/_versions/main/guides/reactive-routes.adoc:885
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"
