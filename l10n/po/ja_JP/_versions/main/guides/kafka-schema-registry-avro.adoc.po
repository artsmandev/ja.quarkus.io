# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-05-07 17:34+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:6
#, no-wrap
msgid "Quarkus - Using Apache Kafka with Schema Registry and Avro"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:12
msgid "This guide shows how your Quarkus application can use Apache Kafka, http://avro.apache.org/docs/current/[Avro] serialized records, and connect to Schema Registry (such as the https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent Schema Registry] or https://www.apicur.io/registry/[Apicurio Schema Registry]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:15
msgid "If you are not familiar with Kafka and Kafka in Quarkus in particular, consider first going through the link:kafka.adoc[Using Apache Kafka with Reactive Messaging] guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:16
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:19
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:21
msgid "less than 30 minutes"
msgstr "三十分以内"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:22
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:23
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:24
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:25
msgid "Docker Compose to start a local Kafka cluster and Apicurio Registry"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:26
msgid "GraalVM installed if you want to run in native mode."
msgstr "ネイティブモードで実行する場合は、GraalVM がインストールされていること"

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:28
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:32
msgid "In this guide we are going to implement a REST resource, namely `MovieResource`, that will consume movie DTOs and put them in a Kafka topic."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:36
msgid "Then, we will implement a consumer that will consume and collect messages from the same topic.  The collected messages will be then exposed by another resource, `ConsumedMovieResource`, via https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events[Server-Sent Events]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:40
msgid "The _Movies_ will be serialized and deserialized using Avro.  The schema, describing the _Movie_, is stored in Apicurio Registry.  The same concept applies if you are using the Confluent Avro _serde_ and Confluent Schema Registry."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:41
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:44
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:46
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:48
msgid "The solution is located in the `kafka-avro-schema-quickstart` {quickstarts-tree-url}/kafka-quickstart-avro-schema[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:49
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:52
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:62
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=kafka-avro-schema-quickstart \\\n"
"    -DclassName=\"org.acme.kafka.MovieResource\" \\\n"
"    -Dpath=\"/movies\" \\\n"
"    -Dextensions=\"resteasy-reactive,resteasy-reactive-jackson,smallrye-reactive-messaging-kafka,avro\"\n"
"cd kafka-avro-schema-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:66
msgid "Additionally, we need a serializer and deserializer for Avro.  In this guide, we will use the ones provided by Apicurio."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:79
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.apicurio</groupId>\n"
"    <artifactId>apicurio-registry-serdes-avro-serde</artifactId>\n"
"    <version>2.0.0.Final</version>\n"
"</dependency>\n"
"<!-- Apicurio Registry libraries use Keycloak client, which requires Apache HTTP Client -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-apache-httpclient</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:85
msgid "If you use Confluent Schema Registry, you need the following dependencies and the Confluent Maven repository added to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:106
#, no-wrap
msgid ""
"<dependencies>\n"
"    ...\n"
"    <!-- Confluent registry libraries use JAX-RS client -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-rest-client</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>io.confluent</groupId>\n"
"        <artifactId>kafka-avro-serializer</artifactId>\n"
"        <version>6.1.1</version>\n"
"        <exclusions>\n"
"            <exclusion>\n"
"                <groupId>jakarta.ws.rs</groupId>\n"
"                <artifactId>jakarta.ws.rs-api</artifactId>\n"
"            </exclusion>\n"
"        </exclusions>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:116
#, no-wrap
msgid ""
"<repositories>\n"
"    <repository>\n"
"        <id>confluent</id>\n"
"        <url>https://packages.confluent.io/maven/</url>\n"
"        <snapshots>\n"
"            <enabled>false</enabled>\n"
"        </snapshots>\n"
"    </repository>\n"
"</repositories>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:119
#, no-wrap
msgid "Avro schema"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:123
msgid "Apache Avro is a data serialization system. Data structures are described using schemas.  The first thing we need to do is to create a schema describing the `Movie` structure.  Create a file called `src/main/avro/movie.avsc` with the schema for our record (Kafka message):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:140
#, no-wrap
msgid ""
"{\n"
"  \"namespace\": \"org.acme.kafka.quarkus\",\n"
"  \"type\": \"record\",\n"
"  \"name\": \"Movie\",\n"
"  \"fields\": [\n"
"    {\n"
"      \"name\": \"title\",\n"
"      \"type\": \"string\"\n"
"    },\n"
"    {\n"
"      \"name\": \"year\",\n"
"      \"type\": \"int\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:144
msgid "If you build the project with `mvn compile` , the `movies.avsc` will get compiled to a `Movie.java` file placed in the `target/generated-sources/avsc` directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:147
msgid "Take a look at the https://avro.apache.org/docs/current/spec.html#schemas[Avro specification] to learn more about the Avro syntax and supported types."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:149
msgid "With Quarkus, there's no need to use a specific Maven plugin to process the Avro schema, this is all done for you!"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:152
msgid "If you run the project with `mvn compile quarkus:dev`, the changes you do to the schema file will be automatically applied to the generated Java files."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:154
#, no-wrap
msgid "The `Movie` producer"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:156
msgid "Having defined the schema, we can now jump to implementing the `MovieResource`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:159
msgid "Let's open the `MovieResource`, inject an https://quarkus.io/blog/reactive-messaging-emitter/[`Emitter`] of `Movie` DTO and implement a `@POST` method that consumes `Movie` and sends it through the `Emitter`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:163
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:221
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:426
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:470
#, no-wrap
msgid "package org.acme.kafka;\n"
msgstr "package org.acme.kafka;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:168
#, no-wrap
msgid ""
"import org.acme.kafka.quarkus.Movie;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:172
#, no-wrap
msgid ""
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:176
#, no-wrap
msgid ""
"@Path(\"/movies\")\n"
"public class MovieResource {\n"
"    private static final Logger LOGGER = Logger.getLogger(MovieResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:179
#, no-wrap
msgid ""
"    @Channel(\"movies\")\n"
"    Emitter<Movie> emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:186
#, no-wrap
msgid ""
"    @POST\n"
"    public Response enqueueMovie(Movie movie) {\n"
"        LOGGER.infof(\"Sending movie %s to Kafka\", movie.getTitle());\n"
"        emitter.send(movie);\n"
"        return Response.accepted().build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:188
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:560
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:192
msgid "Now, we need to _map_ the `movies` channel (the `Emitter` emits to this channel) to a Kafka topic.  To achieve this, edit the `application.properties` file, and add the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:196
#, no-wrap
msgid ""
"# set the URL of the Apicurio Schema Registry, a global setting shared between all Kafka producers and consumers\n"
"mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://localhost:8081/apis/registry/v2\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:199
#, no-wrap
msgid ""
"# set the connector to use for the `movies` channel to smallrye-kafka\n"
"mp.messaging.outgoing.movies.connector=smallrye-kafka\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:202
#, no-wrap
msgid ""
"# the name of the corresponding Kafka topic to `movies`\n"
"mp.messaging.outgoing.movies.topic=movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:205
#, no-wrap
msgid ""
"# set the serializer for the `movies` channel to the Apicurio Avro Serializer\n"
"mp.messaging.outgoing.movies.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:208
#, no-wrap
msgid ""
"# automatically register the schema with the registry, if not present\n"
"mp.messaging.outgoing.movies.apicurio.registry.auto-register=true\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:210
#, no-wrap
msgid "The `Movie` consumer"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:214
msgid "So, we can write records into Kafka containing our `Movie` data.  That data is serialized using Avro.  Now, it's time to implement a consumer for them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:217
msgid "Let's create `ConsumedMovieResource` that will consume `Movie` messages from the `movies-from-kafka` channel and will expose it via Server-Sent Events:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:227
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:231
#, no-wrap
msgid ""
"import org.acme.kafka.quarkus.Movie;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.jboss.resteasy.reactive.RestSseElementType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:233
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:237
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Path(\"/consumed-movies\")\n"
"public class ConsumedMovieResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:240
#, no-wrap
msgid ""
"    @Channel(\"movies-from-kafka\")\n"
"    Multi<Movie> movies;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:248
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @RestSseElementType(MediaType.TEXT_PLAIN)\n"
"    public Multi<String> stream() {\n"
"        return movies.map(movie -> String.format(\"'%s' from %s\", movie.getTitle(), movie.getYear()));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:252
msgid "The last bit of the application's code is the configuration of the `movies-from-kafka` channel in `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:256
#, no-wrap
msgid ""
"# set the connector for the incoming channel to `smallrye-kafka`\n"
"mp.messaging.incoming.movies-from-kafka.connector=smallrye-kafka\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:259
#, no-wrap
msgid ""
"# set the topic name for the channel to `movies`\n"
"mp.messaging.incoming.movies-from-kafka.topic=movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:262
#, no-wrap
msgid ""
"# set the deserializer for the `movies-from-kafka` channel to the Apicurio Avro Deserializer\n"
"mp.messaging.incoming.movies-from-kafka.value.deserializer=io.apicurio.registry.serde.avro.AvroKafkaDeserializer\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:265
#, no-wrap
msgid ""
"# disable auto-commit, Reactive Messaging handles it itself\n"
"mp.messaging.incoming.movies-from-kafka.enable.auto.commit=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:268
#, no-wrap
msgid ""
"mp.messaging.incoming.movies-from-kafka.auto.offset.reset=earliest\n"
"mp.messaging.incoming.movies-from-kafka.apicurio.registry.use-specific-avro-reader=true\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:271
#, no-wrap
msgid "The infrastructure"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:274
msgid "To use our application, we need Kafka and Apicurio Schema Registry.  The easiest way to get them running is to use `docker-compose` to start the appropriate containers."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:276
msgid "Create a `docker-compose.yaml` file at the root of the project with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:280
#, no-wrap
msgid "version: '2'\n"
msgstr "version: '2'\n"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:282
#, no-wrap
msgid "services:\n"
msgstr "services:\n"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:293
#, no-wrap
msgid ""
"  zookeeper:\n"
"    image: quay.io/strimzi/kafka:0.22.1-kafka-2.7.0\n"
"    command: [\n"
"        \"sh\", \"-c\",\n"
"        \"bin/zookeeper-server-start.sh config/zookeeper.properties\"\n"
"    ]\n"
"    ports:\n"
"      - \"2181:2181\"\n"
"    environment:\n"
"      LOG_DIR: /tmp/logs\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:309
#, no-wrap
msgid ""
"  kafka:\n"
"    image: quay.io/strimzi/kafka:0.22.1-kafka-2.7.0\n"
"    command: [\n"
"        \"sh\", \"-c\",\n"
"        \"bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}\"\n"
"    ]\n"
"    depends_on:\n"
"      - zookeeper\n"
"    ports:\n"
"      - \"9092:9092\"\n"
"    environment:\n"
"      LOG_DIR: \"/tmp/logs\"\n"
"      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n"
"      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n"
"      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:318
#, no-wrap
msgid ""
"  schema-registry:\n"
"    image: apicurio/apicurio-registry-mem:2.0.0.Final\n"
"    ports:\n"
"      - 8081:8080\n"
"    depends_on:\n"
"      - kafka\n"
"    environment:\n"
"      QUARKUS_PROFILE: prod\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:320
#, no-wrap
msgid "Running the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:322
msgid "Let's first start the Schema Registry and Kafka containers:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:325
#, no-wrap
msgid "docker-compose up\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:328
msgid "To stop the containers, use `docker-compose down`. You can also clean up the containers with `docker-compose rm`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:330
msgid "Then, start the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:333
#, no-wrap
msgid "mvn compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:337
msgid "In the second terminal, query the `ConsumedMovieResource` resource with `curl`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:340
#, no-wrap
msgid "curl -N http://localhost:8080/consumed-movies\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:343
msgid "In the third one, post a few movies:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:349
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"title\":\"The Shawshank Redemption\",\"year\":1994}' \\\n"
"  http://localhost:8080/movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:354
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"title\":\"The Godfather\",\"year\":1972}' \\\n"
"  http://localhost:8080/movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:359
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"title\":\"The Dark Knight\",\"year\":2008}' \\\n"
"  http://localhost:8080/movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:364
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"title\":\"12 Angry Men\",\"year\":1957}' \\\n"
"  http://localhost:8080/movies\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:367
msgid "Observe what is printed in the second terminal. You should see something along the lines of:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:370
#, no-wrap
msgid "data:'The Shawshank Redemption' from 1994\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:372
#, no-wrap
msgid "data:'The Godfather' from 1972\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:374
#, no-wrap
msgid "data:'The Dark Knight' from 2008\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:376
#, no-wrap
msgid "data:'12 Angry Men' from 1957\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:378
#, no-wrap
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:381
msgid "Building a native executable You can build a native executable with the usual command `./mvnw package -Dnative`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:383
msgid "Running it is as simple as executing `./target/kafka-avro-schema-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:384
#, no-wrap
msgid "Testing the application"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:386
#, no-wrap
msgid "Infrastructure for tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:388
msgid "We will now use Testcontainers to set up Kafka and Apicurio Schema Registry for tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:391
msgid "First, let's add test dependencies on REST Client, Awaitility and Strimzi to `pom.xml`. Testcontainers will be pulled in transitively by `strimzi-test-container`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:419
#, no-wrap
msgid ""
"<dependencies>\n"
"    ...\n"
"    <!-- we'll use JAX-RS Client for talking to the SSE endpoint -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-rest-client</artifactId>\n"
"        <scope>test</scope>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>io.strimzi</groupId>\n"
"        <artifactId>strimzi-test-container</artifactId>\n"
"        <version>0.22.1</version>\n"
"        <scope>test</scope>\n"
"        <exclusions>\n"
"            <exclusion>\n"
"                <groupId>org.apache.logging.log4j</groupId>\n"
"                <artifactId>log4j-core</artifactId>\n"
"            </exclusion>\n"
"        </exclusions>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>org.awaitility</groupId>\n"
"        <artifactId>awaitility</artifactId>\n"
"        <scope>test</scope>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:423
msgid "Now, let's define a link:getting-started-testing.adoc#quarkus-test-resource[QuarkusTestResourceLifecycleManager] that will create the appropriate containers:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:429
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:431
#, no-wrap
msgid "import org.testcontainers.containers.GenericContainer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:434
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
"import io.strimzi.StrimziKafkaContainer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:436
#, no-wrap
msgid "public class KafkaAndSchemaRegistryTestResource implements QuarkusTestResourceLifecycleManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:438
#, no-wrap
msgid "    private final StrimziKafkaContainer kafka = new StrimziKafkaContainer();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:440
#, no-wrap
msgid "    private GenericContainer<?> registry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:454
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        kafka.start();\n"
"        registry = new GenericContainer<>(\"apicurio/apicurio-registry-mem:2.0.0.Final\")\n"
"                .withExposedPorts(8080)\n"
"                .withEnv(\"QUARKUS_PROFILE\", \"prod\");\n"
"        registry.start();\n"
"        Map<String, String> properties = new HashMap<>();\n"
"        properties.put(\"mp.messaging.connector.smallrye-kafka.apicurio.registry.url\",\n"
"                \"http://\" + registry.getContainerIpAddress() + \":\" + registry.getMappedPort(8080) + \"/apis/registry/v2\");\n"
"        properties.put(\"kafka.bootstrap.servers\", kafka.getBootstrapServers());\n"
"        return properties;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:461
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        registry.stop();\n"
"        kafka.stop();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:463
#, no-wrap
msgid "The test"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:466
msgid "In the test, we will send movies in a loop and check if the `ConsumedMovieResource` returns what we send."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:477
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.common.http.TestHTTPResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.restassured.http.ContentType;\n"
"import org.hamcrest.Matchers;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:487
#, no-wrap
msgid ""
"import javax.ws.rs.client.Client;\n"
"import javax.ws.rs.client.ClientBuilder;\n"
"import javax.ws.rs.client.WebTarget;\n"
"import javax.ws.rs.sse.SseEventSource;\n"
"import java.net.URI;\n"
"import java.util.List;\n"
"import java.util.concurrent.CopyOnWriteArrayList;\n"
"import java.util.concurrent.ExecutorService;\n"
"import java.util.concurrent.Executors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:493
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static java.util.concurrent.TimeUnit.MILLISECONDS;\n"
"import static java.util.concurrent.TimeUnit.SECONDS;\n"
"import static org.awaitility.Awaitility.await;\n"
"import static org.hamcrest.MatcherAssert.assertThat;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:498
#, no-wrap
msgid ""
"@QuarkusTest\n"
"// register the class that sets up Testcontainers:\n"
"@QuarkusTestResource(KafkaAndSchemaRegistryTestResource.class)\n"
"public class MovieResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:501
#, no-wrap
msgid ""
"    @TestHTTPResource(\"/consumed-movies\")\n"
"    URI consumedMovies;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:507
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() throws InterruptedException {\n"
"        // create a client for `ConsumedMovieResource` and collect the consumed resources in a list\n"
"        Client client = ClientBuilder.newClient();\n"
"        WebTarget target = client.target(consumedMovies);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:509
#, no-wrap
msgid "        List<String> received = new CopyOnWriteArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:512
#, no-wrap
msgid ""
"        SseEventSource source = SseEventSource.target(target).build();\n"
"        source.register(inboundSseEvent -> received.add(inboundSseEvent.readData()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:515
#, no-wrap
msgid ""
"        // in a separate thread, feed the `MovieResource`\n"
"        ExecutorService movieSender = startSendingMovies();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:517
#, no-wrap
msgid "        source.open();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:523
#, no-wrap
msgid ""
"        // check if, after at most 5 seconds, we have at last 2 items collected, and they are what we expect:\n"
"        await().atMost(5, SECONDS).until(() -> received.size() >= 2);\n"
"        assertThat(received, Matchers.hasItems(\"'The Shawshank Redemption' from 1994\",\n"
"                \"'12 Angry Men' from 1957\"));\n"
"        source.close();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:528
#, no-wrap
msgid ""
"        // shutdown the executor that is feeding the `MovieResource`\n"
"        movieSender.shutdownNow();\n"
"        movieSender.awaitTermination(5, SECONDS);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:540
#, no-wrap
msgid ""
"    private ExecutorService startSendingMovies() {\n"
"        ExecutorService executorService = Executors.newSingleThreadExecutor();\n"
"        executorService.execute(() -> {\n"
"            while (true) {\n"
"                given()\n"
"                        .contentType(ContentType.JSON)\n"
"                        .body(\"{\\\"title\\\":\\\"The Shawshank Redemption\\\",\\\"year\\\":1994}\")\n"
"                .when()\n"
"                        .post(\"/movies\")\n"
"                .then()\n"
"                        .statusCode(202);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:548
#, no-wrap
msgid ""
"                given()\n"
"                        .contentType(ContentType.JSON)\n"
"                        .body(\"{\\\"title\\\":\\\"12 Angry Men\\\",\\\"year\\\":1957}\")\n"
"                .when()\n"
"                        .post(\"/movies\")\n"
"                .then()\n"
"                        .statusCode(202);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:558
#, no-wrap
msgid ""
"                try {\n"
"                    Thread.sleep(200L);\n"
"                } catch (InterruptedException e) {\n"
"                    break;\n"
"                }\n"
"            }\n"
"        });\n"
"        return executorService;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:565
msgid "We modified the `MovieResourceTest` that was generated together with the project. This test class has a subclass, `NativeMovieResourceIT`, that runs the same test against the native executable.  To run it, execute `mvn verify -Dnative`, or `mvn clean install -Dnative`"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:567
#, no-wrap
msgid "Avro code generation details"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:570
msgid "In this guide we used the Quarkus code generation mechanism to generate Java files from Avro schema."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:572
msgid "Under the hood, the mechanism uses `org.apache.avro:avro-compiler`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:574
msgid "You can use the following configuration properties to alter how it works:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:578
msgid "`avro.codegen.[avsc|avdl|avpr].imports` - a list of files or directories that should be compiled first thus making them importable by subsequently compiled schemas. Note that imported files should not reference each other. All paths should be relative to the `src/[main|test]/avro` directory. Passed as a comma-separated list."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:580
msgid "`avro.codegen.stringType` - the Java type to use for Avro strings. May be one of `CharSequence`, `String` or `Utf8`. Defaults to `String`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:582
msgid "`avro.codegen.createOptionalGetters` - enables generating the `getOptional...` methods that return an Optional of the requested type. Defaults to `false`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:583
msgid "`avro.codegen.enableDecimalLogicalType` - determines whether to use Java classes for decimal types, defaults to `false`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:585
msgid "`avro.codegen.createSetters` - determines whether to create setters for the fields of the record.  Defaults to `false`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:587
msgid "`avro.codegen.gettersReturnOptional` - enables generating `get...` methods that return an Optional of the requested type. Defaults to `false`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:590
msgid "`avro.codegen.optionalGettersForNullableFieldsOnly`, works in conjunction with `gettersReturnOptional` option.  If it is set, `Optional` getters will be generated only for fields that are nullable. If the field is mandatory, regular getter will be generated. Defaults to `false`"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:591
#, no-wrap
msgid "Further reading"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:594
msgid "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.9/kafka/kafka.html[SmallRye Reactive Messaging Kafka] documentation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka-schema-registry-avro.adoc:595
msgid "link:https://quarkus.io/blog/kafka-avro/[How to Use Kafka, Schema Registry and Avro with Quarkus] - a blog post on which the guide is based. It gives a good introduction to Avro and the concept of Schema Registry"
msgstr ""
