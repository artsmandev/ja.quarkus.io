msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Learn how to test your Quarkus Application.\n"
"This guide covers:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"In this guide, we expand on the initial test that was created as part of the Getting Started Guide.\n"
"We cover injection into tests and also how to test native executables."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"If you have started from the Getting Started example you should already have a completed test, including the correct\n"
"tooling setup."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"`quarkus-junit5` is required for testing, as it provides the `@QuarkusTest` annotation that controls the testing framework.\n"
"`rest-assured` is not required but is a convenient way to test HTTP endpoints, we also provide integration that automatically\n"
"sets the correct URL so no configuration is required."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Because we are using JUnit 5, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin]\n"
"must be set, as the default version does not support Junit 5:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"We also set the `java.util.logging.manager` system property to make sure tests will use the correct logmanager and `maven.home` to ensure that custom configuration\n"
"from `${maven.home}/conf/settings.xml` is applied (if any)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"This test uses HTTP to directly test our REST endpoint. When the test is run the application will be started before\n"
"the test is run."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"While Quarkus will listen on port `8080` by default, when running tests it defaults to `8081`. This allows you to run\n"
"tests while having the application running in parallel."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Quarkus also provides RestAssured integration that updates the default port used by RestAssured before the tests are run,\n"
"so no additional configuration should be required."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"When using REST Assured in your test, the connection and response timeouts are set to 30 seconds.\n"
"You can override this setting with the `quarkus.http.test-timeout` property:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"It is also possible to directly inject the URL into the test which can make is easy to use a different client. This is\n"
"done via the `@TestHTTPResource` annotation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Let's write a simple test that shows this off to load some static resources. First create a simple HTML file in\n"
"`src/main/resources/META-INF/resources/index.html` :"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n"
"a path. This currently supports both Jakarta REST endpoints, Servlets and Reactive Routes. This makes it a lot easier to see exactly which endpoints\n"
"a given test is testing."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"This currently does not support the `@ApplicationPath()` annotation to set the Jakarta REST context path. Use the\n"
"`quarkus.resteasy.path` config value instead if you want a custom context path."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n"
"will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n"
"be appended to the end of the endpoint path."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL\n"
"will end with `/hello`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"To control the RESTassured base path (i.e. the default path that serves as the root for every\n"
"request) you can use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation. This can\n"
"be applied at the class or method level. To test out greeting resource we would do:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"So far we have only covered integration style tests that test the app via HTTP endpoints, but what if we want to do unit\n"
"testing and test our beans directly?"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Quarkus supports this by allowing you to inject CDI beans into your tests via the `@Inject` annotation (in fact, tests in\n"
"Quarkus are full CDI beans, so you can use all CDI functionality). Let's create a simple test that tests the greeting\n"
"service directly without using HTTP:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"As mentioned above Quarkus tests are actually full CDI beans, and as such you can apply CDI interceptors as you would\n"
"normally. As an example, if you want a test method to run within the context of a transaction you can simply apply the\n"
"`@Transactional` annotation to the method and the transaction interceptor will handle it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"In addition to this you can also create your own test stereotypes. For example, we could create a `@TransactionalQuarkusTest`\n"
"as follows:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"If we then apply this annotation to a test class it will act as if we had applied both the `@QuarkusTest` and\n"
"`@Transactional` annotations, e.g.:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"You can use the standard Quarkus `@Transactional` annotation on tests, but this means that the changes your\n"
"test makes to the database will be persistent. If you want any changes made to be rolled back at the end of\n"
"the test you can use the `io.quarkus.test.TestTransaction` annotation. This will run the test method in a\n"
"transaction, but roll it back once the test method is complete to revert any database changes."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"While it is possible to use JUnit Jupiter callback interfaces like `BeforeEachCallback`, you might run into classloading issues because Quarkus has\n"
"         to run tests in a custom classloader which JUnit is not aware of."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"So far in all our examples we only start Quarkus once for all tests. Before the first test is run Quarkus will boot,\n"
"then all tests will run, then Quarkus will shut down at the end. This makes for a very fast testing experience however\n"
"it is a bit limited as you can't test different configurations."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"To get around this Quarkus supports the idea of a test profile. If a test has a different profile to the previously\n"
"run test then Quarkus will be shut down and started with the new profile before running the tests. This is obviously\n"
"a bit slower, as it adds a shutdown/startup cycle to the test time, but gives a great deal of flexibility."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"To reduce the amount of times Quarkus needs to restart, `io.quarkus.test.junit.util.QuarkusTestProfileAwareClassOrderer`\n"
"is registered as a global `ClassOrderer` as described in the\n"
"link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order-classes[JUnit 5 User Guide].\n"
"The behavior of this `ClassOrderer` is configurable via `junit-platform.properties` (see the source code or javadoc for more details).\n"
"It can also be disabled entirely by setting another `ClassOrderer` that is provided by JUnit 5 or even your own custom one. +\n"
"Please note that as of JUnit 5.8.2 link:https://github.com/junit-team/junit5/issues/2794[only a single `junit-platform.properties` is picked up and a warning is logged if more than one is found].\n"
"If you encounter such warnings, you can get rid of them by removing the Quarkus-supplied `junit-platform.properties` from the classpath via an exclusion:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Now we have defined our profile we need to include it on our test class.\n"
"We do this by annotating the test class with `@TestProfile(MockGreetingProfile.class)`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"All the test profile configuration is stored in a single class, which makes it easy to tell if the previous test ran with the\n"
"same configuration."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Quarkus provides the ability to limit test execution to tests with specific  `@TestProfile` annotations.\n"
"This works by leveraging the `tags` method of `QuarkusTestProfile` in conjunction with the `quarkus.test.profile.tags` system property."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Essentially, any `QuarkusTestProfile` with at least one matching tag matching the value of `quarkus.test.profile.tags` will be considered active\n"
"and all the tests annotated with `@TestProfile` of active profiles, will be run while the rest will be skipped.\n"
"This is best shown in the following example."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"`quarkus.test.profile.tags=foo`: In this case none of tests will be executed because none of the tags defined on the `QuarkusTestProfile` implementations match the value of `quarkus.test.profile.tags`.\n"
"Note that `NoQuarkusProfileTest` is not executed either because it is not annotated with `@TestProfile`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"`quarkus.test.profile.tags=test1`: In this case `SingleTagTest` and `MultipleTagsTest` will be run because the tags on their respective `QuarkusTestProfile` implementations\n"
"match the value of `quarkus.test.profile.tags`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"`quarkus.test.profile.tags=test2,test3`: In this case only `MultipleTagsTest` will be run because `MultipleTagsTest` is the only `QuarkusTestProfile` implementation whose `tags` method\n"
"matches the value of `quarkus.test.profile.tags`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Quarkus supports the use of mock objects using two different approaches. You can either use CDI alternatives to\n"
"mock out a bean for all test classes, or use `QuarkusMock` to mock out beans on a per test basis."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"To use this simply override the bean you wish to mock with a class in the `src/test/java` directory, and put the `@Alternative` and `@Priority(1)` annotations on the bean.\n"
"Alternatively, a convenient `io.quarkus.test.Mock` stereotype annotation could be used.\n"
"This built-in stereotype declares `@Alternative`, `@Priority(1)` and `@Dependent`.\n"
"For example if I have the following service:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"It is important that the alternative be present in the `src/test/java` directory rather than `src/main/java`, as otherwise\n"
"it will take effect all the time, not just when testing."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Note that at present this approach does not work with native image testing, as this would require the test alternatives\n"
"to be baked into the native image."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"The `io.quarkus.test.junit.QuarkusMock` class can be used to temporarily mock out any normal scoped\n"
"bean. If you use this method in a `@BeforeAll` method the mock will take effect for all tests on the current class,\n"
"while if you use this in a test method the mock will only take effect for the duration of the current test."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"This method can be used for any normal scoped CDI bean (e.g. `@ApplicationScoped`, `@RequestScoped` etc, basically\n"
"every scope except `@Singleton` and `@Dependent`)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Note that there is no dependency on Mockito, you can use any mocking library you like, or even manually override the\n"
"objects to provide the behaviour you require."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Using `@Inject` will get you a CDI proxy to the mock instance you install, which is not suitable for passing to methods such as `Mockito.verify`\n"
"which want the mock instance itself.\n"
"So if you need to call methods such as `verify` you should hang on to the mock instance in your test, or use `@io.quarkus.test.InjectMock`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Building on the features provided by `QuarkusMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for mocking the beans supported by `QuarkusMock`.\n"
"This functionality is available with the `@io.quarkus.test.InjectMock` annotation if the `quarkus-junit5-mockito` dependency is present."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Although the test above is good for showing the capabilities of `@InjectMock`, it is not a good representation of a real test. In a real test\n"
"we would most likely configure a mock, but then test a bean that uses the mocked bean.\n"
"Here is an example:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"By default, the `@InjectMock` annotation can be used for any normal CDI scoped bean (e.g. `@ApplicationScoped`, `@RequestScoped`).\n"
"Mocking `@Singleton` beans can be performed by adding the `@MockitoConfig(convertScopes = true)` annotation.\n"
"This will convert the `@Singleton` bean to an `@ApplicationScoped` bean for the test."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Building on the features provided by `InjectMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for spying on the beans supported by `QuarkusMock`.\n"
"This functionality is available via the `@io.quarkus.test.junit.mockito.InjectSpy` annotation which is available in the `quarkus-junit5-mockito` dependency."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Sometimes when testing you only need to verify that a certain logical path was taken, or you only need to stub out a single method's response while still executing the rest of the methods on the Spied clone. Please see link:https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#13[Mockito documentation - Spying on real objects] for more details on Spy partial mocks.\n"
"In either of those situations a Spy of the object is preferable.\n"
"Using `@InjectSpy`, the previous example could be written as follows:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"By simply annotating any test in the test suite with `@QuarkusTestResource`, Quarkus will run the corresponding `QuarkusTestResourceLifecycleManager` before any tests are run.\n"
"A test suite is also free to utilize multiple `@QuarkusTestResource` annotations, in which case all the corresponding `QuarkusTestResourceLifecycleManager` objects will be run before the tests. When using multiple test resources they can be started concurrently. For that you need to set `@QuarkusTestResource(parallel = true)`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Test resources are global, even if they are defined on a test class or custom profile, which means they will all be activated for all tests, even though we do\n"
"remove duplicates. If you want to only enable a test resource on a single test class or test profile, you can use `@QuarkusTestResource(restrictToAnnotatedClass = true)`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Quarkus provides a few implementations of `QuarkusTestResourceLifecycleManager` out of the box (see `io.quarkus.test.h2.H2DatabaseTestResource` which starts an H2 database, or `io.quarkus.test.kubernetes.client.KubernetesServerTestResource` which starts a mock Kubernetes API server),\n"
"but it is common to create custom implementations to address specific application needs.\n"
"Common cases include starting docker containers using https://www.testcontainers.org/[Testcontainers] (an example of which can be found https://github.com/quarkusio/quarkus/blob/main/test-framework/keycloak-server/src/main/java/io/quarkus/test/keycloak/server/KeycloakTestResourceLifecycleManager.java[here]),\n"
"or starting a mock HTTP server using https://wiremock.org/[Wiremock] (an example of which can be found https://github.com/geoand/quarkus-test-demo/blob/main/src/test/java/org/acme/getting/started/country/WiremockCountries.java[here])."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"When creating a custom `QuarkusTestResourceLifecycleManager` that needs to inject the something into the test class, the `inject` methods can be used.\n"
"If for example you have a test like the following:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"It is worth mentioning that this injection into the test class is not under the control of CDI and happens after CDI has performed\n"
"any necessary injections into the test class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"It is possible to write test resources that are enabled and configured using annotations. This is enabled by placing the `@QuarkusTestResource`\n"
"on an annotation which will be used to enable and configure the test resource."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"For example, this defines the `@WithKubernetesTestServer` annotation, which you can use on your tests to activate the `KubernetesServerTestResource`,\n"
"but only for the annotated test class. You can also place them on your `QuarkusTestProfile` test profiles."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"The `KubernetesServerTestResource` class has to implement the\n"
"`QuarkusTestResourceConfigurableLifecycleManager` interface in order to be configured using the previous annotation:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"If you want to make the annotation repeatable, the containing annotation type must be annotated with `@QuarkusTestResourceRepeatable`.\n"
"For example, this would define a repeatable `@WithRepeatableTestResource` annotation."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"`@QuarkusTest` has support for hang detection to help diagnose any unexpected hangs. If no progress is made for a specified\n"
"time (i.e. no JUnit callbacks are invoked) then Quarkus will print a stack trace to the console to help diagnose the hang.\n"
"The default value for this timeout is 10 minutes."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"No further action will be taken, and the tests will continue as normal (generally until CI times out), however the printed\n"
"stack traces should help diagnose why the build has failed. You can control this timeout with the\n"
"`quarkus.test.hang-detection-timeout` system property (you can also set this in application.properties, but this won't\n"
"be read until Quarkus has started, so the timeout for Quarkus start will be the default of 10 minutes)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"It is also possible to test native executables using `@QuarkusIntegrationTest`. This supports all the features mentioned in this\n"
"guide except injecting into tests (and the native executable runs in a separate non-JVM process this is not really possible)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"`@QuarkusIntegrationTest` should be used to launch and test the artifact produced by the Quarkus build, and supports testing a jar (of whichever type), a native image or container image.\n"
"Put simply, this means that if the result of a Quarkus build (`mvn package` or `gradle build`) is a jar, that jar will be launched as `java -jar ...` and tests run against it.\n"
"If instead a native image was built, then the application is launched as `./application ...` and again the tests run against the running application.\n"
"Finally, if a container image was created during the build (by including the `quarkus-container-image-jib` or `quarkus-container-image-docker` extensions and having the\n"
"`quarkus.container-image.build=true` property configured), then a container is created and run (this requires the `docker` executable being present)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"As a test annotated with `@QuarkusIntegrationTest` tests the result of the build, it should be run as part of the integration test suite - i.e. by setting `-DskipITs=false` if using Maven or the `quarkusIntTest` task if using Gradle.\n"
"These tests will **not** work if run in the same phase as `@QuarkusTest` as Quarkus has not yet created the final artifact."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Use another test runner that starts the application from the native file before the tests.\n"
"The executable is retrieved by the _Failsafe Maven Plugin_."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"While adding test-specific configuration properties using `src/test/resources/application.properties` (note there's `test`, not `main`)\n"
"is possible for unit tests, it's not possible for integration tests."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"When `@QuarkusIntegrationTest` results in launching a container (because the application was built with `quarkus.container-image.build` set to `true`), the container is launched on a predictable container network. This facilitates writing integration tests that need to launch services to support the application.\n"
"This means that `@QuarkusIntegrationTest` works out of the box with containers launched via xref:dev-services.adoc[Dev Services], but it also means that it enables using xref:quarkus-test-resource[QuarkusTestLifecycleManager] resources that launch additional containers.\n"
"This can be achieved by having your `QuarkusTestLifecycleManager` implement `io.quarkus.test.common.DevServicesContext.ContextAware`. A simple example could be the following:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"The container running the resource to test against, for example PostgreSQL via Testcontainers, is assigned an IP address from the container's network.\n"
"Use the container's \"public\" IP from its network and the \"unmapped\" port number to connect to the service.\n"
"The Testcontainers library usually return connection strings without respecting the container network, so additional code is needed to provide Quarkus the \"correct\" connection string using the container's IP on the container network and the _unmapped_ port number."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"`@QuarkusIntegrationTest` supports executing tests against an already running instance of the application. This can be achieved by setting the\n"
"`quarkus.http.test-host` system property when running the tests."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Mixing tests annotated with `@QuarkusTest` with tests annotated with either `@QuarkusDevModeTest`, `@QuarkusProdModeTest` or `@QuarkusUnitTest`\n"
"is not allowed in a single execution run (in a single Maven Surefire Plugin execution, for instance),\n"
"while the latter three can coexist."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"The reason of this restriction is that `@QuarkusTest` starts a Quarkus server for the whole lifetime of the tests execution run,\n"
"thus preventing the other tests to start their own Quarkus server."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"To alleviate this restriction, the `@QuarkusTest` annotation defines a JUnit 5 `@Tag`: `io.quarkus.test.junit.QuarkusTest`.\n"
"You can use this tag to isolate the `@QuarkusTest` test in a specific execution run, for example with the Maven Surefire Plugin:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"By default, tests should just work with xref:dev-services.adoc[Dev Services], however from some use cases you may need access to\n"
"the automatically configured properties in your tests."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"You can do this with `io.quarkus.test.common.DevServicesContext`, which can be injected directly into any `@QuarkusTest`\n"
"or `@QuarkusIntegrationTest`. All you need to do is define a field of type `DevServicesContext` and it will be automatically\n"
"injected. Using this you can retrieve any properties that have been set. Generally this is used to directly connect to a\n"
"resource from the test itself, e.g. to connect to kafka to send messages to the application under test."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Injection is also supported into objects that implement `io.quarkus.test.common.DevServicesContext.ContextAware`. If you\n"
"have a field that implements `io.quarkus.test.common.DevServicesContext.ContextAware` Quarkus will call the\n"
"`setIntegrationTestContext` method to pass the context into this object. This allows client logic to be encapsulated in\n"
"a utility class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"`QuarkusTestResourceLifecycleManager` implementations can also implement `ContextAware` to get access to these properties,\n"
"which allows you to set up the resource before Quarkus starts (e.g. configure a KeyCloak instance, add data to a database etc)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"For `@QuarkusIntegrationTest` tests that result in launcher the application as a container, `io.quarkus.test.common.DevServicesContext` also provides access to the id of the container network on which the application container was launched (via the `containerNetworkId` method).\n"
"This can be used by `QuarkusTestResourceLifecycleManager` that need to launch additional containers that the application will communicate with."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"In Quarkus, the component model is built on top CDI.\n"
"Therefore, Quarkus provides the `QuarkusComponentTestExtension`, a JUnit extension to ease the testing of components and mocking of their dependencies.\n"
"This extension is available in the `quarkus-junit5-component` dependency."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"If you need the full control over the `QuarkusComponentTestExtension` configuration then you can use the `@RegisterExtension` annotation and configure the extension programatically.\n"
"The test above could be rewritten like:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"So what exactly does the `QuarkusComponentTest` do?\n"
"It starts the CDI container and registers a dedicated xref:config-reference.adoc[configuration object].\n"
"If the test instance lifecycle is `Lifecycle#PER_METHOD` (default) then the container is started during the `before each` test phase and stopped during the `after each` test phase.\n"
"However, if  the test instance lifecycle is `Lifecycle#PER_CLASS` then the container is started during the `before all` test phase and stopped during the `after all` test phase.\n"
"The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.\n"
"Finally, the CDI request context is activated and terminated per each test method."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Unlike in regular CDI environments the test does not fail if a component injects an unsatisfied dependency.\n"
"Instead, a synthetic bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.\n"
"The bean has the `@Singleton` scope so it's shared across all injection points with the same required type and qualifiers.\n"
"The injected reference is an _unconfigured_ Mockito mock.\n"
"You can inject the mock in your test and leverage the Mockito API to configure the behavior."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Sometimes you need the full control over the bean attributes and maybe even configure the default mock behavior.\n"
"You can use the mock configurator API via the `QuarkusComponentTestExtensionBuilder#mock()` method."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"You can set the configuration properties for a test with the `@io.quarkus.test.component.TestConfigProperty` annotation or with the `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` method.\n"
"If you only need to use the default values for missing config properties, then the `@QuarkusComponentTest#useDefaultConfigProperties()` or `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` might come in useful."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"It is also possible to set configuration properties for a test method with the `@io.quarkus.test.component.TestConfigProperty` annotation.\n"
"However, if the test instance lifecycle is `Lifecycle#_PER_CLASS` this annotation can only be used on the test class and is ignored on test methods."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"If a tested component class declares an interceptor binding then you might need to mock the interception too.\n"
"There are two ways to accomplish this task.\n"
"First, you can define an interceptor class as a static nested class of the test class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_versions/main/guides/getting-started-testing.adoc
msgid ""
"Furthermore, you can also declare a \"test interceptor method\" directly on the test class.\n"
"This method is then invoked in the relevant interception phase."
msgstr ""

#. type: Title =
#: upstream/_versions/main/guides/getting-started-testing.adoc:7
#, no-wrap
msgid "Testing Your Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:20
msgid "Testing in JVM mode"
msgstr "JVM モードでのテスト"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:21
msgid "Testing in native mode"
msgstr "ネイティブモードでのテスト"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:22
msgid "Injection of resources into tests"
msgstr "テストへのリソースの注入"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:23
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:27
msgid "The completed greeter application from the xref:getting-started.adoc[Getting Started Guide]"
msgstr "link:getting-started.html[入門ガイド]に掲載されている、完了済のGreeterアプリケーション"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:28
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:34
msgid "Quarkus supports Continuous testing, but this is covered by the xref:continuous-testing.adoc[Continuous Testing Guide]."
msgstr "Quarkus は継続テストをサポートしていますが、これについては xref:continuous-testing.adoc[継続テストガイド] で説明しています。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:35
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:41
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:43
#, fuzzy
msgid "The solution is located in the `getting-started-testing` link:{quickstarts-tree-url}/getting-started-testing[directory]."
msgstr "ソリューションは `getting-started-testing` link:{quickstarts-tree-url}/getting-started-testing[ディレクトリに] あります。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:45
msgid "This guide assumes you already have the completed application from the `getting-started` directory."
msgstr "このガイドでは、 `getting-started`  ディレクトリーの完成したアプリケーションをすでに持っていることを前提としています。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:46
#, no-wrap
msgid "Recap of HTTP based Testing in JVM mode"
msgstr "JVM モードでの HTTP ベースのテストの要約"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:52
msgid "In your build file you should see 2 test dependencies:"
msgstr "ビルドファイルには、2 つのテスト依存関係が表示されます。"

#. type: Block title
#: upstream/_versions/main/guides/getting-started-testing.adoc:53
#, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: Block title
#: upstream/_versions/main/guides/getting-started-testing.adoc:70
#, no-wrap
msgid "Gradle"
msgstr "Gradle"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:106
msgid "The project should also contain a simple test:"
msgstr "プロジェクトには簡単なテストも含まれているはずです:"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:148
#, no-wrap
msgid "Controlling the test port"
msgstr "テストポートの制御"

#. type: Block title
#: upstream/_versions/main/guides/getting-started-testing.adoc:154
#, no-wrap
msgid "Changing the test port"
msgstr "テストポートの変更"

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:157
msgid "You can configure the ports used by tests by configuring `quarkus.http.test-port` for HTTP and `quarkus.http.test-ssl-port` for HTTPS in your `application.properties`:"
msgstr " `application.properties` の `quarkus.http.test-port` を設定することで、を HTTP 用にテストで使われるポートを設定出来、 `quarkus.http.test-ssl-port` を設定することで HTTPS 用にテストで使用するポートを設定することが出来ます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:163
msgid "`0` will result in the use of a random port (assigned by the operating system)."
msgstr "`0` を使用すると、(オペレーティングシステムによって割り当てられた)ランダムなポートが使用されることになります。"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:168
#, no-wrap
msgid "Controlling HTTP interaction timeout"
msgstr "HTTP インタラクションタイムアウトの制御"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:178
#, no-wrap
msgid "Injecting a URI"
msgstr "URI の挿入"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:200
msgid "We will create a simple test to ensure that this is being served correctly:"
msgstr "これが正しく提供されているかどうかを確認するための簡単なテストを作成します:"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:233
msgid "This annotation allows you to directly inject the URL of the Quarkus instance, the value of the annotation will be the path component of the URL"
msgstr "このアノテーションを使用すると、QuarkusインスタンスのURLを直接注入することができます。アノテーションの値は、URLのパス部分になります。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:235
msgid "For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL."
msgstr "今のところ `@TestHTTPResource`  では、URL の `URI` , `URL` , `String`  表現を注入することができます。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:236
#, no-wrap
msgid "Testing a specific endpoint"
msgstr "特定のエンドポイントのテスト"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:243
msgid "For the purposes of these examples I am going to assume we have an endpoint that looks like the following:"
msgstr "これらの例では、以下のようなエンドポイントを想定しています:"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:260
#, no-wrap
msgid "TestHTTPResource"
msgstr "テストHTTPリソース"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:301
#, no-wrap
msgid "RESTassured"
msgstr "RESTassured"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:334
msgid "This tells RESTAssured to prefix all requests with `/hello`."
msgstr "これにより、RESTAssured はすべてのリクエストの前に `/hello` を付けます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:335
msgid "Note we don't need to specify a path here, as `/hello` is the default for this test"
msgstr "このテストでは `/hello`  がデフォルトなので、ここでパスを指定する必要はないことに注意してください。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:336
#, no-wrap
msgid "Injection into tests"
msgstr "テストへの注入"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:370
msgid "The `GreetingService` bean will be injected into the test"
msgstr "`GreetingService`  Beanがテストに注入されます。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:371
#, no-wrap
msgid "Applying Interceptors to Tests"
msgstr "テストへのインターセプターの適用"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:411
#, no-wrap
msgid "Tests and Transactions"
msgstr "テストとトランザクション"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:418
#, no-wrap
msgid "Enrichment via QuarkusTest*Callback"
msgstr "QuarkusTest* コールバックによる強化"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:421
msgid "Alternatively or additionally to an interceptor, you can enrich *all* your `@QuarkusTest` classes by implementing the following callback interfaces:"
msgstr "インターセプターの代わりに、あるいはインターセプターに加えて、以下のコールバックインターフェースを実装することで、 *すべての* `@QuarkusTest` クラスを充実させることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:423
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeClassCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestBeforeClassCallback`"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:424
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback`"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:425
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback`"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:426
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeTestExecutionCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestBeforeTestExecutionCallback`"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:427
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterTestExecutionCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestAfterTestExecutionCallback`"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:428
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback`"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:430
msgid "Optionally, you can enable these callbacks also for the `@QuarkusIntegrationTest` tests if the property `quarkus.test.enable-callbacks-for-integration-tests` is `true`."
msgstr "オプションとして、プロパティ `quarkus.test.enable-callbacks-for-integration-tests` を `true` とすることで、これらのコールバックを `@QuarkusIntegrationTest` テストでも有効にすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:432
msgid "Such a callback implementation has to be registered as a \"service provider\" as defined by `java.util.ServiceLoader`."
msgstr "このようなコールバックの実装は、 `java.util.ServiceLoader`  で定義されている「サービスプロバイダ」として登録する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:434
msgid "E.g. the following sample callback:"
msgstr "例えば、以下のようなサンプルコールバックです:"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:450
msgid "has to be registered via `src/main/resources/META-INF/services/io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback` as follows:"
msgstr "次のように、`src/main/resources/META-INF/services/io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback` を介して登録する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:456
msgid "It is possible to read annotations from the test class or method to control what the callback shall be doing."
msgstr "テストクラスやメソッドからアノテーションを読み込んで、コールバックが何をするかを制御することができます。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:461
#, no-wrap
msgid "Testing Different Profiles"
msgstr "異なるプロファイルのテスト"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:493
#, no-wrap
msgid "Writing a Profile"
msgstr "プロフィールの書き方"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:496
msgid "To implement a test profile we need to implement `io.quarkus.test.junit.QuarkusTestProfile`:"
msgstr "テストプロファイルを実装するには、 `io.quarkus.test.junit.QuarkusTestProfile` ."

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:606
msgid "All these methods have default implementations so just override the ones you need to override."
msgstr "これらのメソッドにはすべてデフォルトの実装があるため、オーバーライドが必要なメソッドのみオーバーライドします。"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:613
#, no-wrap
msgid "Running specific tests"
msgstr "特定のテストの実行"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:623
msgid "First let's define a few `QuarkusTestProfile` implementations like so:"
msgstr "まず、次のようないくつかの `QuarkusTestProfile` 実装を定義しましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:648
msgid "Now let's assume that we have the following tests:"
msgstr "ここで、次のテストがあると仮定します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:701
msgid "Let's consider the following scenarios:"
msgstr "次のシナリオを考えてみましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:703
msgid "`quarkus.test.profile.tags` is not set: All tests will be executed."
msgstr "`quarkus.test.profile.tags` が設定されていない: すべてのテストが実行されます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:708
msgid "`quarkus.test.profile.tags=test1,test3`: This case results in the same tests being executed as the previous case."
msgstr "`quarkus.test.profile.tags=test1,test3`: この場合、前の場合と同じテストが実行されます。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:711
#, no-wrap
msgid "Mock Support"
msgstr "モックサポート"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:716
#, no-wrap
msgid "CDI `@Alternative` mechanism."
msgstr "CDI `@Alternative`  メカニズム"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:736
msgid "I could mock it with the following class in `src/test/java`:"
msgstr "`src/test/java`  で以下のクラスでモックできました:"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:750
msgid "Overrides the `@Dependent` scope declared on the `@Mock` stereotype."
msgstr "`@Mock`  ステレオタイプで宣言された `@Dependent`  スコープをオーバーライドします。"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:758
#, no-wrap
msgid "Mocking using QuarkusMock"
msgstr "QuarkusMock を使用したモッキング"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:768
msgid "An example usage could look like:"
msgstr "使用例は次のようになります:"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:825
msgid "As the injected instance is not available here we use `installMockForType`, this mock is used for both test methods"
msgstr "インジェクションされたインスタンスはここでは利用できないので、 `installMockForType` を使用します。このモックは両方のテストメソッドに使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:826
msgid "We use `installMockForInstance` to replace the injected bean, this takes effect for the duration of the test method."
msgstr "私たちは `installMockForInstance`  を使用して注入されたBeanを置き換えます。"

#. type: Title ====
#: upstream/_versions/main/guides/getting-started-testing.adoc:834
#, no-wrap
msgid "Further simplification with `@InjectMock`"
msgstr "`@InjectMock` での更なる単純化"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:840
msgid "Using `@InjectMock`, the previous example could be written as follows:"
msgstr "`@InjectMock`  を使用すると、先ほどの例は次のように書くことができます:"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:888
#, fuzzy
msgid "`@InjectMock` results in a Mockito mock being created, which is then available in test methods of the test class (other test classes are *not* affected by this)"
msgstr "`@InjectMock` その結果、Mockitoのモックが作成され、テストクラスのテストメソッドで利用できるようになります（他のテストクラスはこの影響を *受けません* ）。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:889
msgid "The `mockableBean1` is configured here for every test method of the class"
msgstr "クラスのすべてのテストメソッドに対して `mockableBean1`  が設定されています。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:890
msgid "Since the `mockableBean2` mock has not been configured, it will return the default Mockito response."
msgstr "`mockableBean2`  のモックが設定されていないので、デフォルトの Mockito レスポンスを返します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:891
msgid "In this test the `mockableBean2` is configured, so it returns the configured response."
msgstr "このテストでは、 `mockableBean2`  が設定されているので、設定されたレスポンスを返します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:939
msgid "Since we configured `greetingService` as a mock, the `GreetingResource` which uses the `GreetingService` bean, we get the mocked response instead of the response of the regular `GreetingService` bean"
msgstr "`greetingService`  をモックとして設定したので、 `GreetingService`  Beanを使用する `GreetingResource`  は、通常の `GreetingService` Beanのレスポンスの代わりにモックされたレスポンスを取得します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:945
msgid "This is considered an advanced option and should only be performed if you fully understand the consequences of changing the scope of the bean."
msgstr "これは高度なオプションと見なされ、Bean のスコープを変更することで引き起こされる結果を完全に理解している場合にのみ実行する必要があります。"

#. type: Title ====
#: upstream/_versions/main/guides/getting-started-testing.adoc:946
#, no-wrap
msgid "Using Spies instead of Mocks with `@InjectSpy`"
msgstr " `@InjectSpy` で、モックの代わりにスパイを使用する"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1009
msgid "Instead of overriding the value, we just want to ensure that the greet method on our `GreetingService` was called by this test."
msgstr "値をオーバーライドするのではなく、 `GreetingService`  の greet メソッドがこのテストで呼び出されたことを確認したいだけです。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1010
#, fuzzy
msgid "Here we are telling the Spy to return \"hi\" instead of \"hello\". When the `GreetingResource` requests the greeting from `GreetingService` we get the mocked response instead of the response of the regular `GreetingService` bean. Sometimes it's impossible or impractical to use `when(Object)` for stubbing spies. Therefore when using spies please consider `doReturn|Answer|Throw()` family of methods for stubbing."
msgstr "ここでは、Spyに \"hello \"の代わりに \"hi \"を返すように指示しています。 `GreetingResource` が `GreetingService` に挨拶を要求すると、通常の `GreetingService` Bean の応答の代わりに、モックされた応答が返ってきます。スパイをスタブするために `when(Object)` を使用することが不可能であったり、現実的でなかったりすることがあります。したがって、スパイを使用する場合は、スタブ用のメソッドである `doReturn|Answer|Throw()` ファミリーを検討してください。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1011
msgid "We are verifying that we get the mocked response from the Spy."
msgstr "私たちは、スパイからのモックされた応答を得ることを検証しています。"

#. type: Title ====
#: upstream/_versions/main/guides/getting-started-testing.adoc:1012
#, no-wrap
msgid "Using `@InjectMock` with `@RestClient`"
msgstr "`@InjectMock`  との併用 `@RestClient`"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1015
msgid "The `@RegisterRestClient` registers the implementation of the rest-client at runtime, and because the bean needs to be a regular scope, you have to annotate your interface with `@ApplicationScoped`."
msgstr "`@RegisterRestClient`  は、実行時に rest-client の実装を登録しています。Beanは通常のスコープである必要があるため、インターフェイスに `@ApplicationScoped` を付与する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1031
msgid "For the test class here is an example:"
msgstr "テストクラスの例です:"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1055
msgid "Indicate that this injection point is meant to use an instance of `RestClient`."
msgstr "この注入ポイントが `RestClient`  のインスタンスを使用することを意味していることを示します。"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1056
#, no-wrap
msgid "Mocking with Panache"
msgstr "Mocking with Panache"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1059
msgid "If you are using the `quarkus-hibernate-orm-panache` or `quarkus-mongodb-panache` extensions, check out the xref:hibernate-orm-panache.adoc#mocking[Hibernate ORM with Panache Mocking] and xref:mongodb-panache.adoc#mocking[MongoDB with Panache Mocking] documentation for the easiest way to mock your data access."
msgstr "`quarkus-hibernate-orm-panache`  や `quarkus-mongodb-panache` のエクステンションを使っている場合は、xref:hibernate-orm-panache.adoc#mocking[Hibernate ORM と Panache モック] および xref:mongodb-panache.adoc#mocking[MongoDB と Panache モック ]のドキュメントをチェックして、データアクセスをモックする最も簡単な方法を確認してください。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1060
#, no-wrap
msgid "Testing Security"
msgstr "セキュリティーのテスト"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1063
msgid "If you are using Quarkus Security, check out the xref:security-testing.adoc[Testing Security] section for information on how to easily test security features of the application."
msgstr "Quarkus Securityを使用している場合、アプリケーションのセキュリティー機能を簡単にテストする方法については、xref:security-testing.adoc[セキュリティーのテスト] のセクションをご覧ください。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1065
#, no-wrap
msgid "Starting services before the Quarkus application starts"
msgstr "Quarkus アプリケーションの開始前にサービスを開始する"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1068
msgid "A very common need is to start some services on which your Quarkus application depends, before the Quarkus application starts for testing. To address this need, Quarkus provides `@io.quarkus.test.common.QuarkusTestResource` and `io.quarkus.test.common.QuarkusTestResourceLifecycleManager`."
msgstr "非常に一般的なニーズは、Quarkusアプリケーションがテストを開始する前に、Quarkusアプリケーションに依存するいくつかのサービスを開始することです。このニーズに対応するために、Quarkusでは、 `@io.quarkus.test.common.QuarkusTestResource`  と `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` を提供します。"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1081
#, no-wrap
msgid "Altering the test class"
msgstr "テストクラスの変更"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1102
msgid "Making `MyWireMockResource` inject the `wireMockServer` field can be done as shown in the `inject` method of the following code snippet:"
msgstr "次のコードスニペットの `inject` メソッドに示すように、`MyWireMockResource` に `wireMockServer` フィールドを注入させることができます。"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1137
#, no-wrap
msgid "Annotation-based test resources"
msgstr "アノテーションベースのテストリソース"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1215
#, no-wrap
msgid "Hang Detection"
msgstr "ハング検出"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1226
#, no-wrap
msgid "Native Executable Testing"
msgstr "ネイティブ実行可能ファイルテスト"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1233
msgid "This is covered in the xref:building-native-image.adoc[Native Executable Guide]."
msgstr "これについては、xref:building-native-image.adoc[ネイティブ実行可能ファイルガイド] で説明されています。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1235
#, no-wrap
msgid "Using `@QuarkusIntegrationTest`"
msgstr "Using `@QuarkusIntegrationTest`"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1244
#, fuzzy
msgid "This is a black box test that supports the same set features and has the same limitations."
msgstr "これは、同じセット機能をサポートし、同じ制限を持つブラックボックステストです。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1252
msgid "The `pom.xml` file contains:"
msgstr "`pom.xml` ファイルには以下が含まれます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1278
msgid "This instructs the failsafe-maven-plugin to run integration-test."
msgstr "これは、failsafe-maven-plugin に統合テストを実行するように指示します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1280
msgid "Then, open the `src/test/java/org/acme/quickstart/GreetingResourceIT.java`. It contains:"
msgstr "次に、`src/test/java/org/acme/quickstart/GreetingResourceIT.java` を開きます。次の内容が含まれています:"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1298
msgid "We extend our previous tests as a convenience, but you can also implement your tests."
msgstr "便宜上、以前のテストを拡張していますが、独自のテストを実装することもできます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1300
msgid "More information can be found in the link:building-native-image#testing-the-native-executable[Testing the native executable Guide]."
msgstr "詳細については、次のリンクを参照してください:  building-native-image#testing-the-native-executable[ネイティブ実行可能ファイルのテストのガイド]"

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:1304
#, fuzzy
msgid "When the application is tested using `@QuarkusIntegrationTest` it is launched using the `prod` configuration profile, but this can be changed using the `quarkus.test.integration-test-profile` property."
msgstr "`@QuarkusIntegrationTest` を使ってアプリケーションをテストすると、 `prod` の設定プロファイルを使って起動しますが、これは `quarkus.test.integration-test-profile` プロパティを使って変更することができます。"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1312
#, no-wrap
msgid "Launching containers"
msgstr "コンテナーの起動"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1323
msgid "The following example illustrates the use with PostgreSQL, but the approach is applicable to all containers."
msgstr "次の例は PostgreSQL での使用法を示していますが、このアプローチはすべてのコンテナーに適用できます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1392
msgid "`CustomResource` would be activated on a `@QuarkusIntegrationTest` using `@QuarkusTestResource` as is described in the corresponding section of this doc."
msgstr "このドキュメントの対応するセクションで説明されているように、`CustomResource` は `@QuarkusTestResource` を使用して `@QuarkusIntegrationTest` でアクティブ化されます。"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1393
#, no-wrap
msgid "Executing against a running application"
msgstr "実行中のアプリケーションに対する実行"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1399
msgid "An example use of this could be the following Maven command, that forces `@QuarkusIntegrationTest` to execute against that is accessible at `http://1.2.3.4:4321`:"
msgstr "次の Maven コマンドはその使用例で、`@ QuarkusIntegrationTest` を強制的に実行し、`http://1.2.3.4:4321` からアクセスできます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1406
#, fuzzy
msgid "To test against a running instance that only accepts SSL/TLS connection (example: `https://1.2.3.4:4321`) set the system property `quarkus.http.test-ssl-enabled` to `true`."
msgstr "SSL/TLS接続のみを受け付ける実行中のインスタンスに対してテストするには（例： `https://1.2.3.4:4321` ) システム・プロパティ `quarkus.http.test-ssl-enabled` を `true` に設定する。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1407
#, no-wrap
msgid "Mixing `@QuarkusTest` with other type of tests"
msgstr "`@QuarkusTest` と他のタイプのテストを混合"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1453
#, no-wrap
msgid "Running `@QuarkusTest` from an IDE"
msgstr "IDE から `@QuarkusTest`  を実行する"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1456
msgid "Most IDEs offer the possibility to run a selected class as a JUnit test directly. For this you should set a few properties in the settings of your chosen IDE:"
msgstr "ほとんどの IDE では、選択したクラスを JUnit テストとして直接実行できるようになっています。そのためには、選択した IDE の設定でいくつかのプロパティーを設定する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1458
msgid "`java.util.logging.manager` (see xref:logging.adoc[Logging Guide])"
msgstr "`java.util.logging.manager` (xref:logging.adoc[ロギングガイド] を参照)"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1460
msgid "`maven.home` (only if there are any custom settings in `${maven.home}/conf/settings.xml`, see xref:maven-tooling.adoc[Maven Guide])"
msgstr "`maven.home` (`${maven.home}/conf/settings.xml` にカスタム設定がある場合のみ)、xref:maven-tooling.adoc[Maven Guide] を参照)"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1462
msgid "`maven.settings` (in case a custom version of `settings.xml` file should be used for the tests)"
msgstr "`maven.settings`  (カスタム版の `settings.xml`  ファイルをテストに使用する場合)"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1463
#, no-wrap
msgid "Eclipse separate JRE definition"
msgstr "Eclipse の別個の JRE 定義"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1466
msgid "Copy your current \"Installed JRE\" definition into a new one, where you will add the properties as a new VM arguments:"
msgstr "現在の\"Installed JRE\"定義を新しい定義にコピーし、新しいVMの引数としてプロパティーを追加します:"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1468
msgid "`-Djava.util.logging.manager=org.jboss.logmanager.LogManager`"
msgstr "`-Djava.util.logging.manager=org.jboss.logmanager.LogManager`"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1470
msgid "`-Dmaven.home=<path-to-your-maven-installation>`"
msgstr "`-Dmaven.home=&amp;lt;path-to-your-maven-installation>`"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1472
msgid "Use this JRE definition as your Quarkus project targeted runtime and the workaround will be applied to any \"Run as JUnit\" configuration."
msgstr "このJRE定義をQuarkusプロジェクトのターゲットランタイムとして使用すると、「Run as JUnit」設定に回避策が適用されます。"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1473
#, no-wrap
msgid "VSCode \"run with\" configuration"
msgstr "VSCode \"run with\" 設定"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1476
msgid "The `settings.json` placed in the root of your project directory or in the workspace will need the following workaround in your test configuration:"
msgstr "プロジェクトディレクトリーやワークスペースのルートにある `settings.json` には、テスト設定で次の回避策が必要です。"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1488
#, no-wrap
msgid "IntelliJ IDEA JUnit template"
msgstr "IntelliJ IDEA JUnit テンプレート"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1491
msgid "Nothing needed in IntelliJ IDEA because the IDE will pick the `systemPropertyVariables` from the surefire plugin configuration in `pom.xml`."
msgstr "IntelliJ IDEA では何も必要ありません。なぜなら、IDEは `systemPropertyVariables` を `pom.xml`の surefire プラグイン設定から取得するからです。"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1492
#, no-wrap
msgid "Testing Dev Services"
msgstr "開発サービスのテスト"

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1517
#, fuzzy, no-wrap
msgid "Testing Components"
msgstr "テスト・コンポーネント"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1520
#, fuzzy
msgid "This feature is experimental and the API may change in the future."
msgstr "この機能は実験的なもので、APIは将来変更される可能性があります。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1526
#, fuzzy
msgid "Let's have a component `Foo`:"
msgstr "`Foo` というコンポーネントがある："

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1549
#, fuzzy
msgid "`Foo` is an `@ApplicationScoped` CDI bean."
msgstr "`Foo` は CDI Beanである。 `@ApplicationScoped` "

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1550
#, fuzzy
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr "`Foo` メソッド を宣言している に依存している。 `ping()` `Charlie` "

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1551
#, fuzzy
msgid "`Foo` depends on the config property `bar`."
msgstr "`Foo` は、コンフィグプロパティ に依存する。 `bar`"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1553
#, fuzzy
msgid "Then a component test could look like:"
msgstr "コンポーネントテストは次のようになる："

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1583
#, fuzzy
msgid "The `QuarkusComponentTest` annotation registers the JUnit extension."
msgstr "`QuarkusComponentTest` アノテーションは JUnit エクステンションを登録します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1584
#, fuzzy
msgid "Sets a configuration property for the test."
msgstr "テストの設定プロパティを設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1585
#, fuzzy
msgid "The test injects the component under the test. The types of all fields annotated with `@Inject` are considered the component types under test. You can also specify additional component classes via `@QuarkusComponentTest#value()`. Furthermore, the static nested classes declared on the test class are components too."
msgstr "テストは、テスト対象のコンポーネントを注入する。 `@Inject` でアノテーションされたすべてのフィールドの型が、テスト対象のコンポーネントの型とみなされます。また、 `@QuarkusComponentTest#value()` を使って追加のコンポーネントクラスを指定することもできます。さらに、テストクラス上で宣言された静的な入れ子クラスもコンポーネントとなります。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1586
#, fuzzy
msgid "The test also injects `Charlie`, a dependency for which a synthetic `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr "このテストでは、 `Charlie` という依存関係も注入します。この依存関係には、合成 `@Singleton` Bean が自動的に登録されます。注入された参照は「未構成」のMockitoモックです。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1587
#, fuzzy
msgid "We can leverage the Mockito API in a test method to configure the behavior."
msgstr "テスト・メソッドでMockito APIを活用し、動作を設定することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1620
#, fuzzy
msgid "The `QuarkusComponentTestExtension` is configured in a static field of the test class."
msgstr "`QuarkusComponentTestExtension` は、テスト・クラスの静的フィールドで設定される。"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1621
#, fuzzy, no-wrap
msgid "Lifecycle"
msgstr "ライフサイクル"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1630
#, fuzzy, no-wrap
msgid "Auto Mocking Unsatisfied Dependencies"
msgstr "不満足な依存関係を自動的にモックする"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1638
#, fuzzy, no-wrap
msgid "Custom Mocks For Unsatisfied Dependencies"
msgstr "不満足な依存関係のためのカスタムモック"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1643
#, no-wrap
msgid "Configuration"
msgstr "設定"

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1651
#, fuzzy, no-wrap
msgid "Mocking CDI Interceptors"
msgstr "CDIインターセプターをモックする"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1699
#, fuzzy
msgid "`@SimpleBinding` is an interceptor binding."
msgstr "`@SimpleBinding` はインターセプター・バインディングである。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1700
#, fuzzy
msgid "The interceptor class is automatically considered a tested component."
msgstr "インターセプター・クラスは自動的にテストされたコンポーネントとみなされる。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1702
#, fuzzy
msgid "Static nested classed declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr "`@QuarkusComponentTest` でアノテーションされたテスト・クラス上で宣言された静的ネスト・クラスは、 `@QuarkusTest` を実行する際に Bean 発見から除外され、意図しない CDI 衝突を防ぎます。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1743
#, fuzzy
msgid "The interceptor bindings of the resulting interceptor are specified by annotating the method with the interceptor binding types."
msgstr "結果として得られるインターセプターのインターセプター・バインディングは、そのメソッドにインターセプター・バインディングの型をアノテーションすることで指定します。"

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1743
#, fuzzy
msgid "Defines the interception type."
msgstr "インターセプトのタイプを定義する。"
