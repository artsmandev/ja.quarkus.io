# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-20 11:32+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/rest-client.adoc:6
#, no-wrap
msgid "Using the legacy REST Client"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:14
msgid "This guide is about the REST Client compatible with https://resteasy.dev[RESTEasy Classic] which used to be the default Jakarta REST (formerly known as JAX-RS) implementation until Quarkus 2.8."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:18
msgid "It is now recommended to use RESTEasy Reactive, which supports equally well traditional blocking workloads and reactive workloads.  For more information about RESTEasy Reactive, please see the xref:rest-client-reactive.adoc[REST Client Reactive guide] and, for the server side, the xref:rest-json.adoc[introductory REST JSON guide] or the more detailed xref:resteasy-reactive.adoc[RESTEasy Reactive guide]."
msgstr "現在では、従来のブロック型ワークロードとリアクティブ型ワークロードを同様にサポートするRESTEasy Reactiveの使用が推奨されています。RESTEasy Reactiveの詳細については、 link:rest-client-reactive.html[REST Client Reactiveガイド]、サーバーサイドについては、 link:rest-json.html[REST JSON入門ガイド]、またはより詳細な link:resteasy-reactive.html[RESTEasy Reactiveガイド]を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:22
msgid "This guide explains how to use the RESTEasy REST Client in order to interact with REST APIs with very little effort."
msgstr "このガイドでは、MicroProfile REST Clientを使用して、ほとんど手間をかけずにREST APIとやりとりする方法を説明します。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:24
msgid "there is another guide if you need to write server xref:rest-json.adoc[JSON REST APIs]."
msgstr "サーバーサイドで JSON REST API を書く必要がある場合は、link:rest-json.html[JSON REST API ガイド]を参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:25
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:29
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:33
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:35
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:37
msgid "The solution is located in the `rest-client-quickstart` {quickstarts-tree-url}/rest-client-quickstart[directory]."
msgstr "ソリューションは `rest-client-quickstart` {quickstarts-tree-url}/rest-client-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:38
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:41
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:47
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr "このコマンドは、REST エンドポイントを持つ Maven プロジェクトを生成し、 `rest-client` と `resteasy-jackson` のエクステンションをインポートします。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:49
msgid "the `resteasy` and `resteasy-jackson` extensions for the REST server support;"
msgstr "REST サーバーのサポートのために `resteasy` と `resteasy-jackson` のエクステンションを使用しています。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:50
msgid "the `rest-client` and `rest-client-jackson` extensions for the REST client support."
msgstr "REST クライアントのサポートのために `rest-client` と `rest-client-jackson` のエクステンションを使用しています。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:53
msgid "If you already have your Quarkus project configured, you can add the `rest-client` and the `rest-client-jackson` extensions to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、 `rest-client` と `rest-client-jackson` のエクステンションをプロジェクトに追加することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:58
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます。"

#. type: Block title
#: upstream/_versions/main/guides/rest-client.adoc:60
#: upstream/_versions/main/guides/rest-client.adoc:669
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:70
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-jackson</artifactId>\n"
"</dependency>\n"

#. type: Block title
#: upstream/_versions/main/guides/rest-client.adoc:73
#: upstream/_versions/main/guides/rest-client.adoc:681
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:77
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-rest-client\")\n"
"implementation(\"io.quarkus:quarkus-rest-client-jackson\")\n"
msgstr ""
"implementation(\"io.quarkus:quarkus-rest-client\")\n"
"implementation(\"io.quarkus:quarkus-rest-client-jackson\")\n"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:79
#, no-wrap
msgid "Setting up the model"
msgstr "モデルの設定"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:83
msgid "In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.  Our first order of business is to set up the model we will be using, in the form of an `Extension` POJO."
msgstr "このガイドでは、 link:https://stage.code.quarkus.io[stage.code.quarkus.io] サービスが提供するREST APIの一部を利用する方法をデモします。まず最初に、 使用するモデルを`Extension` POJO の形式でセットアップします。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:85
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr "`src/main/java/org/acme/rest/client/Extension.java` ファイルを作成し、以下の内容を設定します。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:89
#: upstream/_versions/main/guides/rest-client.adoc:111
#: upstream/_versions/main/guides/rest-client.adoc:158
#: upstream/_versions/main/guides/rest-client.adoc:274
#: upstream/_versions/main/guides/rest-client.adoc:309
#: upstream/_versions/main/guides/rest-client.adoc:365
#: upstream/_versions/main/guides/rest-client.adoc:393
#: upstream/_versions/main/guides/rest-client.adoc:448
#: upstream/_versions/main/guides/rest-client.adoc:476
#: upstream/_versions/main/guides/rest-client.adoc:541
#: upstream/_versions/main/guides/rest-client.adoc:575
#: upstream/_versions/main/guides/rest-client.adoc:701
#, no-wrap
msgid "package org.acme.rest.client;\n"
msgstr "package org.acme.rest.client;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:91
#, no-wrap
msgid "import java.util.List;\n"
msgstr "import java.util.List;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:93
#, no-wrap
msgid "public class Extension {\n"
msgstr "public class Extension {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:98
#, no-wrap
msgid ""
"    public String id;\n"
"    public String name;\n"
"    public String shortName;\n"
"    public List<String> keywords;\n"
msgstr ""
"    public String id;\n"
"    public String name;\n"
"    public String shortName;\n"
"    public List<String> keywords;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:100
#: upstream/_versions/main/guides/rest-client.adoc:386
#: upstream/_versions/main/guides/rest-client.adoc:424
#: upstream/_versions/main/guides/rest-client.adoc:761
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:103
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr "上記のモデルは、サービスによって提供されるフィールドのサブセットに過ぎませんが、このガイドの目的には十分です。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:104
#, no-wrap
msgid "Create the interface"
msgstr "インターフェースの作成"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:107
msgid "Using the RESTEasy REST Client is as simple as creating an interface using the proper Jakarta REST and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:114
#: upstream/_versions/main/guides/rest-client.adoc:374
#: upstream/_versions/main/guides/rest-client.adoc:457
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:119
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:123
#: upstream/_versions/main/guides/rest-client.adoc:170
#: upstream/_versions/main/guides/rest-client.adoc:378
#: upstream/_versions/main/guides/rest-client.adoc:463
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"public interface ExtensionsService {\n"
msgstr ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"public interface ExtensionsService {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:127
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam String id);\n"
"}\n"
msgstr ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam String id);\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:130
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr "`getById` メソッドは、私たちのコードに、Code Quarkus API からidを指定してエクステンションを問い合わせる機能を与えます。クライアントがすべてのネットワーキングとマーシャリングを処理してくれるので、このような技術的な詳細は一切ありません。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:132
msgid "The purpose of the annotations in the code above is the following:"
msgstr "上のコードのアノテーションの目的は以下の通りです。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:135
msgid "`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for CDI injection as a REST Client"
msgstr "`@RegisterRestClient` により、Quarkusは、このインターフェイスがRESTクライアントとしてCDIインジェクションに利用可能であることを知ることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:136
msgid "`@Path`, `@GET` and `@QueryParam` are the standard Jakarta REST annotations used to define how to access the service"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:143
msgid "When a JSON extension is installed such as `quarkus-rest-client-jackson` or `quarkus-rest-client-jsonb`, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream` respectively)."
msgstr "`quarkus-rest-client-jackson` や `quarkus-rest-client-jsonb` などの JSON エクステンションがインストールされている場合、メディアタイプが `@Produces` や `@Consumes` アノテーションで明示的に設定されていない限り、Quarkus はほとんどの戻り値に `application/json` メディアタイプをデフォルトで使用します( `String` や `File` などのよく知られたタイプには例外があり、それぞれ `text/plain` と `application/octet-stream` がデフォルトとなっています)。"

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:146
msgid "If you don't want JSON by default you can set `quarkus.resteasy-json.default-json=false` and the default will change back to being auto-negotiated. If you set this you will need to add `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use JSON."
msgstr "デフォルトでJSONを使用したくない場合は、 `quarkus.resteasy-json.default-json=false` を設定すると、デフォルトは自動ネゴシエーションに戻ります。これを設定した場合、JSON を使用するためには `@Produces(MediaType.APPLICATION_JSON)` と `@Consumes(MediaType.APPLICATION_JSON)` をエンドポイントに追加する必要があります。"

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:149
msgid "If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.  It will allow to narrow down the number of Jakarta REST providers (which can be seen as converters) included in the native executable."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client.adoc:151
#, no-wrap
msgid "Path Parameters"
msgstr "パスパラメーター"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:154
msgid "If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of (or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in a mock example below."
msgstr "GETリクエストにパスパラメータが必要な場合は、 `@QueryParam` の代わりに（または追加で） `@PathParam(\"parameter-name\")` を利用することができます。パスとクエリパラメータは、必要に応じて組み合わせることができます（以下のモックの例を参照してください）。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:162
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:166
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:175
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/stream/{stream}\")\n"
"    Set<Extension> getByStream(@PathParam String stream, @QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Path(\"/stream/{stream}\")\n"
"    Set<Extension> getByStream(@PathParam String stream, @QueryParam(\"id\") String id);\n"
"}\n"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:178
#, no-wrap
msgid "Create the configuration"
msgstr "コンフィグレーションの作成"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:182
msgid "In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.  The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr "REST 呼び出しが行われるベース URL を決定するために、REST クライアントは `application.properties` からの設定を使用します。プロパティーの名前は、以下のコードで表示される特定の規則に従う必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:188
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".url=https://stage.code.quarkus.io/api # // <1>\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".scope=jakarta.inject.Singleton # // <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:192
msgid "Having this configuration means that all requests performed using `ExtensionsService` will use `https://stage.code.quarkus.io` as the base URL.  Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client`."
msgstr "この設定をすると、 `ExtensionsService` を使用して実行されるすべてのリクエストが `https://stage.code.quarkus.io` をベースURLとして使用します。上記の設定を使用して、 `ExtensionsService` の `getById` メソッドを `io.quarkus:quarkus-rest-client` の値で呼び出すと、HTTP GET リクエストが `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client` に対して実行されます。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:194
msgid "Having this configuration means that the default scope of `ExtensionsService` will be `@Singleton`. Supported scope values are `@Singleton`, `@Dependent`, `@ApplicationScoped` and `@RequestScoped`. The default scope is `@Dependent`.  The default scope can also be defined on the interface."
msgstr "この設定をすると、 `ExtensionsService` のデフォルトのスコープは `@Singleton` になります。サポートされているスコープの値は `@Singleton` , `@Dependent` , `@ApplicationScoped` および `@RequestScoped` です。既定のスコープは `@Dependent` です。デフォルトのスコープはインターフェイス上で定義することもできます。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:196
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr "`org.acme.rest.client.ExtensionsService` は、前のセクションで作成した`ExtensionsService` インターフェイスの完全修飾名と _一致しなければならない_ ことに注意してください。"

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:200
msgid "The standard MicroProfile Rest Client properties notation can also be used to configure the client:"
msgstr "標準のMicroProfile Rest Clientのプロパティ表記を使用して、クライアントを設定することもできます。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:205
#, no-wrap
msgid ""
"org.acme.rest.client.ExtensionsService/mp-rest/url=https://stage.code.quarkus.io/api\n"
"org.acme.rest.client.ExtensionsService/mp-rest/scope=jakarta.inject.Singleton\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:208
msgid "If a property is specified via both the Quarkus notation and the MicroProfile notation, the Quarkus notation takes a precedence."
msgstr "プロパティがQuarkus記法とMicroProfile記法の両方で指定されている場合、Quarkus記法が優先されます。"

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:212
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use another configuration root than the fully qualified name of your interface."
msgstr "構成を容易にするために、 `@RegisterRestClient` `configKey` プロパティーを使用して、インターフェイスの完全修飾名とは別の構成ルートを使用することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:220
#, no-wrap
msgid ""
"@RegisterRestClient(configKey=\"extensions-api\")\n"
"public interface ExtensionsService {\n"
"    [...]\n"
"}\n"
msgstr ""
"@RegisterRestClient(configKey=\"extensions-api\")\n"
"public interface ExtensionsService {\n"
"    [...]\n"
"}\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:227
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.extensions-api.url=https://stage.code.quarkus.io/api\n"
"quarkus.rest-client.extensions-api.scope=jakarta.inject.Singleton\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-client.adoc:229
#, no-wrap
msgid "Disabling Hostname Verification"
msgstr "ホスト名の検証を無効にする"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:232
msgid "To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:"
msgstr "特定のRESTクライアントのSSLホスト名検証を無効にするには、次のプロパティーを構成に追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:236
#, no-wrap
msgid "quarkus.rest-client.extensions-api.verify-host=false\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:240
#, fuzzy
msgid "This setting should not be used in production as it will disable the SSL hostname verification."
msgstr "この設定は、あらゆる種類のSSL検証を無効にするため、実運用環境では使用しないでください。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:243
msgid "Moreover, you can configure a REST client to use your custom hostname verify strategy. All you need to do is to provide a class that implements the interface `javax.net.ssl.HostnameVerifier` and add the following property to your configuration:"
msgstr "さらに、カスタムのホスト名検証ストラテジーを使用するようにRESTクライアントを設定することができます。必要なのは、インターフェース `javax.net.ssl.HostnameVerifier` を実装したクラスを用意し、以下のプロパティを設定に追加することだけです。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:247
#, no-wrap
msgid "quarkus.rest-client.extensions-api.hostname-verifier=<full qualified custom hostname verifier class name>\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:252
msgid "Quarkus REST client provides an embedded hostname verifier strategy to disable the hostname verification called `io.quarkus.restclient.NoopHostnameVerifier`."
msgstr "Quarkus REST クライアントは、 `io.quarkus.restclient.NoopHostnameVerifier` と呼ばれるホスト名検証を無効にするための組込ホスト名検証ストラテジーを提供しています。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client.adoc:254
#, no-wrap
msgid "Disabling SSL verifications"
msgstr "SSL の検証の無効化"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:257
msgid "To disable all SSL verifications, add the following property to your configuration:"
msgstr "全てのSSL検証を無効にするには、次のプロパティーを設定に追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:261
#, no-wrap
msgid "quarkus.tls.trust-all=true\n"
msgstr "quarkus.tls.trust-all=true\n"

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:265
msgid "This setting should not be used in production as it will disable any kind of SSL verification."
msgstr "この設定は、あらゆる種類のSSL検証を無効にするため、実運用環境では使用しないでください。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:267
#, fuzzy, no-wrap
msgid "Create the Jakarta REST resource"
msgstr "インターフェースの作成"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:270
#, fuzzy
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr "`src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを開き、以下の内容で更新してください。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:277
#: upstream/_versions/main/guides/rest-client.adoc:403
#: upstream/_versions/main/guides/rest-client.adoc:486
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:282
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:285
#: upstream/_versions/main/guides/rest-client.adoc:406
#: upstream/_versions/main/guides/rest-client.adoc:491
#, no-wrap
msgid ""
"@Path(\"/extension\")\n"
"public class ExtensionsResource {\n"
msgstr ""
"@Path(\"/extension\")\n"
"public class ExtensionsResource {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:289
#: upstream/_versions/main/guides/rest-client.adoc:410
#: upstream/_versions/main/guides/rest-client.adoc:495
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    ExtensionsService extensionsService;\n"
msgstr ""
"    @Inject\n"
"    @RestClient\n"
"    ExtensionsService extensionsService;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:296
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(@PathParam String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(@PathParam String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:299
msgid "Note that in addition to the standard CDI `@Inject` annotation, we also need to use the MicroProfile `@RestClient` annotation to inject `ExtensionsService`."
msgstr "標準の CDI `@Inject` アノテーションに加えて、MicroProfile `@RestClient` アノテーションを使用して `ExtensionsService` を注入する必要があることに注意してください。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:300
#, no-wrap
msgid "Update the test"
msgstr "テストの更新"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:304
msgid "We also need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the `testExtensionIdEndpoint` method to:"
msgstr "また、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。 `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` ファイルを編集し、 `testExtensionIdEndpoint` メソッドの内容を変更します。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:314
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.hasItem;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
"import static org.hamcrest.Matchers.greaterThan;\n"
msgstr ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.hasItem;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
"import static org.hamcrest.Matchers.greaterThan;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:317
#, no-wrap
msgid ""
"import org.acme.rest.client.resources.WireMockExtensionsResource;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""
"import org.acme.rest.client.resources.WireMockExtensionsResource;\n"
"import org.junit.jupiter.api.Test;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:320
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:324
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(WireMockExtensionsResource.class)\n"
"public class ExtensionsResourceTest {\n"
msgstr ""
"@QuarkusTest\n"
"@QuarkusTestResource(WireMockExtensionsResource.class)\n"
"public class ExtensionsResourceTest {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:338
#, no-wrap
msgid ""
"    @Test\n"
"    public void testExtensionsIdEndpoint() {\n"
"        given()\n"
"            .when().get(\"/extension/id/io.quarkus:quarkus-rest-client\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            .body(\"$.size()\", is(1),\n"
"                \"[0].id\", is(\"io.quarkus:quarkus-rest-client\"),\n"
"                \"[0].name\", is(\"REST Client Classic\"),\n"
"                \"[0].keywords.size()\", greaterThan(1),\n"
"                \"[0].keywords\", hasItem(\"rest-client\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:341
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr "上記のコードでは、 link:http://rest-assured.io/[REST Assured] の link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] 機能を使用しています。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:343
#, no-wrap
msgid "Redirection"
msgstr "リダイレクト"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:346
msgid "A HTTP server can redirect a response to another location by sending a response with a status code that starts with \"3\" and a HTTP header \"Location\" holding the URL to be redirected to. When the REST Client receives a redirection response from a HTTP server, it won't automatically perform another request to the new location. However, you can enable the automatic redirection by enabling the \"follow-redirects\" property:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:348
msgid "`quarkus.rest-client.follow-redirects` to enable redirection for all REST clients."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:349
msgid "`quarkus.rest-client.<client-prefix>.follow-redirects` to enable redirection for a specific REST client."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:351
msgid "If this property is true, then REST Client will perform a new request that it receives a redirection response from the HTTP server."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:353
msgid "Additionally, we can limit the number of redirections using the property \"max-redirects\"."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:355
msgid "One important note is that according to the https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] specs, by default the redirection will only happen for GET or HEAD methods."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:356
#, no-wrap
msgid "Async Support"
msgstr "非同期サポート"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:361
msgid "The rest client supports asynchronous rest calls.  Async support comes in 2 flavors: you can return a `CompletionStage` or a `Uni` (requires the `quarkus-rest-client-mutiny` extension).  Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr "rest クライアントは非同期の rest 呼び出しをサポートしています。非同期のサポートには、2パターンあります。 `CompletionStage` を返却するか `Uni` ( `quarkus-rest-client-mutiny` のエクステンションが必要です) を返却するかです。 `ExtensionsService` REST インタフェースに `getByIdAsync` メソッドを追加してみましょう。コードは以下のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:368
#: upstream/_versions/main/guides/rest-client.adoc:396
#: upstream/_versions/main/guides/rest-client.adoc:451
#: upstream/_versions/main/guides/rest-client.adoc:479
#: upstream/_versions/main/guides/rest-client.adoc:544
#, no-wrap
msgid ""
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:371
#: upstream/_versions/main/guides/rest-client.adoc:454
#: upstream/_versions/main/guides/rest-client.adoc:547
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:381
#: upstream/_versions/main/guides/rest-client.adoc:561
#: upstream/_versions/main/guides/rest-client.adoc:611
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam String id);\n"
msgstr ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam String id);\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:384
#: upstream/_versions/main/guides/rest-client.adoc:564
#: upstream/_versions/main/guides/rest-client.adoc:614
#, no-wrap
msgid ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam String id);\n"
msgstr ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam String id);\n"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:389
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr "`src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを開き、以下の内容で更新してください。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:400
#: upstream/_versions/main/guides/rest-client.adoc:483
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:416
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(@PathParam String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(@PathParam String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:422
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-async/{id}\")\n"
"    public CompletionStage<Set<Extension>> idAsync(@PathParam String id) {\n"
"        return extensionsService.getByIdAsync(id);\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @Path(\"/id-async/{id}\")\n"
"    public CompletionStage<Set<Extension>> idAsync(@PathParam String id) {\n"
"        return extensionsService.getByIdAsync(id);\n"
"    }\n"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:427
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr "非同期メソッドをテストするには、`ExtensionsResourceTest` に以下のテストメソッドを追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:441
#, no-wrap
msgid ""
"@Test\n"
"public void testExtensionIdAsyncEndpoint() {\n"
"    given()\n"
"        .when().get(\"/extension/id-async/io.quarkus:quarkus-rest-client\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(\"$.size()\", is(1),\n"
"            \"[0].id\", is(\"io.quarkus:quarkus-rest-client\"),\n"
"            \"[0].name\", is(\"REST Client Classic\"),\n"
"            \"[0].keywords.size()\", greaterThan(1),\n"
"            \"[0].keywords\", hasItem(\"rest-client\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:444
msgid "The `Uni` version is very similar:"
msgstr "`Uni` 版は非常に似ています。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:459
#: upstream/_versions/main/guides/rest-client.adoc:488
#: upstream/_versions/main/guides/rest-client.adoc:553
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr "import io.smallrye.mutiny.Uni;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:465
#: upstream/_versions/main/guides/rest-client.adoc:498
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:469
#: upstream/_versions/main/guides/rest-client.adoc:568
#: upstream/_versions/main/guides/rest-client.adoc:618
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<Set<Extension>> getByIdAsUni(@QueryParam String id);\n"
"}\n"
msgstr ""
"    @GET\n"
"    Uni<Set<Extension>> getByIdAsUni(@QueryParam String id);\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:472
msgid "The `ExtensionsResource` becomes:"
msgstr "`ExtensionsResource` は次のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:505
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-uni/{id}\")\n"
"    public Uni<Set<Extension>> idMutiny(@PathParam String id) {\n"
"        return extensionsService.getByIdAsUni(id);\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Path(\"/id-uni/{id}\")\n"
"    public Uni<Set<Extension>> idMutiny(@PathParam String id) {\n"
"        return extensionsService.getByIdAsUni(id);\n"
"    }\n"
"}\n"

#. type: Block title
#: upstream/_versions/main/guides/rest-client.adoc:508
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:512
msgid "The previous snippet uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前のスニペットでは、Mutinyのリアクティブ型を使用していますが、もし慣れていない場合は、まず xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] を読んでください。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:516
msgid "When returning a `Uni`, every _subscription_ invokes the remote service.  It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr "`Uni` を返すとき、すべての _サブスクリプション_ は 、リモートサービスを呼び出します。つまり、 `Uni` で再購読してリクエストを再送信するか、以下のように `retry` を使用することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:521
#, no-wrap
msgid "@Inject @RestClient ExtensionsService extensionsService;\n"
msgstr "@Inject @RestClient ExtensionsService extensionsService;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:523
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:526
#, no-wrap
msgid ""
"extensionsService.getByIdAsUni(id)\n"
"    .onFailure().retry().atMost(10);\n"
msgstr ""
"extensionsService.getByIdAsUni(id)\n"
"    .onFailure().retry().atMost(10);\n"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:531
msgid "If you use a `CompletionStage`, you would need to call the service's method to retry.  This difference comes from the laziness aspect of Mutiny and its subscription protocol.  More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation]."
msgstr "`CompletionStage` を使用する場合は、再試行のためにサービスのメソッドを呼び出す必要があります。この違いは、 Mutiny とそのサブスクリプションプロトコルの lazy (遅延) 性の側面から来ています。これについての詳細は link:https://smallrye.io/smallrye-mutiny/#_uni_and_multi[Mutiny の ドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:532
#, no-wrap
msgid "Custom headers support"
msgstr "カスタムヘッダーのサポート"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:535
msgid "The MicroProfile REST client allows amending request headers by registering a `ClientHeadersFactory` with the `@RegisterClientHeaders` annotation."
msgstr "MicroProfile REST クライアントでは、 `ClientHeadersFactory` を `@RegisterClientHeaders` アノテーションで登録することで、リクエストヘッダを修正することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:537
msgid "Let's see it in action by adding a `@RegisterClientHeaders` annotation pointing to a `RequestUUIDHeaderFactory` class in our `ExtensionsService` REST interface:"
msgstr "`ExtensionsResource` REST インタフェースに `@RegisterClientHeaders` アノテーションを追加して、 `RequestUUIDHeaderFactory` クラスを指すようにしてみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:551
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:558
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders(RequestUUIDHeaderFactory.class)\n"
"public interface ExtensionsService {\n"
msgstr ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders(RequestUUIDHeaderFactory.class)\n"
"public interface ExtensionsService {\n"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:571
msgid "And the `RequestUUIDHeaderFactory` would look like:"
msgstr "そして、 `RequestUUIDHeaderFactory` は次のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:577
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n"
msgstr "import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:582
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.ws.rs.core.MultivaluedHashMap;\n"
"import jakarta.ws.rs.core.MultivaluedMap;\n"
"import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:585
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n"
msgstr ""
"@ApplicationScoped\n"
"public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:593
#, no-wrap
msgid ""
"    @Override\n"
"    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders, MultivaluedMap<String, String> clientOutgoingHeaders) {\n"
"        MultivaluedMap<String, String> result = new MultivaluedHashMap<>();\n"
"        result.add(\"X-request-uuid\", UUID.randomUUID().toString());\n"
"        return result;\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders, MultivaluedMap<String, String> clientOutgoingHeaders) {\n"
"        MultivaluedMap<String, String> result = new MultivaluedHashMap<>();\n"
"        result.add(\"X-request-uuid\", UUID.randomUUID().toString());\n"
"        return result;\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:597
msgid "As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr "上の例のように、 `@Singleton`, `@ApplicationScoped` などのスコープを定義するアノテーションを付けることで、 `ClientHeadersFactory` の実装をCDI Beanにすることができます。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client.adoc:599
#, no-wrap
msgid "Default header factory"
msgstr "デフォルトのヘッダーファクトリー"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:602
msgid "You can also use `@RegisterClientHeaders` annotation without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used and all headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property will be amended. Individual header names are comma-separated."
msgstr "また、カスタムファクトリーを指定せずに `@RegisterClientHeaders` アノテーションを使用することもできます。その場合は、 `DefaultClientHeadersFactoryImpl` ファクトリーが使用され、 `org.eclipse.microprofile.rest.client.propagateHeaders` 設定プロパティに記載されているすべてのヘッダーが修正されます。個々のヘッダー名はコンマで区切られています。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:608
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders\n"
"public interface ExtensionsService {\n"
msgstr ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders\n"
"public interface ExtensionsService {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:624
#, no-wrap
msgid "org.eclipse.microprofile.rest.client.propagateHeaders=Authorization,Proxy-Authorization\n"
msgstr "org.eclipse.microprofile.rest.client.propagateHeaders=Authorization,Proxy-Authorization\n"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:626
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:629
#, fuzzy
msgid "Run the application with:"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:633
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client."
msgstr "ブラウザで http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client を開きます。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:635
msgid "You should see a JSON object containing some basic information about the REST Client extension."
msgstr "REST Client extensionに関する基本情報を含む JSON オブジェクトが表示されます。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:637
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:641
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして、`java -jar target/quarkus-app/quarkus-run.jar` で実行されます。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:643
msgid "You can also generate the native executable with:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:646
#, no-wrap
msgid "REST Client and RESTEasy interactions"
msgstr "REST クライアントと RESTEasy のやりとり"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:650
msgid "In Quarkus, the REST Client extension and xref:rest-json.adoc[the RESTEasy extension] share the same infrastructure.  One important consequence of this consideration is that they share the same list of providers (in the Jakarta REST meaning of the word)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:653
msgid "For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls, which might not be the desired behavior."
msgstr "例えば、 `WriterInterceptor` を宣言した場合、デフォルトではサーバーの呼び出しとクライアントの呼び出しの両方をインターセプトしますが、これは望ましい動作ではないかもしれません。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:655
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr "しかし、このデフォルトの動作を変更してプロバイダを制約することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:657
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider;"
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.CLIENT)` アノテーションを追加することで、 *クライアント* コールのみを考慮します。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:658
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider."
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.SERVER)` アノテーションを追加することで、 *サーバー* コールのみを考慮します。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:660
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr "テストにモックHTTPサーバーを使用する"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:665
msgid "Setting up a mock HTTP server, against which tests are run, is a common testing pattern.  Examples of such servers are link:https://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].  In this section we'll demonstrate how Wiremock can be leveraged for testing the `ExtensionsService` which was developed above."
msgstr "テストを実行する際にモック HTTP サーバーを設定することは、一般的なテストパターンです。そのようなサーバーの例としては、 link:http://wiremock.org/[Wiremock] や link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly] があります。このセクションでは、ここまでで開発した `ExtensionsService` をテストするために Wiremock を活用する方法を示します。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:667
msgid "First, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr "最初に、 Wiremock をテストの依存関係として追加する必要があります。 Maven プロジェクトの場合は以下のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:677
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"    <version>${wiremock.version}</version> <1>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"    <version>${wiremock.version}</version> <1>\n"
"</dependency>\n"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:679
#: upstream/_versions/main/guides/rest-client.adoc:686
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[here]."
msgstr "適切なWiremockのバージョンを使用してください。利用可能なすべてのバージョンは link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[ここで]  見つけることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:684
#, no-wrap
msgid "testImplementation(\"com.github.tomakehurst:wiremock-jre8:$wiremockVersion\") <1>\n"
msgstr "testImplementation(\"com.github.tomakehurst:wiremock-jre8:$wiremockVersion\") <1>\n"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:690
msgid "In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource` annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration values that Quarkus will use."
msgstr "Quarkusのテストを実行する前にサービスを開始する必要がある場合、Quarkusのテストでは、 `@io.quarkus.test.common.QuarkusTestResource` アノテーションを利用して、サービスを開始できる `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` を指定し、Quarkusが使用する設定値を提供します。"

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:694
msgid "For more details about `@QuarkusTestResource` refer to xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr "`@QuarkusTestResource` の詳細については、 link:getting-started-testing.html#quarkus-test-resource[ドキュメントのこの部分]を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:697
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `WiremockExtensions` like so:"
msgstr "このように `QuarkusTestResourceLifecycleManager` の実装である `WiremockExtensions` を作成してみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:703
#, fuzzy, no-wrap
msgid "import java.util.Map;\n"
msgstr "import java.util.List;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:706
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:708
#, no-wrap
msgid "import static com.github.tomakehurst.wiremock.client.WireMock.*; // <1>\n"
msgstr "import static com.github.tomakehurst.wiremock.client.WireMock.*; // <1>\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:710
#, no-wrap
msgid "public class WireMockExtensions implements QuarkusTestResourceLifecycleManager {  // <2>\n"
msgstr "public class WireMockExtensions implements QuarkusTestResourceLifecycleManager {  // <2>\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:712
#, no-wrap
msgid "    private WireMockServer wireMockServer;\n"
msgstr "    private WireMockServer wireMockServer;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:717
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        wireMockServer = new WireMockServer();\n"
"        wireMockServer.start(); // <3>\n"
msgstr ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        wireMockServer = new WireMockServer();\n"
"        wireMockServer.start(); // <3>\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:727
#, no-wrap
msgid ""
"        wireMockServer.stubFor(get(urlEqualTo(\"/extensions?id=io.quarkus:quarkus-rest-client\"))   // <4>\n"
"                .willReturn(aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                            \"[{\" +\n"
"                            \"\\\"id\\\": \\\"io.quarkus:quarkus-rest-client\\\",\" +\n"
"                            \"\\\"name\\\": \\\"REST Client Classic\\\"\" +\n"
"                            \"}]\"\n"
"                        )));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:729
#, no-wrap
msgid "        wireMockServer.stubFor(get(urlMatching(\".*\")).atPriority(10).willReturn(aResponse().proxiedFrom(\"https://stage.code.quarkus.io/api\")));   // <5>\n"
msgstr "        wireMockServer.stubFor(get(urlMatching(\".*\")).atPriority(10).willReturn(aResponse().proxiedFrom(\"https://stage.code.quarkus.io/api\")));   // <5>\n"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:732
#, no-wrap
msgid ""
"        return Map.of(\"quarkus.rest-client.\\\"org.acme.rest.client.ExtensionsService\\\".url\", wireMockServer.baseUrl()); // <6>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:740
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        if (null != wireMockServer) {\n"
"            wireMockServer.stop();  // <7>\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public void stop() {\n"
"        if (null != wireMockServer) {\n"
"            wireMockServer.stop();  // <7>\n"
"        }\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:743
msgid "Statically importing the methods in the Wiremock package makes it easier to read the test."
msgstr "Wiremockパッケージのメソッドを静的にインポートすると、テストを読みやすくなります。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:744
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr "`start` メソッドは、テストを実行する前にQuarkusによって呼び出され、テスト実行中に適用される設定プロパティーの `Map` を返します。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:745
msgid "Launch Wiremock."
msgstr "Wiremockを起動します。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:746
msgid "Configure Wiremock to stub the calls to `/extensions?id=io.quarkus:quarkus-rest-client` by returning a specific canned response."
msgstr "特定の定型文を返すことで、 Wiremockが `/extensions?id=io.quarkus:quarkus-rest-client` への呼び出しをスタブするように設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:747
msgid "All HTTP calls that have not been stubbed are handled by calling the real service. This is done for demonstration purposes, as it is not something that would usually happen in a real test."
msgstr "スタブ化されていないすべての HTTP 呼び出しは、実際のサービスを呼び出すことで処理されます。これは、実際のテストでは通常発生しないことなので、デモンストレーションのために行われています。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:749
msgid "As the `start` method returns configuration that applies for tests, we set the rest-client property that controls the base URL which is used by the implementation of `ExtensionsService` to the base URL where Wiremock is listening for incoming requests."
msgstr "`start` メソッドはテストに適用される設定を返すので、 `ExtensionsResource` の実装で使用されるベースURLを制御する rest-client プロパティーを、Wiremock がリクエストの着信をリッスンするベースURLに設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:750
msgid "When all tests have finished, shutdown Wiremock."
msgstr "すべてのテストが終了したら、Wiremockをシャットダウンします。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:753
msgid "The `ExtensionsResourceTest` test class needs to be annotated like so:"
msgstr "`ExtensionsResourceTest` テストクラスには、このようなアノテーションが必要です。"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-client.adoc:759
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(WireMockExtensions.class)\n"
"public class ExtensionsResourceTest {\n"
msgstr ""
"@QuarkusTest\n"
"@QuarkusTestResource(WireMockExtensions.class)\n"
"public class ExtensionsResourceTest {\n"

#. type: delimited block =
#: upstream/_versions/main/guides/rest-client.adoc:766
msgid "`@QuarkusTestResource` applies to all tests, not just `ExtensionsResourceTest`."
msgstr "`@QuarkusTestResource` は `ExtensionsResourceTest` だけでなく、すべてのテストに適用されます。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client.adoc:768
#, no-wrap
msgid "Further reading"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_versions/main/guides/rest-client.adoc:770
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"

#~ msgid ""
#~ "import java.util.Collections;\n"
#~ "import java.util.Map;\n"
#~ msgstr ""
#~ "import java.util.Collections;\n"
#~ "import java.util.Map;\n"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "As usual, the application can be packaged using `./mvnw clean package` and executed using the `target/quarkus-app/quarkus-run.jar` file.  You can also generate the native executable with `./mvnw clean package -Pnative`."
#~ msgstr "いつものように、 `./mvnw clean package` を使ってアプリケーションをパッケージ化し、 `target/quarkus-app/quarkus-run.jar` ファイルを使って実行することができます。また、 `./mvnw clean package -Pnative` でネイティブ実行可能ファイルを生成することも出来ます。"

#~ msgid "`@Produces` defines the expected content-type"
#~ msgstr "`@Produces` は、期待されるコンテンツタイプを定義しています。"
