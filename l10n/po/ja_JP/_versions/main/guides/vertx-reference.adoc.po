# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-24 08:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/vertx-reference.adoc:6
#, no-wrap
msgid "Vert.x Reference Guide"
msgstr "Vert.x リファレンスガイド"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:13
msgid "https://vertx.io[Vert.x] is a toolkit for building reactive applications.  As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr "link:https://vertx.io[Vert.x]は、リアクティブなアプリケーションを構築するためのツールキットです。 link:quarkus-reactive-architecture.html[Quarkus Reactive Architecture]に記載されているように、QuarkusではVert.xを下地に使用しています。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:16
msgid "This guide is the companion to the xref:vertx.adoc[Using Eclipse Vert.x API from a Quarkus Application] guide.  It provides more advanced details about the usage and the configuration of the Vert.x instance used by Quarkus."
msgstr "このガイドは、 link:vertx.html[QuarkusアプリケーションからEclipse Vert.x APIの使用] ガイドの姉妹編です。Quarkusで使用されるVert.xインスタンスの使用方法や設定について、より詳細に説明しています。"

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:18
#, fuzzy, no-wrap
msgid "Access the Vert.x instance"
msgstr "Vert.xインスタンスへのアクセス"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:22
#, fuzzy
msgid "To access the managed Vert.x instance, add the `quarkus-vertx` extension to your project.  This dependency might already be available in your project (as a transitive dependency)."
msgstr "マネージド Vert.x インスタンスにアクセスするには、 `quarkus-vertx` エクステンションをプロジェクトに追加します。この依存関係は、プロジェクトですでに利用可能な場合があります（推移的依存関係として）。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:24
msgid "With this extension, you can retrieve the managed instance of Vert.x using either field or constructor injection:"
msgstr "このエクステンションでは、フィールドまたはコンストラクタ・インジェクションのいずれかを使用して、Vert.xのマネージドインスタンスを取得できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:31
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBean {\n"
"// Field injection\n"
"@Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:36
#, no-wrap
msgid ""
"// Constructor injection\n"
"MyBean(Vertx vertx) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:38
#: upstream/_versions/main/guides/vertx-reference.adoc:212
#: upstream/_versions/main/guides/vertx-reference.adoc:821
#: upstream/_versions/main/guides/vertx-reference.adoc:882
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:41
msgid "You can inject either the:"
msgstr "以下のどちらかを注入することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:43
msgid "`io.vertx.core.Vertx` instance exposing the _bare_ Vert.x API"
msgstr "_裸の_ Vert.x APIを公開する `io.vertx.core.Vertx` インスタンス"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:44
msgid "`io.vertx.mutiny.core.Vertx` instance exposing the _Mutiny_ API"
msgstr "_Mutiny_ APIを公開する `io.vertx.mutiny.core.Vertx` インスタンス"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:46
msgid "We recommend using the Mutiny variant as it integrates with the other reactive APIs provided by Quarkus."
msgstr "Mutiny variantは、Quarkusが提供する他のリアクティブAPIと統合されているため、Mutiny variantの使用をお勧めします。"

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:48
#: upstream/_versions/main/guides/vertx-reference.adoc:546
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:51
msgid "If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Mutinyに慣れていない方は、 link:mutiny-primer.html[Mutiny - 直感的なリアクティブプログラミングライブラリ]をご覧ください。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:54
msgid "Documentation about the Vert.x Mutiny variant is available on https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr "Vert.x Mutiny バリアントに関するドキュメントは https://smallrye.io/smallrye-mutiny-vertx-bindings にあります。"

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:56
#, fuzzy, no-wrap
msgid "Configure the Vert.x instance"
msgstr "Vert.xインスタンスの設定"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:60
msgid "You can configure the Vert.x instance from the `application.properties` file.  The following table lists the supported properties:"
msgstr "`application.properties` ファイルから Vert.x インスタンスを設定することができます。次の表は、サポートされているプロパティの一覧です。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:64
#, fuzzy
msgid "See xref:customizing-the-vert-x-configuration[Customize the Vert.x configuration] to configure the Vert.x instance using a programmatic approach."
msgstr "プログラム的なアプローチでVert.xインスタンスを構成するには、 xref:customizing-the-vert-x-configuration[Vert.x構成のカスタマイズを] 参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:66
#, fuzzy, no-wrap
msgid "Use Vert.x clients"
msgstr "vert.xクライアントを使用する。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:70
msgid "In addition to Vert.x core, you can use most Vert.x ecosystem libraries.  Some Quarkus extension already wraps Vert.x libraries."
msgstr "Vert.xコアに加えて、ほとんどのVert.xエコシステムライブラリを使用することができます。いくつかのQuarkusエクステンションは、すでにVert.xライブラリをラップしています。"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:71
#, no-wrap
msgid "Available APIs"
msgstr "利用可能なAPI"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:76
#, fuzzy
msgid "The following table lists the **most** used libraries from the Vert.x ecosystem.  To access these APIs, add the indicated extension or dependency to your project.  Check the associated documentation to learn how to use them."
msgstr "次の表は、Vert.xエコシステムから *最も* 使用されているライブラリの一覧です。これらのAPIにアクセスするには、指定されたエクステンションまたは依存関係をプロジェクトに追加します。これらの使用方法については、関連ドキュメントを確認してください。"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:80
#, no-wrap
msgid "API"
msgstr "API"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:81
#, no-wrap
msgid "Extension or Dependency"
msgstr "エクステンションか依存関係"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:83
#, no-wrap
msgid "Documentation"
msgstr "ドキュメント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:84
#, no-wrap
msgid "AMQP Client"
msgstr "AMQPクライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:85
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (extension)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:87
#, fuzzy, no-wrap
msgid "xref:amqp.adoc"
msgstr "xref:amqp.adoc"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:88
#, no-wrap
msgid "Circuit Breaker"
msgstr "サーキットブレーカー"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:89
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (external dependency)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:91
#, no-wrap
msgid "https://vertx.io/docs/vertx-circuit-breaker/java/"
msgstr "https://vertx.io/docs/vertx-circuit-breaker/java/"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:92
#, no-wrap
msgid "Consul Client"
msgstr "Consul クライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:93
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (external dependency)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:95
#, no-wrap
msgid "https://vertx.io/docs/vertx-consul-client/java/"
msgstr "https://vertx.io/docs/vertx-consul-client/java/"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:96
#, no-wrap
msgid "DB2 Client"
msgstr "DB2クライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:97
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-db2-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-db2-client` (extension)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:99
#: upstream/_versions/main/guides/vertx-reference.adoc:115
#: upstream/_versions/main/guides/vertx-reference.adoc:119
#: upstream/_versions/main/guides/vertx-reference.adoc:123
#: upstream/_versions/main/guides/vertx-reference.adoc:127
#, fuzzy, no-wrap
msgid "xref:reactive-sql-clients.adoc"
msgstr "xref:reactive-sql-clients.adoc"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:100
#, no-wrap
msgid "Kafka Client"
msgstr "Kafkaクライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:101
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (extension)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:103
#, fuzzy, no-wrap
msgid "xref:kafka.adoc"
msgstr "xref:kafka.adoc"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:104
#, no-wrap
msgid "Mail Client"
msgstr "メールクライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:105
#, no-wrap
msgid "`io.quarkus:quarkus-mailer` (extension)"
msgstr "`io.quarkus:quarkus-mailer` (extension)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:107
#, fuzzy, no-wrap
msgid "xref:mailer.adoc"
msgstr "xref:mailer.adoc"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:108
#, no-wrap
msgid "MQTT Client"
msgstr "MQTTクライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:109
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (extension)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:111
#, no-wrap
msgid "No guide yet"
msgstr "ガイドはまだありません"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:112
#, no-wrap
msgid "MS SQL Client"
msgstr "MS SQLクライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:113
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-mssql-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-mssql-client` (extension)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:116
#, no-wrap
msgid "MySQL Client"
msgstr "MySQLクライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:117
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-mysql-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-mysql-client` (extension)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:120
#, no-wrap
msgid "Oracle Client"
msgstr "Oracleクライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:121
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-oracle-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-oracle-client` (extension)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:124
#, no-wrap
msgid "PostgreSQL Client"
msgstr "PostgreSQLクライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:125
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-pg-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-pg-client` (extension)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:128
#, no-wrap
msgid "RabbitMQ Client"
msgstr "RabbitMQクライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:129
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (external dependency)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:131
#, no-wrap
msgid "https://vertx.io/docs/vertx-rabbitmq-client/java"
msgstr "https://vertx.io/docs/vertx-rabbitmq-client/java"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:132
#, no-wrap
msgid "Redis Client"
msgstr "Redisクライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:133
#, no-wrap
msgid "`io.quarkus:quarkus-redis-client` (extension)"
msgstr "`io.quarkus:quarkus-redis-client` (extension)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:135
#, fuzzy, no-wrap
msgid "xref:redis.adoc"
msgstr "xref:redis.adoc"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:136
#, no-wrap
msgid "Web Client"
msgstr "ウェブクライアント"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:137
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (external dependency)"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:139
#, no-wrap
msgid "https://vertx.io/docs/vertx-web-client/java/"
msgstr "https://vertx.io/docs/vertx-web-client/java/"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:142
msgid "To learn more about the usage of the Vert.x Mutiny API, refer to https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr "Vert.x Mutiny APIの使用方法について詳しくは、 https://smallrye.io/smallrye-mutiny-vertx-bindings を参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:143
#, fuzzy, no-wrap
msgid "Use the Vert.x Web Client"
msgstr "Vert.xウェブクライアントを使用する"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:147
msgid "This section gives an example using the Vert.x `WebClient` in the context of a RESTEasy Reactive application.  As indicated in the table above, add the following dependency to your project:"
msgstr "このセクションでは、RESTEasy Reactiveアプリケーションの文脈でVert.x `WebClient` を使った例を紹介します。上の表にあるように、プロジェクトに以下の依存関係を追加します。"

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:149
#: upstream/_versions/main/guides/vertx-reference.adoc:935
#: upstream/_versions/main/guides/vertx-reference.adoc:1117
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:155
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye.reactive</groupId>\n"
"    <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:158
#: upstream/_versions/main/guides/vertx-reference.adoc:951
#: upstream/_versions/main/guides/vertx-reference.adoc:1132
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:161
#, no-wrap
msgid "implementation(\"io.smallrye.reactive:smallrye-mutiny-vertx-web-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:164
msgid "Now, in your code, you can create an instance of `WebClient`:"
msgstr "さて、コードの中で、 `WebClient` のインスタンスを作成することが可能です。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:168
#: upstream/_versions/main/guides/vertx-reference.adoc:262
#: upstream/_versions/main/guides/vertx-reference.adoc:488
#: upstream/_versions/main/guides/vertx-reference.adoc:526
#: upstream/_versions/main/guides/vertx-reference.adoc:651
#: upstream/_versions/main/guides/vertx-reference.adoc:768
#: upstream/_versions/main/guides/vertx-reference.adoc:807
#: upstream/_versions/main/guides/vertx-reference.adoc:856
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:176
#, no-wrap
msgid ""
"import jakarta.annotation.PostConstruct;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:178
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:183
#, no-wrap
msgid ""
"import io.vertx.mutiny.core.Vertx;\n"
"import io.vertx.mutiny.ext.web.client.WebClient;\n"
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.ext.web.client.WebClientOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:186
#, no-wrap
msgid ""
"@Path(\"/fruit-data\")\n"
"public class ResourceUsingWebClient {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:188
#, no-wrap
msgid "    private final WebClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:193
#, no-wrap
msgid ""
"    @Inject\n"
"    VertxResource(Vertx vertx) {\n"
"        this.client = WebClient.create(vertx);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:210
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Path(\"/{name}\")\n"
"    public Uni<JsonObject> getFruitData(String name) {\n"
"        return client.getAbs(\"https://.../api/fruit/\" + name)\n"
"                .send()\n"
"                .onItem().transform(resp -> {\n"
"                    if (resp.statusCode() == 200) {\n"
"                        return resp.bodyAsJsonObject();\n"
"                    } else {\n"
"                        return new JsonObject()\n"
"                                .put(\"code\", resp.statusCode())\n"
"                                .put(\"message\", resp.bodyAsString());\n"
"                    }\n"
"                });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:218
msgid "This resource creates a `WebClient` and, upon request, uses this client to invoke a remote HTTP API.  Depending on the result, the response is forwarded as received, or it creates a JSON object wrapping the error.  The `WebClient` is asynchronous (and non-blocking), to the endpoint returns a `Uni`."
msgstr "このリソースは、 `WebClient` を作成し、リクエストに応じて、このクライアントを使用してリモート HTTP API を呼び出します。結果に応じて、レスポンスは受信したまま転送されるか、エラーをラップしたJSONオブジェクトが作成されます。 `WebClient` は非同期（かつノンブロッキング）で、エンドポイントからは `Uni` が返されます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:222
msgid "The application can also run as a native executable.  But, first, we need to instruct Quarkus to enable _ssl_ (if the remote API uses HTTPS).  Open the `src/main/resources/application.properties` and add:"
msgstr "このアプリケーションは、ネイティブ実行可能ファイルとしても実行できます。しかし、その前に、Quarkusに _ssl_ を有効にするよう指示する必要があります（リモートAPIがHTTPSを使用している場合）。 `src/main/resources/application.properties` を開き、以下を追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:226
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:229
msgid "Then, create the native executable with:"
msgstr "そして、ネイティブ実行可能ファイルを作成します。"

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:233
#, fuzzy, no-wrap
msgid "Use Vert.x JSON"
msgstr "Vert.xのJSONを使う"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:237
msgid "Vert.x APIs often rely on JSON.  Vert.x provides two convenient classes to manipulate JSON document: `io.vertx.core.json.JsonObject` and `io.vertx.core.json.JsonArray`."
msgstr "Vert.xのAPIはしばしばJSONに依存しています。Vert.xは、JSONドキュメントを操作する2つの便利なクラスを提供しています： `io.vertx.core.json.JsonObject` および `io.vertx.core.json.JsonArray` 。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:239
msgid "`JsonObject` can be used to map an object into its JSON representation and build an object from a JSON document:"
msgstr "`JsonObject` は、オブジェクトをJSON表現にマッピングしたり、JSONドキュメントからオブジェクトを構築するために使用できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:245
#, no-wrap
msgid ""
"// Map an object into JSON\n"
"Person person = ...;\n"
"JsonObject json = JsonObject.mapFrom(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:249
#, no-wrap
msgid ""
"// Build an object from JSON\n"
"json = new JsonObject();\n"
"person = json.mapTo(Person.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:253
msgid "Note that these features use the mapper managed by the `quarkus-jackson` extension.  Refer to xref:rest-json.adoc#json[Jackson configuration] to customize the mapping."
msgstr "なお、これらの機能は、 `quarkus-jackson` エクステンションで管理されているマッパーを使用しています。マッピングをカスタマイズするには link:rest-json.html#json[Jacksonの設定] を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:257
msgid "JSON Object and JSON Array are both supported as Quarkus HTTP endpoint requests and response bodies (using classic RESTEasy and RESTEasy Reactive).  Consider these endpoints:"
msgstr "JSON ObjectとJSON Arrayは、QuarkusのHTTPエンドポイントのリクエストとレスポンスボディとしてサポートされています（従来のRESTEasyとRESTEasy Reactiveを使用）。これらのエンドポイントについて考えてみましょう。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:265
#, no-wrap
msgid ""
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.core.json.JsonArray;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:270
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:274
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class VertxJsonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:280
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/object\")\n"
"    public JsonObject jsonObject(String name) {\n"
"        return new JsonObject().put(\"Hello\", name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:287
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/array\")\n"
"    public JsonArray jsonArray(String name) {\n"
"        return new JsonArray().add(\"Hello\").add(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:290
msgid "http://localhost:8080/hello/Quarkus/object returns:"
msgstr "http://localhost:8080/hello/Quarkus/object は次を返却します"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:294
#, no-wrap
msgid "{\"Hello\":\"Quarkus\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:297
msgid "http://localhost:8080/hello/Quarkus/array returns:"
msgstr "http://localhost:8080/hello/Quarkus/array は次を返却します"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:301
#, no-wrap
msgid "[\"Hello\",\"Quarkus\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:304
msgid "This works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr "これは、JSONコンテンツがリクエストボディである場合や、 `Uni`, `Multi`, `CompletionStage`, `Publisher` で包まれている場合にも同様に機能します。"

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:305
#, fuzzy, no-wrap
msgid "Use Verticles"
msgstr "バーティクルを使う"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:310
msgid "link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.  This model does not claim to be a strict actor-model implementation, but it shares similarities, especially concerning concurrency, scaling, and deployment.  To use this model, you write and _deploy_ verticles, communicating by sending messages on the event bus."
msgstr "link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] は、 _Vert.x_ が提供する「シンプルでスケーラブルな、アクターのようなデプロイ・並行性モデル」です。このモデルは、厳密なアクターモデルの実装を主張するものではありませんが、特に並行性、スケーリング、デプロイに関する類似性を共有しています。このモデルを使用するには、バーティクルを書いて _デプロイ_ し、イベントバスにメッセージを送信することで通信します。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:313
msgid "You can deploy _verticles_ in Quarkus.  It supports:"
msgstr "Quarkusで _verticles_ をデプロイすることができます。次をサポートしています:"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:315
msgid "_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr "_生の_ verticle - `io.vertx.core.AbstractVerticle` を拡張するJavaクラス"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:316
msgid "_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`"
msgstr "_Mutiny_ verticle - `io.smallrye.mutiny.vertx.core.AbstractVerticle` を拡張するJavaクラス"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:317
#, fuzzy, no-wrap
msgid "Deploy Verticles"
msgstr "バーティクルの展開"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:320
msgid "To deploy verticles, use the `deployVerticle` method:"
msgstr "verticleを展開するには、`deployVerticle` メソッドを使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:324
#, no-wrap
msgid "@Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:328
#, no-wrap
msgid ""
"// ...\n"
"vertx.deployVerticle(MyVerticle.class.getName(), ar -> { });\n"
"vertx.deployVerticle(new MyVerticle(), ar -> { });\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:331
msgid "If you use the Mutiny-variant of Vert.x, be aware that the `deployVerticle` method returns a `Uni`, and you would need to trigger a subscription to make the actual deployment."
msgstr "Vert.x の Mutiny 版を使用する場合、 `deployVerticle` メソッドは `Uni` を返すため、実際のデプロイメントを行うにはサブスクリプションをトリガーする必要があることに注意してください。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:333
msgid "An example explaining how to deploy verticles during the initialization of the application will follow."
msgstr "アプリケーションの初期化時にVerticleをデプロイする方法については、次の例で説明します。"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:334
#, fuzzy, no-wrap
msgid "Use @ApplicationScoped beans as Verticle"
msgstr "ApplicationScopedの@ApplicationScoped BeanをVerticleとして使用する。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:340
msgid "In general, Vert.x verticles are not CDI beans.  And so cannot use injection.  However, in Quarkus, you can deploy verticles as beans.  Note that in this case, CDI (Arc in Quarkus) is responsible for creating the instance."
msgstr "一般的に、Vert.xのバーティクルはCDI Beanではありません。そのため、依存性注入は使用できません。しかし、QuarkusではVerticleをBeanとしてデプロイすることができます。この場合、CDI（QuarkusではArc）がインスタンスの作成を担当することに注意してください。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:342
msgid "The following snippet provides an example:"
msgstr "次のスニペットはその例です。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:346
#: upstream/_versions/main/guides/vertx-reference.adoc:374
#, no-wrap
msgid "package io.quarkus.vertx.verticles;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:350
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:352
#: upstream/_versions/main/guides/vertx-reference.adoc:492
#: upstream/_versions/main/guides/vertx-reference.adoc:811
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:355
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBeanVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:357
#, no-wrap
msgid "    @ConfigProperty(name = \"address\") String address;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:365
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(address)\n"
"                .handler(m -> m.replyAndForget(\"hello\"))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:368
msgid "You don't have to inject the `vertx` instance; instead, leverage the protected field from `AbstractVerticle`."
msgstr "`vertx` のインスタンスを注入する必要はなく、代わりに `AbstractVerticle` の protected フィールドを利用します。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:370
msgid "Then, deploy the verticle instances with:"
msgstr "そして、バーティクルインスタンスをデプロイします。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:377
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:380
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:383
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class VerticleDeployer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:388
#, no-wrap
msgid ""
"    public void init(@Observes StartupEvent e, Vertx vertx, MyBeanVerticle verticle) {\n"
"         vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:391
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr "露出しているすべての `AbstractVerticle` をデプロイしたい場合は、次のようにします。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:399
#, no-wrap
msgid ""
"public void init(@Observes StartupEvent e, Vertx vertx, Instance<AbstractVerticle> verticles) {\n"
"    for (AbstractVerticle verticle : verticles) {\n"
"        vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:401
#, fuzzy, no-wrap
msgid "Create multiple verticles instances"
msgstr "複数のバーティクルのインスタンスを作成する"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:406
msgid "When using `@ApplicationScoped`, you will get a single instance for your verticle.  Having multiple instances of verticles can be helpful to share the load among them.  Each of them will be associated with a different I/O thread (Vert.x event loop)."
msgstr "`@ApplicationScoped` を使用する場合、Verticleのインスタンスは1つになります。複数のVerticleのインスタンスを持つことは、それらの間で負荷を共有するのに役立ちます。各々のインスタンスは、異なるI/Oスレッド（Vert.xイベントループ）に関連付けられます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:408
msgid "To deploy multiple instances of your verticle, use the `@Dependent` scope instead of `@ApplicationScoped`:"
msgstr "Verticleの複数のインスタンスをデプロイするには、 `@ApplicationScoped` の代わりに `@Dependent` スコープを使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:412
#: upstream/_versions/main/guides/vertx-reference.adoc:436
#, no-wrap
msgid "package org.acme.verticle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:415
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:418
#, no-wrap
msgid ""
"import jakarta.enterprise.context.Dependent;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:421
#, no-wrap
msgid ""
"@Dependent\n"
"public class MyVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:429
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(\"address\")\n"
"                .handler(m -> m.reply(\"Hello from \" + this))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:432
msgid "Then, deploy your verticle as follows:"
msgstr "そして、verticleをデプロイします。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:440
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.core.DeploymentOptions;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:445
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
"import jakarta.enterprise.inject.Instance;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:448
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyApp {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:455
#, no-wrap
msgid ""
"    void init(@Observes StartupEvent ev, Vertx vertx, Instance<MyVerticle> verticles) {\n"
"        vertx\n"
"                .deployVerticle(verticles::get, new DeploymentOptions().setInstances(2))\n"
"                .await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:464
msgid "The `init` method receives an `Instance<MyVerticle>`.  Then, you pass a supplier to the `deployVerticle` method.  The supplier is just calling the `get()` method.  Thanks to the `@Dependent` scope, it returns a new instance on every call.  Finally, you pass the desired number of instances to the `DeploymentOptions`, such as two in the previous example.  It will call the supplier twice, which will create two instances of your verticle."
msgstr "`init` メソッドは、 `Instance<MyVerticle>` を受け取ります。そして、 `deployVerticle` メソッドにサプライヤーを渡します。サプライヤーは `get()` メソッドを呼び出しているだけです。 `@Dependent` スコープのおかげで、呼び出すたびに新しいインスタンスが返されます。最後に、希望する数のインスタンスを `DeploymentOptions` に渡します。例えば、前の例では2つです。サプライヤーを2回呼び出し、Verticleの2つのインスタンスを作成します。"

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:466
#, fuzzy, no-wrap
msgid "Use the Event Bus"
msgstr "イベントバスを利用する"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:470
msgid "Vert.x comes with a built-in https://vertx.io/docs/vertx-core/java/#event_bus[event bus] that you can use from your Quarkus application.  So, your application components (CDI beans, resources...) can interact using asynchronous events, thus promoting loose-coupling."
msgstr "Vert.xには、Quarkusアプリケーションから使用できる link:https://vertx.io/docs/vertx-core/java/#event_bus[イベントバス]が組み込まれています。そのため、アプリケーションコンポーネント（CDI Bean、リソース...）は、非同期イベントを使用して相互に作用することができ、疎結合を促進します。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:473
msgid "With the event bus, you send _messages_ to _virtual addresses_.  The event bus offers three types of delivery mechanisms:"
msgstr "イベントバスでは、 _仮想アドレス_ に _メッセージ_ を送信します。イベントバスには、3種類の配送メカニズムが用意されています。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:475
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr "point-to-point - メッセージを送信すると、1人の消費者がそれを受信します。複数の消費者がそのアドレスを聞く場合は、ラウンドロビンが適用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:476
msgid "publish/subscribe - publish a message; all the consumers listening to the address are receiving the message;"
msgstr "publish/subscribe - メッセージを発行し、そのアドレスを聞いているすべてのコンシューマーがメッセージを受信します。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:477
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous fashion."
msgstr "request/reply - メッセージを送信し、応答を期待します。受信者は非同期的にメッセージに応答することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:479
msgid "All these delivery mechanisms are non-blocking and are providing one of the fundamental bricks to build reactive applications."
msgstr "これらの配信メカニズムはすべてノンブロッキングであり、リアクティブなアプリケーションを構築するための基本的な要素の一つとなっています。"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:480
#, fuzzy, no-wrap
msgid "Consume events"
msgstr "イベントを消費する"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:484
msgid "While you can use the Vert.x API to register consumers, Quarkus comes with declarative support.  To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr "Vert.x APIを使用してコンシューマーを登録することができますが、Quarkusには宣言型のサポートがあります。イベントを消費するには、 `io.quarkus.vertx.ConsumeEvent` アノテーションを使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:490
#: upstream/_versions/main/guides/vertx-reference.adoc:528
#: upstream/_versions/main/guides/vertx-reference.adoc:809
#, no-wrap
msgid "import io.quarkus.vertx.ConsumeEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:495
#: upstream/_versions/main/guides/vertx-reference.adoc:536
#: upstream/_versions/main/guides/vertx-reference.adoc:814
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:501
#, no-wrap
msgid ""
"    @ConsumeEvent                           // <1>\n"
"    public String consume(String name) {    // <2>\n"
"        return name.toUpperCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:503
msgid "If not set, the address is the fully qualified name of the bean; for instance, in this snippet, it's `org.acme.vertx.GreetingService`."
msgstr "設定されていない場合、アドレスはBeanの完全修飾名となります。例えば、このスニペットでは、 `org.acme.vertx.GreetingService` となります。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:504
msgid "The method parameter is the message body. If the method returns _something_, it's the message response."
msgstr "メソッドのパラメータはメッセージボディです。メソッドが _何か_ を返す場合は、それがメッセージのレスポンスとなります。"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:505
#, fuzzy, no-wrap
msgid "Configure the address"
msgstr "アドレスの設定"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:508
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "`@ConsumeEvent` アノテーションでアドレスを設定することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:515
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")               // <1>\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:517
msgid "Receive the messages sent to the `greeting` address"
msgstr "`greeting` アドレスに送信されたメッセージを受信する"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:518
#, fuzzy, no-wrap
msgid "Process events asynchronously"
msgstr "イベントを非同期に処理する"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:522
msgid "The previous examples use synchronous processing.  Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr "これまでの例では、同期処理を行っています。 `io.smallrye.mutiny.Uni` または `java.util.concurrent.CompletionStage` を返却することで、非同期処理も可能です。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:533
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.concurrent.CompletionStage;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:543
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public Uni<String> process(String name) {\n"
"        // return an Uni completed when the processing is finished.\n"
"        // You can also fail the Uni explicitly\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:550
msgid "The previous example uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前の例はMutinyリアクティブ型を使用しています。Mutinyに慣れていない方は、 link:mutiny-primer.html[Mutiny - 直感的なリアクティブプログラミングライブラリ]をご覧ください。"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:552
#, fuzzy, no-wrap
msgid "Blocking processing of events"
msgstr "イベントの処理をブロックする"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:556
msgid "By default, the code consuming the event must be _non-blocking_, as it's called on an I/O thread.  If your processing is blocking, use the `@io.smallrye.common.annotation.Blocking` annotation:"
msgstr "デフォルトでは、イベントを消費するコードは、I/Oスレッドで呼び出されるため、 _ノンブロッキング_ でなければなりません。処理がブロッキングの場合は、 `@io.smallrye.common.annotation.Blocking` アノテーションを使用してください。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:564
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\")\n"
"@Blocking\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:567
msgid "Alternatively, you can use the `blocking` attribute from the `@ConsumeEvent` annotation:"
msgstr "あるいは、 `@ConsumeEvent` アノテーションの `blocking` 属性を使用することもできます。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:574
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\", blocking = true)\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:577
msgid "When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`."
msgstr "`@Blocking` を使用する場合、 `@ConsumeEvent` の `blocking` 属性の値は無視されます。"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:578
#, fuzzy, no-wrap
msgid "Reply to events"
msgstr "イベントへの返信"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:582
msgid "The _return_ value of a method annotated with `@ConsumeEvent` is used to respond to the incoming message.  For instance, in the following snippet, the returned `String` is the response."
msgstr "`@ConsumeEvent` でアノテーションされたメソッドの _戻り_ 値は、受信したメッセージへの応答に使用されます。たとえば、次のスニペットでは、返された `String` が応答となります。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:589
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:592
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "また、 `Uni<T>` や `CompletionStage<T>` を返すことで、非同期応答を扱うこともできます。。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:599
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public Uni<String> consume2(String name) {\n"
"    return Uni.createFrom().item(() -> name.toUpperCase()).emitOn(executor);\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:604
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "Context Propagation エクステンションを使えば、 `executor` を注入することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:607
#, no-wrap
msgid "@Inject Executor executor;\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:610
#, fuzzy, no-wrap
msgid "Implement fire-and-forget interactions"
msgstr "ファイヤー・アンド・フォーゲット・インタラクションの実装"

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:615
msgid "You don't have to reply to received messages.  Typically, for a _fire and forget_ interaction, the messages are consumed, and the sender does not need to know about it.  To implement this pattern, your consumer method returns `void`."
msgstr "受信したメッセージに返信する必要はありません。通常、 _fire and forget_ のインタラクションでは、メッセージは消費され、送信者はそのことを知る必要はありません。このパターンを実装するために、コンシューマー・メソッドは `void` を返します。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:622
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(String event) {\n"
"    // Do something with the event\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:624
#, fuzzy, no-wrap
msgid "Consume messages (instead of events)"
msgstr "イベントの代わりに）メッセージを消費する"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:627
msgid "Unlike the previous example using the _payloads_ directly, you can also use `Message` directly:"
msgstr "_ペイロード_ を直接使用する前の例とは異なり、 `Message` を直接使用することもできます。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:635
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(Message<String> msg) {\n"
"    System.out.println(msg.address());\n"
"    System.out.println(msg.body());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:637
#, fuzzy, no-wrap
msgid "Handle failures"
msgstr "ハンドルの故障"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:640
msgid "If a method annotated with `@ConsumeEvent` throws an exception, then:"
msgstr "`@ConsumeEvent` でアノテーションされたメソッドが例外を発生させた場合、"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:642
msgid "if a reply handler is set, then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr "返信ハンドラが設定されている場合、失敗はコード `ConsumeEvent#FAILURE_CODE` と例外メッセージを含む `io.vertx.core.eventbus.ReplyException` を通じて送信者に伝えられます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:643
#, fuzzy
msgid "if no reply handler is set, then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, _i.e._ `io.vertx.core.Vertx#exceptionHandler()`."
msgstr "リプライ・ハンドラが設定されていない場合、例外は再スローされ（必要であれば `RuntimeException` でラップされる）、デフォルトの例外ハンドラ、 _すなわち_ `io.vertx.core.Vertx#exceptionHandler()` で処理される。"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:644
#, fuzzy, no-wrap
msgid "Send messages"
msgstr "メッセージを送る"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:647
msgid "Sending and publishing messages use the Vert.x event bus:"
msgstr "メッセージの送信と公開にはVert.x Event busを使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:655
#: upstream/_versions/main/guides/vertx-reference.adoc:772
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.eventbus.EventBus;\n"
"import io.vertx.mutiny.core.eventbus.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:661
#: upstream/_versions/main/guides/vertx-reference.adoc:778
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:664
#, no-wrap
msgid ""
"@Path(\"/async\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:667
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;                                            // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:676
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(String name) {\n"
"        return bus.<String>request(\"greeting\", name)        // <2>\n"
"                .onItem().transform(Message::body);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:678
msgid "Inject the Event bus"
msgstr "イベントバスのインジェクト"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:679
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "アドレス `greeting` にメッセージを送信。メッセージのペイロードは `name`"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:681
msgid "The `EventBus` object provides methods to:"
msgstr "`EventBus` オブジェクトは、以下のメソッドを提供します。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:683
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` 特定のアドレスへのメッセージ - 一人のコンシューマーがメッセージを受信する。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:684
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` 特定のアドレスにメッセージを送る - すべてのコンシューマーがメッセージを受け取る。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:685
msgid "`request` a message and expect a reply"
msgstr "`request` メッセージを送って返信を期待する"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:695
#, no-wrap
msgid ""
"// Case 1\n"
"bus.sendAndForget(\"greeting\", name)\n"
"// Case 2\n"
"bus.publish(\"greeting\", name)\n"
"// Case 3\n"
"Uni<String> response = bus.<String>request(\"address\", \"hello, how are you?\")\n"
"        .onItem().transform(Message::body);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:697
#, fuzzy, no-wrap
msgid "Process events on virtual threads"
msgstr "仮想スレッドでイベントを処理する"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:702
#, fuzzy
msgid "Methods annotated with `@ConsumeEvent` can also be annotated with `@RunOnVirtualThread`.  In this case, the method is invoked on a virtual thread.  Each event is invoked on a different virtual thread."
msgstr "`@ConsumeEvent` `@RunOnVirtualThread` この場合、メソッドは仮想スレッド上で起動される。各イベントは異なる仮想スレッド上で起動されます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:704
#, fuzzy
msgid "To use this feature, make sure:"
msgstr "この機能を使うには"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:706
#, fuzzy
msgid "Your Java runtime supports virtual threads."
msgstr "Javaランタイムは仮想スレッドをサポートしています。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:707
#, fuzzy
msgid "Your method uses a blocking signature."
msgstr "あなたのメソッドはブロッキング・シグネチャを使っている。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:710
#, fuzzy
msgid "The second point means only methods returning an object or `void` can use `@RunOnVirtualThread`.  Methods returning a `Uni` or a `CompletionStage` **cannot** run on virtual threads."
msgstr "つ目のポイントは、オブジェクトまたは `void` を返すメソッドだけが `@RunOnVirtualThread` を使えるということです。 `Uni` や `CompletionStage` を返すメソッドは、仮想スレッドでは実行 *できない* 。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:712
#, fuzzy
msgid "Read xref:./virtual-threads.adoc[the virtual thread guide] for more details."
msgstr "詳しくは xref:./virtual-threads.adoc[バーチャル・スレッド・ガイドを] お読みください。"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:713
#, fuzzy, no-wrap
msgid "Use codecs"
msgstr "コーデックを使う"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:718
msgid "The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.  Quarkus provides a default codec for local delivery.  So you can exchange objects as follows:"
msgstr "link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert.xイベントバス] では、コーデックを使用してオブジェクトの _シリアライズ_ と _デシリアライズ_ を行います。Quarkusでは、ローカル配信用のデフォルトのコーデックを提供しています。そのため、以下のようにオブジェクトを交換することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:728
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(String name) {\n"
"    return bus.<String>request(\"greeting\", new MyName(name))\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:733
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\")\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \" + name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:736
msgid "If you want to use a specific codec, you need to set it on both ends explicitly:"
msgstr "特定のコーデックを使用したい場合は、両サイドで明示的に設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:747
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(String name) {\n"
"    return bus.<String>request(\"greeting\", name,\n"
"        new DeliveryOptions().setCodecName(MyNameCodec.class.getName())) // <1>\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:752
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\", codec = MyNameCodec.class)            // <2>\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \"+name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:754
msgid "Set the name of the codec to use to send the message"
msgstr "メッセージの送信に使用するコーデックの名前を設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:755
msgid "Set the codec to use to receive the message"
msgstr "メッセージの受信に使用するコーデックを設定します。"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:756
#, fuzzy, no-wrap
msgid "Combine HTTP and the Event Bus"
msgstr "HTTPとイベントバスを組み合わせる"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:762
#, fuzzy
msgid "Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.  It uses the request/reply dispatching mechanism.  Instead of implementing the business logic inside the Jakarta REST endpoint, we are sending a message.  Another bean consumes this message, and the response is sent using the _reply_ mechanism."
msgstr "挨拶HTTPエンドポイントを再訪し，非同期メッセージパッシングを使用して，呼び出しを分離Beanに委譲してみよう。これは、request/replyディスパッチ機構を使用しています。Jakarta RESTエンドポイント内でビジネスロジックを実装する代わりに、メッセージを送信しています。別の Bean がこのメッセージを消費し、応答は _reply_ メカニズムを使用して送信されます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:764
msgid "In your HTTP endpoint class, inject the event bus and uses the `request` method to send a message to the event bus and expect a response:"
msgstr "HTTPエンドポイントクラスでは、イベントバスを注入し、 `request` メソッドを使用して、イベントバスにメッセージを送信し、応答を期待します。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:781
#, no-wrap
msgid ""
"@Path(\"/bus\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:784
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:793
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(String name) {\n"
"        return bus.<String>request(\"greeting\", name)            // <1>\n"
"                .onItem().transform(Message::body);            // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:795
msgid "send the `name` to the `greeting` address and request a response"
msgstr "`greeting` アドレスに  `name`  を送信し、レスポンスを要求します。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:796
msgid "when we get the response, extract the body and send it to the user"
msgstr "レスポンスを取得したら、ボディを抽出してユーザーに送信します。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:800
msgid "the HTTP method returns a `Uni`.  If you are using RESTEasy Reactive, `Uni` support is built-in.  If you are using _classic_ RESTEasy, you need to add the `quarkus resteasy-mutiny` extension to your project."
msgstr "HTTP メソッドは `Uni` を返します。RESTEasy Reactive を使用している場合は、 `Uni` のサポートが組み込まれています。 _従来の_ RESTEasyを使用している場合は、 `quarkus resteasy-mutiny` エクステンションをプロジェクトに追加する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:803
msgid "We need a consumer listening on the `greeting` address.  This consumer can be in the same class or another bean such as:"
msgstr "`greeting` のアドレスをリッスンするコンシューマーが必要です。このコンシューマーは、同じクラスでも、次のような別のBeanでも構いません。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:819
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greeting\")\n"
"    public String greeting(String name) {\n"
"        return \"Hello \" + name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:824
msgid "This bean receives the name and returns the greeting message."
msgstr "このBeanは、名前を受け取り、グリーティングメッセージを返します。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:826
msgid "With this in place, every HTTP request on `/bus/quarkus` sends a message to the event bus, waits for a reply, and when this one arrives, writes the HTTP response:"
msgstr "これにより、 `/bus/quarkus` のすべてのHTTPリクエストは、イベントバスにメッセージを送信し、応答を待ち、その応答が到着すると、HTTPレスポンスを書き込みます。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:830
#, no-wrap
msgid "Hello Quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:833
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "より理解しやすくするために、HTTP リクエスト/レスポンスがどのように処理されたかを詳しく見てみましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:835
msgid "The request is received by the `greeting` method"
msgstr "リクエストは、 `greeting` メソッドで受信されます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:836
msgid "a message containing the _name_ is sent to the event bus"
msgstr "_name_ を含むメッセージがイベントバスに送信されます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:837
msgid "Another bean receives this message and computes the response"
msgstr "別の Bean がこのメッセージを受信して、レスポンスを計算します."

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:838
msgid "This response is sent back using the reply mechanism"
msgstr "このレスポンスは、応答メカニズムを使用して返信されます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:839
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "送信者が応答を受信すると、HTTP レスポンスに内容が書き込まれます。"

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:841
#, fuzzy, no-wrap
msgid "Bidirectional communication with browsers by using SockJS"
msgstr "SockJSによるブラウザとの双方向通信"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:847
msgid "The SockJS bridge provided by Vert.x allows browser applications and Quarkus applications to communicate using the event bus.  It connects both sides.  So, both sides can send messages received on the other side.  It supports the three delivery mechanisms."
msgstr "Vert.xが提供するSockJSブリッジは、ブラウザアプリケーションとQuarkusアプリケーションがイベントバスを使って通信できるようにします。双方を接続します。そのため、双方が相手側で受信したメッセージを送信することができます。3つの配信メカニズムをサポートしています。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:850
msgid "SockJS negotiates the communication channel between the Quarkus application and the browser.  If WebSockets are supported, it uses them; otherwise, it degrades to SSE, long polling, etc."
msgstr "SockJSは、Quarkusアプリケーションとブラウザの間の通信チャネルをネゴシエートします。WebSocketがサポートされている場合はそれを使用し、そうでない場合はSSEや長いポーリングなどにダウングレードします。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:852
msgid "So use SockJS, you need to configure the bridge, especially the addresses that will be used to communicate:"
msgstr "SockJSを使用するためには、ブリッジの設定、特に通信に使用されるアドレスの設定が必要です。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:862
#, no-wrap
msgid ""
"import io.vertx.core.Vertx;\n"
"import io.vertx.ext.bridge.PermittedOptions;\n"
"import io.vertx.ext.web.Router;\n"
"import io.vertx.ext.web.handler.sockjs.SockJSBridgeOptions;\n"
"import io.vertx.ext.web.handler.sockjs.SockJSHandler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:867
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
"import jakarta.inject.Inject;\n"
"import java.util.concurrent.atomic.AtomicInteger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:870
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SockJsExample {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:873
#, no-wrap
msgid ""
"    @Inject\n"
"    Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:880
#, no-wrap
msgid ""
"    public void init(@Observes Router router) {\n"
"        SockJSHandler sockJSHandler = SockJSHandler.create(vertx);\n"
"        sockJSHandler.bridge(new SockJSBridgeOptions()\n"
"                .addOutboundPermitted(new PermittedOptions().setAddress(\"ticks\")));\n"
"        router.route(\"/eventbus/*\").handler(sockJSHandler);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:886
msgid "This code configures the SockJS bridge to send all the messages targeting the `ticks` address to the connected browsers.  More detailed explanations about the configuration can be found on https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[the Vert.x SockJS Bridge documentation]."
msgstr "このコードは、`ticks` アドレスをターゲットとするすべてのメッセージを接続されたブラウザに送信するように SockJS ブリッジを設定します。  設定に関するより詳細な説明は、 https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[Vert.x SockJS Bridge ドキュメント] に記載されています。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:888
msgid "The browser must use the `vertx-eventbus` JavaScript library to consume the message:"
msgstr "ブラウザは、メッセージを消費するために、 `vertx-eventbus` JavaScriptライブラリを使用する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:902
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>SockJS example - Quarkus</title>\n"
"    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n"
"            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n"
"    <script type=\"application/javascript\" src=\"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js\"></script>\n"
"    <script src=\"https://cdn.jsdelivr.net/npm/vertx3-eventbus-client@3.8.5/vertx-eventbus.min.js\"></script>\n"
"</head>\n"
"<body>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:904
#, no-wrap
msgid "<h1>SockJS Examples</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:906
#, no-wrap
msgid "<p><strong>Last Tick:</strong> <span id=\"tick\"></span></p>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:910
#, no-wrap
msgid ""
"</body>\n"
"<script>\n"
"    var eb = new EventBus('/eventbus');\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:912
#, no-wrap
msgid "    eb.onopen = function () {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:917
#, no-wrap
msgid ""
"        eb.registerHandler('ticks', function (error, message) {\n"
"            $(\"#tick\").html(message.body);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:920
#, no-wrap
msgid ""
"</script>\n"
"</html>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:923
#, fuzzy, no-wrap
msgid "Use native transports"
msgstr "ネイティブ・トランスポートの使用"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:926
#, fuzzy
msgid "Native transports are not supported in native executables."
msgstr "ネイティブ・トランスポートはネイティブ実行ファイルではサポートされていない。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:928
#, fuzzy
msgid "To use `io_uring`, refer to the xref:use-io_uring[Use io_uring] section."
msgstr "`io_uring` を使用するには、「io_uringの xref:use-io_uring[使用] 」セクションを参照。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:933
#, fuzzy
msgid "Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports], which offers performance improvements on specific platforms.  To enable them, you must include the appropriate dependency for your platform.  It's usually a good idea to have both to keep your application platform-agnostic.  Netty is smart enough to use the correct one, that includes none at all on unsupported platforms:"
msgstr "Vert.xでは、 link:https://netty.io/wiki/native-transports.html[Nettyのネイティブ・トランスポートを] 使用することができ、特定のプラットフォームでパフォーマンスが向上します。これを有効にするには、プラットフォームに適した依存関係を含める必要があります。通常、アプリケーションをプラットフォームに依存しないようにするには、両方持っているのがよいでしょう。Nettyは賢いので、未対応のプラットフォームにはまったく依存しないなど、正しい方を使用します："

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:942
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-epoll</artifactId>\n"
"  <classifier>linux-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:948
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-kqueue</artifactId>\n"
"  <classifier>osx-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:954
#, no-wrap
msgid "implementation(\"io.netty:netty-transport-native-epoll::linux-x86_64\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:956
#, no-wrap
msgid "implementation(\"io.netty:netty-transport-native-kqueue::osx-x86_64\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:960
msgid "You will also have to explicitly configure Vert.x to use the native transport.  In `application.properties` add:"
msgstr "また、Vert.xでネイティブトランスポートを使用するように明示的に設定する必要があります。 `application.properties` に次を追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:964
#: upstream/_versions/main/guides/vertx-reference.adoc:1073
#: upstream/_versions/main/guides/vertx-reference.adoc:1144
#, no-wrap
msgid "quarkus.vertx.prefer-native-transport=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:967
msgid "Or in `application.yml`:"
msgstr "あるいは、 `application.yml` で次のように設定します。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:973
#, no-wrap
msgid ""
"quarkus:\n"
"  vertx:\n"
"    prefer-native-transport: true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:976
msgid "If all is well quarkus will log:"
msgstr "すべてがうまくいけば、クァーカス以下のログ出力を行います。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:979
#, no-wrap
msgid "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:981
#, fuzzy, no-wrap
msgid "Native Linux transport"
msgstr "ネイティブLinuxトランスポート"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:984
msgid "On Linux you can enable the following socket options:"
msgstr "Linuxでは、以下のソケットオプションを有効にすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:986
#: upstream/_versions/main/guides/vertx-reference.adoc:1007
msgid "SO_REUSEPORT"
msgstr "SOREUSEPORT"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:988
#: upstream/_versions/main/guides/vertx-reference.adoc:1009
#, no-wrap
msgid "quarkus.http.so-reuse-port=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:990
msgid "TCP_QUICKACK"
msgstr "TCP_QUICKACK"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:992
#, no-wrap
msgid "quarkus.http.tcp-quick-ack=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:994
msgid "TCP_CORK"
msgstr "TCP_CORK"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:996
#, no-wrap
msgid "quarkus.http.tcp-cork=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:998
msgid "TCP_FASTOPEN"
msgstr "TCP_FASTOPEN"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1000
#, no-wrap
msgid "quarkus.http.tcp-fast-open=true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:1002
#, fuzzy, no-wrap
msgid "Native macOS transport"
msgstr "macOSのネイティブ・トランスポート"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1005
msgid "On macOS Sierra and above you can enable the following socket options:"
msgstr "MacOS Sierra以上では、以下のソケットオプションを有効にすることができます。"

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:1011
#, no-wrap
msgid "Use a Vert.x context-aware scheduler"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1015
msgid "Some Mutiny operators need to schedule work on an executor thread pool.  A good example is `.onItem().delayIt().by(Duration.ofMillis(10)` as it needs such an executor to delay emissions."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1017
msgid "The default executor is returned by `io.smallrye.mutiny.infrastructure.Infrastructure` and it is already configured and managed by Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1019
msgid "That being said, there are cases where you need to make sure that an operation is run on a Vert.x (duplicated) context and not just on any random thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1022
msgid "The `io.smallrye.mutiny.vertx.core.ContextAwareScheduler` interface offers an API to obtain context-aware schedulers.  Such a scheduler is configured with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1024
msgid "a delegate `ScheduledExecutorService` of your choice (hint: you can reuse `Infrastructure.getDefaultWorkerPool()`), and"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1025
msgid "a context fetching strategy among:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1026
msgid "an explicit `Context`, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1027
msgid "calling `Vertx::getOrCreateContext()` either on the current thread or later when the scheduling request happens, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1028
msgid "calling `Vertx::currentContext()`, which fails if the current thread is not a Vert.x thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1030
msgid "Here is a sample where `ContextAwareScheduler` is used:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1034
#, no-wrap
msgid "class MyVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1038
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        vertx.getOrCreateContext().put(\"foo\", \"bar\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1042
#, no-wrap
msgid ""
"        var delegate = Infrastructure.getDefaultWorkerPool();\n"
"        var scheduler = ContextAwareScheduler.delegatingTo(delegate)\n"
"            .withCurrentContext();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1052
#, no-wrap
msgid ""
"        return Uni.createFrom().voidItem()\n"
"                .onItem().delayIt().onExecutor(scheduler).by(Duration.ofMillis(10))\n"
"                .onItem().invoke(() -> {\n"
"                    // Prints \"bar\"\n"
"                    var ctx = vertx.getOrCreateContext();\n"
"                    System.out.println(ctx.get(\"foo\"));\n"
"                });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1056
msgid "In this example a scheduler is created by capturing the context of the Vert.x event-loop that calls `asyncStart()`.  The `delayIt` operator uses that scheduler, and we can check that the context that we get in `invoke` is a Vert.x duplicated context where the data for key `\"foo\"` has been propagated."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:1057
#, fuzzy, no-wrap
msgid "Use a Unix domain socket"
msgstr "Unixドメインソケットを使用する"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1063
msgid "Listening on a Unix domain socket allows us to dispense with the overhead of TCP if the connection to the quarkus service is established from the same host.  This can happen if access to the service goes through a proxy which is often the case if you're setting up a service mesh with a proxy like Envoy."
msgstr "Unixドメインソケットでリスニングすることにより、quarkusサービスへの接続が同じホストから確立されている場合、TCPのオーバーヘッドを省略することができます。これは、サービスへのアクセスにEnvoyのようなプロキシを使ってサービスメッシュを設定している場合によく見られます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1065
#, fuzzy
msgid "This will only work on platforms that support xref:native-transport[Use native transports]."
msgstr "これは xref:native-transport[Useネイティブ・トランスポートを] サポートするプラットフォームでのみ機能する。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1067
#, fuzzy
msgid "Enable the appropriate xref:native-transport[Use native transports] and set the following environment property:"
msgstr "適切な xref:native-transport[Use native transportsを] 有効にし、以下の環境プロパティを設定する："

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1071
#, no-wrap
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1077
msgid "By itself this will not disable the tcp socket which by default will open on `0.0.0.0:8080`. It can be explicitly disabled:"
msgstr "これだけでは、デフォルトで `0.0.0.0:8080` で開かれる tcp ソケットを無効にすることはできません。これは次のように明示的に無効にすることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1080
#, no-wrap
msgid "quarkus.http.host-enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1084
msgid "These properties can be set through Java's `-D` command line parameter or on `application.properties`."
msgstr "これらのプロパティは、Javaの `-D` コマンドライン・パラメータまたは `application.properties` で設定できます。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1087
#, fuzzy
msgid "Do not forget to add the native transport dependency.  See xref:native-transport[Use native transports] for details."
msgstr "ネイティブ・トランスポートの依存関係を追加することを忘れないでください。詳細は xref:native-transport[Use native transportsを] 参照。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1089
msgid "Make sure your application has the right permissions to write to the socket."
msgstr "アプリケーションがソケットに書き込むための適切なアクセス許可を持っていることを確認してください。"

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:1091
#, fuzzy, no-wrap
msgid "Use io_uring"
msgstr "io_uringを使用"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1094
#, fuzzy
msgid "`io_uring` is not supported in native executables."
msgstr "`io_uring` はネイティブ実行ファイルではサポートされていない。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1096
#, fuzzy
msgid "`io_uring` support is experimental"
msgstr "`io_uring` サポートは実験的"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1101
#, fuzzy
msgid "`io_uring` is a Linux kernel interface that allows you to send and receive data asynchronously.  It provides unified semantics for both file and network I/O.  It was originally designed to target block devices and files but has since gained the ability to work with things like network sockets.  It has the potential to provide modest performance benefits to network I/O on its own and greater benefits for mixed file and network I/O application workloads."
msgstr "`io_uring` は、非同期にデータを送受信できるLinuxカーネル・インターフェースである。ファイルI/OとネットワークI/Oの両方に統一されたセマンティクスを提供する。もともとはブロック・デバイスとファイルをターゲットに設計されたが、その後、ネットワーク・ソケットのようなものとも連携できるようになった。ネットワークI/O単体ではそこそこの性能を発揮し、ファイルI/OとネットワークI/Oが混在するアプリケーションではより大きな効果を発揮する可能性がある。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1103
#, fuzzy
msgid "To learn more about `io_uring`, we recommend the following links:"
msgstr "`io_uring` についてもっと知るには、以下のリンクをお勧めする："

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1107
#, fuzzy
msgid "https://developers.redhat.com/articles/2023/04/12/why-you-should-use-iouring-network-io[Why you should use io_uring for network I/O]: The main benefit of io_uring for network I/O is a modern asynchronous API that is straightforward to use and provides unified semantics for file and network I/O.  A potential performance benefit of io_uring for network I/O is reducing the number of syscalls.  This could provide the biggest benefit for high volumes of small operations where the overhead of system calls can be significant."
msgstr "link:https://developers.redhat.com/articles/2023/04/12/why-you-should-use-iouring-network-io[ネットワークI/Oに] io_uringを link:https://developers.redhat.com/articles/2023/04/12/why-you-should-use-iouring-network-io[使うべき理由] ：ネットワークI/Oにio_uringを使用する主な利点は、使いやすく、ファイルI/OとネットワークI/Oの統一されたセマンティクスを提供する最新の非同期APIです。ネットワークI/Oのためのio_uringの潜在的なパフォーマンス上の利点は、システムコールの数を減らすことである。これは、システム・コールのオー バーヘッドが大きくなりがちな、小さな操作を大量に実行する場合に最大のメリットをもたらす可能性がある。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1109
#, fuzzy
msgid "https://dzone.com/articles/the-backend-revolution-or-why-io-uring-is-so-impor[The Backend Revolution and Why io_uring Is So Important]: The io_uring API uses two ring buffers for communication between application and kernel (hence the API name) and designed in a way that enables natural batching of requests and responses.  Besides, it provides a way to submit multiple requests in one system call, which can reduce overhead."
msgstr "link:https://dzone.com/articles/the-backend-revolution-or-why-io-uring-is-so-impor[バックエンド革命と] io_uringが link:https://dzone.com/articles/the-backend-revolution-or-why-io-uring-is-so-impor[重要な理由] ： io_uring APIは、アプリケーションとカーネル間の通信に2つのリングバッファを使用し（これがAPI名の由来である）、リクエストとレスポンスの自然なバッチ処理を可能にするように設計されている。さらに、1つのシステムコールで複数のリクエストを送信する方法を提供し、オーバーヘッドを削減することができる。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1111
#, fuzzy
msgid "https://stackoverflow.com/questions/61767702/what-exactly-is-io-uring[What exactly is io_uring?]: io_uring is a Linux kernel interface to efficiently allow you to send and receive data asynchronously.  It was originally designed to target block devices and files but has since gained the ability to work with things like network sockets."
msgstr "io_ link:https://stackoverflow.com/questions/61767702/what-exactly-is-io-uring[uringとは] 何か： io_uringは、非同期で効率的にデータを送受信するためのLinuxカーネル・インターフェースである。もともとはブロックデバイスやファイルを対象に設計されましたが、ネットワークソケットのようなものも扱えるようになりました。"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1115
#, fuzzy
msgid "To use `io_uring`, you need to add two dependencies to your project and enable native transport.  First add the following dependencies to your project:"
msgstr "`io_uring` を使用するには、プロジェクトに2つの依存関係を追加し、ネイティブ・トランスポートを有効にする必要があります。まず、以下の依存関係をプロジェクトに追加します："

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1129
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.netty.incubator</groupId>\n"
"    <artifactId>netty-incubator-transport-native-io_uring</artifactId>\n"
"    <version>0.0.21.Final</version> <!-- Update this version (https://github.com/netty/netty-incubator-transport-io_uring/tags) -->\n"
"    <classifier>linux-x86_64</classifier>\n"
"</dependency>\n"
"<dependency>\n"
"      <groupId>io.vertx</groupId>\n"
"      <artifactId>vertx-io_uring-incubator</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1137
#, no-wrap
msgid ""
"// Update the io_uring version by picking the latest from https://github.com/netty/netty-incubator-transport-io_uring/tags\n"
"implementation(\"io.netty.incubator:netty-incubator-transport-native-io_uring:0.0.21.Final\")\n"
"implementation(\"io.vertx:vertx-io_uring-incubator\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1140
#, fuzzy
msgid "Then, in the `application.properties`, add:"
msgstr "そして、 `application.properties` 、追加する："

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:1147
#, fuzzy, no-wrap
msgid "Can I use io_uring on my Linux machine?"
msgstr "Linuxマシンでio_uringは使えますか？"

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:1150
#, fuzzy
msgid "To check if you can use `io_uring` on your Linux machine, execute the following command:"
msgstr "Linuxマシンで `io_uring` 、使用できるかどうかを確認するには、以下のコマンドを実行する："

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1167
#, no-wrap
msgid ""
"> grep io_uring_setup /proc/kallsyms\n"
"0000000000000000 t __pfx_io_uring_setup\n"
"0000000000000000 t io_uring_setup\n"
"0000000000000000 T __pfx___x64_sys_io_uring_setup\n"
"0000000000000000 T __x64_sys_io_uring_setup\n"
"0000000000000000 T __pfx___ia32_sys_io_uring_setup\n"
"0000000000000000 T __ia32_sys_io_uring_setup\n"
"0000000000000000 d event_exit__io_uring_setup\n"
"0000000000000000 d event_enter__io_uring_setup\n"
"0000000000000000 d __syscall_meta__io_uring_setup\n"
"0000000000000000 d args__io_uring_setup\n"
"0000000000000000 d types__io_uring_setup\n"
"0000000000000000 d __event_exit__io_uring_setup\n"
"0000000000000000 d __event_enter__io_uring_setup\n"
"0000000000000000 d __p_syscall_meta__io_uring_setup\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1169
#, fuzzy
msgid "If it prints something like above, you can use `io_uring`."
msgstr "もし上記のように表示されたら、 `io_uring` ."

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:1172
#, fuzzy, no-wrap
msgid "Troubleshooting"
msgstr "トラブルシューティング"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1177
#, fuzzy
msgid "`io_uring` support is still experimental.  Check the https://github.com/netty/netty-incubator-transport-io_uring#faq[Netty io_uring FAQ] if you see some odd behavior.  Also, the https://github.com/netty/netty-incubator-transport-io_uring/issues/152[netty io_uring was slower than epoll] issue describes a few configuration mistakes."
msgstr "`io_uring` のサポートはまだ実験的です。奇妙な動作があれば link:https://github.com/netty/netty-incubator-transport-io_uring#faq[Netty io_uring FAQ] をチェックしてください。また、 link:https://github.com/netty/netty-incubator-transport-io_uring/issues/152[netty io] _uringが link:https://github.com/netty/netty-incubator-transport-io_uring/issues/152[epollより遅い] 問題には、いくつかの設定ミスがあります。"

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:1180
#, fuzzy
msgid "Domain sockets are not yet supported with io_uring."
msgstr "ドメイン・ソケットはio_uringではまだサポートされていない。"

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:1182
#, fuzzy
msgid "The Vert.x asynchronous file system API does not use io_uring yet."
msgstr "Vert.xの非同期ファイルシステムAPIは、まだio_uringを使用していません。"

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:1184
#, fuzzy, no-wrap
msgid "Deploy on read-only environments"
msgstr "読み取り専用環境への展開"

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:1187
msgid "In environments with read only file systems you may receive errors of the form:"
msgstr "ファイルシステムが読み取り専用の環境では、次のようなエラーが発生することがあります。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1191
#, no-wrap
msgid "java.lang.IllegalStateException: Failed to create cache dir\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1194
msgid "Assuming `/tmp/` is writable this can be fixed by setting the `vertx.cacheDirBase` property to point to a directory in `/tmp/` for instance in OpenShift by creating an environment variable `JAVA_OPTS` with the value `-Dvertx.cacheDirBase=/tmp/vertx`."
msgstr "`/tmp/` が書き込み可能である場合、これは `vertx.cacheDirBase` プロパティが `/tmp/` のディレクトリを指すように設定することで修正できます。例えば、OpenShift では環境変数 `JAVA_OPTS` を作成して `-Dvertx.cacheDirBase=/tmp/vertx` という値を設定します。"

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:1196
#, fuzzy, no-wrap
msgid "Customize the Vert.x configuration"
msgstr "Vert.xコンフィギュレーションのカスタマイズ"

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1201
msgid "The configuration of the managed Vert.x instance can be provided using the `application.properties` file, but also using _special beans_.  CDI beans exposing the `io.quarkus.vertx.VertxOptionsCustomizer` interface can be used to customize the Vert.x configuration.  For example, the following customizer change the `tmp` base directory:"
msgstr "マネージド Vert.x インスタンスの設定は、`application.properties` ファイルを使用して提供できますが、_special bean_ を使用することもできます。 `io.quarkus.vertx.VertxOptionsCustomizer` インターフェイスを公開する CDI Bean を使用して、Vert.x 設定をカスタマイズできます。 たとえば、次のカスタマイザは `tmp` ベース ディレクトリを変更します。"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1206
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyCustomizer implements VertxOptionsCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1212
#, no-wrap
msgid ""
"    @Override\n"
"    public void accept(VertxOptions options) {\n"
"        options.setFileSystemOptions(new FileSystemOptions().setFileCacheDir(\"target\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1215
msgid "The _customizer_ beans received the `VertxOptions` (coming from the application configuration), and can modify them."
msgstr "_customizer_ Beanは、(アプリケーションの設定に由来する) `VertxOptions` を受け取り、それを修正することができます。"

#~ msgid "https://quarkus.io/guides/amqp"
#~ msgstr "https://quarkus.io/guides/amqp"

#~ msgid "https://quarkus.io/guides/reactive-sql-clients"
#~ msgstr "https://quarkus.io/guides/reactive-sql-clients"

#~ msgid "https://quarkus.io/guides/kafka"
#~ msgstr "https://quarkus.io/guides/kafka"

#~ msgid "https://quarkus.io/guides/mailer"
#~ msgstr "https://quarkus.io/guides/mailer"

#~ msgid "https://quarkus.io/guides/redis"
#~ msgstr "https://quarkus.io/guides/redis"

#~ msgid "Accessing the Vert.x instance"
#~ msgstr "Vert.xインスタンスへのアクセス"

#~ msgid "To access the managed Vert.x instance, add the `quarkus-vertx` extension to your project.  Note that this dependency may already be installed (as a transitive dependency)."
#~ msgstr "マネージドVert.xインスタンスにアクセスするには、 `quarkus-vertx` エクステンションをプロジェクトに追加してください。この依存関係がすでにインストールされている可能性があることに注意してください（推移的依存関係として）。"

#~ msgid "Configuring the Vert.x instance"
#~ msgstr "Vert.xインスタンスの設定"

#~ msgid "Using Vert.x clients"
#~ msgstr "Vert.xクライアントの使用"

#~ msgid "The following table lists the most used libraries from the Vert.x ecosystem.  To access these APIs, add the indicated extension or dependency to your project.  Refer to the associated documentation to learn how to use them."
#~ msgstr "次の表は、Vert.xエコシステムで最も使用されているライブラリの一覧です。これらのAPIにアクセスするには、指定されたエクステンションまたは依存関係をプロジェクトに追加します。使用方法については、関連ドキュメントを参照してください。"

#~ msgid "Example of usage"
#~ msgstr "使用例"

#~ msgid "Using Vert.x JSON"
#~ msgstr "Vert.x JSONの使用"

#~ msgid "Using verticles"
#~ msgstr "verticleの使用"

#~ msgid "Deploying verticles"
#~ msgstr "verticleの展開"

#~ msgid "Using @ApplicationScoped Beans as Verticle"
#~ msgstr "Verticleとしての@ApplicationScoped Beansの使用"

#~ msgid "Using multiple verticles instances"
#~ msgstr "そして、Verticleインスタンスをデプロイします。"

#~ msgid "Using the event bus"
#~ msgstr "イベントバスの使用"

#~ msgid "Consuming events"
#~ msgstr "イベントのコンシューム"

#~ msgid "Configuring the address"
#~ msgstr "アドレスの設定"

#~ msgid "Asynchronous processing"
#~ msgstr "非同期処理"

#~ msgid "Blocking processing"
#~ msgstr "ブロッキング処理"

#~ msgid "Replying to messages"
#~ msgstr "メッセージへの返信"

#~ msgid "Implementing fire and forget interactions"
#~ msgstr "fire and forget インタラクションの実装"

#~ msgid "Dealing with messages"
#~ msgstr "メッセージの処理"

#~ msgid "Handling Failures"
#~ msgstr "失敗のハンドリング"

#~ msgid "if no reply handler is set, then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, i.e. `io.vertx.core.Vertx#exceptionHandler()`."
#~ msgstr "応答ハンドラが設定されていない場合、例外は再スローされ（必要に応じて `RuntimeException` でラップされる）、デフォルトの例外ハンドラ、すなわち `io.vertx.core.Vertx#exceptionHandler()` で処理することができます。"

#~ msgid "Sending messages"
#~ msgstr "メッセージの送信"

#~ msgid "Using codecs"
#~ msgstr "コーデックを使う"

#~ msgid "Combining HTTP and the event bus"
#~ msgstr "HTTPとイベントバスの融合"

#~ msgid "Bidirectional communication with browsers using SockJS"
#~ msgstr "SockJSによるブラウザとの双方向通信"

#~ msgid "Native Transport"
#~ msgstr "ネイティブトランスポート"

#~ msgid "Native transports are not supported in GraalVM produced binaries."
#~ msgstr "GraalVMで作られたバイナリでは、ネイティブトランスポートはサポートされていません。"

#~ msgid "Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports], which offers performance improvements on specific platforms.To enable them, you must include the appropriate dependency for your platform. It's usually a good idea to have both to keep your application platform-agnostic. Netty is smart enough to use the correct one, that includes none at all on unsupported platforms:"
#~ msgstr "Vert.x は https://netty.io/wiki/native-transports.html[Nettyのネイティブトランスポート] を使用することができます。これは特定のプラットフォームでパフォーマンスを向上させます。これらを有効にするには、お使いのプラットフォームに適切な依存関係を含める必要があります。通常、アプリケーションをプラットフォームに依存しないようにするために、両方を持つことは良い考えです。Nettyは賢いので、サポートされていないプラットフォームでは全く使用しないことも含めて、正しい方を使用します。"

#~ msgid "Native Linux Transport"
#~ msgstr "ネイティブLinuxトランスポート"

#~ msgid "Native macOS Transport"
#~ msgstr "ネイティブMacOSトランスポート"

#~ msgid "Listening to a Unix Domain Socket"
#~ msgstr "Unixドメインソケットのリスニング"

#, fuzzy
#~ msgid "This will only work on platforms that support xref:native-transport[Native Transport]."
#~ msgstr "xref:native-transport[Native Transportを] サポートするプラットフォームでのみ動作します。"

#, fuzzy
#~ msgid "Enable the appropriate xref:native-transport[Native Transport] and set the following environment property:"
#~ msgstr "適切な xref:native-transport[Native Transportを] 有効にし、以下の環境プロパティを設定します："

#, fuzzy
#~ msgid "Do not forget to add the native transport dependency.  See xref:native-transport[Native Transport] for details."
#~ msgstr "ネイティブ・トランスポートの依存関係を追加することを忘れないでください。詳しくは「 xref:native-transport[ネイティブ・トランスポート] 」をご覧ください。"

#~ msgid "Read only deployment environments"
#~ msgstr "読み取り専用のデプロイメント環境"

#~ msgid "Customizing the Vert.x configuration"
#~ msgstr "Vert.xインスタンスの設定"

#~ msgid "https://quarkus.io/guides/mqtt"
#~ msgstr "https://quarkus.io/guides/mqtt"

#~ msgid "./mvnw package -Pnative\n"
#~ msgstr "./mvnw package -Pnative\n"
