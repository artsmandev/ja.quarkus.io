# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-02-03 02:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/gradle-tooling.adoc:6
#, no-wrap
msgid "Building Quarkus apps with Gradle"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:12
#, no-wrap
msgid "Creating a new project"
msgstr "新規プロジェクトの作成"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:15
#, fuzzy
#| msgid "The easiest way to scaffold a Gradle project, is currently to use the Quarkus Maven plugin like so:"
msgid "To scaffold a Gradle project you can either use the xref:cli-tooling.adoc[Quarkus CLI] or the Quarkus Maven plugin:"
msgstr "Gradleプロジェクトをスキャフォールドにする最も簡単な方法は、現在のところ、このようにQuarkus Mavenプラグインを使用することです。"

#. type: Block title
#: upstream/_versions/main/guides/gradle-tooling.adoc:17
#: upstream/_versions/main/guides/gradle-tooling.adoc:99
#, no-wrap
msgid "CLI"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:24
#, no-wrap
msgid ""
"quarkus create app my-groupId:my-artifactId \\\n"
"    --extensions=resteasy,resteasy-jackson \\\n"
"    --gradle\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:27
msgid "_For more information about how to install the Quarkus CLI and use it, please refer to xref:cli-tooling.adoc[the Quarkus CLI guide]._"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/gradle-tooling.adoc:30
#, no-wrap
msgid "Maven"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:39
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=my-groupId \\\n"
"    -DprojectArtifactId=my-artifactId \\\n"
"    -Dextensions=\"resteasy,resteasy-jackson\" \\\n"
"    -DbuildTool=gradle\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:43
#, fuzzy
#| msgid "If you just launch `mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create` the Maven plugin asks for user inputs. You can disable (and use default values) this interactive mode by passing `-B` to the Maven command."
msgid "If you just launch `mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create` the Maven plugin asks for user inputs. You can disable this interactive mode (and use default values) by passing `-B` to the Maven command."
msgstr "`mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create`  を起動するだけで、Maven プラグインはユーザー入力を要求します。 `-B`  を Maven コマンドに渡すことで、この対話型モードを無効にすることができます (デフォルト値を使用します)。"

#. type: delimited block *
#: upstream/_versions/main/guides/gradle-tooling.adoc:46
msgid "If you prefer using the Kotlin DSL, use `gradle-kotlin-dsl` instead of `gradle`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:50
msgid "Quarkus project scaffolding automatically installs the Gradle wrapper (`./gradlew`) in your project."
msgstr "Quarkusプロジェクトのスキャフォールドは、プロジェクトにGradleラッパー( `./gradlew` )を自動的にインストールします。"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:52
msgid "If you prefer to use a standalone Gradle installation, please use Gradle {gradle-version}."
msgstr "スタンドアロンのGradleを使用したい場合は、Gradle {gradle-version} を使用してください。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:55
msgid "The project is generated in a directory named after the passed artifactId."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:58
#, fuzzy
#| msgid "A pair of Dockerfiles for native and jvm mode are also generated in `src/main/docker`.  Instructions to build the image and run the container are written in those Dockerfiles."
msgid "A pair of Dockerfiles for native and JVM modes are also generated in `src/main/docker`.  Instructions to build the image and run the container are written in those Dockerfiles."
msgstr "ネイティブモードと jvm モード用の Dockerfile も `src/main/docker`  に生成されています。イメージのビルドとコンテナーの実行の指示は、これらの Dockerfile に書かれています。"

#. type: Title ===
#: upstream/_versions/main/guides/gradle-tooling.adoc:60
#, no-wrap
msgid "Custom test configuration profile in JVM mode"
msgstr "JVMモードでのカスタムテスト構成プロファイル"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:65
#, fuzzy
#| msgid "By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus configuration profiles, everything you need to know is explained in the link:config#configuration-profiles[Configuration Profiles Documentation]."
msgid "By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus configuration profiles, everything you need to know is explained in the xref:config.adoc#configuration-profiles[Configuration Profiles Documentation]."
msgstr "デフォルトでは、JVMモードでのQuarkusテストは、 `test`  設定プロファイルを使用して実行されます。Quarkusの設定プロファイルについてよく知らない場合は、必要な情報はすべて link:config#configuration-profiles[設定プロファイルのドキュメント]で説明されています。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:69
msgid "It is however possible to use a custom configuration profile for your tests with the Gradle build configuration shown below.  This can be useful if you need for example to run some tests using a specific database which is not your default testing database."
msgstr "しかし、以下に示す Gradle ビルド設定でテスト用のカスタム設定プロファイルを使用することは可能です。これは例えば、デフォルトのテストデータベースではない特定のデータベースを使ってテストを実行する必要がある場合に便利です。"

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:75
#, no-wrap
msgid ""
"test {\n"
"    systemProperty \"quarkus.test.profile\", \"foo\" <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:78
msgid "or, if you use the Gradle Kotlin DSL:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:84
#, no-wrap
msgid ""
"tasks.test {\n"
"    systemProperty(\"quarkus.test.profile\", \"foo\") <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:87
msgid "The `foo` configuration profile will be used to run the tests."
msgstr "`foo`  設定プロファイルがテストの実行に使用されます。"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:92
msgid "It is not possible to use a custom test configuration profile in native mode for now. Native tests are always run using the `prod` profile."
msgstr "今のところ、ネイティブモードでカスタムテスト設定プロファイルを使用することはできません。ネイティブテストは常に `prod`  プロファイルを使用して実行されます。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:94
#, no-wrap
msgid "Dealing with extensions"
msgstr "エクステンションへの対応"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:97
msgid "From inside a Quarkus project, you can obtain a list of the available extensions with:"
msgstr "Quarkusプロジェクトの内部から、利用可能なエクステンションのリストを取得することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:102
#, fuzzy, no-wrap
#| msgid "`extensions`"
msgid "quarkus extension\n"
msgstr "`extensions`"

#. type: Block title
#: upstream/_versions/main/guides/gradle-tooling.adoc:105
#, no-wrap
msgid "Gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:108
#, no-wrap
msgid "./gradlew listExtensions\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:111
msgid "You can enable an extension using:"
msgstr "以下を使ってエクステンションを有効化できます。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:116
msgid "Extensions are passed using a comma-separated list."
msgstr "エクステンションは、カンマ区切りのリストを使用して渡されます。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:121
msgid "The extension name is the GAV name of the extension: e.g. `io.quarkus:quarkus-agroal`.  But you can pass a partial name and Quarkus will do its best to find the right extension.  For example, `agroal`, `Agroal` or `agro` will expand to `io.quarkus:quarkus-agroal`.  If no extension is found or if more than one extensions match, you will see a red check mark ❌ in the command result."
msgstr "`io.quarkus:quarkus-agroal` エクステンション名は、エクステンションのGAV名です。しかし、部分的な名前を渡すことができ、Quarkusは適切なエクステンションを見つけるために最善を尽くします。例えば、 `agroal`  、 `Agroal`  、 `agro`  は `io.quarkus:quarkus-agroal`  に展開されます。エクステンションが見つからなかったり、複数のエクステンションが一致した場合は、コマンドの結果に赤いチェックマーク❌が表示されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:134
#, no-wrap
msgid ""
"$ ./gradlew addExtension --extensions=\"jdbc,agroal,non-exist-ent\"\n"
"[...]\n"
"❌ Multiple extensions matching 'jdbc'\n"
"     * io.quarkus:quarkus-jdbc-h2\n"
"     * io.quarkus:quarkus-jdbc-mariadb\n"
"     * io.quarkus:quarkus-jdbc-postgresql\n"
"     Be more specific e.g using the exact name or the full gav.\n"
"✅ Adding extension io.quarkus:quarkus-agroal\n"
"❌ Cannot find a dependency matching 'non-exist-ent', maybe a typo?\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:137
msgid "You can install all extensions which match a globbing pattern:"
msgstr "グロブパターンに一致するエクステンションをすべてインストールすることができます。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:142
#, no-wrap
msgid "Development mode"
msgstr "開発モード"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:146
#, fuzzy
#| msgid "Quarkus comes with a built-in development mode.  Run your application with:"
msgid "Quarkus comes with a built-in development mode.  You can start it with:"
msgstr "Quarkusには開発モードが組み込まれています。以下でアプリケーションを実行します。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:151
msgid "Note that if you run it this way the continuous testing experience will not be as nice, as gradle runs as a daemon Quarkus can't draw the 'pretty' test output so falls back to just logging the output."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:155
msgid "You can then update the application sources, resources and configurations.  The changes are automatically reflected in your running application.  This is great to do development spanning UI and database as you see changes reflected immediately."
msgstr "その後、アプリケーションのソース、リソース、および設定を更新することができます。変更は実行中のアプリケーションに自動的に反映されます。変更がすぐに反映されるので、UIやデータベースにまたがった開発をするのに最適です。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:162
msgid "`quarkusDev` enables hot deployment with background compilation, which means that when you modify your Java files or your resource files and refresh your browser these changes will automatically take effect.  This works too for resource files like the configuration property file.  The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the Java files are compiled, and the application is redeployed, then your request is serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr "`quarkusDev`  は、バックグラウンドでのコンパイルによるホットデプロイを可能にします。つまり、Java ファイルやリソースファイルを変更してブラウザを更新すると、これらの変更が自動的に有効になります。これは、設定プロパティーファイルのようなリソースファイルにも適用されます。ブラウザをリフレッシュする行為は、ワークスペースのスキャンをトリガし、変更が検出された場合、Javaファイルがコンパイルされ、アプリケーションが再配置されると、あなたの要求は再配置されたアプリケーションによって処理されます。コンパイルやデプロイに問題がある場合は、エラーページでお知らせします。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:164
msgid "Hit `CTRL+C` to stop the application."
msgstr "`CTRL+C`  を叩いてアプリケーションを停止させます。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:166
msgid "You can change the working directory the development environment runs on:"
msgstr "開発環境が動作する作業ディレクトリーを変更することができます:"

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:172
#, no-wrap
msgid ""
"quarkusDev {\n"
"    workingDir = rootProject.projectDir\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:177
msgid "By default, the `quarkusDev` task uses `compileJava` compiler options. These can be overridden by setting the `compilerArgs` property in the task."
msgstr "デフォルトでは、 `quarkusDev`  タスクは `compileJava`  コンパイラ・オプションを使用します。これらは、タスクの `compilerArgs`  プロパティーを設定することで上書きすることができます。"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:182
msgid "By default, `quarkusDev` sets the debug host to `localhost` (for security reasons). If you need to change this, for example to enable debugging on all hosts, you can use the `-DdebugHost` option like so:"
msgstr "デフォルトでは、 `quarkusDev` はデバッグホストを `localhost` に設定します (セキュリティー上の理由から)。これを変更する必要がある場合、例えばすべてのホストでデバッグを有効にしたい場合は、 `-DdebugHost` オプションを次のように使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:189
msgid "The plugin also exposes a `quarkusDev` configuration. Using this configuration to declare a dependency will restrict the usage of that dependency to development mode.  The `quarkusDev` configuration can be used as following:"
msgstr "このプラグインは `quarkusDev` の設定も公開しています。この設定を使って依存関係を宣言すると、その依存関係の使用が開発モードに制限されます。 `quarkusDev` の設定は以下のように使用できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:195
#, no-wrap
msgid ""
"dependencies {\n"
"    quarkusDev 'io.quarkus:quarkus-jdbc-h2'\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/gradle-tooling.adoc:197
#, no-wrap
msgid "Remote Development Mode"
msgstr "リモート開発モード"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:201
msgid "It is possible to use development mode remotely, so that you can run Quarkus in a container environment (such as OpenShift)  and have changes made to your local files become immediately visible."
msgstr "開発モードをリモートで使用することができるので、コンテナー環境(OpenShiftなど)でQuarkusを実行して、ローカルファイルに加えられた変更をすぐに確認できるようにすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:203
msgid "This allows you to develop in the same environment you will actually run your app in, and with access to the same services."
msgstr "これにより、実際にアプリを実行するのと同じ環境で、同じサービスにアクセスしながら開発することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:205
msgid "Do not use this in production. This should only be used in a development environment. You should not run production applications in dev mode."
msgstr "本番環境では使用しないでください。開発環境でのみ使用してください。本番環境のアプリケーションを開発モードで実行してはいけません。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:207
msgid "To do this you must build a mutable application, using the `mutable-jar` format. Set the following properties in `application.properties`:"
msgstr "これを行うには、 `mutable-jar` 形式を使用して、ミュータブルアプリケーションをビルドする必要があります。 `application.xml` で以下のプロパティーを設定してください。"

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:213
#, no-wrap
msgid ""
"quarkus.package.type=mutable-jar <1>\n"
"quarkus.live-reload.password=changeit <2>\n"
"quarkus.live-reload.url=http://my.cluster.host.com:8080 <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:217
msgid "This tells Quarkus to use the mutable-jar format. Mutable applications also include the deployment time parts of Quarkus, so they take up a bit more disk space. If run normally they start just as fast and use the same memory as an immutable application, however they can also be started in dev mode."
msgstr "これは、QuarkusにMutable-jar形式を使用するように指示します。ミュータブルアプリケーションには、Quarkusのデプロイメント時間の部分も含まれているため、より多くのディスクスペースを占有します。普通に実行した場合は、イミュータブルアプリケーションと同じ速度で起動し、同じメモリーを使用しますが、devモードで起動することもできます。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:218
msgid "The password that is used to secure communication between the remote side and the local side."
msgstr "リモート側とローカル側の通信を安全に保つためのパスワードです。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:220
msgid "The URL that your app is going to be running in dev mode at. This is only needed on the local side, so you may want to leave it out of the properties file and specify it as a system property on the command line."
msgstr "アプリがdevモードで実行されるURL。これはローカル側でのみ必要なので、プロパティー ファイルから除外して、コマンド ラインでシステム プロパティーとして指定するとよいでしょう。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:222
msgid "The `mutable-jar` is then built in the same way that a regular Quarkus jar is built, i.e. by issuing:"
msgstr "`mutable-jar` は、通常のQuarkus jarをビルドするのと同じ方法で発行することでビルドされます。つまり以下のように発行できます:"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:227
msgid "Before you start Quarkus on the remote host set the environment variable `QUARKUS_LAUNCH_DEVMODE=true`. If you are on bare metal you can set it via the `export QUARKUS_LAUNCH_DEVMODE=true` command and then run the application with the proper `java -jar ...` command to run the application."
msgstr "リモートホストでQuarkusを起動する前に、環境変数 `QUARKUS_LAUNCH_DEVMODE=true`  を設定します。ベアメタルを使用している場合は、 `export QUARKUS_LAUNCH_DEVMODE=true`  コマンドで設定し、適切に `java -jar ...` コマンドでアプリケーションを実行します。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:230
msgid "If you plan on running the application via Docker, then you'll need to add `-e QUARKUS_LAUNCH_DEVMODE=true` to the `docker run` command.  When the application starts you should now see the following line in the logs: `Profile dev activated. Live Coding activated`."
msgstr "アプリケーションをdocker経由で実行する場合は、 `docker run` コマンドに `-e QUARKUS_LAUNCH_DEVMODE=true` を追加してイメージを起動します。アプリケーションが起動すると、ログに次のような行が表示されるはずです: `Profile dev activated. Live Coding activated` ."

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:235
msgid "The remote side does not need to include Maven or any other development tools. The normal `fast-jar` Dockerfile that is generated with a new Quarkus application is all you need. If you are using bare metal launch the Quarkus runner jar, do not attempt to run normal devmode."
msgstr "リモート側にはMavenなどの開発ツールを入れる必要はありません。新しいQuarkusアプリケーションで生成される通常の `fast-jar`  Dockerfileがあれば大丈夫です。ベアメタルでQuarkus runner jarを起動している場合は、通常のdevmodeを実行しようとしないでください。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:237
msgid "Now you need to connect your local agent to the remote host, using the `remote-dev` command:"
msgstr "ここで、 `remote-dev`  コマンドを使用して、ローカルエージェントをリモートホストに接続する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:241
#, no-wrap
msgid "./gradlew quarkusRemoteDev -Dquarkus.live-reload.url=http://my-remote-host:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:245
msgid "Now every time you refresh the browser you should see any changes you have made locally immediately visible in the remote app."
msgstr "これでブラウザを更新するたびに、ローカルで行った変更がリモートアプリにすぐに表示されるようになりました。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:247
msgid "All the config options are shown below:"
msgstr "全ての設定オプションは以下の通りです:"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:250
#, no-wrap
msgid "Debugging"
msgstr "デバッグ"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:253
msgid "In development mode, Quarkus starts by default with debug mode enabled, listening to port `5005` without suspending the JVM."
msgstr "開発モードでは、Quarkusはデフォルトでデバッグモードを有効にして起動し、JVMをサスペンドせずにポート `5005`  をリッスンします。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:255
msgid "This behavior can be changed by giving the `debug` system property one of the following values:"
msgstr "この動作は、 `debug` システム・プロパティーに以下の値のいずれかを与えることで変更できます。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:257
msgid "`false` - the JVM will start with debug mode disabled"
msgstr "`false`  - JVMはデバッグモードを無効にして起動します。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:258
msgid "`true` - The JVM is started in debug mode and will be listening on port `5005`"
msgstr "`true`  - JVM はデバッグモードで起動され、 `5005`ポートをリッスンします。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:259
msgid "`client` - the JVM will start in client mode and attempt to connect to `localhost:5005`"
msgstr "`client`  - JVM はクライアントモードで起動し、 `localhost:5005`に接続を試みます。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:260
msgid "`{port}` - The JVM is started in debug mode and will be listening on `{port}`"
msgstr "`{port}` - JVM はデバッグモードで起動されています。 `{port}`"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:262
msgid "An additional system property `suspend` can be used to suspend the JVM, when launched in debug mode. `suspend` supports the following values:"
msgstr "追加のシステム・プロパティー `suspend` は、デバッグ・モードで起動されたときに JVM をサスペンドするために使用できます。 `suspend` は以下の値をサポートしています。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:264
msgid "`y` or `true` - The debug mode JVM launch is suspended"
msgstr "`y` または `true` - デバッグモードの JVM 起動が中断されます。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:265
msgid "`n` or `false` - The debug mode JVM is started without suspending"
msgstr "`n` または `false` - デバッグモードの JVM をサスペンドせずに起動します。"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:269
msgid "You can also run a Quarkus application in debug mode with a suspended JVM using:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:275
msgid "Then, attach your debugger to `localhost:5005`."
msgstr "次に、デバッガーを `localhost:5005`  にアタッチします。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:277
#, no-wrap
msgid "Import in your IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:281
msgid "Once you have a <<project-creation, project generated>>, you can import it in your favorite IDE.  The only requirement is the ability to import a Gradle project."
msgstr "link:#project-creation[プロジェクトを生成] したら、お気に入りのIDEでインポートすることができます。唯一の条件は、Gradleプロジェクトをインポートできることです。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:283
#, no-wrap
msgid "**Eclipse**\n"
msgstr "**Eclipse**\n"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:288
msgid "In Eclipse, click on: `File -> Import`.  In the wizard, select: `Gradle -> Existing Gradle Project`.  On the next screen, select the root location of the project.  The next screen list the found modules; select the generated project and click on `Finish`. Done!"
msgstr "Eclipse で、 `File → Import`  をクリックします。ウィザードで、 `Gradle → Existing Gradle Project`  を選択します。次の画面で、プロジェクトのルートの場所を選択します。次の画面では、見つかったモジュールのリストが表示されるので、生成されたプロジェクトを選択して `Finish`  をクリックします。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:290
msgid "In a separated terminal, run:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:294
#, fuzzy
#| msgid "In a separated terminal, run `./gradlew quarkusDev`, and enjoy a highly productive environment."
msgid "and enjoy a highly productive environment."
msgstr "分離された端末で `./gradlew quarkusDev`  を実行し、生産性の高い環境を楽しむことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:296
#, no-wrap
msgid "**IntelliJ**\n"
msgstr "**IntelliJ**\n"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:298
msgid "In IntelliJ:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:300
msgid "From inside IntelliJ select `File -> New -> Project From Existing Sources...` or, if you are on the welcome dialog, select `Import project`."
msgstr "IntelliJの内部から `File → New → Project From Existing Sources…​`  を選択するか、ウェルカム・ダイアログであれば `Import project`  を選択してください。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:301
#: upstream/_versions/main/guides/gradle-tooling.adoc:317
msgid "Select the project root"
msgstr "プロジェクトのルートを選択します。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:302
msgid "Select `Import project from external model` and `Gradle`"
msgstr "`Import project from external model`  を選択して `Gradle`"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:303
msgid "Next a few times (review the different options if needed)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:304
msgid "On the last screen click on Finish"
msgstr "最後の画面でFinishをクリックします。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:306
#, fuzzy
#| msgid "In a separated terminal or in the embedded terminal, run `./gradlew quarkusDev`. Enjoy!"
msgid "In a separated terminal or in the embedded terminal, run:"
msgstr "分離された端末または埋め込み端末で、 `./gradlew quarkusDev`  を実行してください。お楽しみください!"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:310
#: upstream/_versions/main/guides/gradle-tooling.adoc:324
msgid "Enjoy!"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:312
#, no-wrap
msgid "**Apache NetBeans**\n"
msgstr "**Apache NetBeans**\n"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:314
msgid "In NetBeans:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:316
msgid "Select `File -> Open Project`"
msgstr "`File → Open Project` を選択"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:318
msgid "Click on `Open Project`"
msgstr "`Open Project` をクリックしてください。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:320
#, fuzzy
#| msgid "In a separated terminal or the embedded terminal, go to the project root and run `./gradlew quarkusDev`. Enjoy!"
msgid "In a separated terminal or the embedded terminal, go to the project root and run:"
msgstr "分離されたターミナルまたは埋め込みターミナルで、プロジェクトのルートに移動し、 `./gradlew quarkusDev`  を実行します。お楽しみください!"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:326
#, no-wrap
msgid "**Visual Studio Code**\n"
msgstr "**Visual Studio Code**\n"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:328
msgid "Open the project directory in VS Code. If you have installed the Java Extension Pack (grouping a set of Java extensions), the project is loaded as a Gradle project."
msgstr "VS Codeでプロジェクトディレクトリーを開きます。Java Extension Pack(Javaエクステンションのセットをグループ化したもの)をインストールしている場合、プロジェクトはGradleプロジェクトとして読み込まれます。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:329
#, no-wrap
msgid "Downloading dependencies for offline development and testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:334
msgid "Quarkus extension dependencies are divided into the runtime extension dependencies that end up on the application runtime classpath and the deployment (or build time) extension dependencies that are resolved by Quarkus only at application build time to create the build classpath. Application developers are expected to express dependencies only on the runtime artifacts of Quarkus extensions."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:336
msgid "To enable the use-case of building and testing a Quarkus application offline, the plugin includes the `quarkusGoOffline` task that could be called from the command line like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:340
#, fuzzy, no-wrap
#| msgid "./gradlew build\n"
msgid "./gradlew quarkusGoOffline\n"
msgstr "./gradlew build\n"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:344
msgid "This task will resolve all the runtime, build time, test and dev mode dependencies of the application to the Gradle cache.  Once executed, you will be able to safely run quarkus task with `--offline` flag."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:345
#, no-wrap
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:348
msgid "Native executables make Quarkus applications ideal for containers and serverless workloads."
msgstr "ネイティブ実行ファイルにより、Quarkusアプリケーションはコンテナーやサーバーレスのワークロードに最適です。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:350
msgid "Make sure to have `GRAALVM_HOME` configured and pointing to GraalVM version {graalvm-version} (Make sure to use a Java 11 version of GraalVM)."
msgstr "`GRAALVM_HOME`  を設定し、GraalVM バージョン {graalvm-version} を指していることを確認してください。(必ずGraalVMのJava 11バージョンを使用してください)。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:352
#, fuzzy
#| msgid "Building a native executable"
msgid "Create a native executable using:"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:356
msgid "A native executable will be present in `build/`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:359
msgid "Native related properties can either be added in `application.properties` file, as command line arguments or in the `quarkusBuild` task.  Configuring the `quarkusBuild` task can be done as following:"
msgstr "ネイティブ関連のプロパティーは、 `application.properties`  ファイルにコマンドライン引数として追加するか、 `quarkusBuild`  タスクに追加することができます。 `quarkusBuild`  タスクの設定は以下のように行います:"

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:368
#, no-wrap
msgid ""
"quarkusBuild {\n"
"    nativeArgs {\n"
"        containerBuild = true <1>\n"
"        buildImage = \"quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}\" <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:371
msgid "or if you are using the Gradle Kotlin DSL:"
msgstr "または、Gradle Kotlin DSLを使用している場合。"

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:381
#, no-wrap
msgid ""
"tasks.quarkusBuild {\n"
"    nativeArgs {\n"
"        \"container-build\" to true <1>\n"
"        \"build-image\" to \"quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}\" <2>\n"
"        \"java-home\" to \"/opt/java-11/\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:384
#, fuzzy
#| msgid "Set `quarkus.native.containerBuild` property to `true`"
msgid "Set `quarkus.native.container-build` property to `true`"
msgstr "`quarkus.native.containerBuild`  プロパティーを `true`"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:385
#, fuzzy
#| msgid "Set `quarkus.native.buildImage` property to `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}`"
msgid "Set `quarkus.native.build-image` property to `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}`"
msgstr "`quarkus.native.buildImage`  プロパティーを `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}`"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:391
msgid "When using the Gradle Groovy DSL, property keys must follow lower camel case notation.  e.g. `container-build` is not valid, and should be replaced by `containerBuild`.  This limitation does not apply to the Gradle Kotlin DSL."
msgstr "Gradle Groovy DSL を使用する場合、プロパティーキーは小文字のキャメルケース表記に従わなければなりません。例: `container-build` は無効なので、 `containerBuild` で置き換えてください。この制限は Gradle Kotlin DSL には適用されません。"

#. type: Title ===
#: upstream/_versions/main/guides/gradle-tooling.adoc:393
#, no-wrap
msgid "Build a container friendly executable"
msgstr "コンテナーフレンドリーな実行ファイルのビルド"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:397
msgid "The native executable will be specific to your operating system.  To create an executable that will run in a container, use the following:"
msgstr "ネイティブ実行ファイルは、お使いのオペレーティングシステムに固有のものになります。コンテナー内で実行される実行ファイルを作成するには、次のようにします。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:403
msgid "The produced executable will be a 64 bit Linux executable, so depending on your operating system it may no longer be runnable.  However, it's not an issue as we are going to copy it to a Docker container.  Note that in this case the build itself runs in a Docker container too, so you don't need to have GraalVM installed locally."
msgstr "生成される実行ファイルは64bitのLinux実行ファイルになるので、OSによっては実行できなくなる可能性があります。しかし、Dockerコンテナーにコピーするので問題ありません。この場合、ビルド自体もDockerコンテナー内で動作するので、ローカルにGraalVMをインストールする必要はないことに注意してください。"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:407
msgid "By default, the native executable will be generated using the `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` Docker image."
msgstr "デフォルトでは、 `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}`  Dockerイメージを使用してネイティブ実行ファイルが生成されます。"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:410
msgid "If you want to build a native executable with a different Docker image (for instance to use a different GraalVM version), use the `-Dquarkus.native.builder-image=<image name>` build argument."
msgstr "異なるDockerイメージでネイティブ実行ファイルをビルドしたい場合(例えば、異なるGraalVMのバージョンを使用するなど)、 `-Dquarkus.native.builder-image=<image name>` のbuild引数を使用してください。"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:413
msgid "The list of the available Docker images can be found on https://quay.io/repository/quarkus/ubi-quarkus-native-image?tab=tags[quay.io].  Be aware that a given Quarkus version might not be compatible with all the images available."
msgstr "利用可能なDockerイメージのリストは、 link:https://quay.io/repository/quarkus/ubi-quarkus-native-image?tab=tags[quay.io]にあります。特定のQuarkusのバージョンは、利用可能なすべてのイメージと互換性がない場合があることに注意してください。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:415
#, no-wrap
msgid "Running native tests"
msgstr "ネイティブテストの実行"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:418
msgid "Run the native tests using:"
msgstr "次のようにネイティブテストを実行します:"

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:422
#, no-wrap
msgid "./gradlew testNative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:425
msgid "This task depends on `quarkusBuild`, so it will generate the native image before running the tests."
msgstr "このタスクは `quarkusBuild`  に依存しているので、テストを実行する前にネイティブイメージを生成します。"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:429
msgid "By default, the `native-test` source set is based on `main` and `test` source sets. It is possible to add an extra source set. For example, if your integration tests are located in an `integrationTest` source set, you can specify it as:"
msgstr "デフォルトでは、 `native-test` のソースセットは、 `main` と `test` のソースセットに基づいています。ソースセットを追加することも可能です。たとえば、統合テストが `integrationTest` のソースセットにある場合は、次のように指定します。"

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:437
#, no-wrap
msgid ""
"quarkus {\n"
"    sourceSets {\n"
"        extraNativeTest = sourceSets.integrationTest\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:441
#, no-wrap
msgid "Using fast-jar"
msgstr "fast-jar の利用"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:444
msgid "`fast-jar` is now the default quarkus package type. The result of `./gradlew build` command is a new directory under `build` named `quarkus-app`."
msgstr "`fast-jar` がデフォルトの quarkus パッケージタイプになりました。 `./gradlew build` コマンドの結果、 `build` の下に `quarkus-app` という名前の新しいディレクトリが作成されます。"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:446
msgid "You can run the application using: `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "`java -jar target/getting-started-1.0.0-SNAPSHOT-runner.jar` を使ってアプリケーションを実行することができます。"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:449
msgid "In order to successfully run the produced jar, you need to have the entire contents of the `quarkus-app` directory. If any of the files are missing, the application will not start or might not function correctly."
msgstr "生成された jar を正常に実行するためには、 `quarkus-app` ディレクトリのすべての内容が必要です。いずれかのファイルが欠落していると、アプリケーションが起動しなかったり、正しく機能しない可能性があります。"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:453
msgid "The `fast-jar` packaging results in creating an artifact that starts a little faster and consumes slightly less memory than a legacy Quarkus jar because it has indexed information about which dependency jar contains classes and resources. It can thus avoid the lookup into potentially every jar on the classpath that the legacy jar necessitates, when loading a class or resource."
msgstr "`fast-jar` パッケージングでは、どの依存関係のjarにクラスやリソースが含まれているかという情報がインデックス化されているため、レガシーのQuarkus jarよりも起動が少し速く、メモリ消費量もわずかに少ないアーティファクトを作成できます。このため、クラスやリソースをロードする際に、 レガシー jar が必要とするクラスパス上のすべての jar を検索する必要がなくなります。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:454
#, no-wrap
msgid "Building Uber-Jars"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:457
msgid "Quarkus Gradle plugin supports the generation of Uber-Jars by specifying a `quarkus.package.type` argument as follows:"
msgstr "Quarkus Gradleプラグインは、以下のように `--uber-jar`  引数を指定して UberJar の生成をサポートしています。"

#. type: delimited block =
#: upstream/_versions/main/guides/gradle-tooling.adoc:463
msgid "When building an Uber-Jar you can specify entries that you want to exclude from the generated jar by using the `--ignored-entry` argument:"
msgstr "UberJar を作成する際に、 `--ignored-entry`  引数を使用して生成された jar から除外したいエントリーを指定することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:467
#, no-wrap
msgid "./gradlew quarkusBuild -Dquarkus.package.type=uber-jar --ignored-entry=META-INF/file1.txt\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:470
msgid "The entries are relative to the root of the generated Uber-Jar. You can specify multiple entries by adding extra `--ignored-entry` arguments."
msgstr "エントリーは、生成された Uber-Jar のルートからの相対的なものです。追加の `--ignored-entry`  引数を追加することで、複数のエントリーを指定することができます。"

#. type: Title ===
#: upstream/_versions/main/guides/gradle-tooling.adoc:472
#, no-wrap
msgid "Working with multi-module projects"
msgstr "マルチモジュールプロジェクトでの作業"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:475
msgid "By default, Quarkus will not discover CDI beans inside another module."
msgstr "デフォルトでは、Quarkusは別のモジュール内のCDI Bean を検出しません。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:478
msgid "The best way to enable CDI bean discovery for a module in a multi-module project would be to include a `META-INF/beans.xml` file, unless it is the main application module already configured with the quarkus-maven-plugin, in which case it will indexed automatically."
msgstr "マルチモジュールプロジェクトのモジュールでCDI Bean検出を有効にするベストの方法は、 モジュールが、メインアプリケーションモジュールで、すでにquarkus-maven-pluginで設定されていない限り、`META-INF/beans.xml`  ファイルをインクルードすることです。モジュールが、メインアプリケーションモジュールで、すでにquarkus-maven-pluginで設定されている場合は、自動的にインデックスが作成されます。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:480
msgid "Alternatively, there is some unofficial link:https://plugins.gradle.org/search?term=jandex[Gradle Jandex plugins] that can be used instead of the `META-INF/beans.xml` file."
msgstr "あるいは、 `META-INF/beans.xml` ファイルの代わりに使える非公式の link:https://plugins.gradle.org/search?term=jandex[Gradle Jandex プラグイン] もあります。"

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:482
#, fuzzy
#| msgid "More information on this topic can be found on the link:cdi-reference#bean_discovery[Bean Discovery] section of the CDI guide."
msgid "More information on this topic can be found on the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr "このトピックの詳細については、CDIガイドの link:cdi-reference#bean_discovery[Bean Discovery] セクションを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:484
#, no-wrap
msgid "Publishing your application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/gradle-tooling.adoc:489
msgid "In order to make sure the right dependency versions are being used by Gradle, the BOM is declared as an `enforcedPlatform` in your build file.  By default, the `maven-publish` plugin will prevent you from publishing your application due to this `enforcedPlatform`.  This validation can be skipped by adding the following configuration in your `build.gradle` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/gradle-tooling.adoc:495
#, no-wrap
msgid ""
"tasks.withType(GenerateModuleMetadata).configureEach {\n"
"    suppressedValidationErrors.add('enforced-platform')\n"
"}\n"
msgstr ""

#~ msgid "Quarkus Gradle support is considered preview.  You can use Gradle to create Quarkus projects as outlined in our guides. If you go beyond there will be cases where the Gradle tasks https://github.com/quarkusio/quarkus/issues/10189[does not behave as expected].  This is just a caution, and we recommend if you like Gradle you try it out and give us feedback."
#~ msgstr "Quarkus の Gradle サポートはプレビューとされています。このガイドで Gradle を使用して Quarkus プロジェクトを作成する方法の概要を説明しています。これを超えると、Gradleのタスクが link:https://github.com/quarkusio/quarkus/issues/5101[期待通りに動作しない場合があります] 。これはあくまでも注意事項であり、Gradle が好きな方は試してみてフィードバックをいただくことをお勧めします。"

#~ msgid "The following table lists the attributes you can pass to the `create` command:"
#~ msgstr "次の表は、 `create`  コマンドに渡すことができる属性の一覧です。"

#~ msgid "Attribute"
#~ msgstr "属性"

#~ msgid "Default Value"
#~ msgstr "デフォルト値"

#~ msgid "Description"
#~ msgstr "説明"

#~ msgid "`projectGroupId`"
#~ msgstr "`projectGroupId`"

#~ msgid "`org.acme.sample`"
#~ msgstr "`org.acme.sample`"

#~ msgid "The group id of the created project"
#~ msgstr "作成されたプロジェクトのグループID"

#~ msgid "`projectArtifactId`"
#~ msgstr "`projectArtifactId`"

#~ msgid "The artifact id of the created project. Not passing it triggers the interactive mode."
#~ msgstr "作成されたプロジェクトのアーティファクトID。これを渡さないと、インタラクティブモードがトリガされます。"

#~ msgid "`projectVersion`"
#~ msgstr "`projectVersion`"

#~ msgid "The version of the created project"
#~ msgstr "作成されたプロジェクトのバージョン"

#~ msgid "`className`"
#~ msgstr "`className`"

#~ msgid "_Not created if omitted_"
#~ msgstr "_省略した場合は作成されない_"

#~ msgid "The fully qualified name of the generated resource"
#~ msgstr "生成されたリソースの完全修飾名"

#~ msgid "`path`"
#~ msgstr "`path`"

#~ msgid "`/hello`"
#~ msgstr "`/hello`"

#~ msgid "The resource path, only relevant if `className` is set."
#~ msgstr "リソースパス、 `className` が設定されている場合のみ関連します。"

#~ msgid "The list of extensions to add to the project (comma-separated)"
#~ msgstr "プロジェクトに追加するエクステンションのリスト (カンマ区切り)"

#~ msgid "If you decide to generate a REST resource (using the `className` attribute), the endpoint is exposed at: `http://localhost:8080/$path`.  If you use the default `path`, the URL is: http://localhost:8080/hello."
#~ msgstr "REST リソースを生成することにした場合 ( `className` 属性を使用)、エンドポイントは次の場所で公開されます: `http://localhost:8080/$path` 。デフォルトの `path` を使用する場合、URL は http://localhost:8080/hello です。"

#~ msgid "The project is either generated in the current directory or in a directory named after the passed artifactId.  If the current directory is empty, the project is generated in-place."
#~ msgstr "プロジェクトは、カレント・ディレクトリーに生成されるか、渡されたartifactIdにちなんだ名前のディレクトリーに生成されます。カレントディレクトリーが空の場合,プロジェクトはその場で生成されます。"

#~ msgid "./gradlew build\n"
#~ msgstr "./gradlew build\n"

#~ msgid "You can also run a Quarkus application in debug mode with a suspended JVM using `./gradlew quarkusDev -Dsuspend -Ddebug` which is a shorthand for `./gradlew quarkusDev -Dsuspend=true -Ddebug=true`."
#~ msgstr "`./gradlew quarkusDev -Dsuspend -Ddebug`  を使用して、サスペンドされたJVMでQuarkusアプリケーションをデバッグモードで実行することもできます。 `./gradlew quarkusDev -Dsuspend=true -Ddebug=true` の短縮版です。"

#~ msgid "Create a native executable using: `./gradlew build -Dquarkus.package.type=native`.  A native executable will be present in `build/`."
#~ msgstr "`./gradlew build -Dquarkus.package.type=native` を実行し、ネイティブ実行ファイルを作成します。ネイティブ実行ファイルは `build/` に存在します。"

#~ msgid "The `buildNative` task has been deprecated in favor of `build -Dquarkus.package.type=native`."
#~ msgstr "`buildNative` タスクは非推奨となり、 `build -Dquarkus.package.type=native` に代わりました。"

#~ msgid "Building with `./gradlew build`"
#~ msgstr "`./gradlew build` によるビルド"

#~ msgid "Starting from 1.1.0.Final, `./gradlew build` will no longer build the native image. Add `-Dquarkus.package.type=native` build argument explicitly as explained above if needed."
#~ msgstr "1.1.1.0.Final から、 `./gradlew build`  はネイティブイメージをビルドしなくなりました。必要であれば、上記で説明したように `-Dquarkus.package.type=native`  のビルド引数を明示的に追加してください。"
