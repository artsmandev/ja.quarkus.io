# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-10-09 00:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/redis-reference.adoc:6
#, no-wrap
msgid "Redis Extension Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:15
msgid "Redis is an in-memory data store used as a database, cache, streaming engine, and message broker.  The Quarkus Redis extension allows integrating Quarkus applications with Redis."
msgstr "Redis は、データベース、キャッシュ、ストリーミングエンジン、メッセージブローカーとして使用されるインメモリーデータストアです。Quarkus Redis エクステンションを使用すると、Quarkus アプリケーションと Redis を統合することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:18
msgid "To use this extension, the user must be familiar with Redis, especially understanding the mechanism of commands and how they are organized.  Typically, we recommend:"
msgstr "このエクステンションを使うには、ユーザーが Redis に精通していること、特にコマンドの仕組みとその設定について理解していることが必要です。一般的には、以下を推奨します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:20
msgid "The https://try.redis.io/[interactive tutorial] introducing Redis."
msgstr "Redis を紹介する https://try.redis.io/[インタラクティブなチュートリアル]。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:21
msgid "The https://redis.io/commands/[command references] explains Redis commands and contains links to reference documentation."
msgstr "Redis コマンドを説明し、リファレンスドキュメントへのリンクが掲載されている https://redis.io/commands/[コマンドリファレンス]。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:23
msgid "This extension provides imperative and reactive APIs and low-level and high-level (type-safe) clients."
msgstr "このエクステンションは、命令型とリアクティブ型の API、および低レベルと高レベルの (タイプセーフな) クライアントを提供します。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:25
#, no-wrap
msgid "Installation"
msgstr "インストール"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:29
msgid "If you want to use this extension, you need to add the `io.quarkus:quarkus-redis` extension first.  In your `pom.xml` file, add:"
msgstr "このエクステンションを使用する場合は、最初に `io.quarkus:quarkus-redis` エクステンションを追加する必要があります。`pom.xml` ファイルに、以下を追加します。"

#. type: Block title
#: upstream/_versions/main/guides/redis-reference.adoc:31
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:37
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-redis-client</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-redis-client</artifactId>\n"
"</dependency>\n"

#. type: Block title
#: upstream/_versions/main/guides/redis-reference.adoc:40
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:43
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-redis\")\n"
msgstr "implementation(\"io.quarkus:quarkus-redis\")\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:46
msgid "With this dependency, you can then inject Redis clients or _datasource_ (high-level, type-safe API), such as:"
msgstr "この依存関係があれば、次に Redis クライアントや _データソース_ (高レベル、タイプセーフの API) を注入することができます。以下に例を示します。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:50
#, no-wrap
msgid "import io.quarkus.redis.datasource.RedisDataSource;\n"
msgstr "import io.quarkus.redis.datasource.RedisDataSource;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:54
#, no-wrap
msgid ""
"// ...\n"
"@Inject RedisAPI lowLevelClient;\n"
"@Inject RedisDataSource highLevelApi;\n"
msgstr ""
"// ...\n"
"@Inject RedisAPI lowLevelClient;\n"
"@Inject RedisDataSource highLevelApi;\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:57
msgid "More details about the various APIs offered by the quarkus-redis extension are available in the <<apis>> section."
msgstr "quarkus-redis エクステンションで提供されるさまざまな API の詳細については、<<apis>> セクションを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:59
#, no-wrap
msgid "One extension, multiple APIs"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:62
msgid "This extension provides multiple ways to interact with Redis:"
msgstr "このエクステンションは、Redis と対話する複数の方法を提供します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:67
msgid "the _low-level_ Vert.x client: it's a fully reactive, non-blocking, and asynchronous client.  More details on https://vertx.io/docs/vertx-redis-client/java/[the Vert.x Redis Client documentation].  Two APIs are exposed: `io.vertx.redis.client.Redis`, and `io.vertx.redis.client.RedisAPI`.  You will generally use the latter, except if you need to manage connections yourself."
msgstr "_低レベルの_ Vert.x クライアント: 完全にリアクティブで、ノンブロッキングかつ非同期なクライアントです。詳細は https://vertx.io/docs/vertx-redis-client/java/[Vert.x Redis クライアントドキュメント] を参照してください。2 つの API (`io.vertx.redis.client.Redis` および `io.vertx.redis.client.RedisAPI`) が公開されています。接続を自分で管理する必要がある場合を除き、通常は後者を利用することになります。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:70
msgid "the _low-level_ Mutiny variant of the Vert.x API: Unlike the previous one, it exposes a Mutiny API and provides both reactive and imperative methods (suffixed with `andAwait()`).  Two APIs are exposed: `io.vertx.mutiny.redis.client.Redis` and `io.vertx.mutiny.redis.client.RedisAPI`.  You will generally use the latter, except if you need to manage connections yourself."
msgstr "Vert.x API の _低レベルの_ Mutiny バリアント :以前のものとは異なり、Mutiny API を公開し、リアクティブ型と命令型の両方のメソッド (接尾辞は `andAwait()`) が提供されます。2 つの API (`io.vertx.mutiny.redis.client.Redis` および `io.vertx.mutiny.redis.client.RedisAPI`) が公開されています。自分で接続を管理する必要がある場合を除いて、通常は後者を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:74
msgid "a _high-level_ reactive data source: A type-safe, high-level API to interact with Redis.  This API is fully reactive and asynchronous.  It exposes a Mutiny API.  It exposes the `io.quarkus.redis.datasource.ReactiveRedisDataSource` interface."
msgstr "_高レベルの_ リアクティブデータソース: Redis と対話するための、タイプセーフな高レベル API です。この API は完全にリアクティブで非同期です。これは、Mutiny API を公開します。`io.quarkus.redis.datasource.ReactiveRedisDataSource` インターフェイスを公開します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:77
msgid "a _high-level_ imperative data source: A type-safe, high-level API to interact with Redis.  It is the imperative variant of the reactive data source.  It exposes the `io.quarkus.redis.datasource.RedisDataSource` interface."
msgstr "_高レベルの_ 命令型データソース: Redis と対話するための、タイプセーフな高レベル API です。これはリアクティブデータソースの命令型バリアントです。`io.quarkus.redis.datasource.RedisDataSource` インターフェイスを公開します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:79
msgid "To help you select the suitable API for you, here are some recommendations:"
msgstr "適切な API を選択できるように、いくつかの推奨事項を以下に示します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:81
msgid "If you are building an imperative (_classic_) Quarkus application integrating with Redis: use `io.quarkus.redis.datasource.RedisDataSource`."
msgstr "Redis と統合する命令型 (_classic_) の Quarkus アプリケーションを構築する場合、 `io.quarkus.redis.datasource.RedisDataSource` を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:82
msgid "If you are building a reactive Quarkus application integrating with Redis: use `io.quarkus.redis.datasource.ReactiveRedisDataSource`."
msgstr "Redis と統合したリアクティブな Quarkus アプリケーションを構築する場合は、`io.quarkus.redis.datasource.ReactiveRedisDataSource` を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:83
msgid "If you need fine-grain control, or execute commands in a generic way: use `io.vertx.mutiny.redis.client.RedisAPI`"
msgstr "細かい制御が必要な場合や、汎用的な方法でコマンドを実行する場合は、`io.vertx.mutiny.redis.client.RedisAPI` を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:84
msgid "If you have existing Vert.x code, use `io.vertx.redis.client.RedisAPI`"
msgstr "既存の Vert.x コードがある場合は、`io.vertx.redis.client.RedisAPI` を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:85
msgid "If you need to emit custom commands, you can either use the data sources (reactive or imperative) or the `io.vertx.mutiny.redis.client.Redis`."
msgstr "カスタムコマンドを発行する必要がある場合は、データソース (リアクティブ型または命令型) または `io.vertx.mutiny.redis.client.Redis` を使用することができます。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:87
#, no-wrap
msgid "Default and named clients"
msgstr "デフォルトクライアントと名前付きクライアント"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:91
msgid "This extension lets you configure a _default_ Redis client/data sources or _named_ ones.  The latter is essential when you need to connect to multiple Redis instances."
msgstr "このエクステンションでは、_デフォルトの_ Redis クライアント/データソースまたは _名前付き_ ソースを設定することができます。後者は、複数の Redis インスタンスに接続する必要がある場合に不可欠となります。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:94
msgid "The default connection is configured using the `quarkus.redis.*` properties.  For example, to configure the default Redis client, use:"
msgstr "デフォルトの接続は、`quarkus.redis.*` プロパティーを使用して設定されます。たとえば、デフォルトの Redis クライアントを設定するには、以下を使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:99
#, no-wrap
msgid "quarkus.redis.hosts=redis://localhost/\n"
msgstr "quarkus.redis.hosts=redis://localhost/\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:102
msgid "When using the default connection, you can inject the various APIS using a _plain_ `@Inject`:"
msgstr "デフォルトの接続を使用する場合、_プレーン_ `@Inject` を使用してさまざまな APIS を注入することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:112
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedisExample {\n"
"    @Inject ReactiveRedisDataSource reactiveDataSource;\n"
"    @Inject RedisDataSource redisDataSource;\n"
"    @Inject RedisAPI redisAPI;\n"
"    // ...\n"
"}\n"
msgstr ""
"@ApplicationScoped\n"
"public class RedisExample {\n"
"    @Inject ReactiveRedisDataSource reactiveDataSource;\n"
"    @Inject RedisDataSource redisDataSource;\n"
"    @Inject RedisAPI redisAPI;\n"
"    // ...\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:115
msgid "In general, you inject a single one; the previous snippet is just an example."
msgstr "一般的には、1 つだけ注入します。先ほどのスニペットは単なる一例です。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:118
msgid "_Named_ clients are configured using the `quarkus.redis.<name>.*` properties:"
msgstr "_名前付き_ クライアントは `quarkus.redis.<name>.*` プロパティーを使用して設定されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:123
#, no-wrap
msgid ""
"quarkus.redis.my-redis-1.hosts=redis://localhost/\n"
"quarkus.redis.my-redis-2.hosts=redis://my-other-redis:6379\n"
msgstr ""
"quarkus.redis.my-redis-1.hosts=redis://localhost/\n"
"quarkus.redis.my-redis-2.hosts=redis://my-other-redis:6379\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:126
msgid "To access the APIs, you need to use the `@RedisClientName` qualifier:"
msgstr "API にアクセスするためには、`@RedisClientName` 修飾子が必要です。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:135
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedisExample {\n"
"    @Inject @RedisClientName(\"my-redis-1\") ReactiveRedisDataSource reactiveDataSource;\n"
"    @Inject @RedisClientName(\"my-redis-2\") RedisDataSource redisDataSource;\n"
"    // ...\n"
"}\n"
msgstr ""
"@ApplicationScoped\n"
"public class RedisExample {\n"
"    @Inject @RedisClientName(\"my-redis-1\") ReactiveRedisDataSource reactiveDataSource;\n"
"    @Inject @RedisClientName(\"my-redis-2\") RedisDataSource redisDataSource;\n"
"    // ...\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:138
msgid "When using `@RedisClientName`, you can omit the `@Inject` annotation."
msgstr "`@RedisClientName` を使用する場合は、`@Inject` アノテーションを省略することができます。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:139
#, no-wrap
msgid "Connecting to Redis"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:142
msgid "The Redis extension can operate in 4 distinct modes:"
msgstr "Redis エクステンションは、4 つの異なるモードで動作することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:144
msgid "Simple client (probably what most users need)."
msgstr "シンプルなクライアント (おそらくほとんどのユーザーが必要としているもの)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:145
msgid "Sentinel (when working with Redis in High Availability mode)."
msgstr "Sentinel (高可用性モードで Redis を使用する場合)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:146
msgid "Cluster (when working with Redis in Clustered mode)."
msgstr "クラスター (Redis を Clustered モードで動作させる場合)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:147
msgid "Replication (single shard, one node write, multiple read)."
msgstr "レプリケーション (シングルシャード、1 ノード書き込み、マルチ読み取り)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:149
msgid "The connection url is configured with the `quarkus.redis.hosts` (or `quarkus.redis.<name>.hosts`) as follows:"
msgstr "接続 URL は、以下のように `quarkus.redis.hosts` (または `quarkus.redis.<name>.hosts`) で設定されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:153
#, no-wrap
msgid "quarkus.redis.hosts=redis://[:password@]host[:port][/db-number]\n"
msgstr "quarkus.redis.hosts=redis://[:password@]host[:port][/db-number]\n"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:155
#, no-wrap
msgid "Using Unix Socket"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:158
msgid "When using unix-socket, you need:"
msgstr "unix-socket を使用する場合、以下が必要です。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:162
#, no-wrap
msgid "quarkus.redis.hosts=unix://[:password@]/domain/docker.sock[?select=db-number]\n"
msgstr "quarkus.redis.hosts=unix://[:password@]/domain/docker.sock[?select=db-number]\n"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:164
#, no-wrap
msgid "Sentinel Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:167
msgid "When using Sentinel, you need to pass multiple _host urls_ and configure the client type to `sentinel`:"
msgstr "Sentinel を使用する場合、複数の _ホスト urls_ を渡し、クライアントのタイプを `sentinel` に設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:172
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:5000,redis://localhost:5001,redis://localhost:5002\n"
"quarkus.redis.client-type=sentinel\n"
msgstr ""
"quarkus.redis.hosts=redis://localhost:5000,redis://localhost:5001,redis://localhost:5002\n"
"quarkus.redis.client-type=sentinel\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:176
#, no-wrap
msgid ""
"# Optional\n"
"quarkus.redis.master-name=my-sentinel # Default is my-master\n"
"quarkus.redis.role=master # master is the default\n"
msgstr ""
"# Optional\n"
"quarkus.redis.master-name=my-sentinel # Default is my-master\n"
"quarkus.redis.role=master # master is the default\n"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:178
#, no-wrap
msgid "Cluster Mode"
msgstr "クラスターモード"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:181
msgid "When using Redis in cluster mode, you need to pass multiple _host urls_, configure the client type to `cluster` and configure the `replicas` mode:"
msgstr "Redis をクラスターモードで使用する場合、複数の _ホスト urls_ を渡し、クライアントのタイプを `cluster` に設定し、`replicas` モードを設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:187
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:7000,redis://localhost:7001,redis://localhost:7002\n"
"quarkus.redis.client-type=cluster\n"
"quarkus.redis.replicas=share\n"
msgstr ""
"quarkus.redis.hosts=redis://localhost:7000,redis://localhost:7001,redis://localhost:7002\n"
"quarkus.redis.client-type=cluster\n"
"quarkus.redis.replicas=share\n"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:189
#, no-wrap
msgid "Replication Mode"
msgstr "レプリケーションモード"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:192
msgid "When using the replication mode, you need to pass a single host url and configure the type to be `replication`:"
msgstr "レプリケーションモードを使用する場合、単一のホスト URL を渡し、タイプを `replication` に設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:197
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:7000\n"
"quarkus.redis.client-type=replication\n"
msgstr ""
"quarkus.redis.hosts=redis://localhost:7000\n"
"quarkus.redis.client-type=replication\n"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:199
#, no-wrap
msgid "Connecting to Redis Cloud"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:202
msgid "To connect to redis cloud, you need the following properties:"
msgstr "redis クラウドに接続するためには、以下のプロパティーが必要です。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:207
#, no-wrap
msgid ""
"quarkus.redis.hosts=<the redis cloud url such as redis://redis-12436.c14.us-east-1-3.ec2.cloud.redislabs.com:12436>\n"
"quarkus.redis.password=<the password>\n"
msgstr ""
"quarkus.redis.hosts=<the redis cloud url such as redis://redis-12436.c14.us-east-1-3.ec2.cloud.redislabs.com:12436>\n"
"quarkus.redis.password=<the password>\n"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:209
#, no-wrap
msgid "Authentication"
msgstr "認証"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:213
msgid "The Redis password can be set in the `redis://` URL or with the `quarkus.redis.password` property.  We recommend the latter, and if possible, using secrets or an environment variable to configure the password."
msgstr "Redis のパスワードは、`redis://` URL で設定するか、 `quarkus.redis.password` プロパティーで設定することができますが、後者での設定をお勧めします。可能であれば、シークレットや環境変数を使ってパスワードを設定することをお勧めします。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:215
msgid "The associated environment variable is `QUARKUS_REDIS_PASSWORD`, or `QUARKUS_REDIS_<NAME>_PASSWORD` for named clients."
msgstr "関連する環境変数は `QUARKUS_REDIS_PASSWORD` で、名前付きクライアントの場合は `QUARKUS_REDIS_<NAME>_PASSWORD` となります。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:216
#, no-wrap
msgid "Using the high-level clients (data sources)"
msgstr "高レベルのクライアント (データソース) の利用"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:221
msgid "Quarkus exposes a high-level API on top of Redis.  This API is type-safe and structured around the notion of _group_, inherited from the https://redis.io/commands/command-docs/[Redis command organization].  This API lets you execute Redis commands more conveniently and safely."
msgstr "Quarkus は、Redis 上で高レベルの API を公開します。この API はタイプセーフで https://redis.io/commands/command-docs/[Redis コマンド編成] から継承された _グループ_ の概念を中心とした構造となっています。この API を使用すると、Redis コマンドをより便利かつ安全に実行することができます。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:222
#, no-wrap
msgid "Injecting data sources"
msgstr "データソースの注入"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:225
msgid "For each configured Redis client, two Redis data sources are exposed:"
msgstr "設定された各 Redis クライアントに対して、2 つの Redis データソースが公開されます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:228
msgid "`io.quarkus.redis.datasource.RedisDataSource` - an imperative (blocking) Redis data source.  Each operation blocks until a response is received or a timeout is reached"
msgstr "`io.quarkus.redis.datasource.RedisDataSource`: 命令型の (ブロッキング) Redis データソースです。各操作は、レスポンスを受信するか、タイムアウトに達するまでブロックされます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:229
msgid "`io.quarkus.redis.datasource.ReactiveRedisDataSource` - a reactive Redis data source returning `Uni<X>` or `Multi<X>`."
msgstr "`io.quarkus.redis.datasource.ReactiveRedisDataSource`: `Uni<X>` または `Multi<X>` を返すリアクティブ型 Redis データソースです。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:231
msgid "If you configured the _default_ Redis client, you could inject the data sources using:"
msgstr "_デフォルトの_ Redis クライアントを設定した場合、以下を使用してデータソースを注入することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:236
#, no-wrap
msgid ""
"@Inject RedisDataSource defaultRedisDataSource;\n"
"@Inject ReactiveRedisDataSource defaultReactiveRedisDataSource;\n"
msgstr ""
"@Inject RedisDataSource defaultRedisDataSource;\n"
"@Inject ReactiveRedisDataSource defaultReactiveRedisDataSource;\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:239
msgid "If you configured a _named_ Redis client, you need to use the `io.quarkus.redis.RedisClientName` qualifier to select the right client:"
msgstr "_名前付きの_ Redis クライアントを設定した場合、`io.quarkus.redis.RedisClientName` 修飾子を使用して、正しいクライアントを選択する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:244
#, no-wrap
msgid ""
"@RedisClientName(\"my-redis\") RedisDataSource myRedisDataSource;\n"
"@RedisClientName(\"my-redis\") ReactiveRedisDataSource myReactiveRedisDataSource;\n"
msgstr ""
"@RedisClientName(\"my-redis\") RedisDataSource myRedisDataSource;\n"
"@RedisClientName(\"my-redis\") ReactiveRedisDataSource myReactiveRedisDataSource;\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:247
msgid "When using the _blocking_ variant, you can configure the default timeout with:"
msgstr "_ブロッキング_ バリアントを使う場合は、以下を使用してデフォルトのタイムアウトを設定することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:252
#, no-wrap
msgid ""
"quarkus.redis.timeout=5s\n"
"quarkus.redis.my-redis.timeout=5s\n"
msgstr ""
"quarkus.redis.timeout=5s\n"
"quarkus.redis.my-redis.timeout=5s\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:255
msgid "The default timeout is configured to 10s."
msgstr "デフォルトのタイムアウトは 10 秒に設定されています。"

#. type: Block title
#: upstream/_versions/main/guides/redis-reference.adoc:257
#, no-wrap
msgid "All about delegation"
msgstr "デリゲーションに関するすべて"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:261
msgid "The blocking data source (`io.quarkus.redis.datasource.RedisDataSource`) is implemented on top of the reactive one (`io.quarkus.redis.datasource.ReactiveRedisDataSource`).  The `ReactiveRedisDataSource` is implemented on top of the `io.vertx.mutiny.redis.Redis` API."
msgstr "ブロッキングデータソース (`io.quarkus.redis.datasource.RedisDataSource`) はリアクティブデータソース (`io.quarkus.redis.datasource.ReactiveRedisDataSource`) の上に実装されています。`ReactiveRedisDataSource` は `io.vertx.mutiny.redis.Redis` API の上に実装されています。"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:263
#, no-wrap
msgid "Data Source groups"
msgstr "データソースグループ"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:266
msgid "As mentioned above, the API is divided into groups:"
msgstr "前述の通り、API はグループに分かれています。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:268
#: upstream/_versions/main/guides/redis-reference.adoc:269
msgid "bitmap - `.bitmap()`"
msgstr "bitmap - `.bitmap()`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:270
msgid "key (generic) - `.key()`"
msgstr "key (generic) - `.key()`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:271
msgid "geo - `.geo(memberType)`"
msgstr "geo - `.geo(memberType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:272
msgid "hash - `.hash(`valueType)`"
msgstr "hash - `.hash(`valueType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:273
msgid "hyperloglog - `.hyperloglog(memberType)`"
msgstr "hyperloglog - `.hyperloglog(memberType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:274
msgid "list - `.list(memberType)`"
msgstr "list - `.list(memberType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:275
msgid "pubsub - `pubsub()`"
msgstr "pubsub - `pubsub()`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:276
msgid "set - `.set(memberType)`"
msgstr "set - `.set(memberType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:277
msgid "sorted-set - `.sortedSet(memberType)`"
msgstr "sorted-set - `.sortedSet(memberType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:278
msgid "stream (not available yet)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:279
msgid "string - `.value(valueType)`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:280
msgid "transactions - `withTransaction`"
msgstr "transactions - `withTransaction`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:281
msgid "json - `.json()` (requires the https://redis.com/modules/redis-json/[redis-json] module on the server side)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:282
msgid "bloom - `.bloom()` (requires the https://redis.com/modules/redis-bloom/[redis-bloom] module on the server side)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:283
msgid "cuckoo - `.cuckoo()` (requires the https://redis.com/modules/redis-bloom/[redis-bloom] module on the server side, which also provides the cuckoo filter commands)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:284
msgid "count-min - `.countmin()` (requires the https://redis.com/modules/redis-bloom/[redis-bloom] module on the server side, which also provides the count-min filter commands)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:285
msgid "top-k - `.topk()` (requires the https://redis.com/modules/redis-bloom/[redis-bloom] module on the server side, which also provides the top-k filter commands)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:288
msgid "Each of these methods returns an object that lets you execute the commands related to the group.  The following snippet demonstrates how to use the _hash_ group:"
msgstr "これらのメソッドはそれぞれ、そのグループに関連するコマンドを実行することができるオブジェクトを返します。以下のスニペットは、_ハッシュ_ グループの使い方を示しています。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:293
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyRedisService {\n"
msgstr ""
"@ApplicationScoped\n"
"public class MyRedisService {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:295
#, no-wrap
msgid "    private static final String MY_KEY = \"my-key\";\n"
msgstr "    private static final String MY_KEY = \"my-key\";\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:297
#, no-wrap
msgid "    private final HashCommands<String, String, Person> commands;\n"
msgstr "    private final HashCommands<String, String, Person> commands;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:301
#, no-wrap
msgid ""
"    public MyRedisService(RedisDataSource ds) { // <1>\n"
"        commands = ds.hash(Person.class); // <2>\n"
"    }\n"
msgstr ""
"    public MyRedisService(RedisDataSource ds) { // <1>\n"
"        commands = ds.hash(Person.class); // <2>\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:305
#, no-wrap
msgid ""
"    public void set(String field, Person value) {\n"
"        commands.hset(MY_KEY, field, value);  // <3>\n"
"    }\n"
msgstr ""
"    public void set(String field, Person value) {\n"
"        commands.hset(MY_KEY, field, value);  // <3>\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:310
#, no-wrap
msgid ""
"    public Person get(String field) {\n"
"        commands.hget(MY_KEY, field);  // <4>\n"
"    }\n"
"}\n"
msgstr ""
"    public Person get(String field) {\n"
"        commands.hget(MY_KEY, field);  // <4>\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:312
msgid "Inject the `RedisDataSource` in the constructor"
msgstr "コンストラクターに `RedisDataSource` を注入します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:314
msgid "Creates the `HashCommands` object.  This object has three type parameters: the type of the key, the type of the field, and the type of the member"
msgstr "`HashCommands` オブジェクトを作成します。このオブジェクトには 3 つのタイプ (キーのタイプ、フィールドのタイプ、メンバーのタイプ) のパラメーターがあります。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:315
msgid "Use the created `commands` to associate the field `field` with the value `value`"
msgstr "作成した `commands` を使用して、フィールド `field` と値 `value` を関連付けます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:316
msgid "Use the created `commands` to retrieve the field `field` value."
msgstr "作成した `commands` を使用して、フィールド `field` の値を取得します。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:317
#, no-wrap
msgid "Serialization and Deserialization"
msgstr "シリアライズとデシリアライズ"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:322
msgid "The data source APIs handle the serialization and deserialization automatically.  When a non-standard type is used, the object is serialized into JSON and deserialized from JSON.  In this case, `quarkus-jackson` is used."
msgstr "データソース API は、シリアライズとデシリアライズを自動的に処理します。非標準のタイプが使われる場合、オブジェクトは JSON にシリアライズされ、JSON からデシリアライズされます。この場合、`quarkus-jackson` が使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:324
msgid "To store binary data, use `byte[]`."
msgstr "バイナリーデータを格納するには、`byte[]` を使用します。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:325
#, no-wrap
msgid "The `value` group"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:329
msgid "The `value` group is used to manipulate https://redis.io/docs/manual/data-types/#strings[Redis Strings].  Thus, this group is not limited to Java Strings but can be used for integers (like a counter) or binary content (like images)."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:330
#, no-wrap
msgid "Caching values"
msgstr "値のキャッシュ"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:334
msgid "You can use Redis as a cache using the `setex` command, which stores a given value to a given key for a given duration.  The following snippet shows how such a command can be used to store `BusinessObject` for 1 second."
msgstr "Redis をキャッシュとして使用するには、`setex` コマンドを使用します。このコマンドは、指定したキーに指定した値を指定した期間だけ格納します。以下のスニペットは、このようなコマンドを使用して `BusinessObject` を 1 秒間格納する方法を示しています。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:339
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyRedisCache {\n"
msgstr ""
"@ApplicationScoped\n"
"public static class MyRedisCache {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:341
#, no-wrap
msgid "    private final ValueCommands<String, BusinessObject> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:345
#, no-wrap
msgid ""
"    public MyRedisCache(RedisDataSource ds) {\n"
"        commands = ds.value(BusinessObject.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:349
#: upstream/_versions/main/guides/redis-reference.adoc:509
#, no-wrap
msgid ""
"    public BusinessObject get(String key) {\n"
"        return commands.get(key);\n"
"    }\n"
msgstr ""
"    public BusinessObject get(String key) {\n"
"        return commands.get(key);\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:354
#, no-wrap
msgid ""
"    public void set(String key, BusinessObject bo) {\n"
"        commands.setex(key, 1, bo); // Expires after 1 second\n"
"    }\n"
"}\n"
msgstr ""
"    public void set(String key, BusinessObject bo) {\n"
"        commands.setex(key, 1, bo); // Expires after 1 second\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:357
msgid "You can use the `setnx` method only to set the value if no value has been stored for the given key."
msgstr "`setnx` メソッドは、指定したキーに対応する値が格納されていない場合に、値を設定するためだけに使用することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:359
msgid "The `key` group provides more fine-grain control on expiration and ttl of each key."
msgstr "`key` グループは、各キーの有効期限や ttl をより細かく制御します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:363
msgid "The `set` method can also receive a `SetArgs` argument that modify the behavior:"
msgstr "`set` メソッドは、動作を変更するための `SetArgs` 引数を受け取ることもできます。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:365
msgid "`ex(seconds)` - Set the specified expire time, in seconds."
msgstr "`ex(seconds)`: 指定された有効期限を秒単位で設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:366
msgid "`px(milliseconds)` - Set the specified expire time, in milliseconds."
msgstr "`px(milliseconds)`: 指定した有効期限をミリ秒単位で設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:367
msgid "`exat(timestamp-seconds)` - Set the specified Unix time at which the key will expire, in seconds."
msgstr "`exat(timestamp-seconds)`: キーの有効期限が切れる Unix 時間を秒単位で設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:368
msgid "`pxat(timestamp-milliseconds)` - Set the specified Unix time at which the key will expire, in milliseconds."
msgstr "`pxat(timestamp-milliseconds)`: キーの有効期限が切れる Unix 時間をミリ秒単位で設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:369
msgid "`nx()` - Only set the key if it does not already exist."
msgstr "`nx()`: キーがまだ存在しない場合にのみ、キーを設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:370
msgid "`xx()` - Only set the key if it already exists."
msgstr "`xx()`: キーがすでに存在する場合にのみ、キーを設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:371
msgid "`keepttl()` - Retain the time to live associated with the key."
msgstr "`keepttl()`: キーに関連付けられた有効期限を保持します。"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:373
#, no-wrap
msgid "Storing binary data"
msgstr "バイナリーデータの格納"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:377
msgid "Redis _strings_ can be used to store binary data, such as images.  In this case, we will use `byte[]` as value type:"
msgstr "Redis の _文字列_ は、イメージのようなバイナリーデータを格納するために使用することができます。この場合、値のタイプとして `byte[]` を使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:382
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyBinaryRepository {\n"
msgstr ""
"@ApplicationScoped\n"
"public static class MyBinaryRepository {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:384
#, no-wrap
msgid "    private final ValueCommands<String, byte[]> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:388
#, no-wrap
msgid ""
"    public MyBinaryRepository(RedisDataSource ds) {\n"
"        commands = ds.value(byte[].class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:396
#, no-wrap
msgid ""
"    public byte[] get(String key) {\n"
"        byte[] bytes = commands.get(key);\n"
"        if (bytes == null) {\n"
"            throw new NoSuchElementException(\"`\" + key + \"` not found\");\n"
"        }\n"
"        return bytes;\n"
"    }\n"
msgstr ""
"    public byte[] get(String key) {\n"
"        byte[] bytes = commands.get(key);\n"
"        if (bytes == null) {\n"
"            throw new NoSuchElementException(\"`\" + key + \"` not found\");\n"
"        }\n"
"        return bytes;\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:400
#, no-wrap
msgid ""
"    public void add(String key, byte[] bytes) {\n"
"        commands.set(key, bytes);\n"
"    }\n"
msgstr ""
"    public void add(String key, byte[] bytes) {\n"
"        commands.set(key, bytes);\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:405
#, no-wrap
msgid ""
"    public void addIfAbsent(String key, byte[] bytes) {\n"
"        commands.setnx(key, bytes);\n"
"    }\n"
"}\n"
msgstr ""
"    public void addIfAbsent(String key, byte[] bytes) {\n"
"        commands.setnx(key, bytes);\n"
"    }\n"
"}\n"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:407
#, no-wrap
msgid "Storing a counter"
msgstr "カウンターの格納"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:410
msgid "You can store counters in Redis as demonstrated below:"
msgstr "以下に示すように、Redis にカウンターを格納することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:415
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyRedisCounter {\n"
msgstr ""
"@ApplicationScoped\n"
"public static class MyRedisCounter {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:417
#, no-wrap
msgid "    private final ValueCommands<String, Long> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:421
#, no-wrap
msgid ""
"    public MyRedisCounter(RedisDataSource ds) {\n"
"        commands = ds.value(Long.class); // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:429
#, no-wrap
msgid ""
"    public long get(String key) {\n"
"        Long l = commands.get(key);  // <2>\n"
"        if (l == null) {\n"
"            return 0L;\n"
"        }\n"
"        return l;\n"
"    }\n"
msgstr ""
"    public long get(String key) {\n"
"        Long l = commands.get(key);  // <2>\n"
"        if (l == null) {\n"
"            return 0L;\n"
"        }\n"
"        return l;\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:433
#, no-wrap
msgid ""
"    public void incr(String key) {\n"
"        commands.incr(key);  // <3>\n"
"    }\n"
msgstr ""
"    public void incr(String key) {\n"
"        commands.incr(key);  // <3>\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:435
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:438
msgid "Retrieve the commands.  This time we will manipulate `Long` values"
msgstr "コマンドを取得します。今回は `Long` 値を操作します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:440
msgid "Retrieve the counter associated with the given `key`.  Return `0L` when no counter is stored."
msgstr "与えられた `key` に対応するカウンターを取得します。カウンターが格納されていない場合は、`0L` を返します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:442
msgid "Increment the value.  If there are no counter stored for the key, the `incr` command considers 0 as value (so `incr` sets the value to 1)."
msgstr "値を増やします。キーのカウンターが格納されていない場合は、`incr` コマンドは 0 を値とみなします (したがって `incr` は値を 1 に設定します)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:444
msgid "There are other methods that can be useful to manipulate counters, such as:"
msgstr "他にも、カウンターを操作する際に便利なメソッドがあります。以下に例を示します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:446
msgid "`incrby` - allows setting the increment value (positive or negative)"
msgstr "`incrby`: 増分値 (正または負) を設定することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:447
msgid "`incrbyfloat` - allows setting the increment value as a float/ double (the stored value will be a double)"
msgstr "`incrbyfloat` - float/double として増分値を設定できます (格納される値は double になります)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:448
msgid "`set` - to set an initial value if needed"
msgstr "`set`: 必要に応じて初期値を設定します．"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:449
msgid "`decr` and `decrby` - allows decrementing the stored value"
msgstr "`decr` および `decrby`: 格納された値を減らすことができます。"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:450
#, no-wrap
msgid "Using pub/sub"
msgstr "pub/sub の使用"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:454
msgid "Redis allows sending _messages_ to channels and listening for these messages.  These features are available from the the `pubsub` group."
msgstr "Redis では、_メッセージ_ をチャンネルに送信し、そのメッセージをリッスンすることができます。これらの機能は `pubsub` グループから利用できます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:456
msgid "The following snippets shows how a _cache_ can emit a `Notification` after every `set`, and how a subscriber can receive the notification."
msgstr "以下のスニペットは、_キャッシュ_ が `set` ごとに `Notification` を発行する方法と、サブスクライバーがその通知を受信する方法を示しています。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:462
#, no-wrap
msgid ""
"public static final class Notification {\n"
"    public String key;\n"
"    public BusinessObject bo;\n"
msgstr ""
"public static final class Notification {\n"
"    public String key;\n"
"    public BusinessObject bo;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:464
#, no-wrap
msgid "    public Notification() {\n"
msgstr "    public Notification() {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:466
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:472
#, no-wrap
msgid ""
"    public Notification(String key, BusinessObject bo) {\n"
"        this.key = key;\n"
"        this.bo = bo;\n"
"    }\n"
"}\n"
msgstr ""
"    public Notification(String key, BusinessObject bo) {\n"
"        this.key = key;\n"
"        this.bo = bo;\n"
"    }\n"
"}\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:478
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Startup // We want to create the bean instance on startup to subscribe to the channel.\n"
"public static class MySubscriber implements Consumer<Notification> {\n"
"    private final PubSubCommands<Notification> pub;\n"
"    private final PubSubCommands.RedisSubscriber subscriber;\n"
msgstr ""
"@ApplicationScoped\n"
"@Startup // We want to create the bean instance on startup to subscribe to the channel.\n"
"public static class MySubscriber implements Consumer<Notification> {\n"
"    private final PubSubCommands<Notification> pub;\n"
"    private final PubSubCommands.RedisSubscriber subscriber;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:483
#, no-wrap
msgid ""
"    public MySubscriber(RedisDataSource ds) {\n"
"        pub = ds.pubsub(Notification.class);\n"
"        subscriber = pub.subscribe(\"notifications\", this);\n"
"    }\n"
msgstr ""
"    public MySubscriber(RedisDataSource ds) {\n"
"        pub = ds.pubsub(Notification.class);\n"
"        subscriber = pub.subscribe(\"notifications\", this);\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:488
#, no-wrap
msgid ""
"    @Override\n"
"    public void accept(Notification notification) {\n"
"        // Receive the notification\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public void accept(Notification notification) {\n"
"        // Receive the notification\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:494
#, no-wrap
msgid ""
"    @PreDestroy\n"
"    public void terminate() {\n"
"        subscriber.unsubscribe(); // Unsubscribe from all subscribed channels\n"
"    }\n"
"}\n"
msgstr ""
"    @PreDestroy\n"
"    public void terminate() {\n"
"        subscriber.unsubscribe(); // Unsubscribe from all subscribed channels\n"
"    }\n"
"}\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:497
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyCache {\n"
msgstr ""
"@ApplicationScoped\n"
"public static class MyCache {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:500
#, no-wrap
msgid ""
"    private final ValueCommands<String, BusinessObject> commands;\n"
"    private final PubSubCommands<Notification> pub;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:505
#, no-wrap
msgid ""
"    public MyCache(RedisDataSource ds) {\n"
"        commands = ds.value(BusinessObject.class);\n"
"        pub = ds.pubsub(Notification.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:515
#, no-wrap
msgid ""
"    public void set(String key, BusinessObject bo) {\n"
"        commands.set(key, bo);\n"
"        pub.publish(\"notifications\", new Notification(key, bo));\n"
"    }\n"
"}\n"
msgstr ""
"    public void set(String key, BusinessObject bo) {\n"
"        commands.set(key, bo);\n"
"        pub.publish(\"notifications\", new Notification(key, bo));\n"
"    }\n"
"}\n"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:517
#, no-wrap
msgid "Using transactions"
msgstr "トランザクションの使用"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:521
msgid "Redis transactions are slightly different from relational database transactions.  Redis transactions are a batch of commands executed altogether."
msgstr "Redis トランザクションは、リレーショナルデータベースのトランザクションとは少し異なります。Redis トランザクションは、まとめて実行されるコマンドのバッチです。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:523
msgid "A Redis transaction can _watch_ a set of keys, which would _discard_ the transaction is one of these keys are updated during the transaction execution."
msgstr "Redis トランザクションはキーのセットを _監視_ することができ、トランザクションの実行中にこれらのキーのいずれかが更新された場合、トランザクションを _破棄_ します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:528
msgid "Commands enqueued in a transaction are not executed before the whole transaction is executed.  It means that you cannot retrieve a result during the transaction.  Results are accumulated in a `TransactionResult` object you will access after the completion of the transaction.  This object contains whether the transaction succeeded or was discarded, and in the former case the result of each command (indexed by the command order)."
msgstr "トランザクション内でキューに入れられたコマンドは、トランザクション全体が実行される前に実行されることはありません。つまり、トランザクションの最中に結果を取得することはできません。結果はトランザクションの完了後にアクセスする `TransactionResult` オブジェクトに蓄積されます。このオブジェクトには、トランザクションが成功したか破棄されたかに関係なく含まれ、成功した場合は各コマンドの結果 (コマンドの順番でインデックス化されています) が含まれます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:532
msgid "To start a transaction, you use the `withTransaction` method.  This method receives a `Consumer<TransactionalRedisDataSource>`, which follows the same API as the regular `RedisDataSource` except that the commands return `void` (`Uni<Void>` for the reactive variant).  When that consumer returns, the transaction is _executed_."
msgstr "トランザクションを開始するには、`withTransaction` メソッドを使用します。このメソッドは `Consumer<TransactionalRedisDataSource>` を受け取ります。これは、コマンドが `void` (リアクティブバリアントでは `Uni<Void>`) を返すことを除けば、通常の `RedisDataSource` と同じ API となります。そのコンシューマーが返されたとき、トランザクションは _実行_ されます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:534
msgid "The following snippet shows how to create a transaction executing two related _writes_:"
msgstr "次のスニペットは、2 つの関連する _書き込み_ を実行するトランザクションを作成する方法を示しています。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:538
#, no-wrap
msgid "@Inject RedisDataSource ds;\n"
msgstr "@Inject RedisDataSource ds;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:540
#: upstream/_versions/main/guides/redis-reference.adoc:558
#: upstream/_versions/main/guides/redis-reference.adoc:639
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:546
#, no-wrap
msgid ""
"TransactionResult result = ds.withTransaction(tx -> {\n"
"        TransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"        hash.hset(KEY, \"field-1\", \"hello\");\n"
"        hash.hset(KEY, \"field-2\", \"hello\");\n"
"    });\n"
msgstr ""
"TransactionResult result = ds.withTransaction(tx -> {\n"
"        TransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"        hash.hset(KEY, \"field-1\", \"hello\");\n"
"        hash.hset(KEY, \"field-2\", \"hello\");\n"
"    });\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:550
msgid "The received `tx` object can also be used to _discard_ the transaction, using: `tx.discard();`.  The returned `TransactionResult` lets you retrieve the result of each command."
msgstr "受け取った `tx` オブジェクトは、`tx.discard();` を使用してトランザクションを _破棄_ するために使用することもできます。返された `TransactionResult` により、各コマンドの結果を取得することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:552
msgid "When using the reactive variant of the data source, the passed callback is a `Function<ReactiveTransactionalRedisDataSource, Uni<Void>>`:"
msgstr "データソースのリアクティブバリアントを使用する場合、渡されるコールバックは `Function<ReactiveTransactionalRedisDataSource, Uni<Void>>`: となります。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:556
#: upstream/_versions/main/guides/redis-reference.adoc:637
#, no-wrap
msgid "@Inject ReactiveRedisDataSource ds;\n"
msgstr "@Inject ReactiveRedisDataSource ds;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:564
#, no-wrap
msgid ""
"Uni<TransactionResult> result = ds.withTransaction(tx -> {\n"
"        ReactiveTransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"        return hash.hset(KEY, \"field-1\", \"hello\")\n"
"            .chain(() -> hash.hset(KEY, \"field-2\", \"hello\"));\n"
"});\n"
msgstr ""
"Uni<TransactionResult> result = ds.withTransaction(tx -> {\n"
"        ReactiveTransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"        return hash.hset(KEY, \"field-1\", \"hello\")\n"
"            .chain(() -> hash.hset(KEY, \"field-2\", \"hello\"));\n"
"});\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:569
msgid "Transaction execution can be conditioned by _keys_.  When a passed key gets modified during the execution of a transaction, the transaction is discarded.  The keys are passed as `String` as a second parameter to the `withTransaction` method:"
msgstr "トランザクションの実行は、_キー_ によって条件付けることができます。渡されたキーがトランザクションの実行中に変更された場合、トランザクションは破棄されます。キーは `withTransaction` メソッドの第 2 パラメーターとして `String` として渡されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:577
#, no-wrap
msgid ""
"TransactionResult result = ds.withTransaction(tx -> {\n"
"    TransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"    hash.hset(KEY, \"field-1\", \"hello\");\n"
"    hash.hset(KEY, \"field-2\", \"hello\");\n"
"}, KEY);\n"
msgstr ""
"TransactionResult result = ds.withTransaction(tx -> {\n"
"    TransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"    hash.hset(KEY, \"field-1\", \"hello\");\n"
"    hash.hset(KEY, \"field-2\", \"hello\");\n"
"}, KEY);\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:580
msgid "You cannot use the pub/sub feature from within a transaction."
msgstr "トランザクションの中から pub/sub 機能を使用することはできません。"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:581
#, no-wrap
msgid "Using optimistic locking"
msgstr "楽観ロックの使用"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:585
msgid "To use optimistic locking, you need to use a variant of the `withTransaction` method, allowing the execution of code before the transaction starts.  In other words, it will be executed as follows:"
msgstr "楽観ロックを使用するには、`withTransaction` メソッドのバリアントを使用する必要があり、トランザクションが始まる前にコードを実行できるようにします。つまり、以下のように実行されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:589
#, no-wrap
msgid "WATCH key\n"
msgstr "WATCH key\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:593
#, no-wrap
msgid ""
"// Pre-transaction block\n"
"// ....\n"
"// Produce a result\n"
msgstr ""
"// Pre-transaction block\n"
"// ....\n"
"// Produce a result\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:597
#, no-wrap
msgid ""
"MULTI\n"
"  // In transaction code, receive the result produced by the pre-transaction block.\n"
"EXEC\n"
msgstr ""
"MULTI\n"
"  // In transaction code, receive the result produced by the pre-transaction block.\n"
"EXEC\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:600
msgid "For example, if you need to update a value in a hash only if the field exists, you will use the following API:"
msgstr "たとえば、フィールドが存在する場合にのみハッシュの値を更新する必要がある場合は、以下のような API を使用することになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:616
#, no-wrap
msgid ""
"OptimisticLockingTransactionResult<Boolean> result = blocking.withTransaction(ds -> {\n"
"    // The pre-transaction block:\n"
"    HashCommands<String, String, String> hashCommands = ds.hash(String.class);\n"
"    return hashCommands.hexists(key, \"field\"); // Produce a result (boolean in this case)\n"
"},\n"
" (exists, tx) -> { // The transactional block, receives the result and the transactional data source\n"
"        if (exists) {\n"
"            tx.hash(String.class).hset(key, \"field\", \"new value\");\n"
"        } else {\n"
"            tx.discard();\n"
"        }\n"
" },\n"
"  key); // The watched key\n"
msgstr ""
"OptimisticLockingTransactionResult<Boolean> result = blocking.withTransaction(ds -> {\n"
"    // The pre-transaction block:\n"
"    HashCommands<String, String, String> hashCommands = ds.hash(String.class);\n"
"    return hashCommands.hexists(key, \"field\"); // Produce a result (boolean in this case)\n"
"},\n"
" (exists, tx) -> { // The transactional block, receives the result and the transactional data source\n"
"        if (exists) {\n"
"            tx.hash(String.class).hset(key, \"field\", \"new value\");\n"
"        } else {\n"
"            tx.discard();\n"
"        }\n"
" },\n"
"  key); // The watched key\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:622
msgid "If one of the watched keys is touched before or during the execution of the pre-transaction or transactional blocks, the transaction is aborted.  The pre-transactional block produces a result that the transactional block can use.  This construct is necessary because, within a transaction, the commands do not produce a result.  Results can only be retrieved after the execution of the transaction."
msgstr "プレトランザクションブロックまたはトランザクションブロックの実行前または実行中に監視されているキーの 1 つがタッチされた場合、トランザクションは中断されます。プレトランザクションブロックは、トランザクションブロックが使用できる結果を生成します。トランザクション内では、コマンドは結果を生成しないので、この構成は必要です。結果は、トランザクションの実行後にのみ取得することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:627
msgid "The pre-transaction and transactional blocks are invoked on the same Redis connection.  Consequently, the pre-transaction block must use the passed data source to execute commands.  Thus, the commands are emitted from that connection.  These commands must not modify the watched keys."
msgstr "プレトランザクションブロックとトランザクションブロックは、同じ Redis 接続で呼び出されます。その結果、プレトランザクションブロックは、渡されたデータソースを使用してコマンドを実行する必要があります。したがって、コマンドはその接続から発行されます。これらのコマンドは、監視されたキーを変更することはできません。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:629
msgid "The transaction is aborted if the pre-transaction block throws an exception (or produces a failure when using the reactive API)."
msgstr "プレトランザクションブロックが例外をスローした場合 (またはリアクティブ API を使用している場合はエラーを生成した場合)、トランザクションは中断されます。"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:630
#, no-wrap
msgid "Executing custom commands"
msgstr "カスタムコマンドの実行"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:633
msgid "To execute a custom command, or a command not supported by the API, use the following approach:"
msgstr "カスタムコマンドや API でサポートされていないコマンドを実行するには、以下の方法を使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:641
#, no-wrap
msgid "Response response = ds.execute(\"my-command\", param1, param2, param3);\n"
msgstr "Response response = ds.execute(\"my-command\", param1, param2, param3);\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:647
msgid "The `execute` method sends the command to Redis and retrieves the `Response`.  The command name is passed as first parameters.  You can add an arbitrary number of **String** parameters to your command.  The result is wrapped into a `Response` object."
msgstr "`execute` メソッドは Redis にコマンドを送信し、`Response` を取得します。コマンド名は最初のパラメーターとして渡されます。コマンドには、任意の数の **String** パラメーターを追加することができます。結果は `Response` オブジェクトにラップされます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:649
msgid "The reactive variant returns a `Uni<Response>`."
msgstr "リアクティブバリアントは `Uni<Response>` を返します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:651
msgid "You can also execute custom command in a transaction."
msgstr "また、トランザクション内でカスタムコマンドを実行することも可能です。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:652
#, no-wrap
msgid "Vert.x Redis Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:656
msgid "In addition to the high-level API, you can use the Vertx Redis clients directly in your code.  The documentation of the Vert.x Redis Client is available on the https://vertx.io/docs/vertx-redis-client/java/[Vert.x Web Site]."
msgstr "高レベルの API に加えて、Vertx Redis クライアントをコードで直接使用することができます。Vert.x Redis クライアントのドキュメントは https://vertx.io/docs/vertx-redis-client/java/[Vert.x Web サイト] で公開されています。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:657
#, no-wrap
msgid "Redis Health Check"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:660
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-redis` will automatically add a readiness health check to validate the connection to the Redis server."
msgstr "`quarkus-smallrye-health` エクステンションを使用している場合、`quarkus-redis` は Redis サーバーへの接続を検証するための readiness ヘルスチェックを自動的に追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:662
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr "そのため、アプリケーションの `/q/health/ready` エンドポイントにアクセスすると、接続の検証状況に関する情報が表示されます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:664
msgid "This behavior can be disabled by setting the `quarkus.redis.health.enabled` property to `false` in your `application.properties`."
msgstr "この動作は、 `application.properties` の `quarkus.redis.health.enabled` プロパティーを `false` に設定することで無効にできます。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:665
#, no-wrap
msgid "Providing Redis Hosts Programmatically"
msgstr "プログラムによる Redis ホストの提供"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:669
msgid "The `RedisHostsProvider` programmatically provides redis hosts.  This allows for configuration of properties like redis connection password coming from other sources."
msgstr "`RedisHostsProvider` はプログラムによって Redis ホストを提供します。これにより、他のソースから取得した redis 接続パスワードのようなプロパティーを設定することができます。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:673
msgid "This is useful as it removes the need to store sensitive data in application.properties."
msgstr "これは、application.properties に機密データを格納する必要がなくなるので便利です。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:687
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Identifier(\"hosts-provider\") // the name of the host provider\n"
"public class ExampleRedisHostProvider implements RedisHostsProvider {\n"
"    @Override\n"
"    public Set<URI> getHosts() {\n"
"        // do stuff to get the host\n"
"        String host = \"redis://localhost:6379/3\";\n"
"        return Collections.singleton(URI.create(host));\n"
"    }\n"
"}\n"
msgstr ""
"@ApplicationScoped\n"
"@Identifier(\"hosts-provider\") // the name of the host provider\n"
"public class ExampleRedisHostProvider implements RedisHostsProvider {\n"
"    @Override\n"
"    public Set<URI> getHosts() {\n"
"        // do stuff to get the host\n"
"        String host = \"redis://localhost:6379/3\";\n"
"        return Collections.singleton(URI.create(host));\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:690
msgid "The host provider can be used to configure the redis client like shown below"
msgstr "以下に示すように、ホストプロバイダーを使用して redis クライアントを設定することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:694
#, no-wrap
msgid "quarkus.redis.hosts-provider-name=hosts-provider\n"
msgstr "quarkus.redis.hosts-provider-name=hosts-provider\n"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:696
#, no-wrap
msgid "Customizing the Redis options programmatically"
msgstr "プログラムによる Redis オプションのカスタマイズ"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:700
msgid "You can expose a bean implementing the `io.quarkus.redis.client.RedisOptionsCustomizer` interface to customize the Redis client options.  The bean is called for each configured Redis client:"
msgstr "Redis クライアントのオプションをカスタマイズするために、`io.quarkus.redis.client.RedisOptionsCustomizer` インターフェイスを実装した Bean を公開することができます。この Bean は、設定された各 Redis クライアントに対して呼び出されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:705
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyExampleCustomizer implements RedisOptionsCustomizer {\n"
msgstr ""
"@ApplicationScoped\n"
"public static class MyExampleCustomizer implements RedisOptionsCustomizer {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:716
#, no-wrap
msgid ""
"    @Override\n"
"    public void customize(String clientName, RedisOptions options) {\n"
"        if (clientName.equalsIgnoreCase(\"my-redis\")\n"
"                || clientName.equalsIgnoreCase(RedisConfig.DEFAULT_CLIENT_NAME)) {\n"
"            // modify the given options\n"
"        } else {\n"
"            throw new IllegalStateException(\"Unknown client name: \" + clientName);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public void customize(String clientName, RedisOptions options) {\n"
"        if (clientName.equalsIgnoreCase(\"my-redis\")\n"
"                || clientName.equalsIgnoreCase(RedisConfig.DEFAULT_CLIENT_NAME)) {\n"
"            // modify the given options\n"
"        } else {\n"
"            throw new IllegalStateException(\"Unknown client name: \" + clientName);\n"
"        }\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:719
#, no-wrap
msgid "Dev Services"
msgstr "Dev Services"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:722
#, fuzzy
msgid "See xref:redis-dev-services.adoc[Redis Dev Service]."
msgstr "link:redis-dev-services[Redis Dev Service] を参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:724
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#~ msgid "As the list of commands which are supported out-of-box by both https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] and https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`] depends on what is available in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`], then there might be case when you need a command which is not (yet) available via https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]."
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`]と  link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`]の両方でサポートされているコマンドのリストは link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]で利用可能なものに依存するため、場合によっては link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] で利用できないコマンドが必要になる場合があります。"

#~ msgid "In such case (if you don't want to wait for the new command to be supported in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]), you can implement it in either https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] or https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`].  In order to do so, you will need:"
#~ msgstr "このような場合（新しいコマンドが link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]でサポートされるのを待ちたくない場合）は、 link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`]または link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`] のいずれかで実装できます。 そのためには、以下のものが必要となります。"

#~ msgid "Generate a new `Command` based on the nodejs code available in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] repository:"
#~ msgstr "link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]リポジトリで公開されているnodejsのコードに基づいて、新しい `Command` を生成"

#~ msgid "If you don't have a Redis service running locally, you can run Redis in a Docker container:"
#~ msgstr "Redisのサービスをローカルで実行していない場合は、DockerコンテナでRedisを実行することができます。"

#~ msgid "Next, while being in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] root folder execute:"
#~ msgstr "次に、link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] ルートフォルダにいる状態で 次を実行します:"

#~ msgid "The above sequence of commands should update the https://github.com/vert-x3/vertx-redis-client/blob/master/src/main/java/io/vertx/redis/client/Command.java[`Command.java`] file, so it includes all the possible commands supported by a particular Redis version."
#~ msgstr "上記の一連のコマンドは、link:https://github.com/vert-x3/vertx-redis-client/blob/master/src/main/java/io/vertx/redis/client/Command.java[`Command.java`]ファイルを更新し、特定のRedisバージョンでサポートされるすべてのコマンドが含まれるようになります。"

#~ msgid "This definition is very important as we will have to use it in the service.  Once we have this `Command` we can start to update the redis-client extension by:"
#~ msgstr "この定義は、サービスの中で使用する必要があるため、非常に重要です。この `Command` ができたら、redis-client extension を以下のように更新していきます。"

#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] interface, i.e.:"
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`]インターフェイスを更新、つまり"

#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientImpl.java[`RedisClientImpl`], i.e.:"
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientImpl.java[`RedisClientImpl`]を更新、すなわち"

#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`] interface, i.e.:"
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`]インターフェイスを更新、つまり"

#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/ReactiveRedisClientImpl.java[`ReactiveRedisClientImpl`], i.e.:"
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/ReactiveRedisClientImpl.java[`ReactiveRedisClientImpl`]を更新、すなわち"

#~ msgid "Please note that it's using the `MutinyRedis` class which does asynchronous calls to Redis."
#~ msgstr "Redisへの非同期呼び出しを行う `MutinyRedis` クラスを使用していることに注目してください。"
