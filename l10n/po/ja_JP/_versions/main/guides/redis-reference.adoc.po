# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-07-30 08:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/redis-reference.adoc:6
#, no-wrap
msgid "Redis Extension Reference Guide"
msgstr "Redis エクステンションのリファレンスガイド"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:15
msgid "Redis is an in-memory data store used as a database, cache, streaming engine, and message broker.  The Quarkus Redis extension allows integrating Quarkus applications with Redis."
msgstr "Redis は、データベース、キャッシュ、ストリーミングエンジン、メッセージブローカーとして使用されるインメモリーデータストアです。Quarkus Redis エクステンションを使用すると、Quarkus アプリケーションと Redis を統合することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:18
msgid "To use this extension, the user must be familiar with Redis, especially understanding the mechanism of commands and how they are organized.  Typically, we recommend:"
msgstr "このエクステンションを使うには、ユーザーが Redis に精通していること、特にコマンドの仕組みとその設定について理解していることが必要です。一般的には、以下を推奨します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:20
msgid "The https://try.redis.io/[interactive tutorial] introducing Redis."
msgstr "Redis を紹介する https://try.redis.io/[インタラクティブなチュートリアル]。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:21
msgid "The https://redis.io/commands/[command references] explains Redis commands and contains links to reference documentation."
msgstr "Redis コマンドを説明し、リファレンスドキュメントへのリンクが掲載されている https://redis.io/commands/[コマンドリファレンス]。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:23
msgid "This extension provides imperative and reactive APIs and low-level and high-level (type-safe) clients."
msgstr "このエクステンションは、命令型とリアクティブ型の API、および低レベルと高レベルの (タイプセーフな) クライアントを提供します。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:24
#, fuzzy, no-wrap
msgid "Use the Redis Client"
msgstr "Redisクライアントを使う"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:28
msgid "If you want to use this extension, you need to add the `io.quarkus:quarkus-redis` extension first.  In your `pom.xml` file, add:"
msgstr "このエクステンションを使用する場合は、最初に `io.quarkus:quarkus-redis` エクステンションを追加する必要があります。`pom.xml` ファイルに、以下を追加します。"

#. type: Block title
#: upstream/_versions/main/guides/redis-reference.adoc:30
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:36
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-redis-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/redis-reference.adoc:39
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:42
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-redis-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:45
msgid "With this dependency, you can then inject Redis clients or _datasource_ (high-level, type-safe API), such as:"
msgstr "この依存関係があれば、次に Redis クライアントや _データソース_ (高レベル、タイプセーフの API) を注入することができます。以下に例を示します。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:49
#, no-wrap
msgid "import io.quarkus.redis.datasource.RedisDataSource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:53
#, no-wrap
msgid ""
"// ...\n"
"@Inject RedisAPI lowLevelClient;\n"
"@Inject RedisDataSource highLevelApi;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:56
#, fuzzy
msgid "More details about the various APIs offered by the quarkus-redis extension are available in the xref:apis[One extension, multiple APIs] section."
msgstr "Quarkus-redisエクステンションが提供するさまざまなAPIの詳細については、「 xref:apis[1つのエクステンション、複数のAPI] 」のセクションを参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:59
#, fuzzy
msgid "To use Redis as a cache backend, refer to the xref:cache-redis-reference.adoc[Redis Cache Backend reference]."
msgstr "Redisをキャッシュバックエンドとして使用するには、 xref:cache-redis-reference.adoc[Redis Cache Backendのリファレンスを] 参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:61
#, no-wrap
msgid "One extension, multiple APIs"
msgstr "1 つのエクステンション、複数の API"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:64
msgid "This extension provides multiple ways to interact with Redis:"
msgstr "このエクステンションは、Redis と対話する複数の方法を提供します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:69
msgid "the _low-level_ Vert.x client: it's a fully reactive, non-blocking, and asynchronous client.  More details on https://vertx.io/docs/vertx-redis-client/java/[the Vert.x Redis Client documentation].  Two APIs are exposed: `io.vertx.redis.client.Redis`, and `io.vertx.redis.client.RedisAPI`.  You will generally use the latter, except if you need to manage connections yourself."
msgstr "_低レベルの_ Vert.x クライアント: 完全にリアクティブで、ノンブロッキングかつ非同期なクライアントです。詳細は https://vertx.io/docs/vertx-redis-client/java/[Vert.x Redis クライアントドキュメント] を参照してください。2 つの API (`io.vertx.redis.client.Redis` および `io.vertx.redis.client.RedisAPI`) が公開されています。接続を自分で管理する必要がある場合を除き、通常は後者を利用することになります。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:72
msgid "the _low-level_ Mutiny variant of the Vert.x API: Unlike the previous one, it exposes a Mutiny API and provides both reactive and imperative methods (suffixed with `andAwait()`).  Two APIs are exposed: `io.vertx.mutiny.redis.client.Redis` and `io.vertx.mutiny.redis.client.RedisAPI`.  You will generally use the latter, except if you need to manage connections yourself."
msgstr "Vert.x API の _低レベルの_ Mutiny バリアント :以前のものとは異なり、Mutiny API を公開し、リアクティブ型と命令型の両方のメソッド (接尾辞は `andAwait()`) が提供されます。2 つの API (`io.vertx.mutiny.redis.client.Redis` および `io.vertx.mutiny.redis.client.RedisAPI`) が公開されています。自分で接続を管理する必要がある場合を除いて、通常は後者を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:76
msgid "a _high-level_ reactive data source: A type-safe, high-level API to interact with Redis.  This API is fully reactive and asynchronous.  It exposes a Mutiny API.  It exposes the `io.quarkus.redis.datasource.ReactiveRedisDataSource` interface."
msgstr "_高レベルの_ リアクティブデータソース: Redis と対話するための、タイプセーフな高レベル API です。この API は完全にリアクティブで非同期です。これは、Mutiny API を公開します。`io.quarkus.redis.datasource.ReactiveRedisDataSource` インターフェイスを公開します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:79
msgid "a _high-level_ imperative data source: A type-safe, high-level API to interact with Redis.  It is the imperative variant of the reactive data source.  It exposes the `io.quarkus.redis.datasource.RedisDataSource` interface."
msgstr "_高レベルの_ 命令型データソース: Redis と対話するための、タイプセーフな高レベル API です。これはリアクティブデータソースの命令型バリアントです。`io.quarkus.redis.datasource.RedisDataSource` インターフェイスを公開します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:81
msgid "To help you select the suitable API for you, here are some recommendations:"
msgstr "適切な API を選択できるように、いくつかの推奨事項を以下に示します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:83
msgid "If you are building an imperative (_classic_) Quarkus application integrating with Redis: use `io.quarkus.redis.datasource.RedisDataSource`."
msgstr "Redis と統合する命令型 (_classic_) の Quarkus アプリケーションを構築する場合、 `io.quarkus.redis.datasource.RedisDataSource` を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:84
msgid "If you are building a reactive Quarkus application integrating with Redis: use `io.quarkus.redis.datasource.ReactiveRedisDataSource`."
msgstr "Redis と統合したリアクティブな Quarkus アプリケーションを構築する場合は、`io.quarkus.redis.datasource.ReactiveRedisDataSource` を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:85
msgid "If you need fine-grain control, or execute commands in a generic way: use `io.vertx.mutiny.redis.client.RedisAPI`"
msgstr "細かい制御が必要な場合や、汎用的な方法でコマンドを実行する場合は、`io.vertx.mutiny.redis.client.RedisAPI` を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:86
msgid "If you have existing Vert.x code, use `io.vertx.redis.client.RedisAPI`"
msgstr "既存の Vert.x コードがある場合は、`io.vertx.redis.client.RedisAPI` を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:87
msgid "If you need to emit custom commands, you can either use the data sources (reactive or imperative) or the `io.vertx.mutiny.redis.client.Redis`."
msgstr "カスタムコマンドを発行する必要がある場合は、データソース (リアクティブ型または命令型) または `io.vertx.mutiny.redis.client.Redis` を使用することができます。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:88
#, fuzzy, no-wrap
msgid "Inject the default and named clients"
msgstr "デフォルト・クライアントと名前付きクライアントを注入する"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:92
msgid "This extension lets you configure a _default_ Redis client/data sources or _named_ ones.  The latter is essential when you need to connect to multiple Redis instances."
msgstr "このエクステンションでは、_デフォルトの_ Redis クライアント/データソースまたは _名前付き_ ソースを設定することができます。後者は、複数の Redis インスタンスに接続する必要がある場合に不可欠となります。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:95
msgid "The default connection is configured using the `quarkus.redis.*` properties.  For example, to configure the default Redis client, use:"
msgstr "デフォルトの接続は、`quarkus.redis.*` プロパティーを使用して設定されます。たとえば、デフォルトの Redis クライアントを設定するには、以下を使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:99
#, no-wrap
msgid "quarkus.redis.hosts=redis://localhost/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:102
msgid "When using the default connection, you can inject the various APIS using a _plain_ `@Inject`:"
msgstr "デフォルトの接続を使用する場合、_プレーン_ `@Inject` を使用してさまざまな APIS を注入することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:112
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedisExample {\n"
"    @Inject ReactiveRedisDataSource reactiveDataSource;\n"
"    @Inject RedisDataSource redisDataSource;\n"
"    @Inject RedisAPI redisAPI;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:115
msgid "In general, you inject a single one; the previous snippet is just an example."
msgstr "一般的には、1 つだけ注入します。先ほどのスニペットは単なる一例です。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:117
msgid "_Named_ clients are configured using the `quarkus.redis.<name>.*` properties:"
msgstr "_名前付き_ クライアントは `quarkus.redis.<name>.*` プロパティーを使用して設定されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:122
#, no-wrap
msgid ""
"quarkus.redis.my-redis-1.hosts=redis://localhost/\n"
"quarkus.redis.my-redis-2.hosts=redis://my-other-redis:6379\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:125
msgid "To access the APIs, you need to use the `@RedisClientName` qualifier:"
msgstr "API にアクセスするためには、`@RedisClientName` 修飾子が必要です。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:134
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedisExample {\n"
"    @Inject @RedisClientName(\"my-redis-1\") ReactiveRedisDataSource reactiveDataSource;\n"
"    @Inject @RedisClientName(\"my-redis-2\") RedisDataSource redisDataSource;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:137
msgid "You can omit the `@Inject` annotation when using `@RedisClientName`."
msgstr "`@RedisClientName` を使用する場合、 `@Inject` アノテーションを省略することができます。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:138
#, fuzzy, no-wrap
msgid "Connect to the Redis server"
msgstr "Redisサーバーに接続する"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:141
msgid "The Redis extension can operate in 4 distinct modes:"
msgstr "Redis エクステンションは、4 つの異なるモードで動作することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:143
msgid "Simple client (probably what most users need)."
msgstr "シンプルなクライアント (おそらくほとんどのユーザーが必要としているもの)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:144
msgid "Sentinel (when working with Redis in High Availability mode)."
msgstr "Sentinel (高可用性モードで Redis を使用する場合)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:145
msgid "Cluster (when working with Redis in Clustered mode)."
msgstr "クラスター (Redis を Clustered モードで動作させる場合)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:146
msgid "Replication (single shard, one node write, multiple read)."
msgstr "レプリケーション (シングルシャード、1 ノード書き込み、マルチ読み取り)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:148
msgid "The connection url is configured with the `quarkus.redis.hosts` (or `quarkus.redis.<name>.hosts`) as follows:"
msgstr "接続 URL は、以下のように `quarkus.redis.hosts` (または `quarkus.redis.<name>.hosts`) で設定されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:152
#, no-wrap
msgid "quarkus.redis.hosts=redis://[:password@]host[:port][/db-number]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:154
#, fuzzy, no-wrap
msgid "Use Unix Socket"
msgstr "Unixソケットを使用"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:157
msgid "When using unix-socket, you need:"
msgstr "unix-socket を使用する場合、以下が必要です。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:161
#, no-wrap
msgid "quarkus.redis.hosts=unix://[:password@]/domain/docker.sock[?select=db-number]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:163
#, fuzzy, no-wrap
msgid "Use the Sentinel Mode"
msgstr "センチネルモードを使う"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:166
msgid "When using Sentinel, you need to pass multiple _host urls_ and configure the client type to `sentinel`:"
msgstr "Sentinel を使用する場合、複数の _ホスト urls_ を渡し、クライアントのタイプを `sentinel` に設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:171
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:5000,redis://localhost:5001,redis://localhost:5002\n"
"quarkus.redis.client-type=sentinel\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:175
#, no-wrap
msgid ""
"# Optional\n"
"quarkus.redis.master-name=my-sentinel # Default is my-master\n"
"quarkus.redis.role=master # master is the default\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:177
#, fuzzy, no-wrap
msgid "Use the Cluster Mode"
msgstr "クラスターモードを使う"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:180
msgid "When using Redis in cluster mode, you need to pass multiple _host urls_, configure the client type to `cluster` and configure the `replicas` mode:"
msgstr "Redis をクラスターモードで使用する場合、複数の _ホスト urls_ を渡し、クライアントのタイプを `cluster` に設定し、`replicas` モードを設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:186
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:7000,redis://localhost:7001,redis://localhost:7002\n"
"quarkus.redis.client-type=cluster\n"
"quarkus.redis.replicas=share\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:188
#, fuzzy, no-wrap
msgid "Use the replication Mode"
msgstr "レプリケーション・モードを使う"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:191
msgid "When using the replication mode, you need to pass a single host url and configure the type to be `replication`:"
msgstr "レプリケーションモードを使用する場合、単一のホスト URL を渡し、タイプを `replication` に設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:196
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:7000\n"
"quarkus.redis.client-type=replication\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:198
#, fuzzy, no-wrap
msgid "Connect to Redis Cloud"
msgstr "Redisクラウドに接続する"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:201
msgid "To connect to redis cloud, you need the following properties:"
msgstr "redis クラウドに接続するためには、以下のプロパティーが必要です。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:206
#, no-wrap
msgid ""
"quarkus.redis.hosts=<the redis cloud url such as redis://redis-12436.c14.us-east-1-3.ec2.cloud.redislabs.com:12436>\n"
"quarkus.redis.password=<the password>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:208
#, fuzzy, no-wrap
msgid "Use TLS"
msgstr "TLSを使用する"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:211
#, fuzzy
msgid "To use TLS, you need to:"
msgstr "TLSを使うには"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:213
#, fuzzy
msgid "Set the `quarkus.redis.tls.enabled=true` property"
msgstr "`quarkus.redis.tls.enabled=true` プロパティを設定する"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:214
#, fuzzy
msgid "Make sure that your URL starts with `rediss://` (with two `s`)"
msgstr "URLが `rediss://` （2つの `s` ）で始まることを確認してください。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:215
#, fuzzy, no-wrap
msgid "Configure the authentication"
msgstr "認証を設定する"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:219
msgid "The Redis password can be set in the `redis://` URL or with the `quarkus.redis.password` property.  We recommend the latter, and if possible, using secrets or an environment variable to configure the password."
msgstr "Redis のパスワードは、`redis://` URL で設定するか、 `quarkus.redis.password` プロパティーで設定することができますが、後者での設定をお勧めします。可能であれば、シークレットや環境変数を使ってパスワードを設定することをお勧めします。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:221
msgid "The associated environment variable is `QUARKUS_REDIS_PASSWORD`, or `QUARKUS_REDIS_<NAME>_PASSWORD` for named clients."
msgstr "関連する環境変数は `QUARKUS_REDIS_PASSWORD` で、名前付きクライアントの場合は `QUARKUS_REDIS_<NAME>_PASSWORD` となります。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:222
#, fuzzy, no-wrap
msgid "Use Redis data sources"
msgstr "Redisデータソースを使用する"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:227
msgid "Quarkus exposes a high-level API on top of Redis.  This API is type-safe and structured around the notion of _group_, inherited from the https://redis.io/commands/command-docs/[Redis command organization].  This API lets you execute Redis commands more conveniently and safely."
msgstr "Quarkus は、Redis 上で高レベルの API を公開します。この API はタイプセーフで https://redis.io/commands/command-docs/[Redis コマンド編成] から継承された _グループ_ の概念を中心とした構造となっています。この API を使用すると、Redis コマンドをより便利かつ安全に実行することができます。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:228
#, no-wrap
msgid "Inject data sources"
msgstr "データソースの注入"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:231
msgid "For each configured Redis client, two Redis data sources are exposed:"
msgstr "設定された各 Redis クライアントに対して、2 つの Redis データソースが公開されます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:234
msgid "`io.quarkus.redis.datasource.RedisDataSource` - an imperative (blocking) Redis data source.  Each operation blocks until a response is received or a timeout is reached"
msgstr "`io.quarkus.redis.datasource.RedisDataSource`: 命令型の (ブロッキング) Redis データソースです。各操作は、レスポンスを受信するか、タイムアウトに達するまでブロックされます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:235
msgid "`io.quarkus.redis.datasource.ReactiveRedisDataSource` - a reactive Redis data source returning `Uni<X>` or `Multi<X>`."
msgstr "`io.quarkus.redis.datasource.ReactiveRedisDataSource`: `Uni<X>` または `Multi<X>` を返すリアクティブ型 Redis データソースです。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:237
msgid "If you configured the _default_ Redis client, you could inject the data sources using:"
msgstr "_デフォルトの_ Redis クライアントを設定した場合、以下を使用してデータソースを注入することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:242
#, no-wrap
msgid ""
"@Inject RedisDataSource defaultRedisDataSource;\n"
"@Inject ReactiveRedisDataSource defaultReactiveRedisDataSource;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:245
msgid "If you configured a _named_ Redis client, you need to use the `io.quarkus.redis.RedisClientName` qualifier to select the right client:"
msgstr "_名前付きの_ Redis クライアントを設定した場合、`io.quarkus.redis.RedisClientName` 修飾子を使用して、正しいクライアントを選択する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:250
#, no-wrap
msgid ""
"@RedisClientName(\"my-redis\") RedisDataSource myRedisDataSource;\n"
"@RedisClientName(\"my-redis\") ReactiveRedisDataSource myReactiveRedisDataSource;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:253
msgid "When using the _blocking_ variant, you can configure the default timeout with:"
msgstr "_ブロッキング_ バリアントを使う場合は、以下を使用してデフォルトのタイムアウトを設定することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:258
#, no-wrap
msgid ""
"quarkus.redis.timeout=5s\n"
"quarkus.redis.my-redis.timeout=5s\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:261
msgid "The default timeout is configured to 10s."
msgstr "デフォルトのタイムアウトは 10 秒に設定されています。"

#. type: Block title
#: upstream/_versions/main/guides/redis-reference.adoc:263
#, no-wrap
msgid "All about delegation"
msgstr "デリゲーションに関するすべて"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:267
msgid "The blocking data source (`io.quarkus.redis.datasource.RedisDataSource`) is implemented on top of the reactive one (`io.quarkus.redis.datasource.ReactiveRedisDataSource`).  The `ReactiveRedisDataSource` is implemented on top of the `io.vertx.mutiny.redis.Redis` API."
msgstr "ブロッキングデータソース (`io.quarkus.redis.datasource.RedisDataSource`) はリアクティブデータソース (`io.quarkus.redis.datasource.ReactiveRedisDataSource`) の上に実装されています。`ReactiveRedisDataSource` は `io.vertx.mutiny.redis.Redis` API の上に実装されています。"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:269
#, no-wrap
msgid "Data Source groups"
msgstr "データソースグループ"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:272
msgid "As mentioned above, the API is divided into groups:"
msgstr "前述の通り、API はグループに分かれています。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:274
msgid "bitmap - `.bitmap()`"
msgstr "bitmap - `.bitmap()`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:275
msgid "key (generic) - `.key()`"
msgstr "key (generic) - `.key()`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:276
msgid "geo - `.geo(memberType)`"
msgstr "geo - `.geo(memberType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:277
msgid "hash - `.hash(`valueType)`"
msgstr "hash - `.hash(`valueType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:278
msgid "hyperloglog - `.hyperloglog(memberType)`"
msgstr "hyperloglog - `.hyperloglog(memberType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:279
msgid "list - `.list(memberType)`"
msgstr "list - `.list(memberType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:280
msgid "pubsub - `pubsub()`"
msgstr "pubsub - `pubsub()`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:281
msgid "set - `.set(memberType)`"
msgstr "set - `.set(memberType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:282
msgid "sorted-set - `.sortedSet(memberType)`"
msgstr "sorted-set - `.sortedSet(memberType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:283
msgid "string - `.value(valueType)`"
msgstr "string - `.value(valueType)`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:284
#, fuzzy
msgid "stream - `.stream(`valueType`)"
msgstr "stream - `.stream(`valueType` )"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:285
msgid "transactions - `withTransaction`"
msgstr "transactions - `withTransaction`"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:286
msgid "json - `.json()` (requires the https://redis.com/modules/redis-json/[RedisJSON] module on the server side)"
msgstr "json - `.json()` (サーバー側に link:https://redis.com/modules/redis-json/[RedisJSON] モジュールが必要)"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:287
msgid "bloom - `.bloom()` (requires the https://redis.com/modules/redis-bloom/[RedisBloom] module on the server side)"
msgstr "bloom - `.bloom()` (サーバー側に link:https://redis.com/modules/redis-bloom/[RedisBloom] モジュールが必要)"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:288
msgid "cuckoo - `.cuckoo()` (requires the https://redis.com/modules/redis-bloom/[rRedisBloom] module on the server side, which also provides the cuckoo filter commands)"
msgstr "cuckoo - `.cuckoo()` (サーバ側に link:https://redis.com/modules/redis-bloom/[rRedisBloom] モジュールが必要で、cuckoo のフィルタコマンドも提供します)"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:289
msgid "count-min - `.countmin()` (requires the https://redis.com/modules/redis-bloom/[RedisBloom] module on the server side, which also provides the count-min filter commands)"
msgstr "count-min - `.countmin()` （サーバー側に link:https://redis.com/modules/redis-bloom/[RedisBloom] モジュールが必要で、count-minフィルターコマンドも提供されます。）"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:290
msgid "top-k - `.topk()` (requires the https://redis.com/modules/redis-bloom/[RedisBloom] module on the server side, which also provides the top-k filter commands)"
msgstr "top-k - `.topk()` (サーバー側に link:https://redis.com/modules/redis-bloom/[RedisBloom] モジュールが必要で、top-kフィルターコマンドも提供します)"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:293
#, fuzzy
msgid "graph - `.graph()` (requires the https://redis.com/modules/redis-graph/[RedisGraph] module on the server side).  These commands are marked as experimental.  Also the module has been declared _end of life_ by https://redis.com/blog/redisgraph-eol/[Redis]."
msgstr "graph - `.graph()` （サーバー側に link:https://redis.com/modules/redis-graph/[RedisGraph] モジュールが必要）。これらのコマンドは実験的なものです。また、このモジュールは link:https://redis.com/blog/redisgraph-eol/[Redisによって] サポート _終了が_ 宣言されています。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:294
msgid "search - `.search()` (requires the https://redis.com/modules/redis-search/[RedisSearch] module on the server side)."
msgstr "search - `.search()` (サーバー側に link:https://redis.com/modules/redis-search/[RedisSearch] モジュールが必要です)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:295
msgid "auto-suggest - `.autosuggest()` (requires the https://redis.com/modules/redis-search/[RedisSearch] module on the server side)."
msgstr "auto-suggest - `.autosuggest()` (サーバー側に link:https://redis.com/modules/redis-search/[RedisSearch] モジュールが必要です)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:296
msgid "time-series - `.timeseries()` (requires the https://redis.com/modules/redis-timeseries/[Redis Time Series] module on the server side)."
msgstr "time-series - `.timeseries()` (サーバー側に link:https://redis.com/modules/redis-timeseries/[Redis Time Series] モジュールが必要です)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:298
msgid "These commands are marked as experimental, as we would need feedback before making them stable."
msgstr "これらのコマンドは、stableになる前にフィードバックを必要とするため、experimentalとしてマークされています。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:301
msgid "Each of these methods returns an object that lets you execute the commands related to the group.  The following snippet demonstrates how to use the _hash_ group:"
msgstr "これらのメソッドはそれぞれ、そのグループに関連するコマンドを実行することができるオブジェクトを返します。以下のスニペットは、_ハッシュ_ グループの使い方を示しています。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:306
#: upstream/_versions/main/guides/redis-reference.adoc:389
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyRedisService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:308
#: upstream/_versions/main/guides/redis-reference.adoc:391
#, no-wrap
msgid "    private static final String MY_KEY = \"my-key\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:310
#, no-wrap
msgid "    private final HashCommands<String, String, Person> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:314
#, no-wrap
msgid ""
"    public MyRedisService(RedisDataSource ds) { // <1>\n"
"        commands = ds.hash(Person.class); // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:318
#, no-wrap
msgid ""
"    public void set(String field, Person value) {\n"
"        commands.hset(MY_KEY, field, value);  // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:323
#, no-wrap
msgid ""
"    public Person get(String field) {\n"
"        return commands.hget(MY_KEY, field);  // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:326
msgid "Inject the `RedisDataSource` in the constructor"
msgstr "コンストラクターに `RedisDataSource` を注入します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:328
msgid "Creates the `HashCommands` object.  This object has three type parameters: the type of the key, the type of the field, and the type of the member"
msgstr "`HashCommands` オブジェクトを作成します。このオブジェクトには 3 つのタイプ (キーのタイプ、フィールドのタイプ、メンバーのタイプ) のパラメーターがあります。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:329
msgid "Use the created `commands` to associate the field `field` with the value `value`"
msgstr "作成した `commands` を使用して、フィールド `field` と値 `value` を関連付けます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:330
msgid "Use the created `commands` to retrieve the field `field` value."
msgstr "作成した `commands` を使用して、フィールド `field` の値を取得します。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:331
#, fuzzy, no-wrap
msgid "Serializing and Deserializing data"
msgstr "データのシリアライズとデシリアライズ"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:336
#, fuzzy
msgid "The data source APIs handle the serialization and deserialization automatically.  By default, non-standard types are serialized into JSON and deserialized from JSON.  In this case, `quarkus-jackson` is used."
msgstr "データ・ソースAPIは、シリアライズとデシリアライズを自動的に処理する。デフォルトでは、非標準型はJSONにシリアライズされ、JSONからデシリアライズされます。この場合、 `quarkus-jackson` 。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:337
#, fuzzy, no-wrap
msgid "Binary"
msgstr "バイナリ"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:340
#, fuzzy
msgid "To store or retrieve binary data, use `byte[]`."
msgstr "バイナリ・データを保存または取得するには、 `byte[]` を使用する。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:341
#, fuzzy, no-wrap
msgid "Custom codec"
msgstr "カスタムコーデック"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:344
#, fuzzy
msgid "You can register custom codec by providing a CDI _bean_ implementing the `io.quarkus.redis.datasource.codecs.Codec` interface:"
msgstr "`io.quarkus.redis.datasource.codecs.Codec` インタフェースを実装したCDI _Beanを_ 提供することで、カスタムコーデックを登録できます："

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:349
#, no-wrap
msgid ""
"import java.lang.reflect.Type;\n"
"import java.nio.charset.StandardCharsets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:351
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:353
#, no-wrap
msgid "import io.quarkus.redis.datasource.codecs.Codec;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:360
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonCodec implements Codec {\n"
"    @Override\n"
"    public boolean canHandle(Type clazz) {\n"
"        return clazz.equals(Person.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:366
#, no-wrap
msgid ""
"    @Override\n"
"    public byte[] encode(Object item) {\n"
"        var p = (Person) item;\n"
"        return (p.firstName + \";\" + p.lastName.toUpperCase()).getBytes(StandardCharsets.UTF_8);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:374
#, no-wrap
msgid ""
"    @Override\n"
"    public Object decode(byte[] item) {\n"
"        var value = new String(item, StandardCharsets.UTF_8);\n"
"        var segments = value.split(\";\");\n"
"        return new Person(segments[0], segments[1]);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:379
#, fuzzy
msgid "The `canHandle` method is called to check if the codec can handle a specific type.  The parameter received in the `encode` method matches that type.  The object returned by the `decode` method must also match that type."
msgstr "`canHandle` メソッドは、コーデックが特定の型を扱えるかどうかをチェックするために呼び出される。 `encode` メソッドで受け取るパラメータは、その型に一致する。 `decode` メソッドによって返されるオブジェクトも、その型に一致しなければならない。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:380
#, fuzzy, no-wrap
msgid "Use type reference"
msgstr "タイプ・リファレンスを使用"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:384
#, fuzzy
msgid "Each group can be configured with `Class`, or with `TypeReference` objects.  `TypeReference` are useful when dealing with Java generics:"
msgstr "各グループは `Class` 、または `TypeReference` オブジェクトで設定できる。 `TypeReference` はJavaジェネリックスを扱うときに便利である："

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:393
#, no-wrap
msgid "    private final HashCommands<String, String, List<Person>> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:397
#, no-wrap
msgid ""
"    public MyRedisService(RedisDataSource ds) {\n"
"        commands = ds.hash(new TypeReference<List<Person>>(){});\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:401
#, no-wrap
msgid ""
"    public void set(String field, List<Person> value) {\n"
"        commands.hset(MY_KEY, field, value);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:406
#, no-wrap
msgid ""
"    public List<Person> get(String field) {\n"
"        return commands.hget(MY_KEY, field);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:409
#, fuzzy
msgid "You cannot use type references when using transaction. This is a known limitation."
msgstr "トランザクションの使用時に型参照は使用できない。これは既知の制限事項である。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:410
#, fuzzy, no-wrap
msgid "Manipulate cached and binary data with the `value` group"
msgstr "`value` グループでキャッシュデータとバイナリデータを操作する。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:414
msgid "The `value` group is used to manipulate https://redis.io/docs/manual/data-types/#strings[Redis Strings].  Thus, this group is not limited to Java Strings but can be used for integers (like a counter) or binary content (like images)."
msgstr "`value` グループは https://redis.io/docs/manual/data-types/#strings[Redis 文字列] を操作するために使用されます。したがって、このグループは Java の文字列に限定されることなく、整数 (カウンターなど) やバイナリーコンテンツ (イメージなど) にも使用することができます。"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:415
#, no-wrap
msgid "Work with cached values"
msgstr "キャッシュされた値を扱う"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:419
msgid "You can use Redis as a cache using the `setex` command, which stores a given value to a given key for a given duration.  The following snippet shows how such a command can be used to store `BusinessObject` for 1 second."
msgstr "Redis をキャッシュとして使用するには、`setex` コマンドを使用します。このコマンドは、指定したキーに指定した値を指定した期間だけ格納します。以下のスニペットは、このようなコマンドを使用して `BusinessObject` を 1 秒間格納する方法を示しています。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:424
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyRedisCache {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:426
#, no-wrap
msgid "    private final ValueCommands<String, BusinessObject> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:430
#, no-wrap
msgid ""
"    public MyRedisCache(RedisDataSource ds) {\n"
"        commands = ds.value(BusinessObject.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:434
#: upstream/_versions/main/guides/redis-reference.adoc:595
#, no-wrap
msgid ""
"    public BusinessObject get(String key) {\n"
"        return commands.get(key);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:439
#, no-wrap
msgid ""
"    public void set(String key, BusinessObject bo) {\n"
"        commands.setex(key, 1, bo); // Expires after 1 second\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:442
msgid "You can use the `setnx` method only to set the value if no value has been stored for the given key."
msgstr "`setnx` メソッドは、指定したキーに対応する値が格納されていない場合に、値を設定するためだけに使用することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:444
msgid "The `key` group provides more fine-grain control on expiration and ttl of each key."
msgstr "`key` グループは、各キーの有効期限や ttl をより細かく制御します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:448
msgid "The `set` method can also receive a `SetArgs` argument that modify the behavior:"
msgstr "`set` メソッドは、動作を変更するための `SetArgs` 引数を受け取ることもできます。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:450
msgid "`ex(seconds)` - Set the specified expire time, in seconds."
msgstr "`ex(seconds)`: 指定された有効期限を秒単位で設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:451
msgid "`px(milliseconds)` - Set the specified expire time, in milliseconds."
msgstr "`px(milliseconds)`: 指定した有効期限をミリ秒単位で設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:452
msgid "`exat(timestamp-seconds)` - Set the specified Unix time at which the key will expire, in seconds."
msgstr "`exat(timestamp-seconds)`: キーの有効期限が切れる Unix 時間を秒単位で設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:453
msgid "`pxat(timestamp-milliseconds)` - Set the specified Unix time at which the key will expire, in milliseconds."
msgstr "`pxat(timestamp-milliseconds)`: キーの有効期限が切れる Unix 時間をミリ秒単位で設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:454
msgid "`nx()` - Only set the key if it does not already exist."
msgstr "`nx()`: キーがまだ存在しない場合にのみ、キーを設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:455
msgid "`xx()` - Only set the key if it already exists."
msgstr "`xx()`: キーがすでに存在する場合にのみ、キーを設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:456
msgid "`keepttl()` - Retain the time to live associated with the key."
msgstr "`keepttl()`: キーに関連付けられた有効期限を保持します。"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:458
#, no-wrap
msgid "Store binary data"
msgstr "バイナリーデータの格納"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:462
msgid "Redis _strings_ can be used to store binary data, such as images.  In this case, we will use `byte[]` as value type:"
msgstr "Redis の _文字列_ は、イメージのようなバイナリーデータを格納するために使用することができます。この場合、値のタイプとして `byte[]` を使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:467
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyBinaryRepository {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:469
#, no-wrap
msgid "    private final ValueCommands<String, byte[]> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:473
#, no-wrap
msgid ""
"    public MyBinaryRepository(RedisDataSource ds) {\n"
"        commands = ds.value(byte[].class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:481
#, no-wrap
msgid ""
"    public byte[] get(String key) {\n"
"        byte[] bytes = commands.get(key);\n"
"        if (bytes == null) {\n"
"            throw new NoSuchElementException(\"`\" + key + \"` not found\");\n"
"        }\n"
"        return bytes;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:485
#, no-wrap
msgid ""
"    public void add(String key, byte[] bytes) {\n"
"        commands.set(key, bytes);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:490
#, no-wrap
msgid ""
"    public void addIfAbsent(String key, byte[] bytes) {\n"
"        commands.setnx(key, bytes);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:492
#, no-wrap
msgid "Store a counter"
msgstr "カウンターの格納"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:495
msgid "You can store counters in Redis as demonstrated below:"
msgstr "以下に示すように、Redis にカウンターを格納することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:500
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyRedisCounter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:502
#, no-wrap
msgid "    private final ValueCommands<String, Long> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:506
#, no-wrap
msgid ""
"    public MyRedisCounter(RedisDataSource ds) {\n"
"        commands = ds.value(Long.class); // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:514
#, no-wrap
msgid ""
"    public long get(String key) {\n"
"        Long l = commands.get(key);  // <2>\n"
"        if (l == null) {\n"
"            return 0L;\n"
"        }\n"
"        return l;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:518
#, no-wrap
msgid ""
"    public void incr(String key) {\n"
"        commands.incr(key);  // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:520
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:524
msgid "Retrieve the commands.  This time we will manipulate `Long` values"
msgstr "コマンドを取得します。今回は `Long` 値を操作します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:526
msgid "Retrieve the counter associated with the given `key`.  Return `0L` when no counter is stored."
msgstr "与えられた `key` に対応するカウンターを取得します。カウンターが格納されていない場合は、`0L` を返します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:528
msgid "Increment the value.  If there are no counter stored for the key, the `incr` command considers 0 as value (so `incr` sets the value to 1)."
msgstr "値を増やします。キーのカウンターが格納されていない場合は、`incr` コマンドは 0 を値とみなします (したがって `incr` は値を 1 に設定します)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:530
msgid "There are other methods that can be useful to manipulate counters, such as:"
msgstr "他にも、カウンターを操作する際に便利なメソッドがあります。以下に例を示します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:532
msgid "`incrby` - allows setting the increment value (positive or negative)"
msgstr "`incrby`: 増分値 (正または負) を設定することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:533
msgid "`incrbyfloat` - allows setting the increment value as a float/ double (the stored value will be a double)"
msgstr "`incrbyfloat` - float/double として増分値を設定できます (格納される値は double になります)。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:534
msgid "`set` - to set an initial value if needed"
msgstr "`set`: 必要に応じて初期値を設定します．"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:535
msgid "`decr` and `decrby` - allows decrementing the stored value"
msgstr "`decr` および `decrby`: 格納された値を減らすことができます。"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:536
#, no-wrap
msgid "Communicate with pub/sub"
msgstr "pub/subとの通信"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:540
msgid "Redis allows sending _messages_ to channels and listening for these messages.  These features are available from the `pubsub` group."
msgstr "Redisでは、チャンネルに _メッセージ_ を送信したり、そのメッセージをリッスンしたりすることができます。これらの機能は、 `pubsub` グループから利用できます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:542
msgid "The following snippets shows how a _cache_ can emit a `Notification` after every `set`, and how a subscriber can receive the notification."
msgstr "以下のスニペットは、_キャッシュ_ が `set` ごとに `Notification` を発行する方法と、サブスクライバーがその通知を受信する方法を示しています。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:548
#, no-wrap
msgid ""
"public static final class Notification {\n"
"    public String key;\n"
"    public BusinessObject bo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:550
#, no-wrap
msgid "    public Notification() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:552
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:558
#, no-wrap
msgid ""
"    public Notification(String key, BusinessObject bo) {\n"
"        this.key = key;\n"
"        this.bo = bo;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:564
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Startup // We want to create the bean instance on startup to subscribe to the channel.\n"
"public static class MySubscriber implements Consumer<Notification> {\n"
"    private final PubSubCommands<Notification> pub;\n"
"    private final PubSubCommands.RedisSubscriber subscriber;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:569
#, no-wrap
msgid ""
"    public MySubscriber(RedisDataSource ds) {\n"
"        pub = ds.pubsub(Notification.class);\n"
"        subscriber = pub.subscribe(\"notifications\", this);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:574
#, no-wrap
msgid ""
"    @Override\n"
"    public void accept(Notification notification) {\n"
"        // Receive the notification\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:580
#, no-wrap
msgid ""
"    @PreDestroy\n"
"    public void terminate() {\n"
"        subscriber.unsubscribe(); // Unsubscribe from all subscribed channels\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:583
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyCache {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:586
#, no-wrap
msgid ""
"    private final ValueCommands<String, BusinessObject> commands;\n"
"    private final PubSubCommands<Notification> pub;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:591
#, no-wrap
msgid ""
"    public MyCache(RedisDataSource ds) {\n"
"        commands = ds.value(BusinessObject.class);\n"
"        pub = ds.pubsub(Notification.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:601
#, no-wrap
msgid ""
"    public void set(String key, BusinessObject bo) {\n"
"        commands.set(key, bo);\n"
"        pub.publish(\"notifications\", new Notification(key, bo));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:603
#, fuzzy, no-wrap
msgid "Use Redis transactions"
msgstr "Redisトランザクションを使用する"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:607
msgid "Redis transactions are slightly different from relational database transactions.  Redis transactions are a batch of commands executed altogether."
msgstr "Redis トランザクションは、リレーショナルデータベースのトランザクションとは少し異なります。Redis トランザクションは、まとめて実行されるコマンドのバッチです。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:609
msgid "A Redis transaction can _watch_ a set of keys, which would _discard_ the transaction is one of these keys are updated during the transaction execution."
msgstr "Redis トランザクションはキーのセットを _監視_ することができ、トランザクションの実行中にこれらのキーのいずれかが更新された場合、トランザクションを _破棄_ します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:614
msgid "Commands enqueued in a transaction are not executed before the whole transaction is executed.  It means that you cannot retrieve a result during the transaction.  Results are accumulated in a `TransactionResult` object you will access after the completion of the transaction.  This object contains whether the transaction succeeded or was discarded, and in the former case the result of each command (indexed by the command order)."
msgstr "トランザクション内でキューに入れられたコマンドは、トランザクション全体が実行される前に実行されることはありません。つまり、トランザクションの最中に結果を取得することはできません。結果はトランザクションの完了後にアクセスする `TransactionResult` オブジェクトに蓄積されます。このオブジェクトには、トランザクションが成功したか破棄されたかに関係なく含まれ、成功した場合は各コマンドの結果 (コマンドの順番でインデックス化されています) が含まれます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:618
msgid "To start a transaction, you use the `withTransaction` method.  This method receives a `Consumer<TransactionalRedisDataSource>`, which follows the same API as the regular `RedisDataSource` except that the commands return `void` (`Uni<Void>` for the reactive variant).  When that consumer returns, the transaction is _executed_."
msgstr "トランザクションを開始するには、`withTransaction` メソッドを使用します。このメソッドは `Consumer<TransactionalRedisDataSource>` を受け取ります。これは、コマンドが `void` (リアクティブバリアントでは `Uni<Void>`) を返すことを除けば、通常の `RedisDataSource` と同じ API となります。そのコンシューマーが返されたとき、トランザクションは _実行_ されます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:620
msgid "The following snippet shows how to create a transaction executing two related _writes_:"
msgstr "次のスニペットは、2 つの関連する _書き込み_ を実行するトランザクションを作成する方法を示しています。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:624
#, no-wrap
msgid "@Inject RedisDataSource ds;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:626
#: upstream/_versions/main/guides/redis-reference.adoc:644
#: upstream/_versions/main/guides/redis-reference.adoc:725
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:632
#, no-wrap
msgid ""
"TransactionResult result = ds.withTransaction(tx -> {\n"
"        TransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"        hash.hset(KEY, \"field-1\", \"hello\");\n"
"        hash.hset(KEY, \"field-2\", \"hello\");\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:636
msgid "The received `tx` object can also be used to _discard_ the transaction, using: `tx.discard();`.  The returned `TransactionResult` lets you retrieve the result of each command."
msgstr "受け取った `tx` オブジェクトは、`tx.discard();` を使用してトランザクションを _破棄_ するために使用することもできます。返された `TransactionResult` により、各コマンドの結果を取得することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:638
msgid "When using the reactive variant of the data source, the passed callback is a `Function<ReactiveTransactionalRedisDataSource, Uni<Void>>`:"
msgstr "データソースのリアクティブバリアントを使用する場合、渡されるコールバックは `Function<ReactiveTransactionalRedisDataSource, Uni<Void>>`: となります。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:642
#: upstream/_versions/main/guides/redis-reference.adoc:723
#, no-wrap
msgid "@Inject ReactiveRedisDataSource ds;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:650
#, no-wrap
msgid ""
"Uni<TransactionResult> result = ds.withTransaction(tx -> {\n"
"        ReactiveTransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"        return hash.hset(KEY, \"field-1\", \"hello\")\n"
"            .chain(() -> hash.hset(KEY, \"field-2\", \"hello\"));\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:655
msgid "Transaction execution can be conditioned by _keys_.  When a passed key gets modified during the execution of a transaction, the transaction is discarded.  The keys are passed as `String` as a second parameter to the `withTransaction` method:"
msgstr "トランザクションの実行は、_キー_ によって条件付けることができます。渡されたキーがトランザクションの実行中に変更された場合、トランザクションは破棄されます。キーは `withTransaction` メソッドの第 2 パラメーターとして `String` として渡されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:663
#, no-wrap
msgid ""
"TransactionResult result = ds.withTransaction(tx -> {\n"
"    TransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"    hash.hset(KEY, \"field-1\", \"hello\");\n"
"    hash.hset(KEY, \"field-2\", \"hello\");\n"
"}, KEY);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:666
msgid "You cannot use the pub/sub feature from within a transaction."
msgstr "トランザクションの中から pub/sub 機能を使用することはできません。"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:667
#, fuzzy, no-wrap
msgid "Implement the optimistic locking pattern"
msgstr "楽観的ロックパターンの実装"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:671
msgid "To use optimistic locking, you need to use a variant of the `withTransaction` method, allowing the execution of code before the transaction starts.  In other words, it will be executed as follows:"
msgstr "楽観ロックを使用するには、`withTransaction` メソッドのバリアントを使用する必要があり、トランザクションが始まる前にコードを実行できるようにします。つまり、以下のように実行されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:675
#, no-wrap
msgid "WATCH key\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:679
#, no-wrap
msgid ""
"// Pre-transaction block\n"
"// ....\n"
"// Produce a result\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:683
#, no-wrap
msgid ""
"MULTI\n"
"  // In transaction code, receive the result produced by the pre-transaction block.\n"
"EXEC\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:686
msgid "For example, if you need to update a value in a hash only if the field exists, you will use the following API:"
msgstr "たとえば、フィールドが存在する場合にのみハッシュの値を更新する必要がある場合は、以下のような API を使用することになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:702
#, no-wrap
msgid ""
"OptimisticLockingTransactionResult<Boolean> result = blocking.withTransaction(ds -> {\n"
"    // The pre-transaction block:\n"
"    HashCommands<String, String, String> hashCommands = ds.hash(String.class);\n"
"    return hashCommands.hexists(key, \"field\"); // Produce a result (boolean in this case)\n"
"},\n"
" (exists, tx) -> { // The transactional block, receives the result and the transactional data source\n"
"        if (exists) {\n"
"            tx.hash(String.class).hset(key, \"field\", \"new value\");\n"
"        } else {\n"
"            tx.discard();\n"
"        }\n"
" },\n"
"  key); // The watched key\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:708
msgid "If one of the watched keys is touched before or during the execution of the pre-transaction or transactional blocks, the transaction is aborted.  The pre-transactional block produces a result that the transactional block can use.  This construct is necessary because, within a transaction, the commands do not produce a result.  Results can only be retrieved after the execution of the transaction."
msgstr "プレトランザクションブロックまたはトランザクションブロックの実行前または実行中に監視されているキーの 1 つがタッチされた場合、トランザクションは中断されます。プレトランザクションブロックは、トランザクションブロックが使用できる結果を生成します。トランザクション内では、コマンドは結果を生成しないので、この構成は必要です。結果は、トランザクションの実行後にのみ取得することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:713
msgid "The pre-transaction and transactional blocks are invoked on the same Redis connection.  Consequently, the pre-transaction block must use the passed data source to execute commands.  Thus, the commands are emitted from that connection.  These commands must not modify the watched keys."
msgstr "プレトランザクションブロックとトランザクションブロックは、同じ Redis 接続で呼び出されます。その結果、プレトランザクションブロックは、渡されたデータソースを使用してコマンドを実行する必要があります。したがって、コマンドはその接続から発行されます。これらのコマンドは、監視されたキーを変更することはできません。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:715
msgid "The transaction is aborted if the pre-transaction block throws an exception (or produces a failure when using the reactive API)."
msgstr "プレトランザクションブロックが例外をスローした場合 (またはリアクティブ API を使用している場合はエラーを生成した場合)、トランザクションは中断されます。"

#. type: Title ====
#: upstream/_versions/main/guides/redis-reference.adoc:716
#, no-wrap
msgid "Execute custom commands"
msgstr "カスタムコマンドの実行"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:719
msgid "To execute a custom command, or a command not supported by the API, use the following approach:"
msgstr "カスタムコマンドや API でサポートされていないコマンドを実行するには、以下の方法を使用します。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:727
#, no-wrap
msgid "Response response = ds.execute(\"my-command\", param1, param2, param3);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:733
msgid "The `execute` method sends the command to Redis and retrieves the `Response`.  The command name is passed as first parameters.  You can add an arbitrary number of **String** parameters to your command.  The result is wrapped into a `Response` object."
msgstr "`execute` メソッドは Redis にコマンドを送信し、`Response` を取得します。コマンド名は最初のパラメーターとして渡されます。コマンドには、任意の数の **String** パラメーターを追加することができます。結果は `Response` オブジェクトにラップされます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:735
msgid "The reactive variant returns a `Uni<Response>`."
msgstr "リアクティブバリアントは `Uni<Response>` を返します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:737
msgid "You can also execute custom command in a transaction."
msgstr "また、トランザクション内でカスタムコマンドを実行することも可能です。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:738
#, no-wrap
msgid "Preload data into Redis"
msgstr "Redisにデータをプリロードする"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:741
msgid "On startup, you can configure the Redis client to preload data into the Redis database."
msgstr "起動時に、RedisクライアントはRedisデータベースにデータをプリロードするように設定することができます。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:742
#, fuzzy, no-wrap
msgid "Configure the load scripts"
msgstr "ロードスクリプトの設定"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:745
msgid "Specify the _load script_ you want to load using:"
msgstr "使用する _ロードスクリプト_ を指定します："

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:750
#, no-wrap
msgid ""
"quarkus.redis.load-script=import.redis # import.redis is the default in dev mode, no-file is the default in production mode\n"
"quarkus.redis.my-redis.load-script=actors.redis, movies.redis\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:753
msgid "`load-script` is a build time property than cannot be overridden at runtime."
msgstr "`load-script` はビルド時のプロパティであり、実行時にオーバーライドすることはできません。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:756
msgid "Note that each client can have a different script, even a list of scripts.  In the case of a list, the data is imported in the list order (for example, first `actors.redis`, then `movies.redis` for the `my-redis` client)."
msgstr "各クライアントは異なるスクリプトを持つことができ、スクリプトのリストを持つこともできることに注意してください。リストの場合、データはリストの順番でインポートされます（たとえば、最初に `actors.redis` 、次に `my-redis` クライアントのための `movies.redis` ）。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:757
#, fuzzy, no-wrap
msgid "Write load scripts"
msgstr "ロードスクリプトを書く"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:760
msgid "The `.redis` file follows a _one command per line_ format:"
msgstr "`.redis` ファイルは、 _1行に1コマンド_ の形式をとっています："

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:764
#, no-wrap
msgid "# Line starting with # and -- are ignored, as well as empty lines\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:767
#, no-wrap
msgid ""
"-- One command per line:\n"
"HSET foo field1 abc field2 123\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:770
#, no-wrap
msgid ""
"-- Parameters with spaces must be wrapped into single or double quotes\n"
"HSET bar field1 \"abc def\" field2 '123 456 '\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:774
#, no-wrap
msgid ""
"-- Parameters with double quotes must be wrapped into single quotes and the opposite\n"
"SET key1 'A value using \"double-quotes\"'\n"
"SET key2 \"A value using 'single-quotes'\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:779
msgid "Quarkus batches all the commands from a single file and sends all the commands.  The loading process fails if there is any error, but the previous instructions may have been executed.  To avoid that, you can wrap your command into a Redis _transaction_:"
msgstr "Quarkusは、1つのファイルからすべてのコマンドを一括して送信します。読み込み処理はエラーがあると失敗しますが、前の命令が実行されている可能性があります。それを避けるために、コマンドをRedis _トランザクション_ にラップすることができます:"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:788
#, no-wrap
msgid ""
"-- Run inside a transaction\n"
"MULTI\n"
"SET key value\n"
"SET space:key 'another value'\n"
"INCR counter\n"
"EXEC\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:790
#, fuzzy, no-wrap
msgid "Configure the pre-loading"
msgstr "プリロードの設定"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:795
msgid "The data is loaded when the application starts.  By default, it drops the whole database before importing.  You can prevent this using `quarkus.redis.flush-before-load=false`."
msgstr "アプリケーションの起動時にデータを読み込みます。デフォルトでは、インポートする前にデータベース全体をドロップします。これを防ぐには、 `quarkus.redis.flush-before-load=false` を使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:798
msgid "Also, the import process only runs if the database is empty (no key).  You can force to import even if there is data using the `quarkus.redis.load-only-if-empty=false`"
msgstr "また、インポート処理は、データベースが空（キーなし）の場合のみ実行されます。 `quarkus.redis.load-only-if-empty=false` を使用すれば、データがあっても強制的にインポートすることができます。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:799
#, fuzzy, no-wrap
msgid "Distinguish dev/test vs. prod when pre-loading"
msgstr "プリロード時にデベロッパー／テストとプロダクションを区別する。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:803
msgid "As mentioned above, in dev and test modes, Quarkus tries to import data by looking for the `src/main/resources/import.redis`.  This behavior is disabled in _prod_ mode, and if you want to import even in production, add:"
msgstr "上記のように、devやtestモードでは、Quarkusは `src/main/resources/import.redis` を探してデータをインポートしようとします。この動作は _prod_ モードでは無効になっており、実稼働環境でもインポートしたい場合は、以下を追加します:"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:807
#, no-wrap
msgid "%prod.quarkus.redis.load-script=import.redis\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:810
#, fuzzy
msgid "Before importing in _prod_ mode, make sure you configured `quarkus.redis.flush-before-load` accordingly."
msgstr "_prod_ モードでインポートする前に、 `quarkus.redis.flush-before-load` を適切に設定したことを確認してください。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:812
msgid "In dev mode, to reload the content of the `.redis` load scripts, you need to add: `%dev.quarkus.vertx.caching=false`"
msgstr "devモードでは、 `.redis` ロードスクリプトの内容を再読み込みするため、 `%dev.quarkus.vertx.caching=false` を追加する必要があります"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:813
#, fuzzy, no-wrap
msgid "Use the Vert.x redis client"
msgstr "Vert.xのredisクライアントを使用する"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:817
msgid "In addition to the high-level API, you can use the Vertx Redis clients directly in your code.  The documentation of the Vert.x Redis Client is available on the https://vertx.io/docs/vertx-redis-client/java/[Vert.x Web Site]."
msgstr "高レベルの API に加えて、Vertx Redis クライアントをコードで直接使用することができます。Vert.x Redis クライアントのドキュメントは https://vertx.io/docs/vertx-redis-client/java/[Vert.x Web サイト] で公開されています。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:818
#, fuzzy, no-wrap
msgid "Configure Redis hosts programmatically"
msgstr "プログラムでRedisホストを設定する"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:822
msgid "The `RedisHostsProvider` programmatically provides redis hosts.  This allows for configuration of properties like redis connection password coming from other sources."
msgstr "`RedisHostsProvider` はプログラムによって Redis ホストを提供します。これにより、他のソースから取得した redis 接続パスワードのようなプロパティーを設定することができます。"

#. type: delimited block =
#: upstream/_versions/main/guides/redis-reference.adoc:826
msgid "This is useful as it removes the need to store sensitive data in application.properties."
msgstr "これは、application.properties に機密データを格納する必要がなくなるので便利です。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:840
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Identifier(\"hosts-provider\") // the name of the host provider\n"
"public class ExampleRedisHostProvider implements RedisHostsProvider {\n"
"    @Override\n"
"    public Set<URI> getHosts() {\n"
"        // do stuff to get the host\n"
"        String host = \"redis://localhost:6379/3\";\n"
"        return Collections.singleton(URI.create(host));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:843
msgid "The host provider can be used to configure the redis client like shown below"
msgstr "以下に示すように、ホストプロバイダーを使用して redis クライアントを設定することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:847
#, no-wrap
msgid "quarkus.redis.hosts-provider-name=hosts-provider\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:849
#, no-wrap
msgid "Customize the Redis options programmatically"
msgstr "プログラムによる Redis オプションのカスタマイズ"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:853
msgid "You can expose a bean implementing the `io.quarkus.redis.client.RedisOptionsCustomizer` interface to customize the Redis client options.  The bean is called for each configured Redis client:"
msgstr "Redis クライアントのオプションをカスタマイズするために、`io.quarkus.redis.client.RedisOptionsCustomizer` インターフェイスを実装した Bean を公開することができます。この Bean は、設定された各 Redis クライアントに対して呼び出されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:858
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyExampleCustomizer implements RedisOptionsCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:869
#, no-wrap
msgid ""
"    @Override\n"
"    public void customize(String clientName, RedisOptions options) {\n"
"        if (clientName.equalsIgnoreCase(\"my-redis\")\n"
"                || clientName.equalsIgnoreCase(RedisConfig.DEFAULT_CLIENT_NAME)) {\n"
"            // modify the given options\n"
"        } else {\n"
"            throw new IllegalStateException(\"Unknown client name: \" + clientName);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:871
#, fuzzy, no-wrap
msgid "Use the Redis Dev Services"
msgstr "Redis Dev Servicesを使用する"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:874
msgid "See xref:redis-dev-services.adoc[Redis Dev Service]."
msgstr "link:redis-dev-services[Redis Dev Service] を参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:875
#, fuzzy, no-wrap
msgid "Configure Redis observability"
msgstr "Redisの可観測性を設定する"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:877
#, fuzzy, no-wrap
msgid "Enable the health checks"
msgstr "ヘルスチェックを有効にする"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:880
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-redis` will automatically add a readiness health check to validate the connection to the Redis server."
msgstr "`quarkus-smallrye-health` エクステンションを使用している場合、`quarkus-redis` は Redis サーバーへの接続を検証するための readiness ヘルスチェックを自動的に追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:882
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr "そのため、アプリケーションの `/q/health/ready` エンドポイントにアクセスすると、接続の検証状況に関する情報が表示されます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:884
msgid "This behavior can be disabled by setting the `quarkus.redis.health.enabled` property to `false` in your `application.properties`."
msgstr "この動作は、 `application.properties` の `quarkus.redis.health.enabled` プロパティーを `false` に設定することで無効にできます。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:885
#, fuzzy, no-wrap
msgid "Enable metrics"
msgstr "メトリクスの有効化"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:889
#, fuzzy
msgid "Redis client metrics are automatically enabled when the application also uses the xref:telemetry-micrometer.adoc[`quarkus-micrometer`] extension.  Micrometer collects the metrics of all the Redis clients implemented by the application."
msgstr "Redisクライアント・メトリクスは、アプリケーションが xref:telemetry-micrometer.adoc[quarkus-micrometer] エクステンションを使用している場合は、自動的に有効になります。micrometerは、アプリケーションが実装するすべてのRedisクライアントのメトリクスを収集します。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:891
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr "例えば、メトリクスをPrometheusにエクスポートすると、以下のように取得できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:939
#, no-wrap
msgid ""
"# HELP redis_commands_duration_seconds The duration of the operations (commands of batches\n"
"# TYPE redis_commands_duration_seconds summary\n"
"redis_commands_duration_seconds_count{client_name=\"<default>\",} 3.0\n"
"redis_commands_duration_seconds_sum{client_name=\"<default>\",} 0.047500042\n"
"# HELP redis_commands_duration_seconds_max The duration of the operations (commands of batches\n"
"# TYPE redis_commands_duration_seconds_max gauge\n"
"redis_commands_duration_seconds_max{client_name=\"<default>\",} 0.033273167\n"
"# HELP redis_pool_active The number of resources from the pool currently used\n"
"# TYPE redis_pool_active gauge\n"
"redis_pool_active{pool_name=\"<default>\",pool_type=\"redis\",} 0.0\n"
"# HELP redis_pool_ratio Pool usage ratio\n"
"# TYPE redis_pool_ratio gauge\n"
"redis_pool_ratio{pool_name=\"<default>\",pool_type=\"redis\",} 0.0\n"
"# HELP redis_pool_queue_size Number of pending elements in the waiting queue\n"
"# TYPE redis_pool_queue_size gauge\n"
"redis_pool_queue_size{pool_name=\"<default>\",pool_type=\"redis\",} 0.0\n"
"# HELP redis_commands_failure_total The number of operations (commands or batches) that have been failed\n"
"# TYPE redis_commands_failure_total counter\n"
"redis_commands_failure_total{client_name=\"<default>\",} 0.0\n"
"# HELP redis_commands_success_total The number of operations (commands or batches) that have been executed successfully\n"
"# TYPE redis_commands_success_total counter\n"
"redis_commands_success_total{client_name=\"<default>\",} 3.0\n"
"# HELP redis_pool_idle The number of resources from the pool currently used\n"
"# TYPE redis_pool_idle gauge\n"
"redis_pool_idle{pool_name=\"<default>\",pool_type=\"redis\",} 6.0\n"
"# HELP redis_pool_completed_total Number of times resources from the pool have been acquired\n"
"# TYPE redis_pool_completed_total counter\n"
"redis_pool_completed_total{pool_name=\"<default>\",pool_type=\"redis\",} 3.0\n"
"# HELP redis_commands_count_total The number of operations (commands or batches) executed\n"
"# TYPE redis_commands_count_total counter\n"
"redis_commands_count_total{client_name=\"<default>\",} 3.0\n"
"# HELP redis_pool_usage_seconds Time spent using resources from the pool\n"
"# TYPE redis_pool_usage_seconds summary\n"
"redis_pool_usage_seconds_count{pool_name=\"<default>\",pool_type=\"redis\",} 3.0\n"
"redis_pool_usage_seconds_sum{pool_name=\"<default>\",pool_type=\"redis\",} 0.024381375\n"
"# HELP redis_pool_usage_seconds_max Time spent using resources from the pool\n"
"# TYPE redis_pool_usage_seconds_max gauge\n"
"redis_pool_usage_seconds_max{pool_name=\"<default>\",pool_type=\"redis\",} 0.010671542\n"
"# HELP redis_pool_queue_delay_seconds Time spent in the waiting queue before being processed\n"
"# TYPE redis_pool_queue_delay_seconds summary\n"
"redis_pool_queue_delay_seconds_count{pool_name=\"<default>\",pool_type=\"redis\",} 3.0\n"
"redis_pool_queue_delay_seconds_sum{pool_name=\"<default>\",pool_type=\"redis\",} 0.022341249\n"
"# HELP redis_pool_queue_delay_seconds_max Time spent in the waiting queue before being processed\n"
"# TYPE redis_pool_queue_delay_seconds_max gauge\n"
"redis_pool_queue_delay_seconds_max{pool_name=\"<default>\",pool_type=\"redis\",} 0.021926083\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:942
msgid "The Redis client name can be found in the _tags_."
msgstr "Redisクライアント名は、 _タグ_ で確認できます。"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:944
msgid "The metrics contain both the Redis connection pool metrics (`redis_pool_*`) and the metrics about the command execution (`redis_commands_*`) such as the number of command, successes, failures, and durations."
msgstr "メトリクスには、Redis接続プールのメトリクス（ `redis_pool_*` ）と、コマンド実行に関するメトリクス（ `redis_commands_*` ）（コマンド数、成功、失敗、継続時間など）の両方が含まれています。"

#. type: Title ===
#: upstream/_versions/main/guides/redis-reference.adoc:945
#, fuzzy, no-wrap
msgid "Disable metrics"
msgstr "測定基準を無効にする"

#. type: Plain text
#: upstream/_versions/main/guides/redis-reference.adoc:948
msgid "To disable the Redis client metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr "`quarkus-micrometer` が使用されている時にRedisクライアントメトリクスを無効にするには、アプリケーション設定に次のプロパティを追加します："

#. type: delimited block -
#: upstream/_versions/main/guides/redis-reference.adoc:952
#, no-wrap
msgid "quarkus.micrometer.binder.redis.enabled=false\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/redis-reference.adoc:955
#, no-wrap
msgid "Configuration reference"
msgstr "設定リファレンス"

#~ msgid "Installation"
#~ msgstr "インストール"

#~ msgid "Default and named clients"
#~ msgstr "デフォルトクライアントと名前付きクライアント"

#~ msgid "Connection to Redis"
#~ msgstr "Redisへの接続"

#~ msgid "Unix Socket"
#~ msgstr "Unix Socket"

#~ msgid "Sentinel Mode"
#~ msgstr "Sentinel モード"

#~ msgid "Cluster Mode"
#~ msgstr "クラスターモード"

#~ msgid "Replication Mode"
#~ msgstr "レプリケーションモード"

#~ msgid "Redis Cloud"
#~ msgstr "Redis Cloud"

#~ msgid "Authentication"
#~ msgstr "認証"

#~ msgid "Quarkus client API for data sources"
#~ msgstr "データソースのためのQuarkusクライアントAPI"

#~ msgid "graph - `.graph()` (requires the https://redis.com/modules/redis-graph/[RedisGraph] module on the server side).  These commands are marked as experimental, as we would need feedback before making them stable."
#~ msgstr "graph - `.graph()` (サーバー側に link:https://redis.com/modules/redis-graph/[RedisGraph] モジュールが必要です)。これらのコマンドはexperimentalとマークされており、stableになる前にフィードバックが必要です。"

#~ msgid "Serialization and Deserialization"
#~ msgstr "シリアライズとデシリアライズ"

#~ msgid "The `value` group"
#~ msgstr "`value` グループ"

#~ msgid "Redis transactions"
#~ msgstr "Redisトランザクション"

#~ msgid "Optimistic locking"
#~ msgstr "楽観的ロック"

#~ msgid "Load scripts"
#~ msgstr "スクリプトのロード"

#~ msgid "Load Script format"
#~ msgstr "ロードスクリプトフォーマット"

#~ msgid "Configuration"
#~ msgstr "設定"

#~ msgid "Dev/Test vs. Prod"
#~ msgstr "Dev/Test vs. Prod"

#~ msgid "Vert.x Redis Client"
#~ msgstr "Vert.x Redis クライアント"

#~ msgid "Redis Health Check"
#~ msgstr "Redis ヘルスチェック"

#~ msgid "Programmatic Redis Hosts"
#~ msgstr "プログラマティックRedisホスト"

#~ msgid "Dev Services"
#~ msgstr "Dev Services"

#~ msgid "Redis client metrics"
#~ msgstr "Redisクライアントメトリクス"

#~ msgid "Enable metrics collection"
#~ msgstr "メトリクスの収集の有効化"

#~ msgid "Disable metrics collection"
#~ msgstr "メトリクスの収集の無効化"

#~ msgid "The data source APIs handle the serialization and deserialization automatically.  When a non-standard type is used, the object is serialized into JSON and deserialized from JSON.  In this case, `quarkus-jackson` is used."
#~ msgstr "データソース API は、シリアライズとデシリアライズを自動的に処理します。非標準のタイプが使われる場合、オブジェクトは JSON にシリアライズされ、JSON からデシリアライズされます。この場合、`quarkus-jackson` が使用されます。"

#~ msgid "To store binary data, use `byte[]`."
#~ msgstr "バイナリーデータを格納するには、`byte[]` を使用します。"

#~ msgid "Redis client metrics are automatically enabled when the application also uses the xref:micrometer.adoc[`quarkus-micrometer`] extension.  Micrometer collects the metrics of all the Redis clients implemented by the application."
#~ msgstr "Redisクライアントメトリクスは、アプリケーションが xref:micrometer.adoc[`quarkus-micrometer`] エクステンションも使用している場合に自動的に有効になります。 Micrometerは、アプリケーションが実装するすべてのRedisクライアントのメトリクスを収集します。"

#~ msgid "Before importing in _prod_ mode, mae sure you configured `quarkus.redis.flush-before-load` accordingly."
#~ msgstr "_prod_ モードでインポートする前に、 `quarkus.redis.flush-before-load` がそのように設定されているようにして下さい。"

#~ msgid "When using `@RedisClientName`, you can omit the `@Inject` annotation."
#~ msgstr "`@RedisClientName` を使用する場合は、`@Inject` アノテーションを省略することができます。"

#~ msgid "Using the high-level clients (data sources)"
#~ msgstr "高レベルのクライアント (データソース) の利用"

#~ msgid "Caching values"
#~ msgstr "値のキャッシュ"

#~ msgid "Using pub/sub"
#~ msgstr "pub/sub の使用"

#~ msgid "As the list of commands which are supported out-of-box by both https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] and https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`] depends on what is available in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`], then there might be case when you need a command which is not (yet) available via https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]."
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`]と  link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`]の両方でサポートされているコマンドのリストは link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]で利用可能なものに依存するため、場合によっては link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] で利用できないコマンドが必要になる場合があります。"

#~ msgid "In such case (if you don't want to wait for the new command to be supported in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]), you can implement it in either https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] or https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`].  In order to do so, you will need:"
#~ msgstr "このような場合（新しいコマンドが link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]でサポートされるのを待ちたくない場合）は、 link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`]または link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`] のいずれかで実装できます。 そのためには、以下のものが必要となります。"

#~ msgid "Generate a new `Command` based on the nodejs code available in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] repository:"
#~ msgstr "link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`]リポジトリで公開されているnodejsのコードに基づいて、新しい `Command` を生成"

#~ msgid "If you don't have a Redis service running locally, you can run Redis in a Docker container:"
#~ msgstr "Redisのサービスをローカルで実行していない場合は、DockerコンテナでRedisを実行することができます。"

#~ msgid "Next, while being in https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] root folder execute:"
#~ msgstr "次に、link:https://github.com/vert-x3/vertx-redis-client[`vertx-redis-client`] ルートフォルダにいる状態で 次を実行します:"

#~ msgid "The above sequence of commands should update the https://github.com/vert-x3/vertx-redis-client/blob/master/src/main/java/io/vertx/redis/client/Command.java[`Command.java`] file, so it includes all the possible commands supported by a particular Redis version."
#~ msgstr "上記の一連のコマンドは、link:https://github.com/vert-x3/vertx-redis-client/blob/master/src/main/java/io/vertx/redis/client/Command.java[`Command.java`]ファイルを更新し、特定のRedisバージョンでサポートされるすべてのコマンドが含まれるようになります。"

#~ msgid "This definition is very important as we will have to use it in the service.  Once we have this `Command` we can start to update the redis-client extension by:"
#~ msgstr "この定義は、サービスの中で使用する必要があるため、非常に重要です。この `Command` ができたら、redis-client extension を以下のように更新していきます。"

#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`] interface, i.e.:"
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClient.java[`RedisClient`]インターフェイスを更新、つまり"

#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientImpl.java[`RedisClientImpl`], i.e.:"
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientImpl.java[`RedisClientImpl`]を更新、すなわち"

#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`] interface, i.e.:"
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/reactive/ReactiveRedisClient.java[`ReactiveRedisClient`]インターフェイスを更新、つまり"

#~ msgid "Updating the https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/ReactiveRedisClientImpl.java[`ReactiveRedisClientImpl`], i.e.:"
#~ msgstr "link:https://github.com/quarkusio/quarkus/blob/main/extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/ReactiveRedisClientImpl.java[`ReactiveRedisClientImpl`]を更新、すなわち"

#~ msgid "Please note that it's using the `MutinyRedis` class which does asynchronous calls to Redis."
#~ msgstr "Redisへの非同期呼び出しを行う `MutinyRedis` クラスを使用していることに注目してください。"
