# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-06-25 08:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/logging.adoc:6
#, no-wrap
msgid "Logging configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:12
msgid "Read about the efficient use of logging API in Quarkus, configuring logging output according to your needs, and using logging adapters to unify the output from other logging APIs."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:16
msgid "Quarkus uses the JBoss Log Manager logging backend for publishing application and framework logs.  Quarkus supports the JBoss Logging API as well as multiple other logging APIs listed in the upcoming section.  These APIs seamlessly integrate with JBoss Log Manager."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:18
msgid "To configure your logging, you will exclusively work within your `application.properties` file."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/logging.adoc:20
#, no-wrap
msgid "Supported logging APIs"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:24
msgid "Applications and components commonly utilize a logging API to log messages during runtime.  The underlying implementation of this API is responsible for storing these messages, typically in a file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:26
msgid "With all logs ultimately directed to the JBoss Log Manager, you have the flexibility to utilize any of the featured logging APIs available:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:28
msgid "link:https://github.com/jboss-logging/jboss-logging[JBoss Logging]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:29
msgid "JDK `java.util.logging` (JUL)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:30
msgid "link:https://www.slf4j.org/[SLF4J]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:31
msgid "link:https://commons.apache.org/proper/commons-logging/[Apache Commons Logging]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:33
msgid "By leveraging JBoss Logging within your application, you eliminate the need for additional logging dependencies."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:34
#, no-wrap
msgid "An example of using the JBoss Logging API to log a message:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:38
#: upstream/_versions/main/guides/logging.adoc:139
#, no-wrap
msgid "import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:43
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:46
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:48
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(ExampleResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:56
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        LOG.info(\"Hello\");\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:60
msgid "While JBoss Logging routes log messages into JBoss Log Manager directly, one of your libraries might rely on a different logging API.  In such cases, you need to use a xref:logging-adapters[logging adapter] to ensure that its log messages are routed to JBoss Log Manager as well."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/logging.adoc:62
#, no-wrap
msgid "Methods of obtaining an application logger"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:65
msgid "In Quarkus, the most common ways to obtain an application logger are by:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:67
msgid "xref:declaring-a-loger-field[Declaring a logger field]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:68
msgid "xref:logging-with-panache[Logging with Panache]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:69
msgid "xref:injection-of-a-configured-logger[Injecting a configured logger]"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/logging.adoc:72
#, no-wrap
msgid "Declaring a logger field"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:75
msgid "With this classic approach, you use a specific API to obtain a logger instance, store it in a static field of a class, and call logging operations upon this instance."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:77
msgid "The same flow can be applied with any of the xref:supported-logging-apis[supported logging APIs]."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:78
#, no-wrap
msgid "An example of storing a logger instance into a static field by using the JBoss Logging API:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:83
#, no-wrap
msgid ""
"package com.example;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:86
#, no-wrap
msgid ""
"public class MyService {\n"
"    private static final Logger log = Logger.getLogger(MyService.class); <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:91
#, no-wrap
msgid ""
"    public void doSomething() {\n"
"        log.info(\"It works!\"); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:93
msgid "Define the logger field."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:94
msgid "Invoke the desired logging methods on the `log` object."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/logging.adoc:97
#, no-wrap
msgid "Logging with Panache"
msgstr "Logging with Panache"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:101
msgid "Quarkus simplifies logging by automatically adding logger fields to classes that use `io.quarkus.logging.Log`.  This eliminates the need for repetitive boilerplate code and enhances logging setup convenience."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:102
#, no-wrap
msgid "An example of simplified logging using static method calls:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:106
#, no-wrap
msgid "package com.example;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:108
#, no-wrap
msgid "import io.quarkus.logging.Log; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:114
#, no-wrap
msgid ""
"class MyService { // <2>\n"
"    public void doSomething() {\n"
"        Log.info(\"Simple!\"); // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:116
msgid "The `io.quarkus.logging.Log` class contains the same methods as JBoss Logging, except that they are `static`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:120
msgid "Note that the class does not declare a logger field.  This is because during application build, a `private static final org.jboss.logging.Logger` field is created automatically in each class that uses the `Log` API.  The fully qualified name of the class that calls the `Log` methods is used as a logger name.  In this example, the logger name would be `com.example.MyService`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:121
msgid "Finally, all calls to `Log` methods are rewritten to regular JBoss Logging calls on the logger field during the application build."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:124
msgid "Only use the `Log` API in application classes, not in external dependencies.  `Log` method calls that are not processed by Quarkus at build time will throw an exception."
msgstr "`Log` APIはアプリケーションクラスでのみ使用し、外部の依存関係では使用しないでください。ビルド時にQuarkusによって処理されていない `Log` メソッド呼び出しは、例外が発生します。"

#. type: Title ===
#: upstream/_versions/main/guides/logging.adoc:127
#, no-wrap
msgid "Injecting a configured logger"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:131
msgid "The last alternative is to inject a configured `org.jboss.logging.Logger` logger instance by using the `@Inject` annotation.  This approach is applicable only for CDI beans."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:134
msgid "You can use `@Inject Logger log`, where the logger gets named after the class you inject it to, or `@Inject @LoggerName(\"...\") Logger log`, where the logger will receive the specified name.  Once injected, you can use the `log` object to invoke logging methods."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:135
#, no-wrap
msgid "An example of two different types of logger injection:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:142
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class SimpleBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:145
#, no-wrap
msgid ""
"   @Inject\n"
"   Logger log; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:148
#, no-wrap
msgid ""
"   @LoggerName(\"foo\")\n"
"   Logger fooLog; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:154
#, no-wrap
msgid ""
"   public void ping() {\n"
"     log.info(\"Simple!\");\n"
"     fooLog.info(\"Goes to _foo_ logger!\");\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:156
msgid "The FQCN of the declaring class is used as a logger name, for example, `org.jboss.logging.Logger.getLogger(SimpleBean.class)` will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:157
msgid "In this case, the name _foo_ is used as a logger name, for example,`org.jboss.logging.Logger.getLogger(\"foo\")` will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:159
msgid "The logger instances are cached internally. Therefore, when a logger is injected, for example, into a `@RequestScoped` bean, it is shared for all bean instances to avoid possible performance penalties associated with logger instantiation."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/logging.adoc:161
#, no-wrap
msgid "Logging levels"
msgstr "ログレベル"

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:163
#, no-wrap
msgid "Log levels used by Quarkus"
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/logging.adoc:166
#, no-wrap
msgid "OFF"
msgstr "OFF"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:167
msgid "A special level to use in configuration in order to turn off logging."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:167
#: upstream/_versions/main/guides/logging.adoc:190
#, no-wrap
msgid "FATAL"
msgstr "FATAL"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:168
msgid "A critical service failure or complete inability to service requests of any kind."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:168
#: upstream/_versions/main/guides/logging.adoc:192
#, no-wrap
msgid "ERROR"
msgstr "ERROR"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:169
msgid "A significant disruption in a request or the inability to service a request."
msgstr "リクエストの大幅な中断、またはリクエストに対応できないこと"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:169
#: upstream/_versions/main/guides/logging.adoc:194
#, no-wrap
msgid "WARN"
msgstr "WARN"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:170
msgid "A non-critical service error or problem that may not require immediate correction."
msgstr "重要ではないサービスのエラーや問題で、すぐに修正する必要がない場合があります"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:170
#: upstream/_versions/main/guides/logging.adoc:196
#: upstream/_versions/main/guides/logging.adoc:198
#: upstream/_versions/main/guides/logging.adoc:289
#, no-wrap
msgid "INFO"
msgstr "INFO"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:171
msgid "Service lifecycle events or important related very low-frequency information."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:171
#: upstream/_versions/main/guides/logging.adoc:200
#: upstream/_versions/main/guides/logging.adoc:270
#: upstream/_versions/main/guides/logging.adoc:290
#, no-wrap
msgid "DEBUG"
msgstr "DEBUG"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:172
msgid "Messages that convey extra information regarding lifecycle or non-request-bound events, useful for debugging."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:172
#: upstream/_versions/main/guides/logging.adoc:202
#, no-wrap
msgid "TRACE"
msgstr "TRACE"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:173
msgid "Messages that convey extra per-request debugging information that may be very high frequency."
msgstr "リクエストごとのデバッグ情報を伝えるメッセージで、非常に高い頻度で送信される可能性があります"

#. type: Labeled list
#: upstream/_versions/main/guides/logging.adoc:173
#, no-wrap
msgid "ALL"
msgstr "ALL"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:174
msgid "A special level to use in configuration to turn on logging for all messages, including custom levels."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:176
msgid "You can also configure the following levels for applications and libraries that use link:https://docs.oracle.com/javase/8/docs/api/java/util/logging/Level.html[`java.util.logging`]:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:178
#: upstream/_versions/main/guides/logging.adoc:194
#, no-wrap
msgid "SEVERE"
msgstr "SEVERE"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:179
msgid "Same as **ERROR**."
msgstr "**ERROR** と同じ"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:179
#: upstream/_versions/main/guides/logging.adoc:196
#, no-wrap
msgid "WARNING"
msgstr "WARNING"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:180
msgid "Same as **WARN**."
msgstr "**WARN** と同じ"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:180
#: upstream/_versions/main/guides/logging.adoc:200
#, no-wrap
msgid "CONFIG"
msgstr "CONFIG"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:181
msgid "Service configuration information."
msgstr "サービス構成情報"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:181
#: upstream/_versions/main/guides/logging.adoc:202
#, no-wrap
msgid "FINE"
msgstr "FINE"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:182
msgid "Same as **DEBUG**."
msgstr "**DEBUG** と同じ"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:182
#: upstream/_versions/main/guides/logging.adoc:204
#, no-wrap
msgid "FINER"
msgstr "FINER"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:183
msgid "Same as **TRACE**."
msgstr "**TRACE** と同じ"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:183
#: upstream/_versions/main/guides/logging.adoc:205
#, no-wrap
msgid "FINEST"
msgstr "FINEST"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:184
msgid "Increased debug output compared to `TRACE`, which might have a higher frequency."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:185
#, no-wrap
msgid "The mapping between the levels"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:188
#, no-wrap
msgid "Numerical level value"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:188
#, no-wrap
msgid "Standard level name"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:190
#, no-wrap
msgid "Equivalent `java.util.logging` (JUL) level name"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:190
#, no-wrap
msgid "1100"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:192
#: upstream/_versions/main/guides/logging.adoc:198
#: upstream/_versions/main/guides/logging.adoc:204
#, no-wrap
msgid "Not applicable"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:192
#, no-wrap
msgid "1000"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:194
#, no-wrap
msgid "900"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:196
#, no-wrap
msgid "800"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:198
#, no-wrap
msgid "700"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:200
#, no-wrap
msgid "500"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:202
#, no-wrap
msgid "400"
msgstr "400"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:204
#, no-wrap
msgid "300"
msgstr "300"

#. type: Title ==
#: upstream/_versions/main/guides/logging.adoc:208
#, no-wrap
msgid "Runtime configuration"
msgstr "実行時設定"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:211
msgid "Runtime logging is configured in the `application.properties` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:213
msgid "Because JBoss Logging is built-in to Quarkus, link:https://quarkus.io/developer-joy/[unified configuration] is provided for all xref:supported-logging-apis[supported logging APIs]."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:214
#, no-wrap
msgid "An example of how you can set the default log level to `INFO` logging and include Hibernate `DEBUG` logs:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:219
#, no-wrap
msgid ""
"quarkus.log.level=INFO\n"
"quarkus.log.category.\"org.hibernate\".level=DEBUG\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:223
msgid "When you set the log level to below `DEBUG`, you must also adjust the minimum log level.  This setting is either global, using the `quarkus.log.min-level` configuration property, or per category:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:227
#, no-wrap
msgid "quarkus.log.category.\"org.hibernate\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:231
msgid "This sets a floor level for which Quarkus needs to generate supporting code.  The minimum log level must be set at build time so that Quarkus can open the door to optimization opportunities where logging on unusable levels can be elided."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:232
#, no-wrap
msgid "An example from native execution:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:235
msgid "Setting `INFO` as the minimum logging level sets lower-level checks, such as `isTraceEnabled`, to `false`.  This identifies code like `if(logger.isDebug()) callMethod();` that will never be executed and mark it as \"dead.\""
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:239
msgid "If you add these properties on the command line, ensure the `\"` character is escaped properly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:242
#, no-wrap
msgid " `-Dquarkus.log.category.\\\"org.hibernate\\\".level=TRACE`\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:246
msgid "All potential properties are listed in the xref:loggingConfigurationReference[logging configuration reference] section."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/logging.adoc:248
#, no-wrap
msgid "Logging categories"
msgstr "ロギングカテゴリ"

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:252
msgid "Logging is done on a per-category basis, with each category being configured independently.  A category configuration recursively applies to all subcategories of that category unless there is a more specific matching sub-category configuration."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:255
msgid "The parent of all logging categories is called the \"root category\".  This category, being the ultimate parent, may contain configuration which applies globally to all other categories. This includes the globally configured handlers and formatters."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:257
msgid "Thus, configurations made under `quarkus.log.console.*`, `quarkus.log.file.*`, and `quarkus.log.syslog.*`, are global and apply for all categories. For more information, see xref:loggingConfigurationReference[Logging configuration reference]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:259
msgid "If you want to configure something extra for a specific category, create a named handler like `quarkus.log.handler.[console|file|syslog].<your-handler-name>.*` and set it up for that category by using `quarkus.log.category.<my-category>.handlers`."
msgstr ""

#. TODO: Add a better, real-world example of a handler configuration for a more specific category. CC DML
#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:263
msgid "An example use case can be a desire to use a different timestamp format for log messages which are saved to a file than the format used for other handlers."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:265
msgid "For further demonstration, see the outputs of the xref:category-named-handlers-example[Attaching named handlers to a category] example."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:268
#: upstream/_versions/main/guides/logging.adoc:288
#, no-wrap
msgid "Property Nam"
msgstr "Property Nam"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:268
#: upstream/_versions/main/guides/logging.adoc:288
#, no-wrap
msgid "Default"
msgstr "デフォルト"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:269
#: upstream/_versions/main/guides/logging.adoc:289
#: upstream/_versions/main/guides/logging.adoc:315
#, no-wrap
msgid "Description"
msgstr "説明"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:269
#, no-wrap
msgid "quarkus.log.category.\"<category-name>\".leve"
msgstr "quarkus.log.category.\"<category-name>\".leve"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:269
#, no-wrap
msgid "INFO footnote:[Some extensions may define customized default log levels for certain categories, in order to reduce log noise by default. Setting the log level in configuration will override any extension-defined log levels.]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:270
#, no-wrap
msgid "The level to use to configure the category named `<category-name>`. The quotes are necessary."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:270
#, no-wrap
msgid "quarkus.log.category.\"<category-name>\".min-leve"
msgstr "quarkus.log.category.\"<category-name>\".min-leve"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:271
#, no-wrap
msgid "The minimum logging level to use to configure the category named `<category-name>`. The quotes are necessary."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:271
#, no-wrap
msgid "quarkus.log.category.\"<category-name>\".use-parent-handler"
msgstr "quarkus.log.category.\"<category-name>\".use-parent-handler"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:271
#, no-wrap
msgid "tru"
msgstr "tru"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:272
#, no-wrap
msgid "Specify whether this logger should send its output to its parent logger."
msgstr "このロガーがその出力を親ロガーに送信するかどうかを指定します。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:272
#, no-wrap
msgid "quarkus.log.category.\"<category-name>\".handlers=[<handler>]"
msgstr "quarkus.log.category.\"<category-name>\".handlers=[<handler>]"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:272
#, no-wrap
msgid "empty footnote:[By default, the configured category gets the same handlers attached as the one on the root logger.]"
msgstr "empty footnote:[デフォルトでは設定されたカテゴリはルートロガーにアタッチされたハンドラーと同じものを受け取ります。]"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:273
#, no-wrap
msgid "The names of the handlers that you want to attach to a specific category."
msgstr "特定のカテゴリにアタッチしたいハンドラーの名前です。"

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:279
msgid "The `.` symbol separates the specific parts in the configuration property.  The quotes in the property name are used as a required escape to keep category specifications, such as `quarkus.log.category.\"io.quarkus.smallrye.jwt\".level=TRACE`, intact."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/logging.adoc:282
#, no-wrap
msgid "Root logger configuration"
msgstr "ルートロガーの設定"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:285
msgid "The root logger category is handled separately, and is configured by using the following properties:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:289
#, no-wrap
msgid "quarkus.log.leve"
msgstr "quarkus.log.leve"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:290
#, no-wrap
msgid "The default log level for every log category."
msgstr "各ログカテゴリのデフォルトのログレベル。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:290
#, no-wrap
msgid "quarkus.log.min-leve"
msgstr "quarkus.log.min-leve"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:291
#, no-wrap
msgid "The default minimum log level for every log category."
msgstr "各ログカテゴリのデフォルトの最小ログレベル。"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:294
msgid "The parent category is examined if no level configuration exists for a given logger category."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:295
msgid "The root logger configuration is used if no specific configurations are provided for the category and any of its parent categories."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:299
msgid "Although the root logger's handlers are usually configured directly via `quarkus.log.console`, `quarkus.log.file` and `quarkus.log.syslog`, it can nonetheless have additional named handlers attached to it using the `quarkus.log.handlers` property."
msgstr "ルートロガーのハンドラは、通常、 `quarkus.log.console` 、 `quarkus.log.file` および `quarkus.log.syslog` によって直接設定されますが、 `quarkus.log.handlers` プロパティを使用して、追加の名前付きハンドラを添付することができます。"

#. type: Title ==
#: upstream/_versions/main/guides/logging.adoc:302
#, no-wrap
msgid "Logging format"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:305
msgid "Quarkus uses a pattern-based logging formatter that generates human-readable text logs by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:308
msgid "You can configure the format for each log handler by using a dedicated property.  For the console handler, the property is `quarkus.log.console.format`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:310
msgid "The logging format string supports the following symbols:"
msgstr "ログフォーマット文字列は、以下のシンボルをサポートしています。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:313
#, no-wrap
msgid "Symbo"
msgstr "Symbo"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:313
#, no-wrap
msgid "Summary"
msgstr "概要"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:315
#, no-wrap
msgid "%%"
msgstr "%%"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:315
#, no-wrap
msgid "`%`"
msgstr "`%`"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:316
#, no-wrap
msgid "Renders a simple `%` character."
msgstr "単に `%` 文字をレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:316
#, no-wrap
msgid "%c"
msgstr "%c"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:316
#, no-wrap
msgid "Category"
msgstr "カテゴリ"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:317
#, no-wrap
msgid "Renders the category name."
msgstr "カテゴリ名をレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:317
#, no-wrap
msgid "%C"
msgstr "%C"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:317
#, no-wrap
msgid "Source clas"
msgstr "ソースクラス"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:318
#, no-wrap
msgid "Renders the source class name.footnote:calc[Format sequences which examine caller information may affect performance]"
msgstr "ソースクラス名をレンダリングします。 footnote:calc[呼び出し元の情報を検査するフォーマットシーケンスはパフォーマンスに影響する可能性があります。]"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:318
#, no-wrap
msgid "%d{xxx}"
msgstr "d{xxx}."

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:318
#, no-wrap
msgid "Dat"
msgstr "Dat"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:319
#, no-wrap
msgid "Renders a date with the given date format string, which uses the syntax defined by `java.text.SimpleDateFormat`."
msgstr "`java.text.SimpleDateFormat` で定義されている構文を使用した、指定した日付書式の文字列で日付をレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:319
#: upstream/_versions/main/guides/logging.adoc:321
#: upstream/_versions/main/guides/logging.adoc:324
#: upstream/_versions/main/guides/logging.adoc:326
#: upstream/_versions/main/guides/logging.adoc:332
#, fuzzy, no-wrap
msgid "%"
msgstr "%"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:319
#, no-wrap
msgid "Exception"
msgstr "Exception"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:320
#, no-wrap
msgid "Renders the thrown exception, if any."
msgstr "投げられた例外があれば、その例外をレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:320
#, no-wrap
msgid "%F"
msgstr "%F"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:320
#, no-wrap
msgid "Source fil"
msgstr "ソースファイル"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:321
#, no-wrap
msgid "Renders the source file name.footnote:calc[]"
msgstr "ソースファイル名をレンダリングします。 footnote:calc[]"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:321
#, no-wrap
msgid "Host nam"
msgstr "ホスト名"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:322
#, no-wrap
msgid "Renders the system simple host name."
msgstr "システムの単純なホスト名をレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:322
#, no-wrap
msgid "%H"
msgstr "%H"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:322
#, no-wrap
msgid "Qualified host nam"
msgstr "完全修飾ホスト名"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:323
#, no-wrap
msgid "Renders the system's fully qualified host name, which may be the same as the simple host name, depending on OS configuration."
msgstr "システムの完全修飾されたホスト名をレンダリングします。OSの設定によっては、単純ホスト名と同じかもしれません。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:323
#, no-wrap
msgid "%i"
msgstr "%i"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:323
#, no-wrap
msgid "Process ID"
msgstr "プロセスID"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:324
#, no-wrap
msgid "Render the current process PID."
msgstr "現在のプロセスPIDをレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:324
#, no-wrap
msgid "Source location"
msgstr "ソースの場所"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:325
#, no-wrap
msgid "Renders the source location information, which includes source file name, line number, class name, and method name.footnote:calc[]"
msgstr "ソースファイル名、行番号、クラス名、メソッド名を含むソース・ロケーション情報をレンダリングします。 footnote:calc[]"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:325
#, no-wrap
msgid "%L"
msgstr "%L"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:325
#, no-wrap
msgid "Source lin"
msgstr "ソースライン"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:326
#, no-wrap
msgid "Renders the source line number.footnote:calc[]"
msgstr "ソース行番号をレンダリングします。 footnote:calc[]"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:326
#, no-wrap
msgid "Full Messag"
msgstr "フルメッセージ"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:327
#, no-wrap
msgid "Renders the log message plus exception (if any)."
msgstr "ログメッセージと例外(もしあれば)を表示します。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:327
#, no-wrap
msgid "%M"
msgstr "%M"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:327
#, no-wrap
msgid "Source metho"
msgstr "ソースメソッド"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:328
#, no-wrap
msgid "Renders the source method name.footnote:calc[]"
msgstr "ソースメソッド名をレンダリングします。 footnote:calc[]"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:328
#, no-wrap
msgid "%n"
msgstr "%n"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:328
#, no-wrap
msgid "Newlin"
msgstr "改行"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:329
#, no-wrap
msgid "Renders the platform-specific line separator string."
msgstr "プラットフォーム固有の改行文字列をレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:329
#, no-wrap
msgid "%N"
msgstr "%N"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:329
#, no-wrap
msgid "Process nam"
msgstr "プロセス名"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:330
#, no-wrap
msgid "Render the name of the current process."
msgstr "現在のプロセスの名前をレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:330
#, no-wrap
msgid "%p"
msgstr "%p"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:330
#, no-wrap
msgid "Leve"
msgstr "レベル"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:331
#, no-wrap
msgid "Render the log level of the message."
msgstr "メッセージのログレベルをレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:331
#, no-wrap
msgid "%r"
msgstr "%r"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:331
#, no-wrap
msgid "Relative tim"
msgstr "相対時間"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:332
#, no-wrap
msgid "Render the time in milliseconds since the start of the application log."
msgstr "アプリケーションログの開始からの時間をミリ秒単位でレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:332
#, no-wrap
msgid "Simple messag"
msgstr "シンプルメッセージ"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:333
#, no-wrap
msgid "Renders just the log message, with no exception trace."
msgstr "ログメッセージのみを表示し、例外のトレースは表示しません。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:333
#, no-wrap
msgid "%t"
msgstr "%t"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:333
#, no-wrap
msgid "Thread nam"
msgstr "スレッド名"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:334
#, no-wrap
msgid "Render the thread name."
msgstr "スレッド名をレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:334
#, no-wrap
msgid "%t{id}"
msgstr "%t{id}"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:334
#, no-wrap
msgid "Thread ID"
msgstr "スレッドID"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:335
#, no-wrap
msgid "Render the thread ID."
msgstr "スレッドIDをレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:335
#, no-wrap
msgid "%z{<zone name>}"
msgstr "%z{<zone name>}"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:335
#, no-wrap
msgid "Time zon"
msgstr "タイムゾーン"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:336
#, no-wrap
msgid "Set the time zone of the output to `<zone name>`."
msgstr "出力のタイムゾーンを `<zone name>` に設定します。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:336
#, no-wrap
msgid "%X{<MDC property name>}"
msgstr "%X{<MDC property name>}"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:336
#, no-wrap
msgid "Mapped Diagnostics Context Valu"
msgstr "マップされた診断コンテキスト値"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:337
#, no-wrap
msgid "Renders the value from Mapped Diagnostics Context"
msgstr "マップされた診断コンテキストの値をレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:337
#, no-wrap
msgid "%X"
msgstr "%X"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:337
#, no-wrap
msgid "Mapped Diagnostics Context Value"
msgstr "マップされた診断コンテキスト値"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:338
#, no-wrap
msgid "Renders all the values from Mapped Diagnostics Context in format {property.key=property.value}"
msgstr "マップされた診断コンテキストのすべての値を {property.key=property.value} 形式でレンダリングします。"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:338
#, no-wrap
msgid "%x"
msgstr "%x"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:338
#, no-wrap
msgid "Nested Diagnostics context value"
msgstr "入れ子になった診断コンテキスト値"

#. type: Table
#: upstream/_versions/main/guides/logging.adoc:339
#, no-wrap
msgid "Renders all the values from Nested Diagnostics Context in format {value1.value2}"
msgstr "ネストされた診断コンテキストからのすべての値を {value1.value2} 形式でレンダリングします。"

#. type: Title ===
#: upstream/_versions/main/guides/logging.adoc:343
#, no-wrap
msgid "Alternative console logging formats"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:346
msgid "The flexibility to change console log format is a useful feature you can use, for example, when the output of the Quarkus application is captured by a service that process and store the log information for later analysis."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/logging.adoc:349
#, no-wrap
msgid "JSON logging format"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:352
msgid "The `quarkus-logging-json` extension may be employed to add support for the JSON logging format and its related configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:354
msgid "Add this extension to your build file as the following snippet illustrates:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:356
#: upstream/_versions/main/guides/logging.adoc:603
#: upstream/_versions/main/guides/logging.adoc:620
#: upstream/_versions/main/guides/logging.adoc:637
#: upstream/_versions/main/guides/logging.adoc:659
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:362
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-logging-json</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:365
#: upstream/_versions/main/guides/logging.adoc:612
#: upstream/_versions/main/guides/logging.adoc:629
#: upstream/_versions/main/guides/logging.adoc:646
#: upstream/_versions/main/guides/logging.adoc:668
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:368
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-logging-json\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:372
msgid "By default, the presence of this extension replaces the output format configuration from the console configuration, and the format string and the color settings (if any) are ignored.  The other console configuration items, including those controlling asynchronous logging and the log level, will continue to be applied."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:375
msgid "For some, it will make sense to use humanly readable (unstructured) logging in dev mode and JSON logging (structured) in production mode.  This can be achieved using different profiles, as shown in the following configuration."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:376
#, no-wrap
msgid "Disable JSON logging in application.properties for dev and test mode"
msgstr "application.properties で dev および test モードに対する JSONロギングを無効にする"

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:381
#, no-wrap
msgid ""
"%dev.quarkus.log.console.json=false\n"
"%test.quarkus.log.console.json=false\n"
msgstr ""

#. type: Title =====
#: upstream/_versions/main/guides/logging.adoc:383
#, no-wrap
msgid "Configuration"
msgstr "設定"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:386
msgid "Configure the JSON logging extension using supported properties to customize its behavior."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:390
msgid "Enabling pretty printing might cause certain processors and JSON parsers to fail."
msgstr "プリティプリントを有効にすると、特定のプロセッサーやJSONパーサーで解釈できなくなる可能性があります。"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:393
#, fuzzy
msgid "Printing the details can be expensive as the values are retrieved from the caller.  The details include the source class name, source file name, source method name, and source line number."
msgstr "詳細の印刷は、呼び出し元から値を取得するため、コストがかかる場合があります。詳細には、ソースクラス名、ソースファイル名、ソースメソッド名、ソース行番号などが含まれます。"

#. type: Title ==
#: upstream/_versions/main/guides/logging.adoc:394
#, no-wrap
msgid "Log handlers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:398
msgid "A log handler is a logging component responsible for the emission of log events to a recipient.  Quarkus includes several different log handlers: **console**, **file**, and **syslog**."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/logging.adoc:399
#, no-wrap
msgid "Console log handler"
msgstr "コンソールログハンドラー"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:402
msgid "The console log handler is enabled by default, and it directs all log events to the application's console, usually the system's `stdout`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:404
msgid "For details about its configuration, see the xref:#quarkus-log-logging-log-config_quarkus.log.console-console-logging[console logging configuration] reference."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/logging.adoc:405
#, no-wrap
msgid "Logging filters"
msgstr "ロギングフィルタ"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:408
msgid "Log handlers, including the console log handler, can be associated with a link:https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/Filter.html[filter] that determines whether a log record should be logged or not."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:411
msgid "To register a logging filter, annotate a (`final`) class that implements `java.util.logging.Filter` with `@io.quarkus.logging.LoggingFilter` and set the `name` property.  The filter is then attached to the appropriate handler using the `filter` configuration property."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:413
msgid "For instance, if you want to filter out log records containing specific text from the console logs, you can define the text as part of the application configuration instead of hardcoding it."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:414
#, no-wrap
msgid "An example of how you can write a filter:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:421
#, no-wrap
msgid ""
"import io.quarkus.logging.LoggingFilter;\n"
"import java.util.logging.Filter;\n"
"import java.util.logging.LogRecord;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:424
#, no-wrap
msgid ""
"@LoggingFilter(name = \"my-filter\")\n"
"public final class TestFilter implements Filter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:426
#, no-wrap
msgid "    private final String part;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:430
#, no-wrap
msgid ""
"    public TestFilter(@ConfigProperty(name = \"my-filter.part\") String part) {\n"
"        this.part = part;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:436
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean isLoggable(LogRecord record) {\n"
"        return !record.getMessage().contains(part);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:438
#, no-wrap
msgid "Then, configure it in the usual Quarkus way, for example, by using `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:442
#, no-wrap
msgid "my-filter.part=TEST\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:444
#, no-wrap
msgid "Lastly, register this filter to the console handler:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:448
#, no-wrap
msgid "quarkus.log.console.filter=my-filter\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/logging.adoc:451
#, no-wrap
msgid "File log handler"
msgstr "ファイルログハンドラー"

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:456
msgid "By default, the file log handler in Quarkus is disabled.  Once enabled, it enables the logging of all events to a file on the application's host, while also supporting log file rotation.  Log file rotation ensures effective log file management over time by maintaining a specified number of backup log files, while keeping the primary log file up-to-date and manageable."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:458
msgid "For details about its configuration, see the xref:#quarkus-log-logging-log-config_quarkus.log.file-file-logging[file logging configuration] reference."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/logging.adoc:459
#, no-wrap
msgid "Syslog log handler"
msgstr "Syslog ログハンドラー"

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:463
msgid "The syslog handler in Quarkus follows the link:https://en.wikipedia.org/wiki/Syslog[Syslog] protocol, which is used to send log messages on Unix-like systems.  It utilizes the protocol defined in link:https://tools.ietf.org/html/rfc5424[RFC 5424]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:466
msgid "By default, the syslog handler is disabled.  When enabled, it sends all log events to a syslog server, typically the local syslog server for the application."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:468
msgid "For details about its configuration, see the xref:#quarkus-log-logging-log-config_quarkus.log.syslog-syslog-logging[Syslog logging configuration] reference."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/logging.adoc:470
#, no-wrap
msgid "Logging configurations examples"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:473
msgid "This chapter provides examples of frequently used logging configurations."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:474
#, no-wrap
msgid "Console DEBUG logging except for Quarkus logs (INFO), no color, shortened time, shortened category prefixes"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:480
#, no-wrap
msgid ""
"quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n\n"
"quarkus.log.console.level=DEBUG\n"
"quarkus.console.color=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:482
#, no-wrap
msgid "quarkus.log.category.\"io.quarkus\".level=INFO\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:486
msgid "If you are adding these properties via command line make sure `\"` is escaped.  For example `-Dquarkus.log.category.\\\"io.quarkus\\\".level=DEBUG`."
msgstr "コマンドラインでこれらのプロパティーを追加する場合は、 `\"` がエスケープされていることを確認してください。例えば `-Dquarkus.log.category.\\\"io.quarkus\\\".level=DEBUG` のようにします。"

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:488
#, no-wrap
msgid "File TRACE logging configuration"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:500
#, no-wrap
msgid ""
"quarkus.log.file.enable=true\n"
"# Send output to a trace.log file under the /tmp directory\n"
"quarkus.log.file.path=/tmp/trace.log\n"
"quarkus.log.file.level=TRACE\n"
"quarkus.log.file.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n\n"
"# Set 2 categories (io.quarkus.smallrye.jwt, io.undertow.request.security) to TRACE level\n"
"quarkus.log.min-level=TRACE\n"
"quarkus.log.category.\"io.quarkus.smallrye.jwt\".level=TRACE\n"
"quarkus.log.category.\"io.undertow.request.security\".level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:503
msgid "As we don't change the root logger, console log will only contain `INFO` or higher order logs."
msgstr "ルートロガーを変更しないので、コンソールログには `INFO` 以上の順位のログしか表示されません。"

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:505
#, no-wrap
msgid "Named handlers attached to a category"
msgstr "カテゴリにアタッチされた名前付きハンドラー"

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:519
#, no-wrap
msgid ""
"# Send output to a trace.log file under the /tmp directory\n"
"quarkus.log.file.path=/tmp/trace.log\n"
"quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n\n"
"# Configure a named handler that logs to console\n"
"quarkus.log.handler.console.\"STRUCTURED_LOGGING\".format=%e%n\n"
"# Configure a named handler that logs to file\n"
"quarkus.log.handler.file.\"STRUCTURED_LOGGING_FILE\".enable=true\n"
"quarkus.log.handler.file.\"STRUCTURED_LOGGING_FILE\".format=%e%n\n"
"# Configure the category and link the two named handlers to it\n"
"quarkus.log.category.\"io.quarkus.category\".level=INFO\n"
"quarkus.log.category.\"io.quarkus.category\".handlers=STRUCTURED_LOGGING,STRUCTURED_LOGGING_FILE\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:522
#, no-wrap
msgid "Named handlers attached to the root logger"
msgstr "ルートロガーにアタッチされた名前付きハンドラー"

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:530
#, no-wrap
msgid ""
"# configure a named file handler that sends the output to 'quarkus.log'\n"
"quarkus.log.handler.file.CONSOLE_MIRROR.enable=true\n"
"quarkus.log.handler.file.CONSOLE_MIRROR.path=quarkus.log\n"
"# attach the handler to the root logger\n"
"quarkus.log.handlers=CONSOLE_MIRROR\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/logging.adoc:532
#, no-wrap
msgid "Centralized log management"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:535
msgid "To send logs to a centralized tool such as Graylog, Logstash, or Fluentd, see the Quarkus xref:centralized-log-management.adoc[Centralized log management] guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/logging.adoc:536
#, no-wrap
msgid "How to configure logging for `@QuarkusTest`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:540
msgid "To configure logging for your `@QuarkusTest`, ensure that you configure the `maven-surefire-plugin` accordingly.  Specifically, you need to set the appropriate `LogManager` by using the `java.util.logging.manager` system property."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/logging.adoc:541
#, no-wrap
msgid "Example Configuration"
msgstr "設定例"

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:559
#, no-wrap
msgid ""
"<build>\n"
"  <plugins>\n"
"    <plugin>\n"
"      <artifactId>maven-surefire-plugin</artifactId>\n"
"      <version>${surefire-plugin.version}</version>\n"
"      <configuration>\n"
"        <systemPropertyVariables>\n"
"          <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager> <1>\n"
"          <quarkus.log.level>DEBUG</quarkus.log.level>  <2>\n"
"          <maven.home>${maven.home}</maven.home>\n"
"        </systemPropertyVariables>\n"
"      </configuration>\n"
"    </plugin>\n"
"  </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:561
msgid "Make sure the `org.jboss.logmanager.LogManager` is used."
msgstr "`org.jboss.logmanager.LogManager` が使用されていることを確認してください。"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:562
msgid "Enable debug logging for all logging categories."
msgstr "すべてのロギングカテゴリのデバッグロギングを有効にします。"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:564
msgid "For Gradle, add the following configuration to the `build.gradle` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:570
#, no-wrap
msgid ""
"test {\n"
"\tsystemProperty \"java.util.logging.manager\", \"org.jboss.logmanager.LogManager\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:573
#, fuzzy
msgid "See also xref:getting-started-testing.adoc#test-from-ide[Running `@QuarkusTest` from an IDE]."
msgstr "xref:getting-started-testing.adoc#test-from-ide[IDEから `@QuarkusTest` を実行] する」も参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/logging.adoc:575
#, no-wrap
msgid "Logging adapters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:578
msgid "Quarkus relies on the JBoss Logging library for all the logging requirements."
msgstr "Quarkusは、すべてのロギング要件をJBoss Loggingライブラリに依存しています。"

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:580
msgid "Suppose you use libraries that depend on other logging libraries, such as Apache Commons Logging, Log4j, or SLF4J. In that case, you need to exclude them from the dependencies and use one of the JBoss Logging adapters."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:582
msgid "This is especially important when building native executables, as you could encounter issues similar to the following when compiling the native executable:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:586
#, no-wrap
msgid "Caused by java.lang.ClassNotFoundException: org.apache.commons.logging.impl.LogFactoryImpl\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:589
msgid "The logging implementation is not included in the native executable, but you can resolve this issue using JBoss Logging adapters."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:591
msgid "These adapters are available for popular open-source logging components, as explained in the next chapter."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/logging.adoc:592
#, no-wrap
msgid "Add a logging adapter to your application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:595
msgid "For each logging API that is not `jboss-logging`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:597
msgid "Add a logging adapter library to ensure that messages logged through these APIs are routed to the JBoss Log Manager backend."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:599
msgid "This step is unnecessary for libraries that are dependencies of a Quarkus extension where the extension handles it automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:601
msgid "Apache Commons Logging:"
msgstr "Apache Commons Logging:"

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:609
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.jboss.logging</groupId>\n"
"    <artifactId>commons-logging-jboss-logging</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:615
#, no-wrap
msgid "implementation(\"org.jboss.logging:commons-logging-jboss-logging\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:618
msgid "Log4j:"
msgstr "Log4j:"

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:626
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.jboss.logmanager</groupId>\n"
"    <artifactId>log4j-jboss-logmanager</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:632
#, no-wrap
msgid "implementation(\"org.jboss.logmanager:log4j-jboss-logmanager\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:635
msgid "Log4j 2:"
msgstr "Log4j 2:"

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:643
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.jboss.logmanager</groupId>\n"
"    <artifactId>log4j2-jboss-logmanager</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:649
#, no-wrap
msgid "implementation(\"org.jboss.logmanager:log4j2-jboss-logmanager\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/logging.adoc:654
msgid "Do not include any Log4j dependencies because the `log4j2-jboss-logmanager` library contains all that is needed to use Log4j as a logging implementation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:657
msgid "SLF4J:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:665
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.jboss.slf4j</groupId>\n"
"    <artifactId>slf4j-jboss-logmanager</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/logging.adoc:671
#, no-wrap
msgid "implementation(\"org.jboss.slf4j:slf4j-jboss-logmanager\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/logging.adoc:674
msgid "Verify whether the logs generated by the added library adhere to the same format as the other Quarkus logs."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/logging.adoc:676
#, no-wrap
msgid "Logging configuration reference"
msgstr "ロギング設定のリファレンス"

#~ msgid "Configuring Logging"
#~ msgstr "ロギングの設定"

#~ msgid "This guide explains logging and how to configure it."
#~ msgstr "このガイドでは、ロギングとその設定方法について説明します。"

#~ msgid "Internally, Quarkus uses JBoss Log Manager and the JBoss Logging facade.  You can use the JBoss Logging facade inside your code as it's already provided, or any of the supported Logging API listed in the next chapter as Quarkus will send them to JBoss Log Manager."
#~ msgstr "内部的には、QuarkusはJBoss Log ManagerとJBoss Logging ファサードを使用します。 JBoss Logging ファサードはすでに提供されているので、コード内部で使用することができますが、QuarkusがJBoss Log Managerに送信するため、次の章でリストアップされているサポートされたロギングAPIのいずれかを使用することもできます。"

#~ msgid "All the logging configuration will then be done inside your `application.properties`."
#~ msgstr "すべてのロギング設定は、 `application.properties` の中で実施されます。"

#~ msgid "Supported Logging APIs"
#~ msgstr "サポートされているロギング API"

#~ msgid "Applications and components may use any of the following APIs for logging, and the logs will be merged:"
#~ msgstr "アプリケーションやコンポーネントは、以下のいずれかのAPIを使用してログを出力することができ、ログはマージされます。"

#~ msgid "JDK `java.util.logging` (also called JUL)"
#~ msgstr "JDK `java.util.logging` (JUL とも呼ばれます)"

#~ msgid "https://github.com/jboss-logging/jboss-logging[JBoss Logging]"
#~ msgstr "link:https://github.com/jboss-logging/jboss-logging[JBoss ロギング]"

#~ msgid "https://www.slf4j.org/[SLF4J]"
#~ msgstr "link:https://www.slf4j.org/[SLF4J]"

#~ msgid "https://commons.apache.org/proper/commons-logging/[Apache Commons Logging]"
#~ msgstr "link:https://commons.apache.org/proper/commons-logging/[Apache Commons Logging]"

#~ msgid "Internally Quarkus uses JBoss Logging; you can also use it inside your application so that no other dependencies should be added for your logs."
#~ msgstr "Quarkusは内部的にJBoss Loggingを使用しています。アプリケーションの内部で使用することもできるので、ログに他の依存関係を追加する必要はありません。"

#~ msgid "If you use JBoss Logging but one of your libraries uses a different logging API, you may need to configure a xref:logging-adapters[logging adapter]."
#~ msgstr "JBoss Logging を使用しているが、ライブラリの 1 つが異なるロギング API を使用している場合、 xref:logging-adapters[ロギングアダプター] を構成する必要がある場合があります。"

#~ msgid "Instead of declaring a `Logger` field, you can use the simplified logging API:"
#~ msgstr "`Logger` フィールドを宣言する代わりに、簡略化されたロギング API を使用することができます。"

#~ msgid "The `io.quarkus.logging.Log` class mirrors the JBoss Logging API, except all methods are `static`."
#~ msgstr "`io.quarkus.logging.Log` クラスは、すべてのメソッドが `static` であることを除き、JBoss Logging API をミラーリングします。"

#~ msgid "Note that the class doesn't declare a logger field.  This is because during application build, a `private static final org.jboss.logging.Logger` field is created automatically, in each class that uses the `Log` API.  The fully qualified name of the class that calls the `Log` methods is used as a logger name.  In this example, the logger name would be `com.example.MyService`."
#~ msgstr "なお、このクラスではloggerフィールドを宣言していません。これは、アプリケーションのビルド時に、 `Log` API を使用する各クラスに `private static final org.jboss.logging.Logger` フィールドが自動的に作成されるためです。 `Log` メソッドを呼び出したクラスの完全修飾名がロガー名として使用されます。この例では、ロガー名は `com.example.MyService` となります。"

#~ msgid "Finally, during application build, all calls to `Log` methods are rewritten to regular JBoss Logging calls on the logger field."
#~ msgstr "最後に、アプリケーションのビルド時に、 `Log` メソッドへのすべての呼び出しが、logger フィールド上の通常の JBoss Logging 呼び出しに書き換えられます。"

#~ msgid "Injecting a Logger"
#~ msgstr "Loggerの挿入"

#~ msgid "You can also inject a configured `org.jboss.logging.Logger` instance in your beans and resource classes."
#~ msgstr "また、設定済みの `org.jboss.logging.Logger` インスタンスを Bean やリソースクラスに注入することもできます。"

#~ msgid "The FQCN of the declaring class is used as a logger name, i.e. `org.jboss.logging.Logger.getLogger(SimpleBean.class)` will be used."
#~ msgstr "`org.jboss.logging.Logger.getLogger(SimpleBean.class)` 宣言したクラスのFQCNがロガー名として使用されます。"

#~ msgid "In this case, the name _foo_ is used as a logger name, i.e. `org.jboss.logging.Logger.getLogger(\"foo\")` will be used."
#~ msgstr "`org.jboss.logging.Logger.getLogger(\"foo\")` この場合、ロガー名として _foo_ という名前が使われます。"

#~ msgid "The logger instances are cached internally. Therefore, a logger injected e.g. into a `@RequestScoped` bean is shared for all bean instances to avoid possible performance penalty associated with logger instantiation."
#~ msgstr "ロガーインスタンスは内部的にキャッシュされます。したがって、例えば `@RequestScoped` Bean に注入されたロガーは、ロガーのインスタンス化に関連する可能性のあるパフォーマンスのペナルティを回避するために、すべての Bean インスタンスで共有されます。"

#~ msgid "What about Apache Log4j ?"
#~ msgstr "Apache Log4j はどうですか?"

#~ msgid "link:https://logging.apache.org/log4j/2.x/[Log4j] is a logging implementation: it contains a logging backend and a logging facade.  Quarkus uses the JBoss Log Manager backend, so you will need to include the `log4j2-jboss-logmanager` library to route Log4j logs to JBoss Log Manager."
#~ msgstr "link:https://logging.apache.org/log4j/2.x/[Log4j] はロギングの実装の一つです: ロギングバックエンドとロギングファサードが含まれています。QuarkusはJBoss Log Managerバックエンドを使用するため、Log4jログをJBoss Log Managerにルーティングするためには `log4j2-jboss-logmanager` ライブラリをインクルードする必要があります。"

#~ msgid "This is the library needed for Log4j version 2; if you use the legacy Log4j version 1 you need to use `log4j-jboss-logmanager` instead."
#~ msgstr "これはLog4Jのバージョン2に必要なライブラリです。もしレガシーなLog4Jのバージョン1を使用している場合は、代わりに `log4j-jboss-logmanager` を使用する必要があります。"

#~ msgid "You can then use the Log4j API inside your application."
#~ msgstr "これで、アプリケーション内でLog4J APIを使用することができます。"

#~ msgid "Do not include any Log4j dependencies. The `log4j2-jboss-logmanager` library includes what's needed to use Log4j as a logging facade."
#~ msgstr "Log4jの依存関係を含めないでください。 `log4j2-jboss-logmanager` ライブラリは、Log4j をロギング・ファサードとして使用するために必要なものを含んでいます。"

#~ msgid "These are the log levels used by Quarkus:"
#~ msgstr "これらはQuarkusで使用されているログレベルです。"

#~ msgid "Special level to turn off logging."
#~ msgstr "ロギングをオフにするための特別なレベル"

#~ msgid "A critical service failure/complete inability to service requests of any kind."
#~ msgstr "致命的なサービス障害/いかなる種類のサービス要求にも完全に対応できないこと"

#~ msgid "Service lifecycle events or important related very-low-frequency information."
#~ msgstr "サービスのライフサイクルイベントまたは重要な関連する非常に低頻度の情報"

#~ msgid "Messages that convey extra information regarding lifecycle or non-request-bound events which may be helpful for debugging."
#~ msgstr "デバッグに役立つかもしれない、ライフサイクルまたは非リクエストバウンドイベントに関する余分な情報を伝えるメッセージ"

#~ msgid "Special level for all messages including custom levels."
#~ msgstr "カスタムレベルを含むすべてのメッセージのための特別なレベル"

#~ msgid "In addition, the following levels may be configured for applications and libraries using link:https://docs.oracle.com/javase/8/docs/api/java/util/logging/Level.html[`java.util.logging`]:"
#~ msgstr "加えて、 link:https://docs.oracle.com/javase/8/docs/api/java/util/logging/Level.html[`java.util.logging`] を利用して、アプリケーションとライブラリに対して以下のレベルを設定することができます。"

#~ msgid "Event more debugging information than `TRACE`, maybe with even higher frequency."
#~ msgstr "イベント `TRACE` よりも多くのデバッグ情報、さらに高頻度である可能性があります"

#~ msgid "Run time logging is configured in the `application.properties` file, for example, to set the default log level to `INFO` logging and include Hibernate `DEBUG` logs:"
#~ msgstr "実行時ロギングは `application.properties` ファイルで設定します。例えばデフォルトのログレベルを `INFO` ロギングに設定し、Hibernate の `DEBUG` ログを含めるようにします。"

#~ msgid "Setting a log level below `DEBUG` requires the minimum log level to be adjusted, either globally via the `quarkus.log.min-level` property or per-category as shown in the example above, as well as adjusting the log level itself."
#~ msgstr "ログレベルを `DEBUG` より下に設定するには、ログレベル自体を調整するだけでなく、グローバルに `quarkus.log.min-level` プロパティーを介して、または上記の例のようにカテゴリごとに、最小ログレベルを調整する必要があります。"

#~ msgid "Minimum logging level sets a floor level that Quarkus will be needed to potentially generate, opening the door to optimization opportunities.  As an example, in native execution the minimum level enables lower level checks (e.g. `isTraceEnabled`) to be folded to `false`, resulting in dead code elimination for code that will never to be executed."
#~ msgstr "最小ロギングレベルは、Quarkusが潜在的に生成するために必要となるフロアレベルを設定し、最適化の機会の扉を開きます。例えば、ネイティブ実行では、最小レベルを設定することで、低レベルのチェック(例: `isTraceEnabled` )を `false` に折りたたむことができ、結果として、実行されることのないコードのデッドコードを排除することができます。"

#, fuzzy
#~ msgid "All possible properties are listed in the xref:loggingConfigurationReference[logging configuration reference] section."
#~ msgstr "可能なすべてのプロパティは、 xref:loggingConfigurationReference[ロギング設定リファレンス] セクションに記載されています。"

#, fuzzy
#~ msgid "If you are adding these properties by using the command line, make sure `\"` is escaped.  For example `-Dquarkus.log.category.\\\"org.hibernate\\\".level=TRACE`."
#~ msgstr "コマンドラインを使用してこれらのプロパティを追加する場合、 `\"` がエスケープされていることを確認してください。例えば、 `-Dquarkus.log.category.\\\"org.hibernate\\\".level=TRACE` ."

#, fuzzy
#~ msgid "Logging is done on a per-category basis.  Each category can be independently configured.  A configuration which applies to a category will also apply to all sub-categories of that category, unless there is a more specific matching sub-category configuration.  For every category the same settings that are configured on ( console / file / syslog ) apply.  These can also be overridden by attaching one or more named handlers to a category.  See example in the xref:category-named-handlers-example[Named handlers attached to a category] output."
#~ msgstr "ログの記録はカテゴリーごとに行われます。各カテゴリは独立して設定することができます。あるカテゴリーに適用される設定は、そのカテゴリーのすべてのサブカテゴリーにも適用されますが、より具体的に一致するサブカテゴリーの設定がある場合は除きます。各カテゴリーには、（コンソール／ファイル／シスログ）で設定されたものと同じ設定が適用されます。これらは、1つまたは複数の名前付きハンドラをカテゴリにアタッチすることで上書きすることもできます。 xref:category-named-handlers-example[カテゴリーに付けられた名前付きハンドラ] 」の出力例を参照してください。"

#~ msgid "INFO footnote:[Some extensions may define customized default log levels for certain categories, in order to reduce log noise by default.  Setting the log level in configuration will override any extension-defined log levels.]"
#~ msgstr "INFO footnote:[いくつかのエクステンションは、ログノイズを削減するために、特定のカテゴリに対してカスタマイズされたデフォルトログレベルを定義しているかもしれません。コンフィグレーションでのログレベル設定は、エクステンション定義のログレベルをオーバーライドします。]"

#~ msgid "The level to use to configure the category named `<category-name>`.  The quotes are necessary."
#~ msgstr "`<category-name>` という名前のカテゴリを設定するために使用するレベル。クオートが必要です。"

#~ msgid "The minimum logging level to use to configure the category named `<category-name>`.  The quotes are necessary."
#~ msgstr "`<category-name>` という名前のカテゴリを設定するために使用する最小ロギングレベル。クオートが必要です。"

#, fuzzy
#~ msgid "The quotes shown in the property name are required as categories normally contain '.', which must be escaped.  See the example in xref:category-example[File TRACE Logging Configuration]."
#~ msgstr "プロパティ名に表示される引用符は、通常カテゴリが'.'を含むため、エスケープする必要があります。 xref:category-example[File TRACE Logging Configuration] 」の例を参照してください。"

#~ msgid "The root logger category is handled separately, and is configured via the following properties:"
#~ msgstr "ルート ロガー カテゴリは個別に処理され、次のプロパティーで設定されます。"

#~ msgid "If no level configuration exists for a given logger category, the enclosing (parent) category is examined. If no categories are configured which enclose the category in question, then the root logger configuration is used."
#~ msgstr "与えられたロガー カテゴリにレベル設定が存在しない場合、包含(親)カテゴリが検査されます。対象のカテゴリを囲むカテゴリが設定されていない場合、ルート ロガー設定が使用されます。"

#~ msgid "Logging Format"
#~ msgstr "ログフォーマット"

#~ msgid "By default, Quarkus uses a pattern-based logging formatter that generates human-readable text logs."
#~ msgstr "デフォルトでは、Quarkusはパターンベースのログフォーマッタを使用して、人間が読めるテキストログを生成します。"

#~ msgid "You can configure the format for each log handler via a dedicated property.  For the console handler, the property is `quarkus.log.console.format`."
#~ msgstr "各ログハンドラーのフォーマットは、専用のプロパティーで設定することができます。コンソールハンドラーの場合、プロパティーは `quarkus.log.console.format` です。"

#~ msgid "Alternative Console Logging Formats"
#~ msgstr "コンソールログの代替フォーマット"

#~ msgid "It is possible to change the output format of the console log. This can be useful in environments where the output of the Quarkus application is captured by a service which can, for example, process and store the log information for later analysis."
#~ msgstr "コンソールログの出力形式を変更することができます。これは、Quarkusアプリケーションの出力がサービスによってキャプチャされ、例えば、後で分析するためにログ情報を処理して保存することができる環境で有用です。"

#~ msgid "JSON Logging Format"
#~ msgstr "JSON ログフォーマット"

#~ msgid "In order to configure the JSON logging format, the `quarkus-logging-json` extension may be employed.  Add this extension to your build file as the following snippet illustrates:"
#~ msgstr "JSON ログフォーマットを設定するために、 `quarkus-logging-json` エクステンションモジュールを使用することができます。次のスニペットが示すように、このエクステンションをアプリケーションPOMに追加してください。"

#, fuzzy
#~ msgid "The presence of this extension will, by default, replace the output format configuration from the console configuration.  This means that the format string and the color settings (if any) will be ignored.  The other console configuration items, including those controlling asynchronous logging and the log level, will continue to be applied."
#~ msgstr "このエクステンションがあると、デフォルトでは、コンソール設定から出力フォーマットの設定を置き換えることになります。つまり、フォーマット文字列と色の設定（もしあれば）は無視されます。非同期ロギングやログレベルを制御する項目を含む、他のコンソール設定項目は引き続き適用されます。"

#~ msgid "For some, it will make sense to use logging that is humanly readable (unstructured) in dev mode and JSON logging (structured) in production mode. This can be achieved using different profiles, as shown in the following configuration."
#~ msgstr "いくつかの場合、devモードでは人間が読める(構造化されていない)ロギングを使用し、本番モードではJSONロギング(構造化されている)を使用することが理にかなっているでしょう。これは、以下の設定で示されているように、異なるプロファイルを使用して達成することができます。"

#~ msgid "The JSON logging extension can be configured in various ways.  The following properties are supported:"
#~ msgstr "JSON ロギングエクステンションは、さまざまな方法で設定することができます。以下のプロパティーがサポートされています。"

#~ msgid "Log Handlers"
#~ msgstr "ログハンドラー"

#~ msgid "A log handler is a logging component responsible for the emission of log events to a recipient.  Quarkus comes with three different log handlers: **console**, **file** and **syslog**."
#~ msgstr "ログハンドラーは、受信者へのログイベントの送信を担当するロギングコンポーネントです。Quarkusには、 **コンソール** 、 **ファイル** 、 **syslog** という3つの異なるログハンドラーが用意されています。"

#~ msgid "The console log handler is enabled by default.  It outputs all log events to the console of your application (typically to the system's `stdout`)."
#~ msgstr "コンソールログハンドラーはデフォルトで有効になっています。これはすべてのログイベントをアプリケーションのコンソールに出力します (通常はシステムの `stdout` )。"

#~ msgid "For details of its configuration options, see link:#quarkus-log-logging-log-config_quarkus.log.console-console-logging[the Console Logging configuration reference]."
#~ msgstr "その設定オプションの詳細については、link:#quarkus-log-logging-log-config_quarkus.log.console-console-logging[コンソール ロギング設定リファレンス] を参照してください。"

#~ msgid "Log handlers (like the console log handler) can have a link:https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/Filter.html[filter] associated with them, whose purpose is to determine whether a record should actually be logged or not."
#~ msgstr "ログハンドラ（コンソールログハンドラのような）は、レコードが実際にログに記録されるべきかどうかを決定する目的で、それらに関連する link:https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/Filter.html[フィルタ] を持つことができます。"

#~ msgid "These filters are registered by placing the `@io.quarkus.logging.LoggingFilter` annotation on a (`final`) class that implements `java.util.logging.Filter` and setting the `name` property."
#~ msgstr "これらのフィルタは、 `java.util.logging.Filter` を実装した ( `final` ) クラスに `@io.quarkus.logging.LoggingFilter` アノテーションを配置し、 `name` プロパティを設定することで登録されます。"

#~ msgid "Finally, the filter is attached using the `filter` configuration property of the appropriate handler."
#~ msgstr "最後に、適切なハンドラの `filter` 設定プロパティを使用して、フィルタがアタッチされます。"

#~ msgid "Let's say for example that we wanted to filter out logging records that contained a part of text from the console logs.  The text itself is part of the application configuration and is not hardcoded.  We could write a filter like so:"
#~ msgstr "例えば、コンソールログからテキストの一部を含むロギングレコードをフィルタリングしたいとしましょう。テキスト自体はアプリケーションの設定の一部であり、ハードコードされていません。このようなフィルタを書くことができます。"

#~ msgid "and configure it in the usual Quarkus way (for example using `application.properties`) like so:"
#~ msgstr "そして、通常のQuarkusの方法で（たとえば、 `application.properties` を使用して）、次のように設定します:"

#~ msgid "And we would register this filter to the console handler like so:"
#~ msgstr "そして、このフィルタをコンソールハンドラにこのように登録します:"

#~ msgid "The file log handler is disabled by default. It outputs all log events to a file on the application's host.  It supports log file rotation."
#~ msgstr "ファイルログハンドラーはデフォルトでは無効になっています。すべてのログイベントをアプリケーションのホスト上のファイルに出力します。ログファイルのローテーションをサポートしています。"

#~ msgid "For details of its configuration options, see link:#quarkus-log-logging-log-config_quarkus.log.file-file-logging[the File Logging configuration reference]."
#~ msgstr "その設定オプションの詳細については、link:#quarkus-log-logging-log-config_quarkus.log.file-file-logging[ファイル ロギング設定リファレンス] を参照してください。"

#~ msgid "link:https://en.wikipedia.org/wiki/Syslog[Syslog] is a protocol for sending log messages on Unix-like systems using a protocol defined by link:https://tools.ietf.org/html/rfc5424[RFC 5424]."
#~ msgstr "link:https://en.wikipedia.org/wiki/Syslog[Syslogは] 、 link:https://tools.ietf.org/html/rfc5424[RFC 5424] で定義されたプロトコルを用いてUnix系システム上でログメッセージを送信するためのプロトコルです。"

#~ msgid "The syslog handler sends all log events to a syslog server (by default, the syslog server that is local to the application).  It is disabled by default."
#~ msgstr "syslog ハンドラーは、すべてのログイベントを syslog サーバー (デフォルトでは、アプリケーションのローカルにある syslog サーバー) に送信します。デフォルトでは無効になっています。"

#~ msgid "For details of its configuration options, see link:#quarkus-log-logging-log-config_quarkus.log.syslog-syslog-logging[the Syslog Logging configuration reference]."
#~ msgstr "その設定オプションの詳細については、link:#quarkus-log-logging-log-config_quarkus.log.syslog-syslog-logging[Syslog Logging設定リファレンス] を参照してください。"

#~ msgid "Examples"
#~ msgstr "サンプル"

#~ msgid "Console DEBUG Logging except for Quarkus logs (INFO), No color, Shortened Time, Shortened Category Prefixes"
#~ msgstr "コンソール DEBUG ログ、Quarkusのログ(INFO)を除く、カラーなし、時間短縮、カテゴリプレフィックス短縮"

#~ msgid "File TRACE Logging Configuration"
#~ msgstr "ファイル TRACE ログ設定"

#~ msgid "Centralized Log Management"
#~ msgstr "集中ログ管理"

#~ msgid "If you want to send your logs to a centralized tool like Graylog, Logstash or Fluentd, you can follow the xref:centralized-log-management.adoc[Centralized log management guide]."
#~ msgstr "ログをGraylog、Logstash、Fluentdなどの集中型ツールに送信したい場合は、 link:centralized-log-management[集中型ログ管理ガイド] に従ってください。"

#~ msgid "How to Configure Logging for `@QuarkusTest`"
#~ msgstr "`@QuarkusTest` のログ設定方法 "

#~ msgid "If you want to configure logging for your `@QuarkusTest`, don't forget to set up the `maven-surefire-plugin` accordingly.  In particular, you need to set the appropriate `LogManager` using the `java.util.logging.manager` system property."
#~ msgstr "`@QuarkusTest` のロギングを設定したい場合は、それに応じて `maven-surefire-plugin` を設定することを忘れないでください。特に、 `java.util.logging.manager` system プロパティーを使用して適切な `LogManager` を設定する必要があります。"

#~ msgid "If you are using Gradle, add this to your `build.gradle`:"
#~ msgstr "Gradleを使用している場合は、 `build.gradle` にこれを追加します。"

#~ msgid "Logging Adapters"
#~ msgstr "ロギングアダプター"

#~ msgid "If you are using libraries that have dependencies on other logging libraries such as Apache Commons Logging, Log4j or SLF4J, you need to exclude them from the dependencies and use one of the adapters provided by JBoss Logging."
#~ msgstr "Apache Commons Logging、Log4j、Slf4j などの他のロギングライブラリに依存関係があるライブラリを使用している場合は、それらを依存関係から除外し、JBoss Logging が提供するアダプターのいずれかを使用する必要があります。"

#~ msgid "This is especially important when building native executables as you could encounter issues similar to the following when compiling the native executable:"
#~ msgstr "ネイティブ実行可能ファイルをコンパイルする際に以下のような問題が発生する可能性があるため、ネイティブ実行可能ファイルをビルドする際には特に重要です。"

#~ msgid "This is due to the logging implementation not being included in the native executable.  Using the JBoss Logging adapters will solve this problem."
#~ msgstr "これは、ロギングの実装がネイティブ実行可能ファイルに含まれていないことが原因です。JBoss Logging アダプターを使用することで、この問題は解決されます。"

#~ msgid "These adapters are available for most of the common Open Source logging components."
#~ msgstr "これらのアダプターは、Apache Commons Logging のような一般的なオープンソースのロギングコンポーネントのほとんどに対して存在します。"

#~ msgid "And SLF4J:"
#~ msgstr "そして Slf4j:"

#~ msgid "This is not needed for libraries that are dependencies of a Quarkus extension as the extension will take care of this for you."
#~ msgstr "これは、Quarkusエクステンションの依存関係にあるライブラリには必要ありません。"
