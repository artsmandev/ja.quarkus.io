# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-06-11 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/container-image.adoc:6
#, no-wrap
msgid "Container Images"
msgstr "コンテナーイメージ"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:12
msgid "Quarkus provides extensions for building (and pushing) container images. Currently, it supports:"
msgstr "Quarkus は、コンテナーイメージをビルド (およびプッシュ) するためのエクステンションを提供しています。現在は以下をサポートしています。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:14
#, fuzzy
msgid "xref:jib[Jib]"
msgstr "xref:jib[ジブ]"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:15
#, fuzzy
msgid "xref:docker[Docker]"
msgstr "xref:docker[Docker]"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:16
msgid "xref:openshift[OpenShift]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:17
#, fuzzy
msgid "xref:buildpack[Buildpack]"
msgstr "xref:buildpack[ビルドパック]"

#. type: Title ==
#: upstream/_versions/main/guides/container-image.adoc:18
#, no-wrap
msgid "Container Image extensions"
msgstr "コンテナーイメージのエクステンション"

#. type: Title ===
#: upstream/_versions/main/guides/container-image.adoc:21
#, no-wrap
msgid "Jib"
msgstr "Jib"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:27
msgid "The extension `quarkus-container-image-jib` is powered by https://github.com/GoogleContainerTools/jib[Jib] for performing container image builds.  The major benefit of using Jib with Quarkus is that all the dependencies (everything found under `target/lib`) are cached in a different layer than the actual application making rebuilds really fast and small (when it comes to pushing).  Another important benefit of using this extension is that it provides the ability to create a container image without having to have any dedicated client side tooling (like Docker) or running daemon processes (like the Docker daemon)  when all that is needed is the ability to push to a container image registry."
msgstr "エクステンション `quarkus-container-image-jib` は、コンテナーイメージのビルドを実行するために link:https://github.com/GoogleContainerTools/jib[Jib] を使用しています。Jib を Quarkus で使用する主な利点は、すべての依存関係 (`target/lib` の下にあるすべてのもの) が実際のアプリケーションとは別のレイヤーにキャッシュされるため、リビルドが非常に高速かつ小規模に (プッシュする場合) 行えることです。このエクステンションを使用するもう 1 つの重要な利点は、コンテナーイメージレジストリーにプッシュする機能さえあれば、専用のクライアントサイドツール (Docker など) やデーモンプロセス (Docker デーモンなど) を実行しなくてもコンテナーイーメージを作成できることです。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:29
msgid "To use this feature, add the following extension to your project:"
msgstr "この機能を使用するには、以下のエクステンションをプロジェクトに追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:36
msgid "In situations where all that is needed to build a container image and no push to a registry is necessary (essentially by having set `quarkus.container-image.build=true` and left `quarkus.container-image.push` unset - it defaults to `false`), then this extension creates a container image and registers it with the Docker daemon. This means that although Docker isn't used to build the image, it is nevertheless necessary. Also note that using this mode, the built container image *will* show up when executing `docker images`."
msgstr "必要なことがコンテナーイメージを構築するだけで、レジストリーへのプッシュが不要な場合 (基本的には `quarkus.container-image.build=true` を設定して `quarkus.container-image.push` のままにしておくことで、デフォルトは `false` になります)、このエクステンションはコンテナーイメージを作成し、Docker デーモンに登録します。これは、Docker がイメージのビルドには使われなくても必要であることを意味します。また、このモードを使用すると、`docker images` を実行するとコンテナーイメージが表示されます。"

#. type: Title ====
#: upstream/_versions/main/guides/container-image.adoc:37
#, no-wrap
msgid "Including extra files"
msgstr "追加ファイルの追加"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:43
msgid "There are cases when additional files (other than ones produced by the Quarkus build) need to be added to a container image.  To support these cases, Quarkus copies any file under `src/main/jib` into the built container image (which is essentially the same idea that the Jib Maven and Gradle plugins support).  For example, the presence of `src/main/jib/foo/bar` would result in `/foo/bar` being added into the container filesystem."
msgstr "コンテナーイメージに追加のファイル(Quarkus のビルドで作成されたもの以外)を追加する必要がある場合があります。このような場合に対応するため、Quarkus は、`src/main/jib` 以下のファイルをすべてビルドされたコンテナーイメージにコピーします (これは、Jib Maven や Gradle プラグインがサポートしているのと基本的に同じ考え方です)。例えば、`src/main/jib/foo/bar` が存在すると、`/foo/bar` がコンテナファイルシステムに追加されます。"

#. type: Title ====
#: upstream/_versions/main/guides/container-image.adoc:44
#, no-wrap
msgid "JVM Debugging"
msgstr "JVM デバッグ"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:47
msgid "There are cases where the built container image may need to have Java debugging conditionally enabled at runtime."
msgstr "ビルドしたコンテナイメージでは、実行時に条件付きでJavaデバッグを有効にする必要がある場合があります。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:50
msgid "When the base image has not been changed (and therefore `ubi8/openjdk-11-runtime` or `ubi8/openjdk-17-runtime` is used), then the `quarkus.jib.jvm-arguments` configuration property can be used in order to make the JVM listen on the debug port at startup."
msgstr "ベースイメージが変更されていない（つまり、 `ubi8/openjdk-11-runtime` または `ubi8/openjdk-17-runtime` が使用されている）場合、 `quarkus.jib.jvm-arguments` 設定プロパティを使用して、起動時に JVM がデバッグポートをリッスンするようにすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:52
msgid "The exact configuration is:"
msgstr "具体的な構成例:"

#. type: delimited block -
#: upstream/_versions/main/guides/container-image.adoc:56
#, no-wrap
msgid "quarkus.jib.jvm-arguments=-agentlib:jdwp=transport=dt_socket\\\\,server=y\\\\,suspend=n\\\\,address=*:5005\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:59
msgid "Other base images might provide launch scripts that enable debugging when an environment variable is set, in which case you would set than environment variable when launching the container."
msgstr "他のベースイメージでは、環境変数の設定によりデバッグが可能になる起動スクリプトが提供されている場合があり、その場合はコンテナの起動時に環境変数を設定します。"

#. type: Title ====
#: upstream/_versions/main/guides/container-image.adoc:60
#, no-wrap
msgid "Custom Entrypoint"
msgstr "カスタムエントリーポイント"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:63
msgid "The `quarkus.jib.jvm-entrypoint` configuration property can be used to completely override the container entry point and can thus be used to either hard code the JVM debug configuration or point to a script that handles the details."
msgstr "最後に、 `quarkus.jib.jvm-entrypoint` 設定プロパティを使用すると、コンテナのエントリポイントを完全にオーバーライドすることができるため、JVMのデバッグ構成をハードコードするか、詳細を処理するスクリプトを指定することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:65
msgid "For example, if the base images `ubi8/openjdk-11-runtime` or `ubi8/openjdk-17-runtime` are used to build the container, the entry point can be hard-coded on the application properties file."
msgstr "例えば、コンテナの構築にベースイメージ `ubi8/openjdk-11-runtime` や `ubi8/openjdk-17-runtime` を使用する場合、アプリケーションのプロパティファイル上でエントリポイントをハードコードすることができます。"

#. type: Block title
#: upstream/_versions/main/guides/container-image.adoc:66
#: upstream/_versions/main/guides/container-image.adoc:74
#, no-wrap
msgid "Example application.properties"
msgstr "application.properties の例"

#. type: delimited block -
#: upstream/_versions/main/guides/container-image.adoc:70
#, no-wrap
msgid "quarkus.jib.jvm-entrypoint=java,-Dcustom.param=custom_value,-jar,quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:73
msgid "Or a custom start-up script can be created and referenced on the properties file. This approach works better if there's a need to set application params using environment variables:"
msgstr "または、カスタムスタートアップスクリプトを作成し、プロパティファイルで参照することもできます。この方法は、環境変数を使用してアプリケーションのパラメータを設定する必要がある場合に有効です。"

#. type: delimited block -
#: upstream/_versions/main/guides/container-image.adoc:78
#, no-wrap
msgid "quarkus.jib.jvm-entrypoint=/bin/sh,run-java.sh\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/container-image.adoc:80
#, no-wrap
msgid "Example src/main/jib/home/jboss/run-java.sh"
msgstr "例 src/main/jib/home/jboss/run-java.sh"

#. type: delimited block -
#: upstream/_versions/main/guides/container-image.adoc:87
#, no-wrap
msgid ""
"java \\\n"
"  -Djavax.net.ssl.trustStore=/deployments/truststore \\\n"
"  -Djavax.net.ssl.trustStorePassword=\"$TRUST_STORE_PASSWORD\" \\\n"
"  -jar quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:90
msgid "`/home/jboss` is the WORKDIR for all quarkus binaries in the base images `ubi8/openjdk-11-runtime` and `ubi8/openjdk-17-runtime` (https://catalog.redhat.com/software/containers/ubi8/openjdk-17/618bdbf34ae3739687568813?container-tabs=dockerfile[Dockerfile for ubi8/openjdk-17-runtime, window=\"_blank\"])"
msgstr "`/home/jboss` は、ベースイメージ `ubi8/openjdk-11-runtime` および `ubi8/openjdk-17-runtime` 内のすべての Quarkus バイナリの WORKDIR です( link:https://catalog.redhat.com/software/containers/ubi8/openjdk-17/618bdbf34ae3739687568813?container-tabs=dockerfile[ubi8/openjdk-17-runtime 用の Dockerfile, target=\"_blank\"] ）。"

#. type: Title ====
#: upstream/_versions/main/guides/container-image.adoc:91
#, no-wrap
msgid "Multi-module projects and layering"
msgstr "マルチモジュールプロジェクトとレイヤリング"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:97
msgid "When building a multi-module project containing a Quarkus application as one module and various supporting project dependencies as other modules, Quarkus supports placing these supporting modules in a separate container image layer from the rest of the application dependencies, with the expectation that these supporting modules will change more frequently than the regular application dependencies - thus making a rebuild faster if the application dependencies have not changed."
msgstr "Quarkusアプリケーションを1つのモジュールとし、さらにさまざまなサポートプロジェクトの依存関係を他のモジュールとして含むマルチモジュールプロジェクトを構築する場合、Quarkusでは、サポートモジュールが通常のアプリケーション依存関係よりも頻繁に変更されることを想定して、それらのサポートモジュールを他のアプリケーション依存関係とは別のコンテナイメージレイヤーに配置することをサポートしています。このため、アプリケーションの依存関係に変更がない場合は、リビルドを高速に行うことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:101
msgid "To enable this feature, the property `quarkus.bootstrap.workspace-discovery` needs to be set to `true` either as a system property when invoking the build tool, either as a build tool property. Setting this property in `application.properties` will **not** work because this property needs to be known very early on in the build process."
msgstr "この機能を有効にするには、ビルドツール起動時にシステムプロパティとして、またはビルドツールプロパティとして、プロパティ `quarkus.bootstrap.workspace-discovery` を `true` に設定する必要があります。このプロパティは、ビルドプロセスの非常に早い段階で認識される必要があるため、 `application.properties` で設定しても正しく *機能しません* 。"

#. type: Title ====
#: upstream/_versions/main/guides/container-image.adoc:102
#, no-wrap
msgid "AppCDS"
msgstr "AppCDS"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:106
msgid "Quarkus supports generating and including an link:https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html#application-class-data-sharing[Application Class Data Sharing] archive when generating a container image using Jib.  See the xref:appcds.adoc[AppCDS documentation] for more details."
msgstr "Quarkusは、Jibを使用したコンテナイメージの生成時に、 link:https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html#application-class-data-sharing[アプリケーションクラスデータ共有] アーカイブを生成して含めることをサポートしています。詳細については、 link:appcds.html[AppCDSのドキュメント] を参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/container-image.adoc:108
#, no-wrap
msgid "Docker"
msgstr "Docker"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:111
msgid "The extension `quarkus-container-image-docker` is using the Docker binary and the generated Dockerfiles under `src/main/docker` in order to perform Docker builds."
msgstr "エクステンション `quarkus-container-image-docker` は、Docker ビルドを実行するために `src/main/docker` 下で Docker バイナリーと生成された Dockerfiles を使用しています。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:113
#: upstream/_versions/main/guides/container-image.adoc:130
#: upstream/_versions/main/guides/container-image.adoc:160
msgid "To use this feature, add the following extension to your project."
msgstr "この機能を使用するには、以下のエクステンションをプロジェクトに追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:118
#, fuzzy
msgid "The `quarkus-container-image-docker` extension is capable of https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images/[creating multi-platform (or multi-arch)] images using https://docs.docker.com/engine/reference/commandline/buildx_build/[`docker buildx build`]. See the `quarkus.docker.buildx.*` configuration items in the xref:DockerOptions[Docker Options] section below."
msgstr "`quarkus-container-image-docker` エクステンションは、 link:https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images/[マルチプラットフォーム（またはマルチアーチ] ）のイメージを link:https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images/[作成] するために、次のような機能を備えています。 link:https://docs.docker.com/engine/reference/commandline/buildx_build/[`docker buildx build`] .後述の「Docker xref:DockerOptions[オプション] 」セクションの `quarkus.docker.buildx.*` の設定項目を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:120
msgid "`docker buildx build` ONLY supports https://docs.docker.com/engine/reference/commandline/buildx_build/#load[loading the result of a build] to `docker images` when building for a single platform. Therefore, if you specify more than one argument in the `quarkus.docker.buildx.platform` property, the resulting images will not be loaded into `docker images`. If `quarkus.docker.buildx.platform` is omitted or if only a single platform is specified, it will then be loaded into `docker images`."
msgstr "`docker buildx build` は、単一のプラットフォーム向けにビルドする場合のみ、link:https://docs.docker.com/engine/reference/commandline/buildx_build/#load[ビルド結果の `docker images` への読み込み] をサポートします。したがって、 `quarkus.docker.buildx.platform` プロパティに複数の引数を指定した場合、結果のイメージは `docker images` にロードされません。  `quarkus.docker.buildx.platform` が省略された場合、または単一のプラットフォームのみが指定された場合は、その後 `docker images` にロードされるようになります。"

#. type: Title ===
#: upstream/_versions/main/guides/container-image.adoc:122
#, no-wrap
msgid "OpenShift"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:126
msgid "The extension `quarkus-container-image-openshift` is using OpenShift binary builds in order to perform container builds inside the OpenShift cluster.  The idea behind the binary build is that you just upload the artifact and its dependencies to the cluster and during the build they will be merged to a builder image (defaults to `fabric8/s2i-java`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:128
msgid "The benefit of this approach, is that it can be combined with OpenShift's `DeploymentConfig` that makes it easy to roll out changes to the cluster."
msgstr "このアプローチの利点は、クラスターへの変更を簡単にロールアウトできる OpenShift の `DeploymentConfig` と組み合わせることができることです。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:136
msgid "OpenShift builds require creating a `BuildConfig` and two `ImageStream` resources, one for the builder image and one for the output image.  The creation of such objects is being taken care of by the Quarkus Kubernetes extension."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/container-image.adoc:139
#, no-wrap
msgid "Buildpack"
msgstr "Buildpack"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:144
msgid "The extension `quarkus-container-image-buildpack` is using buildpacks in order to perform container image builds.  Under the hood buildpacks will use a Docker daemon for the actual build.  While buildpacks support alternatives to Docker, this extension will only work with Docker."
msgstr "`quarkus-container-image-buildpack` は、コンテナイメージのビルドを行うために buildpacks を使用しています。buildpacksは、実際のビルドにDockerデーモンを使用します。buildpacksはDockerの代替品をサポートしていますが、このエクステンションはDockerでのみ動作します。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:146
msgid "Additionally, the user will have to configure which build image to use (no default image is provided). For example:"
msgstr "さらに、ユーザーはどのビルドイメージを使用するかを設定する必要があります（デフォルトのイメージは提供されていません）。例えば、以下のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/container-image.adoc:150
#, no-wrap
msgid "quarkus.buildpack.jvm-builder-image=<jvm builder image>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:153
msgid "or for native:"
msgstr "またはネイティブの場合、"

#. type: delimited block -
#: upstream/_versions/main/guides/container-image.adoc:157
#, no-wrap
msgid "quarkus.buildpack.native-builder-image=<native builder image>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:165
msgid "When using the buildpack container image extension it is strongly advised to avoid adding `quarkus.container-image.build=true` in your properties configuration as it might trigger nesting builds within builds. It's preferable to pass it as an option to the build command instead."
msgstr "buildpack コンテナイメージエクステンションを使用する際には、プロパティ設定に `quarkus.container-image.build=true` を追加しないことを強くお勧めします。代わりにビルドコマンドのオプションとして渡すことをお勧めします。"

#. type: Title ==
#: upstream/_versions/main/guides/container-image.adoc:166
#, no-wrap
msgid "Building"
msgstr "ビルド"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:169
msgid "To build a container image for your project, `quarkus.container-image.build=true` needs to be set using any of the ways that Quarkus supports."
msgstr "プロジェクト用のコンテナーイメージを作成するには、Quarkus がサポートしている方法のいずれかで、 `quarkus.container-image.build=true` を設定する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:175
msgid "If you ever want to build a native container image and already have an existing native image you can set `-Dquarkus.native.reuse-existing=true` and the native image build will not be re-run."
msgstr "ネイティブコンテナイメージをビルドしたいときに、すでに既存のネイティブイメージがある場合は、 `-Dquarkus.native.reuse-existing=true` を設定すれば、ネイティブイメージのビルドは再実行されません。"

#. type: Title ==
#: upstream/_versions/main/guides/container-image.adoc:176
#, no-wrap
msgid "Using @QuarkusIntegrationTest"
msgstr "@QuarkusIntegrationTest の利用"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:179
msgid "To run tests on the resulting image, `quarkus.container-image.build=true` needs to be set using any of the ways that Quarkus supports."
msgstr "作成されたイメージでテストを実行するためには、Quarkus がサポートしている方法のいずれかで、 `quarkus.container-image.build=true` を設定する必要があります。"

#. type: Block title
#: upstream/_versions/main/guides/container-image.adoc:181
#, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: delimited block -
#: upstream/_versions/main/guides/container-image.adoc:184
#, no-wrap
msgid "./mvnw verify -Dquarkus.container-image.build=true\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/container-image.adoc:186
#, no-wrap
msgid "Gradle"
msgstr "Gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/container-image.adoc:189
#, no-wrap
msgid "./gradlew quarkusIntTest -Dquarkus.container-image.build=true\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/container-image.adoc:191
#, no-wrap
msgid "Pushing"
msgstr "プッシュ"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:194
msgid "To push a container image for your project, `quarkus.container-image.push=true` needs to be set using any of the ways that Quarkus supports."
msgstr "プロジェクトにコンテナーイメージをプッシュするには、Quarkus がサポートしている方法のいずれかで、`quarkus.container-image.push=true` を設定する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:200
msgid "If no registry is set (using `quarkus.container-image.registry`) then `docker.io` will be used as the default."
msgstr "レジストリーが設定されていない場合 (`quarkus.container-image.registry` を使用) は、 `docker.io` がデフォルトとして使用されます。"

#. type: Title ==
#: upstream/_versions/main/guides/container-image.adoc:201
#, no-wrap
msgid "Selecting among multiple extensions"
msgstr "複数のエクステンションから選択する"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:204
msgid "It does not make sense to use multiple extension as part of the same build. When multiple container image extensions are present, an error will be raised to inform the user. The user can either remove the unneeded extensions or select one using `application.properties`."
msgstr "複数のエクステンションを同じビルドの一部として使用することは意味がありません。複数のコンテナイメージエクステンションが存在する場合は、エラーが発生してユーザーに通知されます。ユーザーは、不要なエクステンションを削除するか、 `application.properties` を使用してエクステンションを選択することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:206
msgid "For example, if both `container-image-docker` and `container-image-openshift` are present and the user needs to use `container-image-docker`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/container-image.adoc:210
#, no-wrap
msgid "quarkus.container-image.builder=docker\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/container-image.adoc:212
#, fuzzy, no-wrap
msgid "Integrating with `systemd-notify`"
msgstr "との統合を図る。 `systemd-notify`"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:215
#, fuzzy
msgid "If you are building a container image in order to deploy your Quarkus application as a Linux service with Podman and Systemd, you might want to consider including the https://quarkiverse.github.io/quarkiverse-docs/quarkus-systemd-notify/dev/index.html[Quarkus Systemd Notify Extension] as part of your application, with:"
msgstr "QuarkusアプリケーションをPodmanとSystemdでLinuxサービスとしてデプロイするためにコンテナイメージを構築する場合、 link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-systemd-notify/dev/index.html[Quarkus Systemd Notify Extensionを] アプリケーションの一部として含めることを検討するとよいかもしれない、とのこと："

#. type: Title ==
#: upstream/_versions/main/guides/container-image.adoc:219
#, no-wrap
msgid "Customizing"
msgstr "カスタマイズ"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:222
msgid "The following properties can be used to customize the container image build process."
msgstr "以下のプロパティーを使用して、コンテナーイメージのビルドプロセスをカスタマイズすることができます。"

#. type: Title ===
#: upstream/_versions/main/guides/container-image.adoc:223
#, no-wrap
msgid "Container Image Options"
msgstr "コンテナーイメージオプション"

#. type: Title ====
#: upstream/_versions/main/guides/container-image.adoc:227
#, no-wrap
msgid "Using CI Environments"
msgstr "CI 環境の利用"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:231
msgid "Various CI environments provide a ready to use container-image registry which can be combined with the container-image Quarkus extensions in order to effortlessly create and push a Quarkus application to said registry."
msgstr "さまざまな CI 環境では、Quarkus アプリケーションを作成してレジストリーをプッシュするために、コンテナーイメージ Quarkus エクステンションと組み合わせることで、すぐに使えるコンテナーイメージレジストリ-を利用できます。"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:235
msgid "For example, https://gitlab.com/[GitLab] provides such a registry and in the provided CI environment, makes available the `CI_REGISTRY_IMAGE` environment variable (see GitLab's https://docs.gitlab.com/ee/ci/variables/[documentation]) for more information), which can be used in Quarkus like so:"
msgstr "例えば、 link:https://gitlab.com/[GitLab] はこのようなレジストリーを提供しており、提供されている CI 環境では、環境変数 `CI_REGISTRY_IMAGE` (詳しくは GitLab の link:https://docs.gitlab.com/ee/ci/variables/[ドキュメント] を参照) を利用できるようになっています。なお、Quarkus ではこのように利用できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/container-image.adoc:239
#, no-wrap
msgid "quarkus.container-image.image=${CI_REGISTRY_IMAGE}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:242
msgid "See xref:config-reference.adoc#with-environment-variables[this] for more information on how to combine properties with environment variables."
msgstr "プロパティと環境変数を組み合わせる方法については、 link:config.html#combine-property-env-var[こちら]をご覧ください。"

#. type: Title ===
#: upstream/_versions/main/guides/container-image.adoc:243
#, no-wrap
msgid "Jib Options"
msgstr "Jib オプション"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:246
msgid "In addition to the generic container image options, the `container-image-jib` also provides the following options:"
msgstr "一般的なコンテナーイメージのオプションに加えて、`container-image-jib` では以下のオプションも用意されています。"

#. type: Title ===
#: upstream/_versions/main/guides/container-image.adoc:250
#, no-wrap
msgid "Docker Options"
msgstr "Docker オプション"

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:253
msgid "In addition to the generic container image options, the `container-image-docker` also provides the following options:"
msgstr "一般的なコンテナーイメージのオプションに加えて、`container-image-docker` では以下のオプションも用意されています。"

#. type: Title ===
#: upstream/_versions/main/guides/container-image.adoc:256
#, no-wrap
msgid "OpenShift  Options"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/container-image.adoc:259
msgid "In addition to the generic container image options, the `container-image-openshift` also provides the following options:"
msgstr ""

#, fuzzy
#~ msgid "xref:s2i[S2I]"
#~ msgstr "xref:s2i[エスツーアイ]"

#~ msgid "S2I"
#~ msgstr "S2I"

#~ msgid "The extension `quarkus-container-image-s2i` is using S2I binary builds in order to perform container builds inside the OpenShift cluster.  The idea behind the binary build is that you just upload the artifact and its dependencies to the cluster and during the build they will be merged to a builder image (defaults to `fabric8/s2i-java`)."
#~ msgstr "エクステンション `quarkus-container-image-s2i` は、OpenShift クラスター内でコンテナービルドを実行するために S2I バイナリービルドを使用しています。バイナリービルドの考え方は、アーティファクトとその依存関係をクラスタにアップロードするだけで、ビルド中にそれらがビルダーイメージにマージされます (デフォルトは `fabric8/s2i-java`)。"

#~ msgid "S2I builds require creating a `BuildConfig` and two `ImageStream` resources, one for the builder image and one for the output image.  The creation of such objects is being taken care of by the Quarkus Kubernetes extension."
#~ msgstr "S2I のビルドでは、`BuildConfig` と 2 つの `ImageStream` リソースを作成する必要があります。このようなオブジェクトの作成は、Quarkus Kubernetes エクステンションによって行われます。"

#~ msgid "For example, if both `container-image-docker` and `container-image-s2i` are present and the user needs to use `container-image-docker`:"
#~ msgstr "例えば、`container-image-docker` と `container-image-s2i` の両方が存在し、ユーザーが `container-image-docker` を使用する場合:"

#~ msgid "S2I  Options"
#~ msgstr "S2I オプション"

#~ msgid "In addition to the generic container image options, the `container-image-s2i` also provides the following options:"
#~ msgstr "一般的なコンテナーイメージのオプションに加えて、`container-image-s2i` では以下のオプションも用意されています。"

#~ msgid "<<#jib,Jib>>"
#~ msgstr "<<#jib,Jib>>"

#~ msgid "<<#s2i,S2I>>"
#~ msgstr "<<#s2i,S2I>>"

#~ msgid "There are cases where the built container image may need to have Java debugging conditionally enabled at runtime.  There are a few ways to achieve this, but they all rely on the fact that in the `container-image-jib` you can control the entrypoint to use for the container image.  By default, the container-image is created with a minimal `java -jar ...` style entrypoint, but that can be changed using the `quarkus.jib.jvm-entrypoint` configuration option."
#~ msgstr "ビルドされたコンテナ・イメージでは、実行時に条件付きで Java デバッグを有効にする必要がある場合があります。これを実現するにはいくつかの方法がありますが、いずれも `container-image-jib` でコンテナ・イメージに使用するエント リポイントを制御できるという事実に依存しています。デフォルトでは、コンテナ・イメージは最小限の `java -jar …​` スタイルのエントリポイントで作成されますが、 `quarkus.jib.jvm-entrypoint` 設定オプションを使用して変更することができます。"

#~ msgid "If the base image has not been changed (and therefore `fabric8/java-alpine-openjdk11-jre` is used) then you leverage that image's built-in `run-java.sh` script (more details about it can be found link:https://hub.docker.com/r/fabric8/java-alpine-openjdk11-jre#startup-script-run-javash[here]])  by adding the following entries to `application.properties`:"
#~ msgstr "ベースイメージが変更されていない場合（つまり `fabric8/java-alpine-openjdk11-jre` が使用されている場合）は、そのイメージに組み込まれている `run-java.sh` スクリプト（詳細は link:https://hub.docker.com/r/fabric8/java-alpine-openjdk11-jre#startup-script-run-javash[こちら]）を利用して、 `application.properties` に以下のエントリを追加します。"

#~ msgid "When running the container, the `JAVA_DEBUG` environment variable can then be used to control whether or not the application will be listening on the debug port."
#~ msgstr "コンテナの実行時には、環境変数 `JAVA_DEBUG` を使用して、アプリケーションがデバッグポートをリッスンするかどうかを制御することができます。"

#~ msgid "An example launch command is:"
#~ msgstr "起動コマンドの例を示します。"

#~ msgid "If you are using a different base image or would like to use a custom launch script, then see the previous section on how to add the script to the container image and set the `quarkus.jib.jvm-entrypoint` in `application.properties` to the location of that script."
#~ msgstr "別のベースイメージを使用している場合や、カスタムの起動スクリプトを使用したい場合は、コンテナイメージにスクリプトを追加し、 `application.properties` の `quarkus.jib.jvm-entrypoint` をそのスクリプトの場所に設定する方法について、前述のセクションを参照してください。"

#~ msgid "./mvnw quarkus:add-extension -Dextensions=\"container-image-jib\"\n"
#~ msgstr "./mvnw quarkus:add-extension -Dextensions=\"container-image-jib\"\n"

#~ msgid "./mvnw quarkus:add-extension -Dextensions=\"container-image-docker\"\n"
#~ msgstr "./mvnw quarkus:add-extension -Dextensions=\"container-image-docker\"\n"

#~ msgid "./mvnw quarkus:add-extension -Dextensions=\"container-image-s2i\"\n"
#~ msgstr "./mvnw quarkus:add-extension -Dextensions=\"container-image-s2i\"\n"
