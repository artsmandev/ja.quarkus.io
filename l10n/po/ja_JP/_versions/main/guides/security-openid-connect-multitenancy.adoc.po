# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-15 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:6
#, no-wrap
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "OpenID Connect (OIDC) マルチテナンシーの使用"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:15
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr "このガイドでは、OpenID Connect (OIDC) アプリケーションがマルチテナンシーをサポートして、単一のアプリケーションから複数のテナントにサービスを提供する方法を説明します。テナントは、同じ OpenID プロバイダー内の個別のレルムまたはセキュリティードメイン、あるいは個別の OpenID プロバイダーです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:17
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr "同じアプリケーション (例: SaaS) から複数の顧客にサービスを提供する場合、各顧客はテナントです。アプリケーションに対してマルチテナンシーサポートを有効にすることで、Keycloak や Google などのさまざまな OpenID プロバイダーに対する認証であっても、テナントごとに異なる認証ポリシーをサポートできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:19
#, fuzzy
msgid "Please read the xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr "ベアラートークン認証を使用してテナントを認可する必要がある場合は、 xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン] 認証ガイドをお読みください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:21
#, fuzzy
msgid "If you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow, read the xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications] guide."
msgstr "OpenID Connect認可コードフローを使用してテナントを認証および認可する必要がある場合は、 xref:security-oidc-code-flow-authentication.adoc[Webアプリケーションを保護するためのOIDC] コードフローメカニズムガイドをお読みください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:23
#, fuzzy
msgid "Also see the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr "また、 xref:security-oidc-configuration-properties-reference.adoc[OIDC] 設定 xref:security-oidc-configuration-properties-reference.adoc[プロパティの] リファレンスガイドもご参照ください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:25
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:30
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:31
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:34
msgid "In this example, we build a very simple application which supports two resource methods:"
msgstr "この例では、2つのリソースメソッドをサポートする非常にシンプルなアプリケーションを構築します:"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:36
msgid "`/{tenant}`"
msgstr "`/{tenant}`"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:38
msgid "This resource returns information obtained from the ID token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr "OpenID Providerが発行するIDトークンから取得した、認証されたユーザと現在のテナントに関する情報を返すリソースです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:40
msgid "`/{tenant}`/bearer"
msgstr "`/{tenant}`/bearer"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:42
msgid "This resource returns information obtained from the Access token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr "OpenID Providerが発行するアクセストークンから取得した、認証されたユーザと現在のテナントに関する情報を返すリソースです。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:43
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:47
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:49
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:51
#, fuzzy
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr "ソリューションは `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[ディレクトリに] あります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:52
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:55
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:62
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `oidc` エクステンションを追加することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:67
msgid "This will add the following to your build file:"
msgstr "これにより、`pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:69
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:413
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:75
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:78
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:433
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:81
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:83
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:86
#, fuzzy
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular Jakarta REST resource:"
msgstr "まず、 `/{tenant}` のエンドポイントを実装することから始めましょう。以下のソースコードからわかるように、これは通常の Jakarta REST リソースです："

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:90
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:160
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:247
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:283
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:466
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:548
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:803
#, no-wrap
msgid "package org.acme.quickstart.oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:95
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:97
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:99
#, no-wrap
msgid "import io.quarkus.oidc.IdToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:108
#, no-wrap
msgid ""
"@Path(\"/{tenant}\")\n"
"public class HomeResource {\n"
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:114
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Access Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:126
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the ID Token info. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose this token in a real application.\n"
"     *\n"
"     * @return ID Token info\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    public String getIdTokenInfo() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:129
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.idToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(idToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:132
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:145
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the Access Token info. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose this token in a real application.\n"
"     *\n"
"     * @return Access Token info\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    @Path(\"bearer\")\n"
"    public String getAccessTokenInfo() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:148
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.accessToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(accessToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:152
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:156
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface which can be used to resolve the tenant configurations dynamically:"
msgstr "受信リクエストからテナントを解決し、application.propertiesで特定の `quarkus-oidc` テナント設定にマッピングするためには、テナント設定を動的に解決するために使用できる `io.quarkus.oidc.TenantConfigResolver` インターフェイスの実装を作成する必要があります："

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:162
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:249
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:285
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:807
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:164
#, no-wrap
msgid "import org.eclipse.microprofile.config.ConfigProvider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:171
#, no-wrap
msgid ""
"import io.quarkus.oidc.OidcRequestContext;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.OidcTenantConfig.ApplicationType;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:174
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:178
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n"
"        String path = context.request().path();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:181
#, no-wrap
msgid ""
"        if (path.startsWith(\"/tenant-a\")) {\n"
"           String keycloakUrl = ConfigProvider.getConfig().getValue(\"keycloak.url\", String.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:195
#, no-wrap
msgid ""
"            OidcTenantConfig config = new OidcTenantConfig();\n"
"            config.setTenantId(\"tenant-a\");\n"
"            config.setAuthServerUrl(keycloakUrl + \"/realms/tenant-a\");\n"
"            config.setClientId(\"multi-tenant-client\");\n"
"            config.getCredentials().setSecret(\"secret\");\n"
"            config.setApplicationType(ApplicationType.HYBRID);\n"
"            return Uni.createFrom().item(config);\n"
"        } else {\n"
"            // resolve to default tenant config\n"
"            return Uni.createFrom().nullItem();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:198
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr "上記の実装から、テナントはリクエストパスから解決されるため、テナントを推測できなかった場合は、デフォルトのテナント設定を使用する必要があることを示すために null が返されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:200
msgid "Note the `tenant-a` application type is `hybrid` - it can accept HTTP bearer tokens if provided, otherwise it will initiate an authorization code flow when the authentication is required."
msgstr "`tenant-a` アプリケーションタイプは `hybrid` であることに注意してください。HTTPベアラートークンが提供された場合はそれを受け入れることができますが、そうでない場合は認証が必要なときに認可コードフローが開始されます。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:201
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:209
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:231
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:451
#, no-wrap
msgid ""
"# Default Tenant Configuration\n"
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=multi-tenant-client\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:211
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:453
#, no-wrap
msgid "# Tenant A Configuration is created dynamically in CustomTenantConfigResolver\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:215
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:240
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:457
#, no-wrap
msgid ""
"# HTTP Security Configuration\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:218
#, fuzzy
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. Note that a `%prod` profile prefix is used with `quarkus.oidc.auth-server-url` - it is done to support testing a multi-tenant application with `Dev Services For Keycloak`. This configuration is using a Keycloak instance to authenticate users."
msgstr "最初の構成は、リクエストからテナントを推測できない場合に使用されるデフォルトのテナント構成です。 `quarkus.oidc.auth-server-url` で `%prod` プロファイルプレフィックスが使用されていることに注意してください。これは、 `Dev Services For Keycloak` を使用したマルチテナントアプリケーションのテストをサポートするために行われます。この構成では、ユーザーの認証にKeycloakインスタンスを使用しています。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:220
msgid "The second configuration is provided by `TenantConfigResolver`, it is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr "2つ目の設定は `TenantConfigResolver` によって提供されます。これは、受信リクエストがテナント `tenant-a` にマッピングされるときに使用される設定です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:222
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr "どちらの設定でも、異なる `realms` を使用しばら、同じ Keycloak サーバーインスタンスにマップされることに注意してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:224
msgid "Alternatively you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr "または、 `application.properties` で直接テナント `tenant-a` を設定することもできます："

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:236
#, no-wrap
msgid ""
"# Tenant A Configuration\n"
"quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/realms/tenant-a\n"
"quarkus.oidc.tenant-a.client-id=multi-tenant-client\n"
"quarkus.oidc.tenant-a.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:243
msgid "and use a custom `TenantConfigResolver` to resolve it:"
msgstr "そして、カスタム `TenantConfigResolver` を使って解決します:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:252
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:288
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:255
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:291
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:814
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:260
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:265
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:746
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant configuration\n"
"            return null;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:269
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:272
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr "設定ファイルで複数のテナントを定義できます。`TenantResolver` 実装からテナントを解決するときに適切にマップできるように、それらに一意のエイリアスがあることを確認してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:274
msgid "However, using a static tenant resolution (configuring tenants in `application.properties` and resolving them with `TenantResolver`) prevents testing the endpoint with `Dev Services for Keycloak` since `Dev Services for Keycloak` has no knowledge of how the requests will be mapped to individual tenants and can not dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values and therefore using `%prod` prefixes with the tenant-specific URLs in `application.properties` will not work in tests or devmode."
msgstr "しかし、静的なテナント解決（ `application.properties` でテナントを設定し、 `TenantResolver` で解決する）を使用すると、 `Dev Services for Keycloak` でエンドポイントをテストすることができません。 `Dev Services for Keycloak` は、リクエストが個々のテナントにどのようにマッピングされるかを知らないため、テナント固有の `quarkus.oidc.<tenant-id>.auth-server-url` 値を動的に提供できず、したがって `%prod` プレフィックスを使用して `application.properties` のテナントに固有の URL を使用するとテストや開発モードで動作しません。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:279
msgid "When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.  Therefore, when working with multiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr "現在のテナントが OIDC の `web-app` アプリケーションを表す場合、カスタムテナントリゾルバーがすべてのリクエストに対して呼び出されるまでに、現在の `io.vertx.ext.web.RoutingContext` には `tenant-id` 属性が含まれ、テナント固有の状態またはセッション Cookie のいずれかがすでに存在する場合に、コード認証フローとすでに認証されたリクエストを完了します。したがって、複数の OpenID Connect プロバイダーを使用する場合、`RoutingContext` に `tenant-id` 属性が設定されていない場合にのみ、パス固有のチェックを行ってテナント ID を解決する必要があります。以下はその例です。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:301
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = context.get(\"tenant-id\");\n"
"        if (tenantId != null) {\n"
"            return tenantId;\n"
"        } else {\n"
"            // Initial login request\n"
"            String path = context.request().path();\n"
"            String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:310
#, no-wrap
msgid ""
"            if (parts.length == 0) {\n"
"                // resolve to default tenant configuration\n"
"                return null;\n"
"            }\n"
"            return parts[1];\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:313
#, fuzzy
msgid "In fact, this is how Quarkus OIDC resolves static custom tenants itself if no custom `TenantResolver` is registered."
msgstr "実際、カスタム `TenantResolver` が登録されていない場合、Quarkus OIDCはこの方法で静的カスタムテナントを解決します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:315
msgid "A similar technique can be used with `TenantConfigResolver` where a `tenant-id` provided in the context can be used to return `OidcTenantConfig` already prepared with the previous request."
msgstr "同様の手法は、 `TenantConfigResolver` でも使用できます。コンテキストで提供される `tenant-id` を使用して、前のリクエストで既に用意された `OidcTenantConfig` を返すことができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:322
#, fuzzy
msgid "If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] or xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancy] and both tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver or MongoDB with Panache Mongo Database Resolver as a `RoutingContext` attribute, for example:"
msgstr "xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancyや] xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancyも] 使用していて、両方のテナントIDが同じでVert.x `RoutingContext` から抽出する必要がある場合、OIDC Tenant ResolverからテナントIDを、例えば、 `RoutingContext` 属性としてHibernate ORM Tenant ResolverやMongoDB with Panache Mongo Database Resolverへ渡せばいい："

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:326
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:657
#, no-wrap
msgid "public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:334
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = extractTenantId(context);\n"
"        context.put(\"tenantId\", tenantId);\n"
"        return tenantId;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:337
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloak サーバーの起動と設定"

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:340
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:344
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:347
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、`keycloak.version` は `17.0.0` 以上に設定する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:349
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "http://localhost:8180[localhost:8180] で Keycloak サーバーにアクセスできるはずです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:351
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:353
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr "さて、以下の手順に従って、2つのテナントのためのレルムをインポートします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:355
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr "link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.jsonを] インポートして、デフォルトのレルムを作成する。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:356
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr "link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.jsonを] インポートして、テナントのレルムを作成する `tenant-a` 。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:358
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "詳細は、 https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新規レルムの作成] 方法に関する Keycloak ドキュメントを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:359
#, no-wrap
msgid "Running and Using the Application"
msgstr "アプリケーションの実行と使用"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:361
#, no-wrap
msgid "Running in Developer Mode"
msgstr "デベロッパーモードでの実行"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:364
msgid "To run the microservice in dev mode, use:"
msgstr "マイクロサービスをdevモードで実行する場合、次を実行して下さい:"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:367
#, no-wrap
msgid "Running in JVM Mode"
msgstr "JVMモードでの動作"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:370
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr "「開発モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:372
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:376
msgid "Then run it:"
msgstr "そして、以下のように実行します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:380
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:382
#, no-wrap
msgid "Running in Native Mode"
msgstr "ネイティブモードでの実行"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:385
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:389
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:392
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the native build:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。ネイティブビルドを有効にして再度ビルドしてみましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:396
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:400
#, no-wrap
msgid "./target/security-openid-connect-multi-tenancy-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:402
#, no-wrap
msgid "Test the Application"
msgstr "アプリケーションのテスト"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:404
#, no-wrap
msgid "Use Dev Services for Keycloak"
msgstr "Dev Services for Keycloakの使用"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:408
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will import configured realms and set a base Keycloak URL for `CustomTenantResolver` used in this quickstart to calculate a realm specific URL."
msgstr "Keycloakに対する統合テストには、 link:security-openid-connect-dev-services.html[Dev Services for Keycloak] の使用を推奨します。 `Dev Services for Keycloak` はテストコンテナを起動し初期化します。設定されたレルムをインポートし、このクイックスタートで使用される `CustomTenantResolver` のベース Keycloak URL を設定して、レルム固有の URL を計算します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:411
msgid "First you need to add the following dependencies:"
msgstr "まず、以下の依存関係を追加する必要があります:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:430
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:438
#, no-wrap
msgid ""
"testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
"testImplementation(\"io.rest-assured:rest-assured\")\n"
"testImplementation(\"net.sourceforge.htmlunit:htmlunit\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:442
msgid "`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.  `HtmlUnit` is used for testing the `/{tenant}` endpoint and the authorization code flow."
msgstr "`quarkus-test-keycloak-server` は、レルム固有のアクセストークンを取得するためのユーティリティクラス `io.quarkus.test.keycloak.client.KeycloakTestClient` を提供し、 `RestAssured` と共にベアラアクセストークンを期待する `/{tenant}/bearer` エンドポイントのテストに使用できます。`HtmlUnit` は `/{tenant}` エンドポイントと認可コードフローのテストに使用します。 "

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:444
msgid "Next, configure the required realms:"
msgstr "次に、必要なレルムを設定します:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:459
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=default-tenant-realm.json,tenant-a-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:462
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr "最後に、JVM モードで実行されるテストを作成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:470
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.containsString;\n"
"import static org.junit.jupiter.api.Assertions.assertEquals;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:472
#, no-wrap
msgid "import java.io.IOException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:474
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:479
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:483
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.client.KeycloakTestClient;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:486
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:488
#, no-wrap
msgid "    KeycloakTestClient keycloakClient = new KeycloakTestClient();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:493
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInDefaultTenant() throws IOException {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/default\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:495
#, no-wrap
msgid "            assertEquals(\"Sign in to quarkus\", page.getTitleText());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:497
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:515
#, no-wrap
msgid "            HtmlForm loginForm = page.getForms().get(0);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:500
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:518
#, no-wrap
msgid ""
"            loginForm.getInputByName(\"username\").setValueAttribute(\"alice\");\n"
"            loginForm.getInputByName(\"password\").setValueAttribute(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:502
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:520
#, no-wrap
msgid "            page = loginForm.getInputByName(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:506
#, no-wrap
msgid ""
"            assertTrue(page.asText().contains(\"tenant\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:511
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInTenantAWebApp() throws IOException {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/tenant-a\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:513
#, no-wrap
msgid "            assertEquals(\"Sign in to tenant-a\", page.getTitleText());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:524
#, no-wrap
msgid ""
"            assertTrue(page.asText().contains(\"alice@tenant-a.org\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:530
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInTenantABearerToken() throws IOException {\n"
"        RestAssured.given().auth().oauth2(getAccessToken()).when()\n"
"            .get(\"/tenant-a/bearer\").then().body(containsString(\"alice@tenant-a.org\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:534
#, no-wrap
msgid ""
"    private String getAccessToken() {\n"
"        return keycloakClient.getRealmAccessToken(\"tenant-a\", \"alice\", \"alice\", \"multi-tenant-client\", \"secret\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:541
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:544
msgid "and in native mode:"
msgstr "および、ネイティブモードで以下を実行します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:550
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:554
#, no-wrap
msgid ""
"@QuarkusIntegrationTest\n"
"public class CodeFlowIT extends CodeFlowTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:557
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr "初期化および設定方法の詳細については、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] を参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:558
#, no-wrap
msgid "Use Browser"
msgstr "ブラウザの使用"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:561
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "テストするには、ブラウザを開いて以下のURLにアクセスする必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:563
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr "http://localhost:8080/default[http://localhost:8080/default]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:566
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr "すべてが期待どおりに機能している場合は、認証のために Keycloak サーバーにリダイレクトする必要があります。リクエストされたパスは、設定ファイルにマップされていない `default` テナントを定義していることに注意してください。この場合、デフォルトの設定が使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:568
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "アプリケーションを認証するためには、Keycloakのログインページで以下の認証情報を入力する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:570
msgid "Username: *alice*"
msgstr "Username: *alice*"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:571
msgid "Password: *alice*"
msgstr "Password: *alice*"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:573
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "`Login` ボタンをクリックすると、アプリケーションにリダイレクトされます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:575
msgid "If you try now to access the application at the following URL:"
msgstr "次の URL でアプリケーションにアクセスを試みます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:577
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:579
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr "Keycloak のログインページに再度リダイレクトされます。ただし、ここでは別の `realm` を使用して認証します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:582
msgid "In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr "どちらの場合も、ユーザーが正常に認証されると、ランディングページにユーザーの名前と電子メールが表示されます。ユーザー `alice` は両方のテナントに存在しますが、アプリケーションにおいて、それらは異なるレルム/テナントに属する別個のユーザーです。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:584
#, fuzzy, no-wrap
msgid "Static tenant configuration resolution"
msgstr "静的テナント構成の解決"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:588
#, fuzzy
msgid "When you set multiple tenant configurations in the `application.properties` file, you only need to specify how the tenant identifier gets resolved.  To configure the resolution of the tenant identifier, use one of the following options:"
msgstr "`application.properties` ファイルで複数のテナント構成を設定する場合は、テナント識別子の解決方法のみを指定する必要があります。テナント識別子の解決方法を設定するには、以下のオプションのいずれかを使用します："

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:590
#, fuzzy
msgid "xref:default-tenant-resolver[Default resolution]"
msgstr "xref:default-tenant-resolver[デフォルト解像度]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:591
#, fuzzy
msgid "xref:tenant-resolver[Resolve with `TenantResolver`]"
msgstr "xref:tenant-resolver[で解決する。TenantResolver]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:592
#, fuzzy
msgid "xref:annotations-tenant-resolver[Resolve with annotations]"
msgstr "xref:annotations-tenant-resolver[注釈付きで解決]"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:594
#, fuzzy, no-wrap
msgid "Default resolution"
msgstr "デフォルト解像度"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:597
#, fuzzy
msgid "The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in the last segment of the request path."
msgstr "テナント識別子のデフォルトの解決は規約に基づいており、認証リクエストは、リクエストパスの最後のセグメントにテナント識別子を含めなければならない。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:599
#, fuzzy
msgid "The following `application.properties` example shows how you can configure two tenants named `google` and `github`:"
msgstr "次の `application.properties` の例は、 `google` と `github` という 2 つのテナントを設定する方法を示しています："

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:607
#, no-wrap
msgid ""
"# Tenant 'google' configuration\n"
"quarkus.oidc.google.provider=google\n"
"quarkus.oidc.google.client-id=${google-client-id}\n"
"quarkus.oidc.google.credentials.secret=${google-client-secret}\n"
"quarkus.oidc.google.authentication.redirect-path=/signed-in\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:613
#, no-wrap
msgid ""
"# Tenant 'github' configuration\n"
"quarkus.oidc.github.provider=google\n"
"quarkus.oidc.github.client-id=${github-client-id}\n"
"quarkus.oidc.github.credentials.secret=${github-client-secret}\n"
"quarkus.oidc.github.authentication.redirect-path=/signed-in\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:617
#, fuzzy
msgid "In this example, both tenants configure OIDC `web-app` applications to use an authorization code flow to authenticate users and also require session cookies to get generated after the authentication has taken place.  After either Google or GitHub authenticates the current user, the user gets returned to the `/signed-in` area for authenticated users, for example, a secured resource path on the JAX-RS endpoint."
msgstr "この例では、両方のテナントがOIDC `web-app` アプリケーションを構成し、ユーザーを認証するために認証コードフローを使用し、認証が行われた後にセッションクッキーが生成されることを要求している。GoogleまたはGitHubのどちらかが現在のユーザーを認証した後、ユーザーは認証されたユーザー用の `/signed-in` 、例えばJAX-RSエンドポイント上のセキュアなリソースパスに戻されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:619
#, fuzzy
msgid "Finally, to complete the default tenant resolution, set the following configuration property:"
msgstr "最後に、デフォルトのテナント解決を完了するには、以下の構成プロパティを設定します："

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:624
#, no-wrap
msgid ""
"quarkus.http.auth.permission.login.paths=/google,/github\n"
"quarkus.http.auth.permission.login.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:629
#, fuzzy
msgid "If the endpoint is running on `http://localhost:8080`, you can also provide UI options for users to log in to either `http://localhost:8080/google` or `http://localhost:8080/github`, without having to add specific`/google` or `/github` JAX-RS resource paths.  Tenant identifiers are also recorded in the session cookie names after the authentication is completed.  Therefore, authenticated users can access the secured application area without requiring either the `google` or `github` path values to be included in the secured URL."
msgstr "エンドポイントが `http://localhost:8080` で実行されている場合、ユーザーがログインするための UI オプションを `http://localhost:8080/google` または `http://localhost:8080/github` `/github` のどちらかにログインするための UI オプションを提供することもできます。テナント識別子は、認証が完了した後のセッションクッキー名にも記録されます。したがって、認証されたユーザーは、 `google` または `github` パス値をセキュアな URL に含めることなく、セキュアなアプリケーション領域にアクセスできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:631
#, fuzzy
msgid "Default resolution can also work for Bearer token authentication but it might be less practical in this case because a tenant identifier will always need to be set as the last path segment value."
msgstr "デフォルトの解決はベアラートークン認証でも機能するが、テナント識別子を常に最後のパスセグメント値として設定する必要があるため、この場合はあまり実用的ではないかもしれない。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:633
#, fuzzy, no-wrap
msgid "Resolve with `TenantResolver`"
msgstr "で解決する。 `TenantResolver`"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:636
#, fuzzy
msgid "The following `application.properties` example shows how you can resolve the tenant identifier of two tenants named `a` and `b` by using the `TenantResolver` method:"
msgstr "次の `application.properties` の例では、 `a` と `b` という2つのテナントのテナント識別子を、 `TenantResolver` メソッドを使って解決する方法を示しています："

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:643
#, no-wrap
msgid ""
"# Tenant 'a' configuration\n"
"quarkus.oidc.a.auth-server-url=http://localhost:8180/realms/quarkus-a\n"
"quarkus.oidc.a.client-id=client-a\n"
"quarkus.oidc.a.credentials.secret=client-a-secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:648
#, no-wrap
msgid ""
"# Tenant 'b' configuration\n"
"quarkus.oidc.b.auth-server-url=http://localhost:8180/realms/quarkus-b\n"
"quarkus.oidc.b.client-id=client-b\n"
"quarkus.oidc.b.credentials.secret=client-b-secret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:651
#, fuzzy
msgid "You can return the tenant ID of either `a` or `b` from `quarkus.oidc.TenantResolver`:"
msgstr "`quarkus.oidc.TenantResolver` から、 `a` または `b` のテナント ID を返すことができます："

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:655
#, no-wrap
msgid "import quarkus.oidc.TenantResolver;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:671
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        if (path.endsWith(\"a\")) {\n"
"            return \"a\";\n"
"        } else if (path.endsWith(\"b\")) {\n"
"            return \"b\";\n"
"        } else {\n"
"            // default tenant\n"
"            return null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:674
#, fuzzy
msgid "In this example, the value of the last request path segment is a tenant ID, but if required, you can implement a more complex tenant identifier resolution logic."
msgstr "この例では、最後のリクエストパスセグメントの値はテナントIDですが、必要であれば、より複雑なテナント識別子解決ロジックを実装できます。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:676
#, fuzzy, no-wrap
msgid "Resolve with annotations"
msgstr "注釈付きで解決"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:679
#, fuzzy
msgid "You can use the `io.quarkus.oidc.Tenant` annotation for resolving the tenant identifiers as an alternative to using `io.quarkus.oidc.TenantResolver`."
msgstr "`io.quarkus.oidc.TenantResolver` を使用する代わりに、 `io.quarkus.oidc.Tenant` アノテーションを使用してテナント識別子を解決することができます。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:683
#, fuzzy
msgid "Proactive HTTP authentication must be disabled (`quarkus.http.auth.proactive=false`) for this to work. For more information, see xref:security-proactive-authentication.adoc[Proactive authentication]."
msgstr "この機能を使用するには、プロアクティブHTTP認証を無効（ `quarkus.http.auth.proactive=false` ）にする必要があります。詳細については、プロアクティブ xref:security-proactive-authentication.adoc[認証を] 参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:688
#, fuzzy
msgid "Assuming your application supports two OIDC tenants (`hr`, and default), all resource methods and classes carrying `@Tenant(\"hr\")` will be authenticated using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`, while all other classes and methods will still be authenticated using the default OIDC provider."
msgstr "アプリケーションが2つのOIDCテナント（ `hr` 、およびデフォルト）をサポートしていると仮定すると、 `@Tenant(\"hr\")` を持つすべてのリソースメソッドとクラスは、 `quarkus.oidc.hr.auth-server-url` によって構成されたOIDCプロバイダを使用して認証され、他のすべてのクラスとメソッドは、デフォルトのOIDCプロバイダを使用して認証されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:695
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:698
#, no-wrap
msgid ""
"import io.quarkus.oidc.Tenant;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:702
#, no-wrap
msgid ""
"@Authenticated\n"
"@Path(\"/api/hello\")\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:710
#, no-wrap
msgid ""
"    @Tenant(\"hr\") <1>\n"
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String sayHello() {\n"
"        return \"Hello!\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:712
#, fuzzy
msgid "The `io.quarkus.oidc.Tenant` annotation must be placed either on resource class or resource method."
msgstr "`io.quarkus.oidc.Tenant` アノテーションは、リソース・クラスかリソース・メソッドに付けなければならない。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:714
#, fuzzy, no-wrap
msgid "Dynamic tenant configuration resolution"
msgstr "動的なテナント構成の解決"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:718
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr "サポートしたいさまざまなテナントに対して、より動的な設定が必要で、設定ファイルに複数のエントリーを入れたくない場合は、 `io.quarkus.oidc.TenantConfigResolver` が利用出来ます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:720
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "このインターフェイスを使用すると、実行時にテナント設定を動的に作成することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:724
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:727
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:733
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.quarkus.oidc.OidcRequestContext;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:736
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantConfigResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:741
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:752
#, no-wrap
msgid ""
"        if (\"tenant-c\".equals(parts[1])) {\n"
"            // Do 'return requestContext.runBlocking(createTenantConfig());'\n"
"            // if a blocking call is required to create a tenant config\n"
"            return Uni.createFromItem(createTenantConfig());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:756
#, no-wrap
msgid ""
"        // resolve to default tenant configuration\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:759
#, no-wrap
msgid ""
"    private Supplier<OidcTenantConfig> createTenantConfig() {\n"
"        final OidcTenantConfig config = new OidcTenantConfig();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:764
#, no-wrap
msgid ""
"        config.setTenantId(\"tenant-c\");\n"
"        config.setAuthServerUrl(\"http://localhost:8180/realms/tenant-c\");\n"
"        config.setClientId(\"multi-tenant-client\");\n"
"        OidcTenantConfig.Credentials credentials = new OidcTenantConfig.Credentials();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:766
#, no-wrap
msgid "        credentials.setSecret(\"my-secret\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:768
#, no-wrap
msgid "        config.setCredentials(credentials);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:770
#, no-wrap
msgid "        // any other setting support by the quarkus-oidc extension\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:774
#, no-wrap
msgid ""
"        return () -> config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:777
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr "このメソッドから返される `OidcTenantConfig` は、`application.properties` から `oidc` 名前空間設定を解析するために使用されるものと同じです。`quarkus-oidc` エクステンションでサポートされている任意の設定を使用してデータを入力できます。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:778
#, fuzzy, no-wrap
msgid "Tenant resolution for OIDC `web-app` applications"
msgstr "OIDC `web-app` 申請のテナント決議"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:781
#, fuzzy
msgid "The simplest option for resolving OIDC `web-app` application configuration is to follow the steps described in the xref:default-tenant-resolver[Default resolution] section."
msgstr "OIDC `web-app` アプリケーション・コンフィギュレーションを解決するための最も簡単なオプションは、 xref:default-tenant-resolver[デフォルト解決の] セクションで説明した手順に従うことである。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:783
#, fuzzy
msgid "Try one of the options suggested below if the default resolution strategy does not work for your application setup."
msgstr "アプリケーションのセットアップでデフォルトの解像度戦略が機能しない場合は、以下のオプションのいずれかを試してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:785
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr "`service` と `web-app` の両方の OIDC アプリケーションの現在の HTTP リクエストを保護するために使用する必要があるテナント設定を選択する際には、次のようないくつかのオプションを使用できます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:787
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr "URL パスを確認します。たとえば、\"/service\" パスには `tenant-service` 設定を使用する必要がありますが、 \"/management\" パスには `tenant-manage` 設定を使用する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:788
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help to select between the `tenant-service` and `tenant-manage` configurations"
msgstr "たとえば、URL パスが常に '/service' である HTTP ヘッダーを確認します。\"Realm: service\" や \"Realm: management\" などのヘッダーは、`tenant-service` 設定や `tenant-manage` 設定のいずれかを選択する場合に役立ちます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:789
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr "URL クエリーパラメーターを確認します。ヘッダーを使用してテナント設定を選択するのと同じように機能します"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:791
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr "これらのオプションはすべて、OIDC `service` アプリケーションのカスタムの `TenantResolver` 実装や `TenantConfigResolver` 実装を使用して簡単に実装できます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:793
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr "ただし、OIDC `web-app` アプリケーションのコード認証フローを完了するために HTTP リダイレクトが必要なため、次の理由により、このリダイレクトリクエストの前後に同じテナント設定を選択するためにカスタム HTTP Cookie が必要になる場合があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:795
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the tenant configuration is resolved"
msgstr "単一のリダイレクト URL が OIDC プロバイダーに登録されている場合、リダイレクトリクエスト後の URL パスは同じではない可能性があります。元のリクエストパスは復元できますが、それはテナント設定が解決された後です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:796
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr "元のリクエスト中に使用された HTTP ヘッダーは、リダイレクト後に使用できなくなります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:797
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr "カスタム URL クエリーパラメーターは、リダイレクト後、テナント設定が解決された後に復元されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:799
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr "リダイレクトの前後に `web-app` アプリケーションのテナント設定を解決するための情報を確実に利用できるようにするための 1 つのオプションは、Cookie を使用することです。以下はその例です。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:805
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:811
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.core.http.Cookie;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:825
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        List<String> tenantIdQuery = context.queryParam(\"tenantId\");\n"
"        if (!tenantIdQuery.isEmpty()) {\n"
"            String tenantId = tenantIdQuery.get(0);\n"
"            context.addCookie(Cookie.cookie(\"tenant\", tenantId));\n"
"            return tenantId;\n"
"        } else if (context.cookieMap().containsKey(\"tenant\")) {\n"
"            return context.getCookie(\"tenant\").getValue();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:829
#, no-wrap
msgid ""
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:832
#, no-wrap
msgid "Disabling Tenant Configurations"
msgstr "テナント設定を無効にする"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:835
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "カスタムの `TenantResolver` および `TenantConfigResolver` の実装では、現在のリクエストからテナントを推測できず、デフォルトのテナント設定へのフォールバックが必要な場合は `null` を返すことがあります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:837
#, fuzzy
msgid "If you expect that the custom resolvers will always infer a tenant then you do not need to configure the default tenant resolution."
msgstr "カスタム・リゾルバが常にテナントを推測することを想定している場合は、デフォルトのテナント・リゾルバを設定する必要はありません。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:839
#, fuzzy
msgid "To disable the default tenant configuration, set `quarkus.oidc.tenant-enabled=false`."
msgstr "デフォルトのテナント構成を無効にするには、 `quarkus.oidc.tenant-enabled=false` を設定します。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:843
#, fuzzy
msgid "The default tenant configuration is automatically disabled when `quarkus.oidc.auth-server-url` is not configured but either custom tenant configurations are available or `TenantConfigResolver` is registered."
msgstr "デフォルトのテナント構成は、 `quarkus.oidc.auth-server-url` が設定されていないが、カスタムのテナント構成が利用可能であるか、 `TenantConfigResolver` が登録されている場合に、自動的に無効になります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:846
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "テナント固有の設定を無効にすることもできます。例: `quarkus.oidc.tenant-a.tenant-enabled=false`"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:847
#, no-wrap
msgid "References"
msgstr "リファレンス"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:850
#, fuzzy
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC設定プロパティ]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:851
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:852
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:853
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:854
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:854
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkusセキュリティの概要]"

#~ msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
#~ msgstr "ソリューションは `security-openid-connect-multi-tenancy` {quickstarts-tree-url}/security-openid-connect-multi-tenancy[ディレクトリ] にあります。"

#~ msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
#~ msgstr "{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] をインポートし、デフォルトのレルムを作成します。"

#~ msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
#~ msgstr "{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] をインポートし、テナント `tenant-a` のレルムを作成します。"

#~ msgid "You can use the annotations and CDI interceptors for resolving the tenant identifiers as an alternative to using `quarkus.oidc.TenantResolver`. This can be done by setting the value for the key `OidcUtils.TENANT_ID_ATTRIBUTE` on the current `RoutingContext`."
#~ msgstr "`quarkus.oidc.TenantResolver` を使用する代わりに、アノテーションと CDI インターセプターを使用してテナント識別子を解決できます。これは、現在の `RoutingContext` のキー `OidcUtils.TENANT_ID_ATTRIBUTE` の値を設定することで実行できます。"

#~ msgid "Assuming your application supports two OIDC tenants (`hr`, and default) first you need to define one annotation per tenant ID other than default:"
#~ msgstr "アプリケーションが 2 つの OIDC テナント (`hr` とデフォルト) をサポートしていると仮定した場合、最初にデフォルト以外のテナント ID ごとに 1 つのアノテーションを定義する必要があります。"

#~ msgid "Next, you'll need one interceptor for each of those annotations:"
#~ msgstr "次に、これらのアノテーションごとに 1 つのインターセプターが必要になります。"

#~ msgid "Now all methods and classes carrying `@HrTenant` will be authenticated using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`, while all other classes and methods will still be authenticated using the default OIDC provider."
#~ msgstr "これで、`@HrTenant` を運ぶすべてのメソッドとクラスは、`quarkus.oidc.hr.auth-server-url` によって設定された OIDC プロバイダーを使用して認証されますが、他のすべてのクラスとメソッドは、デフォルトの OIDC プロバイダーを使用して認証されます。"

#~ msgid "Resolving Tenant Identifiers with Annotations"
#~ msgstr "アノテーション付きテナント識別子の解決"

#~ msgid "Programmatically Resolving Tenants Configuration"
#~ msgstr "テナントの設定をプログラムで解決"

#~ msgid "Tenant Resolution for OIDC 'web-app' applications"
#~ msgstr "OIDCの \"web-app\" アプリケーションのためのテナント解決"

#~ msgid "If it is expected that the custom resolvers will always infer a tenant then the default tenant configuration is not needed. One can disable it with the `quarkus.oidc.tenant-enabled=false` setting."
#~ msgstr "カスタムリゾルバが常にテナントを推論することが予想される場合、デフォルトのテナント設定は必要ありません。 `quarkus.oidc.tenant-enabled=false` の設定で無効にすることができます。"

#, fuzzy
#~ msgid "Please read the xref:security-oidc-bearer-token-authentication-concept.adoc[OIDC Bearer authentication] guide if you need to authorize a tenant using Bearer Token Authorization."
#~ msgstr "ベアラートークン認証を使用してテナントを認可する必要がある場合は、 xref:security-oidc-bearer-token-authentication-concept.adoc[OIDCベアラー] 認証ガイドをお読みください。"

#, fuzzy
#~ msgid "If you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow, read the xref:security-oidc-code-flow-authentication-concept.adoc[OIDC code flow mechanism for protecting web applications] guide."
#~ msgstr "OpenID Connect認可コードフローを使用してテナントの認証と認可を行う必要がある場合は、「 xref:security-oidc-code-flow-authentication-concept.adoc[OIDCコードフローメカニズムでWebアプリケーションを保護する] 」ガイドをお読みください。"

#, fuzzy
#~ msgid "Proactive HTTP authentication must be disabled (`quarkus.http.auth.proactive=false`) for this to work. For more information, see xref:security-proactive-authentication-concept.adoc[Proactive authentication]."
#~ msgstr "この機能を使用するには、プロアクティブHTTP認証を無効にする必要があります（ `quarkus.http.auth.proactive=false` ）。詳しくは、「プロアクティブ xref:security-proactive-authentication-concept.adoc[認証] 」を参照してください。"

#~ msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
#~ msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"

#, fuzzy
#~ msgid "Please read the xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer authentication] guide if you need to authorize a tenant using Bearer Token Authorization."
#~ msgstr "ベアラートークン認証を使用してテナントを認可する必要がある場合は、 xref:security-oidc-bearer-authentication-concept.adoc[OIDCベアラートークン認証] ガイドをお読みください。"

#~ msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. Note that a `%prod` prodile prefix is used with `quarkus.oidc.auth-server-url` - it is done to support testing a multi-tenant application with `Dev Services For Keycloak`. This configuration is using a Keycloak instance to authenticate users."
#~ msgstr "最初の設定は、リクエストからテナントを推測できない場合に使用されるデフォルトのテナント設定です。 `quarkus.oidc.auth-server-url` で `%prod` プロファイルプレフィックスが使われていることに注意してください。これは `Dev Services For Keycloak` を使ったマルチテナントアプリケーションのテストをサポートするために行われます。この設定では、Keycloakインスタンスを使用してユーザーを認証しています。"

#~ msgid "Configuration Reference"
#~ msgstr "設定リファレンス"

#~ msgid ""
#~ "@Path(\"/{tenant}\")\n"
#~ "public class HomeResource {\n"
#~ msgstr ""
#~ "@Path(\"/{tenant}\")\n"
#~ "public class HomeResource {\n"

#~ msgid "In order to set up the `tenant-a` configuration to use Google OpenID Provider, you need to create a project as described https://developers.google.com/identity/protocols/OpenIDConnect[here]."
#~ msgstr "Google OpenID プロバイダーを使用するように `tenant-a` を設定するには、 https://developers.google.com/identity/protocols/OpenIDConnect[こちら] の説明どおりにプロジェクトを作成する必要があります。"

#~ msgid "Once you create the project and have your project's `client_id` and `client_secret`, you can try to configure a tenant as follows:"
#~ msgstr "プロジェクトを作成し、プロジェクトの `client_id` と `client_secret` を取得したら、次のようにテナントの設定を試みることができます。"

#~ msgid ""
#~ "# Tenant configuration using Google OpenID Provider\n"
#~ "quarkus.oidc.tenant-b.auth-server-url=https://accounts.google.com\n"
#~ "quarkus.oidc.tenant-b.application-type=web-app\n"
#~ "quarkus.oidc.tenant-b.client-id={GOOGLE_CLIENT_ID}\n"
#~ "quarkus.oidc.tenant-b.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
#~ "quarkus.oidc.tenant-b.token.issuer=https://accounts.google.com\n"
#~ "quarkus.oidc.tenant-b.authentication.scopes=email,profile,openid\n"
#~ msgstr ""
#~ "# Tenant configuration using Google OpenID Provider\n"
#~ "quarkus.oidc.tenant-b.auth-server-url=https://accounts.google.com\n"
#~ "quarkus.oidc.tenant-b.application-type=web-app\n"
#~ "quarkus.oidc.tenant-b.client-id={GOOGLE_CLIENT_ID}\n"
#~ "quarkus.oidc.tenant-b.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
#~ "quarkus.oidc.tenant-b.token.issuer=https://accounts.google.com\n"
#~ "quarkus.oidc.tenant-b.authentication.scopes=email,profile,openid\n"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "Docker"
#~ msgstr "Docker"

#~ msgid "./mvnw package -Pnative\n"
#~ msgstr "./mvnw package -Pnative\n"
