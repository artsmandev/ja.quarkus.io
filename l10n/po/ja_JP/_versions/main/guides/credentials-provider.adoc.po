# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2023-10-15 08:09+0000\n"
"PO-Revision-Date: 2023-04-26 14:07+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/credentials-provider.adoc:6
#, no-wrap
msgid "Using a Credentials Provider"
msgstr "クレデンシャルプロバイダーの使用"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:19
msgid "Interacting with a datastore typically implies first connecting using credentials.  Those credentials will allow the client to be identified, authenticated and eventually authorized.  Username/password based authentication is very common, but that is not by any means the only one.  Such credentials information may appear in the application configuration, but it is becoming increasingly popular to store this type of sensitive information in secure stores, such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few."
msgstr "データストアとのやりとりは、通常、最初にクレデンシャルを使用して接続することを意味します。これらのクレデンシャルによって、クライアントは識別され、認証され、最終的には認可されるようになります。ユーザー名/パスワードベースの認証は非常に一般的ですが、それだけではありません。このようなクレデンシャル情報はアプリケーションの設定に存在するかもしれませんが、HashiCorp Vault、Azure Key Vault、AWS Secrets Managerなどのセキュアなストアにこのタイプの機密情報を保存することが一般的になってきています。"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:25
msgid "To bridge datastores that consume credentials, which can take different forms, and secure stores that provide those credentials, Quarkus introduces an intermediate abstraction called `Credentials Provider`, that some extensions may support to consume credentials (e.g. `agroal`), and some others may implement to produce credentials (e.g. `vault`)."
msgstr "さまざまな形式をとることができるクレデンシャルを消費するデータストアと、それらのクレデンシャルを提供する安全なストアの橋渡しをするために、Quarkusでは、 `Credentials Provider` と呼ばれる中間的な抽象化を導入しています。これは、一部のエクステンションがクレデンシャルを消費するためにサポートしている場合もあれば(例: `agroal` )、クレデンシャルを生成するために実装している場合もあります(例: `vault` )。"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:28
msgid "This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers not yet implemented in Quarkus (e.g. Azure Key Vault)."
msgstr "このService Programming Interface(SPI)は、Quarkusにまだ実装されていないカスタムプロバイダ(Azure Key Vaultなど)をサポートしたい実装者が使用することもできます。"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:31
msgid "Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported by the following credentials consumer extensions:"
msgstr "現在、 `Credentials Provider` インターフェイスは `vault` エクステンションによって実装されており、以下のクレデンシャルコンシューマーエクステンションによってサポートされています。"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:33
msgid "`agroal`"
msgstr "`agroal`"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:34
msgid "`reactive-db2-client`"
msgstr "`reactive-db2-client`"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:35
msgid "`reactive-mysql-client`"
msgstr "`reactive-mysql-client`"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:36
msgid "`reactive-mssql-client`"
msgstr "`reactive-mssql-client`"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:37
msgid "`reactive-oracle-client`"
msgstr "`reactive-oracle-client`"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:38
msgid "`reactive-pg-client`"
msgstr "`reactive-pg-client`"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:39
msgid "`oidc`"
msgstr "`oidc`"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:40
msgid "`oidc-client`"
msgstr "`oidc-client`"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:41
msgid "`smallrye-reactive-messaging-rabbitmq`"
msgstr "`smallrye-reactive-messaging-rabbitmq`"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:45
msgid "All extensions that rely on username/password authentication also allow setting configuration properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required."
msgstr "ユーザー名/パスワード認証に依存するすべてのエクステンションでは、代替として `application.properties` で設定プロパティーを設定することもできます。しかし、クレデンシャルが生成されている場合 (例: `Vault Dynamic DB Credentials` ) やカスタムのクレデンシャルプロバイダが必要な場合は `Credentials Provider` が唯一のオプションです。"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:49
msgid "This guide will show how to use the `Credentials Provider` provided in the `vault` extension, then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional considerations regarding implementing a `Credentials Provider` in a new extension."
msgstr "このガイドでは、 `vault` エクステンションで提供されている `Credentials Provider` の使い方を紹介し、次にカスタム `Credentials Provider` の実装について見ていき、最後に新しいエクステンションで `Credentials Provider` を実装する際の追加考慮事項について説明します。"

#. type: Title ==
#: upstream/_versions/main/guides/credentials-provider.adoc:52
#, no-wrap
msgid "Vault Credentials Provider"
msgstr "Vault Credentials Provider"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:55
msgid "To configure a `Vault Credentials Provider` you need to provide the following properties:"
msgstr "`Vault Credentials Provider` を設定するには、以下のプロパティーを提供する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:59
#, no-wrap
msgid "quarkus.vault.credentials-provider.<name>.<property>=<value>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:62
msgid "The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}."
msgstr "`<name>` は、コンシューマーがこのプロバイダーを参照するために使用されます。 `<property>` および `<value>` フィールドは、 `Vault Credentials Provider` に特有です。完全な詳細については、{vault-datasource-guide}を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:64
msgid "For instance:"
msgstr "例えば"

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:68
#, no-wrap
msgid "quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:71
msgid "Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:"
msgstr "一度定義すると、 `mydatabase` プロバイダーは `Credentials Provider` インターフェイスをサポートするすべてのエクステンションで使用することができます。例えば、 `agroal` の場合次のようになります:"

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:79
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.credentials-provider = mydatabase\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:86
msgid "Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property is not included because the value will come from the `mydatabase` credentials provider we just defined.  An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username` property from configuration. All consuming extensions do support the ability to fetch both the username and password from the provider, or just the password."
msgstr "`quarkus.datasource.username` はオリジナルの `agroal` プロパティですが、値は先ほど定義した `mydatabase`クレデンシャルプロバイダーから取得されるため、`password` プロパティは含まれていません。 別の方法としては、Vault でユーザー名とパスワードの両方を定義し、設定から プロパティーを削除する方法があります。すべてのコンシューマーエクステンションは、ユーザー名とパスワードの両方をプロバイダから取得する機能、またはパスワードのみを取得する機能をサポートしています。"

#. type: Title ==
#: upstream/_versions/main/guides/credentials-provider.adoc:87
#, fuzzy, no-wrap
msgid "Time Limited Credentials"
msgstr "期間限定クレデンシャル"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:93
#, fuzzy
msgid "A Credentials Provider may provide time limited credentials. For instance, the `vault` extension. When using time limited credentials, it is important to understand that consuming extensions will not have their credentials refreshed automatically by the Credentials Provider. Each extension must be configured to recycle its connections before the credentials expire."
msgstr "クレデンシャルプロバイダは、期間限定クレデンシャルを提供できる。たとえば、 `vault` エクステンション。期限付きクレデンシャルを使用する場合、消費するエクステンションはクレデンシャルプロバイダによって自動的にクレデンシャルをリフレッシュされないことを理解することが重要である。各エクステンションは、クレデンシャルの有効期限が切れる前に接続をリサイクルするように設定する必要がある。"

#. type: Title ===
#: upstream/_versions/main/guides/credentials-provider.adoc:94
#, no-wrap
msgid "Datasources"
msgstr "データソース"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:99
#, fuzzy
msgid "Datastore connections are typically pooled. When using a time limited credentials provider, the pool must be configured to recycle connections before each connection's credentials expire. Both JDBC and Reactive datasources have a `max-lifetime` configuration property that can be used to achieve this."
msgstr "データストア接続は通常プールされる。時間制限付き資格情報プロバイダを使用する場合、各接続の資格情報の有効期限が切れる前に接続をリサイクルするようにプールを構成する必要があります。JDBC と Reactive の両データソースには、これを実現するために使用できる `max-lifetime` 構成プロパティがあります。"

#. type: Block title
#: upstream/_versions/main/guides/credentials-provider.adoc:100
#, fuzzy, no-wrap
msgid "JDBC Datasource"
msgstr "JDBCデータソース"

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:104
#, no-wrap
msgid "quarkus.datasource.jdbc.max-lifetime=60m\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/credentials-provider.adoc:106
#, no-wrap
msgid "Reactive Datasource"
msgstr "リアクティブデータソース"

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:110
#, no-wrap
msgid "quarkus.datasource.reactive.max-lifetime=60m\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:114
#, fuzzy
msgid "It is the developer's responsibility to ensure that the configuration of the datasource's `max-lifetime` property is less than the credentials expiration time."
msgstr "データソースの `max-lifetime` プロパティの設定が、認証情報の有効期限より短いことを確認するのは、開発者の責任である。"

#. type: Title ===
#: upstream/_versions/main/guides/credentials-provider.adoc:115
#, no-wrap
msgid "RabbitMQ"
msgstr "RabbitMQ"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:120
#, fuzzy
msgid "When using the `smallrye-reactive-messaging-rabbitmq` extension there is no configuration needed. The extension will automatically recycle connections before their credentials expire based on the expiration timestamp provided by the Credentials Provider."
msgstr "`smallrye-reactive-messaging-rabbitmq` 拡張機能を使う場合、設定は不要である。認証情報プロバイダによって提供される有効期限タイムスタンプに基づいて、認証情報が期限切れになる前に、エクステンションは自動的に接続をリサイクルします。"

#. type: Title ==
#: upstream/_versions/main/guides/credentials-provider.adoc:121
#, no-wrap
msgid "Custom Credentials Provider"
msgstr "カスタムクレデンシャルプロバイダー"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:124
msgid "Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store."
msgstr "カスタムクレデンシャルプロバイダーの実装は、QuarkusでVault製品がまだサポートされていない場合や、カスタムストアからクレデンシャルを取得する必要がある場合の唯一のオプションです。"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:126
msgid "The only interface to implement is:"
msgstr "実装するインターフェースはこれだけです。"

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:130
#, no-wrap
msgid "public interface CredentialsProvider {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:133
#, no-wrap
msgid ""
"    String USER_PROPERTY_NAME = \"user\";\n"
"    String PASSWORD_PROPERTY_NAME = \"password\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:135
#, no-wrap
msgid "    Map<String, String> getCredentials(String credentialsProviderName);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:137
#: upstream/_versions/main/guides/credentials-provider.adoc:161
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:140
msgid "`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication."
msgstr "`USER_PROPERTY_NAME` と `PASSWORD_PROPERTY_NAME` は、ユーザー名/パスワードベースの認証をサポートするすべてのコンシューマーエクステンションで認識されるべき標準的なプロパティーです。"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:142
msgid "It is required that implementations be valid `@ApplicationScoped` CDI beans."
msgstr "実装は有効な `@ApplicationScoped` CDI Beanであることが要求されます。"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:144
msgid "Here is a simple example:"
msgstr "簡単な例を挙げてみます。"

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:150
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Unremovable\n"
"public class MyCredentialsProvider implements CredentialsProvider {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:153
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> getCredentials(String credentialsProviderName) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:159
#, no-wrap
msgid ""
"        Map<String, String> properties = new HashMap<>();\n"
"        properties.put(USER_PROPERTY_NAME, \"hibernate_orm_test\");\n"
"        properties.put(PASSWORD_PROPERTY_NAME, \"hibernate_orm_test\");\n"
"        return properties;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:164
msgid "Note that we decided here to return both the username and the password."
msgstr "ここでは、ユーザー名とパスワードの両方を返すことにしました。"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:166
msgid "This provider may be used in a datasource definition like this:"
msgstr "このプロバイダは、次のようなデータソースの定義で使用することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:172
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.credentials-provider=custom\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5431/hibernate_orm_test\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:175
msgid "It is also possible to pass configuration properties to the provider using standard MicroProfile Config injection:"
msgstr "標準的なMicroProfile Configインジェクションを使用して、設定プロパティーをプロバイダに渡すことも可能です。"

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:179
#, no-wrap
msgid "custom.foo=bar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:182
msgid "And in the provider implementation:"
msgstr "そして、プロバイダの実装では"

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:187
#, no-wrap
msgid ""
"@Inject\n"
"Config config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:190
#, no-wrap
msgid ""
"@Override\n"
"public Map<String, String> getCredentials(String credentialsProviderName) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:194
#, no-wrap
msgid ""
"    System.out.println(\"MyCredentialsProvider called with foo=\" + config.getValue(credentialsProviderName + \".foo\", String.class));\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/credentials-provider.adoc:196
#, no-wrap
msgid "New Credentials Provider extension"
msgstr "新しいクレデンシャルプロバイダーエクステンション"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:199
msgid "When creating a custom credentials provider in a new extension, there are a few additional considerations."
msgstr "新しいエクステンションでカスタムクレデンシャルプロバイダーを作成する際には、いくつかの追加考慮事項があります。"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:201
msgid "First, you need to name it to avoid collisions in case multiple credentials providers are available in the project:"
msgstr "まず、プロジェクト内で複数のクレデンシャルプロバイダーが利用可能な場合の衝突を避けるために、名前を付ける必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:208
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Unremovable\n"
"@Named(\"my-credentials-provider\")\n"
"public class MyCredentialsProvider implements CredentialsProvider {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:211
msgid "It is the responsibility of the consumer to allow a `credentials-provider-name` property:"
msgstr "`credentials-provider-name` のプロパティを許可するのはコンシューマーの責任です。"

#. type: delimited block -
#: upstream/_versions/main/guides/credentials-provider.adoc:216
#, no-wrap
msgid ""
"quarkus.datasource.credentials-provider = custom\n"
"quarkus.datasource.credentials-provider-name = my-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:220
msgid "The extension should allow runtime config, such as the `CredentialsProviderConfig` from the `vault` extension to configure any custom property in the provider. For an AWS Secrets Manager extension, this could be:"
msgstr "エクステンションでは、 `vault` エクステンションの `CredentialsProviderConfig` のように、ランタイム設定でプロバイダー内の任意のカスタムプロパティーを設定できるようにしておく必要があります。AWS Secrets Managerエクステンションの場合は、次のようになります。"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:222
msgid "`region`"
msgstr "`region`"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:223
msgid "`credentials-type`"
msgstr "`credentials-type`"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:224
msgid "`secrets-id`"
msgstr "`secrets-id`"

#. type: Plain text
#: upstream/_versions/main/guides/credentials-provider.adoc:228
msgid "Note also that some consumers such as `agroal` will add to their connection configuration any properties returned by the credentials provider, not just the username and password. So when you design the new credentials provider limit the properties to what would be understood by consumers, or provide appropriate configuration options to support different modes."
msgstr "また、 `agroal` のようなコンシューマーの中には、ユーザー名とパスワードだけでなく、クレデンシャル・プロバイダが返すプロパティーを接続設定に追加するものがあることにも注意してください。したがって、新しいクレデンシャル・プロバイダーを設計する際には、プロパティーをコンシューマーが理解できるものに限定するか、または異なるモードをサポートするための適切な設定オプションを提供してください。"

#~ msgid "Prerequisites"
#~ msgstr "前提条件"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"
