msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"Mutiny is an event-driven Reactive Programming library.\n"
"Like other reactive programming libraries, it uses streams as the primary construct.\n"
"These streams convey events, and your code processes these events.\n"
"Most of the time, your code is only interested in item and failure events.\n"
"But there are other kinds of events such as cancellation, request, completion, and so on."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"For each kind of event, there is an associated _group_ providing the methods to handle that specific event: `onItem()`, `onFailure()`, `onCompletion()` and so on.\n"
"These groups provide two methods to peek at the various events without impacting its distribution: `invoke` and `call`.\n"
"It does not transform the received event; it notifies you that something happened and let you react."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"The `invoke` method is synchronous and does not return anything.\n"
"Mutiny invokes the configured callback when the observed stream dispatches the event:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"As said above, `invoke` is synchronous.\n"
"Mutiny invokes the callback and propagates the event downstream when the callback returns. It blocks the dispatching."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"The `invoke` method does not change the event, except in one case.\n"
"If the `invoke` callback throws an exception, the downstream does not get the actual event but get a failure event instead."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"As shown in the previous snippet, you can use this approach to delay items.\n"
"But the primary use case is about completing asynchronous actions:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"Under the hood, Mutiny gets the `Uni` (by invoking the callback) and subscribes to it.\n"
"It observes the item or failure event from that `Uni`.\n"
"It discards the item value as only the emission matters in this case."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid "If the callback throws an exception or the produced `Uni` produces a failure, Mutiny propagates that failure (or a `CompositeException`) downstream, replacing the original event."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"Use `invoke` for implementing synchronous side-effects or logging events.\n"
"The asynchronous nature of `call` makes it perfect for implementing asynchronous side-effects, such as closing resources, flushing data, delay items, and so on."
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, no-wrap
msgid "Peeking at the streams"
msgstr "ストリームを覗く"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, no-wrap
msgid "How to observe events without touching the streams."
msgstr "ストリームに触れずにイベントを観察する方法"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:17
msgid "It's not rare that you need to look at these various events to understand better what's going on or implement specific side effects. For example, you may need to close a resource after a completion event or log a message on failure or cancellation."
msgstr "何が起こっているのかをよりよく理解したり、特定の副作用を実装したりするために、これらの様々なイベントを見る必要があることは稀ではありません。例えば、完了イベントの後にリソースを閉じたり、失敗やキャンセル時にメッセージをログに記録したりする必要があるかもしれません。"

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:22
#, no-wrap
msgid "The invoke method"
msgstr "invoke メソッド"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:39
msgid "image:/assets/images/posts/mutiny-invoke-call/invoke.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/invoke.png[]"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:41
msgid "Of course, we highly recommend you not to block."
msgstr "もちろん、ブロックしないことを強くお勧めします。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:43
msgid "The following snippets show how you can log the different types of events."
msgstr "次のスニペットは、さまざまな種類のイベントをログに記録する方法を示しています。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:56
msgid "The arrows from the previous code snippet indicate if the event comes from the upstream (source) or downstream (consumer)."
msgstr "前のコードスニペットの矢印は、イベントが上流(ソース)から来るのか、下流(コンシューマ)から来るのかを示しています。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:61
msgid "When observing the failure event, if the callback throws an exception, Mutiny propagates a `CompositeException` aggregating the original failure and the callback failure."
msgstr "失敗イベントを観測しているときに、コールバックが例外を投げると、Mutinyは元の失敗とコールバックの失敗を集約した `CompositeException` を伝播します。"

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:62
#, no-wrap
msgid "The call method"
msgstr "呼び出し方法"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:65
msgid "Unlike `invoke`, `call` is asynchronous, and the callback returns a `Uni<?>` object."
msgstr "`invoke` とは異なり、 `call` は非同期で、コールバックは `Uni<?>` オブジェクトを返します。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:67
msgid "`call` is often used when you need to implement asynchronous side-effects, such as closing resources."
msgstr "`call` リソースを閉じるなど、非同期の副作用を実装する必要がある場合によく使われます。"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:69
#, fuzzy
msgid "image:/assets/images/posts/mutiny-invoke-call/call.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/call.png[alt=\"call\"]"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:71
msgid "Mutiny does not dispatch the original event downstream until the Uni returned by the callback emits an item:"
msgstr "Mutinyは、コールバックによって返されたUniがアイテムを放出するまで、元のイベントを下流にディスパッチしません。"

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:96
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:99
msgid "The `invoke` and `call` methods are handy when you need to observe a stream without changing the transiting events."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:104
msgid "The following table highlights the key differences:"
msgstr ""

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:107
#, no-wrap
msgid "Method"
msgstr "メソッド"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:107
#, no-wrap
msgid "`invoke`"
msgstr "`invoke`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
#, no-wrap
msgid "`call`"
msgstr "`call`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
#, no-wrap
msgid "Nature"
msgstr "種類"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
#, no-wrap
msgid "synchronous"
msgstr "同期"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
#, no-wrap
msgid "asynchronous"
msgstr "非同期"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
#, no-wrap
msgid "Return type"
msgstr "戻り値の型"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
#, no-wrap
msgid "`void`"
msgstr "`void`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
#, no-wrap
msgid "`Uni<?>`"
msgstr "`Uni<?>`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
#, no-wrap
msgid "Main Use cases"
msgstr "主なユースケース"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
#, no-wrap
msgid "logging"
msgstr "ロギング"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:115
#, no-wrap
msgid "closing resources, flushing data"
msgstr "リソースのクローズ、データのフラッシュ"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:117
msgid "These methods are available for every kind of event in the associated group."
msgstr "これらのメソッドは、関連するグループ内のあらゆる種類のイベントに対して利用可能です。"
