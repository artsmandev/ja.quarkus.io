msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter: title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Mutiny - Flow control and Back-pressure"
msgstr "Mutiny-フローコントロールとバックプレッシャー"

#. type: YAML Front Matter: synopsis
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "How does flow control works with Mutiny"
msgstr "Mutinyでフロー制御はどのように機能するのか？"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Reactive Programming offers an elegant, flexible, and powerful way to write asynchronous code.\n"
"It supports failure handling, both sequential and parallel operation composition, and plenty of operators.\n"
"Reactive programming promotes data streams as a primary construct, and your code is observing streams and reacting to signals."
msgstr "リアクティブ・プログラミングは、非同期コードを書くためのエレガントで柔軟かつ強力な方法を提供します。障害処理、逐次処理と並列処理の合成、豊富な演算子をサポートしています。リアクティブ・プログラミングはデータ・ストリームを主要な構成要素として推進し、コードはストリームを観察してシグナルに反応します。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Origins of back-pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "背圧の起源( link:https://impurepics.com/posts/2018-05-26-backpressure-origins.html[https://impurepics.com/posts/2018-05-26-backpressure-origins.html )]"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"However, using data streams as primary constructs does not come without some issues.\n"
"One of the main problems is the need for flow control."
msgstr "しかし、データ・ストリームを主要な構成要素として使用することは、いくつかの問題がないわけではありません。主な問題の1つは、フロー制御の必要性です。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "The producer/consumer problem"
msgstr "生産者と消費者の問題"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Let's imagine a fast producer and a slow consumer.\n"
"The producer sends events too quickly for the consumer that can't keep up.\n"
"That phenomenon is remarkably well illustrated in the following picture."
msgstr "速いプロデューサーと遅いコンシューマーを想像してみましょう。プロデューサーのイベント送信速度が速すぎて、コンシューマーはそれについていけません。この現象は次の図によく表れています。"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "No Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "背圧がない ( https://impurepics.com/posts/2018-05-26-backpressure-origins.html )"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Let's see some code.\n"
"Imagine a producer emitting an event every ten milliseconds, while the consumer can only consume one per second."
msgstr "コードを見てみましょう。プロデューサが10ミリ秒ごとにイベントを発行し、コンシューマが1秒に1つしかイベントを消費できないとします。"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "If you run that code, you will see that the subscriber gets a `MissingBackPressureFailure,` indicating that the downstream cannot keep up:"
msgstr "このコードを実行すると、サブスクライバーがダウンストリームが追いつかないことを示す `MissingBackPressureFailure,` を取得することがわかります："

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "emitOn"
msgstr "エミットオン"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"In the previous code, you may wonder about the `emitOn.`\n"
"It's a Mutiny operator allowing controlling on which thread the Subscriber receives the events.\n"
"Back-pressure is often required when multiple threads are involved, as in a single thread approach, blocking the thread would block the source, which may have dramatic consequences."
msgstr "前のコードでは、 `emitOn.` It's a Mutiny オペレータを使用して、サブスクライバがどのスレッドでイベントを受信するかを制御しています。シングルスレッドのアプローチでは、スレッドをブロックするとソースがブロックされ、劇的な結果を招く可能性があるためです。"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "So, what can we do to handle this _overflow_?"
msgstr "では、この _オーバーフローに_ 対応するためにはどうしたらいいのでしょうか。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Buffering items"
msgstr "バッファリング項目"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"The first natural solution uses buffers.\n"
"The consumer can buffer the events, so it does not fail:"
msgstr "最初の自然な解決策は、バッファを使うことです。コンシューマはイベントをバッファすることができるので、失敗することはありません："

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Buffering to avoid overwhelming downstream consumers"
msgstr "下流の消費者に負担をかけないためのバッファリング"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Using a buffer allows handling small bumps, but it's not a long term solution.\n"
"If we update the code to use a large buffer, the consumer can handle more events but eventually fails:"
msgstr "バッファを使用することで、小さなバンプを処理することができますが、長期的な解決策にはなりません。大きなバッファを使用するようにコードを更新すると、コンシューマはより多くのイベントを処理できますが、最終的には失敗します："

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"You can imagine increasing the buffer's size, but it's hard to anticipate the optimal value.\n"
"What about unbounded buffers?\n"
"In general, that's a terrible idea as you may run out of memory."
msgstr "バッファのサイズを大きくすることは想像できますが、最適な値を予想するのは困難です。バインドされていないバッファについてはどうですか？一般的に、メモリが足りなくなる可能性があるので、それはひどい考えです。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Dropping items"
msgstr "落下物"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Another solution consists of dropping items:"
msgstr "もう一つの解決策は、アイテムを落とすことです："

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Dropping items to avoid overwhelming downstream consumers"
msgstr "下流消費者に負担をかけないための落し物"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "You can drop the newest received items or oldest ones:"
msgstr "受信の新しいものから落とすことも、古いものから落とすことも可能です："

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Dropping items provides a sustainable solution to our problem, but we are losing events!\n"
"As we can see in the previous output, we may drop the high majority of items.\n"
"In many cases, this is not acceptable."
msgstr "アイテムのドロップは持続可能な問題解決策ですが、イベントを失うことになります！先ほどの出力でわかるように、大半のアイテムを落としてしまう可能性があります。多くの場合、これは受け入れられません。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"So, we need another solution, a solution where the overall pace is adjusted to satisfy the pipeline's slowest element.\n"
"We need flow control."
msgstr "つまり、パイプラインの最も遅い要素を満足させるために、全体のペースを調整するという解決策が必要なのです。フロー制御が必要なのです。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "What the heck is Back-Pressure?"
msgstr "背圧とは？"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"You may have seen this term many times, and often associated with Reactive.\n"
"In mechanics, back-pressure is a way to control the flow of fluid through pipes, leading to a pressure drop.\n"
"That control can use reducers or bends.\n"
"While very interesting, if you are a plumber, it's not clear how it can help us here?"
msgstr "この言葉は何度も目にしたことがあるかもしれませんが、多くの場合リアクティブと関連付けられています。機械学では、背圧とは、パイプを通る流体の流れを制御し、圧力降下をもたらす方法です。その制御には、レデューサーやベンドを使用します。とても興味深いのですが、あなたが配管工なら、それがここで私たちにどのように役立つかは明らかではありません。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"We can see our streams as a flow of fluid, and the set of stages (operator or subscriber) forms a pipe.\n"
"We want to make the fluid flows as frictionless as possible without swirls and waves."
msgstr "私たちは、ストリームを流体の流れと見なすことができます。私たちは、流体の流れを、渦や波のない、できるだけ摩擦のないものにしたいと考えています。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"An interesting characteristic of fluid mechanics is how a downstream reduction of the throughput affects the upstream.\n"
"Essentially, that's what we need: a way for the downstream operators and subscribers to reduce the throughput, not only locally but also upstream."
msgstr "流体力学の興味深い特性は、下流のスループットの低下が上流にどのような影響を与えるかということです。本質的に必要なのは、下流のオペレーターや加入者が、局所的にだけでなく上流でもスループットを削減する方法なのです。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Don't be mistaken; back-pressure is not something new in the IT world and is not limited to Reactive.\n"
"One of the most brilliant usages of back-pressure is in TCP.\n"
"A reader, receiving data, can block the writer, on the other side of the wire, if it does not read the sent data.\n"
"That way, the reader is never overwhelmed.\n"
"But, the consequence need to be understood: blocking the writer may not be without side-effects."
msgstr "バックプレッシャーはITの世界では目新しいものではなく、リアクティブに限ったことではありません。バックプレッシャーの最も素晴らしい使い方の1つはTCPです。データを受信しているリーダーは、送信されたデータを読まなかった場合、ワイヤの反対側にいるライターをブロックすることができます。そうすることで、リーダが圧倒されることはありません。ライターをブロックすることは副作用がないとは限りません。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"There are other back-pressure implementations.\n"
"AMQP uses a credit-based flow control, where you can only send if you have enough credit.\n"
"Eclipse Vert.x back-pressure is based on pause/resume, where a consumer can pause the upstream until it catches up and resume it once back on track."
msgstr "バックプレッシャーの実装は他にもあります。AMQPはクレジットベースのフロー制御を使用し、十分なクレジットがある場合にのみ送信できます。Eclipse Vert.xのバックプレッシャーは一時停止/再開に基づいており、コンシューマーは追いつくまでアップストリームを一時停止し、軌道に戻ったら再開することができます。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Introducing Reactive Streams"
msgstr "リアクティブ・ストリームの紹介"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Let's now focus on another back-pressure protocol: https://www.reactive-streams.org/[Reactive Streams].\n"
"It defines an asynchronous and back-pressure protocol suiting to our fast producer/slow consumer problem.\n"
"With Reactive Streams, the consumer, named `Subscriber`, requests items from the producer, named `Publisher`.\n"
"The `Publisher` cannot send more than the requested amount of items:"
msgstr "それでは、もう一つのバックプレッシャープロトコルに焦点を当てましょう： link:https://www.reactive-streams.org/[Reactive Streams] です。Reactive Streamsは、高速なプロデューサーと低速なコンシューマーの問題に適した、非同期でバックプレッシャーのかかるプロトコルを定義しています。Reactive Streamsでは、 `Subscriber` という名前のコンシューマが、 `Publisher` という名前のプロデューサにアイテムを要求します。 `Publisher` は、要求された量以上のアイテムを送ることはできません："

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Reactive Streams Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "リアクティブ・ストリームス・バックプレッシャー( https://impurepics.com/posts/2018-05-26-backpressure-origins.html )"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"When the items are received and processed, the consumer can request more items, and so on.\n"
"Thus, the consumer controls the flow."
msgstr "アイテムを受け取って処理すると、消費者はさらにアイテムを要求することができます。このように、消費者が流れをコントロールします。"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Using flow control to avoid overwhelming consumers"
msgstr "コンシューマに負担をかけないためのフローコントロールの使用"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Reactive Streams entities"
msgstr "リアクティブ・ストリーム・エンティティー"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"To implement that protocol, Reactive Streams define a set of entities.\n"
"First, a `Subscriber` is a consumer.\n"
"It subscribes to a `Publisher,` producing items.\n"
"Then, the `Publisher` sends, asynchronously, a `Subscription` object to the `Subscriber`.\n"
"This `Subscription` is a contract.\n"
"With this `Subscription,` the `Subscriber` can request items and cancels the subscription when it does not want any more items."
msgstr "そのプロトコルを実装するために、Reactive Streamsは一連のエンティティを定義します。まず、 `Subscriber` は消費者です。アイテムを生成する `Publisher,` をサブスクライブします。次に、 `Publisher` は非同期で `Subscription` オブジェクトを `Subscriber` に送信します。この `Subscription` は契約です。この `Subscription,` を使って、 `Subscriber` はアイテムを要求することができ、それ以上アイテムを必要としないときはサブスクリプションをキャンセルします。"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber` and a `Publisher`"
msgstr "`Subscriber` との相互作用例。 `Publisher`"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "A `Publisher` cannot send more items than requested to the `Subscriber,` and the `Subscriber` can request more items at any time."
msgstr "`Publisher` は要求以上のアイテムを `Subscriber,` に送ることはできず、 `Subscriber` はいつでもアイテムを要求することができます。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"It is essential to understand that the requests and emissions are not necessarily happening synchronously.\n"
"A `Subscriber` can request three items, and the Publisher will send one by one when they are available."
msgstr "リクエストと排出は必ずしも同期的に行われるわけではないことを理解することが重要です。 `Subscriber` 、3つのアイテムをリクエストすることができます。パブリッシャーはアイテムが利用可能になると、1つずつ送信します。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Reactive Streams introduces another entity named `Processor.`\n"
"A `Processor` is a `Subscriber` and a `Publisher` simultaneously.\n"
"In other words, it's a link in our pipeline:"
msgstr "Reactive Streamsでは、 `Processor.` という別のエンティティを導入しています。 `Processor` は `Subscriber` であり、同時に `Publisher` でもあります。つまり、パイプラインのリンクです："

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber,` a `Processor` and a `Publisher`"
msgstr "`Subscriber,` a `Processor` との相互作用の例。 `Publisher`"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"A `Subscriber` calls `subscribe` on a `Processor.`\n"
"Before receiving a `Subscription,` the `Processor` subscribes to its own upstream (the `Publisher` in the picture above).\n"
"When that upstream provides a `Subscription` to our Processor, it can give a `Subscription` to the Subscriber.\n"
"All these interactions are asynchronous.\n"
"When this handshake completes, the `Subscriber` can start requesting items.\n"
"The Processor is responsible for mediating the `Subscriber` requests with its upstream.\n"
"For example, as illustrated in the picture above, if the `Subscriber` requires two items, the `Processor` also requests two items to its own upstream.\n"
"Of course, depending on the `Processor` code, it may not be that simple.\n"
"What's fundamental is that each `Publisher` and `Processor` enforces the flowing requests never to overload downstream Subscribers."
msgstr "`Subscriber` は `subscribe` を `Processor.` で呼び出します。 `Subscription,` を受信する前に、 `Processor` は自身のアップストリーム (上の図の `Publisher` ) をサブスクライブします。そのアップストリームがProcessorに `Subscription` を提供すると、ProcessorはSubscriberに `Subscription` を提供できます。これらのやり取りはすべて非同期です。このハンドシェイクが完了すると、 `Subscriber` はアイテムのリクエストを開始できます。Processor は、 `Subscriber` リクエストをアップストリームに仲介する責任を負います。たとえば、上の図に示されているように、 `Subscriber` が2つのアイテムを要求する場合、 `Processor` も自身の上流に2つのアイテムを要求します。もちろん、 `Processor` のコードによっては、それほど単純ではないかもしれません。基本的なことは、 `Publisher` と `Processor` はそれぞれ、流れてくる要求が決して下流のSubscriberに過負荷をかけないように強制するということです。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Be warned; it's a trap!"
msgstr "これは罠です！"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"If you look at the http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[Reactive Streams API], you will find it straightforward.\n"
"Be warned; it's a trap!\n"
"Behind this apparent simplicity, implementing Reactive Streams entities yourself is a nightmare.\n"
"Reactive Streams come with a broad set of rules and a strict TCK."
msgstr "link:http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[Reactive Streams APIを] 見れば、簡単なことがわかります。これは罠です！この見かけの単純さの裏で、Reactive Streams の実体を自分で実装するのは悪夢です。Reactive Streamsには幅広いルールと厳格なTCKがあります。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"But, no worries, Mutiny implements the Reactive Streams protocol for you.\n"
"In other words, when using `Multi,` you are using a `Publisher` following the Reactive Streams protocol.\n"
"All the subscription handshakes and requests negotiations are done for you."
msgstr "しかし、ご心配なく。MutinyはReactive Streamsプロトコルを実装しています。つまり、 `Multi,` 、Reactive Streamsプロトコルに従った `Publisher` 。サブスクリプションのハンドシェイクとリクエストの交渉は、すべてあなたに代わって行われます。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Looking under the hood"
msgstr "ボンネットの中を見る"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"I knew it! You are curious!\n"
"You can use `onSubscribe().invoke()` and `onRequest().invoke()` to check what's going on:"
msgstr "やっぱり！気になりますよね！ `onSubscribe().invoke()` 、 `onRequest().invoke()` 、何が起こっているのかをチェックすることができます："

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "You can also go a step further and not only observing but also controlling the flow yourself:"
msgstr "さらに一歩進んで、観察するだけでなく、自分で流れをコントロールすることもできます："

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "And, if you are a bit insane, you can even implement a `Subscriber` directly:"
msgstr "また、ちょっと非常識な人なら、 `Subscriber` を直接実装することもできます："

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "Summary"
msgstr "まとめ"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"This post described the different approaches offered by Mutiny to handle back-pressure.\n"
"The Reactive Streams protocol works well when you can control the pace of the upstream.\n"
"But it's not always the case.\n"
"Streams representing physical entities are rarely controllable.\n"
"Imagine a stream emitting user's keystrokes.\n"
"You cannot ask the users to slow down.\n"
"That would be a terrible user experience.\n"
"As we have seen above, time is also not something we can slow down, unfortunately...\n"
"In this case, the `onOverflow()` group lets you decide the mitigation, such as using buffers or dropping items."
msgstr "この投稿では、バックプレッシャーに対処するためにMutinyが提供するさまざまなアプローチについて説明しました。Reactive Streamsプロトコルは、アップストリームのペースをコントロールできる場合にうまく機能します。しかし、必ずしもそうとは限りません。物理的な実体を表すストリームを制御できることはほとんどありません。ユーザーのキーストロークを発するストリームを想像してみてください。ユーザーにスピードを落とせと言っても無理です。それではひどいユーザー体験になってしまいます。上で見てきたように、時間も残念ながら遅くすることはできません...この場合、 `onOverflow()` グループでは、バッファを使ったりアイテムを落としたりといった緩和を決めることができます。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"It's critical to avoid overwhelming downstream subscribers.\n"
"It is the small crack that ripples in your system with dreadful consequences."
msgstr "下流の加入者を圧倒しないことが重要です。小さな亀裂がシステムに波及し、恐ろしい結果を招くのです。"
