# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2023-04-30 23:44+0900\n"
"PO-Revision-Date: 2023-04-20 11:52+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-27"
msgstr "2020-10-27"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "How does flow control works with Mutiny"
msgstr "Mutinyでフロー制御はどのように機能するのか？"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny streams"
msgstr "リアクティブミューティニーストリーム"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "Mutiny - Flow control and Back-pressure"
msgstr "Mutiny-フローコントロールとバックプレッシャー"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:13
#, fuzzy
msgid "Reactive Programming offers an elegant, flexible, and powerful way to write asynchronous code.  It supports failure handling, both sequential and parallel operation composition, and plenty of operators.  Reactive programming promotes data streams as a primary construct, and your code is observing streams and reacting to signals."
msgstr "リアクティブプログラミングは、非同期コードを書くためのエレガントで柔軟、かつ強力な方法を提供します。障害処理、逐次処理と並列処理の両方の合成、豊富な演算子をサポートしています。リアクティブプログラミングは、データストリームを主要な構成要素として推進し、コードはストリームを観察し、シグナルに反応することになります。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:14
#, fuzzy, no-wrap
msgid "Origins of back-pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)   "
msgstr "背圧の起源( https://impurepics.com/posts/2018-05-26-backpressure-origins.html )"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:15
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:27
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:169
#, fuzzy, no-wrap
msgid "800"
msgstr "800"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:15
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-origin.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:19
#, fuzzy
msgid "However, using data streams as primary constructs does not come without some issues.  One of the main problems is the need for flow control."
msgstr "しかし、データストリームを主要な構成要素として使用する場合、いくつかの問題がないわけではありません。その一つが、フロー制御の必要性である。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:21
#, fuzzy
msgid "## The producer/consumer problem"
msgstr "生産者・消費者問題\n"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:25
#, fuzzy
msgid "Let's imagine a fast producer and a slow consumer.  The producer sends events too quickly for the consumer that can't keep up.  That phenomenon is remarkably well illustrated in the following picture."
msgstr "速いプロデューサーと遅いコンシューマーを想像してみましょう。プロデューサーがあまりにも早くイベントを送るので、追いつけないコンシューマーがいる。その現象は、次の図に著しくよく表れている。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:26
#, fuzzy, no-wrap
msgid "No Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "背圧がない ( https://impurepics.com/posts/2018-05-26-backpressure-origins.html )"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:27
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-no.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:31
#, fuzzy
msgid "Let's see some code.  Imagine a producer emitting an event every ten milliseconds, while the consumer can only consume one per second."
msgstr "では、コードをご覧ください。プロデューサーが10ミリ秒ごとにイベントを発信し、コンシューマーは1秒に1つしか消費できないと想像してください。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:41
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(BackPressureExample::canOnlyConsumeOneItemPerSecond)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:44
#, fuzzy
msgid "If you run that code, you will see that the subscriber gets a `MissingBackPressureFailure,` indicating that the downstream cannot keep up:"
msgstr "このコードを実行すると、サブスクライバーがダウンストリームが追いつかないことを示す `MissingBackPressureFailure,` を取得することがわかります："

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:49
#, no-wrap
msgid ""
"Got item: 0\n"
"Got failure: io.smallrye.mutiny.subscription.BackPressureFailure: Could not emit tick 16 due to lack of requests\n"
msgstr ""

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:52
#, fuzzy, no-wrap
msgid "emitOn"
msgstr "エミットオン"

#. type: delimited block =
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:57
#, fuzzy
msgid "In the previous code, you may wonder about the `emitOn.` It's a Mutiny operator allowing controlling on which thread the Subscriber receives the events.  Back-pressure is often required when multiple threads are involved, as in a single thread approach, blocking the thread would block the source, which may have dramatic consequences."
msgstr "前のコードでは、 `emitOn.` It's a Mutiny オペレータが、Subscriber がどのスレッドでイベントを受信するかを制御していることに疑問を持つかもしれません。シングルスレッドのアプローチでは、スレッドをブロックするとソースがブロックされ、劇的な結果を招く可能性があるため、複数のスレッドが関与している場合は、バックプレッシャーが必要になることがあります。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:60
#, fuzzy
msgid "So, what can we do to handle this _overflow_?"
msgstr "では、この _オーバーフローに_ 対応するためにはどうしたらいいのでしょうか。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:62
#, fuzzy
msgid "### Buffering items"
msgstr "バッファリング項目"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:65
#, fuzzy
msgid "The first natural solution uses buffers.  The consumer can buffer the events, so it does not fail:"
msgstr "最初の自然な解決策は、バッファを使うことです。コンシューマはイベントをバッファリングすることで、失敗しないようにすることができます："

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:66
#, fuzzy, no-wrap
msgid "Buffering to avoid overwhelming downstream consumers"
msgstr "下流の消費者に負担をかけないためのバッファリング"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:67
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-buffer.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:71
#, fuzzy
msgid "Using a buffer allows handling small bumps, but it's not a long term solution.  If we update the code to use a large buffer, the consumer can handle more events but eventually fails:"
msgstr "バッファを使用することで、小さなバンプを処理することができますが、長期的な解決策ではありません。大きなバッファを使うようにコードを更新すると、コンシューマーはより多くのイベントを処理できるようになりますが、最終的には失敗します："

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:82
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .onOverflow().buffer(250)\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(BufferingExample::canOnlyConsumeOneItemPerSecond)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:90
#, no-wrap
msgid ""
"Got item: 0\n"
"Got item: 1\n"
"Got item: 2\n"
"Got failure: io.smallrye.mutiny.subscription.BackPressureFailure: Buffer is full due to lack of downstream consumption\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:95
#, fuzzy
msgid "You can imagine increasing the buffer's size, but it's hard to anticipate the optimal value.  What about unbounded buffers? In general, that's a terrible idea as you may run out of memory."
msgstr "バッファのサイズを大きくすることは想像できますが、最適な値を予想することは困難です。バウンディングされていないバッファについてはどうでしょうか？一般的には、メモリが足りなくなる可能性があるので、それはひどいアイデアです。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:97
#, fuzzy
msgid "### Dropping items"
msgstr "アイテムを投下する"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:99
#, fuzzy
msgid "Another solution consists of dropping items:"
msgstr "もう一つの解決策は、アイテムを落とすことです："

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:100
#, fuzzy, no-wrap
msgid "Dropping items to avoid overwhelming downstream consumers"
msgstr "下流消費者に負担をかけないための落し物"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:101
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-drop.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:104
#, fuzzy
msgid "You can drop the newest received items or oldest ones:"
msgstr "受信の新しいものから落とすことも、古いものから落とすことも可能です："

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:116
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .onOverflow().drop(x -> System.out.println(\"Dropping item \" + x))\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(DropExample::canOnlyConsumeOneItemPerSecond)\n"
"    .transform().byTakingFirstItems(10)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:129
#, no-wrap
msgid ""
"// ....\n"
"Dropping item 997\n"
"Dropping item 998\n"
"Dropping item 999\n"
"Dropping item 1000\n"
"Dropping item 1001\n"
"Dropping item 1002\n"
"Dropping item 1003\n"
"Got item: 9\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:134
#, fuzzy
msgid "Dropping items provides a sustainable solution to our problem, but we are losing events! As we can see in the previous output, we may drop the high majority of items.  In many cases, this is not acceptable."
msgstr "アイテムをドロップすることで、問題に対する持続的な解決策が得られますが、イベントを失うことになります！先ほどの出力でわかるように、大多数のアイテムをドロップしてしまうことがあります。多くの場合、これは許されることではありません。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:137
#, fuzzy
msgid "So, we need another solution, a solution where the overall pace is adjusted to satisfy the pipeline's slowest element.  We need flow control."
msgstr "そこで、別の解決策が必要です。パイプラインの最も遅い要素を満足させるために、全体のペースを調整する解決策が必要なのです。フローコントロールが必要なのです。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:139
#, fuzzy
msgid "### What the heck is Back-Pressure?"
msgstr "バックプレッシャーとは一体何なのか？"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:144
#, fuzzy
msgid "You may have seen this term many times, and often associated with Reactive.  In mechanics, back-pressure is a way to control the flow of fluid through pipes, leading to a pressure drop.  That control can use reducers or bends.  While very interesting, if you are a plumber, it's not clear how it can help us here?"
msgstr "この言葉は何度も目にしたことがあり、Reactiveと関連付けられていることが多いのではないでしょうか。機械学では、背圧とは、パイプを通る流体の流れを制御して、圧力降下をもたらす方法です。その制御には、レデューサーやベンドを使用することができます。非常に興味深いのですが、もしあなたが配管工なら、それがここで私たちにどのように役立つかは明らかではありませんね？"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:147
#, fuzzy
msgid "We can see our streams as a flow of fluid, and the set of stages (operator or subscriber) forms a pipe.  We want to make the fluid flows as frictionless as possible without swirls and waves."
msgstr "私たちのストリームは流体の流れであり、ステージのセット（オペレーターや加入者）はパイプを形成していると考えることができます。流体の流れは、渦や波がなく、できるだけ摩擦がないようにしたいものです。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:150
#, fuzzy
msgid "An interesting characteristic of fluid mechanics is how a downstream reduction of the throughput affects the upstream.  Essentially, that's what we need: a way for the downstream operators and subscribers to reduce the throughput, not only locally but also upstream."
msgstr "流体力学の面白い特性として、下流でのスループットの低下が上流にどのような影響を与えるかがあります。本来は、下流の事業者や加入者が、局所的にだけでなく上流でもスループットを低下させる方法が必要なのです。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:156
#, fuzzy
msgid "Don't be mistaken; back-pressure is not something new in the IT world and is not limited to Reactive.  One of the most brilliant usages of back-pressure is in TCP.  A reader, receiving data, can block the writer, on the other side of the wire, if it does not read the sent data.  That way, the reader is never overwhelmed.  But, the consequence need to be understood: blocking the writer may not be without side-effects."
msgstr "バックプレッシャーはITの世界では目新しいものではなく、Reactiveに限った話ではないので誤解しないでください。バックプレッシャーの最も素晴らしい使い方の1つは、TCPにあります。データを受信するリーダーは、送信されたデータを読まなければ、ワイヤの反対側にいるライターをブロックすることができます。そうすることで、読み手が圧倒されることはないのです。しかし、その結果、ライターをブロックすることは、副作用がないとは言い切れないことを理解する必要があります。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:160
#, fuzzy
msgid "There are other back-pressure implementations.  AMQP uses a credit-based flow control, where you can only send if you have enough credit.  Eclipse Vert.x back-pressure is based on pause/resume, where a consumer can pause the upstream until it catches up and resume it once back on track."
msgstr "他にもバックプレッシャーの実装はある。AMQPはクレジットベースのフローコントロールを使用しており、十分なクレジットがある場合にのみ送信することができます。Eclipse Vert.xのバックプレッシャーは、一時停止/再開に基づいており、コンシューマーは追いつくまでアップストリームを一時停止し、軌道に戻ったら再開することができます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:162
#, fuzzy
msgid "### Introducing Reactive Streams"
msgstr "リアクティブストリームを導入する"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:167
#, fuzzy
msgid "Let's now focus on another back-pressure protocol: https://www.reactive-streams.org/[Reactive Streams].  It defines an asynchronous and back-pressure protocol suiting to our fast producer/slow consumer problem.  With Reactive Streams, the consumer, named `Subscriber`, requests items from the producer, named `Publisher`.  The `Publisher` cannot send more than the requested amount of items:"
msgstr "ここで、もう一つの背圧プロトコルに注目してみましょう： link:https://www.reactive-streams.org/[Reactive Streams] です。Reactive Streamsは、高速なプロデューサーと低速なコンシューマーの問題に適した、非同期でバックプレッシャーなプロトコルを定義しています。Reactive Streamsでは、 `Subscriber` という消費者が、 `Publisher` という生産者にアイテムを要求します。 `Publisher` は要求された量以上のアイテムを送ることはできない："

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:168
#, fuzzy, no-wrap
msgid "Reactive Streams Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "リアクティブ・ストリームス・バックプレッシャー( https://impurepics.com/posts/2018-05-26-backpressure-origins.html )"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:169
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:173
#, fuzzy
msgid "When the items are received and processed, the consumer can request more items, and so on.  Thus, the consumer controls the flow."
msgstr "アイテムが届いて処理されると、消費者はさらにアイテムを要求することができる、といった具合です。このように、消費者が流れをコントロールする。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:174
#, fuzzy, no-wrap
msgid "Using flow control to avoid overwhelming consumers"
msgstr "コンシューマに負担をかけないためのフローコントロールの使用"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:175
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-flow-control.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:178
#, fuzzy
msgid "### Reactive Streams entities"
msgstr "リアクティブストリームの実体"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:185
#, fuzzy
msgid "To implement that protocol, Reactive Streams define a set of entities.  First, a `Subscriber` is a consumer.  It subscribes to a `Publisher,` producing items.  Then, the `Publisher` sends, asynchronously, a `Subscription` object to the `Subscriber`.  This `Subscription` is a contract.  With this `Subscription,` the `Subscriber` can request items and cancels the subscription when it does not want any more items."
msgstr "そのプロトコルを実装するために、Reactive Streamsは一連のエンティティを定義しています。まず、 `Subscriber` は消費者である。アイテムを生成する `Publisher,` をサブスクライブする。そして、 `Publisher` は、非同期で `Subscription` オブジェクトを `Subscriber` に送信する。この `Subscription` は契約である。この `Subscription,` で、 `Subscriber` はアイテムを要求することができ、それ以上アイテムを必要としないときはサブスクリプションをキャンセルする。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:186
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber` and a `Publisher`"
msgstr "`Subscriber` との相互作用例。 `Publisher`"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:187
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-sequence.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:190
#, fuzzy
msgid "A `Publisher` cannot send more items than requested to the `Subscriber,` and the `Subscriber` can request more items at any time."
msgstr "`Publisher` は要求以上のアイテムを `Subscriber,` に送ることはできず、 `Subscriber` はいつでもアイテムを要求することができます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:193
#, fuzzy
msgid "It is essential to understand that the requests and emissions are not necessarily happening synchronously.  A `Subscriber` can request three items, and the Publisher will send one by one when they are available."
msgstr "リクエストと排出が必ずしも同期的に行われているわけではないことを理解することが肝要である。 `Subscriber` は3つのアイテムをリクエストすることができ、Publisher はそれらが利用可能になったときに1つずつ送信する。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:197
#, fuzzy
msgid "Reactive Streams introduces another entity named `Processor.` A `Processor` is a `Subscriber` and a `Publisher` simultaneously.  In other words, it's a link in our pipeline:"
msgstr "Reactive Streamsでは、 `Processor.` という別のエンティティを導入しています。 `Processor` は、 `Subscriber` と `Publisher` を同時に実現しています。つまり、パイプラインのリンクなのです："

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:198
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber,` a `Processor` and a `Publisher`"
msgstr "`Subscriber,` a `Processor` との相互作用の例。 `Publisher`"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:199
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/pipeline-with-processor.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:210
#, fuzzy
msgid "A `Subscriber` calls `subscribe` on a `Processor.` Before receiving a `Subscription,` the `Processor` subscribes to its own upstream (the `Publisher` in the picture above).  When that upstream provides a `Subscription` to our Processor, it can give a `Subscription` to the Subscriber.  All these interactions are asynchronous.  When this handshake completes, the `Subscriber` can start requesting items.  The Processor is responsible for mediating the `Subscriber` requests with its upstream.  For example, as illustrated in the picture above, if the `Subscriber` requires two items, the `Processor` also requests two items to its own upstream.  Of course, depending on the `Processor` code, it may not be that simple.  What's fundamental is that each `Publisher` and `Processor` enforces the flowing requests never to overload downstream Subscribers."
msgstr "`Subscriber` は `subscribe` を `Processor.` で呼び出します。 `Subscription,` を受け取る前に、 `Processor` は自身のアップストリーム (上の写真の `Publisher` ) をサブスクライブします。そのアップストリームがProcessorに `Subscription` を提供すると、ProcessorはSubscriberに `Subscription` を提供することができます。これらのインタラクションはすべて非同期です。このハンドシェイクが完了すると、 `Subscriber` はアイテムの要求を開始することができます。Processorは、 `Subscriber` の要求をその上流に仲介する責任を負います。例えば、上の図に示すように、 `Subscriber` が2つのアイテムを要求する場合、 `Processor` も自身の上流に2つのアイテムを要求します。もちろん、 `Processor` のコードによっては、そんな単純な話ではないかもしれません。基本的なことは、 `Publisher` と `Processor` のそれぞれが、下流の加入者に過度の負荷をかけないように、流れる要求を強制することです。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:212
#, fuzzy
msgid "### Be warned; it's a trap!"
msgstr "ご注意ください、それは罠です！"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:217
#, fuzzy
msgid "If you look at the http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[Reactive Streams API], you will find it straightforward.  Be warned; it's a trap! Behind this apparent simplicity, implementing Reactive Streams entities yourself is a nightmare.  Reactive Streams come with a broad set of rules and a strict TCK."
msgstr "link:http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[Reactive Streams APIを] 見ると、わかりやすいと思います。警告しておくと、それは罠である！この単純さの裏には、Reactive Streamsの実体を自分で実装する悪夢があるのです。Reactive Streamsには、広範なルールと厳格なTCKが付属しています。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:221
#, fuzzy
msgid "But, no worries, Mutiny implements the Reactive Streams protocol for you.  In other words, when using `Multi,` you are using a `Publisher` following the Reactive Streams protocol.  All the subscription handshakes and requests negotiations are done for you."
msgstr "しかし、MutinyはReactive Streamsプロトコルを実装しているので心配はありません。つまり、 `Multi,` を使用する場合、Reactive Streams プロトコルに従った `Publisher` を使用することになります。サブスクリプションのハンドシェイクとリクエストの交渉は、すべてあなたのために行われます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:223
#, fuzzy
msgid "### Looking under the hood"
msgstr "ボンネットの中を見る"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:226
#, fuzzy
msgid "I knew it! You are curious! You can use `onSubscribe().invoke()` and `onRequest().invoke()` to check what's going on:"
msgstr "やっぱり、そうなんですね！と気になるあなた！ `onSubscribe().invoke()` や `onRequest().invoke()` を使って、何が起こっているのか確認することができます："

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:238
#, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: \" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + req))\n"
"    .transform().byFilteringItemsWith(i -> i % 2 == 0)\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().with(\n"
"            i -> System.out.println(\"i: \" + i)\n"
");\n"
"---- \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:240
#, no-wrap
msgid "You can also go a step further and not only observing but also controlling the flow yourself:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:242
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:265
#, no-wrap
msgid "[source, java, indent=0]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:260
#, fuzzy, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: \" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + req))\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().with(\n"
"            subscription -> {\n"
"                // Got the subscription\n"
"                upstream.set(subscription);\n"
"                subscription.request(1);\n"
"            },\n"
"            i -> {\n"
"                System.out.println(\"i: \" + i);\n"
"                upstream.get().request(1);\n"
"            },\n"
"            f -> System.out.println(\"Failed with \" + f),\n"
"            () -> System.out.println(\"Completed\")\n"
");\n"
msgstr "Multi.createFrom().range(0, 10) .onSubscribe().invoke(sub → System.out.println(\"Received subscription: \" + sub)) .onRequest().invoke(req → System.out.println(\"Got a request: \" + req)) .onItem().transform(i→i * 100) .subscribe().with( subscription → { // サブスクリプションを取得 upstream.set(subscription); subscription.request(1); }, i → { System.out.println(\"i: \" + i); upstream.get().request(1); }, f → System.out.println(\"Failed with \" + f), () → System.out.println(\"Completed\" ))；"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:263
#, no-wrap
msgid "And, if you are a bit insane, you can even implement a `Subscriber` directly:\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:271
#, fuzzy, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: \" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + req))\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().withSubscriber(new Subscriber<Integer>() {\n"
msgstr "Multi.createFrom().range(0, 10) .onSubscribe().invoke(sub → System.out.println(\"Received subscription: \" + sub)) .onRequest().invoke(req → System.out.println(\"Got a request: \" + req)) .onItem().transform(i → i * 100) .subscribe().withSubscriber(new Subscriber<Integer>() { )"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:273
#, fuzzy, no-wrap
msgid "        private Subscription subscription;\n"
msgstr "private Subscription サブスクリプション；"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:279
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onSubscribe(Subscription s) {\n"
"            this.subscription = s;\n"
"            s.request(1);\n"
"        }\n"
msgstr ""
"オーバーライド\n"
"public void onSubscribe(Subscription s) {。\n"
"    this.subscription = s；\n"
"    s.request(1)です；\n"
"}"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:285
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onNext(Integer item) {\n"
"            System.out.println(\"Got item \" + item);\n"
"            subscription.request(1);\n"
"        }\n"
msgstr ""
"オーバーライド\n"
"public void onNext(Integer item) {。\n"
"    System.out.println(\"Got item \" + item)；\n"
"    subscription.request(1)を実行します；\n"
"}"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:290
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onError(Throwable t) {\n"
"            // ...\n"
"        }\n"
msgstr ""
"オーバーライド\n"
"public void onError(Throwable t) {。\n"
"    // ...\n"
"}"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:297
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onComplete() {\n"
"            // ...\n"
"        }\n"
"    }\n"
");\n"
msgstr ""
"        オーバーライド\n"
"        public void onComplete() {。\n"
"            // ...\n"
"        }\n"
"    }\n"
");"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:298
#, fuzzy, no-wrap
msgid "\n"
msgstr "\n"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:301
#, fuzzy
msgid "### Summary"
msgstr "概要"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:311
#, fuzzy
msgid "This post described the different approaches offered by Mutiny to handle back-pressure.  The Reactive Streams protocol works well when you can control the pace of the upstream.  But it's not always the case.  Streams representing physical entities are rarely controllable.  Imagine a stream emitting user's keystrokes.  You cannot ask the users to slow down.  That would be a terrible user experience.  As we have seen above, time is also not something we can slow down, unfortunately...  In this case, the `onOverflow()` group lets you decide the mitigation, such as using buffers or dropping items."
msgstr "この投稿では、バックプレッシャーに対処するためにMutinyが提供するさまざまなアプローチについて説明しました。Reactive Streamsプロトコルは、アップストリームのペースをコントロールできる場合にうまく機能します。しかし、いつもそうとは限りません。物理的な実体を表すストリームは、制御できることはほとんどありません。ユーザーのキーストロークを発するストリームを想像してみてください。ユーザーにスピードを落とせというのは無理な話です。それでは、ひどいユーザー体験になってしまいます。上で見たように、時間も残念ながら遅くすることはできません。この場合、 `onOverflow()` グループは、バッファの使用やアイテムのドロップなど、緩和を決定することができます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:314
#, fuzzy
msgid "It's critical to avoid overwhelming downstream subscribers.  It is the small crack that ripples in your system with dreadful consequences."
msgstr "下流の加入者に負担をかけないことが重要です。小さな亀裂がシステムに波及し、恐ろしい結果を招くのです。"
