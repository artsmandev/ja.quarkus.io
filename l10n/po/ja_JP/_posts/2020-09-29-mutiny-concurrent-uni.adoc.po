msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid ""
"This week, I've been asked about a widespread use case around concurrency.\n"
"This user wanted to call two microservices _in parallel_, and when both results are received, join them and continue the processing.\n"
"Basically, the following pattern:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid ""
"In a non-reactive approach, both calls would block the caller thread, and, except if you use a worker thread pool, the calls are not concurrent.\n"
"Even if you use a worker thread pool, these threads are likely blocked, consuming resources for nothing."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid "Let's call two services"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid ""
"In this post, I'm going to use the Vert.x Web Client, a reactive HTTP client.\n"
"It leverages non-blocking I/O to be highly performant and truly non-blocking.\n"
"It does not rely on a hidden thread pool.\n"
"You can also use the Quarkus Rest Client, but, at the moment, it still uses worker threads."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid ""
"No matter which client we use, we need some remote services to call.\n"
"Let's use:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid ""
"First thing first, let's see the code required to retrieve our quotes:\n"
"While both services are similar, the structure of the response differs a little bit.\n"
"So we end up with:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid ""
"These two methods receive a `WebClient`, invoke the services, retrieve the JSON responses, and extract them.\n"
"They both return a `Uni`.\n"
"So they are asynchronous.\n"
"The result (the quote) is provided _later_ when available.\n"
"Also, returning a `Uni` means that the services will only be invoked when someone subscribes to the returned `Uni`.\n"
"If you subscribe multiple times, you will call the service multiple times."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid "Combining Unis"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid ""
"So far, we have two methods to call our services.\n"
"But we want to call them concurrently, as depicted above."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid ""
"When someone subscribes to the `Uni tuple`, it subscribes to the `getProgrammingQuote(client)` and `getChuckNorrisQuote(client)` `Unis`, which invoke the services.\n"
"So the requests are emitted, and the services are invoked concurrently."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid ""
"In other words, concurrently calling our services is pretty straightforward.\n"
"Just create the `Unis` representing the services or the asynchronous action you want to achieve and combine them using `Uni.combine().all()`\n"
"You can decide to combine the results using _tuples_ or to use a combinator function."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid "Putting everything together"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid ""
"That's it!\n"
"If you want to see this code in action, check this https://gist.github.com/cescoffier/1ed68bef12b798529e10350f77686e9a[gist]. You even can run it directly with JBang:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-09-29-mutiny-concurrent-uni.adoc
msgid "Enjoy!"
msgstr "楽しんで!"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "Concurrent asynchronous actions with Mutiny"
msgstr "Mutinyによる非同期アクションの同時実行"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "Running concurrent asynchronous actions with Mutiny"
msgstr "Mutinyで非同期アクションを同時進行させる"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:15
#, fuzzy
msgid "image:/assets/images/posts/mutiny-concurrent-uni/pattern.png[width=50%]"
msgstr "image:/assets/images/posts/mutiny-concurrent-uni/pattern.png[alt=\"pattern\", width=\"50%\"]"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:20
#, fuzzy
msgid "But no worries, Quarkus reactive nature and Mutiny have everything to handle this scenario."
msgstr "しかし、心配はいりません。Quarkusの反応性とMutinyは、このシナリオに対応するためのすべてを備えています。"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:32
#, fuzzy
msgid "https://programming-quotes-api.herokuapp.com/ - to get a quote about programming"
msgstr "https://programming-quotes-api.herokuapp.com/ - プログラミングに関するお見積もりはこちら"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:33
#, fuzzy
msgid "https://api.chucknorris.io/ - to get a quote about _Chuck Norris_"
msgstr "https://api.chucknorris.io/ - _チャック・ノリスについての_ 見積もりを取るには"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:69
#, fuzzy
msgid "Mutiny provides a way to _combine_ items produced by `Unis`:"
msgstr "Mutinyは、 `Unis` によって生産されたアイテムを _組み合わせる_ 方法を提供します："

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:81
#, fuzzy
msgid "When both responses are available, it combines them into a _Tuple_, a simple structure carrying multiple items."
msgstr "両方の回答がある場合は、複数の項目を持つ単純な構造体である _タプルに_ 結合する。"
