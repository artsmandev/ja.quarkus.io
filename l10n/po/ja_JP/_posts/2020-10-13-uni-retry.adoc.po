# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-30 23:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-13"
msgstr "2020-10-13"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "How does `retry` actually work?"
msgstr "`retry` 、実際はどうなのでしょうか？"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny retry"
msgstr "反動でmutinyリトライ"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "Mutiny - How does retry... retries?"
msgstr "Mutiny - リトライ...再試行ってどうやるの？"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:17
#, fuzzy
msgid "Last week, David, a Quarkus user, asked me about retrying an asynchronous operation.  David has a _picky_ remote HTTP service, which sometimes misbehaves.  Easy answer! Just do: `uni.onFailure().retry().atMost(x)`.  But, David is curious, and asked me a second question: how does retry work? Well, that’s simple; it just retries...  As you can imagine, that did not satisfy David’s curiosity."
msgstr "先週、QuarkusユーザーのDavidから、非同期操作の再試行について質問を受けました。Davidは、リモートHTTPサービスを使用していて、時々 _誤動作を_ 起こすことがあります。簡単な答えです！ `uni.onFailure().retry().atMost(x)` を実行するだけです。しかし、Davidは好奇心旺盛で、2つ目の質問をしてきました。まあ、それは簡単です。ただ再試行するだけです...想像できるように、それはDavidの好奇心を満たすものではありませんでした。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:20
#, fuzzy
msgid "While I was answering to David, I realized that retrying is not that simple and deserves more explanation.  That’s what we are going to see in this blog post."
msgstr "Davidに答えているうちに、リトライはそれほど単純ではなく、もっと説明が必要なことに気づきました。それがこのブログ記事で見ることになるものです。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:22
#, fuzzy
msgid "## Disclaimer about retries"
msgstr "リトライに関する免責事項\n"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:29
#, fuzzy
msgid "Okay, if you are the kind of reader who skips the terms and conditions, you can jump to the next section.  But, for others, I need to warn you about retries.  Retries may not be the solution to your problem, as it can be terrible.  Retrying can only be done if your system can handle duplicated requests or messages.  In other words, you can only retry if your system is idempotent, i.e., sending a request or a message multiple times does not change the overall state.  In doubt, check before implementing a retry, as it can harm your system."
msgstr "さて、もしあなたが利用規約を読み飛ばすような読者であれば、次のセクションにジャンプしてください。しかし、他の人のために、リトライについて警告しておく必要があります。再試行があなたの問題の解決策になるとは限りません、ひどい目にあうこともありますから。再試行は、あなたのシステムが重複したリクエストやメッセージを処理できる場合にのみ行うことができます。言い換えれば、システムが冪等である場合、つまり、リクエストやメッセージを複数回送っても全体の状態が変化しない場合にのみ、再試行が可能です。疑わしい場合は、再試行を実施する前に確認してください。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:31
#, fuzzy
msgid "Disclaimer said! Let’s look under the hood of retry."
msgstr "と免責事項がありました！リトライのフードを覗いてみましょう。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:33
#, fuzzy
msgid "## Retry is about resubscribing"
msgstr "リトライとは、再購読のこと\n"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:35
#, fuzzy
msgid "Let’s imagine you have a `Uni` representing your asynchronous action, like in David’s case, an invocation of a remote service:"
msgstr "例えば、Davidの場合、リモートサービスの呼び出しのような非同期アクションを表す `Uni` があるとしましょう："

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:39
#, no-wrap
msgid "Uni<String> uni = invokePickyService(client);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:45
#, fuzzy
msgid "Unis are lazy.  Until someone subscribes to them, nothing happens.  In our case, the request is only sent to the remote service when someone subscribes to the `uni`.  So to execute the request, we need to subscribe:"
msgstr "ユニは怠け者です。誰かが購読するまでは、何も起こりません。この場合、誰かが `uni` を購読したときにのみ、リクエストはリモートサービスに送信されます。 つまり、リクエストを実行するには、購読する必要があるのです："

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:53
#, no-wrap
msgid ""
"Uni<String> uni = invokePickyService(client);\n"
"uni.subscribe().with(\n"
"    resp -> System.out.println(\"Success: \" + resp),\n"
"    failure -> System.out.println(\"Failed: \" + failure.getMessage())\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:57
#, fuzzy
msgid "In Quarkus, most of the time, you return the `Uni`, and Quarkus subscribes to it.  So, don't be mistaken, there is a subscription, you may not see it."
msgstr "Quarkusでは、ほとんどの場合、あなたが `Uni` 、Quarkusがそれを購読します。ですから、誤解しないでください、購読はあります、あなたはそれを見ないかもしれません。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:60
#, fuzzy
msgid "This laziness is the retry secret.  In the following sequence diagram, you can see that the request is sent when we get a subscriber:"
msgstr "この怠慢がリトライの秘密です。以下のシーケンス図では、サブスクライバーを獲得したときにリクエストを送信していることがわかります："

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:62
#, fuzzy
msgid "image:/assets/images/posts/mutiny-retry/subscription.png[]"
msgstr "image:/assets/images/posts/mutiny-retry/subscription.png[alt=\"subscription\"]"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:65
#, fuzzy
msgid "An interesting consequence of this is that if you subscribe twice, you emit two requests, and so get two responses:"
msgstr "このことの興味深い帰結は、2回サブスクライブすると、2つのリクエストを発することになり、2つのレスポンスを得ることができるということです："

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:67
#, fuzzy
msgid "image:/assets/images/posts/mutiny-retry/double-subscription.png[]"
msgstr "image:/assets/images/posts/mutiny-retry/double-subscription.png[alt=\"double subscription\"]"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:72
#, fuzzy
msgid "But let’s go back to retry.  What’s a retry? A retry is a reaction to a failure, so you are going to write: `uni.onFailure().retry()`.  You also need to indicate how long do you want to retry:"
msgstr "しかし、リトライに話を戻そう。リトライって何？リトライとは、失敗に対するリアクションのことで、 `uni.onFailure().retry()` と書くことになります。また、どれくらいの時間リトライするのかを示す必要があります："

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:80
#, no-wrap
msgid ""
"Uni<String> uni = invokePickyService(client)\n"
"    .onFailure().retry().indefinitely();\n"
"uni.subscribe().with(\n"
"        resp -> System.out.println(\"Success: \" + resp)\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:83
#, fuzzy
msgid "In this snippet, we retry _indefinitely_ until we get a successful result."
msgstr "このスニペットでは、成功する結果が得られるまで、 _無限に_ リトライしています。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:87
#, fuzzy
msgid "But, how does it work under the hood? It’s quite simple.  If it gets a failure, it just re-subscribes:"
msgstr "でも、その中身はどうなっているのでしょう？それはとてもシンプルです。失敗したら、再登録するだけです："

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:89
#, fuzzy
msgid "image:/assets/images/posts/mutiny-retry/retry.png[]"
msgstr "image:/assets/images/posts/mutiny-retry/retry.png[alt=\"retry\"]"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:92
#, fuzzy
msgid "It resubscribes until it gets a successful response.  In other words, retrying is resubscribing."
msgstr "成功した応答が得られるまで再受信する。つまり、再試行とは再購読のことです。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:94
#, fuzzy
msgid "## How many times should I retry?"
msgstr "何回リトライすればいいのでしょうか？\n"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:99
#, fuzzy
msgid "That’s always a good question.  Should I retry _indefinitely_? Most probably, not.  Indefinitely can be very long, and it could never end if the called service fails continuously."
msgstr "それは常に良い質問です。 _無期限で_ リトライすべきなのか？おそらく、そうではないでしょう。無限にというのは非常に長くなり、呼び出されたサービスが連続して失敗した場合、永遠に終わらない可能性があります。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:101
#, fuzzy
msgid "You can configure the number of retries using `atMost`:"
msgstr "リトライ回数は、 `atMost` を使って設定することができます："

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:111
#, no-wrap
msgid ""
" Uni<String> uni = invokePickyService(client)\n"
"    .onFailure().retry().atMost(2);\n"
"uni.subscribe().with(\n"
"        resp -> System.out.println(\"Success: \" + resp),\n"
"        failure -> System.out.println(\"Failure: \" + failure.getMessage())\n"
");\n"
"----        \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:114
#, no-wrap
msgid ""
"`atMost` indicates that at most `n` attempts will be done before failing.\n"
"If we still get a failure after that number of resubscription, the last failure is sent to the subscriber.\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:116
#, no-wrap
msgid "image:/assets/images/posts/mutiny-retry/retry-failed.png[]\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:118
#, no-wrap
msgid "You can also use `until` and decide to retry by looking at the received failure:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:120
#: upstream/_posts/2020-10-13-uni-retry.adoc:139
#, no-wrap
msgid "[source, java]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:123
#, fuzzy, no-wrap
msgid ""
"Uni<String> uni = invokePickyService(client)\n"
"    .onFailure().retry().until(failure -> ! (failure instanceof TooManyRequestsException));\n"
msgstr "Uni<String> uni = invokePickyService(client) .onFailure().retry().until(failure → ！(failure instanceof TooManyRequestsException))；"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:126
#, no-wrap
msgid "## Bonus: Exponential backoff\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:131
#, no-wrap
msgid ""
"So far, our retries happen immediately.\n"
"It might not be very wise, and separating a bit our retries may give better results, especially when facing intermittent failures due to the load or other external causes.\n"
"Using exponential backoff provides a reasonable tradeoff.\n"
"Retrying with exponential backoff:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:137
#, no-wrap
msgid ""
"* retries after an initial delay,\n"
"* on every failure, it doubles the previous delay, with an optional maximum,\n"
"* it can use a jitter to add a random duration to the delay,\n"
"* it can have a max delay if needed,\n"
"* it is still constrained by `atMost` \n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:143
#, fuzzy, no-wrap
msgid ""
"Uni<String> uni = invokePickyService(client)\n"
"    .onFailure().retry()\n"
"        .withBackOff(Duration.ofSeconds(1)).withJitter(0.2).atMost(10);\n"
msgstr "Uni<String> uni = invokePickyService(client) .onFailure().retry() .withBackOff(Duration.ofSeconds(1)).withJitter(0.2).atMost(10)；"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:144
#, fuzzy, no-wrap
msgid "\n"
msgstr "\n"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:149
#, fuzzy
msgid "This last snippet configures the retry with exponential backoff.  The first retry happens after 1 second, and then it doubles every time without an upper limit.  Random jitter is applied to delays.  If, unfortunately, after ten attempts, it still fails, the failure is sent to the subscriber."
msgstr "この最後のスニペットは、指数関数的なバックオフで再試行を設定します。最初のリトライは1秒後に行われ、その後は上限なく毎回2倍になります。遅延にはランダムジッターが適用されます。残念ながら、10回試しても失敗した場合、その失敗が加入者に送信されます。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:151
#, fuzzy
msgid "## Demo time!"
msgstr "デモの時間です！\n"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:155
#, fuzzy
msgid "Ok, enough talking.  I’ve built a simple playground where you can adjust and try the various retry policies: https://gist.github.com/cescoffier/e9abce907a1c3d05d70bea3dae6dc3d5.  You can _jbang_ the script by downloading it and running `jbang Retry.java`, or just run:"
msgstr "さて、話はここまで。私は、様々な再試行ポリシーを調整し試すことができる簡単なプレイグラウンドを link:https://gist.github.com/cescoffier/e9abce907a1c3d05d70bea3dae6dc3d5[作りました: https://gist.github.com/cescoffier/e9abce907a1c3d05d70bea3dae6dc3d5.] スクリプトをダウンロードし、 `jbang Retry.java` を実行することで _jbangする_ こともできますし、単に実行することもできます："

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:159
#, no-wrap
msgid "jbang https://gist.github.com/cescoffier/e9abce907a1c3d05d70bea3dae6dc3d5\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:162
#, fuzzy
msgid "The called service fails 50% of the time (well, it uses a random, so statistically 50% of the time)."
msgstr "呼び出されたサービスは50％の確率で失敗します（まあ、ランダムを使うので統計的には50％ですが）。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:169
#, fuzzy
msgid "That concludes this blog post.  Again, before using retry, please verify that your system can support it.  Retrying is resubscribing.  You can configure how long, how many times, and when retrying should be attempted.  There are many more options offered by Mutiny, like `when` or using deadlines (`expireIn` and `expireAt`) when using exponential backoff.  You can try all these with the provided playground."
msgstr "以上で、このブログ記事を終了します。繰り返しになりますが、リトライを使用する前に、お使いのシステムがリトライに対応できるかどうか確認してください。リトライとは再加入のことです。リトライを試みる期間、回数、タイミングを設定することができます。Mutinyには、 `when` 、指数関数的バックオフを使用する際のデッドライン( `expireIn` と `expireAt` )の使用など、他にも多くのオプションが用意されています。提供されているプレイグラウンドで、これらすべてを試すことができます。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:170
#, fuzzy
msgid "Stay tuned! We have plenty of other gems to discuss here!"
msgstr "ご期待ください！この他にも珠玉の作品をたくさんご紹介しています！"
