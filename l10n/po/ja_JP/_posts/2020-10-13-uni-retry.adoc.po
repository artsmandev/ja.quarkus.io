msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"Last week, David, a Quarkus user, asked me about retrying an asynchronous operation.\n"
"David has a _picky_ remote HTTP service, which sometimes misbehaves.\n"
"Easy answer!\n"
"Just do: `uni.onFailure().retry().atMost(x)`.\n"
"But, David is curious, and asked me a second question: how does retry work?\n"
"Well, that’s simple; it just retries...\n"
"As you can imagine, that did not satisfy David’s curiosity."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"While I was answering to David, I realized that retrying is not that simple and deserves more explanation.\n"
"That’s what we are going to see in this blog post."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid "Disclaimer about retries"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"Okay, if you are the kind of reader who skips the terms and conditions, you can jump to the next section.\n"
"But, for others, I need to warn you about retries.\n"
"Retries may not be the solution to your problem, as it can be terrible.\n"
"Retrying can only be done if your system can handle duplicated requests or messages.\n"
"In other words, you can only retry if your system is idempotent, i.e., sending a request or a message multiple times does not change the overall state.\n"
"In doubt, check before implementing a retry, as it can harm your system."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid "Retry is about resubscribing"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"Unis are lazy.\n"
"Until someone subscribes to them, nothing happens.\n"
"In our case, the request is only sent to the remote service when someone subscribes to the `uni`.\n"
"So to execute the request, we need to subscribe:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"In Quarkus, most of the time, you return the `Uni`, and Quarkus subscribes to it.\n"
"So, don't be mistaken, there is a subscription, you may not see it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"This laziness is the retry secret.\n"
"In the following sequence diagram, you can see that the request is sent when we get a subscriber:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"But let’s go back to retry.\n"
"What’s a retry?\n"
"A retry is a reaction to a failure, so you are going to write: `uni.onFailure().retry()`.\n"
"You also need to indicate how long do you want to retry:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"But, how does it work under the hood?\n"
"It’s quite simple.\n"
"If it gets a failure, it just re-subscribes:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"It resubscribes until it gets a successful response.\n"
"In other words, retrying is resubscribing."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid "How many times should I retry?"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"That’s always a good question.\n"
"Should I retry _indefinitely_?\n"
"Most probably, not.\n"
"Indefinitely can be very long, and it could never end if the called service fails continuously."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"`atMost` indicates that at most `n` attempts will be done before failing.\n"
"If we still get a failure after that number of resubscription, the last failure is sent to the subscriber."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid "image:/assets/images/posts/mutiny-retry/retry-failed.png[]"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid "You can also use `until` and decide to retry by looking at the received failure:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid "Bonus: Exponential backoff"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"So far, our retries happen immediately.\n"
"It might not be very wise, and separating a bit our retries may give better results, especially when facing intermittent failures due to the load or other external causes.\n"
"Using exponential backoff provides a reasonable tradeoff.\n"
"Retrying with exponential backoff:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid "retries after an initial delay,"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid "on every failure, it doubles the previous delay, with an optional maximum,"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid "it can use a jitter to add a random duration to the delay,"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid "it can have a max delay if needed,"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid "it is still constrained by `atMost`"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"This last snippet configures the retry with exponential backoff.\n"
"The first retry happens after 1 second, and then it doubles every time without an upper limit.\n"
"Random jitter is applied to delays.\n"
"If, unfortunately, after ten attempts, it still fails, the failure is sent to the subscriber."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid "Demo time!"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"Ok, enough talking.\n"
"I’ve built a simple playground where you can adjust and try the various retry policies: https://gist.github.com/cescoffier/e9abce907a1c3d05d70bea3dae6dc3d5.\n"
"You can _jbang_ the script by downloading it and running `jbang Retry.java`, or just run:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-10-13-uni-retry.adoc
msgid ""
"That concludes this blog post.\n"
"Again, before using retry, please verify that your system can support it.\n"
"Retrying is resubscribing.\n"
"You can configure how long, how many times, and when retrying should be attempted.\n"
"There are many more options offered by Mutiny, like `when` or using deadlines (`expireIn` and `expireAt`) when using exponential backoff.\n"
"You can try all these with the provided playground."
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "Mutiny - How does retry... retries?"
msgstr "Mutiny - リトライ...再試行ってどうやるの？"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "How does `retry` actually work?"
msgstr "`retry` 、実際はどうなのでしょうか？"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:31
#, fuzzy
msgid "Disclaimer said! Let’s look under the hood of retry."
msgstr "と免責事項がありました！リトライのフードを覗いてみましょう。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:35
#, fuzzy
msgid "Let’s imagine you have a `Uni` representing your asynchronous action, like in David’s case, an invocation of a remote service:"
msgstr "例えば、Davidの場合、リモートサービスの呼び出しのような非同期アクションを表す `Uni` があるとしましょう："

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:62
#, fuzzy
msgid "image:/assets/images/posts/mutiny-retry/subscription.png[]"
msgstr "image:/assets/images/posts/mutiny-retry/subscription.png[alt=\"subscription\"]"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:65
#, fuzzy
msgid "An interesting consequence of this is that if you subscribe twice, you emit two requests, and so get two responses:"
msgstr "このことの興味深い帰結は、2回サブスクライブすると、2つのリクエストを発することになり、2つのレスポンスを得ることができるということです："

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:67
#, fuzzy
msgid "image:/assets/images/posts/mutiny-retry/double-subscription.png[]"
msgstr "image:/assets/images/posts/mutiny-retry/double-subscription.png[alt=\"double subscription\"]"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:83
#, fuzzy
msgid "In this snippet, we retry _indefinitely_ until we get a successful result."
msgstr "このスニペットでは、成功する結果が得られるまで、 _無限に_ リトライしています。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:89
#, fuzzy
msgid "image:/assets/images/posts/mutiny-retry/retry.png[]"
msgstr "image:/assets/images/posts/mutiny-retry/retry.png[alt=\"retry\"]"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:101
#, fuzzy
msgid "You can configure the number of retries using `atMost`:"
msgstr "リトライ回数は、 `atMost` を使って設定することができます："

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:162
#, fuzzy
msgid "The called service fails 50% of the time (well, it uses a random, so statistically 50% of the time)."
msgstr "呼び出されたサービスは50％の確率で失敗します（まあ、ランダムを使うので統計的には50％ですが）。"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:170
#, fuzzy
msgid "Stay tuned! We have plenty of other gems to discuss here!"
msgstr "ご期待ください！この他にも珠玉の作品をたくさんご紹介しています！"
