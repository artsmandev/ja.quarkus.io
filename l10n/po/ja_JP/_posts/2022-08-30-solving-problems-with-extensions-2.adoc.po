msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"**Problem of the day:** A library is using the `@Inject` annotation to handle its internal injection and, when used on beans, that will conflict with the CDI injection we have in Quarkus.\n"
"Leading to the impossibility for the CDI layer to inject these objects as they are not CDI beans."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"As for the first post of the series, this post is based on my work on https://github.com/quarkiverse/quarkus-github-app[the Quarkus GitHub App extension]\n"
"that allows you to develop GitHub Apps based on Quarkus at light speed with very little boilerplate."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"The newest feature of this extension is the ability to easily develop comment-based commands in your GitHub apps.\n"
"For instance, do something when a user posts a `@bot do-something` in a comment of a pull request."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"While it is possible to implement it all by yourself with the standard features of Quarkus GitHub App,\n"
"we developed an additional extension to make things even easier."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"This extension is based on the https://rvesse.github.io/airline/[Airline library].\n"
"This library is designed to easily parse and execute command lines.\n"
"While originally designed to develop CLI applications, it is a perfect fit for our usage."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"This is a problem for us as this `@Inject` annotation is used by CDI injection and, in the context of our extension, the `@Command` classes are CDI beans.\n"
"Thus, this particular `@Inject` annotation will also be interpreted by ArC, our CDI implementation, and ArC will try to inject `GlobalMetadata` as a CDI bean... and fail because it is not a CDI bean."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"Ideally, the Airline library wouldn't use the `@Inject` annotation for its internal purpose\n"
"and the good news is, in the latest versions, the annotation used for injection can be specified."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"The set of classes the Airline library is susceptible to inject is limited:\n"
"it is used to inject a limited number of classes and to handle composition (i.e. sharing components across several commands)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"If you are familiar with Quarkus, you are probably familiar with the notion of Jandex index.\n"
"In Quarkus, we build indexes of the project annotations and these indexes are used by our core and extensions to find annotations (and more)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"Annotations transformers can add, remove, update existing annotations before consumption by ArC.\n"
"These are used by several features in Quarkus, for instance Hibernate Validator interceptor support."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"This behavior is of great interest to us:\n"
"we could hide the annotations from ArC using an annotations transformer\n"
"while keeping them available for Airline to consume them via reflection."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"We remove the `@Inject` annotation from the transformed view visible to ArC.\n"
"Make sure you don't forget to finalize the transformation with `.done()`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"Now that we have created our annotations transformer,\n"
"we need to make sure Quarkus knows about it."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"And that's it, from now on, the `@Inject` annotations consumed by the Airline library will be hidden from ArC,\n"
"while still being visible from the Airline library, which uses reflection."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-08-30-solving-problems-with-extensions-2.adoc
msgid ""
"Once again, we have seen how the unique build infrastructure of Quarkus can solve real life issues with very little boilerplate.\n"
"And that with unified concepts that are very easy to grasp."
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, fuzzy, no-wrap
msgid "Solving problems with Quarkus extensions (2/n)"
msgstr "Quarkusエクステンションで問題を解決する（2/n)"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, no-wrap
msgid "The unique build infrastructure of Quarkus allows you to solve complex issues in a very simple way by developing custom extensions."
msgstr "Quarkusのユニークなビルドインフラストラクチャでは、カスタムエクステンションを開発することで、非常にシンプルな方法で複雑な問題を解決することができます。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:13
#, fuzzy
msgid "We are all good: 2 posts make a series!"
msgstr "We are all good: 2 post make a series！"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:15
#, fuzzy
msgid "If you haven't looked at the first post of this series, I invite you to link:/blog/solving-problems-with-extensions/[read it]!"
msgstr "このシリーズの最初の投稿をまだ見ていない方は、ぜひ link:/blog/solving-problems-with-extensions/[読んでみて] ください！"

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:19
#, no-wrap
msgid "Some context"
msgstr "いくつかのコンテキスト"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:31
#, fuzzy
msgid "Implementing a comment-based command with this extension is as easy as:"
msgstr "このエクステンションでコメントベースのコマンドを実装するのは、次のように簡単です："

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:49
#, fuzzy
msgid "The `run()` method of the `DoSomething` class will be called any time a user posts `@bot do-something` as a comment in an issue or pull request."
msgstr "`DoSomething` クラスの `run()` メソッドは、ユーザーが課題またはプルリクエストにコメントとして `@bot do-something` を投稿するたびに呼び出されます。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:51
#, fuzzy
msgid "These are the basics but the extension has a ton of other features such as reaction-based feedback, scopes, permissions..."
msgstr "これらは基本的なことですが、エクステンションには、反応ベースのフィードバック、スコープ、パーミッションなど、他にもたくさんの機能があります...。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:57
#, fuzzy
msgid "One problem that we have with this library is that it uses the `@Inject` annotation for injecting some objects into commands such as `GlobalMetadata`:"
msgstr "このライブラリの問題点として、 `GlobalMetadata` のようなコマンドにいくつかのオブジェクトを注入するために `@Inject` のアノテーションを使用していることが挙げられます："

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:77
#, fuzzy
msgid "Suffice to say it won't work very well and we need to fix it."
msgstr "あまりうまくいかないので、修正する必要があると言えば十分でしょう。"

#. type: delimited block =
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:81
#, fuzzy
msgid "Not making `@Command` classes CDI beans is NOT an option as we want regular CDI injection to work."
msgstr "`@Command` クラスを CDI Bean にしないことは、通常の CDI インジェクションを動作させたいので、選択肢にはない。"

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:83
#, no-wrap
msgid "How can we work around this?"
msgstr "どうすれば回避できるのか？"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:89
#, fuzzy
msgid "But for the sake of the exercise, let's stick to the previous Airline version."
msgstr "しかし、演習のために、以前のエアライン編にこだわってみましょう。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:91
#, fuzzy
msgid "So now what?"
msgstr "で、どうする？"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:96
#, fuzzy
msgid "For these use cases, we somehow need ArC to ignore the injection points."
msgstr "このようなユースケースの場合、ArCにインジェクションポイントを無視させる必要があるのです。"

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:97
#, fuzzy, no-wrap
msgid "AnnotationTransformers to the rescue"
msgstr "アノテーショントランスフォーマーで救われる"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:103
#, fuzzy
msgid "ArC, our CDI implementation, is one of the components that consumes the Jandex indexes."
msgstr "CDIを実装したArCは、Jandexのインデックスを消費するコンポーネントの1つです。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:105
#, fuzzy
msgid "Interestingly though, ArC does not consume the Jandex index as is:"
msgstr "しかし、興味深いことに、ArCはJandexのインデックスをそのまま消費しているわけではありません："

#. type: delimited block =
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:114
#, fuzzy
msgid "Annotations transformers do NOT modify the original classes, nor do they modify the Jandex indexes."
msgstr "アノテーション変換は、元のクラスを変更したり、Jandexインデックスを変更することはありません。"

#. type: delimited block =
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:116
#, fuzzy
msgid "Using annotations transfomers will solely impact ArC, our CDI implementation."
msgstr "アノテーショントランスフォーマーの使用は、CDIの実装であるArCにのみ影響を与えます。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:123
#, fuzzy
msgid "Let's create our annotations transformer:"
msgstr "アノテーショントランスフォーマーを作成しましょう："

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:177
#, fuzzy
msgid "Our class implements `AnnotationsTransformer`."
msgstr "私たちのクラスは、 `AnnotationsTransformer` を実装しています。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:178
#, fuzzy
msgid "We inject the Jandex index in our transformer as we will need it to detect composition."
msgstr "合成を検出するために必要なので、トランスフォーマーにJandexインデックスを注入します。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:179
#, fuzzy
msgid "We are only interested in fields so let's apply our transformer to fields only."
msgstr "我々はフィールドにしか興味がないので、トランスフォーマーをフィールドだけに適用してみましょう。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:180
#, fuzzy
msgid "If the field is not annotated with `@Inject`, it is of no interest to us."
msgstr "フィールドに `@Inject` のアノテーションがなければ、そのフィールドは私たちにとって興味がない。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:181
#, fuzzy
msgid "If the field type is `GlobalMetadata`, `GroupMetadata` or `CommandMetadata`, we know it is the responsibility of Airline to inject it."
msgstr "フィールドタイプが `GlobalMetadata` , `GroupMetadata` または `CommandMetadata` の場合、注入するのは航空会社の責任であることがわかります。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:182
#, fuzzy
msgid "We are also detecting composition."
msgstr "組成も検知しています。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:185
#, fuzzy
msgid "For composition, we detect if the field is of a type that contains `@Arguments` or `@Option` annotations."
msgstr "構成については、フィールドが `@Arguments` または `@Option` のアノテーションを含むタイプであるかどうかを検出します。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:190
#, fuzzy
msgid "As usual, for the Quarkus build process, you just need to produce a `BuildItem` to register the annotations transformer:"
msgstr "例によってQuarkusのビルドプロセスについては、アノテーショントランスフォーマーを登録するための `BuildItem` を生成するだけです："

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:205
#, fuzzy
msgid "Regular CDI injection is still supported as only the `@Inject` annotations handled by Airline are hidden from ArC."
msgstr "Airlineが扱う `@Inject` のアノテーションのみがArCから隠されているため、通常のCDIインジェクションは引き続きサポートされています。"

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:206
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"
