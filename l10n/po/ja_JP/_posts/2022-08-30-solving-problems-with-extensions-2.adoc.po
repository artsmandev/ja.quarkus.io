# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-26 17:40+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, no-wrap
msgid "gsmet"
msgstr "gsmet"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, fuzzy, no-wrap
msgid "2022-08-30"
msgstr "2022-08-30"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, no-wrap
msgid "The unique build infrastructure of Quarkus allows you to solve complex issues in a very simple way by developing custom extensions."
msgstr "Quarkusのユニークなビルドインフラストラクチャでは、カスタムエクステンションを開発することで、非常にシンプルな方法で複雑な問題を解決することができます。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, no-wrap
msgid "extensions development-tips"
msgstr "extensions development-tips"

#. type: YAML Front Matter: title
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, fuzzy, no-wrap
msgid "Solving problems with Quarkus extensions (2/n)"
msgstr "Quarkusエクステンションで問題を解決する（2/n）"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:13
#, fuzzy
msgid "We are all good: 2 posts make a series!"
msgstr "We are all good: 2 post make a series！"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:15
#, fuzzy
msgid "If you haven't looked at the first post of this series, I invite you to link:/blog/solving-problems-with-extensions/[read it]!"
msgstr "このシリーズの最初の投稿をまだ見ていない方は、ぜひ link:/blog/solving-problems-with-extensions/[読んでみて] ください！"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:18
#, fuzzy, no-wrap
msgid ""
"**Problem of the day:** A library is using the `@Inject` annotation to handle its internal injection and, when used on beans, that will conflict with the CDI injection we have in Quarkus.\n"
"Leading to the impossibility for the CDI layer to inject these objects as they are not CDI beans.\n"
msgstr "*今日の問題です： *あるライブラリは、 `@Inject` アノテーションを使用して内部注入を処理していますが、Beanに使用すると、QuarkusにあるCDI注入と衝突します。その結果、CDIレイヤーがこれらのオブジェクトを注入することができなくなり、CDIビーンではなくなってしまう。"

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:19
#, no-wrap
msgid "Some context"
msgstr "いくつかのコンテキスト"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:23
#, fuzzy
msgid "As for the first post of the series, this post is based on my work on https://github.com/quarkiverse/quarkus-github-app[the Quarkus GitHub App extension] that allows you to develop GitHub Apps based on Quarkus at light speed with very little boilerplate."
msgstr "連載第1回目として、この投稿は、QuarkusをベースにしたGitHub Appを、ほとんどボイラープレートなしで光速で開発できる link:https://github.com/quarkiverse/quarkus-github-app[Quarkus GitHub App extensionを] 開発した私の仕事に基づいています。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:26
#, fuzzy
msgid "The newest feature of this extension is the ability to easily develop comment-based commands in your GitHub apps.  For instance, do something when a user posts a `@bot do-something` in a comment of a pull request."
msgstr "この拡張機能の最新機能は、GitHubアプリでコメントベースのコマンドを簡単に開発できるようになることです。例えば、ユーザーがプルリクエストのコメントに `@bot do-something` を投稿したときに何かする。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:29
#, fuzzy
msgid "While it is possible to implement it all by yourself with the standard features of Quarkus GitHub App, we developed an additional extension to make things even easier."
msgstr "Quarkus GitHub Appの標準機能ですべて自分で実装することも可能ですが、さらに簡単にするために追加の拡張機能を開発しました。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:31
#, fuzzy
msgid "Implementing a comment-based command with this extension is as easy as:"
msgstr "この拡張機能でコメントベースのコマンドを実装するのは、次のように簡単です："

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:36
#, no-wrap
msgid ""
"@Cli(name = \"@bot\", commands = { DoSomething.class }) \n"
"public class MyFirstCli {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:39
#, no-wrap
msgid ""
"    @Command(name = \"do-something\") \n"
"    static class DoSomething implements Runnable { \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:46
#, no-wrap
msgid ""
"        @Override\n"
"        public void run() { \n"
"            // do something\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:49
#, fuzzy
msgid "The `run()` method of the `DoSomething` class will be called any time a user posts `@bot do-something` as a comment in an issue or pull request."
msgstr "`DoSomething` クラスの `run()` メソッドは、ユーザーが課題またはプルリクエストにコメントとして `@bot do-something` を投稿するたびに呼び出されます。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:51
#, fuzzy
msgid "These are the basics but the extension has a ton of other features such as reaction-based feedback, scopes, permissions..."
msgstr "これらは基本的なことですが、この拡張機能には、反応ベースのフィードバック、スコープ、パーミッションなど、他にも多くの機能があります。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:55
#, fuzzy
msgid "This extension is based on the https://rvesse.github.io/airline/[Airline library].  This library is designed to easily parse and execute command lines.  While originally designed to develop CLI applications, it is a perfect fit for our usage."
msgstr "この拡張機能は、 link:https://rvesse.github.io/airline/[Airline ライブラリを] ベースにしています。このライブラリは、コマンドラインを簡単に解析して実行できるように設計されています。本来はCLIアプリケーションを開発するために設計されたものですが、私たちの使い方にはぴったりです。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:57
#, fuzzy
msgid "One problem that we have with this library is that it uses the `@Inject` annotation for injecting some objects into commands such as `GlobalMetadata`:"
msgstr "このライブラリの問題点として、 `@Inject` アノテーションを使用して、 `GlobalMetadata` のようなコマンドにいくつかのオブジェクトを注入していることが挙げられます："

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:62
#, no-wrap
msgid ""
"@Command(name = \"do-something\") \n"
"static class DoSomething implements Runnable { \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:65
#, no-wrap
msgid ""
"    @Inject\n"
"    GlobalMetadata metadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:71
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() { \n"
"        // do something\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:75
#, fuzzy
msgid "This is a problem for us as this `@Inject` annotation is used by CDI injection and, in the context of our extension, the `@Command` classes are CDI beans.  Thus, this particular `@Inject` annotation will also be interpreted by ArC, our CDI implementation, and ArC will try to inject `GlobalMetadata` as a CDI bean... and fail because it is not a CDI bean."
msgstr "この `@Inject` アノテーションは CDI インジェクションで使用され、私たちの拡張の文脈では `@Command` クラスは CDI Bean であるため、これは私たちにとって問題である。したがって、この特定の `@Inject` アノテーションは、CDI の実装である ArC でも解釈され、ArC は `GlobalMetadata` を CDI Bean として注入しようとしますが、CDI Bean ではないので失敗します。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:77
#, fuzzy
msgid "Suffice to say it won't work very well and we need to fix it."
msgstr "あまりうまくいかないので、修正する必要があると言えば十分でしょう。"

#. type: delimited block =
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:81
#, fuzzy
msgid "Not making `@Command` classes CDI beans is NOT an option as we want regular CDI injection to work."
msgstr "`@Command` クラスを CDI Bean にしないことは、通常の CDI インジェクションを動作させたいので、オプションではありません。"

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:83
#, no-wrap
msgid "How can we work around this?"
msgstr "どうすれば回避できるのか？"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:87
#, fuzzy
msgid "Ideally, the Airline library wouldn't use the `@Inject` annotation for its internal purpose and the good news is, in the latest versions, the annotation used for injection can be specified."
msgstr "理想的には、Airlineライブラリは `@Inject` のアノテーションを内部目的に使用しません。良いニュースは、最新のバージョンでは、注入に使用するアノテーションを指定することができることです。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:89
#, fuzzy
msgid "But for the sake of the exercise, let's stick to the previous Airline version."
msgstr "しかし、演習のために、以前のエアライン編にこだわってみましょう。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:91
#, fuzzy
msgid "So now what?"
msgstr "で、どうする？"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:94
#, fuzzy
msgid "The set of classes the Airline library is susceptible to inject is limited: it is used to inject a limited number of classes and to handle composition (i.e. sharing components across several commands)."
msgstr "Airlineライブラリが注入しやすいクラスのセットは限られています：限られた数のクラスを注入し、コンポジション（複数のコマンド間でコンポーネントを共有すること）を処理するために使用されます。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:96
#, fuzzy
msgid "For these use cases, we somehow need ArC to ignore the injection points."
msgstr "このようなユースケースの場合、ArCにインジェクションポイントを無視させる必要があるのです。"

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:97
#, fuzzy, no-wrap
msgid "AnnotationTransformers to the rescue"
msgstr "アノテーショントランスフォーマーで救われる"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:101
#, fuzzy
msgid "If you are familiar with Quarkus, you are probably familiar with the notion of Jandex index.  In Quarkus, we build indexes of the project annotations and these indexes are used by our core and extensions to find annotations (and more)."
msgstr "Quarkusに慣れている方なら、Jandexインデックスの概念に詳しいと思います。Quarkusでは、プロジェクトの注釈のインデックスを構築し、これらのインデックスはコアや拡張機能で注釈（やその他）を検索するために使用されます。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:103
#, fuzzy
msgid "ArC, our CDI implementation, is one of the components that consumes the Jandex indexes."
msgstr "CDIを実装したArCは、Jandexのインデックスを消費するコンポーネントの1つです。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:105
#, fuzzy
msgid "Interestingly though, ArC does not consume the Jandex index as is:"
msgstr "しかし、興味深いことに、ArCはJandexのインデックスをそのまま消費しているわけではありません："

#. type: Target for macro image
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:106
#, no-wrap
msgid "annotations-transformers.svg"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:110
#, fuzzy
msgid "Annotations transformers can add, remove, update existing annotations before consumption by ArC.  These are used by several features in Quarkus, for instance Hibernate Validator interceptor support."
msgstr "アノテーショントランスフォーマーは、ArCで使用する前に、既存のアノテーションを追加、削除、更新できます。これらはQuarkusのいくつかの機能、例えばHibernate Validatorインターセプターのサポートで使用されています。"

#. type: delimited block =
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:114
#, fuzzy
msgid "Annotations transformers do NOT modify the original classes, nor do they modify the Jandex indexes."
msgstr "アノテーショントランスフォーマーは、元のクラスを変更したり、Jandexインデックスを変更したりすることはありません。"

#. type: delimited block =
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:116
#, fuzzy
msgid "Using annotations transfomers will solely impact ArC, our CDI implementation."
msgstr "アノテーション・トランスフォーマーの使用は、CDIの実装であるArCにのみ影響します。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:121
#, fuzzy
msgid "This behavior is of great interest to us: we could hide the annotations from ArC using an annotations transformer while keeping them available for Airline to consume them via reflection."
msgstr "この動作は私たちにとって非常に興味深いもので、アノテーション変換器を用いてArCからアノテーションを隠すことができる一方で、Airlineがリフレクションによってアノテーションを消費できるようにすることができます。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:123
#, fuzzy
msgid "Let's create our annotations transformer:"
msgstr "それでは、アノテーショントランスフォーマーを作成しましょう："

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:127
#, no-wrap
msgid "public class HideAirlineInjectAnnotationsTransformer implements AnnotationsTransformer { <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:129
#, no-wrap
msgid "    private final IndexView index;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:133
#, no-wrap
msgid ""
"    HideAirlineInjectAnnotationsTransformer(IndexView index) { <2>\n"
"        this.index = index;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:138
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean appliesTo(Kind kind) {\n"
"        return Kind.FIELD == kind; <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:142
#, no-wrap
msgid ""
"    @Override\n"
"    public void transform(TransformationContext transformationContext) {\n"
"        FieldInfo fieldInfo = transformationContext.getTarget().asField();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:146
#, no-wrap
msgid ""
"        if (!fieldInfo.hasAnnotation(DotNames.INJECT)) { <4>\n"
"            return;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:156
#, no-wrap
msgid ""
"        if (fieldInfo.hasAnnotation(ARGUMENTS) ||\n"
"                fieldInfo.hasAnnotation(OPTION) ||\n"
"                GLOBAL_METADATA.equals(fieldInfo.type().name()) || <5>\n"
"                COMMAND_GROUP_METADATA.equals(fieldInfo.type().name()) ||\n"
"                COMMAND_METADATA.equals(fieldInfo.type().name()) ||\n"
"                isComposition(fieldInfo)) { <6>\n"
"            transformationContext.transform().remove(ai -> DotNames.INJECT.equals(ai.name())).done(); <7>\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:159
#, no-wrap
msgid ""
"    private boolean isComposition(FieldInfo fieldInfo) { <8>\n"
"        Type fieldType = fieldInfo.type();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:163
#, no-wrap
msgid ""
"        if (fieldType.kind() != Type.Kind.CLASS) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:165
#, no-wrap
msgid "        ClassInfo fieldClass = index.getClassByName(fieldType.asClassType().name());\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:169
#, no-wrap
msgid ""
"        if (fieldClass == null) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:171
#, no-wrap
msgid "        Set<DotName> fieldClassAnnotations = fieldClass.annotationsMap().keySet();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:175
#, no-wrap
msgid ""
"        return fieldClassAnnotations.contains(ARGUMENTS) || fieldClassAnnotations.contains(OPTION);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:177
#, fuzzy
msgid "Our class implements `AnnotationsTransformer`."
msgstr "私たちのクラスは、 `AnnotationsTransformer` を実装しています。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:178
#, fuzzy
msgid "We inject the Jandex index in our transformer as we will need it to detect composition."
msgstr "合成を検出するために必要なので、トランスフォーマーにJandexインデックスを注入します。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:179
#, fuzzy
msgid "We are only interested in fields so let's apply our transformer to fields only."
msgstr "我々はフィールドにしか興味がないので、トランスフォーマーをフィールドだけに適用してみましょう。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:180
#, fuzzy
msgid "If the field is not annotated with `@Inject`, it is of no interest to us."
msgstr "フィールドに `@Inject` の注釈がない場合は、興味がありません。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:181
#, fuzzy
msgid "If the field type is `GlobalMetadata`, `GroupMetadata` or `CommandMetadata`, we know it is the responsibility of Airline to inject it."
msgstr "フィールドタイプが `GlobalMetadata `, `GroupMetadata` または `CommandMetadata` の場合、注入するのは航空会社の責任であることがわかります。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:182
#, fuzzy
msgid "We are also detecting composition."
msgstr "組成も検知しています。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:184
#, fuzzy
msgid "We remove the `@Inject` annotation from the transformed view visible to ArC.  Make sure you don't forget to finalize the transformation with `.done()`."
msgstr "ArCに見える変換されたビューから、 `@Inject` のアノテーションを削除します。 `.done()` で変換を確定することを忘れないようにしてください。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:185
#, fuzzy
msgid "For composition, we detect if the field is of a type that contains `@Arguments` or `@Option` annotations."
msgstr "構成については、フィールドが `@Arguments` または `@Option` のアノテーションを含むタイプであるかどうかを検出します。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:188
#, fuzzy
msgid "Now that we have created our annotations transformer, we need to make sure Quarkus knows about it."
msgstr "注釈トランスフォーマーを作成したので、Quarkusがそれを知っていることを確認する必要があります。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:190
#, fuzzy
msgid "As usual, for the Quarkus build process, you just need to produce a `BuildItem` to register the annotations transformer:"
msgstr "例によって、Quarkusのビルドプロセスについては、 `BuildItem` 、アノテーショントランスフォーマーを登録するために生成するだけです："

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:199
#, no-wrap
msgid ""
"@BuildStep\n"
"public void beanConfig(CombinedIndexBuildItem index,\n"
"        BuildProducer<AnnotationsTransformerBuildItem> annotationsTransformer) {\n"
"    annotationsTransformer\n"
"            .produce(new AnnotationsTransformerBuildItem(new HideAirlineInjectAnnotationsTransformer(index.getIndex())));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:203
#, fuzzy
msgid "And that's it, from now on, the `@Inject` annotations consumed by the Airline library will be hidden from ArC, while still being visible from the Airline library, which uses reflection."
msgstr "以上で、今後、Airlineライブラリが消費する `@Inject` のアノテーションは、ArCからは非表示になり、リフレクションを使用するAirlineライブラリからは見えるようになります。"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:205
#, fuzzy
msgid "Regular CDI injection is still supported as only the `@Inject` annotations handled by Airline are hidden from ArC."
msgstr "Airlineが扱う `@Inject` のアノテーションのみがArCから隠されているため、通常のCDIインジェクションは引き続きサポートされています。"

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:206
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:209
#, fuzzy
msgid "Once again, we have seen how the unique build infrastructure of Quarkus can solve real life issues with very little boilerplate.  And that with unified concepts that are very easy to grasp."
msgstr "Quarkusのユニークなビルドインフラストラクチャが、ほとんど定型文なしで現実の問題を解決できることを、改めて実感しました。しかも、統一されたコンセプトで、非常に理解しやすい。"
