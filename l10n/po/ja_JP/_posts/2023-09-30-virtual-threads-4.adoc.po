msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#. type: YAML Front Matter: title
#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy, no-wrap
msgid "Processing Kafka records on virtual threads"
msgstr "仮想スレッドでKafkaレコードを処理する"

#. type: YAML Front Matter: synopsis
#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy, no-wrap
msgid "Learn about the virtual threads integration in Quarkus messaging (Kafka, AMQP, Pulsar...)."
msgstr "Quarkusのメッセージング（Kafka、AMQP、Pulsar...）における仮想スレッドの統合について学びます。"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid ""
"In https://quarkus.io/blog/virtual-threads-2/[another blog post], we have seen how you can implement a CRUD application with Quarkus to utilize virtual threads.\n"
"The virtual threads support in Quarkus is not limited to REST and HTTP.\n"
"Many other parts support virtual threads, such as gRPC, scheduled tasks, and messaging.\n"
"In this post, we will see how you can process Kafka records on virtual threads, increasing the concurrency of the processing."
msgstr "link:https://quarkus.io/blog/virtual-threads-2/[別のブログ記事] で、QuarkusでCRUDアプリケーションを実装して仮想スレッドを利用する方法を紹介しました。Quarkusの仮想スレッドサポートは、RESTとHTTPに限りません。gRPC、スケジュールされたタスク、メッセージングなど、他の多くの部分でも仮想スレッドがサポートされています。この投稿では、仮想スレッドでKafkaレコードを処理し、処理の並行性を高める方法について説明します。"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid "Processing messages on virtual threads"
msgstr "仮想スレッドでのメッセージ処理"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid ""
"The Quarkus Reactive Messaging extension supports virtual threads.\n"
"Similarly to HTTP, to execute the processing on a virtual thread, you need to use the `@RunOnVirtualThread` annotation:"
msgstr "Quarkus Reactive Messaging 拡張モジュールは、仮想スレッドをサポートしています。HTTP と同様に、仮想スレッドで処理を実行するには `@RunOnVirtualThread` アノテーションを使用する必要があります："

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid ""
"The processing of each message runs on separate virtual threads.\n"
"So, for each message from the `input-channel`, a new virtual thread is created (as seen in https://quarkus.io/blog/virtual-thread-1/[this blog post], virtual thread creation is cheap)."
msgstr "各メッセージの処理は別々の仮想スレッドで実行されます。そのため、 `input-channel` からのメッセージごとに、新しい仮想スレッドが作成されます（ link:https://quarkus.io/blog/virtual-thread-1/[このブログ記事] で見たように、仮想スレッドの作成は安価です）。"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid ""
"This execution model can be used with any Quarkus reactive messaging connector, including AMQP 1.0, Apache Pulsar, and Apache Kafka.\n"
"The concurrency of this processing is no longer limited by the number of worker threads, as it would with the `@Blocking` annotation.\n"
"Thus, this novel execution model simplifies the development of highly concurrent data streaming applications."
msgstr "この実行モデルは、AMQP 1.0、Apache Pulsar、Apache Kafkaなど、どのQuarkusリアクティブ・メッセージング・コネクタでも使用できます。この処理の並行性は、 `@Blocking` アノテーションを使用した場合のように、ワーカースレッドの数によって制限されることはありません。したがって、この新しい実行モデルは、高度に並行なデータ・ストリーミング・アプリケーションの開発を簡素化します。"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid ""
"As we will see later, such high-level concurrency can cause problems.\n"
"To keep this concurrency controllable, Quarkus limits the number of concurrent message processing to `1024` (This default value is https://quarkus.io/guides/messaging-virtual-threads[configurable]).\n"
"One of the main benefits of this limit is preventing the application from polling millions of messages, which would be very expensive in terms of memory.\n"
"Without this limit, a Kafka application would poll all the records from the assigned topics-partitions and consume a large amount of memory."
msgstr "後で説明するように、このような高レベルの同時実行は問題を引き起こす可能性があります。この並行処理を制御可能な状態に保つため、Quarkusでは同時メッセージ処理数を `1024` （このデフォルト値は link:https://quarkus.io/guides/messaging-virtual-threads[設定可能] です）に制限しています。この制限の主な利点の1つは、アプリケーションが何百万ものメッセージをポーリングするのを防ぐことです。この制限がなければ、Kafkaアプリケーションは割り当てられたトピックパーティションからすべてのレコードをポーリングし、大量のメモリを消費することになります。"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid ""
"Also, you may wonder why we do not use virtual threads by default.\n"
"The reasons have been explained in https://quarkus.io/blog/virtual-thread-1/#five-things-you-need-to-know-before-using-virtual-threads-for-everything[a previous blog post].\n"
"There are limitations that can make virtual threads dangerous.\n"
"You need to make sure your virtual threads usage is safe before using it.\n"
"We will see a few examples in this post."
msgstr "また、なぜデフォルトで仮想スレッドを使わないのか不思議に思うかもしれません。その理由は link:https://quarkus.io/blog/virtual-thread-1/#five-things-you-need-to-know-before-using-virtual-threads-for-everything[以前のブログ記事] で説明しました。仮想スレッドには危険な制限があります。仮想スレッドを使用する前に、その使用方法が安全であることを確認する必要があります。この投稿ではいくつかの例を見てみましょう。"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid ""
"To illustrate how to process Kafka records on virtual threads, let's consider a simple application.\n"
"This application is a fake fraud detector.\n"
"It analyzes banking transactions, and if the transaction amount for a given account in a given period of time reaches a threshold, we consider there is fraud.\n"
"The code is available in this https://github.com/quarkusio/virtual-threads-demos/tree/main/kafka-example[GitHub repository].\n"
"Of course, you can use more complex detection algorithms, and even use AI/ML.\n"
"In this case, we use the https://redis.io/docs/data-types/timeseries/[Redis time series] commands inefficiently to introduce more I/O than necessary.\n"
"It is done purposefully to utilize the virtual thread's ability to block:"
msgstr "仮想スレッドでKafkaレコードを処理する方法を説明するために、簡単なアプリケーションを考えてみましょう。このアプリケーションは偽の不正検知器です。銀行取引を分析し、一定期間のある口座の取引額が閾値に達した場合、不正があったと判断します。コードはこの link:https://github.com/quarkusio/virtual-threads-demos/tree/main/kafka-example[GitHubリポジトリ] にあります。もちろん、もっと複雑な検知アルゴリズムを使うこともできますし、AI/MLを使うこともできます。このケースでは、 link:https://redis.io/docs/data-types/timeseries/[Redisの時系列] コマンドを非効率的に使用して、必要以上のI/Oを導入しています。これは、仮想スレッドのブロック能力を利用するために意図的に行っています："

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid ""
"If you run this application and have a burst of transactions, it will not work.\n"
"The processing is correctly executed on virtual threads.\n"
"However, the Redis connection pool has not been tuned to handle that concurrency level.\n"
"Very quickly, no Redis connections are available, and it starts enqueuing the commands into a waiting list.\n"
"When this queue is full, it starts rejecting the commands.\n"
"Fortunately, you can configure the max size of the waiting queue with:"
msgstr "このアプリケーションを実行し、トランザクションがバーストした場合、動作しません。処理は仮想スレッドで正しく実行されます。しかし、Redis接続プールはその同時実行レベルに対応するようにチューニングされていません。あっという間にRedis接続が利用できなくなり、待機リストにコマンドをキューイングし始めます。このキューがいっぱいになると、コマンドを拒否し始めます。幸い、待ちキューの最大サイズは"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid ""
"While we use Redis in this application, you will face identical problems with many other clients (including HTTP clients).\n"
"So, configure them properly to handle this new level of concurrency."
msgstr "このアプリケーションではRedisを使用していますが、他の多くのクライアント（HTTPクライアントを含む）でも同様の問題に直面するでしょう。そのため、この新しいレベルの並行性を処理できるように適切に設定してください。"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid "If you run the application and open the UI, you will see that the concurrency reached a maximum of 1024, as expected."
msgstr "アプリケーションを実行してUIを開くと、予想通り同時実行数が最大1024に達していることがわかります。"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid "A note about pinning and monopolization"
msgstr "ピン止めと独占についての注意"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid ""
"Our messaging connectors have been tailored to avoid pinning.\n"
"It is also the case for the Quarkus Redis client.\n"
"Thus, this application does not pin the carrier thread."
msgstr "Quarkusのメッセージングコネクタは、ピン留めを避けるように調整されています。Quarkus Redisクライアントも同様です。したがって、このアプリケーションはキャリアスレッドを固定しません。"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid ""
"But pinning is not the only problem that can arise.\n"
"While virtual threads can be appealing, you must be careful not to monopolize the carrier thread.\n"
"If, for example, you implemented a complex and CPU-intensive detection algorithm instead of relying on Redis, you would likely monopolize the carrier thread, defeating the purpose of virtual threads.\n"
"It will force the JVM to create new carrier threads, ultimately increasing memory usage.\n"
"The JVM will limit the number of created carrier threads.\n"
"When this happens, your application will under-perform as your tasks will be enqueued until a carrier thread is available."
msgstr "しかし、起こりうる問題はピン止めだけではありません。仮想スレッドは魅力的ですが、キャリアスレッドを独占しないように注意する必要があります。たとえば、Redisに依存する代わりに複雑でCPU負荷の高い検出アルゴリズムを実装した場合、おそらくキャリア・スレッドを独占してしまい、仮想スレッドの目的が果たせなくなります。JVMに新しいキャリア・スレッドを作成させることになり、最終的にメモリ使用量が増加します。JVMは、作成されるキャリア・スレッドの数を制限します。これが起こると、キャリア・スレッドが利用可能になるまでタスクがキューに入れられるため、アプリケーションのパフォーマンスが低下します。"

#: _posts/2023-09-30-virtual-threads-4.adoc
msgid "Summary"
msgstr "まとめ"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid ""
"This post explains how you can execute message processing on virtual threads.\n"
"While the example uses Kafka, you can use the same approach with the other messaging connectors provided by Quarkus.\n"
"Do not forget that such kind of application:"
msgstr "この投稿では、仮想スレッド上でメッセージ処理を実行する方法を説明します。この例ではKafkaを使用していますが、Quarkusが提供する他のメッセージングコネクタでも同じアプローチを使用できます。このようなアプリケーションのことを忘れないでください："

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid "requires tuning connection pools, as the concurrency is much higher than before"
msgstr "接続プールのチューニングが必要です。"

#: _posts/2023-09-30-virtual-threads-4.adoc
#, fuzzy
msgid "can lead to monopolization if your processing is CPU-intensive"
msgstr "CPUを多用する処理では、独占につながる可能性があります。"
