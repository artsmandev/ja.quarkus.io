msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"In general, Java web applications use imperative programming combined with blocking IO operations. This is incredibly popular because it is easier to reason about the code.\n"
"Things get executed sequentially. When the application receives a request, the framework associates this request to a worker thread.\n"
"When the request processing needs to interact with a database or another remote service, it relies on blocking IO.\n"
"The thread is blocked waiting for the answer, making the communication synchronous. With this model one request is not affected by another as they are run on different threads.\n"
"Even when one thread is waiting, other requests running on different threads are not slowed down significantly."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"However, with this model, you need one thread for every concurrent request, which places a limit on the achievable concurrency.\n"
"On the other side, the reactive execution model embraces asynchronous development models and non-blocking IO.\n"
"With this model, multiple requests can be handled by the same thread. When the processing of a request can no longer make progress\n"
"(because it requests a remote service, or interacts with a database for example), it uses non-blocking IO.\n"
"Instead of blocking the thread, it schedules the operation and passes a continuation which would be invoked after the completion\n"
"of the operationfootnote:[This article won’t detail how operating systems and non-blocking IO libraries enable such a model. Under the hood, kernel mechanisms such as select, epoll and ICMP are making the handling of IO very efficient, in terms of speed and resource utilization.].\n"
"This releases the thread immediately, which can then be used to serve another request. When the result of the IO operation is available,\n"
"the processing of the request is resumed and continues its execution."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"The reactive model uses the hardware resources more efficiently, but... a significant pitfall lurks. If the processing of a request starts to block, things can go south really quickly as\n"
"no other request can be handled. To avoid this, you need to learn how to write asynchronous and non-blocking code, how to schedule operations, how to write continuations, how to chain actions.\n"
"Basically, we need a way to structure asynchronous processing, and use non-blocking IO. No doubt, that consists of a paradigm shift.\n"
"In Quarkus, we want to make the shift as easy as possible, so RESTEasy Reactive allows you to choose whether an endpoint is blocking or non-blocking\n"
"(an application is free to mix and match blocking and non-blocking methods at will).\n"
"So don’t be intimidated by the reactive word, the infrastructure is reactive, but your code can be either reactive or imperative. That’s what we mean by unification of reactive and imperative."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"This ensures that maximum throughput can be achieved, but it also means that the implementation of an endpoint method should complete in a timely fashion otherwise the thread will be used for too longfootnote:[\"Too long\" depends on your target concurrency. You may consider 1ms as too long for some endpoint heavily used, but 100ms might be acceptable for less used endpoints]\n"
"and other requests will be queued up and lead to degraded throughput."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"For that reason, when the body of the method performs some kind of blocking IO operation (or even some CPU bound operation that requires time to complete), the request needs to be offloaded to a worker thread.\n"
"In RESTEasy Reactive that is done declaratively using the `@Blocking` annotation - no reactive programming or complex Java concurrency related code is needed.\n"
"Quarkus also warns you when you attempt to use blocking IO on an IO thread.\n"
"If however the method body performs non-blocking IO (or some CPU bound operation that completes very quickly) then RESTEasy Reactive can continue to serve the entire request on the IO thread."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"Although RESTEasy Reactive was built from the ground up to do non-blocking IO and serve requests from the event loop threads (thus avoiding the needless usage of worker pool threads)\n"
"it can effortlessly work with blocking IO and any piece of code that provides a blocking API (such as Hibernate) without blocking the event loop."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"The only thing you have to do is add `@Blocking` on your endpoint method or class.\n"
"That’s it! If you use `@Blocking` you are back to the regular dispatching mechanism: a worker thread is used to execute your method."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"Although the absolute highest throughput is achieved when an endpoint method is non-blocking (that is the HTTP request is served completely from the event loop thread),\n"
"great performance can nonetheless be achieved even when `@Blocking` is used."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"Integrating very tightly with Eclipse Vert.x for everything IO related. Vert.x has been extremely well optimized for IO operations and so tight integration with it allows RESTEasy Reactive to benefit from all that work.\n"
"You might recall that RESTEasy Classic on Quarkus uses Vert.x under the hood as well, but in that case the integration is not as deep and is therefore unable to fully utilize the power of Vert.x."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"Moving a lot of work to build time. As RESTEasy Reactive was built from the ground up to serve the needs of Quarkus, it benefits from the tightest possible integration with Quarkus and is probably the extension that does the most build time work.\n"
"This in turn results in creating an optimal data pipeline for serving each request, helping the JIT compiler by generating bytecode to inline runtime operations, eliminating reflection at runtime (both for invoking methods and for determining types) and reducing memory allocations."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"Avoiding the use of ThreadLocals and instead by utilizing a context object that contains all the necessary information.\n"
"ThreadLocals are a convenient way to make data available to different parts of a framework, but their frequent use comes at a cost and are thus fully avoided in RESTEasy Reactive."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"So when using RESTEasy Classic even when you return a reactive type like `Uni` or `Multi` the initial request is still being handled on a worker thread and while the call to the library may result in non-blocking IO,\n"
"nevertheless there is no way for RESTEasy Classic to reuse the worker thread once it is blocked waiting on IO."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"Reading through the RESTEasy Reactive documentation you soon come across the new APIs for writing request filters (https://quarkus.io/guides/resteasy-reactive#request-or-response-filters[@ServerRequestFilter]),\n"
"response filters (`@ServerResponseFilter`) and exception mappers (https://quarkus.io/guides/resteasy-reactive#exception-mapping[@ServerExceptionMapper]).\n"
"You might wonder if their usage affects performance in any way compared to the standard JAX-RS APIs (`ContainerRequestFilter`, `ContainerResponseFilter` and `ExceptionMapper`)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"Although the new APIs will give a tiny performance advantage over using the old APIs if the use of `@Context` is involved in the latter case, the advantage is negligible and should not worry you unless you are trying to squeeze out every inch of performance you can find.\n"
"One thing to keep in mind when writing filters with either API, is that using `org.jboss.resteasy.reactive.server.SimpleResourceInfo` instead of `javax.ws.rs.container.ResourceInfo` is advised as the latter results in reflection being performed."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"A special (albeit rather advanced) case where the new APIs do result in noticeably better performance is the case of `MessageBodyReader` and `MessageBodyWriter` classes.\n"
"When reading the HTTP request and writing the HTTP response, the use of https://quarkus.io/guides/resteasy-reactive#readers-and-writers-mapping-entities-and-http-bodies[ServerMessageBodyReader] and `ServerMessageBodyWriter` allows RESTEasy Reactive to optimize the data-path for serving the request."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"Quarkus was already providing a way to handle HTTP requests from the IO thread. Reactive Routes provides a declarative model to implement HTTP API. Each route can be called on the IO thread (default) or on a worker thread (using the `@Blocking` annotation).\n"
"Reactive Routes provide very good throughput and performance as highlighted in https://quarkus.io/blog/io-thread-benchmark/[this] article. How does reactive routes compare to RESTEasy Reactive?"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"One of the main complaints we got about Reactive Routes was about the development model: it’s very different from the one used with RESTEasy. However, Reactive Routes allowed us to verify the performance and efficiency benefits of using an end-to-end reactive model on top of Quarkus.\n"
"RESTEasy Reactive can be seen as the “next generation”: you get the runtime benefits while also using a familiar development model."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2021-02-10-resteasy-reactive-faq.adoc
msgid ""
"RESTEasy Reactive is the next generation of HTTP framework. It unifies reactive (non-blocking IO, asynchronous APIs) and imperative (thanks to the `@Blocking` annotation). It improves raw performances without constraining the user experience.\n"
"Its reactive/imperative duality makes it fit any use cases, from highly concurrent HTTP APIs, to more traditional transactional CRUD applications."
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:1
#, no-wrap
msgid "Massive performance without headaches"
msgstr "頭痛の種にならない超パフォーマンス"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:1
#, no-wrap
msgid "RESTEasy Reactive FAQ"
msgstr "RESTEasy Reactive FAQ"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:12
msgid "The purpose of this blog post is to clear up some confusion about RESTEasy Reactive and answer some commonly asked questions around it."
msgstr "このブログ記事の目的は、RESTEasy Reactive についての混乱を解消し、よくある質問に答えることです。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:13
#, no-wrap
msgid "Acknowledgement"
msgstr "謝辞"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:16
msgid "This blog post would not have been possible without the expert advice of https://twitter.com/clementplop[Clement Escoffier] and https://twitter.com/unfromage[Stéphane Épardaud]."
msgstr "このブログ記事は、 link:https://twitter.com/clementplop[Clement Escoffier]氏と link:https://twitter.com/unfromage[Stéphane Épardaud]氏の専門的なアドバイスなしには実現できませんでした。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:17
#, no-wrap
msgid "Imperative and Reactive: the elevator pitch"
msgstr "命令型とリアクティブ型: エレベーターピッチ"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:20
msgid "In our quest to understand why RESTEasy Reactive is important and how it differs from RESTEasy Classic, it helps to paraphrase a very important message that was first introduced https://quarkus.io/blog/io-thread-benchmark/#imperative-and-reactive-the-elevator-pitch[here]."
msgstr "RESTEasy Reactive が重要な理由と、RESTEasy Classic と異なる点を理解するために、link:https://quarkus.io/blog/io-thread-benchmark/#imperative-and-reactive-the-elevator-pitch[ここ] で最初に紹介した非常に重要なメッセージを再び考察してみましょう。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:37
msgid "This model enables the usage of a single IO thread to handle multiple requests. There are three significant benefits."
msgstr "このモデルでは、単一の IO スレッドを使用して複数のリクエストを処理することができます。3 つの大きなメリットがあります。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:39
msgid "First, the response time is smaller because it does not have to jump to another thread."
msgstr "まず、別のスレッドにジャンプする必要がないので、レスポンス時間が短くなります。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:40
msgid "Second, it reduces memory consumption as it decreases the usage of threads."
msgstr "第 2 に、スレッドの使用量が減るため、メモリーの消費量を減らすことができます。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:41
msgid "Third, your concurrency is no longer limited by the number of threads."
msgstr "第 3 に、並行処理はスレッド数に制限されなくなりました。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:49
#, no-wrap
msgid "What that means from a RESTEasy Reactive perspective"
msgstr "RESTEasy Reactive な視点から見た場合の意味"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:52
msgid "RESTEasy Reactive by default handles each HTTP request on an IO thread (otherwise known as an event-loop thread)footnote:[More information about the execution model of RESTEasy Reactive can be found https://quarkus.io/guides/resteasy-reactive#execution-model-blocking-non-blocking[here]]."
msgstr "RESTEasy Reactive は、デフォルトでは IO スレッド(イベントループスレッドとして知られている)上の各 HTTP リクエストを処理します footnote:[RESTEasy Reactiveの実行モデルについて詳細は https://quarkus.io/guides/resteasy-reactive#execution-model-blocking-non-blocking[ここ] にあります]。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:54
msgid "The following image shows what that looks at a high level:"
msgstr "以下のイメージでは、ハイレベルの様子を示しています。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:61
msgid "It is important to understand that a method body that uses imperative code only becomes a problem when it takes a long time to execute - which is almost always the case for blocking IO operations."
msgstr "命令型コードを使用するメソッド本体が問題になるのは、実行に長い時間がかかるときだけ - ブロッキング IO 処理がほぼ全てのケース - であることを理解することが重要です。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:67
#, no-wrap
msgid "Is RESTEasy Reactive limited to using reactive APIs?"
msgstr "RESTEasy Reactive はリアクティブAPIの使用に限定されているのでしょうか?"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:70
msgid "Absolutely not!"
msgstr "もちろん違います。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:78
msgid "At a high level it this looks like this:"
msgstr "ハイレベルでは以下のようになります。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:81
#, no-wrap
msgid "Does RESTEasy Reactive require Hibernate Reactive?"
msgstr "RESTEasy ReactiveはHibernate Reactiveを必要としますか?"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:84
msgid "As you can probably guess from the answer to the previous question, the answer is no."
msgstr "前の質問の答えからわかる通り、答えは「ノー」です。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:86
msgid "In scenarios where RESTEasy Reactive is used along with Hibernate, the `@Blocking` annotation should be placed on the endpoint methods that interact with Hibernate."
msgstr "RESTEasy Reactive が Hibernate と一緒に使用されるシナリオでは、 `@Blocking` アノテーションを Hibernate と相互作用するエンドポイントメソッドに配置する必要があります。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:88
msgid "In scenarios where RESTEasy Reactive is used along with Hibernate Reactive, no `@Blocking` annotation is necessary on the endpoint methods that interact with Hibernate Reactive."
msgstr "RESTEasy Reactive が Hibernate Reactive とともに使用されるシナリオでは、Hibernate Reactive と相互作用するエンドポイントメソッドに `@Blocking` アノテーションは必要ありません。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:89
#, no-wrap
msgid "What is the performance implication of using @Blocking?"
msgstr "@Blocking を使用することによるパフォーマンスへの影響について"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:95
msgid "In our benchmarks we see the use of `@Blocking` reduce maximum throughput by around 30%footnote:[This is basically the cost we have to pay for dispatching the request to a worker thread. The percentage of the slowdown decreases the longer the target method takes to execute]."
msgstr "私たちのベンチマークでは、`@Blocking` を使用することで最大スループットが約 30%footnote 低下することがわかります footnote:[これは基本的にワーカースレッドにリクエストを振り分けるためにかかるコストです]。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:97
msgid "However, an endpoint method using `@Blocking` in RESTEasy Reactive still achieves around 50% higher throughput than the same method using RESTEasy Classic."
msgstr "しかし、RESTEasy Reactive で `@Blocking` を使用したエンドポイントメソッドでは、RESTEasy Classic を使用した同じメソッドよりも約 50% 高いスループットを達成しています。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:98
#, no-wrap
msgid "Why does RESTEasy Reactive using @Blocking perform better than RESTEasy Classic?"
msgstr "なぜ @Blocking を使用した RESTEasy Reactive は RESTEasy Classic よりもパフォーマンスが良いのですか?"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:101
msgid "RESTEasy Reactive is able to gain its performance advantage over RESTEasy Classic by:"
msgstr "RESTEasy Reactive は、RESTEasy Classic と比較して、以下のような特徴を持っています。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:109
msgid "Utilizing Arc in an optimal manner for all necessary injections. RESTEasy Classic provides an abstraction layer that performs the various injection operations, which for the needs of Quarkus is entirely unnecessary since Arc provides the same functionality with better performance."
msgstr "必要なすべてのインジェクションに最適な方法でArcを活用します。RESTEasy Classic は、さまざまなインジェクション操作を実行する抽象化レイヤーを提供しますが、Arcは同じ機能をより優れたパフォーマンスで提供するため、Quarkus のニーズには全く不要です。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:110
#, no-wrap
msgid "How does it compare to RESTEasy Classic with Mutiny?"
msgstr "RESTEasy Classic with Mutiny との比較はどうでしょうか?"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:113
msgid "You might recall that Quarkus allows you to use Mutiny return types (Uni and Multi) when using RESTEasy Classic via the `quarkus-resteasy-mutiny` extension and thus might be wondering how that compares to using RESTEasy Reactive."
msgstr "RESTEasy Classic を使用しているときに Quarkus では、`quarkus-resteasy-mutiny` エクステンションを介して Mutiny 戻り値の型 (UniとMulti) を使用することができることや、これが RESTasy Reactive の使用と、どのように異なるかと思うかもしれません。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:115
msgid "The main thing to understand about RESTEasy Classic is that it *always* handles requests on a worker thread as it does not use the event-loop concept at all."
msgstr "RESTEasy Classic について最も理解しておくべきこととして、RESTEasy Classic はイベントループの概念を一切使用しないため、*常に*ワーカースレッド上でリクエストを処理することがあります。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:117
msgid "This is best shown by the following image:"
msgstr "これを最もよく表しているのは、以下の画像です。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:124
msgid "Thus, the gain of using reactive return types in RESTEasy Classic is a syntactic gain, not a runtime gain - the underlying hardware isn’t used more efficiently despite the use of reactive types."
msgstr "このように、RESTEasy Classic でリアクティブな戻り値型を使用することで得られる利益は、ランタイムの利益ではなく、構文的な利益です。リアクティブ型を使用していても、基礎となるハードウェアが、より効率的に使用されることはありません。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:126
msgid "When returning Mutiny types using RESTEasy Reactive, everything happens on the IO Thread (except if the endpoint is annotated with `@Blocking`). By the way, no need for an external extension to use Mutiny with RESTEasy Reactive, it’s built-in!"
msgstr "RESTEasy Reactive を使用して Mutiny 型を返す場合、すべての処理は IO スレッド上で行われます (エンドポイントが `@Blocking` でアノテーションされている場合を除く)。RESTEasy Reactive で Mutiny を使用するための外部エクステンションは不要です。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:127
#, no-wrap
msgid "Do I have to use the new RESTEasy Reactive APIs to achieve maximum performance?"
msgstr "最大のパフォーマンスを実現するためには、新しい RESTEasy Reactive API を使用する必要がありますか?"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:139
#, no-wrap
msgid "What about Reactive Routes?"
msgstr "リアクティブルートは?"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:147
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:153
msgid "We see RESTEasy Reactive as becoming the default HTTP layer in Quarkus in the near future and are completely committed to making it perform at the best possible level while also introducing new features that spark developer joy!"
msgstr "RESTEasy Reactive は、近い将来 Quarkus のデフォルト HTTP レイヤーになると思われます。また、開発者にうれしい新機能を導入しながら、可能な限り最高のパフォーマンスを実現することに完全にコミットしています。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:155
msgid "In that vein, we hope that this short blog post will provide you with some insight on what makes RESTEasy Reactive special and clear up any misconceptions you may have had about it."
msgstr "この短いブログ記事が、RESTEasy Reactive が特別である理由と、RESTEasy Reactive について抱いていた誤解を解き明かすためのヒントになればと思います。"
