msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"In Quarkus 2.11, we introduced a new API to interact with Redis.\n"
"The Redis DataSource APIs aim to be simpler, more extensive, and type-safe.\n"
"Under the hood, it uses a performant, non-blocking client (that you can also use if you prefer low-level APIs)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"https://redis.io/[Redis] is an open-source, in-memory data store that can be used as a database, cache, streaming engine, and message broker.\n"
"Redis is often used as real-time data stores,  cache backends, data storage for geospatial entities, and so on.\n"
"To interact with Redis, you emit _commands_ and receive responses.\n"
"These commands target _keys_ and manipulate the associated data.\n"
"There are many commands divided into groups, including:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"The data source APIs follow the command group structure.\n"
"For each group, you retrieve an object dedicated to emitting the commands of that group.\n"
"In that regard, this new API is not an abstraction of Redis.\n"
"You still need to know the command you need."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"The API manages the serialization and deserialization for you.\n"
"Currently, it uses JSON for objects (using Jackson), but soon the API will offer more advanced features."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"Time for more cohesive code.\n"
"Let's imagine the following https://github.com/cescoffier/quarkus-redis-demo[application]:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"We have a database storing `Heroes`, a lot of them.\n"
"You need to return the 3 most powerful heroes based on their level.\n"
"Of course, you can use your SQL ninja skills, but let's imagine that this code was coded a long time ago, cannot be changed, and is very time-consuming:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"So, one solution to avoid having to re-compute this set of heroes on every call is to cache the result for a bit of time, let's say 10 seconds.\n"
"Let's consider that it's acceptable in this case to return a potentially outdated result set."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"To use the new Redis API, we need to use the `redis-client` extension.\n"
"For users from the previous API, it's the same extension. The previous API is still available but is deprecated, and we plan to remove it at some point."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid "Now that we can use the  `RedisDataSource`, we can implement the https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/MyRedisCache.java[`MyRedisCache` class] as follows:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"Note that it's a simple cache without any fancy features.\n"
"Redis provides more advanced commands to implement more complicated strategies."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"The constructor receives the `RedisDataSource` and gets an object to manipulate Redis _values_.\n"
"In our case, https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/Ranking.java[`Ranking`] (the top 3 heroes)"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"The `set` method emits the Redis `set` command and store a `Ranking` to the passed key.\n"
"The command also configures the expiration time.\n"
"So, after 10 seconds, the value is removed by Redis.\n"
"As mentioned above, the Ranking instance is serialized into a JSON document."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"The `evict` method allows removing the stored value.\n"
"Multiple commands can do this, such as the `del` or `getdel` (which also returned the stored value)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"For our application, we need something a bit more fancy.\n"
"We want to check if we have a value in Redis.\n"
"If so, uses that value, and if not, compute the value and store it.\n"
"This is implemented in the `getOrSetIfAbsent`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"To see the cache in action, check the time displayed on the page and refresh the page.\n"
"Don't forget that the cached value is only valid for 10 seconds (as set in `MyRedisCache`).\n"
"So, if you wait 10 seconds, it will recompute the result."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"This post briefly introduces the new Redis API and demonstrates its usage with a cache implementation example.\n"
"The complete code is available from this  https://github.com/cescoffier/quarkus-redis-demo[GitHub repo]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-09-07-redis-api-intro.adoc
msgid ""
"The API supports many more features, such as geospatial data, pub/sub, and transactions, which could be used to improve the `getOrSetIfAbsent`  method.\n"
"We will cover more advanced use cases in future posts."
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, fuzzy, no-wrap
msgid "Introducing the new Redis API - How to cache with Redis?"
msgstr "新しいRedis APIの紹介 - Redisでキャッシュするには？"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, fuzzy, no-wrap
msgid "How to implement a simple cache with the Redis data source"
msgstr "Redisデータソースで簡単なキャッシュを実装する方法"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:15
#, fuzzy
msgid "In this post, we will introduce this new API and use it to build a cache, one of the main Redis use cases."
msgstr "今回はこの新しいAPIを紹介し、Redisの主なユースケースの一つであるキャッシュを構築するために使用します。"

#. type: Title ==
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:16
#, fuzzy, no-wrap
msgid "What is Redis?"
msgstr "Redisとは？"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:25
#, fuzzy
msgid "the BitMap group to manipulate bit vectors"
msgstr "ビットベクトルを操作するためのBitMapグループです。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:26
#, fuzzy
msgid "the Generic group to manipulate the keys"
msgstr "キーを操作するGenericグループ"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:27
#, fuzzy
msgid "the Geospatial group to manipulate geo items"
msgstr "ジオアイテムを操作するための「Geospatial」グループ"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:28
#, fuzzy
msgid "the Hash group to manipulate sets of `+field -> item+` pairs (like `Map` in Java)"
msgstr "`field -> item` のペアの集合を操作するための Hash グループ（Java の `Map` のようなもの）。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:29
#, fuzzy
msgid "the List, Set, and Sorted Set groups to store list, set, and sorted set of items"
msgstr "リスト、セット、ソートされたセットを格納するリスト、セット、ソートされたセットのグループ"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:30
#, fuzzy
msgid "the Pub/Sub group to emit messages on channels and receive them"
msgstr "Pub/Subグループで、チャンネルにメッセージを発信し、それを受信する。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:31
#, fuzzy
msgid "the String group to manipulate value (in Redis, Strings represent values including binary, numbers...)"
msgstr "値を操作するStringグループ（Redisでは、Stringはバイナリや数値などの値を表します）。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:32
#, fuzzy
msgid "the Transaction group to execute transactions"
msgstr "トランザクションを実行するTransactionグループ。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:34
#, fuzzy
msgid "You can find the complete list of commands on the https://redis.io/commands/[Redis Commands page]."
msgstr "コマンドの完全なリストは、 link:https://redis.io/commands/[Redisコマンドのページで] ご覧いただけます。"

#. type: Title ==
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:35
#, fuzzy, no-wrap
msgid "The new Quarkus Redis API"
msgstr "新しいQuarkusのRedis API。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:38
#, fuzzy
msgid "The entry point of the new Quarkus Redis API are the two _data sources_ interfaces:"
msgstr "新しいQuarkus Redis APIの入口は、2つの _データソースインターフェース_ です："

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:40
#, fuzzy
msgid "`io.quarkus.redis.datasource.RedisDataSource` - the imperative (blocking) API"
msgstr "`io.quarkus.redis.datasource.RedisDataSource` - 命令型API"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:41
#, fuzzy
msgid "`io.quarkus.redis.datasource.ReactiveRedisDataSource` - the reactive API"
msgstr "`io.quarkus.redis.datasource.ReactiveRedisDataSource` - リアクティブAPI"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:43
#, fuzzy
msgid "As mentioned above, these APIs are implemented on top of a lower-level client:"
msgstr "前述のように、これらのAPIは下位のクライアントの上に実装されています："

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:52
#, fuzzy
msgid "For example, to manipulate a `Set<Person>`, you will use the following code:"
msgstr "例えば、 `Set<Person>` 、を操作する場合は、次のようなコードを使用します："

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:78
#, fuzzy
msgid "This example uses the imperative API, but the reactive API is symmetric."
msgstr "この例では命令型APIを使用していますが、リアクティブAPIは対称型です。"

#. type: Title ==
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:79
#, fuzzy, no-wrap
msgid "Implementing a Redis cache"
msgstr "Redisキャッシュの実装"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:166
#, fuzzy
msgid "The `get` method emits the Redis `get` command to retrieve an already stored ``Ranking(``null` if it does not)."
msgstr "`get` メソッドは、すでに保存されている `Ranking(` null` を取得するために Redis `get` コマンドを発します（発しない場合）。"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:181
#, fuzzy
msgid "Now, we can just use this cache to avoid the heavy computation on every call (check the https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/HeroService.java[HeroService] class to see the complete code):"
msgstr "あとは、このキャッシュを使うだけで、呼び出しのたびに重い計算が発生するのを避けることができます（完全なコードを見るには、 link:https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/HeroService.java[HeroService] クラスを確認してください）："

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:204
#, fuzzy
msgid "To run the application, just start `mvn quarkus:dev` and open your browser to http://localhost:8080:"
msgstr "アプリケーションの実行は、 `mvn quarkus:dev` を起動し、ブラウザで http://localhost:8080 を開くだけです："

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:212
#, fuzzy
msgid "Quarkus comes with a Redis Dev Service that automatically starts a Redis instance on your machine and configures the application. Note that you need to be able to run containers locally to use this feature."
msgstr "QuarkusにはRedis Dev Serviceが付属しており、マシン上でRedisインスタンスを自動的に起動し、アプリケーションを設定します。この機能を使用するには、ローカルでコンテナを実行できる必要があることに注意してください。"

#. type: Title ==
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:213
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:222
#, fuzzy
msgid "You can find more details about the new API in the:"
msgstr "新しいAPIの詳細については、こちらをご覧ください："

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:224
#, fuzzy
msgid "https://quarkus.io/guides/redis[Quarkus Getting Started guide]"
msgstr "link:https://quarkus.io/guides/redis[Quarkus入門ガイド]"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:225
#, fuzzy
msgid "https://quarkus.io/guides/redis-reference[Quarkus Redis Reference guide]"
msgstr "link:https://quarkus.io/guides/redis-reference[Quarkus Redisリファレンスガイド]"

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:226
#, fuzzy
msgid "Also, the Quarkus team is working on integrating https://github.com/quarkusio/quarkus/issues/27785[Redis as a cache implementation]. So, eventually, you will just need to use `@CacheResult`, and let the magic happens."
msgstr "また、Quarkusチームは、 link:https://github.com/quarkusio/quarkus/issues/27785[キャッシュの実装としてRedisを] 統合する作業を行っています。そのため、最終的には、 `@CacheResult` 、魔法をかけるだけでよいことになります。"
