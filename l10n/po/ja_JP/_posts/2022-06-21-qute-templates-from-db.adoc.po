# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-06-21 15:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:1
#, fuzzy, no-wrap
msgid "gwenneg"
msgstr "グウェンネグ"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:1
#, fuzzy, no-wrap
msgid "2022-06-21"
msgstr "2022-06-21"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:1
#, fuzzy, no-wrap
msgid "We moved our Qute templates from the file storage to a database to improve the tenants experience in a multitenant Quarkus app."
msgstr "マルチテナントのQuarkusアプリのテナントエクスペリエンスを向上させるために、Quteテンプレートをファイルストレージからデータベースに移動しました。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:1
#, fuzzy, no-wrap
msgid "qute development-tips"
msgstr "キュートな開発秘話"

#. type: YAML Front Matter: title
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:1
#, fuzzy, no-wrap
msgid "Using Qute with templates from a database"
msgstr "データベースからのテンプレートでQuteを使用する"

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:11
#, no-wrap
msgid "Introduction"
msgstr "はじめに"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:16
#, fuzzy
msgid "I'm part of a Red Hat team that created a multitenant notifications service which sends the notifications from many https://console.redhat.com[Red Hat Hybrid Cloud Console] apps (the tenants).  Our service can be used to send several kinds of notifications, including emails.  Each tenant can create as many email templates as they need and link them with the events that will trigger the notifications."
msgstr "私は Red Hat チームの一員で、多くの link:https://console.redhat.com[Red Hat Hybrid Cloud Console] アプリ（テナント）から通知を送信するマルチテナント通知サービスを作成しました。私たちのサービスは、電子メールを含むいくつかの種類の通知を送信するために使用することができます。各テナントは、必要な数だけメールテンプレートを作成し、それらを通知のトリガーとなるイベントとリンクさせることができます。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:22
#, fuzzy
msgid "We implemented that with the amazing https://quarkus.io/guides/qute-reference[Qute templating engine] and templates stored as files in the `src/main/resources/templates` folder.  It allowed our tenants to design templates tailored to fit their needs with minimal knowledge of Qute.  However, we quickly realized that editing the templates was a slow and heavy process for the tenants.  Indeed, they had to create a GitHub pull request in our repository, wait for a review and then wait again for a deployment before the templates could be tested.  We needed to make that process easier for the tenants, ideally even self-serviced."
msgstr "私たちは、素晴らしい link:https://quarkus.io/guides/qute-reference[Quteテンプレート] エンジンを使って、 `src/main/resources/templates` フォルダにファイルとして保存されたテンプレートを実装しました。これにより、テナントは、Quteの最小限の知識で、自分のニーズに合ったテンプレートをデザインすることができるようになりました。しかし、テンプレートの編集は、テナントにとって遅くて重いプロセスであることに、私たちはすぐに気づきました。実際、テンプレートをテストするためには、私たちのリポジトリにGitHubのプルリクエストを作成し、レビューを待ち、さらにデプロイメントを待つ必要がありました。私たちは、このプロセスをテナントにとってより簡単に、理想的にはセルフサービスにする必要がありました。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:25
#, fuzzy
msgid "Then we decided to move the templates from the file storage to a database using Qute's `TemplateLocator`.  It helped us offer the tenants an easier, frictionless and self-serviced way of editing the templates."
msgstr "そして、Quteの `TemplateLocator` を使って、テンプレートをファイルストレージからデータベースに移行することにしました。これにより、テナントに対して、より簡単で摩擦のない、セルフサービスによるテンプレートの編集方法を提供することができるようになりました。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:27
#, fuzzy
msgid "image:/assets/images/posts/qute-templates-from-db/before-after.png[]"
msgstr "image:/assets/images/posts/qute-templates-from-db/before-after.png[alt=\"before after\"]"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:29
#, fuzzy
msgid "Here's how we did it."
msgstr "その方法をご紹介します。"

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:30
#, fuzzy, no-wrap
msgid "The obvious part: persisting the templates into the database"
msgstr "明らかなのは、テンプレートをデータベースに保存することです。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:36
#, fuzzy
msgid "Before using templates from the DB with Qute, the templates obviously need to be persisted.  It doesn't matter how this is performed.  Any flavor of Hibernate (reactive or not, with Panache or not) will work.  This post will show examples based on https://quarkus.io/guides/hibernate-orm-panache[Hibernate with Panache]."
msgstr "QuteでDBからテンプレートを使用する前に、テンプレートを永続化する必要があるのは明らかです。これをどのように実行するかは問題ではありません。Hibernateのどのようなフレーバーでも（リアクティブでもそうでなくても、Panache付きでもそうでなくても）、動作します。この記事では、 link:https://quarkus.io/guides/hibernate-orm-panache[Panacheを使用したHibernateに] 基づく例を紹介します。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:38
#, fuzzy
msgid "The next sections will make use of this JPA entity:"
msgstr "次の節では、このJPAエンティティを利用します。"

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:42
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:69
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:135
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:168
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:199
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:230
#, no-wrap
msgid "package org.acme;\n"
msgstr "package org.acme;\n"

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:44
#, no-wrap
msgid "import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:47
#, no-wrap
msgid ""
"import javax.persistence.Entity;\n"
"import javax.persistence.Id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:50
#, no-wrap
msgid ""
"@Entity\n"
"public class DbTemplate extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:53
#, no-wrap
msgid ""
"    @Id\n"
"    public String name; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:56
#, no-wrap
msgid ""
"    public String content;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:58
#, fuzzy
msgid "The template name will be the DB primary key."
msgstr "テンプレート名はDBの主キーになります。"

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:59
#, fuzzy, no-wrap
msgid "The interesting part: connecting Qute to the database"
msgstr "興味深いのは、Quteとデータベースを接続するところです。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:63
#, fuzzy
msgid "Now that templates can be persisted, we need a way to use them from Qute.  Fortunately, Qute comes with a very interesting interface called `TemplateLocator` that can be used to load templates from any location, including from a DB."
msgstr "テンプレートを永続化できるようになったので、Quteからテンプレートを使用する方法が必要になりました。幸いなことに、Quteには `TemplateLocator` という非常に興味深いインターフェースがあり、DBを含む任意の場所からテンプレートを読み込むのに利用できます。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:65
#, fuzzy
msgid "Here's how it can be used with the `DbTemplate` entity we defined earlier:"
msgstr "ここでは、先に定義した `DbTemplate` のエンティティでどのように使用できるかを説明します。"

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:74
#, no-wrap
msgid ""
"import io.quarkus.logging.Log;\n"
"import io.quarkus.qute.EngineBuilder;\n"
"import io.quarkus.qute.TemplateLocator;\n"
"import io.quarkus.qute.Variant;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:80
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
"import java.io.Reader;\n"
"import java.io.StringReader;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:83
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class DbTemplateLocator implements TemplateLocator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:95
#, no-wrap
msgid ""
"    @Override\n"
"    public Optional<TemplateLocation> locate(String name) {\n"
"        DbTemplate template = DbTemplate.findById(name);\n"
"        if (template == null) {\n"
"            Log.tracef(\"Template with [name=%s] not found in the database\", name);\n"
"            return Optional.empty();\n"
"        } else {\n"
"            Log.tracef(\"Template with [name=%s] found in the database\", name);\n"
"            return Optional.of(buildTemplateLocation(template.getContent()));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:100
#, no-wrap
msgid ""
"    @Override\n"
"    public int getPriority() { <1>\n"
"        return DEFAULT_PRIORITY - 1;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:104
#, no-wrap
msgid ""
"    void configureEngine(@Observes EngineBuilder builder) { <2>\n"
"        builder.addLocator(this);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:107
#, no-wrap
msgid ""
"    private TemplateLocation buildTemplateLocation(String templateContent) {\n"
"        return new TemplateLocation() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:112
#, no-wrap
msgid ""
"            @Override\n"
"            public Reader read() {\n"
"                return new StringReader(templateContent);\n"
"            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:120
#, no-wrap
msgid ""
"            @Override\n"
"            public Optional<Variant> getVariant() {\n"
"                return Optional.empty();\n"
"            }\n"
"        };\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:122
#, fuzzy
msgid "If your Quarkus app contains templates loaded from both the file system and a database, you will need to override the template locator default priority. Otherwise, Quarkus will try to load templates from the file system using `DbTemplateLocator` which could lead to exceptions or unpredictable behaviors."
msgstr "Quarkusアプリにファイルシステムとデータベースの両方からロードしたテンプレートが含まれている場合、テンプレートロケーターのデフォルトの優先順位をオーバーライドする必要があります。上書きしない場合、Quarkusでは、 `DbTemplateLocator` を使用してファイルシステムからテンプレートをロードしようとするため、例外や予測不可能な動作が発生する可能性があります。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:123
#, fuzzy
msgid "Before Quarkus 2.10, integrating `DbTemplateLocator` with the Qute engine instance provided by Quarkus could only be done with a CDI observer like this."
msgstr "Quarkus 2.10以前では、Quarkusが提供するQuteエンジンインスタンスと `DbTemplateLocator` を統合するには、このようなCDIオブザーバを使用するしかありませんでした。"

#. type: delimited block =
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:127
#, fuzzy
msgid "Quarkus 2.10 recently introduced a new `@Locate` annotation that makes the https://quarkus.io/version/main/guides/qute-reference#template-locator-registration[Template Locator Registration] even simpler."
msgstr "Quarkus 2.10では、最近、新しい `@Locate` アノテーションが導入され、 link:https://quarkus.io/version/main/guides/qute-reference#template-locator-registration[テンプレートロケーター登録が] さらにシンプルになりました。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:131
#, fuzzy
msgid "Now that the template locator is registered, we're ready to compile and render templates from the database with Qute.  As you can see in the following example, DB templates are used exactly like file templates:"
msgstr "テンプレートロケーターが登録されたので、Quteを使って、データベースからテンプレートをコンパイルし、レンダリングする準備ができました。以下の例でわかるように、DBテンプレートは、ファイルテンプレートと全く同じように使用されます。"

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:138
#, no-wrap
msgid ""
"import io.quarkus.qute.Engine;\n"
"import io.quarkus.qute.Template;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:141
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:173
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:205
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:144
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class EmailSender {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:147
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:179
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:211
#, no-wrap
msgid ""
"    @Inject\n"
"    Engine engine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:156
#, no-wrap
msgid ""
"    public void sendEmail(String templateName) {\n"
"        Template template = engine.getTemplate(templateName);\n"
"        if (template != null) {\n"
"            String rendered = template.render();\n"
"            // Send an email using the template.\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:158
#, fuzzy, no-wrap
msgid "Beware of Qute's internal cache"
msgstr "Quteの内部キャッシュに注意"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:162
#, fuzzy
msgid "Whenever Qute loads a template, it is stored into an internal `ConcurrentHashMap` and stays in memory forever, unless Qute is instructed otherwise.  This means that you will need to remove a DB template from the Qute internal cache after it's been updated or deleted in the database."
msgstr "Qute がテンプレートを読み込むと、常に内部 `ConcurrentHashMap` に保存され、Qute に指示されない限り、永遠にメモリ内に留まります。これは、DB テンプレートがデータベースで更新または削除された後、Qute の内部キャッシュから削除する必要があることを意味します。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:164
#, fuzzy
msgid "There are several ways of achieving that:"
msgstr "そのためには、いくつかの方法があります。"

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:170
#, no-wrap
msgid "import io.quarkus.qute.Engine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:176
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class DbEngineCacheManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:183
#, no-wrap
msgid ""
"    public void removeTemplates(String name) {\n"
"        engine.removeTemplates(templateName -> templateName.equals(name)); <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:188
#, no-wrap
msgid ""
"    public void clearAll() {\n"
"        engine.clearTemplates(); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:190
#, fuzzy
msgid "This removes the templates for which the mapping id matches the given predicate."
msgstr "これは、マッピングIDが与えられた述語と一致するテンプレートを削除します。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:191
#, fuzzy
msgid "This removes all templates from the cache."
msgstr "これにより、キャッシュからすべてのテンプレートが削除されます。"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:195
#, fuzzy
msgid "Clearing that internal cache can become tricky if your app is running on a Kubernetes cluster with several replicas.  You will indeed need a way to broadcast to all pods (possibly using a Kafka topic or a DB table) an instruction to remove from the cache the templates that have been updated or deleted.  There is a cheaper (yet very imperfect) way of keeping all pods caches synced though, using a scheduled job:"
msgstr "アプリが複数のレプリカを持つKubernetesクラスタ上で動作している場合、その内部キャッシュをクリアするのは厄介なことになります。更新または削除されたテンプレートをキャッシュから削除する指示をすべてのPodにブロードキャストする方法（おそらくKafkaトピックまたはDBテーブルを使用）が実際に必要になります。しかし、すべてのPodのキャッシュを同期させ続けるには、スケジュールされたジョブを使用する安価な（しかし非常に不完全な）方法があります。"

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:202
#, no-wrap
msgid ""
"import io.quarkus.qute.Engine;\n"
"import io.quarkus.scheduler.Scheduled;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:208
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class DbEngineCacheScheduledCleaner {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:217
#, no-wrap
msgid ""
"    @Scheduled(every = \"5m\", delayed = \"5m\") <1>\n"
"    public void clearTemplates() {\n"
"        engine.clearTemplates();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:219
#, fuzzy
msgid "All templates will be cleared from the internal cache every 5 minutes."
msgstr "すべてのテンプレートは、5分ごとに内部キャッシュから消去されます。"

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:220
#, fuzzy, no-wrap
msgid "Preventing the deletion of an included template"
msgstr "インクルードされたテンプレートの削除防止"

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:224
msgid "A Qute template can be included into another template.  If the inner template is deleted, then the outer template compilation will fail, which is obviously something that needs to be prevented while loading the templates from the DB."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:226
msgid "Here's a way to look for the inclusion of a template into another one before deleting it:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:235
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.persistence.EntityManager;\n"
"import javax.transaction.Transactional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:238
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class TemplateRepository {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:241
#, no-wrap
msgid ""
"    @Inject\n"
"    EntityManager entityManager;\n"
msgstr ""
"    @Inject\n"
"    EntityManager entityManager;\n"

#. type: delimited block -
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:257
#, no-wrap
msgid ""
"    @Transactional\n"
"    public void deleteTemplate(String name) {\n"
"        long count = entityManager.createQuery(\"SELECT COUNT(*) FROM DbTemplate WHERE name != :name AND content LIKE :include\", Long.class)\n"
"                .setParameter(\"name\", name)\n"
"                .setParameter(\"include\", \"%{#include \" + name + \"%\")\n"
"                .getSingleResult();\n"
"        if (count > 0) {\n"
"            throw new IllegalStateException(\"Included templates can't be deleted, remove the inclusion or delete the outer template first\");\n"
"        } else {\n"
"            entityManager.createQuery(\"DELETE FROM DbTemplate WHERE name = :name\")\n"
"                    .setParameter(\"name\", name)\n"
"                    .executeUpdate();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:259
#, no-wrap
msgid "Database templates validation"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:262
msgid "Database templates come with a significant drawback: Quarkus is no longer able to perform https://quarkus.io/guides/qute-reference#typesafe_templates[type-safe] validation."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:264
msgid "The syntax validation is also delayed from build time to runtime but this is expected as templates can be created or edited at runtime."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:265
#, no-wrap
msgid "Special thanks"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-21-qute-templates-from-db.adoc:267
msgid "Thanks to Josejulio Martinez Magana and Martin Kouba for helping me during the implementation of the DB templates in our notifications service!"
msgstr ""
