# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-02-12 08:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:1
#, fuzzy, no-wrap
msgid "julgus"
msgstr "ジュルグス"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:1
#, fuzzy, no-wrap
msgid "2023-02-10"
msgstr "2023-02-10"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:1
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:11
#, fuzzy, no-wrap
msgid "Writing Hibernate queries using the Criteria API can be anything but intuitive and comes at the expense of wordiness. In this article, you will learn how the JPAStreamer Quarkus extension facilitates type-safe Hibernate queries without unnecessary complexity."
msgstr "HibernateのクエリをCriteria APIを使って書くことは、直感的でないことが多く、言葉足らずになってしまうことがあります。この記事では、JPAStreamer Quarkus拡張により、不必要に複雑化することなくタイプセーフなHibernateクエリを実現する方法について学びます。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:1
#, fuzzy, no-wrap
msgid "extension, announcement, hibernate, jpa"
msgstr "拡張、発表、Hibernate、JPA"

#. type: YAML Front Matter: title
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:1
#, fuzzy, no-wrap
msgid "Express Hibernate Queries as Type-Safe Java Streams"
msgstr "Hibernateのクエリを型安全なJavaストリームとして表現する"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:13
#, fuzzy
msgid "As much as the JPA Criteria builder is expressive, JPA queries are often equally verbose, and the API itself can be unintuitive to use, especially for newcomers. In the Quarkus ecosystem, Panache is a partial remedy for these problems when using Hibernate ORM. Still, I find myself juggling the Panache’s helper methods, preconfigured Enums and raw Strings when composing anything but the simplest of queries. You could claim I am just inexperienced and impatient or instead acknowledge that the perfect API is frictionless to use for everyone. Thus, the user experience of writing JPA queries can be further improved in that direction."
msgstr "JPA Criteriaビルダーは表現力が豊かですが、JPAクエリも同様に冗長になりがちで、特に初心者の場合、API自体が直感的に使用できないことがあります。Quarkusのエコシステムでは、Hibernate ORMを使用する場合、Panacheがこれらの問題の部分的な解決策となります。しかし、最も単純なクエリ以外のものを作成するときに、Panacheのヘルパーメソッド、事前に設定されたEnum、および生の文字列を操作している自分に気づきました。私が経験不足でせっかちなだけだと言うかもしれませんし、完璧なAPIは誰にとっても摩擦なく使えるものだと認めるかもしれません。したがって、JPAクエリを書く際のユーザーエクスペリエンスは、この方向でさらに向上させることができます。"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:15
#, fuzzy
msgid "One of the remaining shortcomings is that raw Strings are inherently not type-safe, meaning my IDE rejects me the helping hand of code completion and wish me good luck at best. On the upside, Quarkus facilitates application relaunches in a split second to issue quick verdicts on my code. And nothing beats the heart-felt joy and genuine surprise when I have composed a working query on the fifth, rather than the tenth, attempt..."
msgstr "残りの欠点の1つは、生の文字列は本質的に型安全ではないため、IDEがコード補完の助けを拒否し、せいぜい幸運を祈る程度だということです。一方、Quarkusは、一瞬のうちにアプリケーションを再起動し、私のコードに迅速な判断を下すことを可能にします。また、10回目ではなく5回目の試行で動作するクエリを作成できたときの心からの喜びと純粋な驚きに勝るものはありません..."

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:17
#, fuzzy
msgid "With this in mind, we built the open source library JPAStreamer to make the process of writing Hibernate queries more intuitive and less time-consuming, while leaving your existing codebase intact. It achieves this goal by allowing queries to be expressed as standard Java Streams. Upon execution, JPAStreamer translates the Stream pipeline to a HQL query for efficient execution and thereby avoids materialising anything but the relevant results."
msgstr "このような背景から、既存のコードベースをそのままに、Hibernateのクエリ作成プロセスをより直感的で時間のかからないものにするために、オープンソースのライブラリJPAStreamerを構築しました。JPAStreamerは、クエリを標準的なJava Streamとして表現できるようにすることで、この目的を達成します。実行時には、JPAStreamerはStreamパイプラインを効率的に実行するためのHQLクエリに変換し、関連する結果以外のものを生成しないようにします。"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:19
#, fuzzy
msgid "Let me take an example - in some random database exists a table called person represented in a Hibernate application by the following standard `@Entity`:"
msgstr "例えば、あるランダムなデータベースにpersonというテーブルがあり、Hibernateアプリケーションでは次の標準的な `@Entity` で表現されます。"

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:25
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"person\")\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:30
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue(strategy = GenerationType.IDENTITY)\n"
"    @Column(name = \"person_id\", nullable = false, updatable = false)\n"
"    private Integer actorId;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:33
#, no-wrap
msgid ""
"    @Column(name = \"first_name\", nullable = false, columnDefinition = \"varchar(45)\")\n"
"    private String firstName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:36
#, no-wrap
msgid ""
"    @Column(name = \"last_name\", nullable = false, columnDefinition = \"varchar(45)\")\n"
"    private String lastName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:39
#, no-wrap
msgid ""
"    @Column(name = \"created_at\", nullable = false, updatable = false)\n"
"    private LocalDateTime createdAt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:42
#, no-wrap
msgid ""
"    // Getters for all fields will follow from here\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:45
#, fuzzy
msgid "To fetch the `Person` with an `Id` of 1 using JPAStreamer and Hibernate ORM, all you need is the following:"
msgstr "JPAStreamer と Hibernate ORM を使って `Id` が 1 の `Person` を取得するために必要なものは、以下のとおりです。"

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:50
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:53
#, no-wrap
msgid ""
"   @PersistenceContext\n"
"   EntityManagerFactory entityManagerFactory;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:55
#, no-wrap
msgid "   private final JPAStreamer jpaStreamer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:59
#, no-wrap
msgid ""
"   public PersonRepository (EntityManagerFactory entityManagerFactory) {\n"
"       jpaStreamer = JPAStreamer.of(entityManagerFactory); <1>\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:66
#, no-wrap
msgid ""
"   @Override\n"
"   public Optional<Person> getPersonById(int id) {\n"
"      return this.jpaStreamer.from(Person.class) <2>\n"
"           .filter(Person$.personId.equal(id)) <3>\n"
"           .findAny();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:68
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:70
#, fuzzy
msgid "Initialize JPAStreamer in one line, the underlying JPA provider handles the DB configuration."
msgstr "JPAStreamerを1行で初期化し、基盤となるJPAプロバイダがDB設定を処理します。"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:71
#, fuzzy
msgid "The Stream source is set to be the Person table."
msgstr "StreamのソースはPersonテーブルに設定されています。"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:72
#, fuzzy
msgid "The filter operation is treated as a SQL WHERE clause and the condition is expressed type-safely with JPAStreamer predicates (more on this to follow)."
msgstr "フィルタ操作はSQLのWHERE句として扱われ、条件はJPAStreamer述語でタイプセーフに表現されます（詳しくは後述します）。"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:74
#, fuzzy
msgid "Despite it looking as if JPAStreamer operates on all `Person` objects, the pipeline is optimized to a single query, in this case:"
msgstr "JPAStreamerがすべての `Person` オブジェクトを操作しているように見えるにもかかわらず、パイプラインはこの場合、単一のクエリに最適化されています。"

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:86
#, no-wrap
msgid ""
"select\n"
"    person0_.person_id as person_id1_0_,\n"
"    person0_.first_name as first_na2_0_,\n"
"    person0_.last_name as last_nam3_0_,\n"
"    person0_.created_at as created_4_0_,\n"
"from\n"
"    person person0_\n"
"where\n"
"    person0_.person_id=1\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:88
#, fuzzy
msgid "Thus, only the `Person` matching the search criteria is ever materialized."
msgstr "したがって、検索条件に一致する `Person` のみが実体化されることになる。"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:90
#, fuzzy
msgid "Next, we can look at a more complex example in which I am searching for persons with a first name ending with an “A” and a last name that starts with “B”. The matches are sorted primarily by the first name and secondly by last name. I further decide to apply an offset of 5, excluding the first five results, and to limit the total results to 10. Here is the Stream pipeline to achieve this task:"
msgstr "次に、より複雑な例として、姓が \"A \"で終わり、名が \"B \"で始まる人物を検索してみましょう。マッチは、主に姓でソートされ、次に名でソートされます。さらに、最初の5つの結果を除いて、オフセット5を適用し、結果の合計を10に制限することにしました。このタスクを達成するためのStreamパイプラインは以下のとおりです。"

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:99
#, no-wrap
msgid ""
"List<Person> list = jpaStreamer.stream(Person.class)\n"
"    .filter(Person$.firstName.endsWith(\"A\").and(Person$.lastName.startsWith(\"B\"))) <1>\n"
"    .sorted(Person$.firstName.comparator().thenComparing(Person$.lastName.comparator())) <2>\n"
"    .skip(5) <3>\n"
"    .limit(10) <4>\n"
"    .collect(Collectors.toList())\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:101
#, fuzzy
msgid "Filters can be combined with the and/or operators"
msgstr "フィルタは、and/or 演算子で組み合わせることができます。"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:102
#, fuzzy
msgid "Easily filter on one or more properties"
msgstr "1つまたは複数のプロパティで簡単にフィルタリング"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:103
#, fuzzy
msgid "Skip the first 5 Persons"
msgstr "最初の5人をスキップする"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:104
#, fuzzy
msgid "Return at most 10 Persons"
msgstr "最大10名まで返送可能"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:106
#, fuzzy
msgid "In the context of queries, the Stream operators filter, sort, limit, and skip all have a natural mapping that makes the resulting query expressive and intuitive to read while remaining compact."
msgstr "クエリの文脈では、Streamの演算子であるfilter、sort、limit、skipは、いずれも自然なマッピングで、クエリの結果を表現力豊かに、かつ直観的に読めるようにコンパクトにまとめることができる。"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:108
#, fuzzy
msgid "The Stream above is translated by JPAStreamer to the following HQL statement:"
msgstr "上のStreamはJPAStreamerによって次のようなHQL文に変換されます。"

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:125
#, no-wrap
msgid ""
"select\n"
"   person0_.person_id as person_id1_0_,\n"
"   person0_.first_name as first_na2_0_,\n"
"   person0_.last_name as last_nam3_0_,\n"
"   person0_.created_at as created_4_0_,\n"
"from\n"
"   person person0_\n"
"where\n"
"   person0_.person_id=1\n"
"where\n"
"    (person0_.first_name like ?) \n"
"    and (person0_.last_name like ?)\n"
"order by\n"
"    person0_.first_name asc,\n"
"    person0_.last_name asc limit ?, ?\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:127
#, fuzzy, no-wrap
msgid "How JPAStreamer works"
msgstr "JPAStreamerの仕組み"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:129
#, fuzzy
msgid "Okay, it looks simple. But how does it work? JPAstreamer uses an annotation processor to form a meta-model at compile time. It inspects any classes marked with the standard JPA annotation `@Entity`, and for every entity `Foo.class`, a corresponding `Foo$.class` is created. The generated classes represent entity attributes as Fields used to form predicates on the form `User$.firstName.startsWith(\"A\")` that can be interpreted by JPAStreamer's query optimizer."
msgstr "なるほど、簡単そうに見えますね。しかし、どのように動作するのでしょうか？JPAstreamerはアノテーションプロセッサーを使用して、コンパイル時にメタモデルを形成します。標準的なJPAアノテーション( `@Entity` )でマークされたクラスはすべて検査され、すべてのエンティティ( `Foo.class` )に対応する `Foo$.class` が作成されます。生成されたクラスは、JPAStreamerのクエリオプティマイザが解釈可能な形式 `User$.firstName.startsWith(\"A\")` の述語を形成するために使われるFieldとして、エンティティの属性を表現しています。"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:131
#, fuzzy
msgid "It is worth repeating that JPAStreamer does not alter or disturb the existing codebase but merely extends the API to handle Java Stream queries."
msgstr "繰り返しになりますが、JPAStreamerは既存のコードベースを変更したり邪魔したりするのではなく、単にJava Streamの問い合わせを処理するためにAPIを拡張しているだけなのです。"

#. type: Title ==
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:132
#, fuzzy, no-wrap
msgid "Installing the JPAstreamer Extension"
msgstr "JPAstreamer Extensionのインストール"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:134
#, fuzzy
msgid "JPAStreamer is installed as any other Quarkus extension, using a Maven dependency:"
msgstr "JPAStreamerは、他のQuarkus拡張機能と同様に、Mavenの依存関係を使用してインストールされます。"

#. type: delimited block -
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:142
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse.jpastreamer</groupId>\n"
"    <artifactId>quarkus-jpastreamer</artifactId>\n"
"    <version>1.0.0</version>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:145
#, fuzzy
msgid "After the dependency is added, rebuild your Quarkus application to trigger JPAStreamer’s annotation processor. The installation is complete once the generated fields reside in `/target/generated-sources`; you’ll recognise them by the trailing $ in the classnames, e.g. `Person$.class`."
msgstr "依存関係が追加されたら、JPAStreamerのアノテーションプロセッサーをトリガーするようにQuarkusアプリケーショ ンを再構築してください。生成されたフィールドが `/target/generated-sources` に格納されれば、インストールは完了です。クラス名の末尾に $ が付いていることで、例えば `Person$.class` のように認識することができます。"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:147
#, fuzzy
msgid "JPAStreamer requires an underlying JPA provider, such as Hibernate ORM. For this reason, JPAStreamer needs no additional configuration as the database integration is taken care of by the JPA provider."
msgstr "JPAStreamerは、Hibernate ORMのようなJPAプロバイダを必要とします。このため、JPAStreamerはデータベースとの統合をJPAプロバイダが行うので、追加の設定は必要ありません。"

#. type: Title ==
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:148
#, fuzzy, no-wrap
msgid "JPAStreamer and Panache"
msgstr "JPAStreamerとPanache"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:150
#, fuzzy
msgid "Any Panache fan will note that JPAStreamer shares some of its objectives with Panache, in simplifying many common queries. Still, JPAStreamer distinguishes itself by instilling more confidence in the queries with its type-safe Stream interface. Luckily however, no one if forced to take a pick as Panache and JPAStreamer work seamlessly alongside each other."
msgstr "Panacheのファンであれば、JPAStreamerがPanacheと同じような目的で、多くの一般的なクエリを簡略化していることに気がつくでしょう。しかし、JPAStreamerは型安全なStreamインターフェースによって、クエリに対する信頼性を高めている点で優れています。しかし幸いなことに、PanacheとJPAStreamerは互いにシームレスに動作するので、どちらかを選ばざるを得ないということはありません。"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:152
#, fuzzy
msgid "link:https://github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[Here] is an example Quarkus application that uses both JPAStreamer and Panache."
msgstr "JPAStreamerとPanacheの両方を使用したQuarkusアプリケーションの例を link:https//github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[以下に] 示します。"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:154
#, fuzzy
msgid "At the time of writing, JPAStreamer does not have support for Panache’s Active Record Pattern, as it relies on standard JPA Entities to generate its meta model. This will likely change in the near future."
msgstr "本稿執筆時点では、JPAStreamerは標準的なJPA Entityに依存してメタモデルを生成するため、PanacheのActive Record Patternをサポートしていません。これは近い将来、変更される可能性があります。"

#. type: Title ==
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:155
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:157
#, fuzzy
msgid "JPA in general, and Hibernate ORM in particular, has greatly simplified application database access, but its API sometimes forces unnecessary complexity. With JPAstreamer, you can utilize JPA while keeping your codebase clean and maintainable."
msgstr "一般にJPA、特にHibernate ORMはアプリケーションのデータベースアクセスを大幅に簡素化しましたが、そのAPIは時に不必要な複雑さを強いることがあります。JPAstreamerを使えば、コードベースをすっきりさせて保守性を保ちながらJPAを利用することができます。"

#. type: Title ===
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:158
#, fuzzy, no-wrap
msgid "Resources "
msgstr "リソース"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:161
#, fuzzy, no-wrap
msgid "**GitHub:** link:https://github.com/quarkiverse/quarkus-jpastreamer[github.com/quarkiverse/quarkus-jpastreamer]\n"
msgstr " *GitHub:* link:https://github.com/quarkiverse/quarkus-jpastreamer[github.com/quarkiverse/quarkus-jpastreamer]"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:162
#, fuzzy, no-wrap
msgid "**Homepage:** link:https://jpastreamer.org[jpastreamer.org]\n"
msgstr " *ホームページ：* link:https://jpastreamer.org[jpastreamer.org]"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:163
#, fuzzy, no-wrap
msgid "**JPAStreamer Quarkus Demo:** link:https//github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache]\n"
msgstr " *JPAStreamer Quarkus デモ:* link:https//github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache]"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:164
#, fuzzy, no-wrap
msgid "**Documentation:** link:https://speedment.github.io/jpa-streamer[speedment.github.io/jpa-streamer]\n"
msgstr " *ドキュメント：* link:https://speedment.github.io/jpa-streamer[speedment.github.] io/jpa-streamer"

#. type: Plain text
#: upstream/_posts/2023-02-10-jpastreamer-extension.adoc:164
#, fuzzy, no-wrap
msgid "**Gitter Support Chat:** link:https://gitter.im/jpa-streamer[gitter.im/jpa-streamer]\n"
msgstr " *Gitterサポートチャット：* link:https://gitter.im/jpa-streamer[gitter.im/jpa-streamer]"
