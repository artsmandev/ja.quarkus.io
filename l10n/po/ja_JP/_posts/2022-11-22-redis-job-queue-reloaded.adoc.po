msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter: title
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy, no-wrap
msgid "Redis Job Queue - Reloaded"
msgstr "Redisジョブキュー - Reloaded"

#. type: YAML Front Matter: synopsis
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy, no-wrap
msgid "How to implement a more reliable job queue with Redis, including fault tolerance, de-duplication, and poison pill."
msgstr "フォールトトレランス、重複排除、ポイズンピルなど、より信頼性の高いジョブキューをRedisで実装する方法。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"In https://quarkus.io/blog/redis-job-queue/[How to implement a job queue with Redis], we explained how to implement a job queue mechanism with Redis and the new Redis API from Quarkus.\n"
"The approach explored in that blog post had a significant flaw: if the execution of a job failed, the request was lost and will never be re-attempted."
msgstr "link:https://quarkus.io/blog/redis-job-queue/[Redisでジョブキューを実装] する方法では、RedisとQuarkusの新しいRedis APIを使ってジョブキューメカニズムを実装する方法を説明しました。ジョブの実行が失敗した場合、リクエストは失われ、再試行されることはありません。"

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "In this post, we explain how to improve the reliability of the job queue to handle failures, enable retry and use a _dead-letter queue_ to avoid poison pills."
msgstr "この記事では、ジョブキューの信頼性を高めて障害に対応する方法、リトライを有効にする方法、毒薬を避けるために _デッドレターキューを_ 使用する方法について解説しています。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "Recap & Problem"
msgstr "総括と課題"

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "In the https://quarkus.io/blog/redis-job-queue/[previous blog post], we implemented the following system."
msgstr "link:https://quarkus.io/blog/redis-job-queue/[前回のブログ記事] で、以下のシステムを導入しました。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"An application receives _fight requests_ and writes these requests into a Redis list.\n"
"Several simulators processed this list.\n"
"The outcomes of the _fights_ were communicated using Redis Pub/Sub."
msgstr "アプリケーションは _戦闘要求を_ 受け取り、これらの要求をRedisのリストに書き込みます。複数のシミュレータがこのリストを処理。 _試合の_ 結果はRedisのPub/Subを使って伝えられました。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"The architecture works and ensures that a fight can only be executed once, thanks to the `brpop` command used by the simulator code.\n"
"This command pops the item from the queue in an atomic manner and ensure that the other simulators can't process it too."
msgstr "このアーキテクチャーは、シミュレーターのコードで使われる `brpop` コマンドのおかげで、戦いが一度しか実行されないことを保証します。このコマンドはアトミックな方法でキューからアイテムを取り出し、他のシミュレータが処理できないようにします。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"However, this architecture has a drawback.\n"
"If the processing of the popped fight request fails, the request is lost.\n"
"No other simulator would be able to process it, and if the simulator that failed restarts, it will not reprocess the same request."
msgstr "しかし、このアーキテクチャには欠点があります。ポップファイト要求の処理に失敗すると、要求は失われます。他のシミュレータはそれを処理できないでしょうし、失敗したシミュレータが再起動しても、同じ要求を再処理することはできません。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "Introducing more queues"
msgstr "さらなるキューの導入"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"An approach to handle that problem is to introduce more queues.\n"
"In addition to the main queue (the Redis list from the image above), we introduce one queue per simulator.\n"
"Thus, each simulator has its private queue."
msgstr "この問題に対処するためのアプローチとして、より多くのキューを導入する方法があります。メインのキュー（上の画像のRedisリスト）に加えて、シミュレータごとに1つのキューを導入します。このように、各シミュレータはプライベートキューを持ちます。"

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "These private queues form a safety net."
msgstr "これらのプライベートキューは、セーフティネットを形成しています。"

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "So, the simulator does use not only the _main queue_ but also its private queue:"
msgstr "つまり、シミュレータは _メインキューだけ_ でなく、そのプライベートキューも使っているのです："

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"When a simulator pops a request from the main queue, it does not process it immediately; it writes it to its private queue.\n"
"To achieve this, we cannot use `brpop` and then write to the other queue, as if something wrong happens in between, we would have the same problem.\n"
"Instead, we use `blmove,` which pops an element from a list and pushes it into another in an atomic fashion.\n"
"Thus, we ensure that multiple simulators cannot consume the same request and that the request cannot be lost."
msgstr "シミュレータがメインキューからリクエストをポップすると、すぐに処理するのではなく、プライベートキューに書き込みます。これを実現するために、 `brpop` を使ってからもう一方のキューに書き込むことはできません。その間に何か問題が発生した場合、同じ問題が発生するからです。その代わりに、 `blmove,` を使用します。 は、アトミックな方法で、リストから要素をポップし、別のキューにプッシュします。このようにして、複数のシミュレータが同じリクエストを消費できないようにし、リクエストが失われないようにします。"

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "So, we use the following code to move the request from the main queue to the private queue:"
msgstr "そこで、以下のコードでメインキューからプライベートキューにリクエストを移動させます："

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "Now, the simulator does not simulate the requests from the main queue but needs to process the ones added to its private queue."
msgstr "さて、シミュレータはメインキューからのリクエストをシミュレートするのではなく、プライベートキューに追加されたリクエストを処理する必要があります。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"This code is slightly different from the code from the previous blog.\n"
"This time, we do not pop.\n"
"We get the last item from the queue (index `-1` is the last one), process it, and then remove it from the queue.\n"
"We do this until the queue is empty."
msgstr "このコードは前回のブログのコードとは少し違います。今回はポップしません。キューから最後の項目を取得し（インデックス `-1` が最後の項目です）、それを処理してからキューから削除します。これをキューが空になるまで続けます。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"Let's put everything together:\n"
"1. when the simulator starts, it should process the items from its private queue. So, if it crashes, it will retry to process the item.\n"
"2. once the private queue is empty, it gets new requests from the main queue. It will not process them directly but re-trigger the processing of the private queue until the queue is empty."
msgstr "すべてをまとめてみましょう：1. シミュレータが起動すると、プライベートキューからアイテムを処理するはずです。そのため、もしクラッシュしても、再試行します。2. プライベートキューが空になったら、メインキューから新しいリクエストを受け取ります。それは直接それらを処理しませんが、キューが空になるまでプライベートキューの処理を再トリガーします。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "New architecture, new problems"
msgstr "新しいアーキテクチャ、新しい問題"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"That approach fixes the initial problem.\n"
"If the processing fails, we retry it (as the request is not removed from the private queue).\n"
"That will handle transient failures pretty well."
msgstr "この方法で最初の問題は解決します。処理が失敗したら、(リクエストがプライベートキューから削除されないので) 再試行します。これで一過性の失敗はうまく処理できます。"

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "However, it also has its own set of drawbacks:"
msgstr "しかし、それなりの欠点もあります："

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "_Duplicates_: if the processing succeeds, but the `lrem` fails for any reason (like a network failure), the request will be processed another time as it was not removed from the queue."
msgstr "_重複_ ：処理が成功しても、何らかの理由（ネットワーク障害など）で `lrem` が失敗した場合、リクエストはキューから削除されなかったため、別の機会に処理されます。"

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "_Poison pill_: if a request cannot be processed successfully, it will retry to process it forever."
msgstr "_毒薬_ ：リクエストを正常に処理できない場合、永遠に処理をやり直します。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "De-duplication"
msgstr "重複排除"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"Handling _duplicates_ require having a way to identify the requests uniquely and deduplicate manually.\n"
"In other words, if all our requests have a unique id, we can check if that id has already been processed (for example, by storing the processed ids in another list or a hash). If the item has already been processed, ignore it (remove it from the queue) and process it to the next one:"
msgstr "_重複を_ 処理するには、リクエストを一意に識別して、手動で重複を除外する方法が必要です。言い換えると、すべてのリクエストが一意な ID を持っている場合、その ID がすでに処理されているかどうかを (たとえば、処理された ID を別のリストやハッシュに保存することで) チェックすることができます。すでに処理済みの場合は、それを無視して (キューから削除して) 次の処理に移ります："

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "Avoiding swallowing the poison pill"
msgstr "毒薬を飲み込まないために"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"Handling _poison pills_ is more complex.\n"
"A _poison pill_ is a request that will always make the processing fails.\n"
"It can be because of a bug in the processing code or something unexpected; it will always fail.\n"
"Retrying, in this case, will not help; we are not facing a transient issue."
msgstr "_毒薬の_ 処理はより複雑です。 _毒薬とは_ 、処理が必ず失敗するリクエストのことです。処理コードのバグや予期せぬ何かが原因かもしれませんが、必ず失敗します。この場合、リトライは役に立ちません。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"So, what can we do?\n"
"We need to track the number of processing attempts for that request, and if it exceeds a specific number, let's face it: we won't be able to handle the request.\n"
"We generally want to send the request to a dead-letter queue (DLQ), i.e., a specific queue storing the unprocessable items:"
msgstr "では、どうすればいいのでしょうか？そのリクエストに対する処理の試行回数を追跡する必要があります。そして、もしそれが特定の回数を超えた場合、そのリクエストを処理することはできません。一般的には、リクエストをデッドレターキュー(DLQ)、つまり、処理不可能なアイテムを格納する特定のキューに送りたいのです："

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "The counter is a specific Redis integer value that we increment and reset once we succeed or give up."
msgstr "カウンターは特定のRedis整数値で、成功したりあきらめたりしたらインクリメントしてリセットします。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"The items from the DLQ are not lost; they are saved for future processing.\n"
"These items could be re-added to the main queue (to verify if it was not a transient issue or the bug was fixed).\n"
"Another approach requires that a human administrator looks at these requests before re-injecting them into the system; maybe it was just a formatting issue..."
msgstr "DLQ からのアイテムは失われるのではなく、将来の処理のために保存されます。これらのアイテムは、(一過性の問題でないか、バグが修正されたかを確認するために) メインキューに再追加することができます。別のアプローチでは、システムに再投入する前に、人間の管理者がこれらのリクエストに目を通す必要があります。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid "Summary"
msgstr "まとめ"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"This post explores how to improve the job queue we implemented in https://quarkus.io/blog/redis-job-queue/[How to implement a job queue with Redis].\n"
"This initial implementation, while simple, would lose requests if the processing fails.\n"
"This post proposes another, more complex, architecture to handle that case but also handle duplicates and poison pills.\n"
"But, nothing comes for free, and the resulting code is slightly more complex."
msgstr "この投稿では、 link:https://quarkus.io/blog/redis-job-queue/[Redisでジョブキューを実装] する方法で実装したジョブキューを改善する方法を探ります。この最初の実装はシンプルですが、処理に失敗するとリクエストを失ってしまいます。この投稿では、このようなケースに対応し、重複や毒薬も処理する、より複雑な別のアーキテクチャを提案します。しかし、タダで手に入るものはありません。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid ""
"Remember: Redis is a fantastic toolbox.\n"
"But, it's a toolbox; you build what you need with it, as it is rarely available out of the box.\n"
"That being said, the richness of the Redis commands lets you do many things... (spoiler: we will see some of these things in future posts)."
msgstr "覚えておいてください：Redisは素晴らしいツールボックスです。Redisは素晴らしいツールボックスですが、あくまでツールボックスであり、箱から出してすぐに使えることはほとんどないので、必要なものを作る必要があります。とはいえ、Redisコマンドの豊富さによって、さまざまなことができるようになります。"
