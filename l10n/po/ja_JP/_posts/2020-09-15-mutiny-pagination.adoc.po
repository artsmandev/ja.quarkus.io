msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#. type: YAML Front Matter: title
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy, no-wrap
msgid "Handling paginated APIs with Mutiny"
msgstr "Mutinyでページ分割されたAPIを扱う。"

#. type: YAML Front Matter: synopsis
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy, no-wrap
msgid "How to use API using pagination with Mutiny"
msgstr "Mutinyでページネーションを使用してAPIを使用する方法"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"At the beginning of the Mutiny adventure, my friend Alex came to me with an interesting problem.\n"
"Alex wanted to retrieve data from a REST service in a reactive manner.\n"
"So far, no problem, we have everything for this in our toolbox.\n"
"But, this service, as many services, is using pagination.\n"
"Ah! That makes things a bit more spicy.\n"
"Alex wanted to retrieve all the items and consume them as a stream, but you can't retrieve the items in one batch.\n"
"You need to invoke the service for every page, extract the items and feed the stream."
msgstr "Mutinyの冒険が始まった頃、友人のAlexが興味深い問題を抱えて私のところにやってきました。Alexは、RESTサービスからリアクティブな方法でデータを取得したいと考えていました。ここまでは問題ありません。しかし、このサービスは多くのサービスと同じようにページネーションを使っています。ああ！これで少しスパイシーになりました。Alexはすべてのアイテムを取得し、ストリームとして消費したかったのですが、一括でアイテムを取得することはできません。ページごとにサービスを起動し、アイテムを抽出してストリームに流す必要があります。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"So, how to achieve this in a reactive manner and build a proper stream of items without loosing your sanity?\n"
"Let's have a look!"
msgstr "では、正気を失うことなく、反応的にこれを達成し、適切なアイテムの流れを構築するにはどうすればよいのでしょうか？見てみましょう！"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "The Punk API"
msgstr "パンクAPI"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"First, we need an API.\n"
"Alex introduced me to the https://punkapi.com/documentation/v2[Punk API], a REST API to retrieve beers.\n"
"That's fun, and even better, it uses pagination.\n"
"We got our API!"
msgstr "まずはAPIが必要です。アレックスは、ビールを検索するためのREST APIである link:https://punkapi.com/documentation/v2[Punk APIを] 紹介してくれました。これは面白いし、さらにいいのはページ分割が使えること。APIを手に入れました！"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "If you call `https://api.punkapi.com/v2/beers?page=1`, you get a JSON array like:"
msgstr "を呼ぶと `link:https://api.punkapi.com/v2/beers?page=1` というようなJSON配列が得られます："

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"I won't show discuss the content of each object, the documentation page does a great job about that.\n"
"Let's focus on the pagination aspect.\n"
"First, we passed the `page` query parameter, indicating which page we want.\n"
"Generally, when you retrieve a page, the API provides a way to know if there is a next page (a special field in the JSON document, or HTTP header), but the Punk API does not provide any hint.\n"
"So, to retrieve all the beers, we need to invoke the service for page 1, 2, 3... until the returned JSON array is empty."
msgstr "各オブジェクトの内容については、ドキュメントのページを参照してください。ページネーションの側面に焦点を当てましょう。まず、 `page` クエリ・パラメータを渡します。通常、ページを取得する場合、APIは次のページがあるかどうかを知る方法（JSONドキュメントの特別なフィールド、またはHTTPヘッダー）を提供しますが、Punk APIはヒントを提供しません。そのため、すべてのビールを取得するには、返されるJSON配列が空になるまで、1ページ目、2ページ目、3ページ目...とサービスを呼び出す必要があります。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "In an imperative world, to retrieve all the beers, you would do something like this:"
msgstr "命令形の世界では、すべてのビールを取り出すには、次のようにします："

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "How can we achieve the same in a reactive manner and build a stream of beer?"
msgstr "どうすれば、同じことをリアクティブに実現し、ビールの流れを作ることができるのか。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-pagination/mutiny-pagination.png[]"
msgstr "image:/assets/images/posts/mutiny-pagination/mutiny-pagination.png[alt=\"mutiny pagination\"]"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Let's proceed step by step."
msgstr "ステップバイステップで進めていきましょう。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Retrieving a single page"
msgstr "単一ページの取得"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"First, we need to see how we can retrieve a single page.\n"
"I'm going to use the Vert.x Web Client, but you can use any reactive HTTP clients providing a Mutiny API."
msgstr "まず、単一のページを取得する方法を確認する必要があります。ここでは Vert.x Web Client を使用しますが、Mutiny API を提供する任意のリアクティブ HTTP クライアントを使用できます。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"This snippet creates the web client.\n"
"Then, we use that client and retrieve the first page."
msgstr "このスニペットはウェブ・クライアントを作成します。そして、そのクライアントを使って最初のページを取得します。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "When we receive the result (`onItem`), we transform the JSON array into a list of beers."
msgstr "結果( `onItem` )を受け取ると、JSON配列をビールのリストに変換します。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Let's extract this code in a method and take the page number as parameter:"
msgstr "このコードをメソッドに展開し、パラメータとしてページ番号を受け取ってみましょう："

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "So far, so good."
msgstr "ここまではいいんだけどね。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Retrieving multiple page"
msgstr "複数ページの取得"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"So, now, we know how to retrieve a single page and extract the items from it.\n"
"We just need to repeat this operation for every page, and provide a stream."
msgstr "これで、1つのページを取得し、そこから項目を抽出する方法がわかりました。各ページに対してこの操作を繰り返し、ストリームを提供するだけです。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"Mutiny provides a method to create a `Multi` by repeating multiple times a `Uni`.\n"
"Under the hood, it calls a method returning a `Uni` and subscribe on it.\n"
"But we need to make _progress_, and pass the current page.\n"
"Mutiny offers the possibility to store a state in order to let the method creating the `Uni` increments the page number:"
msgstr "Mutinyは、 `Uni` を複数回繰り返すことで `Multi` を作成するメソッドを提供します。フードの下では、 `Uni` を返すメソッドを呼び出し、それを購読します。しかし、 _現在の_ ページを渡す必要があります。Mutinyは、 `Uni` を作成するメソッドにページ番号をインクリメントさせるために、状態を保存する可能性を提供します："

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"This code above creates a stream with the item emitted by the `Unis` returned by the `getPage` method.\n"
"We increment the page number (stored in an `AtomicInteger`) every time.\n"
"So, it retrieves the page 1, 2, 3 ... and every time emits the received `List<Beer>` downstream."
msgstr "上記のコードでは、 `getPage` メソッドから返された `Unis` によって生成されたアイテムでストリームを作成しています。 `AtomicInteger` に格納されている）ページ番号を毎回インクリメントします。そのため、ページ1、2、3...を取得し、受信した `List<Beer>` をストリームに流します。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"However, at some point, we must stop.\n"
"As we said earlier, we can stop when the returned list is empty:"
msgstr "しかし、ある時点で止めなければなりません。先ほど言ったように、返されたリストが空になったら止めればいいのです："

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"The `until` clause indicates when the iteration must be stopped.\n"
"It receives the retrieved list (produced by `getPage`), and when this list is empty, stops the repetition.\n"
"If the list still contains beers, it retrieves the next page."
msgstr "`until` 節は、繰り返しを停止するタイミングを示します。検索されたリスト ( `getPage` で生成) を受け取り、このリストが空になると、繰り返しを停止します。リストにまだビールが含まれていれば、次のページを取得します。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Unpacking the beers"
msgstr "ビールの開梱"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"We now have a stream of list, and each list contain a set of beers.\n"
"We are almost there, but Alex wants a stream of beer.\n"
"So we need to unpack the beers."
msgstr "これでリストの流れができ、それぞれのリストにビールのセットが入りました。あと少しですが、アレックスはビールのストリームが欲しいのです。そこで、ビールを解凍する必要があります。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "The first approach to achieve this uses `transformToMultiAndConcatenate`, i.e. for each list create a new `multi` with the contained beers and concatenate these `multis`:"
msgstr "これを実現するための最初のアプローチとして、 `transformToMultiAndConcatenate` を使用します。つまり、各リストに対して、含まれるビールを含む新しい `multi` を作成し、これらの `multis` を連結させます："

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Wondering about `concatenate`? Check out this https://quarkus.io/blog/mutiny-redis/[other blog post]"
msgstr "`concatenate` について疑問に思うこと ?この link:https://quarkus.io/blog/mutiny-redis/[他のブログ記事を] チェックする"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-pagination/disjoint.png[]"
msgstr "image:/assets/images/posts/mutiny-pagination/disjoint.png[alt=\"disjoint\"]"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Because this is a common operation, Mutiny provides the `disjoint` method doing exactly the same:"
msgstr "これはよくある操作なので、Mutinyは全く同じことをする `disjoint` メソッドを提供しています："

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "And we are done!"
msgstr "そして、私たちはもう終わりです！"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "The benefits of reactive"
msgstr "リアクティブの利点"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"We have our stream, it's time to use it!\n"
"Let's, for example, retrieve the first 10 beers with \"IPA\" (let's be trendy) in their description:"
msgstr "ストリームができました！例えば、説明文に「IPA」（流行に乗りましょう）が含まれる最初の10種類のビールを検索してみましょう："

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"The advantage of our stream is that we won't retrieve every page.\n"
"As soon as we have enough beers, we stop the repetition.\n"
"How? Because it informs the upstream that it does not need more items (*cancellation*) and that stops the repetition.\n"
"So, retrieving items from paginated APIs this way can reduce the number of requests and, as a consequence the load on the remote service."
msgstr "私たちのストリームの利点は、すべてのページを検索しないことです。十分なビールがあれば、すぐに繰り返しを止めます。どうやって？なぜなら、これ以上のアイテムは必要ないことを上流に通知し *（キャンセル* ）、繰り返しを止めるからです。つまり、この方法でページ分割されたAPIからアイテムを取得することで、リクエストの数を減らすことができ、結果としてリモートサービスの負荷を減らすことができます。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Feel thirsty?"
msgstr "喉が渇きましたか？"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"Wanna try this code, checkout this https://gist.github.com/cescoffier/18a326a5c057392bec54d95ec5a06ca6[gist].\n"
"You can run it immediately with jbang:"
msgstr "このコードを試してみたい方は、この link:https://gist.github.com/cescoffier/18a326a5c057392bec54d95ec5a06ca6[gist] をチェックしてください。jbangですぐに実行できます："
