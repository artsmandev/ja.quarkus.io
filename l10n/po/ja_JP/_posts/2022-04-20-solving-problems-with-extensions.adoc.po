msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"First things first, bootstraping a Quarkus extension is easy: in one command, you can get it scaffolded and get started on the actual implementation.\n"
"But that's not the subject of this post!"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"An extension, apart from providing some runtime code to your application, also allows to tweak the build of your application and do all sorts of things at the build level.\n"
"This is what we will focus on in this series."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "**Problem of the day:** to ensure binary compatibility, the Hub4j GitHub API introduces some bridge methods that confuse Mockito and more specifically ByteBuddy and ultimately make our tests unreliable. How can we solve that?"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"You might have heard about https://github.com/quarkiverse/quarkus-github-app[my Quarkus GitHub App extension]\n"
"that allows you to develop GitHub Apps based on Quarkus at light speed with very little boilerplate\n"
"(shameless ad: it is awesome!)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"My dear colleague https://github.com/yrodiere[Yoann Rodière] (he is awesome too!) wrote some test infrastructure for it based on https://site.mockito.org[Mockito]\n"
"(which uses https://bytebuddy.net/[ByteBuddy] under the hood).\n"
"That was all good until we started noticing confusing and non reproducible failures in our tests\n"
"with Mockito sometimes not actually calling the method we would expect."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"Historically, it used to return a `GHUser` but, in newer versions, it returns a `GHMyself`,\n"
"which broke the binary compatibility."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"To restore it and with the help of the `@WithBridgeMethods` annotation, the GitHub API build will create two methods in the bytecode:\n"
"one returning `GHMyself` and one returning `GHUser`.\n"
"This is very useful if you have compiled your application with an old version of the GitHub API and you just want to use the new version without recompiling your application.\n"
"Typically, in the case of Jenkins, you can switch to a new version of the GitHub API without having to recompile all the Jenkins plugins using GitHub API."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"This bridge methods approach solves a real problem and it's not that big of a deal as it's fully transparent for the developer...\n"
"except when you start using Mockito due to https://github.com/raphw/byte-buddy/issues/1162[a ByteBuddy issue]:\n"
"ByteBuddy can get confused if there are several methods with the same signature but different return types."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"ByteBuddy is an amazing library and this blog post should not be seen as a critique of ByteBuddy.\n"
"This is an extreme corner case that doesn't happen with standard bytecode."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"In the case of Quarkus GitHub App, we don't really care about binary compatibility:\n"
"when upgrading to a new version of the GitHub API,\n"
"users will rebuild their application."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"So given these bridge methods are problematic,\n"
"one solution would be to get rid of them."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"But forking and maintaining a fork forever is definitely not something we should consider if we can avoid it.\n"
"Especially since we want to continue benefiting from all the future improvements of the GitHub API."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"If you are in a rush, the short answer is yes.\n"
"Now let's go for the (not so) long answer."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"In Quarkus, we can index the annotations with Jandex so, in a perfect world,\n"
"we would index the GitHub API jar with Jandex (which we already do for other purposes)\n"
"and interrogate Jandex to get all the methods annotated with `@WithBridgeMethods`:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"Unfortunately, `@WithBridgeMethods` has a `CLASS` retention policy\n"
"- which makes perfect sense for its usage -\n"
"and Jandex only considers annotations with a `RUNTIME` retention policy."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"This limitation will be alleviated in Jandex 3 but, for the time being,\n"
"we cannot use Jandex."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"Unfortunately, until then, we don't have many options here:\n"
"we have to list the methods manually."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"Once this is done, we are able to consume the `GitHubApiClassWithBridgeMethodsBuildItem` from any Quarkus `@BuildStep`\n"
"so this list is generally available to the Quarkus build."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"To manipulate bytecode during the build, Quarkus offers the `BytecodeTransformerBuildItem`.\n"
"Adjusting the bytecode of a class is just a matter of producing one for the given class."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"For instance, to remove the bridge methods from our GitHub API methods,\n"
"we add the following build step to our extension:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"During the build process, Quarkus will create a class file containing the modified bytecode\n"
"and will use it instead of the class coming from the GitHub API jar.\n"
"Thus the bridge methods we wanted to remove will never be visible to ByteBuddy."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"At conferences, we often say that Quarkus is doing things differently from other frameworks\n"
"and that the magic relies in its innovative build process."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "**But it is also a very powerful tool to customize the build of your applications.**"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:1
#, no-wrap
msgid "Solving problems with Quarkus extensions (1/n)"
msgstr "Quarkusのエクステンションで問題を解く (1/n)"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:1
#, no-wrap
msgid "The unique build infrastructure of Quarkus allows you to solve complex issues in a very simple way by developing custom extensions."
msgstr "Quarkusのユニークなビルドインフラストラクチャでは、カスタムエクステンションを開発することで、非常にシンプルな方法で複雑な問題を解決することができます。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:11
msgid "This is the first post of what I hope will be a series of several articles showing how you can solve complex problems by leveraging the unique Quarkus build infrastructure and extension framework."
msgstr "この記事は、Quarkus独自のビルドインフラとエクステンションフレームワークを活用して複雑な問題を解決する方法を紹介する、数回にわたる連載の最初の記事です。"

#. type: Title ==
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:20
#, no-wrap
msgid "Some context"
msgstr "いくつかのコンテキスト"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:32
msgid "The source of the problem is that, to ensure binary compatibility, the https://github.com/hub4j/github-api[Hub4j GitHub API] we use in Quarkus GitHub App introduces bridge methods in the bytecode."
msgstr "問題の原因は、バイナリ互換性を確保するために、Quarkus GitHub Appで使用している link:https://github.com/hub4j/github-api[Hub4j GitHub API]では、バイトコードにブリッジメソッドを導入していることです。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:34
msgid "For instance, let's take this method of the `GitHub` class of the GitHub API:"
msgstr "たとえば、GitHub API の `GitHub` クラスのこのメソッドを例に挙げてみましょう。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:53
msgid "At the bytecode level, you end up with something equivalent to the following:"
msgstr "バイトコードレベルでは、以下のようなものになります。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:66
msgid "`invokevirtual` of `getMyself()` that returns `GHMyself`"
msgstr "`GHMyself` を返す`getMyself()`の `invokevirtual`"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:68
msgid "And if your existing compiled code calls `GHUser getMyself()`, it will still work after the change of return type."
msgstr "また、既存のコンパイル済みコードが `GHUser getMyself()` を呼び出す場合、戻り値の型を変更した後も動作します。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:80
msgid "This issue was causing our tests to be unreliable because sometimes ByteBuddy was choosing the wrong method to apply Mockito magic."
msgstr "この問題は、ByteBuddyがMockitoマジックを適用するために間違った方法を選択することがあり、テストの信頼性を低下させる原因となっていました。"

#. type: Title ==
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:81
#, no-wrap
msgid "How can we work around this?"
msgstr "どうすれば回避できるのか？"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:91
msgid "Obviously, we could fork the GitHub API and avoid generating the bridge methods."
msgstr "もちろん、GitHub API をフォークしてブリッジメソッドを生成しないようにすることもできます。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:96
msgid "So could we somehow keep the library standard but have Quarkus adjust the bytecode when building the application?"
msgstr "そこで、ライブラリは標準のまま、アプリケーションのビルド時にQuarkusでバイトコードを調整することはできないでしょうか。"

#. type: Title ===
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:100
#, no-wrap
msgid "Let's identify the methods"
msgstr "メソッドを特定しよう"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:123
msgid "For more flexibility, we introduced a `BuildItem`:"
msgstr "より柔軟に対応するために、 `BuildItem` を導入しました。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:147
msgid "And we will produce a `GitHubApiClassWithBridgeMethodsBuildItem` for each class:"
msgstr "そして、各クラスごとに `GitHubApiClassWithBridgeMethodsBuildItem` を作成します。"

#. type: delimited block =
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:164
msgid "I won't go into detail on the Quarkus build process but the principle of it is extremely simple:"
msgstr "Quarkusのビルドプロセスの詳細は省きますが、その原理は極めてシンプルです。"

#. type: delimited block =
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:166
msgid "It is composed of build steps (methods annotated with `@BuildStep`)."
msgstr "ビルドステップ（ `@BuildStep` でアノテーションされたメソッド）で構成されています。"

#. type: delimited block =
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:167
msgid "A build step can consume build items."
msgstr "ビルドステップはビルドアイテムを消費することができます。"

#. type: delimited block =
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:168
msgid "A build step produces build items."
msgstr "ビルドステップはビルドアイテムを生成します。"

#. type: delimited block =
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:169
msgid "Then it is just a matter of resolving the dependencies of the build steps to get to the final result: your application."
msgstr "あとは、ビルドステップの依存関係を解決して、最終結果であるアプリケーションを完成させるだけです。"

#. type: delimited block =
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:171
msgid "You can learn more about it in the link:/guides/writing-extensions#build-step-processors[Writing extensions guide]."
msgstr "link:/guides/writing-extensions#build-step-processors[Writing extensionsガイド]で詳しく解説しています。"

#. type: Title ===
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:173
#, no-wrap
msgid "Removing the methods"
msgstr "メソッドの削除"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:176
msgid "Now that we have the list of methods handy, the next step is to remove them."
msgstr "これでメソッドのリストが手元に揃ったので、次のステップではメソッドを削除します。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:201
msgid "We are going to produce ``BytecodeTransformerBuildItem``s."
msgstr "`BytecodeTransformerBuildItem`sを作成します。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:202
msgid "We consume the previously produced ``GitHubApiClassWithBridgeMethodsBuildItem``s."
msgstr "先に生産された `GitHubApiClassWithBridgeMethodsBuildItem`s を消費します。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:204
msgid "`RemoveBridgeMethodsClassVisitor` is a classic https://asm.ow2.io[ASM] `ClassVisitor` that will modify the bytecode:"
msgstr "`RemoveBridgeMethodsClassVisitor` は、バイトコードを修正する古典的な link:https://asm.ow2.io[ASM] `ClassVisitor` です。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:232
msgid "If the method name matches and the method is a bridge and synthetic method..."
msgstr "メソッド名が一致し、そのメソッドがブリッジで合成メソッドである場合..."

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:233
msgid "... we remove it from the bytecode by returning `null`."
msgstr "... `null`を返すことで、バイトコードからそれを削除します。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:234
msgid "If not, we just delegate to the superclass method that will incorporate the method in the bytecode."
msgstr "そうでない場合は、バイトコードにそのメソッドを組み込むスーパークラスのメソッドに委ねるだけです。"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:236
msgid "And that's it!"
msgstr "以上です!"

#. type: Title ==
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:241
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2022-04-20-solving-problems-with-extensions.adoc:247
msgid "This build process is the key to the low memory footprint and fast startup times of Quarkus."
msgstr "このビルドプロセスが、Quarkusのメモリフットプリントの少なさと起動時間の速さの秘訣です。"
