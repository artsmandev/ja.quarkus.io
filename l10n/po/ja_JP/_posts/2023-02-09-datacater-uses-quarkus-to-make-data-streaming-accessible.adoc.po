# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-20 11:31+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#, fuzzy, no-wrap
msgid "ssprenger"
msgstr "スプレーネージャー"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#, fuzzy, no-wrap
msgid "2023-02-09"
msgstr "2023-02-09"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#, fuzzy, no-wrap
msgid "DataCater provides a developer-friendly ETL platform. Learn why it chose Quarkus for its recent rewrite."
msgstr "DataCaterは、開発者向けのETLプラットフォームを提供しています。同社が最近の書き換えにQuarkusを選んだ理由をご覧ください。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#, no-wrap
msgid "user-story"
msgstr "user-story"

#. type: Title =
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:10
#, fuzzy, no-wrap
msgid "DataCater uses Quarkus to make Data Streaming more accessible"
msgstr "DataCaterはQuarkusを使用してデータストリーミングをより身近なものにしました。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:14
#, fuzzy
msgid "This article gives a brief overview of the data streaming platform DataCater, discusses how we moved from Scala Play! and Kafka Streams to Quarkus, and presents why we think that Quarkus is an exceptional framework for developing cloud-native Java applications."
msgstr "この記事では、データストリーミングプラットフォームDataCaterの概要を説明し、Scala Play！やKafka StreamsからQuarkusに移行した経緯について述べ、QuarkusがクラウドネイティブなJavaアプリケーションを開発するための優れたフレームワークだと考える理由を提示する。"

#. type: Title ==
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:15
#, fuzzy, no-wrap
msgid "What is DataCater?"
msgstr "DataCaterとは？"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:22
#, fuzzy
msgid "https://datacater.io[DataCater^] is a real-time, cloud-native data pipeline platform based on Apache Kafka and Kubernetes. It allows users to build streaming data pipelines that stream records between different Apache Kafka topics and can apply filters or transforms to the records on the way.  Given its focus on data scientists and data engineers as target users, DataCater enables users to develop transforms in Python. It provides an https://www.loom.com/share/15947f13e71540948e3f9d57eac64976[interactive, UI-based preview of streaming data pipelines^] and uses Kubernetes as the runtime for pipeline deployments."
msgstr "link:https://datacater.io[DataCaterは, target=\"_blank\"] 、Apache KafkaとKubernetesをベースとしたリアルタイムでクラウドネイティブなデータパイプラインプラットフォームです。異なるApache Kafkaトピック間でレコードをストリーミングするストリーミングデータパイプラインを構築することができ、途中でレコードにフィルタや変換を適用することができます。データサイエンティストやデータエンジニアをターゲットユーザーとしているため、DataCaterはPythonでトランスフォームを開発することが可能です。また、 link:https://www.loom.com/share/15947f13e71540948e3f9d57eac64976[ストリーミングデータパイプラインをUIベースでインタラクティブにプレビュー, target=\"_blank\"] でき、パイプラインのデプロイメントにはKubernetesをランタイムとして使用します。"

#. type: Title ==
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:23
#, fuzzy, no-wrap
msgid "Why did DataCater choose Quarkus?"
msgstr "DataCaterがQuarkusを選択した理由は何ですか？"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:27
#, fuzzy
msgid "DataCater was created in 2020 and initially built its control plane on top of the Scala framework https://www.playframework.com/[Play^] and implemented pipelines with https://kafka.apache.org/documentation/streams/[Kafka Streams^].  Over time, we experienced the following limitations and issues with the chosen technologies:"
msgstr "DataCaterは2020年に誕生し、当初はScalaのフレームワーク link:https://www.playframework.com/[Playの, target=\"_blank\"] 上にコントロールプレーンを構築し、 link:https://kafka.apache.org/documentation/streams/[Kafka Streamsで, target=\"_blank\"] パイプラインを実装していました。時間の経過とともに、選択した技術に以下のような制限や問題が発生しました："

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:29
#, fuzzy, no-wrap
msgid "*Inefficient resource usage:* Kafka Streams applications consume a considerable amount of main memory, making it quite expensive to operate at scale.\n"
msgstr "*非効率なリソース使用： *Kafka Streamsアプリケーションは、かなりの量のメインメモリを消費するため、スケールアップした運用にはかなりのコストがかかります。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:30
#, fuzzy, no-wrap
msgid "*Long startup times:* Starting a Kafka Streams application can take up to a few minutes, which has a negative impact on the availability of streaming data pipelines.\n"
msgstr "*長い起動時間： *Kafka Streamsアプリケーションの起動に数分かかることがあり、ストリーミングデータパイプラインの可用性に悪影響を及ぼす。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:32
#, fuzzy, no-wrap
msgid ""
"*Restriction to intra-cluster streaming:* By default, Kafka Streams can only stream data between topics of the same Apache Kafka cluster. When facing use cases that stream data between different Kafka clusters, for instance, between a production and test cluster,\n"
"we had to employ additional tooling, e.g., MirrorMaker 2.\n"
msgstr "*クラスタ内ストリーミングへの制限： *デフォルトでは、Kafka Streamsは同じApache Kafkaクラスタのトピック間でのみデータをストリーミングすることができます。例えば、本番クラスタとテストクラスタのように、異なるKafkaクラスタ間でデータをストリーミングするユースケースに直面した場合、MirrorMaker 2など、追加のツールを採用する必要があった。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:33
#, fuzzy, no-wrap
msgid "*No support for Java 17:* The current Play! version 2.8 does not support running on top of Java 17.\n"
msgstr "*Java 17のサポートなし： *現在のPlay！バージョン2.8は、Java 17の上での実行をサポートしていません。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:35
#, fuzzy
msgid "Especially the first two issues, inefficient resource usage and long startup times, hurt a lot when operating in the cloud at scale."
msgstr "特に最初の2つの問題、非効率なリソース使用と長い起動時間は、クラウドで大規模に運用する際に大きな痛手となる。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:39
#, fuzzy
msgid "In 2022, we rewrote DataCater to implement lots of learnings that we made when working with early users.  Using this unique opportunity, we also switched from Play! and Kafka Streams to Quarkus, thus using Quarkus for implementing both our control plane and the data pipelines."
msgstr "2022年、私たちはDataCaterを書き直し、初期ユーザーとの共同作業で得た多くの学びを実装しました。このユニークな機会を利用して、Play！やKafka StreamsからQuarkusに切り替え、コントロールプレーンとデータパイプラインの両方をQuarkusで実装するようにしました。"

#. type: delimited block _
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:44
#, fuzzy
msgid "With Quarkus, we are able to bring the best of cloud native and messaging applications together. Streaming messages, especially in the context of Apache Kafka, is still a Java-dominated environment, while the traditional Java stack lacks the characteristics of cloud-native applications, like small footprints, fast startups, and self-containment.  *-Hakan Lofcali, CTO, DataCater*"
msgstr "Quarkusを使えば、クラウドネイティブアプリケーションとメッセージングアプリケーションの良いところを一緒にすることができます。メッセージのストリーミング、特にApache Kafkaの文脈では、いまだにJavaが支配的な環境であり、従来のJavaスタックには、小さなフットプリント、高速なスタートアップ、自己完結といったクラウドネイティブなアプリケーションの特性が欠けています。 *-DataCater社CTO、Hakan Lofcali氏*"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:47
#, fuzzy
msgid "In the following, we list the main reasons why we chose Quarkus over other Java frameworks:"
msgstr "以下では、他のJavaフレームワークではなく、Quarkusを選択した主な理由を列挙します："

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:49
#, fuzzy, no-wrap
msgid "*Versatility:* We cannot only implement the API of our control plane with the Quarkus RESTeasy extension but can also employ Quarkus as the base for implementing streaming data pipelines using its https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging^] extension.\n"
msgstr "*汎用性があります： *QuarkusのRESTeasy拡張機能でコントロールプレーンのAPIを実装するだけでなく、Quarkusをベースにして、 link:https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging, target=\"_blank\"] 拡張機能でストリーミングデータパイプラインを実装することができます。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:51
#, fuzzy, no-wrap
msgid ""
"*Dev services:* Quarkus' dev services help us to spin up dependencies, like PostgreSQL or Apache Kafka, very fast and provide an outstanding developer experience. Our developers can focus on their job instead of\n"
"messing with the configuration of tooling.\n"
msgstr "*開発サービス： *Quarkusの開発サービスにより、PostgreSQLやApache Kafkaなどの依存関係を非常に高速に立ち上げることができ、優れた開発者体験を提供することができます。開発者は、ツールの設定に煩わされることなく、自分の仕事に集中することができます。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:52
#, fuzzy, no-wrap
msgid "*Support for native executables:* Quarkus allows us to easily build native executables, which are very beneficial when operating in a cloud context. They require much fewer resources and achieve faster startup times.\n"
msgstr "*ネイティブ実行可能ファイルのサポート： *Quarkusでは、ネイティブの実行可能ファイルを簡単に構築できます。これは、クラウドコンテキストで運用する場合に非常に有益です。ネイティブの実行可能ファイルは、クラウド環境で運用する場合に非常に有益です。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:53
#, fuzzy, no-wrap
msgid "*Minimal footprint:* Quarkus’ build time optimizations allow for smaller footprints of JVM- and GraalVM-based containers.\n"
msgstr "*最小限のフットプリント： *Quarkusのビルド時間の最適化により、JVMおよびGraalVMベースのコンテナのフットプリントを小さくすることができます。"

#. type: Title ==
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:54
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:57
#, fuzzy
msgid "https://github.com/DataCater/datacater[DataCater GitHub repository^]"
msgstr "link:https://github.com/DataCater/datacater[DataCater GitHubリポジトリ, target=\"_blank\"]"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:57
#, fuzzy
msgid "https://docs.datacater.io[DataCater documentation^]"
msgstr "link:https://docs.datacater.io[DataCaterのドキュメント, target=\"_blank\"]"
