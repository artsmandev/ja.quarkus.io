msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid ""
"This article gives a brief overview of the data streaming platform DataCater, discusses how we moved from Scala Play! and Kafka Streams to Quarkus, and\n"
"presents why we think that Quarkus is an exceptional framework for developing cloud-native Java applications."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid ""
"https://datacater.io[DataCater^] is a real-time, cloud-native data pipeline platform based on Apache Kafka and Kubernetes. It allows users to build streaming data pipelines that stream records between different\n"
"Apache Kafka topics and can apply filters or transforms to the records on the way.\n"
"Given its focus on data scientists and data engineers as target users, DataCater enables users\n"
"to develop transforms in Python. It provides an https://www.loom.com/share/15947f13e71540948e3f9d57eac64976[interactive, UI-based preview of streaming data pipelines^]\n"
"and uses Kubernetes as the runtime for pipeline deployments."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid ""
"DataCater was created in 2020 and initially built its control plane on top of the Scala framework https://www.playframework.com/[Play^] and implemented pipelines with https://kafka.apache.org/documentation/streams/[Kafka Streams^].\n"
"Over time, we experienced the following limitations and issues with the chosen technologies:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid "*Inefficient resource usage:* Kafka Streams applications consume a considerable amount of main memory, making it quite expensive to operate at scale."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid "*Long startup times:* Starting a Kafka Streams application can take up to a few minutes, which has a negative impact on the availability of streaming data pipelines."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid ""
"*Restriction to intra-cluster streaming:* By default, Kafka Streams can only stream data between topics of the same Apache Kafka cluster. When facing use cases that stream data between different Kafka clusters, for instance, between a production and test cluster,\n"
"we had to employ additional tooling, e.g., MirrorMaker 2."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid "*No support for Java 17:* The current Play! version 2.8 does not support running on top of Java 17."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid ""
"In 2022, we rewrote DataCater to implement lots of learnings that we made when working with early users.\n"
"Using this unique opportunity, we also switched from Play! and Kafka Streams to Quarkus,\n"
"thus using Quarkus for implementing both our control plane and the data pipelines."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid ""
"With Quarkus, we are able to bring the best of cloud native and messaging applications together. Streaming messages, especially in the context of Apache Kafka, is still a Java-dominated environment, while the traditional Java stack lacks the characteristics of cloud-native applications, like small footprints, fast startups, and self-containment.\n"
"*-Hakan Lofcali, CTO, DataCater*"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid "*Versatility:* We cannot only implement the API of our control plane with the Quarkus RESTeasy extension but can also employ Quarkus as the base for implementing streaming data pipelines using its https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging^] extension."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid ""
"*Dev services:* Quarkus' dev services help us to spin up dependencies, like PostgreSQL or Apache Kafka, very fast and provide an outstanding developer experience. Our developers can focus on their job instead of\n"
"messing with the configuration of tooling."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid "*Support for native executables:* Quarkus allows us to easily build native executables, which are very beneficial when operating in a cloud context. They require much fewer resources and achieve faster startup times."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
msgid "*Minimal footprint:* Quarkus’ build time optimizations allow for smaller footprints of JVM- and GraalVM-based containers."
msgstr ""

#. type: Title =
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:10
#, fuzzy, no-wrap
msgid "DataCater uses Quarkus to make Data Streaming more accessible"
msgstr "DataCater、Quarkusを使用してデータストリーミングをより身近なものに"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:1
#, fuzzy, no-wrap
msgid "DataCater provides a developer-friendly ETL platform. Learn why it chose Quarkus for its recent rewrite."
msgstr "DataCaterは、開発者向けのETLプラットフォームを提供しています。最近の書き換えにQuarkusを採用した理由をご紹介します。"

#. type: Title ==
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:15
#, fuzzy, no-wrap
msgid "What is DataCater?"
msgstr "DataCaterとは？"

#. type: Title ==
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:23
#, fuzzy, no-wrap
msgid "Why did DataCater choose Quarkus?"
msgstr "DataCaterはなぜQuarkusを選んだのでしょうか？"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:35
#, fuzzy
msgid "Especially the first two issues, inefficient resource usage and long startup times, hurt a lot when operating in the cloud at scale."
msgstr "特に最初の2つの問題、非効率なリソース使用と長い起動時間は、クラウドで大規模に運用する際に大きな痛手となる。"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:47
#, fuzzy
msgid "In the following, we list the main reasons why we chose Quarkus over other Java frameworks:"
msgstr "以下では、他のJavaフレームワークではなく、Quarkusを選択した主な理由を列挙します："

#. type: Title ==
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:54
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:57
#, fuzzy
msgid "https://github.com/DataCater/datacater[DataCater GitHub repository^]"
msgstr "link:https://github.com/DataCater/datacater[DataCater GitHubリポジトリ]"

#. type: Plain text
#: upstream/_posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc:57
#, fuzzy
msgid "https://docs.datacater.io[DataCater documentation^]"
msgstr "link:https://docs.datacater.io[DataCaterのドキュメント]"
