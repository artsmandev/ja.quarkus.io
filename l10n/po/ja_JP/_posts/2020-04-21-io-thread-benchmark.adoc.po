msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#. type: YAML Front Matter: title
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "A IO thread and a worker thread walk into a bar: a microbenchmark story"
msgstr "IOスレッドとワーカースレッドがバーに入る：マイクロベンチマークの話"

#. type: YAML Front Matter: synopsis
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Understand when and how to use the Quarkus IO thread and its influence on microbenchmarks."
msgstr "Quarkus IOスレッドを使用するタイミングや方法、マイクロベンチマークへの影響について理解することができます。"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"A competitor recently published a microbenchmark comparing the performance of their stack to Quarkus.\n"
"The Quarkus team feels this microbenchmark shouldn’t be taken at face value because it wasn’t making a like-to-like comparison leading to incorrect conclusions.\n"
"Both of the two frameworks under comparison support reactive processing.\n"
"Reactive processing enables running the business logic directly on the _IO thread_, which ultimately performs better in microbenchmark focusing on response time and concurrency.\n"
"The microbenchmark should have been written so that both frameworks (or neither framework) obtain this benefit.\n"
"Anyway, this turns out to be a very interesting topic and good information for Quarkus users, so read on."
msgstr "競合他社が最近、自社のスタックとQuarkusのパフォーマンスを比較したマイクロベンチマークを発表しました。Quarkusチームは、このマイクロベンチマークを額面通りに受け取るべきでないと感じています。比較対象の2つのフレームワークはどちらもリアクティブ処理をサポートしています。リアクティブ処理では、ビジネスロジックを _IOスレッド_ 上で直接実行できるため、レスポンスタイムと同時実行性に焦点を当てたマイクロベンチマークでは、最終的にパフォーマンスが向上します。マイクロベンチマークは、両方のフレームワークが（あるいはどちらのフレームワークも）この利点を得られるように書かれるべきでした。とにかく、これは非常に興味深いトピックであり、Quarkusユーザーにとって良い情報であることがわかりました。"

#. type: Title ==
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "tl; dr;"
msgstr "tl; dr；"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"Quarkus https://quarkus.io/blog/runtime-performance/[has great performance] for both imperative and reactive workloads.\n"
"It’s because Quarkus is itself based on Eclipse Vert.x, a mature top performing reactive framework, in such a way that allows you to layer, mix and match the IO paradigm that best fits your use-case."
msgstr "Quarkusは、命令型と反応型の両方のワークロードで link:https://quarkus.io/blog/runtime-performance/[優れたパフォーマンス] を発揮します。Quarkusは、成熟した最高性能のリアクティブフレームワークであるEclipse Vert.xをベースにしているためです。"

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "If you have a REST scenario well suited to run _purely on the IO thread_, add a Vert.x Reactive Route using https://quarkus.io/guides/reactive-routes[Quarkus Reactive Routes] and your app will get better performance than using Quarkus RESTEasy."
msgstr "RESTシナリオを _純粋にIOスレッドで_ 実行するのに適している場合、 link:https://quarkus.io/guides/reactive-routes[Quarkus Reactive Routes] を使用してVert.x Reactive Routeを追加すると、Quarkus RESTEasyを使用するよりもアプリのパフォーマンスが向上します。"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"We ran this low-work REST + validation competitor-written microbenchmark which features no blocking operation, just returning static data.\n"
"When using Quarkus Reactive Routes to run Quarkus _purely on the IO thread_, **we observed 2.6x times the requests/sec and 30% less memory usage (RSS)** than running with Quarkus RESTEasy (which mixes IO thread and worker thread).\n"
"But that’s on a microbenchmark purpose built to this specific scenario (more on that later)."
msgstr "この低作業REST + 検証の競合他社が作成したマイクロベンチマークを実行しました。Quarkus Reactive Routesを使用してQuarkusを _純粋にIOスレッドで_ 実行した場合、Quarkus RESTEasy（IOスレッドとワーカースレッドが混在）を使用した場合よりも、 *リクエスト/秒が2.6倍、メモリ使用量（RSS）が30%少なく* なりました。しかし、これはこの特定のシナリオのために構築されたマイクロベンチマークでの結果です（詳細は後述します）。"

#. type: Title ==
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "More interesting read"
msgstr "より興味深い読み物"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"The microbenchmark itself is uninteresting, but it is a good demonstrator of a phenomenon that can happen in reactive stacks.\n"
"Let’s use it as a vehicle to learn more about Quarkus and its reactive engine."
msgstr "このマイクロベンチマーク自体には興味はありませんが、リアクティブスタックで起こりうる現象の良いデモンストレーションです。Quarkusとそのリアクティブエンジンについてもっと知るための手段として使いましょう。"

#. type: Title ===
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, no-wrap
msgid "Imperative and Reactive: the elevator pitch"
msgstr "命令型とリアクティブ型: エレベーターピッチ"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"This blog post does not explain the fundamental differences between the imperative execution model and the reactive execution model.\n"
"However, to understand why we see so much difference in the mentioned microbenchmark, we need some notions."
msgstr "このブログ記事では、命令型実行モデルと反応型実行モデルの根本的な違いについては説明しません。しかし、言及したマイクロベンチマークでなぜこれほどの違いが見られるのかを理解するためには、いくつかの概念が必要です。"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"In general, Java web applications use imperative programming combined with blocking IO operations.\n"
"This is incredibly popular because it is easier to reason about the code.\n"
"_Things_ get executed sequentially.\n"
"To make sure one request is not affected by another, they are run on different threads.\n"
"When your workload needs to interact with a database or another remote service, it relies on blocking IO.\n"
"The thread is blocked waiting for the answer.\n"
"Other requests running on different threads are not slowed down significantly.\n"
"But this means one thread for every concurrent request, which limits the overall concurrency."
msgstr "一般的に、Javaウェブ・アプリケーションでは、命令型プログラミングとブロッキングIO操作を組み合わせて使用します。これは、コードを推論するのが簡単なので、非常に人気があります。 _物事は_ 順番に実行されます。あるリクエストが別のリクエストの影響を受けないようにするために、リクエストは別々のスレッドで実行されます。ワークロードがデータベースや他のリモートサービスとやり取りする必要がある場合、ブロッキングIOに依存します。スレッドは応答を待ってブロックされます。別のスレッドで実行されている他のリクエストは、大幅に遅くなることはありません。しかし、これは同時リクエストごとに1つのスレッドが必要ということであり、 全体的な同時性が制限されます。"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"On the other side, the reactive execution model embraces asynchronous development models and non blocking IOs.\n"
"With this model, multiple requests can be handled by the same thread.\n"
"When the processing of a request cannot make progress anymore (because it requests a remote service, or interacts with a database), it uses non blocking IO.\n"
"This releases the thread immediately, which can then be used to serve another request.\n"
"When the result of the IO operation is available, the processing of the request is restored and continues its execution.\n"
"This model enables the usage of the _IO thread_ to handle multiple requests.\n"
"There are two significant benefits.\n"
"First, the response time is smaller because it does not have to jump to another thread.\n"
"Second, it reduces memory consumption as it decreases the usage of threads.\n"
"The reactive model uses the hardware resources more efficiently, but... there is a significant drawback.\n"
"If the processing of a request starts to block, this gets real bad.\n"
"No other request can be handled.\n"
"To avoid this, you need to learn how to write non blocking code, how to structure asynchronous processing, and how to use non blocking IOs.\n"
"It's a paradigm shift."
msgstr "一方、リアクティブ実行モデルは、非同期開発モデルとノンブロッキングIOを採用しています。このモデルでは、複数のリクエストを同じスレッドで処理することができます。リクエストの処理がこれ以上進まないとき（リモートサービスを要求したり、データベースとやりとりしたりするため）、ノンブロッキングIOを使います。これによってスレッドはすぐに解放され、別のリクエストに対応できるようになります。IO 操作の結果が利用可能になると、リクエストの処理はリストアされ、実行が続行されます。このモデルにより、 _IOスレッドを使って_ 複数のリクエストを処理することができます。2つの大きな利点があります。第一に、他のスレッドにジャンプする必要がないため、応答時間が短くなります。第二に、スレッドの使用量が減るため、メモリ消費量が減ります。リアクティブ・モデルはハードウェア・リソースをより効率的に使いますが、 重大な欠点があります。リクエストの処理がブロックされ始めると、これは本当にまずいことになります。他のリクエストを処理できなくなります。これを避けるには、ブロッキングしないコードの書き方、非同期処理の構造、ブロッキングしないIOの使い方を学ぶ必要があります。これはパラダイムシフトです。"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"In Quarkus, we want to make the shift as easy as possible.\n"
"However, we have observed that the majority of user applications are written using the imperative model.\n"
"That is why, when the user application uses JAX-RS, Quarkus defaults to execute the (imperative) workload to a _worker thread_."
msgstr "Quarkusでは、この移行をできるだけ簡単にしたいと考えています。しかし、ユーザーアプリケーションの大半は命令型モデルで記述されていることが確認されています。そのため、ユーザーアプリケーションがJAX-RSを使用する場合、Quarkusはデフォルトで _ワーカースレッドに_ （命令型の）ワークロードを実行します。"

#. type: Title ===
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Hello world microbenchmark: IO thread or worker thread?"
msgstr "Hello world マイクロベンチマーク：IOスレッドかワーカースレッドか？"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"Back to the competitor’s microbenchmark, we have a REST endpoint doing some trivial processing and some equally trivial validation.\n"
"Pretty much no meaningful business work.\n"
"This is the Hello World of REST for all intents and purposes."
msgstr "競合のマイクロベンチマークに話を戻すと、RESTエンドポイントが些細な処理と同じく些細な検証を行っています。ほとんど意味のない業務です。これはどう見てもRESTのHello Worldです。"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"When you run the microbenchmark with Quarkus RESTEasy, the request is handled by the reactive engine on the _IO thread_ but then the processing work is handed over to a second thread from the _worker thread pool_.\n"
"That’s called _dispatch_.\n"
"When your microbenchmark does as little as Hello World, then the dispatch overhead is proportionally big.\n"
"The dispatch overhead is not visible in most (real life) applications but is very visible in artificial constructs like microbenchmarks."
msgstr "Quarkus RESTEasyでマイクロベンチマークを実行すると、リクエストは _IOスレッド_ 上のリアクティブエンジンで処理されますが、処理作業は _ワーカースレッドプールから_ 2番目のスレッドに渡されます。これを _ディスパッチと_ 呼びます。マイクロベンチマークが Hello World のような小さな処理を行う場合、ディスパッチのオーバーヘッドはそれに比例して大きくなります。ディスパッチオーバーヘッドはほとんどの（現実の）アプリケーションでは見えませんが、マイクロベンチマークのような人工的な構成では非常によく見えます。"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"The competitor’s stack, however, runs all the request operations on the IO thread by default.\n"
"So what this microbenchmark was actually comparing is just the cost of dispatching to the worker thread pool.\n"
"And frankly (according to the competitor's numbers) and in spite of this extra dispatch work, Quarkus did very very well achieving ~95% of the competitor’s throughput today!  I say today because we are always improving upon performance, and in fact we expect to see further gains in the soon to be released 1.4 release."
msgstr "しかし、競合他社のスタックは、デフォルトですべてのリクエスト処理をIOスレッドで実行します。つまり、このマイクロベンチマークが実際に比較しているのは、ワーカースレッドプールへのディスパッチコストだけです。そして率直に言って（競合の数字によると）、この余分なディスパッチ作業にもかかわらず、Quarkusは今日、競合のスループットの95%を達成しました！というのも、Quarkusは常にパフォーマンスを向上させており、間もなくリリースされる1.4リリースではさらなる向上が見込まれるからです。"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "*When compared at a disadvantage (dispatching to a worker thread), Quarkus is nevertheless almost as fast in throughput.*"
msgstr "*不利な条件（ワーカースレッドへのディスパッチ）で比較すると、それでもQuarkusのスループットはほぼ同等です。*"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"… But wait, Quarkus can also avoid the dispatch altogether and run operations on the IO Thread.\n"
"This is a more accurate comparison to how the competitor' stack was configured to do as in both case, it is the user's responsibility to ask for a dispatch if and when needed by the application.\n"
"To compare apples to apples, let’s use https://quarkus.io/guides/reactive-routes[Quarkus Reactive Routes] backed by Eclipse Vert.x.\n"
"In this model, operations are run on the IO thread by default."
msgstr "...しかし、Quarkusはディスパッチを完全に回避し、IOスレッド上で処理を実行することもできます。どちらの場合も、アプリケーションが必要なときにディスパッチを要求するのはユーザーの責任です。このモデルでは、操作はデフォルトでIOスレッドで実行されます。"

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "This is not very different from your JAX-RS equivalent."
msgstr "これはJAX-RSに相当するものと大差はありません。"

#. type: Title ===
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Throughput Numbers"
msgstr "スループット数"

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "We ran the microbenchmark application in a docker container constrained to reflect a typical resource allocation to a container orchestrated by Kubernetes:"
msgstr "Kubernetesでオーケストレーションされたコンテナへの典型的なリソース割り当てを反映するように制約されたDockerコンテナで、マイクロベンチマークアプリケーションを実行しました："

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "4 CPU"
msgstr "4 CPU"

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "256 MB of RAM"
msgstr "256 MBのRAM"

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "and `-Xmx128m` heap usage for the Java process"
msgstr "と `-Xmx128m` Javaプロセスのヒープ使用率"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"We saw that Quarkus using Reactive Routes ran 2.6 times the requests/sec.\n"
"2.6 times!\n"
"It makes sense! Remember the application code virtually does nothing, so the dispatch cost is comparatively high.\n"
"If you were to write a more real life workload (maybe even having a blocking operation like a JPA access and therefore forcing a dispatch), then the results would be very different.\n"
"Context matters!"
msgstr "Reactive Routesを使用したQuarkusでは、リクエスト/秒が2.6倍になりました。2.6倍！これは理にかなっています！アプリケーションコードは事実上何もしないので、ディスパッチコストが比較的高いことを思い出してください。もっと現実的なワークロードを書くとしたら（JPAアクセスのようなブロッキング操作でディスパッチさせるとか）、結果は大きく異なるでしょう。コンテキストは重要です！"

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "You can find code and how to reproduce the microbenchmark https://github.com/johnaohara/quarkus-iothread-workerpool/tree/1.3.1.Final[here on GitHub]."
msgstr "マイクロベンチマークのコードと再現方法は、 link:https://github.com/johnaohara/quarkus-iothread-workerpool/tree/1.3.1.Final[GitHub] のこちらに掲載されています。"

#. type: Block title
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Microbenchmark results comparing Quarkus dispatching to a worker thread vs running purely on the IO thread"
msgstr "Quarkusがワーカースレッドにディスパッチする場合と、純粋にIOスレッドで実行する場合を比較したマイクロベンチマークの結果"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Quarkus - 1.3.1.Final - 4 CPU's"
msgstr "Quarkus - 1.3.1.Final - 4CPU"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, no-wrap
msgid "Worker thread"
msgstr "ワーカースレッド"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "IO thread"
msgstr "IOスレッド"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Ratio"
msgstr "比率"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Mean Start Time to First Request (ms) footnote:[‘Mean Start Time to First Request’ was measured using an application built as an UberJar]"
msgstr "最初のリクエストまでの平均開始時間（ms）[ link:[1］, id=\"_footnoteref_1\", class=\"footnote\", href=\"#_footnotedef_1\", title=\"View footnote.\"]"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "993.9"
msgstr "993.9"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "868.3"
msgstr "868.3"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "87.4%"
msgstr "87.4%"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Max RSS (MB)"
msgstr "最大RSS数(MB)"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "138.8"
msgstr "138.8"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "97.9"
msgstr "97.9"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "70.5%"
msgstr "70.5%"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Max Throughput (req/sec)"
msgstr "最大スループット（req/sec）"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "46,172.2"
msgstr "46,172.2"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "123,520.4"
msgstr "123,520.4"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "267.5%"
msgstr "267.5%"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Max Req/Sec/MB"
msgstr "最大Req/秒/MB"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "332.7"
msgstr "332.7"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "1,262.1"
msgstr "1,262.1"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "379.4%"
msgstr "379.4%"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "*In a fair comparison (purely remaining on the IO thread - no dispatch), Quarkus more than double its throughput.*"
msgstr "*公正な比較（純粋にIOスレッドにとどまり、ディスパッチなし）では、Quarkusのスループットは2倍以上です。*"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"As the generated load tends towards the maximum throughput of the system under test, the response time experienced by the client increases exponentially.\n"
"So the best system (for the workload) has a vertical line as far to the right as possible.\n"
"Equally important is to have as flat a line as possible for the longest time.\n"
"You do not want the response time to degrade before the system reaches maximum throughput."
msgstr "生成された負荷がテスト対象システムの最大スループットに向かうにつれ、クライアントが経験する応答時間は指数関数的に増加します。そのため、（作業負荷に対して）最良のシステムは、垂直線ができるだけ右側にあります。同様に重要なのは、できるだけ長い時間平坦な線を描くことです。システムが最大スループットに達する前にレスポンスタイムが低下することは避けたいものです。"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"By the way, in the competitor microbenchmark Quarkus is shown as consuming more RSS (more RAM).This is also explained by the worker thread pool being operated whereas the competitor did not have a worker thread pool.\n"
"The Quarkus Reactive Routes solution (on a pure IO event run) shows a 30% RSS usage reduction."
msgstr "ちなみに、競合他社のマイクロベンチマークでは、Quarkusの方がRSSを多く消費しています（RAMが多い）。これは、競合他社にはワーカースレッドプールがないのに対し、Quarkusではワーカースレッドプールが稼働していることでも説明できます。Quarkus Reactive Routesソリューション（純粋なIOイベント実行）では、RSS使用量が30%削減されています。"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"In this graph, the lower, the better.\n"
"We see that the pure IO thread solution manages to increase throughput with little to no change to the memory usage (RSS), that's very good!"
msgstr "このグラフでは、低いほど優れています。純粋なIOスレッドソリューションは、メモリ使用量（RSS）にほとんど変化を与えることなく、スループットを向上させることに成功していることがわかります！"

#. type: Title ==
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"Quarkus offers you the ability to safely run blocking operations, run non blocking operations on the IO thread or mix both models.\n"
"The Quarkus team takes performance very seriously and we see Quarkus as offering great numbers whether you use the imperative or reactive models.\n"
"In more realistic workloads, the dispatch cost would be much less significant, you would not see such drastic differences between the two approaches.\n"
"As usual, test as close to your real application as possible."
msgstr "Quarkusでは、ブロッキング処理を安全に実行したり、IOスレッドでノンブロッキング処理を実行したり、両方のモデルをミックスしたりすることができます。Quarkusチームはパフォーマンスを非常に重要視しており、Quarkusは命令型モデルであれ反応型モデルであれ、優れた数値を提供すると考えています。より現実的なワークロードでは、ディスパッチコストはそれほど大きくなく、2つのアプローチの間に劇的な違いは見られないでしょう。いつものように、できるだけ実際のアプリケーションに近い形でテストしてください。"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"Mystery solved.\n"
"Benchmarks are hard, challenge them.\n"
"But the moral of the story is that in all bad comes some good.\n"
"We’ve now learned how to run Quarkus applications entirely on the IO thread.\n"
"And how in some situations that can make a big difference.\n"
"Remember, don’t block! In fact, Quarkus https://quarkus.io/guides/all-config#quarkus-vertx-core_quarkus.vertx.warning-exception-time[can warn you if you do so].\n"
"Oh and we also learned that Quarkus is so fast, it can even beat itself ;p"
msgstr "謎が解けました。ベンチマークは難しい。しかし、この話の教訓は、悪いことには良いこともあるということです。Quarkusアプリケーションを完全にIOスレッドで実行する方法を学びました。そして状況によっては、それが大きな違いを生むこともあります。ブロックしないことを忘れないでください！実際、ブロックするとQuarkusから link:https://quarkus.io/guides/all-config#quarkus-vertx-core_quarkus.vertx.warning-exception-time[警告] が出ます。また、Quarkusはとても速く、自分自身を打ち負かすことさえできることも学びました。"
