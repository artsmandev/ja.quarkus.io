# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-20 11:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:1
#, fuzzy, no-wrap
msgid "abattagl"
msgstr "アバタグラー"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:1
#, fuzzy, no-wrap
msgid "2020-11-02"
msgstr "2020-11-02"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:1
#, fuzzy, no-wrap
msgid "Running a Quarkus native app inside a container on a Raspberry Pi"
msgstr "Raspberry Pi上のコンテナ内でQuarkusネイティブアプリを実行する。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:1
#, fuzzy, no-wrap
msgid "armv8 arm raspberrypi native"
msgstr "armv8 arm raspberrypi native"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:1
#, fuzzy, no-wrap
msgid "Quarkus native running on a Raspberry Pi"
msgstr "Raspberry Pi上で動作するQuarkusネイティブ。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:11
#, fuzzy
msgid "## Intro"
msgstr "イントロ\n"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:14
#, fuzzy
msgid "When I've been introduced to Quarkus, back in December 2018, I suddenly had the feeling the Quarkus runtime has the potential of covering ~95% of the software use-cases.  My friend Sanne demoed Quarkus on his laptop when the runtime was still in an alpha state, far from being the large, extended and mature framework everybody knows nowadays. And still, I could experience a new way of think, implement and deploy java apps."
msgstr "2018年12月にQuarkusを紹介されたとき、私は突然、Quarkusランタイムがソフトウェアのユースケースの~95%をカバーする可能性を持っていると感じました。友人のSanneがラップトップでQuarkusのデモを行ったのは、ランタイムがまだアルファ版の状態で、現在誰もが知っているような大規模で拡張され成熟したフレームワークにはほど遠い状態でした。それでも私は、Javaアプリケーションを考え、実装し、デプロイする新しい方法を体験することができました。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:16
#, fuzzy
msgid "I’ve been recently working on a Hackfest for Red Hat EMEA partners to spread awareness about the potential and the performance of the Quarkus framework. My main technical goal was to demonstrate Quarkus can run everywhere and thanks to its performance capabilities coming from the native compilation process it definitely is the runtime of choice for IoT devices (a.k.a. Far Edge)."
msgstr "私は最近、Quarkusフレームワークの可能性とパフォーマンスについての認識を広めるために、Red Hat EMEAパートナー向けのHackfestに取り組んでいます。私の主な技術的目標は、Quarkusがあらゆる場所で動作することを実証することであり、ネイティブコンパイル処理によるパフォーマンス能力のおかげで、IoTデバイス（別名：ファーエッジ）に最適なランタイムであることは間違いありません。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:18
#, fuzzy
msgid "To achieve the above goal, I’ve picked up a single-board computer with an integrated ARM-compatible central processing unit and made a Quarkus native app running into a container on top of a Linux based operating system. Here is how:"
msgstr "上記の目標を達成するために、私はARM互換の中央処理装置を内蔵したシングルボードコンピュータを手に入れ、Linuxベースのオペレーティングシステムの上でコンテナ内で動作するQuarkusネイティブアプリを作成しました。以下はその方法です："

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:20
#, fuzzy
msgid "## Prerequisites"
msgstr "前提条件\n"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:22
#, fuzzy, no-wrap
msgid "*Single-board computer:* The ARM-compatible CPU integrated into the single-board computer must support 64-bit mode. \n"
msgstr "*シングルボードコンピュータであること： *シングルボードコンピュータに内蔵されるARM対応CPUは、64ビットモードに対応している必要があります。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:24
#, fuzzy, no-wrap
msgid "*Operating system:* \n"
msgstr "*オペレーティングシステムです：*"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:25
#, fuzzy, no-wrap
msgid "To make a Quarkus native container image run in a container, a 64-bit Linux OS is required;\n"
msgstr "Quarkusのネイティブコンテナイメージをコンテナ内で動作させるためには、64ビットLinux OSが必要です；"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:27
#, fuzzy
msgid "The OS must support aarch64 CPUs, which leads us to the need for an aarch64-base distribution available for that OS;"
msgstr "OSはaarch64のCPUをサポートする必要があり、そのOSで利用可能なaarch64ベースのディストリビューションが必要であることにつながる；"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:29
#, fuzzy
msgid "Nice to have: the target OS should fully support the target single-board computer.**"
msgstr "Nice to have: ターゲットOSは、ターゲットシングルボードコンピュータを完全にサポートしている必要があります**。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:31
#, fuzzy, no-wrap
msgid "*Container technology:* surprise, surprise! an OCI standard container engine is compulsory to run containers on Linux :-)\n"
msgstr "*コンテナ技術： *なんと、Linux上でコンテナを動かすには、OCI標準のコンテナエンジンが必須です :-)"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:33
#, fuzzy, no-wrap
msgid "*Build tools:* as per the large amount of resources required by the GraalVM to compile Quarkus in native mode, an additional we need an ARM server / Virtual machine to achieve that goal. The server should meet the following minimum requirements: \n"
msgstr "*ビルドツール： *ネイティブモードでQuarkusをコンパイルするためにGraalVMが必要とする大量のリソースと同様に、その目標を達成するためにARMサーバー/仮想マシンが追加で必要です。サーバーは、以下の最小要件を満たす必要があります："

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:34
#, fuzzy, no-wrap
msgid "CPU: same ARM model as the one embedded in the target single-board computer\n"
msgstr "CPU：対象のシングルボードコンピュータに内蔵されているものと同じARMモデル"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:35
#, fuzzy, no-wrap
msgid "Cores: 4\n"
msgstr "コアを使用します：4"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:36
#, fuzzy, no-wrap
msgid "Ram: 8Gb\n"
msgstr "ラム：8Gb"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:37
#, fuzzy, no-wrap
msgid "Disk space: 20Gb\n"
msgstr "ディスク容量：20Gb"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:39
#, fuzzy, no-wrap
msgid "*Container registry:* In order to be able to deploy onto the single-board computer the container image containing the Quarkus native app built in the ARM server, an account on a remote container registry is required.\n"
msgstr "*コンテナレジストリ： *ARMサーバーで構築されたQuarkusネイティブアプリを含むコンテナイメージをシングルボードコンピューターに展開するためには、リモートコンテナレジストリのアカウントが必要です。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:45
#, fuzzy
msgid "## Technology"
msgstr "技術情報\n"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:47
#, fuzzy
msgid "### Single-sensor board"
msgstr "シングルセンサーボード"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:49
#, fuzzy
msgid "Choosing the target single-board computer model has been quite an easy task: I already had a Raspberry Pi meeting the requirements above:"
msgstr "すでに上記の条件を満たすRaspberry Piを持っていたので、ターゲットとなるシングルボードコンピュータの機種を選ぶのは非常に簡単だった："

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:51
#, fuzzy
msgid "_Model:_ Raspberry Pi 3 B+"
msgstr "_モデルです： _Raspberry Pi 3 B+"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:52
#, fuzzy
msgid "_SOC:_ Broadcom BCM2837B0, Cortex-A53 (ARMv8) 64-bit SoC"
msgstr "_SOC：Broadcom _BCM2837B0、Cortex-A53（ARMv8）64ビットSoC"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:53
#, fuzzy
msgid "_CPU:_ 1.4GHz 64-bit quad-core ARM Cortex-A53 CPU"
msgstr "_CPUです： _1.4GHz 64ビット クアッドコア ARM Cortex-A53 CPU"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:54
#, fuzzy
msgid "_RAM:_ 1GB LPDDR2 SDRAM"
msgstr "_ラム： _1GB LPDDR2 SDRAM"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:55
#, fuzzy
msgid "_WIFI:_ Dual-band 802.11ac wireless LAN (2.4GHz and 5GHz ) and Bluetooth 4.2"
msgstr "_WIFIを搭載： _デュアルバンド802.11ac無線LAN（2.4GHz、5GHz ）、Bluetooth 4.2"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:56
#, fuzzy
msgid "_Ethernet:_ Gigabit Ethernet over USB 2.0 (max 300 Mbps). Power-over-Ethernet support (with separate PoE HAT). Improved PXE network and USB mass-storage booting."
msgstr "_Ethernetです： _Gigabit Ethernet over USB 2.0（最大300Mbps）。Power-over-Ethernet 対応（別途 PoE HAT を使用）。PXEネットワークおよびUSBマスストレージブートの改善"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:57
#, fuzzy
msgid "_Thermal management:_ Yes"
msgstr "_サーマルマネージメント： _あり"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:58
#, fuzzy
msgid "_Video:_ Yes – VideoCore IV 3D. Full-size HDMI"
msgstr "_動画です： _あり - VideoCore IV 3D。フルサイズHDMI"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:59
#, fuzzy
msgid "_Audio:_ Yes"
msgstr "_オーディオ _はい"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:60
#, fuzzy
msgid "_USB 2.0:_ 4 ports"
msgstr "_USB 2.0： _4ポート"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:61
#, fuzzy
msgid "_GPIO:_ 40-pin"
msgstr "_GPIO： _40ピン"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:62
#, fuzzy
msgid "_Power:_ 5V/2.5A DC power input"
msgstr "_電源： _5V/2.5A DC電源入力"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:63
#, fuzzy
msgid "_Operating system support:_ Linux and Unix"
msgstr "_オペレーティングシステムに対応しています： _Linux、Unix"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:65
#, fuzzy
msgid "### OS"
msgstr "OS"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:68
#, fuzzy
msgid "I’ve tried a few operating system meeting the requirements listed above. The two possible solutions were Fedora Internet of Things Edition and Gentoo.  After some tests, I’ve picked up https://iot.fedoraproject.org/[Fedora IoT] for the following reasons:"
msgstr "上記の要件を満たすOSをいくつか試しました。その結果、Fedora Internet of Things EditionとGentooの2つが候補となりました。いくつかのテストの後、私は以下の理由で link:https://iot.fedoraproject.org/[Fedora IoTを] 選びました："

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:70
#, fuzzy
msgid "Full, native support to 64-bit architecture (aarch64)"
msgstr "64ビットアーキテクチャ（aarch64）をフルネイティブでサポートしています。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:71
#, fuzzy
msgid "Stability"
msgstr "ユーザービリティー"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:72
msgid "Usability"
msgstr "ユーザービリティー"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:73
#, fuzzy
msgid "Maturity"
msgstr "成熟度"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:74
#, fuzzy
msgid "Lifecycle"
msgstr "ライフサイクル（Lifecycle"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:75
#, fuzzy
msgid "Full support on RPi 3 B+"
msgstr "RPi 3 B+でフルサポート"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:77
#, fuzzy
msgid "### Container technology"
msgstr "コンテナ技術"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:79
#, fuzzy
msgid "This one has been an easy task as well: https://podman.io/[Podman]. Podman is a daemonless container engine for developing, managing, and running OCI Containers on your Linux System. Containers can either be run as root or in rootless mode. Moreover, there’s no need for installing additional components/layers to Fedora IoT basic installation as the Podman container engine is already available in the OS distribution."
msgstr "こちらも楽勝でしたね： link:https://podman.io/[Podman] です。Podmanは、Linuxシステム上でOCIコンテナを開発、管理、実行するためのデーモンレスコンテナエンジンです。コンテナはrootで実行することも、rootlessモードで実行することもできます。さらに、PodmanコンテナエンジンはOSディストリビューションですでに利用可能であるため、Fedora IoTの基本インストールに追加のコンポーネント/レイヤーをインストールする必要はありません。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:82
#, fuzzy
msgid "Moreover, from a deeper technical perspective, due to the fact cgroups on fedora is now v2 using Docker would force you to appy several tweeks and to downgrade the cgroups versio to v1 in order to avoid getting warning and eventually failures."
msgstr "また、より深い技術的な観点から、Fedora上のcgroupsが現在v2であるため、Dockerを使用すると、警告や最終的な失敗を避けるために、いくつかの調整とcgroupsのバージョンをv1にダウングレードすることを強いられます。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:85
#, fuzzy
msgid "The reason why Podman is the contained of choice is very well explained in the following https://podman.io/blogs/2019/10/29/podman-crun-f31.html[article].  I'm quoting the quick explanation:"
msgstr "Podmanが選ばれる理由は、以下の link:https://podman.io/blogs/2019/10/29/podman-crun-f31.html[記事で] とてもよく説明されています。早速、説明を引用します："

#. type: Positional ($2) AttributeList argument for style 'quote'
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:86
#, fuzzy, no-wrap
msgid "Rūmī"
msgstr "るーみー"

#. type: delimited block _
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:89
#, fuzzy
msgid "The crun command is the runtime the allows for cgroup V2 support and is supplied starting with Fedora 31. Other container systems use the runc runtime. However, runc only supports cgroup V1. The cgroup kernel feature allows you to allocate resources such as CPU time, network bandwidth and system memory to a container. Version 1 of cgroup only supports containers that are run by root, while version 2 supports containers that are run by root or a non-privileged user."
msgstr "crunコマンドは、cgroup V2のサポートを可能にするランタイムであり、Fedora 31から提供されています。他のコンテナシステムはruncランタイムを使用します。しかし、runcはcgroup V1しかサポートしていません。cgroupカーネル機能は、CPU時間、ネットワーク帯域幅、システムメモリなどのリソースをコンテナに割り当てることができます。cgroupのバージョン1は、rootによって実行されるコンテナのみをサポートし、バージョン2は、rootまたは非特権ユーザーによって実行されるコンテナをサポートします。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:92
#, fuzzy
msgid "The output from the command \"podman info\" on the RPi related to the OCI runtime is the following:"
msgstr "OCIランタイムに関連するRPiのコマンド「podman info」からの出力は以下の通りです："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:105
#, no-wrap
msgid ""
"...\n"
"ociRuntime:\n"
"    name: crun\n"
"    package: crun-0.14.1-4.fc32.aarch64\n"
"    path: /usr/bin/crun\n"
"    version: |-\n"
"      crun version 0.14.1\n"
"      commit: 598ea5e192ca12d4f6378217d3ab1415efeddefa\n"
"      spec: 1.0.0\n"
"      +SYSTEMD +SELINUX +APPARMOR +CAP +SECCOMP +EBPF +YAJL\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:108
#, fuzzy
msgid "Meaning the Podman version already included in Fedora IoT 31 and later fully supports cgroup v2 thanks to the fact it uses \"crun\" runtime rather than the classic \"runc\" runtime, embedded in the other linux distributions and in the fedora releases before v31."
msgstr "つまり、Fedora IoT 31以降に含まれているPodmanバージョンは、他のLinuxディストリビューションやv31以前のFedoraリリースに組み込まれている古典的な「runc」ランタイムではなく、「crun」ランタイムを使用しているので、cgroup v2に完全に対応しています。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:110
#, fuzzy
msgid "### Build tools"
msgstr "ビルドツール"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:112
#, fuzzy
msgid "There are multiple ways of provisioning an aarch64 server shipped with enough resources to build quarkus in native mode nowadays:"
msgstr "現在では、ネイティブモードでquarkusを構築するのに十分なリソースを備えたaarch64サーバーをプロビジョニングする方法が複数あります："

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:114
#, fuzzy
msgid "Spend a reasonable, but not small, budget to purchase a physical ARM server (don’t do this at home);"
msgstr "適度な、しかし小さくない予算を使って、物理的なARMサーバーを購入する（自宅ではやらないでください）；"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:115
#, fuzzy
msgid "Spend a very small budget to provision an ARM VM on the public cloud (fastest, recommended if you are not running a Linux os on your host);"
msgstr "非常に少ない予算で、パブリッククラウド上にARM VMをプロビジョニングします（最速、ホスト上でLinux OSを実行していない場合に推奨）；"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:116
#, fuzzy
msgid "Provision a VM on your host machine using QEmu (cheapest);"
msgstr "QEmu（格安）を使って、ホストマシンにVMをプロビジョニングします；"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:117
#, fuzzy
msgid "__Run QEmu within a container, emulating the quarkus container images (still under investigation and tests)__."
msgstr "_QEmuをコンテナ内で実行し、quarkusコンテナイメージをエミュレートする（まだ調査・テスト中） _。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:119
#, fuzzy
msgid "As I’m running Fedora Workstation on my desktop, I’ve picked up the 3rd option."
msgstr "デスクトップでFedora Workstationを動かしているので、3番目の選択肢をピックアップしてみました。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:122
#, fuzzy
msgid "### Container registry The remote container registry of choice is https://quay.io/[Quay.io]. More details about setting up the account created on quay.io will be shared in a dedicated section of this article."
msgstr "コンテナレジストリ リモートコンテナレジストリは link:https://quay.io/[Quay.] ioを選択します。quay.ioで作成したアカウントの設定についての詳細は、本記事の専用セクションで共有される予定です。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:129
#, fuzzy
msgid "## Implementation"
msgstr "インプリメンテーション\n"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:131
#, fuzzy
msgid "This section will guide you through the following"
msgstr "このセクションでは、以下のことをご案内します。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:133
#, fuzzy
msgid "Setting up the VM"
msgstr "VMのセットアップ"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:134
#, fuzzy
msgid "Setting up the RPi and Fedora IoT"
msgstr "RPiとFedora IoTのセットアップ"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:135
#, fuzzy
msgid "Connecting the container engine to the quay.io account"
msgstr "コンテナエンジンとquay.ioのアカウントとの接続"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:136
#, fuzzy
msgid "Compiling and deploying your Quarkus native app on Podman"
msgstr "QuarkusネイティブアプリをPodmanでコンパイルしてデプロイする"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:137
#, fuzzy
msgid "Outcome"
msgstr "アウトカム"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:143
#, fuzzy
msgid "## 1. Setting up the VM"
msgstr "1.VMのセットアップ\n"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:146
#, fuzzy
msgid "This goal can be achieved using VM technology based on QEmu.  QEmu plays an important role in this task, cause that’s the best upstream tool to use to make a virtual machine emulating the target cpu architecture."
msgstr "この目標は、QEmuをベースとしたVMテクノロジーを使って達成することができます。QEmuはこのタスクで重要な役割を果たします。なぜなら、QEmuはターゲットCPUアーキテクチャをエミュレートする仮想マシンを作るために使用する最高のアップストリームツールなのです。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:148
#, fuzzy
msgid "### Setup a Virtual machine using QEmu"
msgstr "QEmuを使った仮想マシンのセットアップ"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:150
#, fuzzy
msgid "On a linux distro, the use of VMM (Virtual Machine Manager is highly recommended):"
msgstr "Linuxの場合、VMM（Virtual Machine Manager）の利用を強く推奨します："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:155
#, no-wrap
msgid ""
"$ sudo dnf groupinstall virtualization\n"
"$ sudo dnf install qemu-system-aarch64\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:158
#, fuzzy
msgid "The minimum requirements for the virtual machine are the following:"
msgstr "仮想マシンの最低要件は以下の通りです："

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:160
#, fuzzy
msgid "CPU: 4 cores *Cortex-A53* (ARMv8) 64-bit"
msgstr "CPUを搭載しています：4コア *Cortex-A53 *(ARMv8) 64ビット"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:161
#, fuzzy
msgid "RAM: 8 GB"
msgstr "RAM：8GB"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:162
#, fuzzy
msgid "Disk: 10Gb"
msgstr "ディスク：10Gb"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:163
#, fuzzy
msgid "Networking: bridge"
msgstr "ネットワーキング：ブリッジ"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:164
#, fuzzy
msgid "OS: Fedora Minimal (latest stable) - aarch64 (https://download.fedoraproject.org/pub/fedora-secondary/releases/32/Spins/aarch64/images/Fedora-Minimal-32-1.6.aarch64.raw.xz[link])"
msgstr "OSFedora Minimal (最新の安定版) - aarch64 link:https://download.fedoraproject.org/pub/fedora-secondary/releases/32/Spins/aarch64/images/Fedora-Minimal-32-1.6.aarch64.raw.xz[(リンク] )"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:165
#, fuzzy
msgid "Runtime: GraalVM (latest) - aarch64 (https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.2.0/graalvm-ce-java11-linux-aarch64-20.2.0.tar.gz[link])"
msgstr "ランタイムGraalVM (最新) - aarch64 link:https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.2.0/graalvm-ce-java11-linux-aarch64-20.2.0.tar.gz[(リンク] )"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:167
#, fuzzy
msgid "image:/assets/images/posts/quarkus-native-on-a-raspberry-pi/vm-cpu-config.png[width=100%]"
msgstr "image:/assets/images/posts/quarkus-native-on-a-raspberry-pi/vm-cpu-config.png[alt=\"vm cpu config\", width=\"100%\"]"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:169
#, fuzzy
msgid "As a side note, please consider increasing the disk sizing of the VM in case you want to reuse it for additional builds and tests."
msgstr "なお、VMを再利用してビルドやテストを行う場合は、VMのディスクサイズを大きくすることをご検討ください。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:171
#, fuzzy
msgid "### Setup the GraalVM environment"
msgstr "GraalVM環境のセットアップ"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:173
#, fuzzy
msgid "On your VM, you will need GCC, and the glibc and zlib headers. Examples for common distributions:"
msgstr "VM上では、GCCと、glibcとzlibのヘッダーが必要です。一般的なディストリビューションでの例"

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:177
#, no-wrap
msgid "$ sudo dnf install gcc glibc-devel zlib-devel libstdc++-static\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:180
#, fuzzy
msgid "Install OpenJdk:"
msgstr "OpenJdkをインストールします："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:184
#, no-wrap
msgid "$ sudo dnf install -y java-11-openjdk\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:188
#, fuzzy
msgid "Download the latest version of graalvm for your architecture (aarch64) from https://github.com/graalvm/graalvm-ce-builds/releases[here] and unpack it.  Detailed instructions https://www.graalvm.org/docs/getting-started-with-graalvm/linux/[here]."
msgstr "link:https://github.com/graalvm/graalvm-ce-builds/releases[こちらから] 、お使いのアーキテクチャ（aarch64）に対応した最新版のgraalvmをダウンロードし、解凍してください。詳しい手順は link:https://www.graalvm.org/docs/getting-started-with-graalvm/linux/[こちら] 。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:190
#, fuzzy
msgid "Move the graalvm content into /usr/lib/graalvm and set the environment variables adding the following code snippet into /etc/profile:"
msgstr "graalvmの内容を/usr/lib/graalvmに移動し、/etc/profileに以下のコードを追加して、環境変数を設定します："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:203
#, no-wrap
msgid ""
"#JAVA_HOME\n"
"JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.6.10-0.fc32.aarch64\n"
"PATH=$PATH:$HOME/bin:$JAVA_HOME/bin\n"
"export JAVA_HOME\n"
"export PATH\n"
"#GRAALVM_HOME\n"
"GRAALVM_HOME=/usr/lib/graalvm/graalvm-ce-java11-19.3.1\n"
"PATH=$PATH:$HOME/bin:$GRAALVM_HOME/bin\n"
"export GRAALVM_HOME\n"
"export PATH\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:208
#, no-wrap
msgid ""
"(Optional) Set the JAVA_HOME environment variable to the GraalVM installation directory.\n"
"export JAVA_HOME=${GRAALVM_HOME}\n"
"(Optional) Add the GraalVM bin directory to the path\n"
"export PATH=${GRAALVM_HOME}/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:211
msgid "Example:"
msgstr "例:"

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:215
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:287
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:295
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:228
#, no-wrap
msgid ""
"#JAVA_HOME\n"
"JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.8.10-0.fc32.x86_64\n"
"PATH=$PATH:$HOME/bin:$JAVA_HOME/bin\n"
"export JAVA_HOME\n"
"export PATH\n"
"#GRAALVM_HOME\n"
"GRAALVM_HOME=/usr/lib/graalvm/graalvm-ce-java11-20.2.0\n"
"PATH=$PATH:$HOME/bin:$GRAALVM_HOME/bin\n"
"export GRAALVM_HOME\n"
"export PATH\n"
"export JAVA_HOME=${GRAALVM_HOME}\n"
"export PATH=${GRAALVM_HOME}/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:236
#, fuzzy
msgid "## 2. Setting up the RPi and Fedora IoT"
msgstr "2.RPiとFedora IoTのセットアップ\n"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:238
#, fuzzy
msgid "### Download the latest Fedora IoT distro"
msgstr "最新のFedora IoTディストロのダウンロード"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:240
#, fuzzy
msgid "Download the stable and fully supported version of Fedora IoT for Raspberry Pi from https://dl.fedoraproject.org/pub/alt/iot/[here]. Pick up the raw image for aarch64."
msgstr "Fedora IoT for Raspberry Piの安定版と完全サポート版を link:https://dl.fedoraproject.org/pub/alt/iot/[ここから] ダウンロードします。aarch64 用の raw イメージをピックアップしてください。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:242
#, fuzzy
msgid "### Flash the operating system on the SD card"
msgstr "SDカードにオペレーティングシステムをフラッシュする"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:244
#, fuzzy
msgid "#### Non-Linux OS"
msgstr "非Linux OS"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:248
#, fuzzy
msgid "If you are not running any linux based OS on hour host, in order to easily, safely and quickly install the OS image on the MicroSD card I highly recommended to download the official Raspberry Imager tool from https://www.raspberrypi.org/downloads/[here].  The Raspberry Pi Imager how-to can be found https://www.raspberrypi.org/blog/raspberry-pi-imager-imaging-utility/[here].  The good news is that we have already gone through the creation of the ARM-based virtual machine, so you already have a linux distro to use to flash the Fedora IoT OS on the SD card!"
msgstr "LinuxベースのOSを使用していない場合、MicroSDカードにOSイメージを簡単、安全、迅速にインストールするために、 link:https://www.raspberrypi.org/downloads/[ここから] 公式のRaspberry Imagerツールをダウンロードすることを強くお勧めします。Raspberry Pi Imagerの使い方については、 link:https://www.raspberrypi.org/blog/raspberry-pi-imager-imaging-utility/[こちらを] ご覧ください。良いニュースは、すでにARMベースの仮想マシンを作成しているので、SDカードにFedora IoT OSをフラッシュするために使用するLinuxディストロをすでに持っているということです！"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:252
#, fuzzy
msgid "#### On a Linux distro Fedora OS linux distro provides a tool that dramatically simplifies the task: fedora-arm-installer.  Let's add the tool to the OS:"
msgstr "LinuxディストロのFedora OS linux distroでは、作業を劇的に簡略化するツール: fedora-arm-installerが提供されています。このツールをOSに追加してみましょう："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:256
#, no-wrap
msgid "$ dnf install -y fedora-arm-installer\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:259
#, fuzzy
msgid "An example of how to setup the DS card if you are running fedora:"
msgstr "fedoraを使用している場合のDSカードの設定例です："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:263
#, no-wrap
msgid "$ sudo fedora-arm-image-installer -y --image=/home/<<user_home>>/Fedora-IoT-32-20200429.0.aarch64.raw.xz --target=rpi3 --media=/dev/sde --resizefs --addkey=/home/<<user_home>>/.ssh/id_rsa.pub --norootpass --addconsole\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:267
#, fuzzy
msgid "please refer to the official tool guide to get additional insights about it.  The tool is described https://docs.fedoraproject.org/en-US/iot/physical-device-setup/#_scripted_image_transfer_with_arm_image_installer[here]."
msgstr "このツールの詳細については、公式ツールガイドを参照してください。ツールについては link:https://docs.fedoraproject.org/en-US/iot/physical-device-setup/#_scripted_image_transfer_with_arm_image_installer[こちらで] 解説しています。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:269
#, fuzzy
msgid "As a side note, the resulting SD card will contain 3 partitions:"
msgstr "余談ですが、出来上がったSDカードには、3つのパーティションが含まれます："

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:271
#, fuzzy
msgid "_BIOS_ (U-Boot) - 1.1 Gb"
msgstr "_BIOS _(U-Boot) - 1.1 Gb"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:272
#, fuzzy
msgid "_Boot_ - 525 Mb"
msgstr "_ブート _- 525 Mb"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:273
#, fuzzy
msgid "_Root_ - Occupies the remaining unallocated space in the SD card"
msgstr "_ルート _- SDカード内の残りの未割り当て領域を占有します。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:275
#, fuzzy
msgid "image:/assets/images/posts/quarkus-native-on-a-raspberry-pi/sd-card-partitions.png[width=100%]"
msgstr "image:/assets/images/posts/quarkus-native-on-a-raspberry-pi/sd-card-partitions.png[alt=\"sd card partitions\", width=\"100%\"]"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:278
#, fuzzy
msgid "### Enabling 64bit on RPi cpu"
msgstr "RPi cpuで64bitを使えるようにする。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:281
#, fuzzy
msgid "After the flashing operation has completed successfully, it's important to have a look at the config file of the operating system. edit the file _config.txt_ and make sure the section *[all]* starts with the following key-value pairs: arm_control=0x200, arm_64bit=1"
msgstr "_config.txtを _編集し、 *[all] *セクションが次のキーと値のペアで始まることを確認します： arm_control=0x200, arm_64bit=1"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:283
#, fuzzy
msgid "e.g.:"
msgstr "を例として挙げます："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:293
#, no-wrap
msgid ""
"# Default Fedora configs for all Raspberry Pi Revisions\n"
"[all]\n"
"# Put the RPi into 64 bit mode\n"
"arm_control=0x200\n"
"arm_64bit=1\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:298
#, fuzzy
msgid "### After first boot"
msgstr "初回起動時"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:300
#, fuzzy
msgid "The following steps may not be necessary if you are happy with the fault keyboard layout or if you are connecting your RPi to the network with aLAN cable..."
msgstr "キーボードのレイアウトに問題がない場合や、RPiをLANケーブルでネットワークに接続している場合は、以下の手順は必要ないかもしれません...。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:302
#, fuzzy
msgid "#### Keyboard Layout"
msgstr "キーボードレイアウト"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:304
#, fuzzy
msgid "Find your keymap of choice in the list obtained by issuing the following command:"
msgstr "次のコマンドを実行して得られるリストの中から、お好みのキーマップを探します："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:308
#, no-wrap
msgid "$ localectl list-keymaps | grep your-locale\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:311
#, fuzzy
msgid "And set it into the system config:"
msgstr "そして、それをシステムコンフィグに設定する："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:316
#, no-wrap
msgid "$ localectl set-keymap _map_\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:319
#, fuzzy
msgid "#### Enable internet access through WiFi connection"
msgstr "WiFi接続によるインターネット接続を可能にする"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:321
#, fuzzy
msgid "Get the list of available networks"
msgstr "利用可能なネットワークの一覧を取得する"

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:325
#, no-wrap
msgid "$ nmcli device wifi list\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:328
#, fuzzy
msgid "And connect to the Wi-Fi network of choice"
msgstr "そして、選択したWi-Fiネットワークに接続する"

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:332
#, no-wrap
msgid "$ nmcli device wifi connect SSID password PASSWORD\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:335
#, fuzzy
msgid "#### Disable firewall"
msgstr "ファイアウォールを無効にする"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:337
#, fuzzy
msgid "Only because it is a demo!!! :-)"
msgstr "デモだからって！？:-)"

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:342
#, no-wrap
msgid ""
"$ systemctl disable firewalld\n"
"$ systemctl stop firewalld\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:345
#, fuzzy
msgid "#### Create a new user for the device"
msgstr "デバイスの新規ユーザーを作成する"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:349
#, fuzzy
msgid "Thanks to the fedora-arm-installer tool, we've added out public key to the root user.  Using root user on a linux system is never a good idea or, let’s say, a good practice.  For this reason, we’re going to add a new administrative user with wheel privileges to our OS:"
msgstr "fedora-arm-installerツールのおかげで、私たちはrootユーザーに公開鍵を追加しました。Linuxシステムでrootユーザーを使うことは、決して良いアイデアではありませんし、良い習慣だとも言えません。このため、OSにwheel権限を持つ新しい管理ユーザを追加することにします："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:355
#, no-wrap
msgid ""
"$ useradd edge\n"
"$ passwd edge\n"
"$ usermod edge -a -G wheel\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:363
#, fuzzy
msgid "## 3. Connecting the container engine to the quay.io account"
msgstr "3.コンテナエンジンをquay.ioのアカウントに接続する。\n"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:365
#, fuzzy
msgid "If you haven’t got it yet, create a free account on quay.io."
msgstr "まだお持ちでない方は、quay.ioで無料アカウントを作成してください。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:368
#, fuzzy
msgid "### Sign into Quay.io To sign into Quay.io, execute the podman login quay.io command:"
msgstr "Quay.ioにサインインする Quay.ioにサインインするには、podman login quay.ioコマンドを実行します："

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:370
#, fuzzy
msgid "Note: If you go to your Quay account settings you can create an encrypted password for more security."
msgstr "注：Quayのアカウント設定にアクセスすると、よりセキュリティの高い暗号化されたパスワードを作成することができます。"

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:376
#, no-wrap
msgid ""
"$ podman login quay.io\n"
"Username: myusername\n"
"Password: mypassword\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:383
#, fuzzy
msgid "## 4. Compiling and deploying your Quarkus native app on Podman"
msgstr "4.QuarkusネイティブアプリをPodmanでコンパイルしてデプロイする\n"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:385
#, fuzzy
msgid "Back on the VM side."
msgstr "VM側に戻る。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:387
#, fuzzy
msgid "### Building the executable"
msgstr "実行可能ファイルをビルドする"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:389
#, fuzzy
msgid "You’ll need git to download the source code and execute it:"
msgstr "ソースコードのダウンロードと実行には、gitが必要です："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:393
#, no-wrap
msgid "$ sudo dnf install -y git\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:396
#, fuzzy
msgid "Clone the quarkus quickstarts repository and pick up the quarkus quickstart of choice."
msgstr "quarkus quickstartsリポジトリをクローンして、選択したquarkus quickstartをピックアップします。"

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:400
#, no-wrap
msgid "$ git clone https://github.com/quarkusio/quarkus-quickstarts.git ~/git/quarkus-quickstarts\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:403
#, fuzzy
msgid "Enter the root directory of the quickstart of choice (e.g. __getting-started__) and start the build:"
msgstr "選択したクイックスタート（例： _getting-started _）のルートディレクトリを入力し、ビルドを開始します："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:407
#, no-wrap
msgid "$ ./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:410
#, fuzzy
msgid "The whole Maven process takes roughly 40 mins. Blease be aware that this could take longer in case of a sarvice with more features (i.e. importing and using more modules):"
msgstr "Mavenの全プロセスは、およそ40分かかります。ただし、より多くの機能（より多くのモジュールをインポートして使用する等）を持つSarviceの場合、より長い時間がかかる可能性があることに注意してください："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:445
#, no-wrap
msgid ""
"[edge@localhost getting-started]$ ./mvnw package -Pnative\n"
"...\n"
"[INFO] --- quarkus-maven-plugin:1.8.1.Final:native-image (default) @ getting-started ---\n"
"[INFO] [org.jboss.threads] JBoss Threads version 3.1.1.Final\n"
"[INFO] [io.quarkus.deployment.pkg.steps.JarResultBuildStep] Building native image source jar: /home/edge/quarkus-quickstarts/getting-started/target/getting-started-1.0-SNAPSHOT-native-image-source-jar/getting-started-1.0-SNAPSHOT-runner.jar\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Building native image from /home/edge/quarkus-quickstarts/getting-started/target/getting-started-1.0-SNAPSHOT-native-image-source-jar/getting-started-1.0-SNAPSHOT-runner.jar\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Running Quarkus native-image plugin on GraalVM Version 20.2.0 (Java Version 11.0.8)\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] /usr/lib/graalvm/graalvm-ce-java11-20.2.0/bin/native-image -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=1 -J-Duser.language=en -J-Dfile.encoding=UTF-8 --initialize-at-build-time= -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy\\$BySpaceAndTime -H:+JNI -jar getting-started-1.0-SNAPSHOT-runner.jar -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -H:-AddAllCharsets -H:EnableURLProtocols=http -H:NativeLinkerOption=-no-pie --no-server -H:-UseServiceLoaderFeature -H:+StackTrace getting-started-1.0-SNAPSHOT-runner\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]    classlist:  82,587.50 ms,  0.96 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]        (cap):  25,485.45 ms,  0.96 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]        setup:  62,730.91 ms,  0.94 GB\n"
"15:15:03,073 INFO  [org.jbo.threads] JBoss Threads version 3.1.1.Final\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]     (clinit):   9,087.82 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]   (typeflow): 392,638.79 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]    (objects): 300,849.30 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]   (features):   9,611.94 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]     analysis: 729,428.50 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]     universe:  37,544.86 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]      (parse): 135,120.27 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]     (inline): 314,244.72 ms,  3.25 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]    (compile): 817,352.63 ms,  4.08 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]      compile: 1,304,395.09 ms,  4.08 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]        image: 102,001.77 ms,  4.10 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]        write:  16,216.90 ms,  4.10 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]      [total]: 2,342,173.85 ms,  4.10 GB\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Execute [objcopy, --strip-debug, /home/edge/quarkus-quickstarts/getting-started/target/getting-started-1.0-SNAPSHOT-runner]\n"
"[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 2394526ms\n"
"[INFO] ------------------------------------------------------------------------\n"
"[INFO] BUILD SUCCESS\n"
"[INFO] ------------------------------------------------------------------------\n"
"[INFO] Total time:  45:25 min\n"
"[INFO] Finished at: 2020-09-30T15:46:11+02:00\n"
"[INFO] ------------------------------------------------------------------------\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:448
#, fuzzy
msgid "The native quarkus executable must be packaged into a container image in order to be able to run it on a container runtime. To achieve this goal, let’s ask the container runtime already installed into your VM to build the container image:"
msgstr "ネイティブのquarkus実行可能ファイルをコンテナランタイム上で実行できるようにするには、コンテナイメージにパッケージ化する必要があります。この目標を達成するために、VMにすでにインストールされているコンテナランタイムにコンテナイメージの構築を依頼しましょう："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:452
#, no-wrap
msgid "$ sudo podman build -f src/main/docker/Dockerfile.native -t quay.io/$myusername/quarkus-getting-started:1-aarch64 .\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:455
#, fuzzy
msgid "Push the container image to the container registry of choice to share it with the edge device:"
msgstr "エッジデバイスと共有するために、選択したコンテナレジストリにコンテナイメージをプッシュします："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:459
#, no-wrap
msgid "$ sudo podman push quay.io/$myusername/quarkus-getting-started:1-aarch64\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:462
#, fuzzy
msgid "### Deploying the executable"
msgstr "実行可能ファイルをデプロイする"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:464
#, fuzzy
msgid "On the RPi:"
msgstr "RPiで："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:468
#, no-wrap
msgid "$ sudo podman run -it --rm -p 8090:8080 --name quarkus-getting-started quay.io/$myusername/quarkus-getting-started:1-aarch64\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:471
#, fuzzy
msgid "### Outcome"
msgstr "アウトカム"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:473
#, fuzzy
msgid "This paragraph shows the outcome produced by the above steps:"
msgstr "この段落は、上記の手順で作られた結果を示しています："

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:475
#, fuzzy
msgid "#### Startup/Stop time:"
msgstr "起動・停止時間です："

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:497
#, no-wrap
msgid ""
"[edge@localhost ~]$ sudo podman run -it --rm -p 8090:8080 --name quarkus-getting-started quay.io/abattagl/quarkus-getting-started:1-aarch64\n"
"Trying to pull quay.io/abattagl/quarkus-getting-started:1-aarch64...\n"
"Getting image source signatures\n"
"Copying blob d44f88e7704f done  \n"
"Copying blob 8c4861605060 done  \n"
"Copying blob c5a0fdbc0d7a done  \n"
"Copying blob 5dd9a2ffef88 done  \n"
"Copying config f08559ac50 done  \n"
"Writing manifest to image destination\n"
"Storing signatures\n"
"__  ____  __  _____   ___  __ ____  ______ \n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n"
"2020-10-01 08:49:34,566 INFO  [io.quarkus] (main) getting-started 1.0-SNAPSHOT native (powered by Quarkus 1.8.1.Final) started in 0.055s. Listening on: http://0.0.0.0:8080\n"
"2020-10-01 08:49:34,566 INFO  [io.quarkus] (main) Profile prod activated. \n"
"2020-10-01 08:49:34,566 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n"
"^C\n"
"2020-10-01 08:49:49,061 INFO  [io.quarkus] (Shutdown thread) getting-started stopped in 0.007s\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:500
#, fuzzy
msgid "The application starts in 55 ms and stops in 7 ms. This is impressive if you consider the Quarkus native app is running on the RPi3 cpu (Please have another look at the cpu specs at the very beginning of this article)!"
msgstr "アプリケーションは55msで起動し、7msで停止しています。これは、QuarkusのネイティブアプリがRPi3 cpuで動作していることを考えると、印象的なことです（この記事の一番最初にあるcpuスペックをもう一度見てください）！"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:502
#, fuzzy
msgid "#### Memory footprint:"
msgstr "メモリフットプリント："

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:504
#, fuzzy
msgid "The following screenshot of the output of the \"top\" command on the RPi shows how cheap it is to run Quarkus native apps on top of the container technology:"
msgstr "以下のスクリーンショットは、RPi上の「top」コマンドの出力で、コンテナ技術の上でQuarkusのネイティブアプリをいかに安く実行できるかを示しています："

#. type: Target for macro image
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:505
#, no-wrap
msgid "/assets/images/posts/quarkus-native-on-a-raspberry-pi/native-quarkus-getting-started-on-arm8-memory-footprint.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:508
#, fuzzy
msgid "Roughly 22 megs for a java-based application exposing a simple web page and a REST API!"
msgstr "単純なWebページとREST APIを公開するJavaベースのアプリケーションの場合、およそ22メガです！"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:510
#, fuzzy
msgid "#### Connecting to the service"
msgstr "サービスに接続する"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:512
#, fuzzy
msgid "The following screenshot shows the webpage served by the quarkus microservice running natively on podman installed in the RPi:"
msgstr "次のスクリーンショットは、RPiにインストールされたPodman上でネイティブに動作するquarkusマイクロサービスによって提供されるウェブページです："

#. type: Target for macro image
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:513
#, no-wrap
msgid "/assets/images/posts/quarkus-native-on-a-raspberry-pi/native-quarkus-getting-started-on-arm8-web-page.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:523
#, fuzzy
msgid "## Conclusions"
msgstr "結論\n"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:526
#, fuzzy
msgid "### Big Picture"
msgstr "ビッグピクチャー"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:528
#, fuzzy
msgid "This article reproduces the steps to compile and run a Quarkus native app on a Raspberry Pi cpu. This process is potentially valid for all the cpus belonging to the ARM v8 family, with some potential exceptions due to the fact the architecture of few ARM based cpus may differ from the standard one for that version."
msgstr "この記事では、Raspberry Pi cpu上でQuarkusネイティブアプリをコンパイルして実行する手順を再現しています。このプロセスは、ARM v8ファミリーに属するすべてのCPUに有効である可能性があります。ただし、ARMベースのCPUのアーキテクチャがそのバージョンの標準的なものと異なる可能性があるため、いくつかの例外があります。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:530
#, fuzzy
msgid "### Building tools"
msgstr "ビルディングツール"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:532
#, fuzzy
msgid "For this PoC I've used a QEmu-base VM. That promotes reusability, but it's still expensive in terms of usability (QEmu works like a charm on linux OS, but not on Windows and MacOS). As stated at the beginning of this article, a more flexible, portable and scalable solution still based on cpu emulation and container technology is under investiogation at the moment. That would help the delegation and scalability of build process."
msgstr "このPoCでは、QEmuベースのVMを使用しました。これは再利用性を促進するものですが、使い勝手の面ではまだ高価です（QEmuはLinux OSでは魅力的に動作しますが、WindowsとMacOSでは動作しません）。この記事の冒頭で述べたように、CPUエミュレーションとコンテナ技術に基づく、より柔軟でポータブルかつスケーラブルなソリューションが、現在検討されています。これは、ビルドプロセスの委譲とスケーラビリティを支援するものである。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:534
#, fuzzy
msgid "Be aware that QEmu-based tools are still a workaround. GraalVM is missing the cross-compile feature and it will take a while to release it."
msgstr "QEmuベースのツールはまだワークアラウンドであることを認識してください。GraalVMにはクロスコンパイル機能がなく、リリースにはしばらく時間がかかると思われます。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:536
#, fuzzy
msgid "### Quarkus everywhere"
msgstr "どこでもクオカード"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:538
#, fuzzy
msgid "It's clear that Quarkus can potentially run everywhere. It is, of course, a matter of supportability from GraalVM to the underlying architecture."
msgstr "Quarkusがあらゆる場所で動作する可能性があることは明らかです。もちろん、GraalVMから基礎となるアーキテクチャへのサポート性の問題である。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:540
#, fuzzy
msgid "So far I feel comfortable in stating that this is just the beginning and lots more features and capabilities are yet to come."
msgstr "今のところ、これはほんの始まりに過ぎず、まだまだたくさんの機能と性能があると断言してもいいと思っています。"

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:541
#, fuzzy
msgid "It would very nice to have a distribution of Mandrel for aarch64. Mandrel is aligned with the `native-image` capabilities from GraalVM with OpenJDK and Red Hat Enterprise Linux libraries to improve maintainability. Looking forward to testing it ;-)"
msgstr "aarch64用のMandrelのディストリビューションがあると非常にうれしいです。Mandrelは、保守性を向上させるために、OpenJDKとRed Hat Enterprise Linuxのライブラリで、GraalVMからの `native-image` 機能に揃えられています。テストするのが楽しみです;-)"
