# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-20 11:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:1
#, fuzzy, no-wrap
msgid "vazirim"
msgstr "バジリム"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:1
#, fuzzy, no-wrap
msgid "2022-06-29"
msgstr "2022-06-29"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:1
#, fuzzy, no-wrap
msgid "NativeJDB bridges the gap between the Java Debugger (JDB) framework available in modern IDEs and native debugging via GNU Project debugger (GDB)."
msgstr "NativeJDBは、最新のIDEで利用可能なJavaデバッガ（JDB）フレームワークとGNU Project debugger（GDB）によるネイティブデバッグの間のギャップを埋めるものです。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:1
#, fuzzy, no-wrap
msgid "java debugger native cloud container"
msgstr "Javaデバッガ ネイティブ クラウドコンテナ"

#. type: YAML Front Matter: title
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:1
#, fuzzy, no-wrap
msgid "Debugging natively compiled Java code with NativeJDB"
msgstr "NativeJDBでネイティブコンパイルされたJavaコードをデバッグする。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:11
#, fuzzy, no-wrap
msgid "NativeJDB"
msgstr "ネイティブジェイディーブイ"

#. type: Target for macro image
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:11
#, no-wrap
msgid "nativejdb.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:14
#, fuzzy, no-wrap
msgid "Co-authored by: *Ansu Varghese, Research Software Engineer, IBM*"
msgstr "共著者 *Ansu Varghese, IBM, リサーチソフトウェアエンジニア*"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:18
#, fuzzy, no-wrap
msgid "**In collaboration with:**\n"
msgstr "*とのコラボレーションで：*"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:20
#, fuzzy
msgid "_Max Andersen, Dimitris Andreadis, Andrew Dinn, Stuart Douglas, Jason Greene, David Grove, David Lloyd, Thomas Qvarnstrom, Foivos Zakkak, Galder Zamarreno (IBM Research and Red Hat)_"
msgstr "_Max Andersen, Dimitris Andreadis, Andrew Dinn, Stuart Douglas, Jason Greene, David Grove, David Lloyd, Thomas Qvarnstrom, Foivos Zakkak, Galder Zamarreno (IBM Research, Red Hat)_"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:23
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:48
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:54
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:66
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:72
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:92
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:98
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:104
#, fuzzy
msgid "{empty} +"
msgstr "\n"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:26
#, fuzzy
msgid "https://quarkus.io/[Quarkus] is a cloud-native Java development framework, which allows Java code to be mapped to Kubernetes containers and compiled natively. https://www.graalvm.org/22.1/reference-manual/native-image/[Native compilation] is useful for serverless computing, it avoids the overhead of running a JVM in containers and lets us execute serverless code directly. Debugging natively compiled code is not an easy task. It can be very different from the original Java source code due to extensive code optimizations, as well as differences in libraries used in native vs non-natively compiled code. In some cases, it is necessary to view both the source and the assembly code in order to gain better understanding of the program, further complicating the debugging task. "
msgstr "link:https://quarkus.io/[Quarkusは] クラウドネイティブなJava開発フレームワークで、JavaコードをKubernetesコンテナにマッピングしてネイティブにコンパイルすることができる。 link:https://www.graalvm.org/22.1/reference-manual/native-image/[ネイティブコンパイルは] サーバーレスコンピューティングに有効で、コンテナでJVMを実行するオーバーヘッドを回避し、サーバーレスコードを直接実行することができます。ネイティブにコンパイルされたコードをデバッグするのは簡単な作業ではありません。広範なコードの最適化や、ネイティブと非ネイティブのコンパイルコードで使用されるライブラリの違いにより、元のJavaソースコードと大きく異なる場合があります。場合によっては、プログラムの理解を深めるためにソースコードとアセンブリコードの両方を見る必要があり、デバッグ作業をさらに複雑にしています。"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:29
#, fuzzy
msgid "https://developers.redhat.com/blog/2020/06/25/debugging-graalvm-native-images-using-gdb[Native executables can be debugged with GDB], which is a C/C++ debugger in combination with a tool like emacs to step through the source code. However, these tools may not be familiar to a Java developer. Recently, extensions to https://marketplace.visualstudio.com/items?itemName=oracle-labs-graalvm.graalvm[VSCode] and https://plugins.jetbrains.com/plugin/19237-graalvm-native-debugger[IntelliJ] have been developed to alleviate this problem. Both these tools are specific to the IDE they extend, and need to be used in a Linux environment due to current limitations of Java native compilers. "
msgstr "link:https://developers.redhat.com/blog/2020/06/25/debugging-graalvm-native-images-using-gdb[ネイティブの実行] ファイルは、C/C++のデバッガである link:https://developers.redhat.com/blog/2020/06/25/debugging-graalvm-native-images-using-gdb[GDBと] emacsのようなツールを組み合わせて、ソースコードを踏みながら link:https://developers.redhat.com/blog/2020/06/25/debugging-graalvm-native-images-using-gdb[デバッグする] ことができます。しかし、これらのツールは、Java開発者には馴染みがないかもしれません。最近、この問題を軽減するために、 link:https://marketplace.visualstudio.com/items?itemName=oracle-labs-graalvm.graalvm[VSCodeと] link:https://plugins.jetbrains.com/plugin/19237-graalvm-native-debugger[IntelliJの] エクステンションが開発されています。これらのツールはいずれも拡張するIDEに固有のもので、Javaネイティブ・コンパイラの現在の制限から、Linux環境で使用する必要がある。"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:32
#, fuzzy
msgid "https://github.com/nativejdb/[NativeJDB] is an *open-source* tool that supports *remote debugging* of a natively compiled Java code. In principle, this allows debugging from any IDE that supports the Java Platform Debugger Architecture (JPDA), such as IntelliJ, Eclipse or VSCode. Attaching remotely means that the user can start a debugging session on *any O/S*, while the NativeJDB process itself runs in a Linux container. Our challenge is to bridge the gap between JPDA and the GDB, two stacks that don't typically talk to each other! To achieve this we essentially teach the GDB to speak the Java Debug Wire Protocol (JDWP), used by IDEs to communicate with Java debuggers."
msgstr "link:https://github.com/nativejdb/[NativeJDBは] 、ネイティブにコンパイルされたJavaコードの *リモートデバッグを *サポートする *オープンソースの *ツールです。原理的には、IntelliJ、Eclipse、VSCodeなどJava Platform Debugger Architecture（JPDA）をサポートするIDEからデバッグすることができます。また、NativeJDBのプロセス自体はLinuxコンテナで実行されますが、リモートでアタッチすることにより、ユーザーは *どのO/Sでも *デバッグ・セッションを開始することができます。私たちの挑戦は、JPDAとGDBという、通常では会話することのない2つのスタックのギャップを埋めることです！これを実現するために、IDEがJavaデバッガと通信するために使用するJava Debug Wire Protocol (JDWP)をGDBが話すように基本的に教えています。"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:35
#, fuzzy
msgid "When writing Quarkus code, developers have the possibility of finding bugs with a regular Java debugger before compiling it natively. NativeJDB is useful when the observed behavior of the native executable is different than when the program is executed on a JVM. It can be used to explore optimizations and differences in libraries that account for behavioral anomalies. NativeJDB is not specific to Quarkus and can be used to debug any natively compiled Java code."
msgstr "Quarkusのコードを書くとき、開発者はネイティブにコンパイルする前に、通常のJavaデバッガでバグを発見する可能性があります。NativeJDBは、ネイティブ実行ファイルの観察された動作が、JVM上でプログラムを実行したときと異なる場合に有効です。これは、動作の異常を考慮した最適化やライブラリの違いを調べるために使用することができます。NativeJDBはQuarkusに特有ではなく、ネイティブにコンパイルされたJavaコードのデバッグに使用することができます。"

#. type: Title ==
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:38
#, fuzzy, no-wrap
msgid "Architecture and Implementation"
msgstr "アーキテクチャと実装"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:42
#, fuzzy
msgid "NativeJDB is a Java process that wraps GDB, which itself wraps the native executable, and it acts as a server that understands the JDWP protocol. It is similar to the JDWP agent used to control and debug a running Java process. In that case, the user can attach to such a process and can start debugging it. NativeJDB is used in a similar way: once it is started, the user attaches to it using a Remote Debug configuration from the IDE."
msgstr "NativeJDBは、GDBをラップするJavaプロセスで、それ自体がネイティブ実行ファイルをラップし、JDWPプロトコルを理解するサーバーとして機能する。これは、実行中のJavaプロセスを制御しデバッグするために使用されるJDWPエージェントに似ています。その場合、ユーザーはそのようなプロセスにアタッチすることができ、デバッグを開始することができます。NativeJDBも同様の方法で使用されます。NativeJDBが起動すると、ユーザーはIDEからリモート・デバッグ設定を使用してNativeJDBにアタッチします。"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:45
#, fuzzy
msgid "The IDE then communicates with NativeJDB using the JDWP. After the initial handshake and pleasantries (like capabilities and set of available classes), the protocol allows a user to manipulate the IDE's interface, which triggers appropriate JDWP packets to be sent to NativeJDB. These packets are interpreted by NativeJDB and translated to https://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_22.html[GDB-MI] commands. We use the MI interface to communicate with the GDB since it's the recommended interface to build tools on top of the GDB. The GDB then responds to these commands, and the responses are translated back into JDWP packets and sent back to the IDE."
msgstr "そして、IDEはJDWPを使用してNativeJDBと通信を行います。最初のハンドシェイクと挨拶（能力や利用可能なクラスのセットなど）の後、プロトコルはユーザーがIDEのインターフェイスを操作することを可能にし、それが適切なJDWPパケットをNativeJDBに送信するきっかけとなります。これらのパケットはNativeJDBによって解釈され、 link:https://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_22.html[GDB-MI] コマンドに変換されます。GDBとの通信には、GDB上でツールを構築する際に推奨されるMIインターフェースを使用します。GDBはこれらのコマンドに応答し、応答はJDWPパケットに変換されてIDEに返されます。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:50
#, fuzzy, no-wrap
msgid "NativeJDBArchitecture_1"
msgstr "NativeJDBArchitecture_1"

#. type: Target for macro image
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:50
#, no-wrap
msgid "nativejdbarch_1.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:57
#, fuzzy
msgid "Communication between the IDE and the GDB can be both synchronous and asynchronous, including error messages. In some cases, a command from the IDE can result in both a synchronous and an asynchronous response. For example, setting a breakpoint has a synchronous response, but the corresponding breakpoint-hit is an asynchronous event that gets sent from NativeJDB to the IDE. In principle, NativeJDB can be used with any IDE that has a JDWP implementation, but it has mostly been tested and works with IntelliJ. It also does not require any changes or extensions to existing IDEs and works with the *community as well as the commercial version* of IntelliJ."
msgstr "IDEとGDB間の通信は、エラーメッセージを含め、同期と非同期の両方が可能です。IDEからのコマンドは、場合によっては同期と非同期の両方のレスポンスを返すことができます。例えば、ブレークポイントの設定は同期的な応答がありますが、対応するブレークポイントヒットはNativeJDBからIDEに送信される非同期的なイベントです。NativeJDBは、JDWPの実装があるIDEであれば原則的に使用可能ですが、IntelliJでほぼ動作確認済みです。また、既存のIDEに変更や拡張を加える必要はなく、IntelliJの *商用版だけでなく、コミュニティでも *動作します。"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:60
#, fuzzy
msgid "Today, native-image builders in https://www.graalvm.org/[GraalVM] and https://github.com/qbicc[qbicc] produce debug information on a Linux environment with source mapping to the original Java source code (support for other platforms is in the works as well). NativeJDB's architecture allows users to start a debugging session in an IDE running on any O/S and attach to a NativeJDB process running in a Linux container. So it does not require Linux to begin with. It also works with the *community as well as the commercial version* of GraalVM."
msgstr "現在、 link:https://www.graalvm.org/[GraalVMと] link:https://github.com/qbicc[qbiccの] ネイティブイメージビルダーは、オリジナルのJavaソースコードにソースマッピングされたLinux環境上でデバッグ情報を生成します（他のプラットフォームへの対応も検討中です）。NativeJDBのアーキテクチャにより、ユーザーはあらゆるO/S上で動作するIDEでデバッグセッションを開始し、Linuxコンテナ内で動作するNativeJDBプロセスにアタッチすることができます。つまり、そもそもLinuxを必要としないのだ。また、GraalVMの *商用版だけでなく、コミュニティ *版でも動作する。"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:63
#, fuzzy
msgid "NativeJDB consists of a few different components. We use Docker to build a native executable and produce debug information for the debuggee Java application. Our Docker setup uses Ubuntu O/S. The frontend of NativeJDB is a set of classes that parse and build JDI data structures. Its backend parses and builds data structures corresponding to communication with the GDB."
msgstr "NativeJDBはいくつかの異なるコンポーネントで構成されています。私たちはDockerを使用して、ネイティブの実行ファイルを構築し、デバッギーのJavaアプリケーションのデバッグ情報を生成します。私たちのDockerセットアップはUbuntu O/Sを使用しています。NativeJDBのフロントエンドは、JDIデータ構造の解析と構築を行うクラス群です。バックエンドは、GDBとの通信に対応するデータ構造の解析と構築を行います。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:68
#, fuzzy, no-wrap
msgid "NativeJDBArchitecture_2"
msgstr "NativeJDBArchitecture_2"

#. type: Target for macro image
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:68
#, no-wrap
msgid "nativejdbarch_2.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:75
#, fuzzy
msgid "NativeJDB has been using a scaffolding JVM to help it obtain certain static information and speed up development. So currently NativeJDB starts up the program as a Java process as well, in addition to running the native executable. It attaches to that process and suspends it to obtain general static information about the program. In the future, we will remove this scaffolding and replace with information coming from the GDB, though it has been very helpful in rapid prototyping."
msgstr "NativeJDBは、特定の静的情報を取得し、開発を高速化するために、スキャフォールディングJVMを使用してきました。そこで現在NativeJDBは、ネイティブの実行ファイルを実行するだけでなく、Javaプロセスとしてもプログラムを起動します。そのプロセスにアタッチしてサスペンドし、プログラムに関する一般的な静的情報を取得するのです。ラピッドプロトタイピングに非常に役立っていますが、将来的にはこの足場を取り除き、GDBから来る情報に置き換える予定です。"

#. type: Title ==
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:78
#, fuzzy, no-wrap
msgid "NativeJDB in action!"
msgstr "NativeJDBが動いている！"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:82
#, fuzzy
msgid "To get started, you'll need the following repos and follow the instructions in each:"
msgstr "まずは、以下のレポを用意し、それぞれの指示に従ってください："

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:85
#, fuzzy
msgid "https://github.com/nativejdb/nativejdb"
msgstr " https://github.com/nativejdb/nativejdb "

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:86
#, fuzzy
msgid "https://github.com/nativejdb/nativejdbExamples"
msgstr " https://github.com/nativejdb/nativejdbExamples "

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:89
#, fuzzy
msgid "Check out the following video to see NativeJDB in action!"
msgstr "NativeJDBの動作は、以下の動画でご確認ください！"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:101
#, fuzzy
msgid "And this video showing NativeJDB running on the GettingStarted Quarkus application:"
msgstr "また、GettingStarted QuarkusアプリケーションでNativeJDBが動作している様子を撮影したビデオもあります："

#. type: Title ==
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:110
#, no-wrap
msgid "Features"
msgstr "特徴"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:113
#, fuzzy
msgid "Ability to show Java source in the editor and step through code"
msgstr "エディターでJavaソースを表示し、コードをステップスルーする機能"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:114
#, fuzzy
msgid "Works with https://www.jrebel.com/blog/best-java-ide[IntelliJ] and Java11"
msgstr "link:https://www.jrebel.com/blog/best-java-ide[IntelliJと] Java11で動作します。"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:115
#, fuzzy
msgid "Works with https://www.graalvm.org/[GraalVM’s] natively compiled images"
msgstr "link:https://www.graalvm.org/[GraalVMの] ネイティブコンパイルされたイメージで動作します。"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:116
#, fuzzy
msgid "Works with https://github.com/qbicc/qbicc[Qbicc’s] natively compiled images (work in progress)"
msgstr "link:https://github.com/qbicc/qbicc[Qbiccの] ネイティブコンパイルされたイメージで動作する(作業中)"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:117
#, fuzzy
msgid "Debugging features using the IDE’s Debug Console itself:"
msgstr "IDEのデバッグコンソールそのものを使ったデバッグ機能："

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:119
#, fuzzy
msgid "Suspend / Resume"
msgstr "サスペンド／レジューム"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:120
#, fuzzy
msgid "Set Breakpoints (Insert/Enable)"
msgstr "ブレイクポイントの設定（挿入/有効化）"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:121
#, fuzzy
msgid "Clear Breakpoints (Delete/Disable)"
msgstr "ブレークポイントのクリア（削除／無効化）"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:122
#, fuzzy
msgid "Step Over / Step Into / Step Return (work in progress)"
msgstr "ステップオーバー／ステップイントゥ／ステップリターン（ワークインプログレス）"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:123
#, fuzzy
msgid "Stack Frames information in IDE debugger pane"
msgstr "IDEデバッガペインにスタックフレーム情報を表示する。"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:124
#, fuzzy
msgid "Variables (Local + Static) values (work in progress)"
msgstr "変数（ローカル＋スタティック）の値（作業中）"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:125
#, fuzzy
msgid "View of assembly code within a stack frame (work in progress)"
msgstr "スタックフレーム内のアセンブリコードを表示する（作業中）"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:126
#, fuzzy
msgid "Multi-threading & thread info"
msgstr "マルチスレッドとスレッド情報"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:129
#, fuzzy
msgid "NativeJDB does not support hot code replace. Also, very short running programs currently need a Thread.sleep(). This is due to the fact that NativeJDB today uses a scaffolding VM, and needs a little time to attach and suspend it. This problem will disappear when we get rid of the scaffolding in the future. There is also a known issue of breakpoints working only once in loops under some conditions (related to https://github.com/oracle/graal/issues/4379[this] graalvm issue), and the step operation sometimes continues instead."
msgstr "NativeJDBは、ホットコードの置換をサポートしていません。また、非常に短い時間で実行されるプログラムでは、現在Thread.sleep()が必要です。これは、今日のNativeJDBが雛形VMを使用しており、そのアタッチとサスペンドに少し時間が必要であるためである。この問題は、将来的にscaffoldingを取り除いたときに解消されるでしょう。また、ある条件下でループ内でブレークポイントが一度しか機能せず、代わりにステップ操作が継続されることがある問題も知られています（ link:https://github.com/oracle/graal/issues/4379[この] graalvmの問題に関連しています）。"

#. type: Title ==
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:132
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:136
#, fuzzy
msgid "Through this blog, we have showcased a new debugging tool called NativeJDB that allows users to remotely attach and debug a natively compiled Java code. It provides a bridge between the Java debugging framework in modern IDEs and GDB. It does not require extensions to existing IDEs, and allows the user to start their debugging session on any O/S."
msgstr "このブログを通じて、ネイティブにコンパイルされたJavaコードをリモートでアタッチしてデバッグできる新しいデバッグツール「NativeJDB」を紹介してきました。これは、最新のIDEに搭載されているJavaデバッグフレームワークとGDBとの間の橋渡しをするものです。既存のIDEへの拡張は必要なく、ユーザーはどのO/Sでもデバッグ・セッションを開始することができます。"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:139
#, fuzzy
msgid "In the future, we can explore making NativeJDB work with other IDEs besides IntelliJ, which in principle should be possible."
msgstr "将来的には、NativeJDBをIntelliJ以外のIDEで動作させることも検討できますし、原理的には可能なはずです。"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:142
#, fuzzy
msgid "NativeJDB is currently a working prototype, and we look forward to feedback, suggestions, and contributions! "
msgstr "NativeJDBは現在、プロトタイプとして動作しており、フィードバック、提案、貢献を期待しています！"

#. type: Title ==
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:145
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:148
#, fuzzy
msgid "https://quarkus.io/guides/building-native-image#debugging-native-executable[]"
msgstr " https://quarkus.io/guides/building-native-image#debugging-native-executable "

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:149
#, fuzzy
msgid "https://docs.oracle.com/en/java/javase/11/docs/specs/jdwp/jdwp-protocol.html[]"
msgstr " https://docs.oracle.com/en/java/javase/11/docs/specs/jdwp/jdwp-protocol.html "

#. type: Plain text
#: upstream/_posts/2022-06-29-nativejdb-debugger-for-native-images.adoc:149
#, fuzzy
msgid "https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI.html[]"
msgstr " https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI.html "
