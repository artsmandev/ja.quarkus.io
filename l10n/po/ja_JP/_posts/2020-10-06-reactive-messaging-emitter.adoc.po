msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter: title
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy, no-wrap
msgid "Emitter - Bridging the imperative and the reactive worlds"
msgstr "エミッター - 命令的な世界と反応的な世界の架け橋になる"

#. type: YAML Front Matter: synopsis
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy, no-wrap
msgid "Emitting messages with Reactive Messaging Emitters"
msgstr "Reactive Messaging Emittersによるメッセージの発信"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "In a https://quarkus.io/blog/kafka-avro/[previous blog post] about Kafka and Avro, we used an _emitter_ to send Kafka messages."
msgstr "KafkaとAvroに関する link:https://quarkus.io/blog/kafka-avro/[以前のブログ記事] で、Kafkaメッセージを送信するために _エミッターを_ 使用しました。"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[width=70%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[alt=\"architecture\", width=\"70%\"]"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "In this post, we are going look at this emitter construct a little bit more closely."
msgstr "今回は、このエミッターの構成について、もう少し詳しく見ていきましょう。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Injecting an Emitter"
msgstr "エミッターの注入"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Injecting an emitter is straightforward.\n"
"You indicate the targeted channel, i.e., where do you send your messages:"
msgstr "エミッターを注入するのは簡単です。対象となるチャンネル、つまりメッセージを送信する場所を指定します："

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Remember that reactive messaging uses _channels_ as a primary abstraction.\n"
"They can be in-memory channels or mapped to a remote broker."
msgstr "リアクティブ・メッセージングでは、 _チャネルを_ 主要な抽象化として使用することを覚えておいてください。チャネルはインメモリチャネルにすることも、リモートブローカにマッピングすることもできます。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"In the previous code snippet, we inject an `Emitter<Movie>`.\n"
"It means you will send messages containing movies as payload.\n"
"So, the specified type is the payload type.\n"
"That lets you send: payloads directly (wrapped automatically in a message) or more detailed messages containing a movie as payload:"
msgstr "先ほどのコード・スニペットでは、 `Emitter<Movie>` をインジェクションしています。 これは、ペイロードとしてムービーを含むメッセージを送信することを意味します。つまり、指定された型はペイロードの型です。これにより、ペイロードを直接（メッセージに自動的にラップして）送信したり、ムービーをペイロードとして含むより詳細なメッセージを送信したりすることができます："

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Sending payloads"
msgstr "ペイロードの送信"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Sending payload is the simplest way to send data.\n"
"You just pass the payload to the `send` method like an instance of `Movie`.\n"
"Under the hood, it just creates a simple `Message` wrapping the payload."
msgstr "ペイロードの送信はデータを送信する最も簡単な方法です。 `Movie` のインスタンスのように、 `send` メソッドにペイロードを渡すだけです。 裏側では、ペイロードをラップしたシンプルな `Message` を作成するだけです。"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "When used with payload, the `send` method returns a `CompletionStage` indicating if the message processing succeeded or failed:"
msgstr "ペイロードとともに使用された場合、 `send` メソッドは、メッセージ処理が成功したか失敗したかを示す `CompletionStage` を返す："

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Processing, and will see later event the emission, happens asynchronously.\n"
"So, the returned `CompletionStage` lets you know when the message is processed.\n"
"The `CompletionStage` is completed successfully when the message is acknowledged.\n"
"Most of the time, it means that the processing has been completed smoothly, or the message has been sent to a broker successfully.\n"
"If something wrong happens, the `CompletionStage` is completed exceptionally.\n"
"The passed exception gives you an idea of the reason."
msgstr "処理は、後で説明するように、非同期に行われます。そのため、返された `CompletionStage` で、メッセージがいつ処理されたかを知ることができます。メッセージが確認されると、 `CompletionStage` は正常に完了します。たいていの場合、処理がスムーズに完了したか、メッセージがブローカーに正常に送信されたことを意味します。何か問題が発生した場合、 `CompletionStage` は例外的に完了します。渡された例外がその理由を示します。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid "Sending messages"
msgstr "メッセージの送信"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"While sending payloads is more straightforward, sometimes you want to attach metadata to the message, like configuring how it should be written in Kafka, tracing information, etc.\n"
"The emitter also allows sending messages, and so attach the metadata you want.\n"
"In the following example, we configure the outbound Kafka record.\n"
"We set the key, the topic, and so on.\n"
"That way, you can dispatch messages to different topics and even decide dynamically:"
msgstr "ペイロードの送信はより簡単ですが、Kafkaにどのように書き込むかを設定したり、トレース情報を設定するなど、メッセージにメタデータを添付したい場合もあります。エミッターはメッセージの送信も可能なので、必要なメタデータを添付します。次の例では、送信Kafkaレコードを設定します。キーやトピックなどを設定します。このように、異なるトピックにメッセージをディスパッチしたり、動的に決定することもできます："

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Emissions are asynchronous"
msgstr "排出は非同期"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Emitters form a bridge between the imperative and the reactive worlds.\n"
"When you emit a message, this message is not processed immediately.\n"
"The downstream component consuming the message are part of a _Reactive Streams_.\n"
"Passing the message immediately would violate the Reactive Streams protocol.\n"
"We must be sure that the downstream components are ready to accept this message.\n"
"As a result, the emitter is not pushing the message directly, but enqueue it in a buffer used to handle the downstream capacity (requests in Reactive Streams lingo)."
msgstr "エミッターは命令的な世界と反応的な世界の橋渡しをします。メッセージを送信しても、そのメッセージはすぐに処理されるわけではありません。メッセージを消費する下流のコンポーネントは、 _Reactive Streams_ の一部です。メッセージをすぐに渡してしまうと、Reactive Streams のプロトコルに違反してしまいます。下流のコンポーネントがこのメッセージを受け入れる準備ができていることを確認する必要があります。その結果、エミッタはメッセージを直接プッシュするのではなく、下流のキャパシティ（Reactive Streams用語でリクエスト）を処理するためのバッファにエンキューします。"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[width=90%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[alt=\"buffer\", width=\"90%\"]"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "The downstream component receives the messages according to the requests it makes, ensuring its capacity is never exceeded."
msgstr "下流のコンポーネントは、リクエストに応じてメッセージを受信し、その容量を超えることがないようにします。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Overflow management"
msgstr "オーバーフロー管理"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"But with buffer comes... overflow.\n"
"If you emit too many messages and the downstream cannot keep up, the messages are stored in the buffer until it reaches its maximum capacity.\n"
"Then, you cannot emit anymore, and attempting to emit will throw exceptions.\n"
"But what can we do in this case?\n"
"When injecting the emitter, you can configure an Overflow strategy.\n"
"For example, you can set the buffer size, use an unbounded buffer, drop the messages, fail, or just ignore the back pressure and let the downstream handle it.\n"
"By default, it uses a buffer, but depending on your use case, you may want to configure it differently:"
msgstr "しかし、バッファにはオーバーフローがつきものです。メッセージが多すぎてダウンストリームが追いつかない場合、メッセージはバッファの最大容量に達するまで保存されます。そして、それ以上メッセージを出すことができなくなり、出そうとすると例外がスローされます。しかし、この場合どうすればいいのでしょうか？エミッタをインジェクトする際に、Overflowストラテジを設定することができます。例えば、バッファサイズを設定したり、バインドされていないバッファを使用したり、メッセージをドロップしたり、失敗させたり、背圧を無視してダウンストリームに処理させたりすることができます。デフォルトではバッファが使用されますが、使用するケースによっては別の設定にすることもできます："

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"This post is a brief introduction to the `Emitter` construct from Reactive Messaging.\n"
"More information is available on the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[SmallRye Reactive Messaging documentation]."
msgstr "この投稿では、Reactive Messaging の `Emitter` コンストラクトを簡単に紹介します。詳細は link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[SmallRye Reactive Messagingのドキュメント] を参照してください。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"In the next Quarkus version (1.9), this feature will be improved with two very nice enhancements.\n"
"First, it will offer a Mutiny variant, easing the integration with Mutiny APIs.\n"
"Then, it would be possible for the Kafka case to directly emit key/value pairs without needing to use metadata."
msgstr "Quarkusの次期バージョン（1.9）では、この機能が2つの素晴らしい機能強化によって改善される予定です。まず、Mutinyのバリアントを提供し、Mutiny APIとの統合を容易にします。次に、Kafkaの場合、メタデータを使用することなく、キーと値のペアを直接発行できるようになります。"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Stay tuned! Will will cover these in a follow-up post!"
msgstr "ご期待ください！Willは次の記事でこれらを取り上げる予定です！"
