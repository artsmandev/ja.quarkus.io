# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-09-03 03:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-08-30-kafka-serde.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-08-30-kafka-serde.adoc:1
#, fuzzy, no-wrap
msgid "2022-08-30"
msgstr "2022-08-30"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-08-30-kafka-serde.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-08-30-kafka-serde.adoc:1
#, fuzzy, no-wrap
msgid "JSON, Avro and Custom Kafka Serializers and Deserializers with Quarkus"
msgstr "QuarkusによるJSON、Avro、カスタムKafkaのシリアライザーとデシリアライザー"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-08-30-kafka-serde.adoc:1
#, no-wrap
msgid "kafka"
msgstr "kafka"

#. type: YAML Front Matter: title
#: upstream/_posts/2022-08-30-kafka-serde.adoc:1
#, fuzzy, no-wrap
msgid "How to implement Kafka Serializers and Deserializers?"
msgstr "Kafkaのシリアライザーとデシリアライザーを実装するには？"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:14
#, fuzzy
msgid "When your application writes a _record_ into a Kafka topic or when it consumes a _record_ from a Kafka topic, a mechanism of serialization and deserialization happens.  The serialization process transforms the business objects you want to send to Kafka into bytes.  The deserialization process is the opposite.  It receives the bytes from Kafka and recreates the business objects."
msgstr "アプリケーションがKafkaトピックに _レコードを_ 書き込むとき、またはKafkaトピックから _レコードを_ 消費するとき、シリアライズとデシリアライズのメカニズムが起こります。シリアライズ処理では、Kafkaに送りたいビジネスオブジェクトをバイトに変換します。デシリアライズのプロセスはその逆です。Kafkaからバイトを受け取り、ビジネスオブジェクトを再作成する。"

#. type: Target for macro image
#: upstream/_posts/2022-08-30-kafka-serde.adoc:15
#, no-wrap
msgid "/assets/images/posts/kafka-serde/serde.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:18
#, fuzzy
msgid "This blog post explores different approaches for this serialization and deserialization and explains how you can implement a custom serializer and deserializer. It also highlights facilities provided by the Kafka connector from Quarkus."
msgstr "このブログ記事では、このシリアライゼーションとデシリアライゼーションのさまざまなアプローチについて調べ、カスタムシリアライザーとデシリアライザーを実装する方法を説明します。また、QuarkusのKafkaコネクターが提供する機能にも注目します。"

#. type: Title ==
#: upstream/_posts/2022-08-30-kafka-serde.adoc:19
#, fuzzy, no-wrap
msgid "Why do I need a custom serializer and deserializer?"
msgstr "なぜカスタムシリアライザーとデシリアライザーが必要なのですか？"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:23
#, fuzzy
msgid "https://javadoc.io/static/org.apache.kafka/kafka-clients/3.2.1/org/apache/kafka/common/serialization/package-summary.html[Kafka] provides a set of serializers and deserializers for the common types: `String`, `Double`, `Integer`, `Bytes`...  But that's rarely enough for business objects, even for objects are simple as:"
msgstr "link:https://javadoc.io/static/org.apache.kafka/kafka-clients/3.2.1/org/apache/kafka/common/serialization/package-summary.html[Kafkaは] 、一般的なタイプのシリアライザーとデシリアライザーのセットを提供します。 `String` `Double` , `Integer` , `Bytes` ... しかし、それはビジネスオブジェクトのために十分であることはほとんどありませんし、オブジェクトのように単純であっても。"

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:27
#: upstream/_posts/2022-08-30-kafka-serde.adoc:164
#, no-wrap
msgid "package me.escoffier.quarkus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:29
#, no-wrap
msgid "public record Hero(String name, String picture) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:31
#: upstream/_posts/2022-08-30-kafka-serde.adoc:190
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:35
#, fuzzy
msgid "Fortunately, Kafka lets us implement our own.  To achieve this, you need to implement the following interfaces:"
msgstr "幸いなことに、Kafkaでは独自に実装することができます。これを実現するためには、以下のインターフェースを実装する必要があります。"

#. type: Block title
#: upstream/_posts/2022-08-30-kafka-serde.adoc:36
#, fuzzy, no-wrap
msgid "The Serializer interface"
msgstr "Serializer インターフェース"

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:40
#, no-wrap
msgid "public interface Serializer<T> extends Closeable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:42
#: upstream/_posts/2022-08-30-kafka-serde.adoc:60
#, no-wrap
msgid "  default void configure(Map<String, ?> configs, boolean isKey) {  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:44
#, no-wrap
msgid "  byte[] serialize(String topic, T data);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:48
#, no-wrap
msgid ""
"  default byte[] serialize(String topic, Headers headers, T data) {\n"
"    return serialize(topic, data);\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:52
#, no-wrap
msgid ""
"  @Override\n"
"  default void close() {   }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_posts/2022-08-30-kafka-serde.adoc:54
#, fuzzy, no-wrap
msgid "The Deserializer interface"
msgstr "デシリアライザーインタフェース"

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:58
#, no-wrap
msgid "public interface Deserializer<T> extends Closeable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:62
#, no-wrap
msgid "  T deserialize(String topic, byte[] data);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:66
#, no-wrap
msgid ""
"  default T deserialize(String topic, Headers headers, byte[] data) {\n"
"    return deserialize(topic, data);\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:69
#, no-wrap
msgid ""
"  @Override\n"
"  default void close() {  }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:73
#, fuzzy
msgid "Once implemented, you need to configure your Kafka producer and consumer's key and value serializer and deserializer.  If you are using the Kafka connector from Quarkus, it will look like this:"
msgstr "実装したら、Kafka プロデューサーとコンシューマーのキーと値のシリアライザーとデシリアライザーを構成する必要があります。QuarkusのKafkaコネクタを使用している場合、次のようになります。"

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:78
#, no-wrap
msgid ""
"mp.messaging.incoming.heroes.value.deserializer=me.escoffier.MyHeroDeserializer\n"
"mp.messaging.outgoing.heroes.value.serializer=me.escoffier.MyHeroSerializer\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:81
#, fuzzy
msgid "But, no worries, Quarkus has a few magic tricks for you."
msgstr "でも、心配はご無用！Quarkusはいくつかのマジックを用意しています。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:83
#, fuzzy
msgid "In the rest of this post, we will use the following application:"
msgstr "この記事の続きでは、以下のアプリケーションを使用します。"

#. type: Target for macro image
#: upstream/_posts/2022-08-30-kafka-serde.adoc:84
#, no-wrap
msgid "/assets/images/posts/kafka-serde/system.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:88
#, fuzzy
msgid "The code can be found on https://github.com/cescoffier/quarkus-kafka-serde-demo.  We will develop three variants:"
msgstr "コードは https://github.com/cescoffier/quarkus-kafka-serde-demo  に掲載されています。3つのバリエーションを開発します。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:90
#, fuzzy
msgid "The first version uses JSON."
msgstr "最初のバージョンは、JSONを使用します。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:91
#, fuzzy
msgid "The second version uses Avro."
msgstr "第2弾はアブロを使用。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:92
#, fuzzy
msgid "The third version uses custom (and dumb) serializer and deserializer."
msgstr "3番目のバージョンは、カスタム（そしてダム）シリアライザおよびデシリアライザを使用しています。"

#. type: Title ==
#: upstream/_posts/2022-08-30-kafka-serde.adoc:93
#, fuzzy, no-wrap
msgid "Using JSON"
msgstr "JSONの使用"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:97
#, fuzzy
msgid "Using JSON with Kafka is very popular.  As most web applications use JSON to exchange messages, using it with Kafka sounds like a natural extension."
msgstr "KafkaでJSONを使用することは非常に人気があります。ほとんどのWebアプリケーションがメッセージのやり取りにJSONを使用しているため、KafkaでJSONを使用することは自然な拡張のように聞こえます。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:101
#, fuzzy
msgid "In our case, it means transforming the instances of https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/json-serde/json-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/Hero.java[Hero] to a JSON document and then using the String serializer.  For the deserialization process, we would do the reverse process.  To do that with Quarkus, you have *nothing* to do: Quarkus generates the custom JSON serializer and deserializer for you."
msgstr "この場合、 link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/json-serde/json-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/Hero.java[Heroの] インスタンスをJSONドキュメントに変換し、Stringシリアライザを使用することを意味します。デシリアライズの処理については、逆の処理を行うことになります。Quarkusでこれを行うには、 *何も* する必要がありません。Quarkusでは、カスタムのJSONシリアライザーとデシリアライザーが生成されます。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:107
#, fuzzy
msgid "In the https://github.com/cescoffier/quarkus-kafka-serde-demo/tree/main/json-serde[json-serde directory], you can find a version of the application using JSON to serialize and deserialize the records.  It does not contain any custom code or configuration.  Quarkus automatically detects that you need to write and consume Heroes and generates the serializer and deserializer for you.  It also configures the channels for you.  Of course, you can override the configuration, but it's what you want most of the time."
msgstr "link:https://github.com/cescoffier/quarkus-kafka-serde-demo/tree/main/json-serde[json-serdeディレクトリ] には、レコードのシリアライズとデシリアライズにJSONを使用したアプリケーションのバージョンがあります。これには、カスタムコードや設定は含まれていません。Quarkusは、Heroesの書き込みと消費が必要であることを自動的に検出し、シリアライザーとデシリアライザーを生成します。また、チャンネルも設定されます。もちろん、設定をオーバーライドすることもできますが、ほとんどの場合、この設定が必要です。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:113
#, fuzzy
msgid "To run this application, open two terminals.  In the first one, navigate to `json-serde/json-serde-publisher`, and run `mvn quarkus:dev`.  In the second terminal, navigate to `json-serde/json-serde-consumer`, and run `mvn quarkus:dev`.  Then, open a browser to http://localhost:8080.  Every 5 seconds, a new picture of a hero is displayed."
msgstr "このアプリケーションを実行するには、2つのターミナルを開いてください。最初の端末で、 `json-serde/json-serde-publisher` に移動し、 `mvn quarkus:dev` を実行します。2番目の端末では、 `json-serde/json-serde-consumer` に移動して、 `mvn quarkus:dev` を実行します。次に、ブラウザで http://localhost:8080  にアクセスする。5秒ごとに、新しいヒーローの写真が表示されます。"

#. type: Target for macro image
#: upstream/_posts/2022-08-30-kafka-serde.adoc:114
#, no-wrap
msgid "/assets/images/posts/kafka-serde/heroes-screenshot.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-08-30-kafka-serde.adoc:116
#, fuzzy, no-wrap
msgid "Using Avro"
msgstr "Avroを使用する"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:120
#, fuzzy
msgid "The second approach uses https://avro.apache.org/[Avro].  Avro has several advantages over (bare) JSON:"
msgstr "2つ目の方法は、 link:https://avro.apache.org/[Avroを] 使用する方法です。Avroには、（素の）JSONに比べていくつかの利点があります。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:122
#, fuzzy
msgid "It's a binary and compact protocol. The payloads will be a lot smaller than with JSON."
msgstr "バイナリでコンパクトなプロトコルです。ペイロードはJSONの場合よりもずっと小さくなる。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:123
#, fuzzy
msgid "The serialization and deserialization processes are a lot faster (avoiding reflection)."
msgstr "シリアライズとデシリアライズの処理がかなり速くなる（リフレクションを回避できる）。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:124
#, fuzzy
msgid "The format of the message is defined using a schema stored on a schema registry which enables versioning and enforces the structure."
msgstr "メッセージのフォーマットは、スキーマレジストリに保存されたスキーマを使用して定義され、バージョン管理および構造の強制が可能になります。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:129
#, fuzzy
msgid "The last point is essential.  To use Avro, you need a schema registry.  In this post, we are using https://www.apicur.io/registry/[Apicurio], but you can use the https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent Schema Registry] or https://github.com/aiven/karapace[Karapace].  Quarkus provides a dev service for Apicurio, so you have nothing to do (as soon as you can run containers on your machine)."
msgstr "最後の点が肝心です。Avro を使用するには、スキーマレジストリが必要です。この記事では link:https://www.apicur.io/registry/[Apicurioを] 使用していますが、 link:https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent Schema Registryや] link:https://github.com/aiven/karapace[Karapaceを] 使用することができます。QuarkusはApicurioの開発サービスを提供しているので、（自分のマシンでコンテナを実行できるようになれば）何もすることはない。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:132
#, fuzzy
msgid "To use Avro, we need a schema.  In https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-consumer/src/main/avro/hero.avsc[hero.avsc], you can find the schema representing our heroes:"
msgstr "Avroを使うにはスキーマが必要です。 link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-consumer/src/main/avro/hero.avsc[hero.avscに] 、ヒーローを表すスキーマがあります。"

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:150
#, no-wrap
msgid ""
"{\n"
"  \"namespace\": \"me.escoffier.quarkus.avro\",\n"
"  \"type\": \"record\",\n"
"  \"name\": \"Hero\",\n"
"  \"fields\": [\n"
"    {\n"
"      \"name\": \"name\",\n"
"      \"type\": \"string\"\n"
"    },\n"
"    {\n"
"      \"name\": \"picture\",\n"
"      \"type\": \"string\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:154
#, fuzzy
msgid "Avro relies on code generation.  It processes the schema to generate Java classes with the defined fields and serialization and deserialization methods."
msgstr "Avroはコード生成に依存しています。スキーマを処理して、定義されたフィールドとシリアライズおよびデシリアライズのメソッドを持つJavaクラスを生成する。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:157
#, fuzzy
msgid "While in general, using code generation is an extra step, with Quarkus, it's built-in! Once you have a schema in `src/main/avro`, it generates the code for you, and you are ready to use the produced classes."
msgstr "一般的に、コード生成の使用は余分なステップですが、Quarkusでは組み込みで使用することができます。スキーマを `src/main/avro` に設定すると、コードが生成され、生成されたクラスを使用する準備が整います。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:160
#, fuzzy
msgid "In https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/AvroPublisherApp.java[AvroPublisherApp] and https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-consumer/src/main/java/me/escoffier/quarkus/AvroConsumerResource.java[AvroConsumerResource], we are using the `Hero` class generated from the schema.  As an example, the consumer application looks like this:"
msgstr "link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/AvroPublisherApp.java[AvroPublisherApp] と link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-consumer/src/main/java/me/escoffier/quarkus/AvroConsumerResource.java[AvroConsumerResource] では、スキーマから生成された `Hero` クラスを使用しています。例として、コンシューマ・アプリケーションは次のようになります。"

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:169
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import me.escoffier.quarkus.avro.Hero;   // Generated class\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.jboss.resteasy.reactive.RestStreamElementType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:174
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:177
#, no-wrap
msgid ""
"@Path(\"/heroes\")\n"
"public class AvroConsumerResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:180
#, no-wrap
msgid ""
"    @Channel(\"heroes\")\n"
"    Multi<Hero> heroes;  // The hero class is generated from the schema.\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:187
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @RestStreamElementType(MediaType.APPLICATION_JSON)\n"
"    public Multi<Hero> stream() {\n"
"        return heroes;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:195
#, fuzzy
msgid "Quarkus automatically finds the serializer and deserializer and configures the channels, so again: *no config*.  However, you still need to instruct Apicurio to register the schema.  In general, it's a manual operation, but for development, you can use the following property:"
msgstr "Quarkusはシリアライザーとデシリアライザーを自動的に検出し、チャンネルを設定するので、これも *設定は* 不要です。ただし、スキーマを登録するようにApicurioに指示する必要があります。一般的には手動で行いますが、開発時には、以下のプロパティを使用します。"

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:199
#, no-wrap
msgid "kafka.apicurio.registry.auto-register=true\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:207
#, fuzzy
msgid "To run this application, open two terminals.  In the first one, navigate to `avro-serde/avro-serde-publisher`, and run `mvn quarkus:dev`.  In the second terminal, navigate to `avro-serde/avro-serde-consumer`, and run `mvn quarkus:dev`.  Then, open a browser to http://localhost:8080.  As for the JSON variant, every 5 seconds, a new picture of a hero is displayed.  This time the Kafka records are serialized using Avro"
msgstr "このアプリケーションを実行するには、2つのターミナルを開いてください。最初のターミナルで、 `avro-serde/avro-serde-publisher` に移動し、 `mvn quarkus:dev` を実行します。2番目の端末では、 `avro-serde/avro-serde-consumer` に移動して、 `mvn quarkus:dev` を実行します。それから、ブラウザーを開いて http://localhost:8080  にアクセスする。JSONのバリエーションとして、5秒ごとに、新しいヒーローの写真が表示されます。今回は、Kafka レコードを Avro"

#. type: Title ==
#: upstream/_posts/2022-08-30-kafka-serde.adoc:208
#, fuzzy, no-wrap
msgid "Writing a custom serializer and deserializer"
msgstr "カスタムシリアライザーとデシリアライザーの書き方"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:212
#, fuzzy
msgid "Of course, you can still write your custom serializer and deserializer.  As mentioned above, you need to implement the `Serializer` and `Deserializer` interfaces."
msgstr "もちろん、カスタムのシリアライザーとデシリアライザーを書くこともできます。前述したように、 `Serializer` と `Deserializer` のインタフェースを実装する必要があります。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:214
#, fuzzy
msgid "For example, the https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/custom-serde/custom-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/HeroSerializer.java[HeroSerializer class] contains a straightforward (and inefficient) approach to serializing our heroes:"
msgstr "例えば、 link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/custom-serde/custom-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/HeroSerializer.java[HeroSerializerクラスは] 、ヒーローをシリアライズするための直接的な（そして非効率的な）アプローチを含んでいます。"

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:218
#, no-wrap
msgid "package me.escoffier.quarkus.json.publisher;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:220
#, no-wrap
msgid "import org.apache.kafka.common.serialization.Serializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:222
#, no-wrap
msgid "import java.nio.charset.StandardCharsets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:224
#, no-wrap
msgid "public class HeroSerializer implements Serializer<Hero> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-kafka-serde.adoc:231
#, no-wrap
msgid ""
"    @Override\n"
"    public byte[] serialize(String topic, Hero data) {\n"
"        return (data.name() + \",\" + data.picture())\n"
"                .getBytes(StandardCharsets.UTF_8);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:234
#, fuzzy
msgid "The https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/custom-serde/custom-serde-consumer/src/main/java/me/escoffier/quarkus/HeroDeserializer.java[HeroDeserializer class] contains the deserialization counterpart."
msgstr "link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/custom-serde/custom-serde-consumer/src/main/java/me/escoffier/quarkus/HeroDeserializer.java[HeroDeserializerクラスは] 、デシリアライズの対応する部分を含んでいます。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:237
#, fuzzy
msgid "As before, Quarkus discovers these implementations and configures the channels for you.  So you do not have to configure anything."
msgstr "これまでと同様に、Quarkusがこれらの実装を検出し、チャンネルを設定します。そのため、何も設定する必要はありません。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:240
#, fuzzy
msgid "Custom serializers and deserializers can receive configuration attributes.  They receive the producer/consumer configuration in the `configure` method."
msgstr "カスタムシリアライザーとデシリアライザーは、構成属性を受け取ることができます。これらは `configure` メソッドでプロデューサ/コンシューマ構成を受け取ります。"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:242
#, fuzzy
msgid "Custom serializers and deserializers cannot be CDI beans. Kafka instantiates them directly using reflection."
msgstr "カスタムシリアライザーとデシリアライザーは、CDIビーンになることはできません。Kafkaはリフレクションを使ってそれらを直接インスタンス化します。"

#. type: Title ==
#: upstream/_posts/2022-08-30-kafka-serde.adoc:243
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:246
msgid "This post explores different possibilities to serialize and deserialize your messages with Kafka and how Quarkus reduces the amount of boilerplate and configuration you need to use."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:248
msgid "So, what should you use?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:250
msgid "JSON is massively used, but the lack of structure verification, by default, can quickly be a problem if the format evolves rapidly."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:251
msgid "Avro provides better performances and handles validation and evolutions. But it requires a schema registry. If your system exchanges lots of messages with evolving structures, Avro should be preferred. Also, Avro produces smaller payloads."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:252
msgid "If you have stringent requirements not covered by the JSON and Avro approaches, you can develop a custom serializer and deserializer."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-kafka-serde.adoc:254
msgid "Note that JSON can be combined with JSON-Schema (with the schema stored on a schema registry). Protobuf is also a possible alternative if you prefer a binary format."
msgstr ""
