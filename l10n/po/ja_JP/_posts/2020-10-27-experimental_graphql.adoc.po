# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-30 23:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, no-wrap
msgid "phillipkruger"
msgstr "phillipkruger"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-27"
msgstr "2020-10-27"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, fuzzy, no-wrap
msgid "Exploring some experimental SmallRye GraphQL features"
msgstr "SmallRye GraphQLの実験的な機能の探索"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, fuzzy, no-wrap
msgid "extension graphql"
msgstr "拡張グラファイト"

#. type: Title =
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:11
#, fuzzy, no-wrap
msgid "Experimental GraphQL"
msgstr "実験的なGraphQL"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:14
#, fuzzy
msgid "This blog post is a follow up on the initial introductory post, link:/blog/supersonic-subatomic-graphql/[Supersonic Subatomic GraphQL], and here we will explore more features, some that is experimental, that we hope to eventually move to the MicroProfile GraphQL Specification (based on your feedback !)"
msgstr "このブログ記事は、最初の紹介記事「 link:/blog/supersonic-subatomic-graphql/[Supersonic Subatomic GraphQL] 」に続くもので、ここでは、最終的にMicroProfile GraphQL仕様に移行したい機能（皆さんのフィードバックに基づく、実験的なもの）をさらに探求していきます !"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:16
#, fuzzy
msgid "We will look at the following:"
msgstr "を見ていきます："

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:18
#, fuzzy
msgid "Operational Context - Optimize your downstream processes."
msgstr "オペレーショナルコンテキスト - 下流工程を最適化します。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:19
#, fuzzy
msgid "Cache - Caching your endpoints."
msgstr "Cache - エンドポイントをキャッシュします。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:20
#, fuzzy
msgid "Asynchronous - Concurrent execution of multiple requests or sources."
msgstr "非同期 - 複数のリクエストまたはソースを同時に実行すること。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:21
#, fuzzy
msgid "Batch - Solving N+1."
msgstr "バッチ - N+1個を解決する。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:22
#, fuzzy
msgid "Generics support."
msgstr "ジェネリック対応。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:23
#, fuzzy
msgid "Events and custom execution."
msgstr "イベントやカスタム実行。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:24
#, fuzzy
msgid "Transformation and mapping."
msgstr "変形と写像。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:25
#, fuzzy
msgid "Build tools - Maven and Gradle support."
msgstr "ビルドツール - MavenとGradleをサポートしています。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:27
#, fuzzy
msgid "All source code is available here: https://github.com/phillip-kruger/graphql-experimental[github.com/phillip-kruger/graphql-experimental]"
msgstr "すべてのソースコードはこちらから入手可能です： link:https://github.com/phillip-kruger/graphql-experimental[github.com/phillip-kruger/graphql-experimental]"

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:28
#, fuzzy, no-wrap
msgid "Operational Context"
msgstr "オペレーショナルコンテキスト"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:31
#, fuzzy
msgid "The Context Object is an experimental Object that can be injected anywhere in your code, downstream from your `@GraphQLApi`."
msgstr "Context Objectは実験的なObjectで、 `@GraphQLApi` の下流にあるコードの任意の場所に注入することができます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:33
#, fuzzy
msgid "It's in the `api` module in SmallRye GraphQL, with the intention to eventually move this up to the MicroProfile GraphQL Api."
msgstr "SmallRye GraphQLの `api` モジュールにあり、最終的にはこれをMicroProfile GraphQL Apiに移行するつもりでいます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:35
msgid "Example:"
msgstr "例:"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:37
#, fuzzy
msgid "We have a Person GraphQL Endpoint, that uses some service to get the person from where ever it is stored."
msgstr "Person GraphQL Endpointがあり、何らかのサービスを利用して、その人が保存されている場所から取得します。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:39
#, fuzzy
msgid "The endpoint:"
msgstr "終点です："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:44
#, no-wrap
msgid ""
"@GraphQLApi\n"
"public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:47
#, no-wrap
msgid ""
"    @Inject\n"
"    PersonService personService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:52
#, no-wrap
msgid ""
"    @Query\n"
"    public List<Person> getPeople(){\n"
"        return personService.getAllPeople();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:58
#, no-wrap
msgid ""
"    @Query\n"
"    public Person getPerson(int id){\n"
"        return personService.getPerson(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:61
#, fuzzy
msgid "A Person is a basic POJO, that can have multiple relationships, that in turn has a Person. So making a call to the database to get a person, can end up retuning more people, depending on the number of relationships. In our example, we have Person 1 that has a `Spouse`, Person 2."
msgstr "Personは基本的なPOJOで、複数のリレーションシップを持つことができ、そのリレーションシップがPersonを持つことになります。そのため、ある人物を取得するためにデータベースを呼び出すと、リレーションシップの数に応じて、より多くの人物が返されることになります。この例では、Person 1が `Spouse` 、Person 2を持っています。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:62
#, fuzzy, no-wrap
msgid "classdiagramm"
msgstr "クラスディアグラム"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:62
#, no-wrap
msgid "PersonClassDiagram.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:66
#, fuzzy
msgid "Now let's assume that `PersonService` makes a call to a database or some other storage to get the data. We can now inject the context object to get details on the request, and optimise our call:"
msgstr "ここで、 `PersonService` 、データを取得するためにデータベースやその他のストレージを呼び出すと仮定します。ここで、コンテキストオブジェクトを注入して、リクエストの詳細を取得し、呼び出しを最適化することができます："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:71
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:73
#, no-wrap
msgid "    @Inject Context context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:78
#, no-wrap
msgid ""
"    public Person getPerson(int id){\n"
"        // Use context to get more information on the query\n"
"        // Let's print out the context here and see what we have\n"
"        System.out.println(context);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:82
#, no-wrap
msgid ""
"        // Get the person from the datastore here.\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:85
#, fuzzy
msgid "Let's do a `Query` to get the name and surname of Person 1:"
msgstr "`Query` をして、Person 1 の名前と苗字を取得してみましょう："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:94
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:96
#, fuzzy, no-wrap
msgid "So what can you get from context ?"
msgstr "では、コンテクストから何を得ることができるのでしょうか？"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:99
#, fuzzy
msgid "There are a few things we can get:"
msgstr "もらえるものがいくつかあるんです："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:119
#, no-wrap
msgid ""
"executionId = 30337360\n"
"request = {\"query\":\"{\\n  person(id:1){\\n    names\\n    surname\\n  }\\n}\",\"variables\":null}\n"
"operationName = null\n"
"operationTypes = [Query]\n"
"parentTypeName = Query\n"
"variables = null\n"
"query = {\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"  }\n"
"},\n"
"fieldName = person\n"
"selectedFields = [\"names\",\"surname\"]\n"
"source = null\n"
"arguments = {id=1}\n"
"path = /person\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:122
#, fuzzy
msgid "What we probably want to know is which fields have been requested, so that we can do a better database query."
msgstr "私たちが知りたいのは、どのフィールドがリクエストされたかであり、それによってより良いデータベースクエリーを行うことができる。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:124
#, fuzzy
msgid "So the fieldName (`person`) and the selectedFields (`names`,`surname`) is what we need."
msgstr "つまり、fieldName ( `person` ) と selectedFields ( `names` , `surname` ) が必要なものです。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:126
#, fuzzy
msgid "A more complex GraphQL Request, will then lead to a more complex datasource query, example, if we want to know the relationships we would do:"
msgstr "より複雑なGraphQL Requestは、より複雑なデータソースクエリにつながります。例えば、関係性を知りたい場合は、次のようにします："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:142
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    relations{\n"
"      relationType\n"
"      person{\n"
"        names\n"
"        surname\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:145
#, fuzzy
msgid "That will give us this in the `Context` selectedFields:"
msgstr "そうすると、 `Context` selectedFieldsにこのように表示されます："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:166
#, no-wrap
msgid ""
"[\n"
"   \"names\",\n"
"   \"surname\",\n"
"   {\n"
"      \"relations\":[\n"
"         {\n"
"            \"relationType\":[\n"
"            ]\n"
"         },\n"
"         {\n"
"            \"person\":[\n"
"               \"names\",\n"
"               \"surname\"\n"
"            ]\n"
"         }\n"
"      ]\n"
"   }\n"
"]\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:168
#, fuzzy, no-wrap
msgid "Context in source methods"
msgstr "ソースメソッドにおけるコンテキスト"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:171
#, fuzzy
msgid "Let's add a field to person using `@Source` and see what the context can give us then. First we will add a service that fetches the exchange rate from an api (http://exchangeratesapi.io/[exchangeratesapi.io]). This allows us to add the exchange rate for that person against some currency."
msgstr "`@Source` を使って person にフィールドを追加し、コンテキストが何を与えてくれるかを見てみましょう。まず、為替レートをAPI（ link:http://exchangeratesapi.io/[exchangeangeratesapi.] io）からフェッチするサービスを追加します。これにより、ある通貨に対するその人の為替レートを追加することができます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:173
#, fuzzy
msgid "In Java we add this `Source` method:"
msgstr "Javaでは、この `Source` メソッドを追加します："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:181
#, no-wrap
msgid ""
"public ExchangeRate getExchangeRate(@Source Person person, CurencyCode against){\n"
"    Map<CurencyCode, Double> map = exchangeRateService.getExchangeRates(against);\n"
"    Double rate = map.get(person.curencyCode);\n"
"    return new ExchangeRate(person.curencyCode, against, rate);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:184
#, fuzzy
msgid "Now we can query that (`ExchangeRate`) field:"
msgstr "これで、その ( `ExchangeRate` ) フィールドに問い合わせができるようになりました："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:196
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:199
#, fuzzy
msgid "When we `Inject` and print the context in the `ExchangeRateService` we now get:"
msgstr "`Inject` でコンテキストを印刷すると、今度は `ExchangeRateService` になります："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:223
#, no-wrap
msgid ""
"executionId = 17333236733\n"
"request = {\"query\":\"{\\n  person(id:1){\\n    names\\n    surname\\n    exchangeRate(against:GBP){\\n      rate\\n    }\\n  }\\n}\",\"variables\":null}\n"
"operationName = null\n"
"operationTypes = [Query]\n"
"parentTypeName = Person\n"
"variables = null\n"
"query = {\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"  }\n"
"}\n"
"fieldName = exchangeRate\n"
"selectedFields = [\"rate\"]\n"
"source = com.github.phillipkruger.user.model.Person@7929ad0a\n"
"arguments = {against=GBP}\n"
"fieldName = exchangeRate\n"
"path = /person/exchangeRate\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:226
#, fuzzy
msgid "Note that the fieldName is now `exchangeRate` and the selectedFields is `[\"rate\"]`. You will also note that the source field is populated with the person."
msgstr "fieldName が `exchangeRate` になり、selectedFields が `[\"rate\"]` になっていることに注意してください。また、sourceフィールドにはpersonが入力されていることに注意してください。"

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:227
#, no-wrap
msgid "Cache"
msgstr "Cache"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:230
#, fuzzy
msgid "Another question that comes up regularly is how can you cache your endpoint results. As an example, let's say the Exchange Rate information can be updated daily, so we do not want to make a call to the http://exchangeratesapi.io/[exchangeratesapi.io] for every call."
msgstr "定期的に出てくるもう一つの質問は、エンドポイントの結果をどのようにキャッシュできるかということです。例として、為替レート情報が毎日更新される可能性があるため、呼び出しのたびに link:http://exchangeratesapi.io/[exchangeangeratesapi.] ioを呼び出すのは避けたいと考えてみましょう。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:232
#, fuzzy
msgid "You can just use the caching that comes with Quarkus! Simply include the cache extension:"
msgstr "Quarkusに付属しているキャッシュを使用すればよいのです！単にcacheエクステンションを含めるだけです："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:239
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-cache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:242
#, fuzzy
msgid "And add the `@CacheResult` annotation to your method:"
msgstr "そして、 `@CacheResult` アノテーションをメソッドに追加してください："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:251
#, no-wrap
msgid ""
"@CacheResult(cacheName = \"exchange-rate-cache\")\n"
"public ExchangeRate getExchangeRate(@Source Person person, CurencyCode against){\n"
"    Map<CurencyCode, Double> map = exchangeRateService.getExchangeRates(against);\n"
"    Double rate = map.get(person.curencyCode);\n"
"    return new ExchangeRate(person.curencyCode, against, rate);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:254
#, fuzzy
msgid "Read more about caching in Quarkus here: https://quarkus.io/guides/cache[quarkus.io/guides/cache]"
msgstr "Quarkusのキャッシュについて詳しくはこちら： link:https://quarkus.io/guides/cache[quarkus.io/guides/cache]"

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:255
#, fuzzy, no-wrap
msgid "Asynchronous"
msgstr "非同期"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:258
#, fuzzy
msgid "Now, let's add another service that returns the weather conditions for a city:"
msgstr "では、もう一つ、ある都市の天気を返すサービスを追加してみましょう："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:263
#, no-wrap
msgid ""
"@GraphQLApi\n"
"public class TravelEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:266
#, no-wrap
msgid ""
"    @Inject\n"
"    WeatherService weatherService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:271
#, no-wrap
msgid ""
"    @Query\n"
"    public Weather getWeather(String city){\n"
"        return weatherService.getWeather(city);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:273
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:276
#, fuzzy
msgid "Let's say this person is traveling to London, you can now do something like this:"
msgstr "例えばこの人がロンドンに旅行するとすると、こんなことができるようになりました："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:293
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"  }\n"
"  weather(city:\"London\"){\n"
"    description\n"
"    min\n"
"    max\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:296
#, fuzzy
msgid "At the moment the person and weather query will execute sequentially, and there is no real reason that this should be the case. We can get the weather at the same time that we get the person."
msgstr "現時点では、人物と天気のクエリは順次実行されますが、そうでなければならない本当の理由はありません。人物を取得するのと同時に天気を取得することも可能です。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:297
#, fuzzy, no-wrap
msgid "async1"
msgstr "アシンクワン"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:297
#, no-wrap
msgid "async1.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:300
#, fuzzy
msgid "Let's change the java code:"
msgstr "javaのコードを変えてみましょう："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:307
#, no-wrap
msgid ""
"@Query\n"
"public CompletableFuture<Person> getPerson(int id){\n"
"    return CompletableFuture.supplyAsync(() -> personService.getPerson(id));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:310
msgid "and"
msgstr "および"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:317
#, no-wrap
msgid ""
"@Query\n"
"public CompletableFuture<Weather> getWeather(String city){\n"
"    return weatherService.getWeather(city);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:320
#, fuzzy
msgid "Now person and weather are being fetched concurrently."
msgstr "現在、人物と天候が同時に取得されています。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:322
#, fuzzy
msgid "Let's say this person actually wants to travel to London _and_ New York, we can do something like this:"
msgstr "この人が実際に _ロンドンと_ ニューヨークに旅行に行きたいとすると、次のようなことができます："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:347
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    gbp:exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"    usd:exchangeRate(against:USD){\n"
"      rate\n"
"    }\n"
"  }\n"
"  uk:weather(city:\"London\"){\n"
"    description\n"
"    min\n"
"    max\n"
"  }\n"
"  us:weather(city:\"New York\"){\n"
"    description\n"
"    min\n"
"    max\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:350
#, fuzzy
msgid "We can now change the code to also fetch the exchange rates concurrently:"
msgstr "これで、為替レートも同時に取得するようにコードを変更することができます："

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:351
#, fuzzy, no-wrap
msgid "async2"
msgstr "非同期2"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:351
#, no-wrap
msgid "async2.png"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:358
#, no-wrap
msgid ""
"public CompletableFuture<ExchangeRate> getExchangeRate(@Source Person person, CurencyCode against){\n"
"    return CompletableFuture.supplyAsync(() -> exchangeRateService.getExchangeRate(against,person.curencyCode));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:360
#, fuzzy, no-wrap
msgid "Batch"
msgstr "バッチ"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:363
#, fuzzy
msgid "If you want to get ALL people, and you are including a field (like `exchangeRate`) with a `Source` method, it means that for every person, we will call the `getExchangeRate` method. Depending on the number of people, that could be a lot of calls. So you might rather want to do a batch source method."
msgstr "ALL人を取得したい場合、フィールド（ `exchangeRate` ）に `Source` メソッドを含めている場合、すべての人に対して、 `getExchangeRate` メソッドを呼び出すということになります。人数によっては、かなりの回数の呼び出しになる可能性があります。ですから、むしろバッチソースメソッドにした方がいいかもしれません。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:364
#, fuzzy, no-wrap
msgid "batch"
msgstr "バッチ"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:364
#, no-wrap
msgid "batch.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:367
#, fuzzy
msgid "This will allow you to get all the people in one method and do one call to get their exchange rates."
msgstr "これによって、1つの方法ですべての人を集め、彼らの交換レートを得るために1つの電話を行うことができるようになります。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:369
#, fuzzy
msgid "So, let's change the `getExchangeRate` method to take a `List` of person and return a `List` of `ExchangeRate`:"
msgstr "そこで、 `getExchangeRate` のメソッドを、person の `List` を受け取り、 `List` の `ExchangeRate` を返すように変更してみましょう："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:374
#, no-wrap
msgid ""
"public List<ExchangeRate> getExchangeRate(@Source List<Person> people, CurencyCode against){\n"
"    Map<CurencyCode, Double> map = exchangeRateService.getExchangeRates(against);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:380
#, no-wrap
msgid ""
"    List<ExchangeRate> rates = new ArrayList<>();\n"
"    for(Person person : people){\n"
"        Double rate = map.get(person.curencyCode);\n"
"        rates.add(new ExchangeRate(person.curencyCode, against, rate));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:383
#, no-wrap
msgid ""
"    return rates;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:386
#, fuzzy
msgid "Above will still work on `getPerson` method where there is only one person."
msgstr "上記は、1人しかいない `getPerson` 方式でも動作します。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:388
#, fuzzy
msgid "Doing a query on all people:"
msgstr "すべての人にクエリを行うこと："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:400
#, no-wrap
msgid ""
"{\n"
"  people{\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:403
#, fuzzy
msgid "This will call the `getExchangeRate` method with all people."
msgstr "これにより、すべての人で `getExchangeRate` メソッドを呼び出します。"

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:404
#, fuzzy, no-wrap
msgid "Generics"
msgstr "ジェネリック医薬品"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:407
#, fuzzy
msgid "It's the year 2050 and we need to extend our travel service to also cater for aliens. Let's add a generic `Being` type:"
msgstr "2050年、私たちは旅行サービスを拡張して、宇宙人にも対応する必要があります。一般的な `Being` タイプを追加してみましょう："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:411
#, no-wrap
msgid "public class Being<T> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:413
#, no-wrap
msgid "    private T being;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:416
#, no-wrap
msgid ""
"    public Being() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:420
#, no-wrap
msgid ""
"    public Being(T being) {\n"
"        this.being = being;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:424
#, no-wrap
msgid ""
"    public T getBeing() {\n"
"        return being;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:429
#, no-wrap
msgid ""
"    public void setBeing(T being) {\n"
"        this.being = being;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:432
#, fuzzy
msgid "And now change the Endpoint to allow people and alien queries:"
msgstr "そして、今度は「Endpoint」を「people and alien queries」を許可するように変更します："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:439
#, no-wrap
msgid ""
"@Query\n"
"public Being<Person> getPerson(int id){\n"
"    return new Being<>(personService.getPerson(id));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:444
#, no-wrap
msgid ""
"@Query\n"
"public Being<Alien> getAlien(int id){\n"
"    return new Being<>(alienService.getAlien(id));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:447
#, fuzzy
msgid "We can then query both human and alien beings:"
msgstr "そうすれば、人間も宇宙人も問い合わせることができる："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:464
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    being{\n"
"      names\n"
"      surname\n"
"    }\n"
"  }\n"
"  alien(id:1){\n"
"    being{\n"
"      type\n"
"      from\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:466
#, fuzzy, no-wrap
msgid "Events and custom execution"
msgstr "イベントとカスタム実行"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:470
#, fuzzy
msgid "Events are used internally when you enable integration with MicroProfile Metrics, MicroProfile OpenTracing and Bean Validation, but you can also take part in these events.  These are all CDI Events and can be used with the `@Observes` annotation."
msgstr "イベントは、MicroProfile Metrics、MicroProfile OpenTracing、および Bean Validation との統合を有効にするときに内部的に使用されますが、これらのイベントに参加することも可能です。これらはすべて CDI イベントであり、 `@Observes` アノテーションと一緒に使用できます。"

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:471
#, fuzzy, no-wrap
msgid "While building the schema"
msgstr "スキーマを構築しながら"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:474
#, fuzzy
msgid "When we scan the classpath for annotations and types, we build up a https://github.com/smallrye/smallrye-graphql/tree/main/common/schema-model[model] of all the operations. You can manipulate this model by taking part in the _create operation_ event:"
msgstr "クラスパスをスキャンしてアノテーションや型を探すと、すべての操作の link:https://github.com/smallrye/smallrye-graphql/tree/main/common/schema-model[モデルが] 構築されます。このモデルは、 _create operation_ イベントに参加することで操作することができます："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:481
#, no-wrap
msgid ""
"public Operation createOperation(@Observes Operation operation) {\n"
"    // Here manipulate operation\n"
"    return operation;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:485
#, fuzzy
msgid "Just before the final schema is built, after scanning all annotations and after the above event, you can _take part_ and contribute to the schema: This exposes the underlying `graphql-java` implementation details, and can be useful when you want to do things that are not yet implemented in SmallRye GraphQL, like subscriptions for instance:"
msgstr "最終的なスキーマが構築される直前、すべてのアノテーションをスキャンした後、上記のイベントの後、スキーマに _参加_ し、貢献することができます：これにより、基盤となる `graphql-java` の実装の詳細が公開され、例えばサブスクリプションのように SmallRye GraphQL にまだ実装されていないことを行いたい場合に役立ちます："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:492
#, no-wrap
msgid ""
"public GraphQLSchema.Builder beforeSchemaBuild(@Observes GraphQLSchema.Builder builder) {\n"
"    // Here add you own, in example a subscription\n"
"    return builder;\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:494
#, fuzzy, no-wrap
msgid "While running a request"
msgstr "リクエスト実行中"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:496
#, fuzzy, no-wrap
msgid "events"
msgstr "催し物"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:496
#, no-wrap
msgid "events.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:499
#, fuzzy
msgid "In this example request:"
msgstr "この例のリクエストでは"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:512
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:USD){\n"
"      rate\n"
"      base\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:515
#, fuzzy
msgid "the request flow is as follows:"
msgstr "の場合、リクエストの流れは以下のようになります："

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:517
#, fuzzy
msgid "The Execution service gets the request."
msgstr "実行サービスは、リクエストを取得します。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:518
#, fuzzy
msgid "The person is being fetched with a `datafetcher`."
msgstr "その方は、 `datafetcher` でフェッチされています。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:519
#, fuzzy
msgid "Your CDI bean (`@GraphQLApi`) method (`getPerson`) is being invoked."
msgstr "あなたのCDI Bean ( `@GraphQLApi` ) メソッド ( `getPerson` ) が呼び出されます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:520
#, fuzzy
msgid "The exchange rate is being fetched, passing the above person as an argument."
msgstr "上記の方を引数として渡しながら、為替レートを取得しています。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:521
#, fuzzy
msgid "Your CDI bean (`@GraphQLApi`) method (`getExchangeRate`) is being invoked."
msgstr "あなたのCDI Bean ( `@GraphQLApi` ) メソッド ( `getExchangeRate` ) が呼び出されます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:522
#, fuzzy
msgid "Data is being returned."
msgstr "データが返ってきている。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:524
#, fuzzy
msgid "You can receive events on all of these points:"
msgstr "これらすべてのポイントについて、イベントを受けることができます："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:530
#, no-wrap
msgid ""
"public void beforeExecute(@Observes @BeforeExecute Context context) {\n"
"    System.err.println(\">>>>> Received beforeExecute event [\" + context.getQuery() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:534
#, no-wrap
msgid ""
"public void beforeDataFetch(@Observes @BeforeDataFetch Context context) {\n"
"    System.err.println(\">>>>> Received beforeDataFetch event [\" + context.getQuery() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:538
#, no-wrap
msgid ""
"public void beforeInvoke(@Observes InvokeInfo invokeInfo) {\n"
"    System.err.println(\">>>>> Received beforeInvoke event [\" + invokeInfo.getOperationMethod().getName() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:542
#, no-wrap
msgid ""
"public void afterDataFetch(@Observes @AfterDataFetch Context context) {\n"
"    System.err.println(\">>>>> Received afterDataFetch event [\" + context.getQuery() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:546
#, no-wrap
msgid ""
"public void afterExecute(@Observes @AfterExecute Context context) {\n"
"    System.err.println(\">>>>> Received afterExecute event [\" + context.getQuery() + \"]\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:549
#, fuzzy
msgid "You can also get events when an error occurs:"
msgstr "また、エラー発生時にイベントを取得することも可能です："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:555
#, no-wrap
msgid ""
"public void errorExecute(@Observes @ErrorExecute ErrorInfo errorInfo) {\n"
"    System.err.println(\">>>>> Received errorExecute event [\" + errorInfo.getT() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:559
#, no-wrap
msgid ""
"public void errorDataFetch(@Observes @ErrorDataFetch ErrorInfo errorInfo) {\n"
"    System.err.println(\">>>>> Received errorDataFetch event [\" + errorInfo.getT() + \"]\");\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:561
#, fuzzy, no-wrap
msgid "Using the Execution Service directly"
msgstr "実行サービスを直接使用する場合"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:564
#, fuzzy
msgid "The default assumed behavior is to interact with your endpoint via HTTP, you can however inject the `ExecutionService` yourself and execute requests."
msgstr "デフォルトの想定動作は、HTTP経由でエンドポイントと対話することですが、 `ExecutionService` を自分で注入してリクエストを実行することができます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:566
#, fuzzy
msgid "As an example, lets do a request that gets all the names of all the people on startup:"
msgstr "例として、スタートアップのすべての人の名前を取得するリクエストを考えてみましょう："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:574
#, no-wrap
msgid ""
"{\n"
"  people{\n"
"    names\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:577
#, fuzzy
msgid "We can now do this:"
msgstr "できるようになりました："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:582
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class StartupService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:584
#, no-wrap
msgid "    @Inject ExecutionService executionService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:586
#, no-wrap
msgid "    public void init(@Observes StartupEvent event){\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:591
#, no-wrap
msgid ""
"        JsonObjectBuilder builder = Json.createObjectBuilder();\n"
"        builder.add(\"query\", ALL_NAMES);\n"
"        JsonObject request = builder.build();\n"
"        JsonObject response = executionService.execute(request);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:593
#, no-wrap
msgid "        System.err.println(\">>>>> \" + response);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:595
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:602
#, no-wrap
msgid ""
"    private static final String ALL_NAMES = \"{\\n\" +\n"
"                                            \"people{\\n\" +\n"
"                                            \"    names\\n\" +\n"
"                                            \"  }\\n\" +\n"
"                                            \"}\";\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:604
#, fuzzy, no-wrap
msgid "Transformation and mapping"
msgstr "トランスフォーメーションとマッピング"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:607
#, fuzzy
msgid "By default, Date and Number values can be transformed using https://javaee.github.io/jsonb-spec/docs/user-guide.html#date-number-formats[JsonB Formats]"
msgstr "デフォルトでは、DateとNumberの値は、 link:https://javaee.github.io/jsonb-spec/docs/user-guide.html#date-number-formats[JsonB Formatsを] 使用して変換することができます。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:612
#, no-wrap
msgid ""
"public class Person {\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:615
#, no-wrap
msgid ""
"    @JsonbDateFormat(\"dd.MM.yyyy\")\n"
"    private Date birthDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:619
#, no-wrap
msgid ""
"    @JsonbNumberFormat(\"#0.00\")\n"
"    public BigDecimal salary;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:622
#, fuzzy
msgid "MicroProfile GraphQL Specification maps the relevant Java types to a GraphQL Scalar. You can change the mapping of an existing field to map to another Scalar type like this:"
msgstr "MicroProfile GraphQL Specification は、関連する Java タイプを GraphQL Scalar にマッピングします。既存のフィールドのマッピングを変更して、次のように別の Scalar タイプにマッピングすることができます："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:627
#, no-wrap
msgid ""
"@ToScalar(Scalar.Int.class)\n"
"Long id; // This usually maps to BigInteger\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:630
#, fuzzy
msgid "In the GraphQL Schema this will now map to an `int`."
msgstr "GraphQL Schema では、これは `int` に対応することになります。"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:632
#, fuzzy
msgid "You can also add an Object that should transform to a `Scalar` Type and not a complex object, example you might have an `Email` Object, but do not want to use a complex type in GraphQL, and rather map this to a `String`:"
msgstr "また、複雑なオブジェクトではなく、 `Scalar` タイプに変換するオブジェクトを追加することもできます。たとえば、 `Email` オブジェクトがありますが、GraphQL で複雑なタイプを使用したくない場合は、これを `String` にマッピングします："

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:634
#, fuzzy
msgid "To do this your `Email` POJO needs to implement the `toString` method and have a constructor that takes a String, or a static `Email fromString(String s)` method, or a `setValue(String value)` method."
msgstr "そのためには、 `Email` POJOが `toString` メソッドを実装し、String、static `Email fromString(String s)` メソッド、 `setValue(String value)` メソッドを受け取るコンストラクタを持つことが必要です。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:639
#, no-wrap
msgid ""
"public class Email {\n"
"    private String value;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:642
#, no-wrap
msgid ""
"    public Email() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:646
#, no-wrap
msgid ""
"    public Email(String value) {\n"
"        this.value = value;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:650
#, no-wrap
msgid ""
"    public String getValue() {\n"
"        return value;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:654
#, no-wrap
msgid ""
"    public void setValue(String value) {\n"
"        this.value = value;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:660
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return value;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:663
#, fuzzy
msgid "You can then use this as a field on your Response and add the `@ToScalar` annotation, i.e. person:"
msgstr "これをResponseのフィールドとして使用し、 `@ToScalar` アノテーション（例：person）を追加します："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:668
#, no-wrap
msgid ""
"@ToScalar(Scalar.String.class)\n"
"Email email; // This usually maps to a complex object\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:670
#, fuzzy, no-wrap
msgid "Build tools"
msgstr "ビルドツール"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:673
#, fuzzy
msgid "Lastly, support has been added to generate the schema on https://github.com/smallrye/smallrye-graphql/tree/main/tools[build] using https://github.com/smallrye/smallrye-graphql/tree/main/tools/maven-plugin[`maven`] (or https://github.com/smallrye/smallrye-graphql/tree/main/tools/gradle-plugin[`gradle`])."
msgstr "最後に、 link:https://github.com/smallrye/smallrye-graphql/tree/main/tools[ビルド] 時にスキーマを生成するためのサポートとして link:https://github.com/smallrye/smallrye-graphql/tree/main/tools/maven-plugin[`maven`] (または link:https://github.com/smallrye/smallrye-graphql/tree/main/tools/gradle-plugin[`gradle`] )."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:675
#, fuzzy
msgid "Example, in `maven` you can add this to your `pom.xml`:"
msgstr "例） `maven` で、これを `pom.xml` に追加することができます："

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:689
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>smallrye-graphql-maven-plugin</artifactId>\n"
"    <groupId>io.smallrye</groupId>\n"
"    <executions>\n"
"        <execution>\n"
"            <goals>\n"
"                <goal>generate-schema</goal>\n"
"            </goals>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:691
#, fuzzy
msgid "and the generated schema will be stored in `target/generated/`."
msgstr "で、生成されたスキーマは `target/generated/` に格納されます。"
