msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Cryostat^] is a profiling and monitoring tool that leverages the\n"
"https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u[JDK Flight Recorder^] (JFR) framework already present in your Java applications\n"
"running on the HotSpot JVM. Cryostat provides an in-cluster collection hub for easy and secure access to your JDK Flight Recorder data from outside the cluster. Cryostat is\n"
"a cloud-native application primarily targeting deployment on OpenShift, so this guide will assume you are also deploying your Quarkus applications to OpenShift for simplicity."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"In this article we will explore how to configure Quarkus applications to allow Cryostat to connect to them, allowing Cryostat to communicate with Quarkus and provide its\n"
"JDK Flight Recorder collection, storage, and analysis tooling."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"Quarkus famously has the ability to be built in standard JVM mode (the build produces .JAR files to be loaded and run by the JVM at runtime) or native mode (the build produces\n"
"a native binary to be directly executed). Cryostat relies upon both JDK Flight Recorder (JFR), which is only partially supported in Quarkus native mode, and JDK Management Extensions\n"
"(JMX), which is not supported in native mode at the time of writing. This means that, unfortunately, only JVM-mode Quarkus applications can be configured for use with Cryostat."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"Then create a Cryostat CR resource instance to let the Operator know you'd like to deploy a Cryostat instance. At this stage you can also choose some configuration options, but\n"
"we'll assume the defaults for now."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"Cryostat uses JMX to talk to applications running on the HotSpot JVM, including but not limited to Java and Scala applications. JMX is a standard Java technology that allows\n"
"tools to connect to applications and perform actions or retrieve data across a variety of underlying transport protocols. If you build and deploy your Quarkus application in JVM\n"
"mode then JMX support is already built-in and ready out of the box. There are two ways to enable JMX on your application."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"-Dcom.sun.management.jmxremote\n"
"-Dcom.sun.management.jmxremote.port=${RJMX_PORT}\n"
"-Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT}\n"
"-Djava.rmi.server.hostname=127.0.0.1\n"
"-Dcom.sun.management.jmxremote.authenticate=false\n"
"-Dcom.sun.management.jmxremote.ssl=false\n"
"-Dcom.sun.management.jmxremote.local.only=false"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"Where `+${RJMX_PORT}+` is replaced with your chosen port number for the remote JMX network connection over RMI. In this example we disable JMX authentication and JMX SSL - in\n"
"practice these should both be enabled for security reasons, but configuring these particular options is out of scope for this guide. Please see\n"
"https://docs.oracle.com/javadb/10.10.1.2/adminguide/radminjmxenablepwdssl.html[this document^] for further information."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid "JAVA_OPTS_APPEND=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false\""
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"If you are running your Quarkus application in OpenShift or Kubernetes then try setting this environment variable in your `+Deployment+` or `+DeploymentConfig+`, nested\n"
"within the `+Spec+` for the application's `+Container+`. This method of enabling JMX does not require the Quarkus application to be rebuilt, only to be redeployed."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"The same JVM system properties as before can be added to containerized Quarkus applications by editing the `+Dockerfile.jvm+` under `+src/main/docker/+`. Below is a sample\n"
"`+Dockerfile.jvm+` from a basic Quarkus project - pay attention to the `+ENV JAVA_OPTS_APPEND+` line that has been added to append the JVM properties and expose the port number:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"FROM registry.access.redhat.com/ubi8/openjdk-11:1.11\n"
"\n"
"ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'\n"
"\n"
"\n"
"# We make four distinct layers so if there are application changes the library layers can be re-used\n"
"COPY --chown=185 target/quarkus-app/lib/ /deployments/lib/\n"
"COPY --chown=185 target/quarkus-app/*.jar /deployments/\n"
"COPY --chown=185 target/quarkus-app/app/ /deployments/app/\n"
"COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/\n"
"\n"
"EXPOSE 8080 ${RJMX_PORT}\n"
"USER 185\n"
"ENV JAVA_OPTS=\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\"\n"
"ENV JAVA_OPTS_APPEND=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false\"\n"
"ENV JAVA_APP_JAR=\"/deployments/quarkus-run.jar\""
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"Now that we have enabled JMX on our Quarkus application and redeployed it, it is ready to talk to Cryostat. Before this can happen, however, Cryostat needs to know how and where\n"
"to find the application. There are two ways to achieve this: automatic discovery and custom targets. Automatic discovery is the preferred method and is enabled by default. Custom\n"
"targets can be used to fill in gaps for deployed application targets that do not meet the criteria for automatic discovery, but which are known to be reachable over the network."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"Cryostat can discover target applications automatically and use their discovered Remote JMX service URLs to connect. Automatic discovery depends on the deployment platform - at\n"
"the time of writing, Cryostat will use the OpenShift/Kubernetes API to discover `+Endpoints+` objects when deployed on OpenShift/Kubernetes. If no OpenShift/Kubernetes API server\n"
"is available then Cryostat falls back to using the Java Discovery Protocol (JDP). In any case the automatically discovered targets are merged with the custom targets. If\n"
"OpenShift/Kubernetes `+Endpoints+` discovery is used then the target application should have an associated `+Service+` object that exposes a port for cluster-internal JMX traffic.\n"
"This port must either use the port number 9091 or have the name `+jfr-jmx+` for Cryostat to pick it up as an intended target application."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"This is a way for Cryostat clients (end users or other automated tooling) to tell Cryostat how and where to find a single target application instance. A Custom Target definition\n"
"is at its core simply a network-reachable remote connection JMX URL and a human-readable alias. These can be created in the Cryostat web client by clicking the `+++` (Plus) icon\n"
"on the target selection dropdown or by using your preferred HTTP client:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
msgid ""
"curl \\\n"
"  -X POST \\\n"
"  -F alias=myapp \\\n"
"  -F connectUrl=service:jmx:rmi:///jndi/rmi://myapp.my-openshift-cluster.example.com:1234/jmxrmi \\\n"
"  https://cryostat.my-openshift-cluster.example.com/api/v2/targets"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:1
#, no-wrap
msgid "Introduction to Cryostat for Quarkus developers and step-by-step guide on configuring Quarkus applications for Cryostat compatibility"
msgstr "Quarkus開発者向けのCryostatの紹介と、Cryostat互換のためのQuarkusアプリケーションの設定に関するステップバイステップガイド"

#. type: Title =
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:11
#, no-wrap
msgid "Monitoring Quarkus JVM Mode With Cryostat"
msgstr "CryostatでQuarkusのJVMモードを監視"

#. type: Block title
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:21
#, no-wrap
msgid "Cryostat Automated Analysis Report"
msgstr "クライオスタット自動分析レポート"

#. type: Block title
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:24
#, no-wrap
msgid "Cryostat Grafana Dashboard"
msgstr "Cryostat Grafana Dashboard"

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:27
#, no-wrap
msgid "Caveats for Cryostat with Quarkus"
msgstr "Quarkusを使用したCryostatの注意点"

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:33
#, no-wrap
msgid "Getting Started with Cryostat"
msgstr "Cryostat入門"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:36
msgid "Getting started with Cryostat on OpenShift is quick and easy - just install it from OperatorHub:"
msgstr "OpenShiftでCryostatを始めるには、OperatorHubからインストールするだけで、素早く簡単にできます。"

#. type: Block title
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:37
#, no-wrap
msgid "Cryostat Installation"
msgstr "Cryostatインストール"

#. type: Block title
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:43
#, no-wrap
msgid "Cryostat Creation"
msgstr "Cryostat作成"

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:46
#, no-wrap
msgid "Cryostat Communication"
msgstr "Cryostat通信"

#. type: Title ===
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:52
#, no-wrap
msgid "Method 1: Enable it at runtime"
msgstr "方法1：実行時に有効化"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:55
msgid "JMX can be enabled by setting JVM system properties:"
msgstr "JMXは、JVMのシステムプロパティを設定することで有効にすることができます。"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:71
msgid "Quarkus uses a feature-rich application startup script, which allows us to add JVM system properties at runtime by simply setting an environment variable:"
msgstr "Quarkusでは、機能豊富なアプリケーション起動スクリプトを使用しており、環境変数を設定するだけで、実行時にJVMシステムプロパティを追加することができます。"

#. type: Title ===
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:79
#, no-wrap
msgid "Method 2: Enable it at build time"
msgstr "方法2：ビルド時に有効化"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:104
msgid "Again, be sure to replace `+${RJMX_PORT}+` on all lines with a port number in this file."
msgstr "繰り返しますが、このファイルでは、すべての行の `${RJMX_PORT}` をポート番号に置き換えてください。"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:106
msgid "This method is less flexible because it requires the remote JMX port number to be known at build time, and it requires the application to be rebuilt and redeployed."
msgstr "この方法は、ビルド時にリモートのJMXポート番号を知っている必要があり、アプリケーションを再構築して再デプロイする必要があるため、柔軟性に欠けます。"

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:107
#, no-wrap
msgid "Cryostat Discovery"
msgstr "Cryostatディスカバリー"

#. type: Title ===
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:113
#, no-wrap
msgid "Automatic Discovery"
msgstr "オートディスカバリー"

#. type: Title ===
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:121
#, no-wrap
msgid "Custom Targets"
msgstr "カスタムターゲット"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:136
msgid "Once a custom target definition is added the `+connectUrl+` can be used as a `+targetId+` URL parameter anywhere one is expected in the Cryostat HTTP API."
msgstr "`targetId` カスタムターゲット定義が追加されると、 `connectUrl` URLパラメータとして、Cryostat HTTP APIで期待される任意の場所で使用することができます。"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:138
msgid "Please see the following links for further information on Cryostat:"
msgstr "Cryostatの詳細については、以下のリンクをご覧ください。"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:140
msgid "https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Introduction to Cryostat on the Red Hat Developers blog^]"
msgstr "link:https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Red Hat DevelopersブログでのCryostatの紹介, window=_blank]"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:141
msgid "https://developers.redhat.com/articles/2021/10/26/configuring-java-applications-use-cryostat[Setup guide for Java Application to use Cryostat on the Red Hat Developers blog^]"
msgstr "link:https://developers.redhat.com/articles/2021/10/26/configuring-java-applications-use-cryostat[Red Hat DevelopersブログのCryostatを使用するためのJavaアプリケーションのセットアップガイド, window=_blank]"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:142
msgid "https://developers.redhat.com/articles/2021/11/02/java-monitoring-custom-targets-cryostat[Guide for using Cryostat Custom Targets on the Red Hat Developers blog^]"
msgstr "link:https://developers.redhat.com/articles/2021/11/02/java-monitoring-custom-targets-cryostat[Red Hat DevelopersブログのCryostatカスタムターゲットの使用に関するガイド, window=_blank]"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:142
msgid "https://cryostat.io/[Cryostat's upstream website^]"
msgstr "https://cryostat.io/[Cryostat's upstream ウェブサイト^]"
