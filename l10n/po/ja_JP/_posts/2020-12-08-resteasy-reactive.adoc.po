msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-12-08-resteasy-reactive.adoc
msgid ""
"It gives the Quarkus and RESTEasy teams great pleasure to announce that RESTEasy Reactive integration in Quarkus has landed in the main Quarkus repo footnote:disclaimer[Currently the main RESTEasy Reactive component resides at https://github.com/quarkusio/quarkus/tree/main/independent-projects/resteasy-reactive\n"
"in the main Quarkus repository; the plan is however that once things settle, this code will move to https://github.com/resteasy/resteasy-reactive. This move should not affect users of the quarkus-resteasy-reactive extensions in any way, just a heads up if anyone reads this blog post in the future and can’t find it.] and will be part of the next Quarkus release 1.11."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-12-08-resteasy-reactive.adoc
msgid ""
"We are looking forward to everyone testing it and providing us as much feedback as possible.\n"
"In typical Quarkus fashion, the project is consumable as a new set of extensions."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-12-08-resteasy-reactive.adoc
msgid ""
"As you probably guessed from the name, this work is a *new JAX-RS implementation* written from the ground up to work on our common *Vert.x* layer and is thus fully *reactive*, while also being very *tightly integrated with Quarkus* and consequently moving a lot of framework specific work\n"
"(like annotation scanning and metamodel generation) to *build time*."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-12-08-resteasy-reactive.adoc
msgid ""
"As if the familiar API and the much improved runtime characteristics of the new extension weren't enough, we have added some really exciting and convenient new features (which are not part of the JAX-RS spec) that have either been requested by the community,\n"
"or are things we feel improve the developer experience and soften some of the spec’s rough edge.\n"
"These new features are:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-12-08-resteasy-reactive.adoc
msgid ""
"These annotations are meant to be used instead of the JAX-RS `@PathParam`, `@QueryParam` etc. annotations, without having the need to specify a name.\n"
"The reason we chose not to reuse the same annotation names is to avoid conflicting with either JAX-RS or other EE specs:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-12-08-resteasy-reactive.adoc
msgid ""
"Also note that `@ServerExceptionMapper` can be used to handle exceptions in a global manner, just as JAX-RS does with `ExceptionMapper`.\n"
"To do that, simply annotate a method that does not belong to a Resource class with `@ServerExceptionMapper`."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-12-08-resteasy-reactive.adoc
msgid "The extensions that integrate with the existing quarkus-resteasy extension also integrate with quarkus-resteasy-reactive extensions. So you can continue to use _CDI_, _Security_, _Metrics_, _JSON_, _Qute_, _Bean Validation_, _OpenAPI_  and enjoy a great out of the box and complete development experience."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-12-08-resteasy-reactive.adoc
msgid ""
"Furthermore, you can also use Maven Snapshots (as Quarkus snapshot builds are uploaded to Sonatype once a day), by specifying version `999-SNAPSHOT` as the Quarkus version and using `quarkus-bom` instead of `quarkus-universe-bom` as the BOM.\n"
"There are various ways to enable snapshot versions in Maven. https://stackoverflow.com/a/7717234/2504224[This] StackOverflow answer shows configuration that can be used either on a per project basis or globally."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-12-08-resteasy-reactive.adoc
msgid ""
"The first thing to note is that for the time being this set of extensions is currently considered experimental. Although the project passes almost the entirety of the JAX-RS TCK, it’s just the first release, so keep in mind that it might have more bugs than a typical battle hardened library, while some of the new APIs and SPIs might break.\n"
"Despite this being a first release, we do envision this work becoming the default REST layer for Quarkus in the near future."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-12-08-resteasy-reactive.adoc
msgid ""
"As mentioned in the new features section, requests are served on the event-loop threads by default. This ensures maximum throughput, but also means that no blocking work should be performed on these threads. If you use Blocking IO (for example by accessing a database with Hibernate Panache), be sure to use the `@Blocking` annotation on either the method or the class.\n"
"This will ensure that the request will be served on a worker thread. It goes without saying that we are also very interested in hearing your feedback about this default."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-12-08-resteasy-reactive.adoc
msgid ""
"There are no docs yet. Docs will be added before the formal 1.11 release and will be progressively enhanced.\n"
"This email should contain all the information you need to get started, but should you run into any trouble, we are available to help on any of the usual channels (Zulip chat, mailing list, GitHub Issues, StackOverflow)."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-12-08-resteasy-reactive.adoc
msgid ""
"We decided to focus on what most users need from a modern REST layer instead of implementing every single feature required by the JAX-RS TCK.\n"
"So in that vein, there is no XML support in RESTEasy Reactive, while various arcane features of the spec are also not supported (like _javax.activation.DataSource_, _javax.annotation.ManagedBean_, _javax.ws.rs.core.StreamingOutput_)."
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:1
#, no-wrap
msgid "Announcing RESTEasy Reactive"
msgstr "RESTEasy Reactiveの発表"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:1
#, no-wrap
msgid "RESTEasy Reactive is ready to be tested"
msgstr "RESTEasy Reactiveは、すぐにテストできます。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:16
#, no-wrap
msgid "What is it?"
msgstr "それは何ですか?"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:21
#, no-wrap
msgid "Why should I care?"
msgstr "なぜ重要なのでしょうか?"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:24
msgid "The simplest answer is that you can continue to leverage the widely used and very powerful JAX-RS APIs to expose a REST layer for your application, while gaining a significant improvement in the maximum throughput the application can achieve. The application should also start slightly faster and consume a little less memory."
msgstr "最も単純な答えは、アプリケーションの REST レイヤを公開する為に広く使われている非常に強力な JAX-RS API を活用し続けながら、アプリケーションが達成できる最大スループットを大幅に向上できるということです。また、アプリケーションは起動が少し速くなり、メモリーの消費量が少し減るはずです。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:26
msgid "Our benchmarks reveal that the measurable performance with this new extension is almost identical to what we would achieve using Quarkus' Reactive Routes API (which is a very interesting API in its own right, but is generally more low level - not to mention the fact that it's a new API developers would need to learn)."
msgstr "ベンチマークでは、この新しいエクステンションを使った測定可能なパフォーマンスは、QuarkusのReactive Routes API(それ自体は非常に興味深いAPIですが、一般的には低レベルなものです)とほぼ同等です。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:28
msgid "Furthermore, when comparing our results to other competing enterprise Java frameworks that provide annotation based REST layers, Quarkus provided as much as double the throughput depending on the benchmark."
msgstr "さらに、アノテーションベースのRESTレイヤーを提供する他の競合するエンタープライズJavaフレームワークと結果を比較すると、ベンチマークによっては、Quarkusは2倍ものスループットを提供しました。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:29
#, no-wrap
msgid "What other benefits are there?"
msgstr "他にはどんなメリットがあるのでしょうか?"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:35
#, no-wrap
msgid "Non-blocking by default"
msgstr "デフォルトでノンブロッキング"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:38
msgid "All endpoints are now running on the IO thread by default. You can use `@Blocking` to change that."
msgstr "デフォルトではすべてのエンドポイントが IO スレッド上で実行されます。 `@Blocking` を使えばこれを変更出来ます。"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:39
#, no-wrap
msgid "Scoring system"
msgstr "スコアリングシステム"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:42
msgid "On dev-mode startup, the application will show you a list of your endpoints, along with a performance score telling you why your endpoint is slower than an optimal version. This helps a lot in figuring out how to improve REST performance."
msgstr "開発モードで起動すると、アプリケーションはエンドポイントのリストを表示し、エンドポイントが最適なバージョンよりも遅い理由を示すパフォーマンススコアを表示します。これは、REST のパフォーマンスを向上させる方法を見つけるのに非常に役立ちます。"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:43
#, no-wrap
msgid "New request/response filter design"
msgstr "リクエスト/レスポンスフィルターの新しい設計"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:46
msgid "JAX-RS filters require implementing an interface and injecting context objects as fields, which is costly and inflexible. Based on our success in the Quarkus build system, filters are now simply annotated methods and any parameter is automatically injected:"
msgstr "JAX-RSのフィルターは、インターフェースを実装し、コンテキストオブジェクトをフィールドとして注入する必要がありますが、これはコストがかかり、柔軟性に欠けます。Quarkus ビルドシステムでの成功に基づき、フィルタは単にアノテーション付きのメソッドになり、全てのパラメーターは自動的に注入されるようになりました:"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:60
msgid "Furthermore, if filters need to perform blocking operations, then they can return `Uni<Void>` and RESTEasy Reactive will not block the event-loop thread while executing the filter."
msgstr "さらに、フィルタがブロッキング操作を行う必要がある場合は `Uni<Void>` を返すことができ、RESTEasy Reactive はフィルタを実行している間はイベントループスレッドをブロックしません。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:62
msgid "Finally, although we haven’t done it yet, this approach could easily be extended to other types of JAX-RS Providers thus completely forgoing the need to use `@Context` in their code."
msgstr "最後に、まだ実施していませんが、このアプローチは他のタイプのJAX-RSプロバイダにも簡単に拡張でき、コード中で `@Context` を使用する必要が完全になくなります。"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:63
#, no-wrap
msgid "New `*Param` annotations"
msgstr "新しい `*Param` アノテーション"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:82
#, no-wrap
msgid "Simpler parameter and context injection"
msgstr "よりシンプルなパラメーターとコンテキストインジェクション"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:85
msgid "With RESTEasy Reactive you don’t even need to use `@PathParam` or `@RestPath` if your parameter has the same name as a path parameter, and similarly you can skip `@Context` for all the known context types, which makes it even simpler:"
msgstr "RESTEasy Reactive では、パラメーターがパスパラメーターと同じ名前であれば `@PathParam` や `@RestPath` を使用する必要はありませんし、同様に、既知のすべてのコンテキストタイプに対して `@Context` を省略することができます。"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:95
#, no-wrap
msgid "New optimal message body reader / writer"
msgstr "新しい最適なメッセージボディのリーダー/ライター"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:98
msgid "If no filters and interceptors are invoked when an endpoint is serviced, you can use more efficient message body writers that directly write to vert.x and don’t require reflection and annotations:"
msgstr "エンドポイントがサービスされるときにフィルタやインターセプタが呼び出されない場合、 リフレクションやアノテーションを必要としない、vert.x に直接書き込む、更に効率的なメッセージボディライターを使うことができます。"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:118
#, no-wrap
msgid "Default content types"
msgstr "デフォルトのコンテンツタイプ"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:121
msgid "Endpoints that return a String default to producing text/plain. We plan to do the same for JSON and other types."
msgstr "String を返すエンドポイントは、デフォルトで text/plain を生成します。JSON やその他の型についても同様のことを行う予定です。"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:122
#, no-wrap
msgid "CDI Integration"
msgstr "CDIの統合"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:125
msgid "All injections via JAX-RS’s @Context are delegated to Arc. This provides users with the benefits of build time injection that Arc brings to all other parts of Quarkus."
msgstr "JAX-RSの@Contextを介したインジェクションはすべてArcに委譲されます。これにより、ユーザーは、ArcがQuarkusの他のすべての部分にもたらすビルドタイムインジェクションのメリットを得ることができます。"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:126
#, no-wrap
msgid "Per-class Exception Mapper"
msgstr "クラスごとの例外マッパー"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:129
msgid "In the JAX-RS specification there’s no way to handle exceptions differently for a specific JAX-RS Resource Class - all exception mapping is done in a global manner."
msgstr "JAX-RS仕様では、特定のJAX-RSリソースクラスに対して異なる例外を処理する方法はありません - すべての例外のマッピングはグローバルな方法で行われます。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:131
msgid "In RESTEasy Reactive however you can simply do something like:"
msgstr "しかし、RESTEasy Reactive では、次のようなことができます:"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:164
msgid "in order to customize the exception handling of certain Resource Classes."
msgstr "特定のリソースクラスの例外処理をカスタマイズする為です。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:168
#, no-wrap
msgid "Do other extensions work with it?"
msgstr "他のエクステンションでも動作しますか?"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:170
msgid "Absolutely!"
msgstr "勿論!"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:173
#, no-wrap
msgid "How can I try it out?"
msgstr "どうやって試してみたらいいのでしょうか?"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:176
msgid "The project has landed in the Quarkus master branch, so if you’re eager to try it out, you'll have to build Quarkus from source by following https://github.com/quarkusio/quarkus/blob/master/CONTRIBUTING.md#building-master[this] and use the proper BOM and version following https://github.com/quarkusio/quarkus/blob/master/CONTRIBUTING.md#updating-the-version[this]."
msgstr "このプロジェクトはQuarkus masterブランチにありますので、試してみたい方は、https://github.com/quarkusio/quarkus/blob/master/CONTRIBUTING.md#building-master[this]のようにソースからQuarkusをビルドし、https://github.com/quarkusio/quarkus/blob/master/CONTRIBUTING.md#updating-the-version[this]のように適切なBOMとバージョンを使用してください。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:181
msgid "The available RESTEasy Reactive extensions are:"
msgstr "利用可能な RESTEasy Reactive エクステンションは以下の通りです:"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:183
msgid "quarkus-resteasy-reactive"
msgstr "quarkus-resteasy-reactive"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:184
msgid "quarkus-resteasy-reactive-jackson"
msgstr "quarkus-resteasy-reactive-jackson"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:185
msgid "quarkus-resteasy-reactive-jsonb"
msgstr "quarkus-resteasy-reactive-jsonb"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:186
msgid "quarkus-resteasy-reactive-qute"
msgstr "quarkus-resteasy-reactive-qute"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:188
msgid "These extensions are the equivalent to the existing _quarkus-resteasy_* extensions, so simply switching from _quarkus-resteasy-jackson_ to _quarkus-resteasy-reactive-jackson_ in your application should allow you to try RESTEasy Reactive with Jackson integration."
msgstr "これらのエクステンションは、既存の _quarkus-resteasy_* エクステンションと同等ですので、アプリケーション内で _quarkus-resteasy-jackson_ から _quarkus-resteasy-reactive-jackson_ に切り替えるだけで、Jackson 統合による RESTEasy Reactive を試すことができるようになります。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:190
msgid "Furthermore, the _quarkus-jaxrs-client_ extension can be used if you need to use the JAX-RS client (this is not the declarative MicroProfile REST Client, but the programmatic client specified by the JAX-RS spec)."
msgstr "さらに、JAX-RSクライアントを使用する必要がある場合は、_quarkus-jaxrs-client_ エクステンションを使用することができます (これは宣言型MicroProfile RESTクライアントではなく、JAX-RS仕様で定義されたプログラマティッククライアントです)。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:191
#, no-wrap
msgid "What should I be careful of?"
msgstr "どんなことに気をつければいいのでしょうか?"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:202
#, no-wrap
msgid "What JAX-RS features are missing?"
msgstr "どのJAX-RSの機能が欠けていますか?"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:208
msgid "Furthermore, worth noting is that the first release will not contain an implementation of the MicroProfile REST Client based on the new JAX-RS Client (for which there is a dedicated extension). This will most likely change in the near future."
msgstr "さらに、最初のリリースには、 (専用のエクステンションが存在する) 新しい JAX-RS Clientをベースにした MicroProfile REST Client の実装が含まれていないことも注目に値する。これは近い将来に変更される可能性が高い。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:210
#, no-wrap
msgid "What's next?"
msgstr "次のステップ"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:212
msgid "Although the new extensions will be available with the regular _1.11_ release, we are considering doing a `1.11.0.Alpha1` release to make it as easy as possible for you to try out the new extensions and provide early feedback."
msgstr "新しいエクステンションは通常の _1.11_ リリースで利用可能になりますが、新しいエクステンションを出来る限り簡単に試せるように、そしてフィードバックを簡単に出来るように、私たちは `1.11.0.Alpha1` リリースを行うことを検討しています。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:213
msgid "We are very much looking forward to hearing your thoughts about and experience using RESTEasy Reactive in Quarkus and plan to put it to good use to further improve the project."
msgstr "プロジェクトのさらなる改善の為に、RESTEasy ReactiveをQuarkusで使用した感想や経験を是非お聞かせ下さい。"
