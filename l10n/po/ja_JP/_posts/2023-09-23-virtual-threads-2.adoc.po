msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid ""
"+++\n"
"<iframe style=\"margin-left: auto; margin-right: auto; display: block;\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sJ49s7ctpf8?si=XfBB10eabMzGQCKz\" title=\"Writing CRUD applications using virtual threads\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n"
"+++"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid ""
"The application is a simple implementation of the https://todobackend.com/[Todo Backend].\n"
"The complete code of this post is available https://github.com/quarkusio/virtual-threads-demos/tree/main/crud-example[here]."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid ""
"The code is similar to a regular implementation of a CRUD service with Quarkus, except for https://github.com/quarkusio/virtual-threads-demos/blob/main/crud-example/src/main/java/org/acme/crud/TodoResource.java#L22[one line].\n"
"We added the `@RunOnVirtualThread` annotation on the resource class (line 17).\n"
"It instructs Quarkus to invoke these methods on virtual threads instead of regular platform threads (learn more about the difference in the https://quarkus.io/blog/virtual-thread-1/[previous blog post]), including `@Transactional` methods."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid "The threading model"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid ""
"As we have seen in the code, the development model is synchronous.\n"
"The interactions with the database uses blocking APIs: you wait for the replies.\n"
"That's where virtual thread introduces their magic.\n"
"Instead of blocking a platform thread, it only blocks the virtual threads:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid ""
"Thus, when another request comes, the carrier thread can handle it.\n"
"It radically reduces the number of platform threads required when there are many concurrent requests.\n"
"As a result, the number of worker threads, generally used when using a synchronous and blocking development model, is not the bottleneck anymore."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid ""
"However, that's not because you use virtual threads that your application has no more concurrency limit.\n"
"There is a new bottleneck: the **database connection pool**.\n"
"When you interact with the database, you ask for a connection to the connection pool (Agroal in our case).\n"
"The number of connections is not infinite (20 by default).\n"
"Once all the connections are used, you must wait until another processing completes and releases its connection.\n"
"You can still handle many requests concurrently, but they will wait for database connections to be available, reducing the response time."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid "A note about pinning"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid ""
"As the https://quarkus.io/blog/virtual-thread-1/[previous blog post] described, pinning happens when the virtual thread cannot be unmounted from the carrier thread.\n"
"In this case, blocking the virtual thread also blocks the carrier thread:"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid ""
"Fortunately, in this application, there is no pinning.\n"
"The PostgreSQL driver is one of the only JDBC drivers that does not pin.\n"
"If you plan to use another database, check first.\n"
"We will be discussing how to detect pinning in the next post.\n"
"Quarkus, Narayana and Hibernate have been patched to avoid the pinning."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid ""
"Pinning is one of many problems that can arise.\n"
"The application will suffer from the default object pooling mechanism used by Jackson.\n"
"Fortunately, we contributed an SPI to https://github.com/FasterXML/jackson-core/pull/1064[Jackson] that will allow us to remove this allocation hog."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid "Conclusion"
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid ""
"This post explains implementing a CRUD application using virtual threads in Quarkus.\n"
"You can now use an imperative development model without compromising the application's concurrency.\n"
"It's as simple as using RESTEasy Reactive and adding one annotation: `@RunOnVirtualThread` on your resource."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2023-09-23-virtual-threads-2.adoc
msgid ""
"We tailored Quarkus and upstream projects (such as Hibernate, Narayana, SmallRye Mutiny, etc.) to become virtual-thread-friendly.\n"
"As we will see in other posts, most Quarkus extensions are ready to be used with virtual threads."
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:1
#, fuzzy, no-wrap
msgid "Writing CRUD applications using virtual threads"
msgstr "仮想スレッドを使用したCRUDアプリケーションの記述"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:1
#, fuzzy, no-wrap
msgid "Describe how you can implement a CRUD / RESTFul application using virtual threads and Quarkus."
msgstr "仮想スレッドとQuarkusを使用して、CRUD/RESTFulアプリケーションを実装する方法を説明します。"

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:12
#, fuzzy
msgid "Last week, we published a video demonstrating the creation of a CRUD application using virtual threads in Quarkus. It's as simple as adding the `@RunOnVirtualThread` annotation on your HTTP resource (or your controller class if you use the Spring compatibility layer)."
msgstr "先週、Quarkusで仮想スレッドを使ったCRUDアプリケーションの作成を実演するビデオを公開しました。HTTPリソース（Spring互換レイヤーを使用している場合はコントローラクラス）に `@RunOnVirtualThread` アノテーションを追加するだけです。"

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:18
#, fuzzy
msgid "This companion post explains how it works behind the scenes."
msgstr "この関連記事では、その舞台裏を説明している。"

#. type: Title ==
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:19
#, no-wrap
msgid "The code"
msgstr "コード"

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:24
#, fuzzy
msgid "The important part is the https://github.com/quarkusio/virtual-threads-demos/blob/main/crud-example/src/main/java/org/acme/crud/TodoResource.java[TodoResource.java]:"
msgstr "重要なのは link:https://github.com/quarkusio/virtual-threads-demos/blob/main/crud-example/src/main/java/org/acme/crud/TodoResource.java[TodoResource.java] である："

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:119
#, fuzzy
msgid "The application uses:"
msgstr "このアプリケーションは使用する："

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:121
#, fuzzy
msgid "RESTEasy Reactive - the recommended REST stack for Quarkus. It supports virtual threads."
msgstr "RESTEasy Reactive - Quarkusの推奨RESTスタックです。仮想スレッドをサポートしています。"

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:122
#, fuzzy
msgid "Hibernate Validation - to validate the Todos created by the user."
msgstr "Hibernate Validation - ユーザーが作成した Todos を検証します。"

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:123
#, fuzzy
msgid "Hibernate ORM with Panache - to interact with the database."
msgstr "Hibernate ORM with Panache - データベースと対話する。"

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:124
#, fuzzy
msgid "The Argroal connection pool - to manage and recycle database connections."
msgstr "Argroal 接続プール - データベース接続を管理し、再利用する。"

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:125
#, fuzzy
msgid "The Narayana transaction manager - to run our code inside transactions."
msgstr "Narayanaトランザクション・マネージャー - トランザクションの中でコードを実行する。"

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:126
#, fuzzy
msgid "The PostgreSQL driver - as we use a PostgreSQL database"
msgstr "PostgreSQLドライバ - PostgreSQLデータベースを使用しているため"

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:178
#, fuzzy
msgid "That said, while virtual threads increase the concurrency, you will likely hit other bottlenecks, such as the number of database connections managed in the pool."
msgstr "つまり、仮想スレッドは同時実行性を高めるが、プールで管理されるデータベース接続の数など、他のボトルネックにぶつかる可能性が高い。"

#. type: Plain text
#: upstream/_posts/2023-09-23-virtual-threads-2.adoc:180
#, fuzzy
msgid "In the next post and video, we will see how to test our application and detect pinning."
msgstr "次の投稿とビデオでは、アプリケーションをテストし、ピン留めを検出する方法を紹介する。"
