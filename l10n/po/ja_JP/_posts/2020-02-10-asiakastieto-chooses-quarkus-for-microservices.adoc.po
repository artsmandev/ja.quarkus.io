msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
msgid ""
"Based in Helsinki, Finland, The Asiakastieto Group is a leading provider of innovative, digital business and consumer information services in the Nordic region. In the banking, financial services, and retail industries, Asiakastieto’s products and services support risk management, finance and business administration, credit or loan-related  decision-making, sales and marketing.\n"
"When the EU introduced its revised Payment Services Directive (PSD2) in 2018 to increase competition, promote innovation, and improve security in the payments industry, Asiakastieto began evaluating how to help its customers manage the impact of the directive. This initiative aligned with one of the company’s key corporate social responsibility goals: to increase trust in society. The Asiakastieto Group has many brands such as UC AB, Intellia Oy, and Suomen Asiakastieto Oy, the latter being the one that we cover in this user story."
msgstr ""

#: /home/ynojima/playground/ja.quarkus.io/build/jekyll-source/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
msgid ""
"They use and like the Quarkus development mode, also known as live coding, a lot. Before Quarkus, they used to use JRebel, for hot replacing but it was unreliable. According to Eero _“Quarkus development mode has by far a better track record.”_  Now that they are writing new microservices, they have made it a best practice to use live coding. With Thorntail, there were manual steps to deploy changes to try them out whereas with Quarkus, the changes are automatically applied to the running process so that the developer can immediately test the application. This makes developers more productive in that they can verify and troubleshoot their code faster.\n"
"Eero took it upon himself to deliver a small internal Quarkus workshop, which got developers very excited about this new and innovative technology, _“people are looking forward to working with Quarkus”_, mentioned Eero. Quarkus is getting developers excited and this has led to other developers across the organization to use Quarkus for their projects."
msgstr ""

#. type: Title =
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:1
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:10
#, fuzzy, no-wrap
msgid "Suomen Asiakastieto Oy chooses Quarkus for their microservices development"
msgstr "Suomen Asiakastieto Oy、マイクロサービス開発にQuarkusを採用"

#. type: Title ==
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:18
#, fuzzy, no-wrap
msgid "Why microservices?"
msgstr "なぜマイクロサービスなのか？"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:21
#, fuzzy
msgid "Suomen Asiakastieto Oy has many different departments: Risk Decision, SME & Consumer, Customer Data Management, Digital Processes. Real Estate and Collateral Information, which operates within Digital Processes, had deployed to their application server instance a new application, which happened to have issues while running in production affecting the stability of the application server and hence other applications running on it. This resulted in the need to reboot the application server every time this anomaly occurred leading to unexpected downtime and to a negative customer satisfaction."
msgstr "Suomen Asiakastieto Oyには様々な部署があります：リスク判断、中小企業・消費者、顧客データ管理、デジタルプロセスです。デジタルプロセス部門に属する不動産・担保情報部門は、アプリケーションサーバーに新しいアプリケーションを導入しました。その結果、この異常が発生するたびにアプリケーションサーバーを再起動する必要があり、予期せぬダウンタイムが発生し、顧客満足度も低下していました。"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:23
#, fuzzy
msgid "Because of this, they decided to adopt microservice architectures to introduce better resilience and high-availability into their solutions so that if a microservice or an application went awry, it would not affect the entire system. So, when the time came to start developing their PSD2 project, they decided to start implementing microservices in Thorntail, which is an open source application assembler - similar to Spring Boot - that also implements MicroProfile, an community-driven open source specification for Java microservices. They decided on Thorntail because its functionality and capabilities were close to the application server capabilities they were familiar with. After being in production for a few months, they learned about Quarkus and its innovative approach that rethinks Java for containers, cloud and Kubernetes. Around the same time, they also learned about the end-of-life of Thorntail. Their continued desire to develop new microservices as well as to break their monolithic application servers into microservices made them evaluate Quarkus more in depth."
msgstr "そのため、マイクロサービスやアプリケーションに問題が発生しても、システム全体に影響が及ばないように、ソリューションに優れた耐障害性と高可用性を導入するために、マイクロサービス・アーキテクチャを採用することにしたのです。Thorntailは、Spring Bootに似たオープンソースのアプリケーションアセンブラで、Javaマイクロサービス向けのコミュニティ主導のオープンソース仕様であるMicroProfileも実装しています。Thorntailを採用したのは、その機能と性能が、自分たちが慣れ親しんでいるアプリケーションサーバーの機能に近かったからです。数カ月間運用した後、彼らはQuarkusと、コンテナ、クラウド、KubernetesのためにJavaを再考するその革新的なアプローチについて知りました。同じ頃、彼らはThorntailの寿命が尽きることも知りました。新しいマイクロサービスを開発し、モノリシックなアプリケーションサーバーをマイクロサービス化したいという要望を持ち続け、Quarkusをより深く評価することになりました。"

#. type: Title ==
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:24
#, fuzzy, no-wrap
msgid "Their monoliths and existing microservices"
msgstr "そのモノリスと既存のマイクロサービス"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:27
#, fuzzy
msgid "With respect to their monoliths, they have about twelve JBoss EAP instances, each running dozens of their applications. As a first step to make the entire system more distributed, they decided to start moving some of these workloads to OpenShift by running many instances of JBoss EAP, each containing a single application. As a result, they experienced high memory consumption. At this point, they started looking into ways to reduce the footprint of these applications running on OpenShift."
msgstr "モノリスに関しては、約12のJBoss EAPインスタンスがあり、それぞれが数十のアプリケーションを実行しています。システム全体をより分散させるための最初のステップとして、彼らはこれらのワークロードの一部を OpenShift に移行することを決め、それぞれが単一のアプリケーションを含む JBoss EAP の多数のインスタンスを実行しました。その結果、メモリの消費が激しくなりました。この時点で、OpenShift上で動作するこれらのアプリケーションのフットプリントを削減する方法を検討し始めたのです。"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:29
#, fuzzy
msgid "With respect to their existing Thorntail microservices, which they needed to migrate to Quarkus, they noticed that spinning up a Thorntail container was taking about 1 minute to start up. When they migrated it to Quarkus, the service now starts in 0.4 seconds! With this improved startup time, they could scale up their services faster so that they could be readily available faster to process extra traffic leading to a better customer experience during peak times since customers would not have to wait on the browser to have their requests serviced, for example."
msgstr "Quarkusに移行する必要がある既存のThorntailマイクロサービスに関して、Thorntailコンテナをスピンアップすると、起動に約1分かかることに気づきました。Quarkusに移行したところ、このサービスは0.4秒で起動するようになりました！このように起動時間が改善されたことで、サービスをより速くスケールアップできるようになり、追加のトラフィックをより速く処理できるようになったため、ピーク時の顧客体験が向上しました。"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:31
#, fuzzy
msgid "In fact, before going into production with Quarkus, Eero Arvonen, Solution Architect at IT Development Finland Asiakasieto Oy, made a comparative analysis between the Thorntail and Quarkus versions of a microservice. This first chart shows a comparison between the original version of one of their Thortail microservices, which used JAX-WS, next to different Quarkus versions of the same microservice."
msgstr "実際、IT Development Finland Asiakasieto OyのソリューションアーキテクトであるEero Arvonen氏は、Quarkusで本番稼働する前に、あるマイクロサービスのThorntailとQuarkusバージョンの比較分析を行っています。この最初のグラフは、JAX-WSを使用したThorntailマイクロサービスのオリジナルバージョンと、同じマイクロサービスの異なるQuarkusバージョンの比較を示しています。"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:36
#, fuzzy
msgid "This next chart shows the performance and startup time results for the same combinations of microservice versions as the previous graph."
msgstr "次のグラフは、前のグラフと同じ組み合わせのマイクロサービスのバージョンで、パフォーマンスと起動時間の結果を示したものです。"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:41
#, fuzzy
msgid "According to Eero, _“migrating from Thorntail to JVM-Quarkus was trivial and memory consumption went down by about 75% while CPU consumption was reduced by about 70%. This was accompanied by a 40% increase in throughput resulting in a faster response time. Migrating to Quarkus native, we found that the application ran at a better throughput even with 50MB of memory which is 95% less than with Thorntail. We also identified a space-time tradeoff between different native Quarkus setups: deploying it with 200MB of memory instead of 50MB will reduce its CPU requirements by two thirds. Thus, if we ever had to balance CPU vs memory within our OpenShift cluster, this would prove useful.”_"
msgstr "Eero氏によると、 _「ThorntailからJVM-Qu_ arkus _への移行は簡単で、メモリ消費量が約75％減少し、CPU消費量は約70_ ％減少した。 _これに伴い、スループットが40％向上し、レスポンスタイムが速くなりました。Quarkusネイティブに移行したところ、50MBのメモリでもスループットが向上し、Thorntailと比較して95％削減できることがわかりました。また、Quarkusのネイティブセットアップの違いによる時空間トレードオフも確認できました。50MBの代わりに200MBのメモリで展開すると、CPU要件が3分の2になります。したがって、OpenShiftクラスタ内でCPUとメモリのバランスを取る必要がある場合、これは有用であることがわかります。\"_"

#. type: Title ==
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:43
#, no-wrap
msgid "Live Coding"
msgstr "ライブコーディング"

#. type: Title ==
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:48
#, fuzzy, no-wrap
msgid "Learning Quarkus"
msgstr "Quarkusを学ぶ"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:51
#, fuzzy
msgid "_“Quarkus was very easy to pick up”_, according to Eero. In his opinion, the Quarkus guides on https://quarkus.io/ are very good, thorough and comprehensive with great code examples. In addition, he found a very active community in Quarkus. When they ran into problems, they were able to search the internet for the error messages and easily found answers online. In addition, the Quarkus community and Quarkus engineers are very active even on external forums answering questions and helping folks inquiring for help."
msgstr "「Quarkusは _とても簡単に手に_ 入れることができました」とEeroは言います。彼の意見では、 https://quarkus.io/ のQuarkusガイドは非常に優れており、徹底的で包括的で、素晴らしいコード例があります。さらに、Quarkusには非常に活発なコミュニティがあることもわかりました。問題に遭遇したときは、エラーメッセージをインターネットで検索し、オンラインで簡単に答えを見つけることができたそうです。さらに、QuarkusのコミュニティとQuarkusのエンジニアは、外部のフォーラムでも非常に活発に質問に答え、助けを求めている人々を助けています。"

#. type: Title ==
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:52
#, fuzzy, no-wrap
msgid "Some pain points"
msgstr "いくつかのペインポイント"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:55
#, fuzzy
msgid "As awesome as Quarkus is, this constantly evolving and innovative technology had some areas for improvement. For example, Eero mentioned that Java API for XML Web Services (JAX-WS) didn’t work on native mode. Also SSL, by default, is disabled but available for HTTP/S, which he needed to use and got it to work following the configuration instructions, which he found complex. In addition, he would like to see improvements in how reflection is currently configured, which was time-consuming to configure because he had to use a trial-and-error approach to get it to work. He’d like to see a way to make this reflection configuration process easier to carry out."
msgstr "Quarkusは素晴らしいものですが、この常に進化し続ける革新的な技術には、改善すべき点がいくつかありました。例えば、Eeroは、Java API for XML Web Services（JAX-WS）がネイティブモードでは動作しないことに言及しました。また、SSLはデフォルトでは無効になっているが、HTTP/Sでは利用可能であり、これを利用する必要があった。さらに、現在のリフレクションの設定方法についても改善を希望しており、試行錯誤しながら設定する必要があったため、時間がかかったという。このリフレクションの設定作業をより簡単に行えるようにしてほしいとのことです。"

#. type: Title ==
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:56
#, fuzzy, no-wrap
msgid "Lessons Learned"
msgstr "レッスンラーニング"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:59
#, fuzzy
msgid "Because Quarkus takes the approach of a closed world for application development, there needs to be a bit of a mind shift when writing applications. As an example, for their existing applications, Asiakastieto used a configuration manager to read in configuration information (connection URLs, DB connections strings, etc.) at application startup. Since with Quarkus, in native mode, part of the application startup happens during build time, they had to reconfigure the configuration manager to read in the configuration information when the application was run. Although the change was easy to make, it highlights the importance of understanding how Quarkus applications need to be implemented under this new paradigm."
msgstr "Quarkusはアプリケーション開発においてクローズドワールドというアプローチをとっているため、アプリケーションを書く際にはちょっとしたマインドシフトが必要です。例えば、既存のアプリケーションでは、アプリケーションの起動時に設定情報（接続URL、DB接続文字列など）を読み込むコンフィギュレーションマネージャを使用していました。Quarkusのネイティブモードでは、アプリケーションの起動の一部はビルド時に行われるため、アプリケーションの実行時に設定情報を読み込むように、コンフィギュレーションマネージャーを再設定する必要がありました。この変更は簡単でしたが、この新しいパラダイムのもとで、Quarkusアプリケーションをどのように実装する必要があるかを理解することの重要性が浮き彫りになりました。"

#. type: Title ==
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:60
#, fuzzy, no-wrap
msgid "Current state of Quarkus projects"
msgstr "Quarkusプロジェクトの現在の状況"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:63
#, fuzzy
msgid "As mentioned earlier, the Asiakastieto Oy PSD2 project had been implemented in Thorntail microservices and when they learned about Quarkus, the decision was made to migrate their Thorntail microservices to Quarkus. As of this writing, out of the 7 Thorntail microservices in their PSD2 application, one has been migrated to Quarkus and is running in production."
msgstr "前述のように、Asiakastieto OyのPSD2プロジェクトはThorntailマイクロサービスで実装されていましたが、Quarkusについて知ったとき、ThorntailマイクロサービスをQuarkusに移行することが決定されました。この記事の執筆時点で、同社のPSD2アプリケーションの7つのThorntailマイクロサービスのうち、1つはQuarkusに移行され、本番環境で稼働しています。"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:65
#, fuzzy
msgid "Two more microservices have been migrated from Thorntail to Quarkus (native mode) and are currently being tested and will be deployed during their next incremental application update during February 2020."
msgstr "さらに2つのマイクロサービスがThorntailからQuarkus（ネイティブモード）に移行され、現在テスト中で、2020年2月中の次のインクリメンタルアプリケーション更新時にデプロイされる予定です。"

#. type: Title ==
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:66
#, fuzzy, no-wrap
msgid "What’s next"
msgstr "次のページ"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:69
#, fuzzy
msgid "When their microservices initiative started one and a half years ago, Asiakastieto Oy decided to use Thorntail as their main technology for Java microservices. With the news of the sunsetting of Thorntail and the introduction of Quarkus, they have established a new policy that every new project will be implemented in Quarkus in JVM mode as a minimum and when feasible use Quarkus in native mode. There are already two new projects that are being implemented in Quarkus at present with more coming in the future."
msgstr "Asiakastieto Oyでは、1年半前にマイクロサービス構想を開始した際、JavaマイクロサービスのメインテクノロジーとしてThorntailを使用することを決定しました。今回、Thorntailの廃止とQuarkusの導入が発表されたことで、新しいプロジェクトは最低限JVMモードのQuarkusで実装し、可能であればネイティブモードのQuarkusを使用するという方針を打ち出しました。現在、Quarkusで実装されている新しいプロジェクトはすでに2つあり、今後さらに増えていく予定です。"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:71
#, fuzzy
msgid "For more information on Quarkus:"
msgstr "Quarkusの詳細については、こちらをご覧ください："

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:73
#, fuzzy
msgid "Quarkus website: http://quarkus.io"
msgstr "link:http://quarkus.io[Quarkusの] サイト link:http://quarkus.io[：http://quarkus.io]"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:74
#, fuzzy
msgid "Quarkus GitHub project: https://github.com/quarkusio/quarkus"
msgstr "link:https://github.com/quarkusio/quarkus[Quarkus] GitHubプロジェクト: https: link:https://github.com/quarkusio/quarkus[//github.com/quarkusio/quarkus]"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:75
#, fuzzy
msgid "Quarkus Twitter: https://twitter.com/QuarkusIO"
msgstr "link:https://twitter.com/QuarkusIO[Quarkus] Twitter: https: link:https://twitter.com/QuarkusIO[//twitter.com/QuarkusIO]"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:76
#, fuzzy
msgid "Quarkus chat: https://quarkusio.zulipchat.com/"
msgstr "link:https://quarkusio.zulipchat.com/[Quarkus] チャット： https://quarkusio.zulipchat.com/"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:77
#, fuzzy
msgid "Quarkus mailing list: https://groups.google.com/forum/#!forum/quarkus-dev"
msgstr "Quarkusメーリングリスト: https: link:https://groups.google.com/forum/#!forum/quarkus-dev[//groups.google.com/forum/#!forum/quarkus-dev]"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:78
#, fuzzy
msgid "https://youtube.com/quarkusio[Quarkus YouTube Channel]"
msgstr "link:https://youtube.com/quarkusio[Quarkus YouTubeチャンネル]"

#. type: Plain text
#: upstream/_posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc:79
#, fuzzy
msgid "https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Four reasons to use Quarkus]"
msgstr "link:https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Quarkusを使用する4つの理由]"
