msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: YAML Front Matter: title
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy, no-wrap
msgid "How to Use Kafka, Schema Registry and Avro with Quarkus"
msgstr "QuarkusでKafka、Schema Registry、Avroを使用する方法。"

#. type: YAML Front Matter: synopsis
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy, no-wrap
msgid "How to Use Kafka, Schema Registry, and Avro with Quarkus"
msgstr "QuarkusでKafka、Schema Registry、Avroを使用する方法。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"In the Kafka world, Apache Avro is by far the most used serialization protocol.\n"
"Avro is a data serialization system.\n"
"Combined with Kafka, it provides schema-based, robust, and fast binary serialization."
msgstr "Kafkaの世界では、Apache Avroが最も使用されているシリアライゼーション・プロトコルです。Avro はデータシリアライゼーションシステムです。Kafka と組み合わせることで、スキーマベースで堅牢かつ高速なバイナリシリアライズを実現します。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"In this blog post, we will see how you can use Avro with a schema registry in a Quarkus application.\n"
"This blog focuses on the JVM mode.\n"
"We will cover the native mode in another post."
msgstr "このブログでは、Quarkus アプリケーションでスキーマレジストリを使用して Avro を使用する方法を説明します。このブログでは、JVMモードに焦点を当てます。ネイティブモードについては、別の記事で説明します。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"We will write a simple application receiving HTTP requests, writing the payload into Kafka, and reading them from Kafka.\n"
"For simplicity, the same application will write into Kafka and read from it, but obviously, it would be different applications in the real world."
msgstr "HTTPリクエストを受け取り、ペイロードをKafkaに書き込み、Kafkaから読み取るというシンプルなアプリケーションを書いてみます。簡単のため、同じアプリケーションがKafkaに書き込み、Kafkaから読み取りますが、実世界では明らかに異なるアプリケーションになるでしょう。"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
msgid "image:/assets/images/posts/kafka-avro/architecture.png[]"
msgstr "image:/assets/images/posts/kafka-avro/architecture.png[]"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "How to start"
msgstr "始め方"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"Well, let's start from the beginning.\n"
"Go to https://code.quarkus.io to create your project, and select the following extension:"
msgstr "では、最初から始めましょう。 https://code.quarkus.io 、プロジェクトを作成し、以下の拡張子を選択します："

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "RESTEasy JSON-B"
msgstr "RESTEasy JSON-B"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
msgid "SmallRye Reactive Messaging - Kafka Connector"
msgstr "SmallRye Reactive Messaging - Kafka Connector"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Apache Avro"
msgstr "アパッチアブロ"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-avro/project.png[]"
msgstr "image:/assets/images/posts/kafka-avro/project.png[alt=\"project\"]"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Download the project and open it in your favorite IDE."
msgstr "プロジェクトをダウンロードし、お好きなIDEで開いてください。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"We need to add a few more content to the generated `pom.xml`.\n"
"Open the `pom.xml` file and add the following `dependency`:"
msgstr "生成された `pom.xml` にもう少し内容を追加する必要があります。 `pom.xml` ファイルを開き、次の `dependency` を追加します："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"This dependency provides Avro serializer and deserializer.\n"
"There are multiple versions of this _serde_.\n"
"In this blog post, we use the ones provided by Apicurio.\n"
"You can also use Confluent's one (the artifact is not on Maven Central, so you need to add an extra repository)."
msgstr "この依存関係は Avro シリアライザーとデシリアライザーを提供します。この _serde_ には複数のバージョンがあります。このブログ記事では、Apicurioが提供するものを使用します。Confluent のものを使うこともできます (アーティファクトは Maven Central にないので、リポジトリを追加する必要があります)。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"We also need to add the `avro-maven-plugin`.\n"
"Under `<build><plugins>`, add:"
msgstr "また、 `avro-maven-plugin` 。 `<build><plugins>` の下に追加します："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"This plugin generates the code from Avro schema files located in the `src/main/avro` directory.\n"
"With this setup, we can finally start to write some code."
msgstr "このプラグインは `src/main/avro` ディレクトリにある Avro スキーマファイルからコードを生成します。これでようやくコードを書き始めることができます。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "The Avro schema"
msgstr "アヴロのスキーマ"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"First, we need to write the schema representing the object we will read and write in Kafka.\n"
"Create the `src/main/avro/movie.avsc` file with the following content:"
msgstr "まず、Kafkaで読み書きするオブジェクトを表すスキーマを記述します。以下の内容で `src/main/avro/movie.avsc` ファイルを作成します："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"The `avro-maven-plugin`, configured in the `pom.xml` file, generates the `me.escoffier.quarkus.Movie` class with the `title` and `year` attributes.\n"
"To generate the class, run:"
msgstr "`pom.xml` ファイルで設定された `avro-maven-plugin` は、 `title` および `year` 属性を持つ `me.escoffier.quarkus.Movie` クラスを生成します。クラスを生成するには"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "The Movie Resource"
msgstr "映画資料"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"The first class we will write receives HTTP requests and writes the (Movie) payload into Kafka.\n"
"Create the `src/main/java/me/escoffier/MovieResource.java` with the following content:"
msgstr "最初に書くクラスは、HTTPリクエストを受信し、(Movie)ペイロードをKafkaに書き込みます。以下の内容で `src/main/java/me/escoffier/MovieResource.java` を作成します："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"This JAX-RS resource is straightforward.\n"
"It has a single endpoint method, receiving JSON payload on `/movies`.\n"
"RESTEasy maps the JSON document into `Movie` objects automatically.\n"
"As described in the `avsc` file, the expected JSON contains two fields: `title` and `year`."
msgstr "このJAX-RSリソースは単純です。エンドポイント・メソッドは 1 つで、JSON ペイロードを `/movies` で受信します。RESTEasy は、JSON ドキュメントを `Movie` オブジェクトに自動的にマッピングします。 `avsc` ファイルに記述されているように、期待される JSON には `title` と `year` の 2 つのフィールドがあります。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"When using Quarkus with Reactive Messaging, you don't interact with Kafka directly.\n"
"You inject an `Emitter`, which sends an object (our movie) to a _channel_.\n"
"The application configuration maps this channel to a Kafka topic."
msgstr "QuarkusでReactive Messagingを使用する場合、Kafkaと直接やり取りすることはありません。 `Emitter` を注入し、オブジェクト（ムービー）を _チャネルに_ 送信します。アプリケーションの設定は、このチャネルをKafkaトピックにマッピングします。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Speaking about configuration, open the `src/main/resources/application.properties`, and add:"
msgstr "コンフィギュレーションについて言えば、 `src/main/resources/application.properties` を開き、追加してください："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"This configuration requires a bit of an explanation.\n"
"First, `mp.messaging.connector.smallrye-kafka.apicurio.registry.url` configure the schema registry URL.\n"
"If you use the Confluent _serde_, instead of the Apicurio one, the property is named `mp.messaging.connector.smallrye-kafka.schema.registry.url`."
msgstr "この設定には少し説明が必要です。まず、 `mp.messaging.connector.smallrye-kafka.apicurio.registry.url` スキーマレジストリの URL を設定します。Apicurioのものではなく、Confluentの _serdeを_ 使用する場合、プロパティ名は `mp.messaging.connector.smallrye-kafka.schema.registry.url` 。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"The `mp.messaging.outgoing.movies` configure the `movies` channel.\n"
"The `connector` attribute indicates that the SmallRye Kafka connector manages the channel.\n"
"The `topic` attribute (which we could omit in this case as it matches the channel name) specifies the topic's name.\n"
"`value.serializer` sets the serializer to use.\n"
"Here we use `io.apicurio.registry.utils.serde.AvroKafkaSerializer` provided by Apicurio.\n"
"The `registry.*` properties configure how the registry handles the schema."
msgstr "`mp.messaging.outgoing.movies` は `movies` チャネルを設定します。 `connector` 属性は、SmallRye Kafka コネクタがチャネルを管理していることを示します。 `topic` 属性（チャネル名と一致するため、今回は省略可能）は、トピック名を指定します。 `value.serializer` は、使用するシリアライザを設定します。ここではApicurioが提供する `io.apicurio.registry.utils.serde.AvroKafkaSerializer` 。 `registry.*` プロパティは、レジストリがスキーマをどのように扱うかを設定します。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "The movie consumer"
msgstr "映画の消費者"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"The second half of the application is even simpler.\n"
"It just logs the received movies."
msgstr "アプリケーションの後半はさらにシンプルです。受信したムービーを記録するだけです。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Creates the `src/main/java/me/escoffier/MovieConsumer.java` with the following content:"
msgstr "以下の内容で `src/main/java/me/escoffier/MovieConsumer.java` を作成します："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"The `@Incoming` annotation indicates that the method is called for each `Movie` object transiting on the `movies-from-kafka` channel.\n"
"In this case, we simply write a log message."
msgstr "`@Incoming` アノテーションは、 `movies-from-kafka` チャンネルを通過する `Movie` オブジェクトごとにメソッドが呼び出されることを示しています。この場合、単にログ・メッセージを書き込みます。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"We are almost there.\n"
"We need to configure the reception from Kafka.\n"
"Re-open the `application.properties` and add:"
msgstr "あと少しです。Kafkaからの受信を設定する必要があります。 `application.properties` を開きなおして追加します："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"These properties map the `movies-from-kafka` to the `movies` Kafka topic.\n"
"It also configures the deserializer (`io.apicurio.registry.utils.serde.AvroKafkaDeserializer`).\n"
"We disable Kafka auto-commit (`enable.auto.commit=false`), as Reactive Messaging handles the offset commit for you."
msgstr "これらのプロパティは、 `movies-from-kafka` を `movies` Kafka トピックにマッピングします。また、デシリアライザー ( `io.apicurio.registry.utils.serde.AvroKafkaDeserializer` ) も設定します。Reactive Messaging がオフセットコミットを処理するため、Kafka の自動コミット ( `enable.auto.commit=false` ) を無効にします。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Because the sender and receiver are colocalized in the same application, we cannot use the same channel name."
msgstr "送信側と受信側は同じアプリケーション内でコロカライズされているため、同じチャネル名を使用することはできません。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "A bit of infrastructure"
msgstr "インフラストラクチャー"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Before running the application, we need:"
msgstr "アプリケーションを実行する前に"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "A Kafka broker"
msgstr "Kafkaブローカー"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "The Apicurio schema registry"
msgstr "Apicurioスキーマ・レジストリ"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Create the `docker-compose.yaml` file at the root of your project with the following content:"
msgstr "プロジェクトのルートに、以下の内容で `docker-compose.yaml` ："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"This `docker-compose` file starts everything we need.\n"
"You may wonder about some of the properties of the Apicurio registry.\n"
"Actually, the Apicurio registry is also a Quarkus application."
msgstr "この `docker-compose` ファイルは、私たちが必要とするすべてのものを開始します。Apicurioレジストリのプロパティについて疑問に思うかもしれません。実はApicurioレジストリもQuarkusのアプリケーションです。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Time to run"
msgstr "走る時間"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"Alright, let's get this rolling.\n"
"First, start the infrastructure with:"
msgstr "さあ、始めましょう。まず、インフラを"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Stop the infrastructure with `docker-compose down; docker-compose rm`"
msgstr "でインフラを止めます。 `docker-compose down; docker-compose rm`"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Then, start the application:"
msgstr "その後、アプリケーションを起動します："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Once start, open another terminal and _post_ movies:"
msgstr "起動したら、別のターミナルを開いて動画を _投稿して_ ください："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "In the application log, you should see:"
msgstr "アプリケーションのログには"

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"Done!\n"
"In just a few code lines and a bit of configuration, we can integrate Kafka, Avro, and a schema registry in a Quarkus application!\n"
"You can found the code of this demo on https://github.com/cescoffier/quarkus-kafka-and-avro. The readme file contains the instructions to run it."
msgstr "できました！わずか数行のコードと少しの設定で、QuarkusアプリケーションにKafka、Avro、スキーマレジストリを統合できます！このデモのコードは https://github.com/cescoffier/quarkus-kafka-and-avro にあります。Readmeファイルには実行方法が記載されています。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Quarkus 1.9 will be a lots of new goodies around messaging and reactive in general. Stay tuned!"
msgstr "Quarkus 1.9では、メッセージングとリアクティブ全般を中心に、たくさんの新機能が追加される予定です。ご期待ください！"
