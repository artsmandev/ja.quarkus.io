# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-12-02 19:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:1
#, fuzzy, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:8
#, fuzzy, no-wrap
msgid ""
"layout: post\n"
"title: 'Ideas on Quarkus command-mode, UI-based apps and releasing via GitHub Actions'\n"
"date: 2020-05-12\n"
"tags: development-tips\n"
"synopsis: Ideas on how to use Quarkus command-mode to develop native applications with web frontends; built with GitHub Actions.\n"
"author: dplatz\n"
"---\n"
msgstr ""
"layout: post\n"
"title: 'Quarkusのコマンドモード、UIベースのアプリ、Github Actions経由でのリリースに関するアイデア'\n"
"date: 2020-05-12\n"
"tags: development-tips\n"
"synopsis: Quarkusのコマンドモードを使用して、ウェブフロントエンドを使用してネイティブアプリケーションを開発する方法についてのアイデアです。\n"
"author: dplatz\n"
"---\n"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:12
#, fuzzy
msgid "Quarkus is advertised as a cloud-native runtime for Microservices but the link:https://quarkus.io/blog/quarkus-1-4-final-released/[introduction of command-mode] might have opened up new and interesting spaces where it could find adoption."
msgstr "QuarkusはMicroservices用のクラウドネイティブランタイムとして宣伝されていますが、 link:https://quarkus.io/blog/quarkus-1-4-final-released/[コマンドモードの導入] により、採用される可能性のある新しい興味深い空間が開かれたかもしれません。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:15
#, fuzzy
msgid "In this blog post I will present a few ideas about the possible usage of command-mode in Quarkus that you might find useful to consider when developing your next tool.  If you have not heard about command-mode, I suggest to start reading link:https://quarkus.io/blog/introducing-command-mode/[this introduction] first and then come back."
msgstr "このブログ記事では、Quarkusでのコマンドモードの使用方法について、次のツールを開発する際に検討するのに役立つと思われるいくつかのアイデアを紹介します。コマンドモードについて聞いたことがない場合は、まず link:https://quarkus.io/blog/introducing-command-mode/[この紹介] 文を読み始めてから戻ってくることをお勧めします。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:17
#, fuzzy
msgid "Ready? Ok, let's continue."
msgstr "いいですか?よし、続けよう。"

#. type: Title ==
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:18
#, fuzzy, no-wrap
msgid "Cross-platform builds via GitHub Actions"
msgstr "Github アクションを介したクロスプラットフォームビルド"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:22
#, fuzzy
msgid "Command-line tools like `kubectl` are often written in languages like C, Go or Rust and compiled to native executables for various target platforms.  This is great because you don't need to rely on Java installed; or being installed in a wrong version."
msgstr "`kubectl` のようなコマンドラインツールは、C、Go、Rust のような言語で書かれていることが多く、様々なターゲットプラットフォーム用にネイティブの実行可能ファイルにコンパイルされています。Java がインストールされていたり、間違ったバージョンでインストールされていたりすることに頼る必要がないので、これは素晴らしいことです。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:25
#, fuzzy
msgid "With GraalVM native-images, this argument against Java does not hold anymore. Quarkus supports the build of native executables via GraalVM; mainly for building natively for Linux containers but there is experimental support for OS X and Windows as well.  Using the native build in combination with command-mode sounds like a very interesting and productive choice to write command-line tools."
msgstr "GraalVMのネイティブイメージを使用することで、Javaに対するこの議論はもう通用しません。QuarkusはGraalVMを介したネイティブ実行ファイルのビルドをサポートしています。コマンドモードと組み合わせてネイティブビルドを使用することは、コマンドラインツールを書く上で非常に興味深く、生産的な選択のように思えます。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:28
#, fuzzy
msgid "But how do you build your native executables for Linux, Mac and Windows? If you are hosting your sources as a GitHub project, I can tell you that it is super-simple to get started. GitHub offers link:https://help.github.com/en/actions/building-and-testing-code-with-continuous-integration/setting-up-continuous-integration-using-github-actions[ Actions] which is a free service like link:https://travis-ci.org/[Travis CI] but fully integrated into the GitHub experience. Also, it offers runners (i.e. the build agents) for Linux, Mac and Windows."
msgstr "しかし、Linux、Mac、Windows用のネイティブ実行ファイルをどのようにビルドするのでしょうか?Githubプロジェクトとしてソースをホスティングしているのであれば、始めるのはとても簡単です。Githubは link:https://help.github.com/en/actions/building-and-testing-code-with-continuous-integration/setting-up-continuous-integration-using-github-actions[Actions] を提供しています。これは link:https://travis-ci.org/[Travis CI] のような無料のサービスですが、Githubエクスペリエンスに完全に統合されています。また、Linux、Mac、Windows用のランナー(ビルドエージェント)も提供しています。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:30
#, fuzzy
msgid "To provide a native release-build for linux, place the following file under `.github/workflows` in your repo:"
msgstr "linux用のネイティブリリースビルドを提供するには、以下のファイルをレポの `.github/workflows` 以下に置いてください。"

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:34
#, no-wrap
msgid "name: release-build\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:38
#, no-wrap
msgid ""
"on:\n"
"  release:\n"
"    types: [created] <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:41
#, no-wrap
msgid ""
"jobs:\n"
"  build:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:43
#, no-wrap
msgid "    runs-on: ubuntu-latest <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:66
#, no-wrap
msgid ""
"    steps:\n"
"    - uses: actions/checkout@v2\n"
"    - name: Install graalvm\n"
"      uses: DeLaGuardo/setup-graalvm@3\n"
"      with:\n"
"        graalvm-version: '20.0.0.java11'\n"
"    - name: Install native-image\n"
"      run: gu install native-image\n"
"    - name: Set version\n"
"      run: ./mvnw versions:set -DnewVersion=\"${{ github.event.release.tag_name }}\" <3>\n"
"    - name: Build native executable\n"
"      run: ./mvnw package -Dnative <4>\n"
"    - name: Upload native executable\n"
"      id: upload-native-executable\n"
"      uses: actions/upload-release-asset@v1\n"
"      env:\n"
"        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n"
"      with:\n"
"        upload_url: ${{ github.event.release.upload_url }}\n"
"        asset_path: ./target/quarkus-ls-${{ github.event.release.tag_name }}-runner <5>\n"
"        asset_name: quarkus-ls-${{ github.event.release.tag_name }}-linux\n"
"        asset_content_type: application/octet-stream\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:68
#, fuzzy
msgid "This build-job is triggered when a new release is triggered. If your are the owner, you will have the button \"Draft a new release\" under link:https://github.com/38leinaD/quarkus-native-app-starter/releases[releases]"
msgstr "このビルドジョブは新しいリリースがトリガーされたときにトリガーされます。あなたがオーナーであれば、 link:https://github.com/38leinaD/quarkus-native-app-starter/releases[リリースの] 下に「新しいリリースを作成する」ボタンがあります。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:69
#, fuzzy
msgid "Uses a ubuntu runner. See link:https://github.com/actions/virtual-environments[GitHub Actions Virtual Environments] for a list of all supported environments/runners."
msgstr "ubuntu ランナーを使用します。サポートされているすべての環境やランナーの一覧は link:https://github.com/actions/virtual-environments[GitHub Actions Virtual Environments] を参照してください。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:70
#, fuzzy
msgid "Set version in `pom.xml` based on specified release version"
msgstr "指定されたリリースバージョンに基づいて `pom.xml` でバージョンを設定"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:71
#, fuzzy
msgid "Build the native executable"
msgstr "ネイティブ実行ファイルをビルドする"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:72
#, fuzzy
msgid "Upload/attach the artifact to the release"
msgstr "リリースに成果物をアップロード/添付する"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:74
#, fuzzy
msgid "Building for Mac just means to provide another job with `runs-on: macos-latest`."
msgstr "Building for Macは、単に `runs-on: macos-latest` で別の仕事を提供することを意味します。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:77
#, fuzzy
msgid "Windows is essentially the same but requires a little more attention and knowledge about the tooling. Getting it working required some investigation on how the native build depends on Visual Studio. Also,the Windows runners on GitHub Actions have a too small page-file by default. That needs increasing as the memory consumption is rather high when running the GraalVMs `native-image` command.  An full example of a working native-image build under windows can be found link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/.github/workflows/release-build-native-win64.yml[here]."
msgstr "Windowsも基本的には同じですが、もう少し注意とツールに関する知識が必要です。動作させるためには、ネイティブビルドがVisual Studioにどのように依存しているかを調査する必要があります。また、Github ActionsのWindowsランナーはデフォルトでページファイルが小さすぎます。GraalVMs `native-image` コマンドを実行しているときのメモリー消費量はかなり大きいので、これを増やす必要があります。Windows上でのネイティブイメージビルドの完全な例は link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/.github/workflows/release-build-native-win64.yml[ここに] あります。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:79
#, fuzzy
msgid "After triggering a release from the GitHub UI, the jobs for all target environments are triggered. The artifacts for all platforms are will be available within minutes and can be consumed by your users. Building, hosting: 100% free and no external service or registration needed."
msgstr "Github UIからリリースをトリガーした後、すべてのターゲット環境のジョブがトリガーされます。すべてのプラットフォームの成果物は数分以内に利用可能になり、ユーザーが利用できるようになります。ビルド、ホスティング。100%無料で、外部サービスや登録は必要ありません。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:81
#, fuzzy
msgid "image:github-actions.jpg[]"
msgstr "image:github-actions.jpg[alt=\"github actions\"]"

#. type: Title ==
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:82
#, fuzzy, no-wrap
msgid "Command-mode for UI-based applications"
msgstr "UIベースのアプリケーションのコマンドモード"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:86
#, fuzzy
msgid "Another exciting thing about command-mode is that it not only allows to write nice command-line tools (using e.g. link:https://picocli.info/[Picocli], link:http://aeshell.github.io/[Aesh] or link:https://commons.apache.org/proper/commons-cli/[Apache Commons CLI]) but in general allows to have more control over the lifecycle of an application.  With the possibility to embed your HTML/Javascript frontend, we can even build link:https://www.electronjs.org/[Electron-style] desktop application with rich user interfaces for our tools. As even JSF most likely will be link:https://github.com/adminfaces/quarkus-admin-starter[coming to Quarkus], there is a great variety of choices on how to build a frontend."
msgstr "コマンドモードのもう一つのエキサイティングな点は、( link:https://picocli.info/[Picocli] 、 link:http://aeshell.github.io/[Aesh] 、 link:https://commons.apache.org/proper/commons-cli/[Apache Commons CLI] などを使用して)素晴らしいコマンドラインツールを書くことができるだけでなく、一般的にはアプリケーションのライフサイクルをよりコントロールできるということです。HTML/Javascriptのフロントエンドを埋め込む可能性があるので、ツール用のリッチなユーザーインターフェイスを持つ link:https://www.electronjs.org/[Electronスタイルの] デスクトップアプリケーションを構築することもできます。JSFでさえ link:https://github.com/adminfaces/quarkus-admin-starter[Quarkusに来る] 可能性が高いので、フロントエンドを構築する方法については、非常に多様な選択肢があります。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:89
#, fuzzy
msgid "A very simple scaffold does not require much. If you have `quarkus-resteasy` as a dependency, the embedded server will be started on port `8080` just like in any regular Quarkus backend application.  As your tools might be running on a developer system alongside other app-servers or Quarkus instances, it is a good idea to choose a different port to not run into conflicts."
msgstr "非常にシンプルな足場はあまり必要ありません。依存関係として `quarkus-resteasy` を使用している場合、通常のQuarkusバックエンドアプリケーションと同様に、埋め込みサーバーはポート `8080` で起動します。ツールが他のアプリサーバーやQuarkusインスタンスと並んで開発者システム上で実行されている可能性があるため、競合が発生しないように別のポートを選択することをお勧めします。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:92
#, fuzzy
msgid "Configuring `quarkus.http.port=0` in your `application.properties` will make Quarkus choose a random but free port.  How to know from within your application which port it is? When injecting the config-property via `@ConfigProperty(name = \"quarkus.http.port\")`, you will get the assigned port."
msgstr "`application.properties` で `quarkus.http.port=0` を設定すると、Quarkusはランダムではありますが無料のポートを選択するようになります。どのポートが割り当てられているかをアプリケーション内で知るにはどうすればよいでしょうか? `@ConfigProperty(name = \"quarkus.http.port\")` 経由でconfig-propertyを注入すると、割り当てられたポートが取得できます。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:94
#, fuzzy
msgid "Assuming you have your front-end under `src/main/resources/META-INF/resources` (in my example it is plain HTML with Javascript) and using a very old Java API (`Desktop.getDesktop().browse(...)`), you can spin up the default browser to your app like this:"
msgstr "フロントエンドが `src/main/resources/META-INF/resources` (私の例では、Javascriptを使用したプレーンなHTML)で、非常に古いJava API( `Desktop.getDesktop().browse(…)` )を使用していると仮定すると、以下のようにアプリのデフォルトブラウザをスピンアップすることができます。"

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:103
#, no-wrap
msgid ""
"import java.awt.Desktop;\n"
"import java.net.URI;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import io.quarkus.runtime.Quarkus;\n"
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:106
#, no-wrap
msgid ""
"@QuarkusMain\n"
"public class HelloMain implements QuarkusApplication {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:109
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"quarkus.http.port\")\n"
"    Integer assignedPort; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:113
#, no-wrap
msgid ""
"    public static void main(String[] args) {\n"
"        Quarkus.run(HelloMain.class, args);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:117
#, no-wrap
msgid ""
"    @Override\n"
"    public int run(String... args) throws Exception {\n"
"        URI webappUri = new URI(\"http://localhost:\" + assignedPort + \"/index.html\"); <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:120
#, no-wrap
msgid ""
"        Desktop.getDesktop().browse(webappUri);\n"
"        Quarkus.waitForExit(); <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:124
#, no-wrap
msgid ""
"        return 0;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:126
#, fuzzy
msgid "Get the assigned port"
msgstr "割り当てられたポートを取得する"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:127
#, fuzzy
msgid "Open the `index.html` of your webapp with the default browser."
msgstr "デフォルトのブラウザでウェブアプリの `index.html` を開きます。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:128
#, fuzzy
msgid "Do not exit immediately but wait until the browser/tab is closed. See below for options how to do this."
msgstr "すぐに終了せずに、ブラウザ/タブが閉じるまで待ってください。これを行う方法については、以下のオプションを参照してください。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:130
#, fuzzy
msgid "There are some more considerations here to make it work reliably."
msgstr "ここには、確実に動作させるための配慮がいくつかあります。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:133
#, fuzzy
msgid "Ending the application when the browser window closes requires some feedback. There are simple ways to achieve this in a semi-reliabe way (see the usage of link:https://developer.mozilla.org/en-US/docs/Web/API/Window/unload_event[unload] in link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/src/main/resources/META-INF/resources/index.html#L89[index.html] by calling link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/src/main/java/org/acme/LsResource.java#L38[a rest endpoint]).  For Desktop-class applications, one might have to control the browser process more closely; or, like Electron, even package an own version of Chrome."
msgstr "ブラウザのウィンドウが閉じたときにアプリケーションを終了させるには、いくつかのフィードバックが必要です。これをセミリレーベ的な方法で実現する簡単な方法があります ( link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/src/main/java/org/acme/LsResource.java#L38[rest エンドポイントを] 呼び出して link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/src/main/resources/META-INF/resources/index.html#L89[index.html] で link:https://developer.mozilla.org/en-US/docs/Web/API/Window/unload_event[unload] を使用する方法を参照してください)。デスクトップクラスのアプリケーションでは、ブラウザプロセスをより厳密に制御する必要があるかもしれません。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:135
#, fuzzy
msgid "A problem I was facing is that `Desktop.getDesktop().browse(...)` does not seem to work reliably when run in native mode with the GraalVM version I was using (link:https://github.com/oracle/graal/issues/2430[issue]). The alternative, like already stated before, is to control the browser more directly and for example open a Chrome window via link:https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#exec(java.lang.String)[Runtime.exec(...)]. See the link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/src/main/java/org/acme/LsMain.java[main method] of the starter project for some possibilities to experiment with."
msgstr "私が直面していた問題は、私が使用していたGraalVMバージョン link:https://github.com/oracle/graal/issues/2430[(問題] )でネイティブモードで実行した場合、 `Desktop.getDesktop().browse(…)` が確実に動作しないようです。代替案としては、前に述べたように、より直接的にブラウザを制御し、例えば、 link:https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#exec(java.lang.String)[Runtime.exec(....)] を介してChromeウィンドウを開くことが挙げられます。実験するためのいくつかの可能性については、スタータープロジェクトの link:https://github.com/38leinaD/quarkus-native-app-starter/blob/master/src/main/java/org/acme/LsMain.java[メインメソッドを] 参照してください。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:137
#, fuzzy
msgid "image:quarkus-native-webui.gif[]"
msgstr "image:quarkus-native-webui.gif[alt=\"quarkus native webui\"]"

#. type: Title ==
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:138
#, fuzzy, no-wrap
msgid "Summary"
msgstr "概要"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:142
#, fuzzy
msgid "It will be interesting to see where people are taking command-mode. Maybe we will be seeing Electron-style Desktop applications being developed based on Quarkus? At least to me, this sounds promising and productive. No wasting of time to learn a completely different stack just to write a small tool. Instead, use the same stack and API I am familar with from backend development anyway."
msgstr "人々がどこでコマンドモードを使っているのかを見るのは興味深いことでしょう。もしかしたら、Quarkusをベースに開発されたElectronスタイルのデスクトップアプリケーションが見られるかもしれません。少なくとも私には、これは有望で生産的に聞こえます。小さなツールを書くためだけに、全く異なるスタックを学ぶ時間を無駄にする必要はありません。その代わりに、バックエンド開発で慣れ親しんだ同じスタックとAPIを使えばいいのです。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:144
#, fuzzy
msgid "We have seen that making a tool available in a way that is easy to consume by people can be achived with GitHub and GitHub Actions alone."
msgstr "人が消費しやすい形でツールを利用できるようにすることは、GithubとGithub Actionsだけで達成できることを見てきました。"

#. type: Plain text
#: upstream/_posts/2020-05-12-native-command-mode-tools.adoc:145
#, fuzzy
msgid "In case you are interested in a more complete tool where I have used the ideas presented here, check out my link:https://github.com/38leinaD/bpmn-diff[bpmn-diff] project which is a Git difftool for BPMN files. As an added benefit, it uses Gradle as opposed to Maven and thus provides additional examples on the use of GitHub Actions."
msgstr "ここで紹介したアイデアを使ったより完全なツールに興味がある方は、私の link:https://github.com/38leinaD/bpmn-diff[bpmn-diff] プロジェクトをチェックしてみてください。追加の利点として、このプロジェクトはMavenではなくGradleを使用しており、Githubアクションの使用例を追加で提供しています。"
