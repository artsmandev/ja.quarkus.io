# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-01 13:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:1
#, fuzzy, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:8
#, fuzzy, no-wrap
msgid ""
"layout: post\n"
"title: 'Supersonic Subatomic GraphQL'\n"
"date: 2020-06-23\n"
"tags: extension graphql\n"
"synopsis: Quick look at MicroProfile GraphQL version 1.0 that is now part of Quarkus 1.5.\n"
"author: phillipkruger\n"
"---\n"
msgstr ""
"layout: post\n"
"title: '超音速サブアトミックグラフQL'\n"
"date: 2020-06-23\n"
"tags: extension graphql\n"
"synopsis: 現在Quarkus 1.5の一部となっているMicroProfile GraphQLバージョン1.0をざっと見てみましょう。\n"
"author: phillipkruger\n"
"---\n"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:12
#, fuzzy
msgid "https://github.com/eclipse/microprofile-graphql[MicroProfile GraphQL] is now included in the just released https://quarkus.io/blog/quarkus-1-5-final-released/[version 1.5.0] of Quarkus."
msgstr "link:https://github.com/eclipse/microprofile-graphql[MicroProfile GraphQLは] 、リリースされたばかりのQuarkusの link:https://quarkus.io/blog/quarkus-1-5-final-released/[バージョン1.5.0] に含まれています。"

#. type: Title ==
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:13
#, fuzzy, no-wrap
msgid "What is GraphQL?"
msgstr "GraphQLとは?"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:16
#, fuzzy
msgid "\"GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data."
msgstr "\"GraphQLは、API用のオープンソースのデータクエリおよび操作言語であり、既存のデータを使ってクエリを実行するためのランタイムです。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:17
#, fuzzy
msgid "GraphQL interprets strings from the client, and returns data in an understandable, predictable, pre-defined manner."
msgstr "GraphQLは、クライアントから文字列を解釈し、あらかじめ定義された方法で、わかりやすく、予測可能な方法でデータを返します。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:18
#, fuzzy
msgid "GraphQL is an alternative, though not necessarily a replacement for REST.\""
msgstr "GraphQLはRESTの代替品ではありますが、必ずしもRESTの代替品ではありません。\""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:20
#, fuzzy
msgid "Read the full http://spec.graphql.org/draft/[GraphQL Specification]"
msgstr "link:http://spec.graphql.org/draft/[GraphQLの仕様書を] 読む"

#. type: Title ==
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:21
#, fuzzy, no-wrap
msgid "Why GraphQL ?"
msgstr "なぜグラフQLなのか?"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:24
#, fuzzy
msgid "The main reasons for using GraphQL are:"
msgstr "GraphQLを使う主な理由は以下の通りです。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:26
#, fuzzy
msgid "Avoiding over-fetching or under-fetching data. Clients can retrieve several types of data in a single request or can limit the response data based on specific criteria."
msgstr "データのオーバーフェッチやアンダーフェッチを回避します。クライアントは一度のリクエストで複数のタイプのデータを取得したり、特定の基準に基づいて応答データを制限することができます。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:27
#, fuzzy
msgid "Enabling data models to evolve. Changes to the schema can be made so as to not require changes on existing clients, and vice versa - this can be done without a need for a new version of the application."
msgstr "データモデルの進化を可能にします。スキーマへの変更は、既存のクライアントの変更を必要としないように行うことができ、その逆も可能です。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:28
#, fuzzy
msgid "Advanced developer experience:"
msgstr "先進的な開発者の経験。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:29
#, fuzzy
msgid "The schema defines how the data can be accessed and serves as the contract between the client and the server. Development teams on both sides can work without further communication."
msgstr "スキーマは、データがどのようにアクセスできるかを定義し、クライアントとサーバー間の契約として機能します。双方の開発チームは、それ以上のコミュニケーションなしに作業を行うことができます。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:30
#, fuzzy
msgid "Native schema introspection enables users to discover APIs and to refine the queries on the client-side. This advantage is increased with graphical tools such as GraphiQL and GraphQL Voyager enabling smooth and easy API discovery."
msgstr "ネイティブなスキーマイントロスペクションにより、ユーザーはAPIを発見し、クライアント側でクエリを絞り込むことができます。この利点は、GraphiQLやGraphQL Voyagerなどのグラフィカルなツールを使用することで、スムーズかつ簡単にAPIを発見できるようになります。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:31
#, fuzzy
msgid "On the client-side, the query language provides flexibility and efficiency enabling developers to adapt to the constraints of their technical environments while reducing server round-trips."
msgstr "クライアント側では、クエリ言語は柔軟性と効率性を提供し、開発者が技術的な環境の制約に適応することを可能にし、サーバーのラウンドトリップを削減します。"

#. type: Title ==
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:32
#, fuzzy, no-wrap
msgid "What is MicroProfile GraphQL?"
msgstr "MicroProfile GraphQLとは?"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:35
#, fuzzy
msgid "\"The intent of the MicroProfile GraphQL specification is to provide a \"code-first\" set of APIs that will enable users to quickly develop portable GraphQL-based applications in Java."
msgstr "\"MicroProfile GraphQL仕様の意図は、ユーザーがJavaでポータブルなGraphQLベースのアプリケーションを迅速に開発できるように、\"コードファースト\"のAPIセットを提供することにあります。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:36
#, fuzzy
msgid "There are 2 main requirements for all implementations of this specification, namely:"
msgstr "この仕様のすべての実装には、主に2つの要件があります。"

#. type: Bullet: '* '
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:38
#, fuzzy
msgid "Generate and make the GraphQL Schema available. This is done by looking at the annotations in the users code, and must include all GraphQL Queries and Mutations as well as all entities as defined implicitly via the response type or argument(s) of Queries and Mutations."
msgstr "GraphQL スキーマを生成して利用可能にします。これはユーザーコードのアノテーションを見ることによって行われ、すべての GraphQL クエリと変異、およびクエリと変異のレスポンスタイプまたは引数を介して暗黙的に定義されたすべてのエンティティーを含める必要があります。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:39
#, fuzzy, no-wrap
msgid "\n"
msgstr "\n"

#. type: Bullet: '* '
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:40
#, fuzzy
msgid "Execute GraphQL requests. This will be in the form of either a Query or a Mutation. As a minimum the specification must support executing these requests via HTTP.\""
msgstr "GraphQLリクエストを実行します。これは、クエリまたはミューテーションのいずれかの形式になります。最低限、仕様はHTTP経由でのリクエストの実行をサポートしていなければなりません。\""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:42
#, fuzzy
msgid "Read the full https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html[MicroProfile GraphQL Specification]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html[MicroProfile GraphQL 仕様書の] 全文を読む"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:44
#, fuzzy
msgid "You can now use https://code.quarkus.io/[code.quarkus.io] to get going with Quarkus and include the https://github.com/smallrye/smallrye-graphql[SmallRye GraphQL Extension]."
msgstr "これで link:https://code.quarkus.io/[code.quarkus.io] を使ってQuarkusを使い始め、 link:https://github.com/smallrye/smallrye-graphql[SmallRye GraphQL Extension] をインクルードすることができるようになりました。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:45
#, fuzzy, no-wrap
msgid "Code"
msgstr "コード"

#. type: Target for macro image
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:45
#, no-wrap
msgid "code_quarkus.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:48
#, fuzzy
msgid "This will create a Quarkus starter application with the following dependencies:"
msgstr "これにより、以下の依存関係を持つQuarkusスターターアプリケーションが作成されます。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:69
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-resteasy</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-junit5</artifactId>\n"
"  <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.rest-assured</groupId>\n"
"  <artifactId>rest-assured</artifactId>\n"
"  <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-smallrye-graphql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:75
#, fuzzy
msgid "At the moment, the example application created is a JAX-RS application. There is https://github.com/quarkusio/quarkus/issues/8134[some work in progress] to allow extensions to define custom examples application, but until then we always get a JAX-RS application. You can remove the `quarkus-resteasy` dependency as we do not need JAX-RS."
msgstr "現時点では、作成されたサンプルアプリケーションはJAX-RSアプリケーションです。エクステンションでカスタムサンプルアプリケーションを定義できるようにするための link:https://github.com/quarkusio/quarkus/issues/8134[作業が進行中] ですが、それまでは常にJAX-RSアプリケーションを取得しています。JAX-RSを必要としないので、 `quarkus-resteasy` の依存関係を削除することができます。"

#. type: Title ==
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:77
#, fuzzy, no-wrap
msgid "Your first GraphQL Endpoint."
msgstr "最初の GraphQL エンドポイント。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:80
#, fuzzy
msgid "Let's change the `ExampleResource` Rest service to be a GraphQL endpoint."
msgstr "`ExampleResource` Rest サービスを GraphQL エンドポイントに変更してみましょう。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:82
#, fuzzy
msgid "Replace the `@Path(\"/hello\")` class annotation with `@GraphQLApi`."
msgstr "`@Path(\"/hello\")` クラス注釈を `@GraphQLApi` に置き換えます。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:83
#, fuzzy
msgid "Replace the `@GET` method annotation with `@Query`."
msgstr "`@GET` メソッドのアノテーションを `@Query` ."

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:84
#, fuzzy
msgid "Remove the `@Produces(MediaType.TEXT_PLAIN)` method annotation and all JAX-RS imports."
msgstr "`@Produces(MediaType.TEXT_PLAIN)` メソッドアノテーションとすべての JAX-RS インポートを削除します。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:86
#, fuzzy
msgid "That is it! Your `ExampleResource` should look like this now:"
msgstr "それはそれです!あなたの `ExampleResource` は今、このようになっているはずです。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:90
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:93
#, no-wrap
msgid ""
"import org.eclipse.microprofile.graphql.GraphQLApi;\n"
"import org.eclipse.microprofile.graphql.Query;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:96
#, no-wrap
msgid ""
"@GraphQLApi\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:102
#, no-wrap
msgid ""
"    @Query\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:105
#, fuzzy
msgid "You can now run the application using Quarkus dev mode:"
msgstr "これで、Quarkusのdevモードを使用してアプリケーションを実行できるようになりました。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:109
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:174
#, no-wrap
msgid "mvn quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:112
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:177
#, fuzzy
msgid "Now browse to http://localhost:8080/graphql-ui/[localhost:8080/graphql-ui/] and run the following query:"
msgstr "ここで link:http://localhost:8080/graphql-ui/[localhost:8080/graphql-ui/] を参照し、以下のクエリを実行します。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:118
#, no-wrap
msgid ""
"{\n"
"  hello\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:121
#, fuzzy
msgid "This will return:"
msgstr "これは戻ってきます。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:129
#, no-wrap
msgid ""
"{\n"
"  \"data\": {\n"
"    \"hello\": \"hello\"\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:131
#, fuzzy
msgid "Also see the link:/guides/microprofile-graphql[MicroProfile GraphQL guide]."
msgstr "link:/guides/microprofile-graphql[MicroProfile GraphQLガイド] も参照してください。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:133
#, fuzzy
msgid "## A more detailed example"
msgstr "より詳細な例"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:135
#, fuzzy
msgid "Let's look at a more detailed example, get the source from https://github.com/phillip-kruger/graphql-example[this GitHub project]."
msgstr "もう少し詳しい例を見てみましょう link:https://github.com/phillip-kruger/graphql-example[。]"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:137
#, fuzzy
msgid "This is a multi-module application. First compile all modules. In the root:"
msgstr "これはマルチモジュールアプリケーションです。まず、すべてのモジュールをコンパイルします。ルートで"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:141
#, no-wrap
msgid "mvn clean install\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:144
#, fuzzy
msgid "Now browse to the quarkus example:"
msgstr "今すぐQuarkusの例を参照してください。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:148
#, no-wrap
msgid "cd quarkus-example\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:151
#, fuzzy
msgid "Look at `ProfileGraphQLApi.java` that is marked as a `@GraphQLApi`:"
msgstr "`@GraphQLApi` と記載されている `ProfileGraphQLApi.java` を見てください。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:158
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:271
#, no-wrap
msgid ""
"    @Query(\"person\")\n"
"    public Person getPerson(@Name(\"personId\") int personId){\n"
"        return personDB.getPerson(personId);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:162
#, fuzzy
msgid "Above method will get a person by `personId`. As you can see the method is made queryable with the `@Query` annotation. You can optionally provide the name (\"person\" in this case), however the default would be \"person\" anyway (method name without \"get\"). You can also optionally name the parameter, but the default would be the parameter name (\"personId\")."
msgstr "上記のメソッドは `personId` で人を取得します。ご覧のように、このメソッドは `@Query` アノテーションでクエリ可能になっています。オプションで名前(この場合は\"person\")を指定することができますが、デフォルトはいずれにせよ\"person\"です(\"get\"を含まないメソッド名)。オプションでパラメーターに名前を付けることもできますが、デフォルトはパラメーター名 (\"personId\") になります。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:164
#, fuzzy
msgid "The Person Object is a POJO that represents a Person (User or Member) in the system. It has many fields, some that are other complex POJOs:"
msgstr "Person オブジェクトは、システム内の Person (ユーザーまたはメンバー) を表す POJO です。多くのフィールドを持ち、中には他の複雑なPOJOと同じようなフィールドもあります。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:165
#, fuzzy, no-wrap
msgid "Person"
msgstr "人"

#. type: Target for macro image
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:165
#, no-wrap
msgid "person.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:168
#, fuzzy
msgid "However, the `Query` annotation makes it possible to query the exact fields we are interested in."
msgstr "しかし、 `Query` アノテーションを使用することで、興味のある分野を正確に照会することが可能になります。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:170
#, fuzzy
msgid "Run the example application:"
msgstr "サンプルアプリケーションを実行します。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:190
#, no-wrap
msgid ""
"{\n"
"  person(personId:1){\n"
"    names\n"
"    surname\n"
"    scores{\n"
"      name\n"
"      value\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:193
#, fuzzy
msgid "Notice that you have 'code insight' in the editor. That is because GraphQL has a schema and also supports introspection."
msgstr "エディタに「コードインサイト」があることに注目してください。それは、GraphQLにはスキーマがあり、インサイトもサポートしているからです。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:195
#, fuzzy
msgid "We can request only the fields we are interested in, making the payload much smaller."
msgstr "興味のある分野だけをリクエストすることができ、ペイロードをかなり小さくすることができます。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:196
#, fuzzy, no-wrap
msgid "GraphiQL"
msgstr "グラフィQL"

#. type: Target for macro image
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:196
#, no-wrap
msgid "graphiql.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:199
#, fuzzy
msgid "We can also combine queries, i.e., lets say we want to get the fields for person 1 as shown above, and also the name and surname for person 2, we can do the following:"
msgstr "クエリを組み合わせることもできます。例えば、上記のように人物1のフィールドを取得し、人物2の名前と苗字を取得したい場合は、以下のようにします。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:216
#, no-wrap
msgid ""
"{\n"
"  person1: person(personId:1){\n"
"    names\n"
"    surname\n"
"    scores{\n"
"      name\n"
"      value\n"
"    }\n"
"  }\n"
"  person2: person(personId:2){\n"
"    names\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:219
#, fuzzy
msgid "This will return :"
msgstr "これは戻ります。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:258
#, no-wrap
msgid ""
"{\n"
"  \"data\": {\n"
"    \"person1\": {\n"
"      \"names\": [\n"
"        \"Christine\",\n"
"        \"Fabian\"\n"
"      ],\n"
"      \"surname\": \"O'Reilly\",\n"
"      \"scores\": [\n"
"        {\n"
"          \"name\": \"Driving\",\n"
"          \"value\": 15\n"
"        },\n"
"        {\n"
"          \"name\": \"Fitness\",\n"
"          \"value\": 94\n"
"        },\n"
"        {\n"
"          \"name\": \"Activity\",\n"
"          \"value\": 63\n"
"        },\n"
"        {\n"
"          \"name\": \"Financial\",\n"
"          \"value\": 22\n"
"        }\n"
"      ]\n"
"    },\n"
"    \"person2\": {\n"
"      \"names\": [\n"
"        \"Masako\",\n"
"        \"Errol\"\n"
"      ],\n"
"      \"surname\": \"Zemlak\"\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:261
#, fuzzy
msgid "### Source fields"
msgstr "ソースフィールド"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:264
#, fuzzy
msgid "If you look closely at our query, you will see we asked for the `scores` field of the person, however, the `Person` POJO does not contain a `scores` field.  We added the `scores` field by adding a `@Source` field to the person:"
msgstr "私たちのクエリをよく見ると、私たちがその人の `scores` フィールドを要求したことがわかりますが、 `Person` POJO には `scores` フィールドが含まれていません。そこで、人物に `@Source` フィールドを追加して `scores` フィールドを追加しました。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:275
#, no-wrap
msgid ""
"    public List<Score> getScores(@Source Person person) {\n"
"        return scoreDB.getScores(person.getIdNumber());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:278
#, fuzzy
msgid "So we can add fields that merge onto the output by adding the `@Source` parameter that matches the response type."
msgstr "そこで、レスポンスタイプに一致する `@Source` パラメーターを追加することで、出力にマージするフィールドを追加することができます。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:280
#, fuzzy
msgid "### Partial results"
msgstr "部分的な結果"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:283
#, fuzzy
msgid "The above example merges two different data sources, but let's say the score system is down. We will then still return the data we have, and an error for the score:"
msgstr "上の例では2つの異なるデータソースをマージしていますが、スコアシステムがダウンしているとしましょう。その場合でも、我々は持っているデータとスコアのエラーを返します。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:317
#, no-wrap
msgid ""
"{\n"
"  \"errors\": [\n"
"    {\n"
"      \"message\": \"Scores for person [797-95-4822] is not available\",\n"
"      \"locations\": [\n"
"        {\n"
"          \"line\": 5,\n"
"          \"column\": 5\n"
"        }\n"
"      ],\n"
"      \"path\": [\n"
"        \"person\",\n"
"        \"scores2\"\n"
"      ],\n"
"      \"extensions\": {\n"
"        \"exception\": \"com.github.phillipkruger.user.graphql.ScoresNotAvailableException\",\n"
"        \"classification\": \"DataFetchingException\"\n"
"      }\n"
"    }\n"
"  ],\n"
"  \"data\": {\n"
"    \"person\": {\n"
"      \"names\": [\n"
"        \"Christine\",\n"
"        \"Fabian\"\n"
"      ],\n"
"      \"surname\": \"O'Reilly\",\n"
"      \"scores2\": null\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:320
#, fuzzy
msgid "### Native mode"
msgstr "ネイティブモード"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:322
#, fuzzy
msgid "Let's run this example in native mode (using graalvm-ce-java11-19.3.2):"
msgstr "この例をネイティブモードで実行してみましょう ( graalvm-ce-java11-19.3.2 を使用)。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:326
#, no-wrap
msgid "mvn -Pnative clean install\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:329
#, fuzzy
msgid "This will create a native executable and will now start the application very quickly:"
msgstr "これでネイティブの実行ファイルが作成され、アプリケーションが非常に早く起動するようになります。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:340
#, no-wrap
msgid ""
"./target/quarkus-example-1.0.0-SNAPSHOT-runner\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2020-06-11 17:02:55,041 INFO  [io.quarkus] (main) quarkus-example 1.0.0-SNAPSHOT native (powered by Quarkus 1.5.0.Final) started in 0.026s. Listening on: http://0.0.0.0:8080\n"
"2020-06-11 17:02:55,041 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2020-06-11 17:02:55,041 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb, smallrye-graphql, smallrye-openapi, swagger-ui]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:343
#, fuzzy
msgid "## In the pipeline"
msgstr "パイプラインでは"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:346
#, fuzzy
msgid "This is the first version of the MicroProfile GraphQL Spec and there are many things in the pipeline. One of those is a client.  We are proposing two types of clients:"
msgstr "これはMicroProfile GraphQL Specの最初のバージョンで、パイプラインには多くのものがあります。その一つがクライアントです。2種類のクライアントを提案しています。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:349
#, fuzzy
msgid "### Dynamic The dynamic client will allow you to build a query using a builder:"
msgstr "ダイナミック ダイナミッククライアントでは、ビルダーを使用してクエリを構築することができます。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:359
#, no-wrap
msgid ""
"// Building of the graphql document.\n"
"Document myDocument = document(\n"
"                operation(Operation.Type.QUERY,\n"
"                        field(\"people\",\n"
"                                field(\"id\"),\n"
"                                field(\"name\")\n"
"                        )));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:362
#, no-wrap
msgid ""
"// Serialization of the document into a string, ready to be sent.\n"
"String graphqlRequest = myDocument.toString();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:365
#, fuzzy
msgid "For more details see: https://github.com/worldline/dynaql[github.com/worldline/dynaql]"
msgstr "詳細は以下を参照してください。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:367
#, fuzzy
msgid "### Type safe"
msgstr "安全なタイプ"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:370
#, fuzzy
msgid "The type safe client will be closer to MicroProfile RESTClient. Looking at the same example as above, lets see how we can to use it.  From the root of the project, browse to the `quarkus-client` folder. This example uses https://quarkus.io/blog/introducing-command-mode/[Quarkus Command Mode] to make a Query."
msgstr "タイプセーフクライアントはMicroProfile RESTClientに近いものになります。上記と同じ例を見て、どのように使うことができるかを見てみましょう。プロジェクトのルートから `quarkus-client` フォルダーを参照します。この例では link:https://quarkus.io/blog/introducing-command-mode/[Quarkusコマンドモード] を使用してクエリを作成しています。"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:372
#, fuzzy
msgid "The client is not yet a Quarkus Extension, so we add it in our project like this:"
msgstr "クライアントがまだQuarkus Extensionではないので、こんな感じでプロジェクトに追加しています。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:380
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye</groupId>\n"
"    <artifactId>smallrye-graphql-client</artifactId>\n"
"    <version>${smallrye-graphql.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:383
#, fuzzy
msgid "Now we can create a POJO that contains only fields that we are interested in. Looking at `Person` and `Score` in the client module, it is much smaller than the definition on the server side:"
msgstr "これで、興味のあるフィールドだけを含むPOJOを作成できるようになりました。クライアントモジュールの `Person` と `Score` を見てみると、サーバー側の定義よりもかなり小さくなっています。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:384
#, fuzzy, no-wrap
msgid "Client"
msgstr "クライアント"

#. type: Target for macro image
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:384
#, no-wrap
msgid "client.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:387
#, fuzzy
msgid "All we need to do now is to add an interface that defines the queries that we are interested in:"
msgstr "あとは、興味のあるクエリを定義するインターフェースを追加するだけです。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:392
#, no-wrap
msgid ""
"@GraphQlClientApi\n"
"public interface PersonGraphQLClient {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:394
#, no-wrap
msgid "    public Person person(int personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:396
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:399
#, fuzzy
msgid "And now we can use this:"
msgstr "そして、これを使えるようになりました。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:405
#, no-wrap
msgid ""
"    //@Inject\n"
"    //PersonGraphQLClient personClient; or\n"
"    PersonGraphQLClient personClient = GraphQlClientBuilder.newBuilder().build(PersonGraphQLClient.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:408
#, no-wrap
msgid ""
"    // ...\n"
"    Person person = personClient.person(id);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:411
#, fuzzy
msgid "Running the Quarkus client appication we can now make a call to the server (make sure this is still running) and print the response:"
msgstr "Quarkusクライアントアプリケーションを実行すると、サーバーへの呼び出しを行い(これがまだ実行されていることを確認してください)、レスポンスを印刷することができます。"

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:432
#, no-wrap
msgid ""
"java -jar target/quarkus-client-1.0.0-SNAPSHOT-runner.jar 2\n"
"Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=lcd\n"
"=========================\n"
"|  Masako Zemlak        |\n"
"|                       |\n"
"|        Driving        |\n"
"|        48             |\n"
"|                       |\n"
"|        Fitness        |\n"
"|        73             |\n"
"|                       |\n"
"|        Activity       |\n"
"|        62             |\n"
"|                       |\n"
"|        Financial      |\n"
"|        54             |\n"
"|                       |\n"
"=========================\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:435
#, fuzzy
msgid "The number (2) is the `personId` in our example:"
msgstr "(2)の数字は、例の `personId` です。"

#. type: Title ==
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:436
#, fuzzy, no-wrap
msgid "Summary"
msgstr "概要"

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:440
#, fuzzy
msgid "This is a short and quick introduction to MicroProfile GraphQL that is now available in Quarkus.  There are many more https://download.eclipse.org/microprofile/microprofile-graphql-1.0.2/microprofile-graphql.html[features] and even more https://github.com/eclipse/microprofile-graphql/issues[planned], so stay tuned."
msgstr "これは、Quarkusで利用できるようになったMicroProfile GraphQLの簡単な紹介です。他にも多くの link:https://download.eclipse.org/microprofile/microprofile-graphql-1.0.2/microprofile-graphql.html[機能が] あり、さらに多くの link:https://download.eclipse.org/microprofile/microprofile-graphql-1.0.2/microprofile-graphql.html[機能が] link:https://github.com/eclipse/microprofile-graphql/issues[計画されて] います。"
