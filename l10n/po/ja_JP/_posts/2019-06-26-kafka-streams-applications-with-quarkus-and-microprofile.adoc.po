msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#. type: YAML Front Matter: title
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy, no-wrap
msgid "Building Kafka Streams applications with Quarkus and Eclipse MicroProfile"
msgstr "QuarkusとEclipse MicroProfileでKafka Streamsアプリケーションを構築する。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"https://kafka.apache.org/documentation/streams/[Kafka Streams] is a very popular solution for implementing stream processing applications based on Apache Kafka.\n"
"It lets you do typical data streaming tasks like filtering and transforming messages,\n"
"joining multiple Kafka topics, performing (stateful) calculations, grouping and aggregating values in time windows and much more."
msgstr "link:https://kafka.apache.org/documentation/streams/[Kafka Streams] は、Apache Kafkaベースのストリーム処理アプリケーションを実装するための非常に人気のあるソリューションです。メッセージのフィルタリングや変換、複数のKafkaトピックの結合、（ステートフルな）計算の実行、タイムウィンドウでの値のグループ化や集約など、典型的なデータストリーミングタスクを実行できます。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Unlike other streaming query engines that run on specific processing clusters,\n"
"Kafka Streams is a client library.\n"
"This means a (Java) application is needed which starts and runs the streaming pipeline,\n"
"reading from and writing to the Apache Kafka cluster."
msgstr "特定の処理クラスタ上で動作する他のストリーミングクエリーエンジンとは異なり、Kafka Streamsはクライアントライブラリです。つまり、ストリーミング・パイプラインを起動・実行し、Apache Kafkaクラスタからの読み込みとクラスタへの書き込みを行う（Java）アプリケーションが必要です。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"In this blog post we'll discuss how the combination of Quarkus and https://microprofile.io/[Eclipse MicroProfile] is a great foundation for implementing Kafka Streams applications,\n"
"running on the JVM and as native code compiled ahead of time via https://www.graalvm.org/[GraalVM]."
msgstr "このブログ記事では、Quarkusと link:https://microprofile.io/[Eclipse MicroProfile] の組み合わせが、Kafka Streamsアプリケーションを実装するための優れた基盤であり、JVM上で動作し、 link:https://www.graalvm.org/[GraalVMを介して] 事前にコンパイルされたネイティブコードとして動作することを説明します。"

#. type: Title ==
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy, no-wrap
msgid "The Quarkus extension for Kafka Streams"
msgstr "Kafka StreamsのためのQuarkusエクステンションです。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"As of version 0.17.0, Quarkus comes with link:/guides/kafka-streams[an extension] for building Kafka Streams applications.\n"
"To create a new Quarkus project with this extension, run the following:"
msgstr "バージョン0.17.0から、QuarkusにKafka Streamsアプリケーションを構築するための link:/guides/kafka-streams[エクステンション] が追加されました。このエクステンションを使用して新しいQuarkusプロジェクトを作成するには、以下を実行します："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"This will set up a new project, adding the dependency to the Quarkus Kafka Streams extension,\n"
"which in turn will pull in Kafka Streams and all its dependencies."
msgstr "これで新しいプロジェクトがセットアップされ、Quarkus Kafka Streamsエクステンションに依存関係が追加され、Kafka Streamsとその依存関係がすべて取り込まれます。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"If you've worked with Kafka Streams before, the implementation of a data streaming pipeline will look very familiar to you.\n"
"You first build up a `Topology` and then create a `KafkaStreams` instance.\n"
"For starting and stopping the latter, Quarkus' `StartupEvent` and `ShutdownEvent` classes come in handy."
msgstr "Kafka Streamsを使ったことがある人なら、データストリーミングパイプラインの実装はとても見慣れたものに見えるでしょう。まず `Topology` を構築し、 `KafkaStreams` インスタンスを作成します。後者の開始と停止には、Quarkus の `StartupEvent` と `ShutdownEvent` クラスが便利です。"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "Overall, the structure of a Kafka Streams pipeline running on Quarkus will look like so:"
msgstr "全体として、Quarkus上で動作するKafka Streamsパイプラインの構造は、次のようになります："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"For the very common requirement that you'd like to serialize and deserialize Java types used in the streaming pipeline into/from JSON\n"
"(e.g. when materializing them in a state store),\n"
"the Quarkus Kafka Streams extension provides the class `io.quarkus.kafka.client.serialization.JsonbSerde`.\n"
"It's a `Serde` implementation based on JSON-B:"
msgstr "ストリーミングパイプラインで使用されるJava型をJSONにシリアライズしたり、JSONからデシリアライズしたりしたいという非常に一般的な要件（ステートストアで実体化する場合など）に対して、Quarkus Kafka Streams拡張はクラス `io.quarkus.kafka.client.serialization.JsonbSerde` を提供します。これは、JSON-Bに基づく `Serde` ："

#. type: Title ==
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, no-wrap
msgid "Running Native"
msgstr "ネイティブ実行"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Based on Kafka's notion of topic partitioning, Kafka Streams applications can easily be scaled out:\n"
"the load will be shared amongst multiple instances of the application,\n"
"each processing just a subset of the partitions of the input topic(s)."
msgstr "Kafkaのトピック・パーティショニングの概念に基づけば、Kafka Streamsアプリケーションは簡単にスケールアウトすることができます。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Running Quarkus applications in native code via GraalVM comes in very handy for that:\n"
"besides the very fast start-up time, the applications will use significantly less memory when compiled to native code.\n"
"This lets you spin up many instances of a Quarkus-based Kafka Streams pipeline in parallel,\n"
"in a very memory-efficient way."
msgstr "GraalVMを介してネイティブコードでQuarkusアプリケーションを実行すると、起動時間が非常に速くなるだけでなく、ネイティブコードにコンパイルされたアプリケーションのメモリ使用量が大幅に削減されます。これにより、QuarkusベースのKafka Streamsパイプラインの多数のインスタンスを、メモリ効率の高い方法で並列にスピンアップできます。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"The extension takes care of everything needed for building native Kafka Streams applications,\n"
"for instance it makes sure that the right RocksDB native libraries are added to the application image.\n"
"All you need to do is to specify the `enableJni` option for the Quarkus Maven plug-in,\n"
"allowing those native libraries to be invoked via JNI:"
msgstr "このエクステンションは、ネイティブのKafka Streamsアプリケーションを構築するために必要なすべての処理を行います。Quarkus Mavenプラグインに `enableJni` オプションを指定するだけで、ネイティブライブラリをJNI経由で呼び出すことができます："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"When using the `JsonbSerde` for unmarshalling JSON into corresponding Java objects,\n"
"those types must be marked with the `@RegisterForReflection` annotation,\n"
"so that they can to be instantiated reflectively by JSON-B in native mode:"
msgstr "JSONを対応するJavaオブジェクトにアンマーシャリングするために `JsonbSerde` 、これらの型に `@RegisterForReflection` アノテーションを付ける必要があります："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Then build the application using the `native` profile\n"
"(note this requires GraalVM to be installed on your system; refer to the Quarkus link:/guides/building-native-image[native image] guide to learn more):"
msgstr "次に、 `native` プロファイルを使用してアプリケーションをビルドします（この作業には、システムにGraalVMがインストールされている必要があることに注意してください：）"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Finding the right amount of memory needed for running the application can require some testing.\n"
"E.g. observe CPU load and run the native binary with the `-XX:+PrintGC -XX:+PrintGCTimeStamps -XX:+VerboseGC` options\n"
"in order to gain insight into how often garbage collection kicks in.\n"
"If you started the application with not enough heap space,\n"
"you'll typically observe that GC is happening very frequently, causing increased CPU load."
msgstr "アプリケーションの実行に必要な適切なメモリ量を見つけるには、いくつかのテストが必要です。例えば、CPU 負荷を観察し、ガベージコレクションがどの程度の頻度で起動する かを知るために、 `-XX:+PrintGC -XX:+PrintGCTimeStamps -XX:+VerboseGC` オプションを付けてネイティブバイナリを実行します。十分なヒープ領域がない状態でアプリケーションを起動した場合、通常、ガベージコレ クションが非常に頻繁に発生し、CPU 負荷が増加することが観察されるでしょう。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"To give an example, for the https://github.com/quarkusio/quarkus-quickstarts/tree/main/kafka-streams-quickstart[streaming pipeline] discussed in the Kafka Streams extension guide,\n"
"a heap size of 32 MB (`-Xmx32m`) works very well,\n"
"resulting in less than 50 MB memory needed by the process in total\n"
"(RSS, resident set size).\n"
"Note that this number also contains the memory needed for the HTTP endpoint defined in that example,\n"
"which is used for answering interactive queries via REST."
msgstr "例を挙げると、Kafka Streams 拡張ガイドで説明されている link:https://github.com/quarkusio/quarkus-quickstarts/tree/main/kafka-streams-quickstart[ストリーミングパイプライン] の場合、ヒープサイズを 32 MB ( `-Xmx32m` ) にすると非常にうまく動作し、プロセスに必要なメモリは合計で 50 MB 未満になります (RSS、常駐セットサイズ)。この数値には、REST経由の対話型クエリに応答するために使用される、その例で定義されたHTTPエンドポイントに必要なメモリも含まれていることに注意してください。"

#. type: Title ==
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy, no-wrap
msgid "Gaining Operational Insight"
msgstr "オペレーショナルインサイトの獲得"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"One of the nice things about Quarkus is that it comes with support for all the Eclipse MicroProfile APIs.\n"
"They help to address common requirements when building microservices,\n"
"such as https://microprofile.io/project/eclipse/microprofile-health[health checks] (\"Is my application running and ready to handle requests?\")\n"
"and https://microprofile.io/project/eclipse/microprofile-metrics[metrics] (\"What's the throughput of my application?\", \"How many requests has it processed?\" etc.)."
msgstr "Quarkusの優れた点の1つは、Eclipse MicroProfile APIをすべてサポートしていることです。これらのAPIは、 link:https://microprofile.io/project/eclipse/microprofile-health[ヘルスチェック] （「アプリケーションが実行中で、リクエストを処理する準備ができているか」）や link:https://microprofile.io/project/eclipse/microprofile-metrics[メトリクス] （「アプリケーションのスループットはどのくらいか」、「処理したリクエスト数はどのくらいか」など）など、マイクロサービスを構築する際の一般的な要件に対応するのに役立ちます。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Based on those APIs,\n"
"it just requires a little bit of coding to implement health checks and metrics for a Kafka Streams application.\n"
"You can add the right dependencies by running:"
msgstr "これらのAPIに基づいて、Kafka Streamsアプリケーションのヘルスチェックとメトリクスを実装するには、ほんの少しのコーディングが必要です。を実行することで、適切な依存関係を追加できます："

#. type: Title ==
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy, no-wrap
msgid "Healthchecks"
msgstr "健康診断のご案内"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "Then creating the health check is as simple as adding the following to the pipeline implementation:"
msgstr "そしてヘルスチェックの作成は、パイプラインの実装に以下を追加するだけの簡単なものです："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"This will expose a health check via HTTP under `/health/live`,\n"
"which when queried will yield a response like this:"
msgstr "これは、 `/health/live` の下でHTTPを介してヘルスチェックを公開します："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"When using a container orchestrator such as Kubernetes,\n"
"you could then set up a https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/[liveness probe] for this endpoint.\n"
"If the health check fails (i.e. the streaming pipeline is not in the running state),\n"
"it will return an HTTP 503 response.\n"
"This would be the indicator to the orchestrator to restart the pod of this application."
msgstr "Kubernetesのようなコンテナオーケストレータを使用する場合、このエンドポイントに対して link:https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/[有効性プローブ] を設定することができます。ヘルスチェックに失敗した場合（つまりストリーミングパイプラインが実行状態でない場合）、HTTP 503レスポンスを返します。これは、このアプリケーションのポッドを再起動するためのオーケストレータへのインジケータになります。"

#. type: Title ==
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"While a health check provides simple means of finding out whether the application is in a state where it can handle requests/messages or not,\n"
"it is desirable to have more insight into the behaviour of the service.\n"
"E.g. it might be of interest to see how many messages have been processed by the streaming pipeline,\n"
"what's the arrival rate of messages, what's the average processing time and much more."
msgstr "ヘルスチェックは、アプリケーションがリクエスト/メッセージを処理できる状態にあるかどうかを知るための単純な手段を提供しますが、サービスの動作についてより多くの洞察を得ることが望ましいです。例えば、ストリーミングパイプラインによって処理されたメッセージの数、メッセージの到着率、平均処理時間などです。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Kafka Streams comes with https://kafka.apache.org/22/javadoc/org/apache/kafka/streams/KafkaStreams.html#metrics--[rich metrics] capabilities which can help to answer these questions.\n"
"Using the MicroProfile Metrics API, these metrics can be exposed via HTTP.\n"
"From there they can be scraped by tools such as https://prometheus.io/[Prometheus] and eventually be fed to dashboard solutions such as https://grafana.com/[Grafana].\n"
"Note that exposing metrics via HTTP instead of JMX has the advantage that this also works when running the application in native mode via GraalVM."
msgstr "Kafka Streams には、これらの質問に答えるのに役立つ link:https://kafka.apache.org/22/javadoc/org/apache/kafka/streams/KafkaStreams.html#metrics--[豊富なメトリクス] 機能があります。MicroProfile Metrics API を使用すると、これらのメトリクスを HTTP 経由で公開できます。そこから link:https://prometheus.io/[Prometheus] などのツールでスクレイピングし、最終的には link:https://grafana.com/[Grafana] などのダッシュボードソリューションにフィードすることができます。JMX ではなく HTTP 経由でメトリクスを公開すると、GraalVM を介してネイティブ モードでアプリケーションを実行する場合にも機能するという利点があることに注意してください。"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "Similar to the health check case, just a bit of glue code is needed for exposing the metrics:"
msgstr "ヘルスチェックの場合と同様に、メトリクスを公開するためにほんの少しのグルーコードが必要です："

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "Process all Kafka Streams metrics, using a unique name to register them"
msgstr "すべてのKafka Streamsのメトリクスを処理し、ユニークな名前を使用して登録します。"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "Some string-typed \"metrics\" must be excluded"
msgstr "一部の文字列型「メトリクス」は除外する必要がある"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "All metrics whose name ends with \"total\" or \"counter\" will be exposed as counter-typed metrics"
msgstr "名前が \"total \"または \"counter \"で終わるすべてのメトリクスは、カウンター型メトリクスとして公開されます。"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "All other metrics will be exposed as gauge-typed metrics, i.e. plain numeric values"
msgstr "他のすべてのメトリクスは、ゲージ型メトリクス、すなわちプレーンな数値として公開されます。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Once the application is started, the metrics will be exposed under `/metrics`,\n"
"returning the data in the OpenMetrics format by default:"
msgstr "アプリケーションが起動すると、メトリックスは `/metrics` で公開され、デフォルトでは OpenMetrics フォーマットでデータを返します："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"From here it's a matter of minutes to set up Prometheus to scrape this target,\n"
"configure a Prometheus data source in Grafana and configure a dashboard for visualizing the metrics of interest to you.\n"
"E.g. the following shows a simple dashboard displaying the poll/process/commit rates and latencies as well as the total number of processed events\n"
"in the quickstart example:"
msgstr "ここから、このターゲットをスクレイピングするためにPrometheusを設定し、GrafanaでPrometheusデータソースを設定し、関心のあるメトリクスを可視化するためのダッシュボードを設定するのは数分の問題です。例えば、以下はクイックスタートの例で、ポーリング/プロセス/コミットのレートとレイテンシ、処理されたイベントの総数を表示するシンプルなダッシュボードです："

#. type: Title ==
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy, no-wrap
msgid "Summary and Outlook"
msgstr "まとめと展望"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Quarkus and Eclipse MicroProfile are a great basis for building Kafka Streams applications.\n"
"The Quarkus extension for Kafka Streams comes with everything needed to run stream processing pipelines on the JVM as well as in native mode via GraalVM.\n"
"The MicroProfile APIs for health checks and metrics can be used to expose the right information\n"
"for gaining insight into running stream processing applications."
msgstr "QuarkusとEclipse MicroProfileは、Kafka Streamsアプリケーションを構築するための優れた基盤です。Kafka Streams用のQuarkusエクステンションには、GraalVMを介したネイティブモードだけでなく、JVM上でストリーム処理パイプラインを実行するために必要なすべてのものが付属しています。ヘルスチェックとメトリクス用のMicroProfile APIを使用すると、実行中のストリーム処理アプリケーションを把握するための適切な情報を公開できます。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Going forward, we plan to further reduce the efforts needed for building Kafka Streams applications on Quarkus.\n"
"Instead of having to deal with the lifecycle of the pipeline yourself,\n"
"it should be enough to declare a CDI producer method returning the streaming `Topology`:"
msgstr "今後は、Quarkus上でKafka Streamsアプリケーションを構築するために必要な労力をさらに削減する予定です。パイプラインのライフサイクルを自分で処理する代わりに、ストリーミング `Topology` を返すCDIプロデューサーメソッドを宣言するだけで十分です："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"This means you'll be able to focus on implementing the actual pipeline logic,\n"
"while the Quarkus extension would take care of everything else:\n"
"configuring Kafka Streams based on the Quarkus `application.properties` file,\n"
"starting the pipeline and automatically exposing healthchecks and metrics."
msgstr "つまり、実際のパイプラインロジックの実装に集中することができ、それ以外のことはQuarkusエクステンションが行います。Quarkus `application.properties` ファイルに基づいてKafka Streamsを設定し、パイプラインを開始し、ヘルスチェックとメトリクスを自動的に公開します。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"In case this sounds interesting to you, have an eye on the next Quarkus release announcements,\n"
"as this improved functionality should be out soon.\n"
"If you got any related ideas, let us know and join the discussion in Quarkus issue https://github.com/quarkusio/quarkus/issues/2863[#2863]."
msgstr "この改良された機能はすぐにリリースされるはずですので、次のQuarkusリリースのアナウンスに注目してください。関連するアイデアがあれば、Quarkus issue link:https://github.com/quarkusio/quarkus/issues/2863[#2863] のディスカッションにご参加ください。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"To learn more about the Quarkus extension for Kafka Streams and its current capabilities,\n"
"check out link:/guides/kafka-streams[the detailed guide].\n"
"It not only discusses the actual stream pipeline implementation, but also touches on\n"
"building (distributed) interactive queries for exposing the current processing state via REST."
msgstr "Quarkus extension for Kafka Streamsの詳細と現在の機能については、 link:/guides/kafka-streams[詳細ガイド] をご覧ください。実際のストリームパイプラインの実装だけでなく、REST経由で現在の処理状態を公開するための（分散）対話型クエリの構築についても触れています。"
