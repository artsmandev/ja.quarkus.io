# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-27 20:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:1
#, fuzzy, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:7
#, fuzzy, no-wrap
msgid ""
"layout: post\n"
"title: 'Building Kafka Streams applications with Quarkus and Eclipse MicroProfile'\n"
"date: 2019-06-26\n"
"tags: kafka microprofile\n"
"author: gmorling\n"
"---\n"
msgstr ""
"layout: post\n"
"title: QuarkusとEclipse MicroProfileを使ったKafka Streamsアプリケーションの構築\n"
"date: 2019-06-26\n"
"tags: kafka microprofile\n"
"author: gmorling\n"
"---\n"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:12
#, fuzzy
msgid "https://kafka.apache.org/documentation/streams/[Kafka Streams] is a very popular solution for implementing stream processing applications based on Apache Kafka.  It lets you do typical data streaming tasks like filtering and transforming messages, joining multiple Kafka topics, performing (stateful) calculations, grouping and aggregating values in time windows and much more."
msgstr "link:https://kafka.apache.org/documentation/streams/[Kafka Streams は] 、Apache Kafka ベースのストリーム処理アプリケーションを実装するための非常に人気のあるソリューションです。メッセージのフィルタリングや変換、複数の Kafka トピックの結合、 (ステートフルな) 計算の実行、タイムウィンドウでの値のグループ化や集約などの典型的なデータストリーミングタスクを行うことができます。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:17
#, fuzzy
msgid "Unlike other streaming query engines that run on specific processing clusters, Kafka Streams is a client library.  This means a (Java) application is needed which starts and runs the streaming pipeline, reading from and writing to the Apache Kafka cluster."
msgstr "特定の処理クラスター上で動作する他のストリーミングクエリエンジンとは異なり、Kafka Streams はクライアントライブラリです。つまり、ストリーミングパイプラインを起動して実行し、Apache Kafka クラスターから読み書きする (Java) アプリケーションが必要になります。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:20
#, fuzzy
msgid "In this blog post we'll discuss how the combination of Quarkus and https://microprofile.io/[Eclipse MicroProfile] is a great foundation for implementing Kafka Streams applications, running on the JVM and as native code compiled ahead of time via https://www.graalvm.org/[GraalVM]."
msgstr "このブログ記事では、Quarkusと link:https://microprofile.io/[Eclipse MicroProfile] の組み合わせが、JVM上で実行され、 link:https://www.graalvm.org/[GraalVMを] 介して事前にコンパイルされたネイティブコードとしてKafka Streamsアプリケーションを実装するための優れた基盤となる方法について説明します。"

#. type: Title ==
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:21
#, fuzzy, no-wrap
msgid "The Quarkus extension for Kafka Streams"
msgstr "Kafka Streams用のQuarkusエクステンション"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:25
#, fuzzy
msgid "As of version 0.17.0, Quarkus comes with link:/guides/kafka-streams[an extension] for building Kafka Streams applications.  To create a new Quarkus project with this extension, run the following:"
msgstr "バージョン0.17.0では、QuarkusにはKafka Streamsアプリケーションを構築するための link:/guides/kafka-streams[エクステンションが] 搭載されています。このエクステンションを使用して新しいQuarkusプロジェクトを作成するには、以下を実行します。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:32
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:0.17.0:create \\\n"
"   -DprojectGroupId=org.acme \\\n"
"   -DprojectArtifactId=kafka-streams-quickstart-example \\\n"
"   -Dextensions=\"kafka-streams\"\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:36
#, fuzzy
msgid "This will set up a new project, adding the dependency to the Quarkus Kafka Streams extension, which in turn will pull in Kafka Streams and all its dependencies."
msgstr "これにより、新しいプロジェクトが設定され、Quarkus Kafka Streamsエクステンションに依存関係が追加され、Kafka Streamsとそのすべての依存関係がプルインされます。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:40
#, fuzzy
msgid "If you've worked with Kafka Streams before, the implementation of a data streaming pipeline will look very familiar to you.  You first build up a `Topology` and then create a `KafkaStreams` instance.  For starting and stopping the latter, Quarkus' `StartupEvent` and `ShutdownEvent` classes come in handy."
msgstr "Kafka Streams を使ったことがある人なら、データストリーミングパイプラインの実装は非常に見慣れたものになるでしょう。最初に `Topology` を構築し、次に `KafkaStreams` のインスタンスを作成します。後者の開始と停止には、Quarkusの `StartupEvent` と `ShutdownEvent` クラスが便利です。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:42
#, fuzzy
msgid "Overall, the structure of a Kafka Streams pipeline running on Quarkus will look like so:"
msgstr "全体的に、Quarkus上で実行されるKafka Streamsパイプラインの構造は以下のようになります。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:47
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:240
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyStreamingPipeline {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:49
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:182
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:245
#, no-wrap
msgid "    private KafkaStreams streams;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:54
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent event) {\n"
"        // set up Kafka Streams config, e.g. sourced from application.properties\n"
"        Properties props = new Properties();\n"
"        // props.put(..., ...);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:58
#, no-wrap
msgid ""
"        // set up the stream topology\n"
"        StreamsBuilder builder = new StreamsBuilder();\n"
"        // builder.stream(...)\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:62
#, no-wrap
msgid ""
"        streams = new KafkaStreams(builder.build(), props);\n"
"        streams.start();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:67
#, no-wrap
msgid ""
"    void onStop(@Observes ShutdownEvent event) {\n"
"        streams.close();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:73
#, fuzzy
msgid "For the very common requirement that you'd like to serialize and deserialize Java types used in the streaming pipeline into/from JSON (e.g. when materializing them in a state store), the Quarkus Kafka Streams extension provides the class `io.quarkus.kafka.client.serialization.JsonbSerde`.  It's a `Serde` implementation based on JSON-B:"
msgstr "ストリーミングパイプラインで使用されるJava型をJSONにシリアライズしたり、JSONからデシリアライズしたりしたいという非常に一般的な要件(ステートストアでマテリアライズする場合など)に対して、Quarkus Kafka Streamsエクステンションはクラスを提供しています `io.quarkus.kafka.client.serialization.JsonbSerde` .これは、JSON-Bをベースにした `Serde` の実装です。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:78
#, no-wrap
msgid ""
"...\n"
"JsonbSerde<WeatherStation> weatherStationSerde = new JsonbSerde<>(WeatherStation.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:84
#, no-wrap
msgid ""
"GlobalKTable<Integer, WeatherStation> stations = builder.globalTable(\n"
"    \"weather-stations\",\n"
"    Consumed.with(Serdes.Integer(), weatherStationSerde)\n"
");\n"
"...\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:86
#, fuzzy, no-wrap
msgid "Running Native"
msgstr "ネイティブの実行"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:91
#, fuzzy
msgid "Based on Kafka's notion of topic partitioning, Kafka Streams applications can easily be scaled out: the load will be shared amongst multiple instances of the application, each processing just a subset of the partitions of the input topic(s)."
msgstr "Kafka のトピックパーティショニングの概念に基づいて、Kafka Streams アプリケーションは簡単にスケールアウトすることができます。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:96
#, fuzzy
msgid "Running Quarkus applications in native code via GraalVM comes in very handy for that: besides the very fast start-up time, the applications will use significantly less memory when compiled to native code.  This lets you spin up many instances of a Quarkus-based Kafka Streams pipeline in parallel, in a very memory-efficient way."
msgstr "GraalVMを介してネイティブコードでQuarkusアプリケーションを実行すると、非常に便利です。これにより、QuarkusベースのKafka Streamsパイプラインの多くのインスタンスを、メモリー効率の高い方法で並列にスピンアップすることができます。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:101
#, fuzzy
msgid "The extension takes care of everything needed for building native Kafka Streams applications, for instance it makes sure that the right RocksDB native libraries are added to the application image.  All you need to do is to specify the `enableJni` option for the Quarkus Maven plug-in, allowing those native libraries to be invoked via JNI:"
msgstr "このエクステンションは、ネイティブのKafka Streamsアプリケーションを構築するために必要なすべての処理を行います。例えば、正しいRocksDBネイティブライブラリがアプリケーションイメージに追加されていることを確認します。必要なのは、Quarkus Mavenプラグインの `enableJni` オプションを指定するだけで、これらのネイティブライブラリをJNI経由で呼び出すことができます。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:118
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-maven-plugin</artifactId>\n"
"    <executions>\n"
"        <execution>\n"
"            <goals>\n"
"                <goal>native-image</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <enableJni>true</enableJni>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:123
#, fuzzy
msgid "When using the `JsonbSerde` for unmarshalling JSON into corresponding Java objects, those types must be marked with the `@RegisterForReflection` annotation, so that they can to be instantiated reflectively by JSON-B in native mode:"
msgstr "JSON を対応する Java オブジェクトにアンマーシャリングするために `JsonbSerde` を使用する場合、それらの型には `@RegisterForReflection` アノテーションを付ける必要があります。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:128
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class WeatherStation {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:132
#, no-wrap
msgid ""
"    public int id;\n"
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:136
#, fuzzy
msgid "Then build the application using the `native` profile (note this requires GraalVM to be installed on your system; refer to the Quarkus link:/guides/building-native-image[native image] guide to learn more):"
msgstr "次に、 `native` プロファイルを使用してアプリケーションを構築します(これにはGraalVMがシステムにインストールされている必要がありますので、詳細についてはQuarkus link:/guides/building-native-image[ネイティブイメージガイド] を参照してください)。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:140
#, no-wrap
msgid "mvn clean package -f aggregator/pom.xml -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:147
#, fuzzy
msgid "Finding the right amount of memory needed for running the application can require some testing.  E.g. observe CPU load and run the native binary with the `-XX:+PrintGC -XX:+PrintGCTimeStamps -XX:+VerboseGC` options in order to gain insight into how often garbage collection kicks in.  If you started the application with not enough heap space, you'll typically observe that GC is happening very frequently, causing increased CPU load."
msgstr "アプリケーションの実行に必要なメモリーの適切な量を見つけるには、いくつかのテストが必要になることがあります。例えば、CPU 負荷を観察し、ガベージコレクションがどのくらいの頻度で発生するかを知るために、 `-XX:+PrintGC -XX:+PrintGCTimeStamps -XX:+VerboseGC` オプションでネイティブバイナリーを実行してみてください。十分なヒープスペースがない状態でアプリケーションを起動した場合、GC が非常に頻繁に発生し、CPU 負荷の増加を引き起こすことが一般的に観察されます。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:154
#, fuzzy
msgid "To give an example, for the https://github.com/quarkusio/quarkus-quickstarts/tree/main/kafka-streams-quickstart[streaming pipeline] discussed in the Kafka Streams extension guide, a heap size of 32 MB (`-Xmx32m`) works very well, resulting in less than 50 MB memory needed by the process in total (RSS, resident set size).  Note that this number also contains the memory needed for the HTTP endpoint defined in that example, which is used for answering interactive queries via REST."
msgstr "例を挙げると、Kafka Streams エクステンションガイドで説明されている link:https://github.com/quarkusio/quarkus-quickstarts/tree/master/kafka-streams-quickstart[ストリーミングパイプライン] では、ヒープサイズが 32 MB ( `-Xmx32m` ) で非常にうまく機能し、プロセスが必要とするメモリーは合計で 50 MB 未満になります (RSS, レジデントセットサイズ)。この数値には、この例で定義された HTTP エンドポイントに必要なメモリーも含まれていることに注意してください。"

#. type: Title ==
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:155
#, fuzzy, no-wrap
msgid "Gaining Operational Insight"
msgstr "オペレーショナルインサイトの獲得"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:161
#, fuzzy
msgid "One of the nice things about Quarkus is that it comes with support for all the Eclipse MicroProfile APIs.  They help to address common requirements when building microservices, such as https://microprofile.io/project/eclipse/microprofile-health[health checks] (\"Is my application running and ready to handle requests?\")  and https://microprofile.io/project/eclipse/microprofile-metrics[metrics] (\"What's the throughput of my application?\", \"How many requests has it processed?\" etc.)."
msgstr "Quarkusの良いところは、すべてのEclipse MicroProfile APIをサポートしていることです。これらのAPIは、 link:https://microprofile.io/project/eclipse/microprofile-health[ヘルスチェック] (「私のアプリケーションは動作していて、リクエストを処理する準備ができているか」)や link:https://microprofile.io/project/eclipse/microprofile-metrics[メトリクス] (「私のアプリケーションのスループットは?"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:165
#, fuzzy
msgid "Based on those APIs, it just requires a little bit of coding to implement health checks and metrics for a Kafka Streams application.  You can add the right dependencies by running:"
msgstr "これらの API に基づいて、Kafka Streams アプリケーションにヘルスチェックとメトリクスを実装するには、ほんの少しのコーディングが必要です。実行することで適切な依存関係を追加することができます。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:169
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"health,metrics\"\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:171
#, fuzzy, no-wrap
msgid "Healthchecks"
msgstr "健康診断"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:174
#, fuzzy
msgid "Then creating the health check is as simple as adding the following to the pipeline implementation:"
msgstr "そうすると、ヘルスチェックの作成は、パイプラインの実装に以下のように追加するだけで簡単です。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:180
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped\n"
"public class MyStreamingPipeline implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:184
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:254
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:192
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.named(\"My Pipeline\")\n"
"                .state(streams.state().isRunning())\n"
"                .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:196
#, fuzzy
msgid "This will expose a health check via HTTP under `/health/live`, which when queried will yield a response like this:"
msgstr "これは、 `/health/live` 以下の HTTP 経由でヘルスチェックを公開します。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:204
#, no-wrap
msgid ""
"HTTP/1.1 200 OK\n"
"Connection: keep-alive\n"
"Content-Length: 144\n"
"Content-Type: application/json;charset=UTF-8\n"
"Date: Wed, 26 Jun 2019 10:08:36 GMT\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:214
#, no-wrap
msgid ""
"{\n"
"    \"checks\": [\n"
"        {\n"
"            \"name\": \"My Pipeline\",\n"
"            \"status\": \"UP\"\n"
"        }\n"
"    ],\n"
"    \"status\": \"UP\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:221
#, fuzzy
msgid "When using a container orchestrator such as Kubernetes, you could then set up a https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/[liveness probe] for this endpoint.  If the health check fails (i.e. the streaming pipeline is not in the running state), it will return an HTTP 503 response.  This would be the indicator to the orchestrator to restart the pod of this application."
msgstr "Kubernetes のようなコンテナーオーケストレーターを使用している場合は、このエンドポイントに link:https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/[liveness プローブ] を設定することができます。ヘルスチェックが失敗した場合(つまり、ストリーミングパイプラインが実行中の状態ではない場合)、HTTP 503レスポンスを返します。これは、このアプリケーションのポッドを再起動するようにオーケストレータに指示することになります。"

#. type: Title ==
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:222
#, fuzzy, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:228
#, fuzzy
msgid "While a health check provides simple means of finding out whether the application is in a state where it can handle requests/messages or not, it is desirable to have more insight into the behaviour of the service.  E.g. it might be of interest to see how many messages have been processed by the streaming pipeline, what's the arrival rate of messages, what's the average processing time and much more."
msgstr "ヘルスチェックは、アプリケーションがリクエスト/メッセージを処理できる状態にあるかどうかを見つける簡単な手段を提供しますが、サービスの動作についてより多くの洞察を持つことが望まれます。例えば、ストリーミングパイプラインでどれだけのメッセージが処理されたか、メッセージの到着率はどれくらいか、平均処理時間はどれくらいか、その他多くのことに興味があるかもしれません。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:233
#, fuzzy
msgid "Kafka Streams comes with https://kafka.apache.org/22/javadoc/org/apache/kafka/streams/KafkaStreams.html#metrics--[rich metrics] capabilities which can help to answer these questions.  Using the MicroProfile Metrics API, these metrics can be exposed via HTTP.  From there they can be scraped by tools such as https://prometheus.io/[Prometheus] and eventually be fed to dashboard solutions such as https://grafana.com/[Grafana].  Note that exposing metrics via HTTP instead of JMX has the advantage that this also works when running the application in native mode via GraalVM."
msgstr "Kafka Streams には、これらの疑問に答えるための link:https://kafka.apache.org/22/javadoc/org/apache/kafka/streams/KafkaStreams.html#metrics--[豊富なメトリクス] 機能が搭載されています。MicroProfile Metrics API を使用して、これらのメトリクスを HTTP 経由で公開することができます。そこから link:https://prometheus.io/[Prometheus の] ようなツールによってスクレイピングされ、最終的には link:https://grafana.com/[Grafana の] ようなダッシュボードソリューションに供給することができます。JMX の代わりに HTTP 経由でメトリクスを公開することは、GraalVM を介してネイティブモードでアプリケーションを実行している場合にも動作するという利点があります。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:235
#, fuzzy
msgid "Similar to the health check case, just a bit of glue code is needed for exposing the metrics:"
msgstr "ヘルスチェックの場合と同様に、メトリクスを公開するためには、ほんの少しのグルーコードが必要です。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:243
#, no-wrap
msgid ""
"    @Inject\n"
"    MetricRegistry metricRegistry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:248
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent event) {\n"
"        // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:252
#, no-wrap
msgid ""
"        streams.start();\n"
"        exportMetrics();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:257
#, no-wrap
msgid ""
"    private void exportMetrics() {\n"
"        Set<String> processed = new HashSet<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:261
#, no-wrap
msgid ""
"        for (Metric metric : streams.metrics().values()) {                // <1>\n"
"            String name = metric.metricName().group() +\n"
"                    \":\" + metric.metricName().name();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:265
#, no-wrap
msgid ""
"            if (processed.contains(name)) {\n"
"                continue;\n"
"            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:277
#, no-wrap
msgid ""
"            // string-typed metric not supported\n"
"            if (name.contentEquals(\"app-info:commit-id\") ||               // <2>\n"
"                    name.contentEquals(\"app-info:version\")) {\n"
"                continue;\n"
"            }\n"
"            else if (name.endsWith(\"count\") || name.endsWith(\"total\")) {  // <3>\n"
"                registerCounter(metric, name);\n"
"            }\n"
"            else {\n"
"                registerGauge(metric, name);                              // <4>\n"
"            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:281
#, no-wrap
msgid ""
"            processed.add(name);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:285
#, no-wrap
msgid ""
"    private void registerGauge(Metric metric, String name) {\n"
"        Metadata metadata = new Metadata(name, MetricType.GAUGE);\n"
"        metadata.setDescription(metric.metricName().description());\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:287
#, no-wrap
msgid "        metricRegistry.register(metadata, new Gauge<Double>() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:294
#, no-wrap
msgid ""
"            @Override\n"
"            public Double getValue() {\n"
"                return (Double) metric.metricValue();\n"
"            }\n"
"        } );\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:299
#, no-wrap
msgid ""
"    private void registerCounter(Metric metric, String name) {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:301
#, fuzzy
msgid "Process all Kafka Streams metrics, using a unique name to register them"
msgstr "すべての Kafka Streams メトリクスを処理し、一意の名前を使用して登録します。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:302
#, fuzzy
msgid "Some string-typed \"metrics\" must be excluded"
msgstr "いくつかの文字列型の「メトリクス」は除外されなければなりません。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:303
#, fuzzy
msgid "All metrics whose name ends with \"total\" or \"counter\" will be exposed as counter-typed metrics"
msgstr "このような場合には、「TOTAL」または「COUNTER」で終わる名前を持つすべてのメトリクスは、カウンター型のメトリクスとして公開されます。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:304
#, fuzzy
msgid "All other metrics will be exposed as gauge-typed metrics, i.e. plain numeric values"
msgstr "他のすべてのメトリクスは、ゲージ型のメトリクス、すなわちプレーンな数値として公開されます。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:307
#, fuzzy
msgid "Once the application is started, the metrics will be exposed under `/metrics`, returning the data in the OpenMetrics format by default:"
msgstr "アプリケーションが起動すると、メトリクスは `/metrics` で公開され、デフォルトで OpenMetrics 形式のデータを返します。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:317
#, no-wrap
msgid ""
"# HELP application:stream_metrics_process_total The total number of occurrence of process operations.\n"
"# TYPE application:stream_metrics_process_total counter\n"
"application:stream_metrics_process_total 2866.0\n"
"# HELP application:stream_metrics_poll_latency_avg The average latency of poll operation.\n"
"# TYPE application:stream_metrics_poll_latency_avg gauge\n"
"application:stream_metrics_poll_latency_avg 83.3135593220339\n"
"# ...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:323
#, fuzzy
msgid "From here it's a matter of minutes to set up Prometheus to scrape this target, configure a Prometheus data source in Grafana and configure a dashboard for visualizing the metrics of interest to you.  E.g. the following shows a simple dashboard displaying the poll/process/commit rates and latencies as well as the total number of processed events in the quickstart example:"
msgstr "ここからは、このターゲットをスクレイプするためにPrometheusを設定し、GrafanaでPrometheusのデータソースを設定し、興味のあるメトリクスを可視化するためのダッシュボードを設定するのは数分の問題です。例えば、以下の例では、クイックスタートの例で処理されたイベントの総数と同様に、ポーリング/処理/コミット率とレイテンシを表示するシンプルなダッシュボードを表示しています。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:324
#, fuzzy, no-wrap
msgid "Kafka Streams metrics in Grafana"
msgstr "Grafana での Kafka Streams のメトリクス"

#. type: Target for macro image
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:324
#, no-wrap
msgid "/assets/images/kafka-streams-metrics.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:326
#, fuzzy, no-wrap
msgid "Summary and Outlook"
msgstr "概要と展望"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:332
#, fuzzy
msgid "Quarkus and Eclipse MicroProfile are a great basis for building Kafka Streams applications.  The Quarkus extension for Kafka Streams comes with everything needed to run stream processing pipelines on the JVM as well as in native mode via GraalVM.  The MicroProfile APIs for health checks and metrics can be used to expose the right information for gaining insight into running stream processing applications."
msgstr "QuarkusとEclipse MicroProfileは、Kafka Streamsアプリケーションを構築するための素晴らしい基礎となります。Kafka Streams用のQuarkusエクステンションには、ストリーム処理パイプラインをJVM上で実行するために必要なものがすべて含まれており、GraalVMを介してネイティブモードでも実行できます。ヘルスチェックやメトリクスのためのMicroProfile APIを使用して、ストリーム処理アプリケーションの実行状況を把握するための適切な情報を公開することができます。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:336
#, fuzzy
msgid "Going forward, we plan to further reduce the efforts needed for building Kafka Streams applications on Quarkus.  Instead of having to deal with the lifecycle of the pipeline yourself, it should be enough to declare a CDI producer method returning the streaming `Topology`:"
msgstr "今後は、Quarkus上でのKafka Streamsアプリケーションの構築に必要な労力をさらに削減する予定です。パイプラインのライフサイクルを自分で処理するのではなく、ストリーミングを返すCDIプロデューサーメソッドを宣言するだけで十分です `Topology` ."

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:344
#, no-wrap
msgid ""
"@Produces\n"
"public Topology buildTopology()  {\n"
"    // set up the stream topology\n"
"    StreamsBuilder builder = new StreamsBuilder();\n"
"    // builder.stream(...)\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:347
#, no-wrap
msgid ""
"    return builder.build();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:353
#, fuzzy
msgid "This means you'll be able to focus on implementing the actual pipeline logic, while the Quarkus extension would take care of everything else: configuring Kafka Streams based on the Quarkus `application.properties` file, starting the pipeline and automatically exposing healthchecks and metrics."
msgstr "これにより、実際のパイプラインロジックの実装に集中でき、Quarkusエクステンションは、Quarkus `application.properties` ファイルに基づいてKafka Streamsを設定したり、パイプラインを開始したり、ヘルスチェックやメトリクスを自動的に公開したりと、他のすべての作業を行うことができます。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:357
#, fuzzy
msgid "In case this sounds interesting to you, have an eye on the next Quarkus release announcements, as this improved functionality should be out soon.  If you got any related ideas, let us know and join the discussion in Quarkus issue https://github.com/quarkusio/quarkus/issues/2863[#2863]."
msgstr "この改善された機能はもうすぐ公開されるはずですので、興味のある方は、次のQuarkusリリースのアナウンスに注目してください。関連するアイデアがあれば、Quarkus issue link:https://github.com/quarkusio/quarkus/issues/2863[#2863] で議論に参加してください。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:361
#, fuzzy
msgid "To learn more about the Quarkus extension for Kafka Streams and its current capabilities, check out link:/guides/kafka-streams[the detailed guide].  It not only discusses the actual stream pipeline implementation, but also touches on building (distributed) interactive queries for exposing the current processing state via REST."
msgstr "Kafka Streams用のQuarkusエクステンションと現在の機能の詳細については、 link:/guides/kafka-streams[詳細なガイド] を参照してください。このガイドでは、実際のストリームパイプラインの実装だけでなく、現在の処理状態をREST経由で公開するための(分散型の)対話型クエリの構築についても触れています。"
